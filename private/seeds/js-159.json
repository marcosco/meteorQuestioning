{
    "items": [
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Okay as far as I can tell you are asking three different questions:</p>\n\n<blockquote>\n  <p>Where are they complementary to each other? (e.g. what does <a href=\"https://github.com/lvbreda/Meteor_angularjs\">https://github.com/lvbreda/Meteor_angularjs</a> bring to the table)</p>\n</blockquote>\n\n<p>AngularJS is a full stack client side framework that brings ton's of features for frontend development. </p>\n\n<p>The following things it brings to the table above standard meteor:</p>\n\n<ul>\n<li>Testing: Angular offers a complete testing framework for the client side</li>\n<li>Form Validation</li>\n<li>Localization</li>\n<li>Components (Example: <a href=\"http://angular-ui.github.io/\">http://angular-ui.github.io/</a> )</li>\n</ul>\n\n<blockquote>\n  <p>Assuming the above brings certain advantages, how do you compensate for that if using pure meteor?</p>\n</blockquote>\n\n<p>If you are using pure meteor you can use almost all possible client side libraries like for example jQuery or you can code some convenience functions from angular like form validation by hand.</p>\n\n<blockquote>\n  <p>Given that angular encourages a fairly strict separation of code on the client for MVC, how should one structure good code on the client in meteor to follow its MVVM pattern? (Does it just come inherently from having template, client module(s), and a model)</p>\n</blockquote>\n\n<p>There are many ways to structure your code. Meteor is not that opinionated about code organization. You can use <a href=\"http://docs.meteor.com/#structuringyourapp\">http://docs.meteor.com/#structuringyourapp</a> as your guidance but it really depends how you like to code. It is possible to split your code into different files in folders or to put everything into just one big file. For very small apps I prefer to keep everything in one file. </p>\n\n<p>I like to split my code into two folders:</p>\n\n<ul>\n<li>A folder for client side stuff (subfolders like Views and Assets are sometimes a great choice)</li>\n<li>A folder for server side stuff</li>\n</ul>\n\n<p>If you are looking for a good practice then you can also have a look at the <a href=\"http://telesc.pe/\">http://telesc.pe/</a> source code: <a href=\"https://github.com/SachaG/Telescope\">https://github.com/SachaG/Telescope</a></p>\n",
                    "is_accepted": true,
                    "score": 15
                },
                {
                    "body": "<p>Abigail Watson has written a good summary of how Meteor relates to other MVC frameworks in her Meteor cookbook:</p>\n\n<blockquote>\n  <p><a href=\"https://github.com/awatson1978/meteor-cookbook\">https://github.com/awatson1978/meteor-cookbook</a></p>\n</blockquote>\n\n<p>Scroll down to the \"Model, View, Controllers\" section.</p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I've seen the angular vs. meteor question asked a number of times and inevitably the answer to that question is an explanation of how meteor is much larger in scope (has DDP, deployment, all the server side stuff, and all the other things it provides).</p>\n\n<p>I want to restrict this question to only the client-side scope and things where they do somewhat overlap, especially where either one may provide additional features and/or capability in terms of writing or structuring the client side code.</p>\n\n<ul>\n<li>Where are they complementary to each other? (e.g. what does <a href=\"https://github.com/lvbreda/Meteor_angularjs\">https://github.com/lvbreda/Meteor_angularjs</a> bring to the table)</li>\n<li>Assuming the above brings certain advantages, how do you compensate for that if using pure meteor? </li>\n<li>Given that angular encourages a fairly strict separation of code on the client for MVC, how should one structure good code on the client in meteor to follow its MVVM pattern? (Does it just come inherently from having template, client module(s), and a model)</li>\n</ul>\n",
            "last_activity_date": 1401843073,
            "question_id": 16723780,
            "score": 29,
            "tags": [
                "javascript",
                "design-patterns",
                "angularjs",
                "meteor"
            ],
            "title": "Difference between angular and client-side portion of meteor where they overlap?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<blockquote>\n  <p>the value of the input text box, during onKeyPress is always the value before the change</p>\n</blockquote>\n\n<p>This is on purpose: This allows the event listener to cancel the keypress.</p>\n\n<p>If the event listeners <a href=\"https://developer.mozilla.org/en/DOM%3aevent.preventDefault\">cancels the event</a>, the value is not updated. If the event is not canceled, the value is updated, but <em>after the event listener was called</em>.</p>\n\n<p>To get the value after the field value has been updated, schedule a function to run on the next event loop. The usual way to do this is to call <code>setTimeout</code> with a timeout of <code>0</code>:</p>\n\n<pre><code>$('#field').keyup(function() {\n    var $field = $(this);\n\n    // this is the value before the keypress\n    var beforeVal = $field.val();\n\n    setTimeout(function() {\n\n        // this is the value after the keypress\n        var afterVal = $field.val();\n    }, 0);\n});\n</code></pre>\n\n<p>Try here: <a href=\"http://jsfiddle.net/Q57gY/2/\">http://jsfiddle.net/Q57gY/2/</a></p>\n\n<p><strong>Edit</strong>: Some browsers (e.g. Chrome) do not trigger keypress events for backspace; changed keypress to keyup in code.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Keep it simple. Use both <code>onKeyPress()</code> and <code>onKeyUp()</code>:</p>\n\n<pre><code>&lt;input id=\"edValue\" type=\"text\" onKeyPress=\"edValueKeyPress()\" onKeyUp=\"edValueKeyPress()\"&gt;\n</code></pre>\n\n<p>This takes care of getting the most updated string value (after key up) and also updates if the user holds down a key.</p>\n\n<p>jsfiddle: <a href=\"http://jsfiddle.net/VDd6C/8/\">http://jsfiddle.net/VDd6C/8/</a></p>\n",
                    "is_accepted": true,
                    "score": 14
                },
                {
                    "body": "<p>I normally concatenate the field's value (i.e. before it's updated) with the key associated with the key event. The following uses recent JS so would need adjusting for support in older IE's.</p>\n\n<p>Recent JS example</p>\n\n<pre><code>document.querySelector('#test').addEventListener('keypress', function(evt) {\n    var real_val = this.value + String.fromCharCode(evt.which);\n    if (evt.which == 8) real_val = real_val.substr(0, real_val.length - 2);\n    alert(real_val);\n}, false);\n</code></pre>\n\n<p>Support for older IEs example</p>\n\n<pre><code>//get field\nvar field = document.getElementById('test');\n\n//bind, somehow\nif (window.addEventListener)\n    field.addEventListener('keypress', keypress_cb, false);\nelse\n    field.attachEvent('onkeypress', keypress_cb);\n\n//callback\nfunction keypress_cb(evt) {\n    evt = evt || window.event;\n    var code = evt.which || evt.keyCode,\n        real_val = this.value + String.fromCharCode(code);\n    if (code == 8) real_val = real_val.substr(0, real_val.length - 2);\n}\n</code></pre>\n\n<p>[EDIT - this approach, by default, disables key presses for things like back space, CTRL+A. The code above accommodates for the former, but would need further tinkering to allow for the latter, and a few other eventualities. See Ian Boyd's comment below.]</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>easy...  </p>\n\n<p>In your keyPress event handler, write</p>\n\n<pre><code>void ValidateKeyPressHandler(object sender, KeyPressEventArgs e)\n{\n    var tb = sender as TextBox;\n    var startPos = tb.SelectionStart;\n    var selLen= tb.SelectionLength;\n\n    var afterEditValue = tb.Text.Remove(startPos, selLen)\n                .Insert(startPos, e.KeyChar.ToString()); \n    //  ... more here\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;asp:TextBox ID=\"txtMobile\" runat=\"server\" CssClass=\"form-control\" style=\"width:92%;  margin:0px 5px 0px 5px;\" onkeypress=\"javascript:return isNumberKey(event);\" MaxLength=\"12\"&gt;&lt;/asp:TextBox&gt;\n\n&lt;script&gt;\n    function isNumberKey(evt) {\n        var charCode = (evt.which) ? evt.which : event.keyCode;\n        if (charCode &gt; 31 &amp;&amp; (charCode &lt; 48 || charCode &gt; 57)) {\n            return false;\n        }\n        return true;\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>i am trying to get the text in a text box as the user types in it (<a href=\"http://jsfiddle.net/VDd6C/3/\">jsfiddle playground</a>):</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n    &lt;input id=\"edValue\" type=\"text\" onKeyPress=\"edValueKeyPress()\"&gt;&lt;br&gt;\n    &lt;span id=\"lblValue\"&gt;The text box contains: &lt;/span&gt;\n&lt;/body&gt;\n\n&lt;script&gt;\n    function edValueKeyPress()\n    {\n        var edValue = document.getElementById(\"edValue\");\n        var s = edValue.value;\n\n        var lblValue = document.getElementById(\"lblValue\");\n        lblValue.innerText = \"The text box contains: \"+s;\n\n        //var s = $(\"#edValue\").val();\n        //$(\"#lblValue\").text(s);    \n    }\n&lt;/script&gt;    \n\n&lt;/html&gt;\n</code></pre>\n\n<p>\u200b\nThe code runs without errors, except that the <strong><em>value</em></strong> of the <code>input text</code> box, during <code>onKeyPress</code> is always the value <em>before</em> the change:</p>\n\n<p><img src=\"http://i.stack.imgur.com/x8DkU.png\" alt=\"enter image description here\"></p>\n\n<blockquote>\n  <p><strong>Question</strong>: How do i get the text of a text box during <code>onKeyPress</code>?</p>\n</blockquote>\n\n<h2>Bonus Chatter</h2>\n\n<p>There are three events related to <em>\"the user is typing\"</em> in the HTML DOM:</p>\n\n<ul>\n<li><code>onKeyDown</code></li>\n<li><code>onKeyPress</code></li>\n<li><code>onKeyUp</code></li>\n</ul>\n\n<p>In <strong>Windows</strong>, the order of <code>WM_Key</code> messages becomes important when the user holds down a key, and the key begins to repeat:</p>\n\n<ul>\n<li><code>WM_KEYDOWN('a')</code> - user has pushed down the <kbd>A</kbd> key</li>\n<li><code>WM_CHAR('a')</code> - an <code>a</code> character has been received from the user</li>\n<li><code>WM_CHAR('a')</code> - an <code>a</code> character has been received from the user</li>\n<li><code>WM_CHAR('a')</code> - an <code>a</code> character has been received from the user</li>\n<li><code>WM_CHAR('a')</code> - an <code>a</code> character has been received from the user</li>\n<li><code>WM_CHAR('a')</code> - an <code>a</code> character has been received from the user</li>\n<li><code>WM_KEYUP('a')</code> - the user has released the <kbd>A</kbd> key</li>\n</ul>\n\n<p>Will result in five characters appearing in a text control: <code>aaaaa</code></p>\n\n<p>The important point being that the you respond to the <code>WM_CHAR</code> message, the one that repeats. Otherwise you miss events when a key is pressed.</p>\n\n<p>In <strong>HTML</strong> things are slightly different: </p>\n\n<ul>\n<li><code>onKeyDown</code></li>\n<li><code>onKeyPress</code></li>\n<li><code>onKeyDown</code></li>\n<li><code>onKeyPress</code></li>\n<li><code>onKeyDown</code></li>\n<li><code>onKeyPress</code></li>\n<li><code>onKeyDown</code></li>\n<li><code>onKeyPress</code></li>\n<li><code>onKeyDown</code></li>\n<li><code>onKeyPress</code></li>\n<li><code>onKeyUp</code></li>\n</ul>\n\n<p>Html delivers an <code>KeyDown</code> and <code>KeyPress</code> every key repeat. And the <code>KeyUp</code> event is only raised when the user releases the key.</p>\n\n<p><strong>Take aways</strong> </p>\n\n<ul>\n<li>i <strong>can</strong> respond to <code>onKeyDown</code> or <code>onKeyPress</code>, but both are still raised before the <code>input.value</code> has been updated</li>\n<li>i cannot respond to <code>onKeyUp</code>, because it doesn't happen as the text in the text-box changes.</li>\n</ul>\n\n<p><strong>Question:</strong> How do i get the text of a text-box during <code>onKeyPress</code>?</p>\n\n<h2>Bonus Reading</h2>\n\n<ul>\n<li><a href=\"http://www.electrictoolbox.com/jquery-get-set-form-values/\">Getting a form value with jQuery</a></li>\n<li><a href=\"http://stackoverflow.com/questions/4088467/jquery-get-value-in-input-text-box\">jquery get value in input text box</a></li>\n</ul>\n",
            "last_activity_date": 1411820092,
            "question_id": 11365686,
            "score": 29,
            "tags": [
                "javascript",
                "html",
                "input",
                "onkeypress"
            ],
            "title": "How to get text of an input text box during onKeyPress?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>NB: This answer is now out of date, with an update to Sprockets having this feature. See the answer below.</p>\n\n<p>===</p>\n\n<p>This is not possible with current Sprockets directives, but it seems like a handy feature.</p>\n\n<p>The other way to to manually list each file you want.</p>\n\n<p>Perhaps you could file this as a feature request over on the <a href=\"https://github.com/sstephenson/sprockets\" rel=\"nofollow\">Sprockets</a> repo? :-)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The following monkey patch solves this for me:</p>\n\n<pre><code>\nmodule Sprockets\n  class DirectiveProcessor\n    # support for: require_tree . exclude: \"\", \"some_other\"\n    def process_require_tree_directive(path = \".\", *args)\n      if relative?(path)\n        root = pathname.dirname.join(path).expand_path\n\n        unless (stats = stat(root)) && stats.directory?\n          raise ArgumentError, \"require_tree argument must be a directory\"\n        end\n\n        exclude = args.shift == 'exclude:' ? args.map {|arg| arg.sub(/,$/, '')} : []\n\n        context.depend_on(root)\n\n        each_entry(root) do |pathname|\n          if pathname.to_s == self.file or exclude.include?(pathname.basename(pathname.extname).to_s)\n            next\n          elsif stat(pathname).directory?\n            context.depend_on(pathname)\n          elsif context.asset_requirable?(pathname)\n            context.require_asset(pathname)\n          end\n        end\n      else\n        # The path must be relative and start with a `./`.\n        raise ArgumentError, \"require_tree argument must be a relative path\"\n      end\n    end\n  end\n\nend\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is possible with Sprocket's new <code>stub</code> directive which is available in Sprockets v2.2.0 and up. However, Rails 3.2 will only ever use Sprockets v2.1.3 which does not have this feature. As of now, the current Edge Rails has the <code>stub</code> directive and it will officially be in Rails 4.0 and above.</p>\n\n<p>Usage:</p>\n\n<pre><code>//= require jquery\n//= require_tree .\n//= stub unwanted_js\n</code></pre>\n\n<p><code>stub</code> directives can not be overridden by subsequent <code>require</code> or <code>include</code> directives.</p>\n\n<p>If you want to use the <code>stub</code> directive in your Rails 3.2 project you will have to switch to Edge Rails, or branch your Rails gem with its Sprockets dependency modified to version 2.2.0. </p>\n",
                    "is_accepted": true,
                    "score": 41
                },
                {
                    "body": "<p>Since the release of rails 3.2.9, it has support to lock the sporckets to version 2.2.x so that we can use the <code>//= stub</code> directive that latest sprockets have.</p>\n\n<pre><code>//= stub unwanted_js\n</code></pre>\n\n<p><a href=\"http://weblog.rubyonrails.org/2012/11/12/ann-rails-3-2-9-has-been-released/\">http://weblog.rubyonrails.org/2012/11/12/ann-rails-3-2-9-has-been-released/</a></p>\n\n<p>So, to use it, just upgrade to Rails 3.2.9</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Try better the <a href=\"https://github.com/QubitProducts/miniMerge\" rel=\"nofollow\">https://github.com/QubitProducts/miniMerge</a></p>\n\n<p>It supports not only JS and is in basic mode sprockets compatible.</p>\n\n<p>You can exclude not only on file levels but block or even lines.</p>\n\n<p>Full depenedncies managment with multiple source bases.</p>\n\n<p>I used sprockets in past and this one is better, I use it also for CSS.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>If I'm using <code>//=require_tree .</code> in application.css, is there a way to exclude particular files other than resorting to <code>//=require_directory</code> and tree organization?</p>\n\n<p>Perhaps something like <code>//= require_tree ., {except: 'something'}</code></p>\n",
            "last_activity_date": 1407249589,
            "question_id": 7602393,
            "score": 29,
            "tags": [
                "javascript",
                "ruby-on-rails",
                "sprockets"
            ],
            "title": "Rails 3.1 Sprockets require directives - is there a way to exclude particular files?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>I would use a change event not a click like this:</p>\n\n<pre><code>$('input[name=\"name-of-radio-group\"]').change( function() {\n  alert($(this).val())\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Don't use data-toggle attribute so that you can control the toggle behavior by yourself. So it will avoid 'race-condition'</p>\n\n<p>my codes:</p>\n\n<p>button group template (written in .erb, embedded ruby for ruby on rails):</p>\n\n<pre><code>&lt;div class=\"btn-group\" id=\"featuresFilter\"&gt;\n     &lt;% _.each(features, function(feature) { %&gt; &lt;button class=\"btn btn-primary\" data=\"&lt;%= feature %&gt;\"&gt;&lt;%= feature %&gt;&lt;/button&gt; &lt;% }); %&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>and javascript:</p>\n\n<pre><code>onChangeFeatures = function(e){\n        var el=e.target;\n        $(el).button('toggle');\n\n        var features=el.parentElement;\n        var activeFeatures=$(features).find(\".active\");\n        console.log(activeFeatures);\n}\n</code></pre>\n\n<p>onChangeFeatures function will be triggered once the button is clicked.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Looking at the example HTML for radio buttons on the Twitter Bootstrap page (<a href=\"http://twitter.github.com/bootstrap/base-css.html#forms\" rel=\"nofollow\">http://twitter.github.com/bootstrap/base-css.html#forms</a>), you can see that each input has a unique ID attribute, i.e. <code>optionsRadios1</code> and <code>optionsRadios2</code>.</p>\n\n<p>The relevant HTML example snippet is included here for completeness:</p>\n\n<pre>\n&lt;div class=\"controls\"&gt;\n  &lt;label class=\"radio\"&gt;\n    &lt;input type=\"radio\" checked=\"\" value=\"option1\" id=\"optionsRadios1\" name=\"optionsRadios\"&gt;\n    Option one is this and that&mdash;be sure to include why it's great\n  &lt;/label&gt;\n  &lt;label class=\"radio\"&gt;\n    &lt;input type=\"radio\" value=\"option2\" id=\"optionsRadios2\" name=\"optionsRadios\"&gt;\n    Option two can is something else and selecting it will deselect option one\n  &lt;/label&gt;\n&lt;/div&gt;\n</pre>\n\n<p>So you can use a jQuery click event, and then use the <code>this</code> reference to look at the id of the HTML element that was clicked.</p>\n\n<pre>\n$('.controls').find('input').bind('click',function(event){\n  if($(this).attr('id')==='optionsRadios1'){\n    alert($(this).attr('id'));\n  } else {\n    //... call some other function\n  }\n});\n</pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is a really annoying one. What I ended up using is this:</p>\n\n<p>First, create a group of simple buttons with no <code>data-toggle</code> attribute.</p>\n\n<pre><code>&lt;div id=\"selector\" class=\"btn-group\"&gt;\n    &lt;button type=\"button\" class=\"btn active\"&gt;Day&lt;/button&gt;\n    &lt;button type=\"button\" class=\"btn\"&gt;Week&lt;/button&gt;\n    &lt;button type=\"button\" class=\"btn\"&gt;Month&lt;/button&gt;\n    &lt;button type=\"button\" class=\"btn\"&gt;Year&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Next, write an event handler that simulates the radio button effect by 'activating' the clicked one and 'deactivating' all other buttons.</p>\n\n<pre><code>$('#selector button').click(function() {\n    $('#selector button').addClass('active').not(this).removeClass('active');\n\n    // TODO: insert whatever you want to do with $(this) here\n});\n</code></pre>\n\n<p><strong>EDIT</strong>: <a href=\"https://stackoverflow.com/users/1157545/nick\">Nick</a> suggested an even cleaner version in the comments below:</p>\n\n<pre><code>$('#selector button').click(function() {\n    $(this).addClass('active').siblings().removeClass('active');\n\n    // TODO: insert whatever you want to do with $(this) here\n});\n</code></pre>\n\n<p>If you agree that this is even better, please upvote his comment! I did, and I'm gonna use his version instead of mine from now on.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>I needed to do the same thing for a chart where you could select the period of the data that should be displayed. </p>\n\n<p>Therefore I introduced the CSS class 'btn-group-radio' and used the following unobtrusive javascript one-liner:</p>\n\n<pre><code>// application.js\n$(document).ready(function() {\n  $('.btn-group-radio .btn').click(function() {\n    $(this).addClass('active').siblings('.btn').removeClass('active');\n  });\n});\n</code></pre>\n\n<p>And here is the HTML:</p>\n\n<pre><code>&lt;!-- some arbitrary view --&gt;\n&lt;div class=\"btn-group btn-group-radio\"&gt;\n  &lt;%= link_to '1W', charts_path('1W'), class: 'btn btn-default active', remote: true %&gt;\n  &lt;%= link_to '1M', charts_path('1M'), class: 'btn btn-default', remote: true %&gt;\n  &lt;%= link_to '3M', charts_path('3M'), class: 'btn btn-default', remote: true %&gt;\n  &lt;%= link_to '6M', charts_path('6M'), class: 'btn btn-default', remote: true %&gt;\n  &lt;%= link_to '1Y', charts_path('1Y'), class: 'btn btn-default', remote: true %&gt;\n  &lt;%= link_to 'All', charts_path('all'), class: 'btn btn-default', remote: true %&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>For Bootstrap 3</strong> the default radio/button-group structure is :</p>\n\n<pre><code>&lt;div class=\"btn-group\" data-toggle=\"buttons\"&gt;\n    &lt;label class=\"btn btn-primary\"&gt;\n        &lt;input type=\"radio\" name=\"options\" id=\"option1\"&gt; Option 1\n    &lt;/label&gt;\n    &lt;label class=\"btn btn-primary\"&gt;\n        &lt;input type=\"radio\" name=\"options\" id=\"option2\"&gt; Option 2\n    &lt;/label&gt;\n    &lt;label class=\"btn btn-primary\"&gt;\n        &lt;input type=\"radio\" name=\"options\" id=\"option3\"&gt; Option 3\n    &lt;/label&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And you can select the active one like this:</p>\n\n<pre><code>$('.btn-primary').on('click', function(){\n    alert($(this).find('input').attr('id'));\n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I see a lot of complicated answers, while this is super simple in Bootstrap 3:</p>\n\n<p>Step 1: Use <a href=\"http://getbootstrap.com/javascript/#buttons-checkbox-radio\" rel=\"nofollow\">the official example code</a> to create your radio button group, and give the container an id:</p>\n\n<pre><code>&lt;div id=\"myButtons\" class=\"btn-group\" data-toggle=\"buttons\"&gt;\n  &lt;label class=\"btn btn-primary active\"&gt;\n    &lt;input type=\"radio\" name=\"options\" id=\"option1\" autocomplete=\"off\" checked&gt; Radio 1 (preselected)\n  &lt;/label&gt;\n  &lt;label class=\"btn btn-primary\"&gt;\n    &lt;input type=\"radio\" name=\"options\" id=\"option2\" autocomplete=\"off\"&gt; Radio 2\n  &lt;/label&gt;\n  &lt;label class=\"btn btn-primary\"&gt;\n    &lt;input type=\"radio\" name=\"options\" id=\"option3\" autocomplete=\"off\"&gt; Radio 3\n  &lt;/label&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Step 2: Use this jQuery handler:</p>\n\n<pre><code>$(\"#myButtons :input\").change(function() {\n    console.log(this); // points to the clicked input button\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a Twitter Bootstrap buttons-radio and hook an onclick event to it. But how do I check which of the buttons that got triggered?</p>\n\n<p>My first thought was to simply check for the class 'active', but this should create a race condition (result depends on whether the Twitter Bootstrap event or my own onclick event is handled first).</p>\n",
            "last_activity_date": 1424339479,
            "question_id": 9262827,
            "score": 28,
            "tags": [
                "javascript",
                "jquery",
                "javascript-events",
                "twitter-bootstrap",
                "html5"
            ],
            "title": "Twitter Bootstrap onclick event on buttons-radio"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Use the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Math/round\"><code>Math.round()</code></a> function to round the result to the nearest integer.</p>\n",
                    "is_accepted": true,
                    "score": 59
                },
                {
                    "body": "<pre><code>//method 1\nMath.ceil(); // rounds up\nMath.floor(); // rounds down\nMath.round(); // does method 2 in 1 call\n\n//method 2\nvar number = 1.5; //float\nvar a = parseInt(number); // to int\nnumber -= a; // get numbers on right of decimal\n\nif(number &lt; 0.5) // if less than round down\n    round_down();\nelse // round up if more than\n    round_up();\n</code></pre>\n\n<p>either one or a combination will solve your question</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>Use <code>Math.round</code> to round the number to the nearest integer:</p>\n\n<pre><code>total = Math.round(x/15*100);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>total = Math.round(total);\n</code></pre>\n\n<p>Should do it.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I use Math.Round and at times need to add methods like:</p>\n\n<pre><code>function fnRound(val)\n{\n    return Math.round(val*10)/10;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I have the following code to calculate a certain percentage:</p>\n\n<pre><code>var x = 6.5;\nvar total;\n\ntotal = x/15*100;\n\n// Result  43.3333333333\n</code></pre>\n\n<p>What I want to have as a result is the exact number <code>43</code> and if the total is <code>43.5</code> it should be rounded to <code>44</code></p>\n\n<p>Is there way to do this in JavaScript?</p>\n",
            "last_activity_date": 1414611738,
            "question_id": 6968042,
            "score": 28,
            "tags": [
                "javascript",
                "operators",
                "rounding"
            ],
            "title": "How can I round to whole numbers in JavaScript?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p><strong>The Code</strong></p>\n\n<pre><code>var seconds = (_final.getTime() - _initial.getTime())/1000;\n</code></pre>\n\n<p><hr/>\n<strong>The explanation</strong></p>\n\n<p>You need to call the <code>getTime()</code> method for the Date objects, and then simply subtract them and divide by a 1000 (since it's originally in milliseconds). As an extra fact, when you're calling the <code>getDate()</code> method, you're in fact getting the day of the month as an integer between 1 and 31 (not zero based) as opposed to the epoch time you'd get from calling the <code>getTime()</code> method, representing the number of milliseconds since <em>January 1st 1970, 00:00</em></p>\n\n<hr>\n\n<p><strong>Useful docs for this answer:</strong></p>\n\n<ul>\n<li><a href=\"http://en.wikipedia.org/wiki/Unix_time\">Why 1970?</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ie/cd9w2te4%28v=vs.94%29.aspx\">Date object</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ie/7hcawkw2%28v=vs.94%29.aspx\">Date's getTime method</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ie/217fw5tk%28v=vs.94%29.aspx\">Date's getDate method</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 48
                },
                {
                    "body": "<p>Try this:-</p>\n\n<pre><code>var t1 = new Date(YYYY, MM, DD, 0, 0, 0, 0)\nvar t2 = new Date(ZZZZ, NN, EE, 0, 0, 0, 0)\nvar dif = t1.getTime() - t2.getTime()\n\nvar Seconds_from_T1_to_T2 = dif / 1000;\nvar Seconds_Between_Dates = Math.abs(Seconds_from_T1_to_T2);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                }
            ],
            "body": "<p>I'm trying to get a difference between two dates in seconds. The logic would be like this :</p>\n\n<ul>\n<li>set an initial date which would be now;</li>\n<li>set a final date which would be the initial date plus some amount of seconds in future ( let's say 15 for instance )</li>\n<li>get the difference between those two ( the amount of seconds )</li>\n</ul>\n\n<p>The reason why I'm doing it it with dates it's because the final date / time depends on some other variables and it's never the same ( it depends on how fast a user does something ) and I also store the initial date for other things.</p>\n\n<p>I've been trying something like this : </p>\n\n<pre><code>var _initial = new Date(),\n    _initial = _initial.setDate(_initial.getDate()),\n    _final = new Date(_initial);\n    _final = _final.setDate(_final.getDate() + 15 / 1000 * 60);\n\nvar dif = Math.round((_final - _initial) / (1000 * 60));\n</code></pre>\n\n<p>The thing is that I never get the right difference. I tried dividing by <code>24 * 60</code> which would leave me with the seconds, but I never get it right. So what is it wrong with my logic ? I might be making some stupid mistake as it's quite late, but it bothers me that I cannot get it to work :)</p>\n",
            "last_activity_date": 1382813444,
            "question_id": 13894632,
            "score": 27,
            "tags": [
                "javascript",
                "date"
            ],
            "title": "Get time difference between two dates in seconds"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>You should use <a href=\"http://docs.angularjs.org/api/ng.%24rootScope.Scope#%24apply\">$scope.$apply()</a> when you execute an angular expression from outside of the angular framework. </p>\n\n<pre><code>function countController($scope){\n    $scope.countDown = 10;    \n    var timer = setInterval(function(){\n        $scope.countDown--;\n        $scope.$apply();\n        console.log($scope.countDown);\n    }, 1000);  \n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/andreev_artem/48Fm2/\">http://jsfiddle.net/andreev_artem/48Fm2/</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Please take a look at this example here. It is a simple example of a count up! Which I think you could easily modify to create a count down. </p>\n\n<p><strong><a href=\"http://jsfiddle.net/ganarajpr/LQGE2/\">http://jsfiddle.net/ganarajpr/LQGE2/</a></strong></p>\n\n<h2>JavaScript code:</h2>\n\n<pre><code>function AlbumCtrl($scope,$timeout) {\n    $scope.counter = 0;\n    $scope.onTimeout = function(){\n        $scope.counter++;\n        mytimeout = $timeout($scope.onTimeout,1000);\n    }\n    var mytimeout = $timeout($scope.onTimeout,1000);\n\n    $scope.stop = function(){\n        $timeout.cancel(mytimeout);\n    }\n}\n</code></pre>\n\n<h2>HTML markup:</h2>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html ng-app&gt;\n&lt;head&gt;\n    &lt;script src=\"http://code.angularjs.org/angular-1.0.0rc11.min.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"http://documentcloud.github.com/underscore/underscore-min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div ng-controller=\"AlbumCtrl\"&gt;\n    {{counter}}\n    &lt;button ng-click=\"stop()\"&gt;Stop&lt;/button&gt;    \n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p><a href=\"https://groups.google.com/forum/?fromgroups=#!topic/angular/2MOB5U6Io0A\" rel=\"nofollow\">https://groups.google.com/forum/?fromgroups=#!topic/angular/2MOB5U6Io0A</a></p>\n\n<p>Some great jsfiddle's by Igor Minar showing the use of $defer and wrapping $apply in a setInterval call.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I updated Mr. ganaraj answer to show stop and resume functionality and added angular js filter to format countdown timer</p>\n\n<p><a href=\"http://jsfiddle.net/aboodysa/7am57/7/\" rel=\"nofollow\">it is here on jsFiddle</a></p>\n\n<p>controller code</p>\n\n<pre><code>'use strict';\nvar myApp = angular.module('myApp', []);\nmyApp.controller('AlbumCtrl', function($scope,$timeout) {\n    $scope.counter = 0;\n    $scope.stopped = false;\n    $scope.buttonText='Stop';\n    $scope.onTimeout = function(){\n        $scope.counter++;\n        mytimeout = $timeout($scope.onTimeout,1000);\n    }\n    var mytimeout = $timeout($scope.onTimeout,1000);\n    $scope.takeAction = function(){\n        if(!$scope.stopped){\n            $timeout.cancel(mytimeout);\n            $scope.buttonText='Resume';\n        }\n        else\n        {\n            mytimeout = $timeout($scope.onTimeout,1000);\n            $scope.buttonText='Stop';\n        }\n            $scope.stopped=!$scope.stopped;\n    }   \n});\n</code></pre>\n\n<p>filter-code adapted from RobG from <a href=\"http://stackoverflow.com/questions/13023756/create-a-timer-countdown-using-hours-minutes-seconds-from-a-future-date\">stackoverflow</a> </p>\n\n<pre><code>myApp.filter('formatTimer', function() {\n  return function(input)\n    {\n        function z(n) {return (n&lt;10? '0' : '') + n;}\n        var seconds = input % 60;\n        var minutes = Math.floor(input / 60);\n        var hours = Math.floor(minutes / 60);\n        return (z(hours) +':'+z(minutes)+':'+z(seconds));\n    };\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As of version 1.3 there's a service in module ng: <code>$interval</code></p>\n\n<pre><code>function countController($scope, $interval){\n    $scope.countDown = 10;    \n    $interval(function(){console.log($scope.countDown--)},1000,0);\n}\u200b\u200b\n</code></pre>\n\n<p><br>use with caution:</p>\n\n<blockquote>\n  <p>Note: Intervals created by this service must be explicitly destroyed\n  when you are finished with them. In particular they are not\n  automatically destroyed when a controller's scope or a directive's\n  element are destroyed. You should take this into consideration and\n  make sure to always cancel the interval at the appropriate moment. See\n  the example below for more details on how and when to do this.</p>\n</blockquote>\n\n<p>From: <a href=\"http://docs.angularjs.org/api/ng/service/\">http://docs.angularjs.org/api/ng/service/</a>$interval</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Even easier, a pre-built directive:</p>\n\n<p><a href=\"http://siddii.github.io/angular-timer/\">http://siddii.github.io/angular-timer/</a></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<pre><code>function timerCtrl ($scope,$interval) {\n    $scope.seconds = 0;\n    var timer = $interval(function(){\n        $scope.seconds++;\n        $scope.$apply();\n        console.log($scope.countDown);\n    }, 1000);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It might help to \"How to write the code for countdown watch in AngularJS\"</p>\n\n<p><em>Step 1 : HTML Code-sample</em></p>\n\n<pre><code>&lt;div ng-app ng-controller=\"ExampleCtrl\"&gt;\n    &lt;div ng-show=\"countDown_text &gt; 0\"&gt;Your password is expired in 180 Seconds.&lt;/div&gt;\n    &lt;div ng-show=\"countDown_text &gt; 0\"&gt;Seconds left {{countDown_text}}&lt;/div&gt;\n    &lt;div ng-show=\"countDown_text == 0\"&gt;Your password is expired!.&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><em>Step 2 : The AngulaJs code-sample</em></p>\n\n<pre><code>function ExampleCtrl($scope, $timeout) {\n  var countDowner, countDown = 10;\n  countDowner = function() {\n    if (countDown &lt; 0) {\n      $(\"#warning\").fadeOut(2000);\n      countDown = 0;\n      return; // quit\n    } else {\n      $scope.countDown_text = countDown; // update scope\n      countDown--; // -1\n      $timeout(countDowner, 1000); // loop it again\n    }\n  };\n\n  $scope.countDown_text = countDown;\n  countDowner()\n}\n</code></pre>\n\n<p><em>The full example over countdown watch in AngularJs as given below.</em></p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n\n&lt;head&gt;\n  &lt;title&gt;AngularJS Example - Single Timer Example&lt;/title&gt;\n  &lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.min.js\"&gt;&lt;/script&gt;\n  &lt;script&gt;\n    function ExampleCtrl($scope, $timeout) {\n      var countDowner, countDown = 10;\n      countDowner = function() {\n        if (countDown &lt; 0) {\n          $(\"#warning\").fadeOut(2000);\n          countDown = 0;\n          return; // quit\n        } else {\n          $scope.countDown_text = countDown; // update scope\n          countDown--; // -1\n          $timeout(countDowner, 1000); // loop it again\n        }\n      };\n\n      $scope.countDown_text = countDown;\n      countDowner()\n    }\n  &lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n  &lt;div ng-app ng-controller=\"ExampleCtrl\"&gt;\n    &lt;div ng-show=\"countDown_text &gt; 0\"&gt;Your password is expired in 180 Seconds.&lt;/div&gt;\n    &lt;div ng-show=\"countDown_text &gt; 0\"&gt;Seconds left {{countDown_text}}&lt;/div&gt;\n    &lt;div ng-show=\"countDown_text == 0\"&gt;Your password is expired!.&lt;/div&gt;\n  &lt;/div&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I would like make a countDown with Angular js. this is my code:</p>\n\n<p>Html File</p>\n\n<pre><code>&lt;div ng-app ng-controller = \"countController\"&gt; {{countDown}} &lt;div&gt;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\n</code></pre>\n\n<p>js File</p>\n\n<pre><code>function countController($scope){\n    $scope.countDown = 10;    \n    var timer = setInterval(function(){$scope.countDown--; console.log($scope.countDown)},1000);  \n}\u200b\u200b\n</code></pre>\n\n<p>in console.log it works I have a countdown but in {{countdown}} refresh it doesn't \ncould you help me please? thanks!</p>\n",
            "last_activity_date": 1419055181,
            "question_id": 12050268,
            "score": 27,
            "tags": [
                "javascript",
                "html",
                "templates",
                "countdown",
                "angularjs"
            ],
            "title": "angularjs make a simple countdown"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>It looks like the answer is <strong>No</strong>. I have been searching for behavior like this for quite a while. I have not been able to come up with any passable solution. <a href=\"http://stackoverflow.com/q/598878/143739\">This SO question</a> seems similar. Python has the nice <code>locals</code> keyword.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This is currently possible in environments with Proxies. That would be node > 0.6 run as <code>node --harmony_proxies</code> or >0.7 with <code>node --harmony</code>. Chromium Canary (not sure if it's out of that yet) in about:flags at the bottom, experimental javascript. Firefox has had it for a while with no flags.</p>\n\n<p>So this probably won't work when ES6 becomes more official, but it works to an extent now.</p>\n\n<pre><code>  var target = (function(){\n    var handler = Proxy.create(Proxy.create({\n      get: function(r, trap){\n        return function(name,val,c,d){\n          if (trap === 'get' || trap === 'set') {\n            name = val;\n            val = c;\n          }\n          console.log('\"'+trap + '\" invoked on property \"'+name+'\" ' + (val?' with value \"'+val+'\"':''));\n          switch (trap) {\n            case 'get': return target[name];\n            case 'set': return target[name] = val;\n            case 'has': return name in target;\n            case 'delete': return delete target;\n            case 'keys': return Object.keys(target);\n            case 'hasOwn': return Object.hasOwnProperty.call(target, name);\n            case 'getPropertyDescriptor':\n            case 'getOwnPropertyDescriptor': return Object.getOwnPropertyDescriptor(target, name);\n            case 'getPropertyNames':\n            case 'getOwnPropertyNames': return Object.getOwnPropertyNames(target);\n            case 'defineProperty': return Object.defineProperty(target, name, val);\n          }\n        }\n      }\n    }))\n\n    var target = {\n      x: 'stuff',\n      f: { works: 'sure did' },\n      z: ['overwritten?']\n    };\n\n\n    with (handler){\n      var z = 'yes/no';\n      if (x) {\n        //x\n      } else {\n        x = true;\n      }\n      console.log(f.works);\n      if (f.works) {\n        f.works = true;\n        delete f;\n      }\n\n    }\n    return target\n  })()\n   // \"getPropertyDescriptor\" invoked on property \"z\" \n   // \"getPropertyDescriptor\" invoked on property \"z\" \n   // \"getPropertyDescriptor\" invoked on property \"x\" \n   // \"get\" invoked on property \"x\" \n   // \"getPropertyDescriptor\" invoked on property \"console\" \n   // \"getPropertyDescriptor\" invoked on property \"f\" \n   // \"get\" invoked on property \"f\" \n   // sure did\n   // \"getPropertyDescriptor\" invoked on property \"f\" \n   // \"get\" invoked on property \"f\" \n   // \"getPropertyDescriptor\" invoked on property \"f\" \n   // \"get\" invoked on property \"f\" \n   // \"getPropertyDescriptor\" invoked on property \"f\" \n\n   target: { x: 'Stuff', f: { works: true },  z: ['overwritten?'] }\n</code></pre>\n\n<p>Hit or miss and you need to take care not to blow up your browser by simply looking at a Proxy in the debugger. I had to wrap that thing in a closure to keep the proxy from ending up in the global scope or it crashed the frame every single time. Point is that it works to some extent, where nothing else does.</p>\n",
                    "is_accepted": true,
                    "score": 4
                }
            ],
            "body": "<p>There's a few previous questions on StackOverflow questioning how one goes about accessing local variables via the scope chain, like if you wanted to reference a local variables using bracket notation and a string, you'd need something like <code>__local__[\"varName\"]</code>. Thus far I haven't found even the hackiest method for accomplishing this, and haven't come up with a method after hours of exploiting every trick I know.</p>\n\n<p>The purpose for it is to implement getters/setters on arbitrary unparented variables. Object.defineProperties or <code>__defineGet/Setter__</code> require a context to be called on. For properties in the global or window contexts you can accomplish the goal of having a setter/getter for direct references to the object.</p>\n\n<pre><code>Object.defineProperty(this, \"glob\", {get: function(){return \"direct access\"})\nconsole.log(glob); //\"direct access\"\n</code></pre>\n\n<p>Even in my tests with a custom extension I compiled into a modified Chromium that runs prior to any window creation where the context is the actual global context, and even trying to call <code>this</code> directly in the global context <em>crashes</em> my program, I can pull this off without a hitch:</p>\n\n<pre><code>Object.defineProperty(Object.prototype, \"define\", {\n    value: function(name, descriptor){\n        Object.defineProperty(this, name, descriptor);\n    }\n};\ndefine(\"REALLYglobal\", {get: function(){ return \"above window context\"; }});\n</code></pre>\n\n<p>And it is then available in all frames created later as a global routed through the specified getter/setter. The old <code>__defineGet/Setter__</code> also works in that context without specifying what to call it on (doesn't work in Firefox though, the method above does).</p>\n\n<p>So basically it's possible to define get/set guards for any variable on an object, including the window/global context with direct call to the object (you don't need <code>window.propname</code>, just <code>propname</code>). This is the issue with being unable to reference unparented scoped variables, being the only type that can be in an accessible scope but have no addressable container. Of course they're also the most commonly used too so it's not an edge case. This problem also transcends the current implementation of Proxies in ES6/Harmony since it's a problem specifically with being unable to address a local object's container with the language's syntax.</p>\n\n<p>The reason I want to be able to do this is that it's the only barrier to allow overloading of most math operators for use in complex objects like arrays and hashes and deriving a complex resulting value. I need to be able to hook into the setter in cases where a value is being set on an object type I've set up for overloading. No problem if the object can be global or can be a contained in a parent object, which is probably what I'll just go with. It's still useful with <code>a.myObject</code>, but the goal is to make it as transparently usable as possible.</p>\n\n<p>Not only that, but it'd just be really useful to be able to accomplish something like this:</p>\n\n<pre><code>var point3d = function(){\n    var x, y, z;\n    return {\n        get: function(){ return [x, y, z]; },\n        set: function(vals){ x=vals[0]; y=vals[1]; z=vals[2]; }\n    };\n};\n</code></pre>\n\n<p>(That is similar to ES6's destructuring but has more general applications for implementing functionality attached to getting/setting and not just transporting complex values). Even this basic code will completely fail:</p>\n\n<pre><code>var x = {myname: \"intercept valueOf and :set: to overload math ops!\", index: 5};\nx++; //x is now NaN if you don't implement a setter somehow\n</code></pre>\n\n<p>I don't care how hacky the solution is, at this point it's just an intense curiosity for me as to whether it can be accomplished, even if it requires breaking every best practice that exists. I've crashed Firefox and Chrome a few hundred times in pursuit of this so far by doing things like redefining/intercepting/modifying <code>Object.prototype.valueOf/toString</code>, <code>Function.prototype</code> <code>Function.prototype.constructor</code>, <code>Function.prototype.call/apply</code>, <code>arguments.callee.caller</code>, etc. with infinite recursion errors and whatnot in attempts to jury rig contexts retroactively. The only thing that I've been able to make work is wrapping basically the whole thing with eval and dynamically building code chunks, which is a bridge too far for me to ever actually use. The only other remotely successful route was in using <code>with</code> combined with pre-defining all local variables on a container, but that's obviously very intrusive on top of the issues with using <code>with</code>.</p>\n",
            "last_activity_date": 1328258865,
            "question_id": 7400250,
            "score": 27,
            "tags": [
                "javascript",
                "scope",
                "closures",
                "local",
                "setter"
            ],
            "title": "Defining Setter/Getter for an unparented local variable: impossible?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You can use 'conditional catch' blocks. e.g.:</p>\n\n<pre><code>try {\n  ...\n  throwSpecificError();\n  ...\n}\ncatch (e if e.sender === \"specific\") {\n  specificHandler(e);\n}\ncatch (e if e.sender === \"unspecific\") {\n  unspecificHandler(e);\n}\ncatch (e) {\n  // don't know what to do\n  throw e;\n}\n</code></pre>\n\n<p>This gives something more akin to typed exception handling used in Java, at least syntactically. </p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>To create custom exceptions, you can inherit from the Error object:</p>\n\n<pre><code>function SpecificError () {\n\n}\n\nSpecificError.prototype = new Error();\n\n// ...\ntry {\n  throw new SpecificError;\n} catch (e) {\n  if (e instanceof SpecificError) {\n   // specific error\n  } else {\n    throw e; // let others bubble up\n  }\n}\n</code></pre>\n\n<p>A minimalistic approach, without inheriting from Error, could be throwing a simple object having a name and a message properties:</p>\n\n<pre><code>function throwSpecificError() {\n  throw {\n    name: 'SpecificError',\n    message: 'SpecificError occurred!'\n  };\n}\n\n\n// ...\ntry {\n  throwSpecificError();\n} catch (e) {\n  if (e.name == 'SpecificError') {\n   // specific error\n  } else {\n    throw e; // let others bubble up\n  }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 40
                },
                {
                    "body": "<h1><code>try-catch-finally.js</code></h1>\n\n<p><a href=\"https://github.com/c24w/try-catch-finally.js\" rel=\"nofollow\"><strong>https://github.com/c24w/try-catch-finally.js</strong></a></p>\n\n<hr>\n\n<h2>Example</h2>\n\n<pre><code>_try(function () {\n    throw 'My error';\n})\n.catch(Error, function (e) {\n    console.log('Caught Error: ' + e);\n})\n.catch(String, function (e) {\n    console.log('Caught String: ' + e);\n})\n.catch(function (e) {\n    console.log('Caught other: ' + e);\n})\n.finally(function () {\n    console.log('Error was caught explicitly');\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How would you implement different types of errors, so you'd be able to catch specific ones and let others bubble up..?\n<br /><br />\nOne way to achieve this is to modify the prototype of the <code>Error</code> object:</p>\n\n<pre><code>Error.prototype.sender = \"\";\n\n\nfunction throwSpecificError()\n{\n    var e = new Error();\n\n    e.sender = \"specific\";\n\n    throw e;\n}\n</code></pre>\n\n<p>Catch specific error:</p>\n\n<pre><code>try\n{\n    throwSpecificError();\n}\n\ncatch (e)\n{\n    if (e.sender !== \"specific\") throw e;\n\n    // handle specific error\n}\n</code></pre>\n\n<p><br />\nHave you guys got any alternatives?</p>\n",
            "last_activity_date": 1391525561,
            "question_id": 1433558,
            "score": 27,
            "tags": [
                "javascript",
                "error-handling"
            ],
            "title": "Handling specific errors in JavaScript (think exceptions)"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Usually so you can keep a reference to <code>this</code> inside a scope in which <code>this</code> refers to something else (like a callback function, for example).</p>\n\n<p>Consider this example, in which the click event handler function has a different context to what you may expect (<code>this</code> doesn't refer to an instance of <code>MyClass</code>):</p>\n\n<pre><code>var MyClass = function (elem) {\n    this.elem = elem;\n    this.name = \"James\";\n    elem.addEventListener(\"click\", function () {\n        alert(this.name); //oops\n    }, false);\n};\n</code></pre>\n\n<p>Now consider this example, in which we store a reference to the value of <code>this</code> inside the constructor function, and use that inside the callback function:</p>\n\n<pre><code>var MyClass = function (elem) {\n    var me = this;\n    this.elem = elem;\n    this.name = \"James\";\n    elem.addEventListener(\"click\", function () {\n        alert(me.name); //works!\n    }, false);\n};\n</code></pre>\n\n<p>The callback function can refer to a variable that was declared in the outer function, even after that function has returned (the <code>MyClass</code> constructor returns as soon as it's executed the <code>addEventListener</code>). This is a demonstration of a <em>closure</em>.</p>\n",
                    "is_accepted": true,
                    "score": 37
                },
                {
                    "body": "<p>when using an objects method inside of a callback function <code>this</code> will refer to the function you are in so <code>me</code> is used to reference another object</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Basically this utilizes <em>closure</em> in javascript. <a href=\"http://jibbering.com/faq/notes/closures/\" rel=\"nofollow\">Read this about closure.</a></p>\n\n<p>It is used to carry the particular instance of <code>this</code> to function calls where <code>this</code> has a different meaning.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Though of course closures are the more obvious reason for doing this, I just wanted to add that another reason can be to reduce the size of the minified version of a javascript file.</p>\n\n<p><code>this</code> as a keyword cannot be renamed in the process of minifying the file, while a local variable can. In other words, whenever you would use this (4 characters), instead a 1 character local variable can be used.</p>\n\n<p>Consider the following <a href=\"http://docs.sencha.com/extjs/4.2.2/source/Store.html#Ext-data-Store-method-filterBy\" rel=\"nofollow\">example function</a> of ExtJS's <a href=\"http://docs.sencha.com/extjs/4.2.2/#!/api/Ext.data.Store\" rel=\"nofollow\"><code>Ext.data.Store</code></a>:</p>\n\n<pre><code>filterBy: function(fn, scope) {\n    var me = this;\n\n    me.snapshot = me.snapshot || me.data.clone();\n    me.data = me.queryBy(fn, scope || me);\n    me.fireEvent('datachanged', me);\n    me.fireEvent('refresh', me);\n}\n</code></pre>\n\n<p>(note there's no closure involved here)</p>\n\n<p>and its minified version:</p>\n\n<pre><code>filterBy:function(b,a){var c=this;c.snapshot=c.snapshot||c.data.clone();c.data=c.queryBy(b,a||c);c.fireEvent(\"datachanged\",c);c.fireEvent(\"refresh\",c)}\n</code></pre>\n\n<p>(151 characters/bytes)</p>\n\n<p>Now, let's compare it to the minified version if we did not assign <code>this</code> to a local variable:</p>\n\n<pre><code>filterBy:function(b,a){this.snapshot=this.snapshot||this.data.clone();this.data=this.queryBy(b,a||this);this.fireEvent(\"datachanged\",this);this.fireEvent(\"refresh\",this)}\n</code></pre>\n\n<p>(170 characters/bytes)</p>\n\n<p>As you can see the version with a local variable only takes 88% of the size of the function which uses <code>this</code> each time instead.</p>\n\n<p>Especially in big libraries this can reduce the file size quite a bit.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Setting <code>me=this</code> allows you to use the <code>this</code> variable from an outer scope in an inner scope. </p>\n\n<pre><code>var Outer= function () {\n        var me = this;\n        me.x = \"outerx\";\n        me.inner = {\n            x: \"innerx\",\n            displayValues: function () {\n                console.log(me.x); //outerx\n                console.log(this.x); //innerx\n            }\n        };\n    };\n\n    new Outer().inner.displayValues();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I saw in many source codes:</p>\n\n<pre><code>var me = this;\n</code></pre>\n\n<p>specially in Ext-JS 4 (JS framework). Why doing such thing? Is there any other reason or you just want for a variable to be called like \"me\" instead of \"this\"?</p>\n\n<p>Thank you.</p>\n",
            "last_activity_date": 1423097534,
            "question_id": 13364503,
            "score": 26,
            "tags": [
                "javascript",
                "extjs"
            ],
            "title": "JavaScript &quot;me&quot; = &quot;this&quot;, why?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Don't escape the underscore. Might be causing some whackness.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<blockquote>\n  <p>However, the code below allows spaces.</p>\n</blockquote>\n\n<p>No, it doesn't.  However, it will only match on input with a length of 1.  For inputs with a length greater than or equal to 1, you need a <code>+</code> following the character class:</p>\n\n<pre><code>var regexp = /^[a-zA-Z0-9-_]+$/;\nvar check = \"checkme\";\nif (check.search(regexp) == -1)\n    { alert('invalid'); }\nelse\n    { alert('valid'); }\n</code></pre>\n\n<p>Note that neither the <code>-</code> (in this instance) nor the <code>_</code> need escaping.</p>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<p>You should use String.match() instead of String.search() if you're only interested in a boolean value. You also need to repeat your character class as explained in the answer by Andy E:</p>\n\n<pre><code>var regexp = /^[a-zA-Z0-9-_]+$/;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Trying to check input against a regular expression.</p>\n\n<p>The field should only allow alphanumeric characters, dashes and underscores and should NOT allow spaces.</p>\n\n<p>However, the code below allows spaces.</p>\n\n<p>What am I missing?</p>\n\n<pre><code>var regexp = /^[a-zA-Z0-9\\-\\_]$/;\nvar check = \"checkme\";\nif (check.search(regexp) == -1)\n    { alert('invalid'); }\nelse\n    { alert('valid'); }\n</code></pre>\n\n<p>Thanks in advance.</p>\n",
            "last_activity_date": 1330770568,
            "question_id": 5887678,
            "score": 26,
            "tags": [
                "javascript",
                "regex"
            ],
            "title": "Alphanumeric, dash and underscore but no spaces regular expression check Javascript"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>The viewport is the part of the webpage that the user can currently see. The scrollbars move the viewport to show other parts of the page.</p>\n\n<p><a href=\"http://andylangton.co.uk/articles/javascript/get-viewport-size-javascript/\">Follow this article's instructions to get the viewport dimensions in Javascript</a>.</p>\n",
                    "is_accepted": true,
                    "score": 25
                },
                {
                    "body": "<p>The viewport is a virtual area used by the browser rendering engine to determine how content is scaled and sized when it is initially rendered on the current screen. This will help you:</p>\n\n<p><code>&lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no\" /&gt;\n</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I think the <code>ViewPort</code> is just an area to display the web content in the Browser. And Different browsers have its own setting for the size of <code>ViewPort</code>, For example , The default <code>ViewPort</code> width of <code>Safari</code> is 980 pixels. So If the actually web page you want see is smaller than 980 pixels. There should be a blank area display in the <code>Safari</code> when access the web page in the <code>Safari</code> by default. So that is the reason sometime we need configure the <code>ViewPort</code> for better web content display in the Browser .</p>\n\n<p>Like below . for example.\n<code>&lt;meta name=\"viewport\" content=\"width=device-width\"&gt;</code></p>\n\n<p>And also please read <a href=\"http://stackoverflow.com/questions/14775195/is-the-viewport-meta-tag-really-necessary\">Paul's answer</a>. I think he already explain what does the <code>ViewPort</code> use for.\nHope it is helpful. Thanks,</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>What is view port in html and give some example to access the view port details.</p>\n",
            "last_activity_date": 1421031194,
            "question_id": 2939693,
            "score": 26,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "What is view port in HTML"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You could set background-color on <code>:active</code> state and give <code>:focus</code>  the defaut background.</p>\n\n<p>if you set background-color via <code>onfocus/ontouch</code>, color style remains once <code>:focus</code> state has gone.<br>\nYou need a reset on <code>onblur</code> as well to restore defaut bg when focus is lost.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can remove the hover state by temporarily removing the link from the DOM. See <a href=\"http://testbug.handcraft.com/ipad.html\" rel=\"nofollow\">http://testbug.handcraft.com/ipad.html</a></p>\n\n<hr>\n\n<p>In the CSS you have:</p>\n\n<pre><code>:hover {background:red;}\n</code></pre>\n\n<p>In the JS you have:</p>\n\n<pre><code>function fix()\n{\n    var el = this;\n    var par = el.parentNode;\n    var next = el.nextSibling;\n    par.removeChild(el);\n    setTimeout(function() {par.insertBefore(el, next);}, 0)\n}\n</code></pre>\n\n<p>And then in your HTML you have:</p>\n\n<pre><code>&lt;a href=\"#\" ontouchend=\"this.onclick=fix\"&gt;test&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>This is a common problem with no perfect solution. Hover behavior is useful with a mouse and mostly detrimental with touch. Compounding the problem are devices which support touch and mouse (simultaneously, no less!) like the Chromebook Pixel and Surface.</p>\n\n<p>The cleanest solution I've found is to only enable hover behavior if the device isn't deemed to support touch input.</p>\n\n<pre><code>var isTouch =  !!(\"ontouchstart\" in window) || window.navigator.msMaxTouchPoints &gt; 0;\n\nif( !isTouch ){\n    // add class which defines hover behavior\n}\n</code></pre>\n\n<p>Granted, you lose hover on devices which may support it. However, sometimes hover impacts more than the link itself, e.g. perhaps you want to show a menu when an element is hovered. This approach allows you to test for the existence of touch and perhaps conditionally attach a different event.</p>\n\n<p>I've tested this on the iPhone, iPad, Chromebook Pixel, Surface, and a variety of Android devices. I can't guarantee that it will work when a generic USB touch input (such as a stylus) is added to the mix.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>With <a href=\"http://modernizr.com/\" rel=\"nofollow\">Modernizr</a> you can target your hovers specifically for no-touch devices:</p>\n\n<p>(Note: this doesn't run on StackOverflow's snippet system, check the <a href=\"http://jsfiddle.net/1pvf8g9g/3/\" rel=\"nofollow\">jsfiddle</a> instead)</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>#regular:hover, #regular:active {\r\n  opacity: 0.5;\r\n}\r\n\r\nhtml.no-touch #no-touch:hover, #no-touch:active {\r\n  opacity: 0.5;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Once <a href=\"http://drafts.csswg.org/mediaqueries/#hover\" rel=\"nofollow\">CSS Media Queries Level 4</a> is implemented, you'll be able to do this:</p>\n\n<pre><code>@media (hover: hover) {\n    button:hover {\n        background-color: blue;\n    }\n}\n</code></pre>\n\n<p>Or in English: \"If the browser supports proper/true/real/non-emulated hovering (e.g. has a mouse-like primary input device), then apply this style when <code>button</code>s are hovered over.\"</p>\n\n<p>Since this part of Media Queries Level 4 has so far only been implemented in bleeding-edge Chrome, <a href=\"https://github.com/cvrebert/mq4-hover-hover-shim\" rel=\"nofollow\">I wrote a polyfill</a> to deal with this. Using it, you can transform the above futuristic CSS into:</p>\n\n<pre><code>html.my-true-hover button:hover {\n    background-color: blue;\n}\n</code></pre>\n\n<p>(A variation on the <code>.no-touch</code> technique) And then using some client-side JavaScript from the same polyfill that detects support for hovering, you can toggle the presence of the <code>my-true-hover</code> class accordingly:</p>\n\n<pre><code>$(document).on('mq4hsChange', function (e) {\n    $(document.documentElement).toggleClass('my-true-hover', e.trueHover);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have created a carousel with a previous and a next button that are always visible. These buttons have a hover state, they turn blue. On touch devices, like iPad, the hover state is sticky, so the button stays blue after tapping it. I don't want that.</p>\n\n<ul>\n<li><p>I could add a <code>no-hover</code> class <code>ontouchend</code> for each button, and make\nmy CSS like this: <code>button:not(.no-hover):hover { background-color:\nblue; }</code> but that's probably quite bad for performance, and doesn't\nhandle devices like the Chromebook Pixel (which has both a\ntouchscreen and a mouse) correctly.</p></li>\n<li><p>I could add a <code>touch</code> class to the <code>documentElement</code> and make my CSS\nlike this: <code>html:not(.touch) button:hover { background-color: blue;\n}</code> But that also doesn't work right on devices with both touch and a\nmouse.</p></li>\n</ul>\n\n<p>What I would prefer is removing the hover state <code>ontouchend</code>. But it doesn't seem like that is possible. Focusing another element doesn't remove the hover state. Tapping another element manually does, but I can't seem to trigger that in JavaScript.</p>\n\n<p>All the solutions I have found seem imperfect. Is there a perfect solution?</p>\n",
            "last_activity_date": 1421809284,
            "question_id": 17233804,
            "score": 25,
            "tags": [
                "javascript",
                "css",
                "hover",
                "touch"
            ],
            "title": "How to prevent sticky hover effects for buttons on touch devices"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I have no experience with it, but it seems that <a href=\"http://malsup.com/jquery/block/#element\" rel=\"nofollow\">BlockUI</a> is what you're looking for. Give that a try.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this!  </p>\n\n<pre><code>$(\"#test *\").attr(\"disabled\", \"disabled\").off('click');\n</code></pre>\n\n<p>I don't see you using jquery above, but you have it listed as a tag.</p>\n",
                    "is_accepted": true,
                    "score": 12
                },
                {
                    "body": "<p>I think inline scripts are hard to stop instead you can try with this:</p>\n\n<pre><code>&lt;div id=\"test\"&gt;\n    &lt;div&gt;Click Me&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>and script:</p>\n\n<pre><code>$(function () {\n    $('#test').children().click(function(){\n      alert('hello');\n    });\n    $('#test').children().off('click');\n});\n</code></pre>\n\n<h3><a href=\"http://jsfiddle.net/WS47f/\" rel=\"nofollow\">CHEKOUT FIDDLE AND SEE IT HELPS</a></h3>\n\n<p><a href=\"http://api.jquery.com/off/\" rel=\"nofollow\">Read More about .off()</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can't use \"disable\" to disable a click event. I don't know how or if it worked in IE6-9, but it didn't work on Chrome, and it shouldn't work on IE10 like that.</p>\n\n<p>You can disable the onclick event, too, by attaching an event that cancels:</p>\n\n<pre><code>;(function () {\n    function cancel () { return false; };\n    document.getElementById(\"test\").disabled = true;\n    var nodes = document.getElementById(\"test\").getElementsByTagName('*');\n    console.log(nodes);\n    for (var i = 0; i &lt; nodes.length; i++) {\n        nodes[i].setAttribute('disabled', true);\n        nodes[i].onclick = cancel;\n    }\n}());\n</code></pre>\n\n<p>Furthermore, setting \"disabled\" on a node directly doesn't necessarily add the attribute- using setAttribute does.</p>\n\n<p><a href=\"http://jsfiddle.net/2fPZu/\" rel=\"nofollow\">http://jsfiddle.net/2fPZu/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The following css statement disables click events</p>\n\n<pre><code>pointer-events:none;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>pure javascript no jQuery</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction sah() \n{\nsah1(document.getElementById(\"div1\"));\n}\nfunction sah1(el) \n{\ntry \n{\nel.disabled = el.disabled ? false : true;\n}\ncatch(E)\n{\n}\nif (el.childNodes &amp;&amp; el.childNodes.length &gt; 0) \n{\nfor (var x = 0; x &lt; el.childNodes.length; x++) \n{\nsah1(el.childNodes[x]);\n}\n}\n}\n&lt;/script&gt;\n&lt;body&gt;\n&lt;div id=\"div1\"&gt;\n&lt;input type=\"text\" value=\"SAH Computer\" /&gt;&lt;br /&gt;\n&lt;input type=\"button\" value=\"SAH Computer\"   /&gt;&lt;br /&gt;\n&lt;input type=\"radio\" name=\"sex\" value=\"Male\" /&gt;Male&lt;Br /&gt;\n&lt;input type=\"radio\" name=\"sex\" value=\"Female\" /&gt;Female&lt;Br /&gt;\n&lt;/div&gt;&lt;Br /&gt;&lt;Br /&gt;\n&lt;input type=\"button\" value=\"Click\" onclick=\"sah()\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to disable a DIV and all it's content using Javascript.  I can swear that doing a simple </p>\n\n<pre><code>&lt;div disabled=\"true\"&gt; \n</code></pre>\n\n<p>was working for me before, but for some reason it no longer works.  I don't understand why.</p>\n\n<p>In IE10: the text \"Click Me\" is not greyed out and click handler still works.</p>\n\n<p>I actually need this working for IE10.  Below is my code. Thanks in advance.</p>\n\n<pre><code>&lt;html&gt;\n    &lt;script&gt;\n         function disableTest(){\n\n            document.getElementById(\"test\").disabled = true;\n            var nodes = document.getElementById(\"test\").getElementsByTagName('*');\n            for(var i = 0; i &lt; nodes.length; i++){\n                nodes[i].disabled = true;\n            }\n\n         }\n\n\n     &lt;/script&gt;\n\n&lt;body onload=\"disableTest();\"&gt;\n   &lt;div id=\"test\"&gt;\n       &lt;div onclick=\"alert('hello');\"&gt;\n           Click Me\n       &lt;/div&gt;\n   &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1374503947,
            "question_id": 15555295,
            "score": 25,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "css"
            ],
            "title": "how to disable DIV element and everything inside"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>From <a href=\"https://github.com/gruntjs/grunt/wiki/Creating-tasks\">https://github.com/gruntjs/grunt/wiki/Creating-tasks</a></p>\n\n<pre><code>grunt.registerTask('foo', 'My \"foo\" task.', function() {\n  // Enqueue \"bar\" and \"baz\" tasks, to run after \"foo\" finishes, in-order.\n  grunt.task.run('bar', 'baz');\n  // Or:\n  grunt.task.run(['bar', 'baz']);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Here's an example of manually configuring a task within a task and then running it. </p>\n\n<p><a href=\"https://github.com/gruntjs/grunt-contrib/issues/118#issuecomment-8482130\">https://github.com/gruntjs/grunt-contrib/issues/118#issuecomment-8482130</a></p>\n\n<pre><code> grunt.registerMultiTask('multicss', 'Minify CSS files in a folder', function() {\n        var count = 0;\n        grunt.file.expandFiles(this.data).forEach(function(file) {\n            var property = 'mincss.css'+count+'.files';\n            var value = {};\n            value[file] = file;\n            grunt.config(property, value);\n            grunt.log.writeln(\"Minifying CSS \"+file);\n            count++;\n        });\n        grunt.task.run('mincss');\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Thx to Arron that pointed us out in the right direction to his own question. The grunt.config is the key from the example above. This task will override the src property of the browserify task </p>\n\n<p>Task definition:</p>\n\n<pre><code>  grunt.registerTask('tests', function (spec) {\n\n    if (spec) {\n      grunt.config('browserify.tests.src', spec);\n    }\n\n    grunt.task.run(['jshint', 'browserify:tests', 'jasmine']);\n\n  }); \n</code></pre>\n\n<p>Task call:</p>\n\n<pre><code>grunt tests\n</code></pre>\n\n<p>or</p>\n\n<pre><code>grunt tests:somewhere/specPath.js\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you are feeling lazy I ended up publishing a npm module that forwards the configs from your task into the subtask that you want to run:</p>\n\n<p><a href=\"https://www.npmjs.org/package/extend-grunt-plugin\" rel=\"nofollow\">https://www.npmjs.org/package/extend-grunt-plugin</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm created a new grunt task and within it I want to use grunt-contrib-concat to concatenate a few files together.  </p>\n\n<p>I looked through the docs but I don't find anything that hinted at being able to do this.  It seems like a trivial use case, so I'm probably just over looking something.    </p>\n\n<p>Update 1:</p>\n\n<p>I also want to be able to configure this task from within my custom task.</p>\n\n<p>For example, I'm create a list of files in my custom task. After I have that list, I want to pass them to the concat task.  How can I do that?</p>\n\n<p>I would like to be able to do something like this.</p>\n\n<pre><code>grunt.task.run('concat', { src: ['file1','file2'], dest: 'out.js'})\n</code></pre>\n\n<p>Update 2:</p>\n\n<p>To achieve what I want, I have to manually configure the grunt task.  Here's an example that showed me what I wanted.</p>\n\n<p><a href=\"https://github.com/gruntjs/grunt-contrib/issues/118#issuecomment-8482130\">https://github.com/gruntjs/grunt-contrib/issues/118#issuecomment-8482130</a></p>\n",
            "last_activity_date": 1406310350,
            "question_id": 15284556,
            "score": 25,
            "tags": [
                "javascript",
                "node.js",
                "gruntjs"
            ],
            "title": "How can I run a grunt task from within a grunt task?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Because the dot is inside character class (square brackets <code>[]</code>).</p>\n\n<p>Take a look at <a href=\"http://www.regular-expressions.info/reference.html\">http://www.regular-expressions.info/reference.html</a>, it says (under char class section):</p>\n\n<blockquote>\n  <p>Any character except ^-]\\ add that character to the possible matches\n  for the character class.</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 24
                },
                {
                    "body": "<p>The dot operator <code>.</code> does not need to be escaped inside of a character class <code>[]</code>.</p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>On <a href=\"http://www.regular-expressions.info/dot.html\" rel=\"nofollow\">this web page</a>, I see that:</p>\n\n<p>\"Remember that the dot is not a metacharacter inside a character class, so we do not need to escape it with a backslash.\"</p>\n\n<p>So I guess the escaping of it is unnecessary...</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you using JavaScript to test your Regex, try <code>\\\\.</code> instead of <code>\\.</code>.</p>\n\n<p>It acts on the same way because JS remove first backslash.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>For some reason those two regex act the same way:</p>\n\n<pre><code>\"43\\\\gf..--.65\".replace(/[^\\d.-]/g, \"\");\u200b  // 43..--.65\n\"43\\\\gf..--.65\".replace(/[^\\d\\.-]/g, \"\");\u200b  // 43..--.65\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/q7rvt/1/\" rel=\"nofollow\">Demo</a></p>\n\n<p>In the first regex I don't escape the dot(<code>.</code>) while in the second regex I do(<code>\\.</code>).</p>\n\n<p>What are the differences and why they act the same? </p>\n",
            "last_activity_date": 1422883816,
            "question_id": 10397968,
            "score": 25,
            "tags": [
                "javascript",
                "regex",
                "replace"
            ],
            "title": "Escape dot in a regex range"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Try replacing:</p>\n\n<pre><code>$(\"#\"+id).select();\n</code></pre>\n\n<p>With:</p>\n\n<pre><code>$(this).focus();\n</code></pre>\n\n<p>In this case, <code>$(\"#\"+id)</code> and <code>$(this)</code> are the same element, and I'm assuming you want to <code>focus</code> the element when there is an error.</p>\n\n<p>Aside: I don't believe that <code>id</code> or <code>name</code> values can legally start with a number, you may want to prefix them with something like <code>option1</code>, <code>option2</code>, etc. It might work, but it might also cause issues later that are difficult to debug. Best to err on the side of caution and best practices.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\">What are valid values for the id attribute in HTML?</a></p>\n\n<p><strong>Edit</strong>: After failing to get <code>focus()</code> to work, I tried with <code>setTimeout</code> and was able to make it happen. I'm not sure why, or if this is really necessary, but it seems to work.</p>\n\n<pre><code>$(\":input\").focusout(function(){\n    var $this = $(this),\n        input = $this.val();\n\n    if (input &gt; 10){\n        alert('You must enter a number between 0 and 10');\n        setTimeout(function(){\n        $this.focus();\n        }, 1); \n    }\n}); \n</code></pre>\n\n<p>I'd love to hear if there is a better way to do this or an explanation. I suspect that the blur and focus events are not fired in an order that makes the previous method possible?</p>\n\n<p>Demo: <a href=\"http://jsfiddle.net/zRWV4/1/\">http://jsfiddle.net/zRWV4/1/</a></p>\n\n<p>As mentioned in the comments, you should eventually make sure the value is an integer with <code>parseInt</code> or similar (you seem to already be aware of this).</p>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<p>replace</p>\n\n<pre><code>$(\"#\"+id).select();\n</code></pre>\n\n<p>by</p>\n\n<pre><code>$(\"#\"+id).focus();\n</code></pre>\n\n<p>or even by</p>\n\n<pre><code>$(this).focus();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>(Try to use <code>.blur()</code> instead of <code>.focusout()</code>. But that probably won't help)</p>\n\n<p>Try to remove the <code>alert()</code> for a while - it sometimes can make problems with focus...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You should parse the text inside the input to compare it with a number. <code>var input = parseInt($(this).val());</code>\n'</p>\n\n<pre><code>   $(\":input\").blur(function(){\n        var input = parseInt($(this).val());\n        var id    = $(this).attr('id');\n        if(input &gt; 10){ \n            alert('You must enter a number between 0 and 10 '+id);\n            $(\"#\"+id).select();\n        }\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong><a href=\"http://jsfiddle.net/MadaraUchiha/YrNXW/2/\" rel=\"nofollow\">jsFiddle Example</a></strong></p>\n\n<p>This is my code, I'll explain what I changed:</p>\n\n<pre><code>$('input[id^=\"input\"]').focusout(function(){\n    var selected = $(this).val();\n    if (selected &lt;= 10) {\n        $(\"#input-\"+selected).focus();\n    }\n    else {\n        alert('Invalid Argument! 1-10 only!');\n        $(this).focus();\n    }\n});\n</code></pre>\n\n<ol>\n<li>I use <code>focus()</code> instead of <code>select()</code> which won't work.</li>\n<li>You confused <code>id</code> with <code>select</code> which caused you to always try and select <code>$(\"#input-IDOFSELECTIONINPUT\")</code> instead of <code>$(\"#input-IDOFWANTEDINPUT\")</code> </li>\n<li>In your code, although an alert would have been thrown, the rest of the code would have continued normally. It won't in my code.</li>\n<li>You've put your desired result (<code>$(\"#\"+id).select();</code>) in the undesired condition (<code>input &gt; 10</code>), which practically never gave it a chance.</li>\n<li>Last but not least, I gave the inputs a better (and valid) id. IDs must not start with a number.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>The HTML on the page has 20 <code>&lt;input&gt;</code> fields each named and given ID's in increasing order from 1 to 20.</p>\n\n<p>If the variable <code>id</code> is set to the next sequential <code>id</code> (<code>id</code> + 1), this function will cause focus to apply to that field. However, when clicking outside of the current input field, the last one input field will not regain focus if the number entered is greater than 10, but an alert will be displayed.</p>\n\n<pre><code>$(\":input\").focusout(function(){\n    var input = $(this).val();\n    var id    = $(this).attr('id');\n    if(input &gt; 10){ \n        alert('You must enter a number between 0 and 10 '+id);\n        $(\"#\"+id).select();\n    }\n});\n</code></pre>\n\n<p>How can the last input field be set to regain focus?</p>\n",
            "last_activity_date": 1424494765,
            "question_id": 7046012,
            "score": 25,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Jquery Focus on input field"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<pre><code>newFile.once('open', function(fd){\n    require('util').pump(oldFile, newFile);\n});     \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>The preferred way currently:</p>\n\n<pre><code>oldFile.pipe(newFile);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<pre><code>fs.rename( './old/image1.png', './new/image2.png', function(err){\n  if(err) console.log(err);\n  console.log(\"moved\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>If you want to do this job syncronously, just read and then write the file directly:</p>\n\n<pre><code>var copyFileSync = function(srcFile, destFile, encoding) {\n  var content = fs.readFileSync(srcFile, encoding);\n  fs.writeFileSync(destFile, content, encoding);\n}\n</code></pre>\n\n<p>Of course, error handling and stuff is always a good idea!</p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>How to copy a file in Node.js? </p>\n\n<p>Example</p>\n\n<pre><code>+ /old\n|- image.png\n+ /new\n</code></pre>\n\n<p>I want to copy image1.png from 'old' to 'new' directory.</p>\n\n<p>This doesn't work.</p>\n\n<pre><code>newFile = fs.createWriteStream('./new/image2.png');     \noldFile = fs.createReadStream('./old/image1.png');\n\noldFile.addListener(\"data\", function(chunk) {\n  newFile.write(chunk);\n})\n\noldFile.addListener(\"close\",function() {\n  newFile.end();\n});\n</code></pre>\n\n<p>Thanks for reply!</p>\n",
            "last_activity_date": 1378899682,
            "question_id": 4980243,
            "score": 25,
            "tags": [
                "javascript",
                "node.js"
            ],
            "title": "How to copy a file?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You would need to strip the <code>url(</code> and closing <code>)</code> parts out for that to work.</p>\n\n<p>So <code>url(http://localhost:8080/images/1/myImage.png)</code> </p>\n\n<p>becomes </p>\n\n<p><code>http://localhost:8080/images/1/myImage.png</code></p>\n\n<p>You could do this with a substring, a regex replace or any method of your choosing.</p>\n\n<p><a href=\"http://www.w3schools.com/jsref/jsref_replace.asp\" rel=\"nofollow\">http://www.w3schools.com/jsref/jsref_replace.asp</a></p>\n\n<p>Perhaps:</p>\n\n<p><code>jQuery(\"#imageID\").attr('src',jQuery(\"#imageBlock\").css('background-image').replace('url(','').replace(')','') )</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>IMO, <code>slice</code> is more appropriate than <code>substring</code> or <code>replace</code>. Try this:</p>\n\n<pre><code>jQuery(\"#imageID\").attr(\n    'src',\n    jQuery(\"#imageBlock\").css('background-image').slice(4,-1)\n);\n</code></pre>\n\n<p>Here, you're slicing the string in between <code>url(</code> and <code>)</code>.  See MDC on <a href=\"https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Global_Objects/String/Slice\">slice</a> for a detailed description of the method.</p>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>It's because the url() string is wrapped around it. You'll need to strip it from the string, for example using the replace function...</p>\n\n<pre><code>var bgimg = jQuery(\"#imageBlock\").css('background-image').replace('url(', '');\nbgimg.replace(')', '');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You need to extract the url part:</p>\n\n<pre><code>var backgroundImage = $(\"#imageBlock\")\n    .css('backgroundImage')\n    .replace(/\"/g,\"\")\n    .replace(/url\\(|\\)$/ig, \"\");\njQuery(\"#imageID\").attr('src', backgroundImage);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am trying to change the image src attribute using jQuery</p>\n\n<pre><code>jQuery(\"#imageID\").attr('src','http://localhost:8080/images/1/myImage.png' );\n</code></pre>\n\n<p>using the above code i can change the src attribute, but when i try this:- </p>\n\n<pre><code>jQuery(\"#imageID\").attr('src',jQuery(\"#imageBlock\").css('background-image') );\n</code></pre>\n\n<p>i am unable to change the src. </p>\n\n<p>provided </p>\n\n<pre><code>alert ( jQuery(\"#imageBlock\").css('background-image') );\n</code></pre>\n\n<p>returns:</p>\n\n<blockquote>\n  <p>url(http://localhost:8080/images/1/myImage.png)</p>\n</blockquote>\n\n<p><strong>Edit #1</strong>\nJust when i was about to accept the solution. I must say, almost all solution worked in FF. I tried: </p>\n\n<ul>\n<li>slice(4,-1);</li>\n<li>split(\"(\")[1] > then replace ( \")\" , \"\" );</li>\n</ul>\n\n<p>I guess others will also work. But none of the solutions is working in IE. \nReason being: \nwhile FF returns:  </p>\n\n<blockquote>\n  <p>url(http://localhost:8080/images/1/myImage.png)</p>\n</blockquote>\n\n<p>IE Returns:  </p>\n\n<blockquote>\n  <p>url(\"http://localhost:8080/images/1/myImage.png\")</p>\n</blockquote>\n\n<p>^^ mind the quotes here</p>\n\n<p>Now, what could be the generic way to set the src attr. Do i need to test the browser if it is IE or not?</p>\n\n<p>This is the working code.</p>\n\n<pre><code>var src = \"\";\n    if ( jQuery.browser.msie ) {\n        src = jQuery(\"#imageBlock\").css('background-image').slice(5,-2);        \n    }else{\n        src = jQuery(\"#imageBlock\").css('background-image').slice(4,-1);\n    }   \n    jQuery(\"#imageID\").attr('src', src );\n</code></pre>\n\n<p>I really don't like it :x. If there is another solution than this, then please let me know or else i will accept the <code>slice</code> solution straight away.</p>\n",
            "last_activity_date": 1406961751,
            "question_id": 2183347,
            "score": 25,
            "tags": [
                "javascript",
                "jquery",
                "image",
                "src"
            ],
            "title": "How to set the image src using jQuery"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p>You can look up HTTP status codes <a href=\"http://www.w3.org/Protocols/HTTP/HTRESP.html\" rel=\"nofollow\">here</a>, this error is telling you:</p>\n\n<p>\"The server encountered an unexpected condition which prevented it from fulfilling the request.\"</p>\n\n<p>You need to debug your server.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I suspect that the server method is throwing an exception after it passes your breakpoint.  Use Firefox/Firebug or the IE8 developer tools to look at the actual response you are getting from the server.  If there has been an exception you'll get the YSOD html, which should help you figure out where to look.</p>\n\n<p>One more thing -- your data property should be {} not \"{}\", the former is an empty object while the latter is a string that is invalid as a query parameter.  Better yet, just leave it out if you aren't passing any data.</p>\n",
                    "is_accepted": true,
                    "score": 29
                },
                {
                    "body": "<p>There should be an event logged in the EventVwr (Warning from asp.net), which could provide you more details on where the error could be.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>A 500 from ASP.NET probably means an unhandled exception was thrown at some point when serving the request.</p>\n\n<p>I suggest you attach a debugger to the web server process (assuming you have access).</p>\n\n<p>One strange thing: You make a POST request to the server, but you do not pass any data (everything is in the query string). Perhaps it should be a GET request instead?</p>\n\n<p>You should also double check that the URL is correct.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Can you post the signature of your method that is supposed to accept this post?</p>\n\n<p>Additionally I get the same error message, possibly for a different reason. My YSOD talked about the dictionary not containing a value for the non-nullable value. \nThe way I got the YSOD information was to put a breakpoint in the $.ajax function that handled an error return as follows:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" language=\"javascript\"&gt;\nfunction SubmitAjax(url, message, successFunc, errorFunc) {\n    $.ajax({\n        type:'POST',\n        url:url,\n        data:message,\n        contentType: 'application/json; charset=utf-8',\n        dataType: 'json',\n        success:successFunc,\n        error:errorFunc\n        });\n\n};\n</code></pre>\n\n<p>Then my errorFunc javascript is like this:</p>\n\n<pre><code>function(request, textStatus, errorThrown) {\n        $(\"#install\").text(\"Error doing auto-installer search, proceed with ticket submission\\n\"\n        +request.statusText); }\n</code></pre>\n\n<p>Using IE I went to view menu -> script debugger -> break at next statement.\nThen went to trigger the code that would launch my post. This usually took me somewhere deep inside jQuery's library instead of where I wanted, because the select drop down opening triggered jQuery. So I hit StepOver, then the actual next line also would break, which was where I wanted to be. Then VS goes into client side(dynamic) mode for that page, and I put in a break on the <code>$(\"#install\")</code> line so I could see (using mouse over debugging) what was in request, textStatus, errorThrown. request. In request.ResponseText there was an html message where I saw:</p>\n\n<pre><code>&lt;title&gt;The parameters dictionary contains a null entry for parameter 'appId' of non-nullable type 'System.Int32' for method 'System.Web.Mvc.ContentResult CheckForInstaller(Int32)' in 'HLIT_TicketingMVC.Controllers.TicketController'. An optional parameter must be a reference type, a nullable type, or be declared as an optional parameter.&lt;br&gt;Parameter name: parameters&lt;/title&gt;\n</code></pre>\n\n<p>so check all that, and post your controller method signature in case that's part of the issue</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I just face this problem today. with this kind of error, you won't get any responses from server, therefore, it's very hard to locate the problem.</p>\n\n<p>But I can tell you \"500 internal server error\" is error with server not client, you got an error in server side script. Comment out the code closure by closure and try to run it again, you'll soon find out you miss a character somewhere.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I run into the same thing today. As suggested before get Firebug for Firefox, Enable Console and preview POST response. That helped me to find out how stupid the problem was. My action was expecting value of a type int and I was posting string.  (ASP.NET MVC2)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>in case if someone using the codeigniter framework, the problem may be caused by the csrf protection config enabled.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>I found myself having this error to. I had .htaccess redirect configured in a directory. Well it reroutes ajax calls to ofcourse (<code>$.post(../ajax.php)</code>), so it couldn't find the actual file (resulting in 500 error).</p>\n\n<p>I 'fixed' it by placing the ajax.php in a directory (So <code>.htaccess</code> didn't affect).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I just had this problem myself, even though i couldn't find the reason for it in my case, when  changing from <code>POST</code> to <code>GET</code>, the problem 500 error disappeared!</p>\n\n<pre><code> type:'POST'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<pre><code>$.ajax({\n    type: \"POST\",\n    url: \"InlineNotes/Note.ashx\",\n    data: '{\"id\":\"' + noteid'\"}',\n    contentType: \"application/json; charset=utf-8\",\n    dataType: \"json\",\n    success: function(data) {\n        alert(data.d);\n    },\n    error: function(data){\n        alert(\"fail\");\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>In my case it was simple issue, but hard to find. Page directive had wrong Inherits attributes. It just need to include the top level and it worked. \nWrong code</p>\n\n<pre><code>&lt;%@ Page Language=\"C#\" CodeBehind=\"BusLogic.aspx.cs\" Inherits=\"BusLogic\"%&gt;\n</code></pre>\n\n<p>Correct code</p>\n\n<pre><code>&lt;%@ Page Language=\"C#\" CodeBehind=\"BusLogic.aspx.cs\" Inherits=\"Web.BusLogic\" %&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found this occurred in chrome when I did two ajax queries in the jquery 'on load' handler, i.e. like $(function() { $.ajax() ... $.ajax() ... });</p>\n\n<p>I avoided it using:</p>\n\n<pre><code>setTimeout(function_to_do_2nd_ajax_request, 1);\n</code></pre>\n\n<p>it's presumably a chrome and/or jquery bug</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>When using the CodeIgniter framework with CSRF protection enabled, load the following script in every page where an ajax POST may happen:</p>\n\n<pre><code>$(function(){\n    $.ajaxSetup({\n        data: {\n            &lt;?php echo $this-&gt;config-&gt;item('csrf_token_name'); ?&gt;: $.cookie('&lt;?php echo $this-&gt;config-&gt;item('csrf_cookie_name'); ?&gt;')\n        }\n    });\n});\n</code></pre>\n\n<p>Requires: jQuery and jQuery.cookie plugin</p>\n\n<p>Sources: <a href=\"http://stackoverflow.com/a/7154317/2539869\">http://stackoverflow.com/a/7154317/2539869</a> and <a href=\"http://jerel.co/blog/2012/03/a-simple-solution-to-codeigniter-csrf-protection-and-ajax\" rel=\"nofollow\">http://jerel.co/blog/2012/03/a-simple-solution-to-codeigniter-csrf-protection-and-ajax</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had this problem because the page I called ajax post from had EnableViewState=\"false\" and EnableViewStateMac=\"false\" but not the page called. When I put this in both pages everything started to work. I suspected this when I saw MAC address exception.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The JSON data you are passing to the server should have same name as you forming in client side.\nEx:</p>\n\n<pre><code>var obj = {  Id: $('#CompanyId').val(),\n             Name: $(\"#CompanyName\").val()\n            };\n\n$.Ajax(data: obj,\nurl: \"home/InsertCompany\".....\n</code></pre>\n\n<p>If the name is different, ex: </p>\n\n<pre><code>[HttpPost]\npublic ActionResult InsertCompany(Int32 Id, string WrongName)\n{\n}\n</code></pre>\n\n<p>You will get this error.</p>\n\n<p>If you are not passing the data, remove the data attribute from AJAX request.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>check, if is equal the size of letters in URL, name of method and name of .phtml file. This me helped.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I was able to find the solution using the <strong>Chrome</strong> debugger (I don't have Firebug or other third-party tools installed)</p>\n\n<ul>\n<li>Go to developer tab (CTRL+MAJ+I)</li>\n<li><strong>Network</strong> > click on the request which failed, in red > <strong>Preview</strong></li>\n</ul>\n\n<p>It showed me that I had a problem on the server, when I was returning a value which was self-referencing.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can also get that error in VB if the function you're calling starts with <strong>Public Shared Function</strong> rather than <strong>Public Function</strong> in the webservice. (As might happen if you move or copy the function out of a class). Just another thing to watch for. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Your return string data can be very long.</p>\n\n<pre><code>&lt;system.web&gt;        \n   &lt;compilation debug=\"true\" targetFramework=\"4.0\" /&gt;\n   &lt;httpRuntime maxRequestLength=\"2147483647\" /&gt;\n&lt;/system.web&gt;\n</code></pre>\n\n<p><strong>For example:</strong> </p>\n\n<ul>\n<li>1 Char = 1 Byte </li>\n<li>5 Char = 5 Byte</li>\n<li>\"Hakki\" = 5 Byte</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>And her is my version:</p>\n\n<pre><code>$.ajax({\n    type: \"POST\",\n    url: \"InlineNotes/Note.ashx\",\n    data: '{\"id\":\"' + noteid'\"}',\n    contentType: \"application/json; charset=utf-8\",\n    dataType: \"json\",\n    success: function(data) {\n        alert(data.d);\n    },\n      error: function(jqXHR, textStatus, errorThrown){\n                                 alert('Error: '+ errorThrown);\n                     }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am trying to perform this AJAX post but for some reason I am getting a server 500 error. I can see it hit break points in the controller. So the problem seems to be on the callback. Anyone?</p>\n\n<p>Thanks!</p>\n\n<pre><code>$.ajax({\ntype: \"POST\",\n    url: \"InlineNotes/Note.ashx?id=\" + noteid,\n    data: \"{}\",\n    dataType: \"json\",\n\n    success: function(data) {\n        alert(data[1]);\n    },\n    error: function(data){\n    alert(\"fail\");\n\n    }\n\n});\n</code></pre>\n\n<p>This is the string that should be returned :</p>\n\n<p>{status:'200', text: 'Something'}</p>\n",
            "last_activity_date": 1424964963,
            "question_id": 1349118,
            "score": 25,
            "tags": [
                "javascript",
                "jquery",
                "ajax"
            ],
            "title": "JQuery Ajax Post results in 500 Internal Server Error"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You can simulate it like this:</p>\n\n<pre><code>SpecialWidget.prototype = {\n    load: function(args) {\n        Widget.prototype.load.call(this, args);\n        // specific code here\n    }\n}\n</code></pre>\n\n<p>Or you can create your own super property like this:</p>\n\n<pre><code>SpecialWidget.prototype.parent = Widget.prototype;\n\nSpecialWidget.prototype = {\n    load: function(args) {\n        this.parent.load.call(this,args);\n        // specific code here\n    }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 32
                },
                {
                    "body": "<p>I don't know if this is the best solution, but you could do something like this:</p>\n\n<pre><code>function Widget() {\n    this.id = new Date().getTime();\n}\nWidget.prototype.load = function(args) {\n   alert( 'parent load' );\n};\n\nSpecialWidget = function(){};\n\n   // Make the prototype of SpecialWidget an instance of Widget\nvar proto = SpecialWidget.prototype = new Widget;\n\n   // Give the prototype a function that references the \"load\" from Widget\nproto.parent_load = proto.load;\n\n   // Give SpecialWidget its own \"load\" that first calls the parent_load\nproto.load = function( args ) {\n    this.parent_load( args );\n    alert( 'special load' );\n};\n\nvar inst = new SpecialWidget;\n\ninst.load();\n</code></pre>\n\n<p>This makes the prototype of <code>SpecialWidget</code> an instance of <code>Widget</code> so that it inherits all that <code>Widget</code> has.</p>\n\n<p>Then it makes a reference to the <code>load()</code> of <code>Widget</code> called <code>parent_load()</code>, and creates its own <code>load()</code> that calls the <code>parent_load()</code> when invoked.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>so first, you set up your 'subclass' like so</p>\n\n<pre><code>function SubClass(name) {\n    Super.call(this);\n\n    // stuff here\n}\n\nSubClass.prototype = new SuperClass(null);\nSubClass.prototype.constructor = SubClass;\n</code></pre>\n\n<p>and then you can do </p>\n\n<pre><code>SuperClass.prototype.theMethod.apply(this);\n</code></pre>\n\n<p>from within a subclass implementation to specifically invoke the super's implementation.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It would be possible to store the old value of the <code>load</code> method in a closure, if you did your overriding like this:</p>\n\n<pre><code>function Widget() {\n    this.id = new Date().getTime();\n    // other fields\n}\n\nWidget.prototype = {\n    load: function(args) {\n        // do something\n        alert(\"Widget Prototype Load\");\n    }\n};\n\nfunction SpecialWidget(){\n};\n\nSpecialWidget.prototype = new Widget();\n\n(function(){\n    var oldLoad = SpecialWidget.prototype.load;\n    SpecialWidget.prototype.load = function(){\n        oldLoad();\n        alert(\"new Load\");\n    };\n}());\n\n\nvar x = new SpecialWidget();\nx.load();\n</code></pre>\n\n<p>It works, but I'm not sure if it's the best method.         </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Take a look at <a href=\"https://github.com/reduardo7/sjsClass\" rel=\"nofollow\">Simple Javascript Class Project</a>, <a href=\"http://ejohn.org/blog/simple-javascript-inheritance/\" rel=\"nofollow\">Simple JavaScript Inheritance</a> and <a href=\"http://www.bolinfest.com/javascript/inheritance.php\" rel=\"nofollow\">Inheritance Patterns in JavaScript</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Assume I have a class like this:</p>\n\n<pre><code>function Widget() {\n    this.id = new Date().getTime();\n    // other fields\n}\nWidget.prototype = {\n    load: function(args) {\n        // do something\n    }\n}\n</code></pre>\n\n<p>From this class I created some other classes which inherit the same prototype but have some added methods. What I want to do is being able to define a load() method in the sub-classes which first calls the parent method and then execute some code. Something like:</p>\n\n<pre><code>SpecialWidget.prototype = {\n    load: function(args) {\n        super.load(args);\n        // specific code here\n    }\n}\n</code></pre>\n\n<p>I know there's no super keyword in Javascript but there must be a way to do this. Sorry for my poor English</p>\n",
            "last_activity_date": 1386271173,
            "question_id": 4777522,
            "score": 24,
            "tags": [
                "javascript",
                "inheritance",
                "prototype"
            ],
            "title": "Javascript inheritance and method overriding"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>I don't think you can do that.</p>\n\n<p>But you can definitely make it harder for the user to accidentally 'agree' with the confirmation, for example by forcing the user to type 'y' in an input box:</p>\n\n<pre><code>agree = (prompt(\"Type 'y' to accept\", '') == 'y');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you can use jQuery plugin then here is a nice one</p>\n\n<p><a href=\"http://trentrichardson.com/Impromptu/\" rel=\"nofollow\">jQuery Impromptu</a></p>\n\n<p>To change the default focused button:</p>\n\n<pre><code>$.prompt('Example 4',{ buttons: { Ok: true, Cancel: false }, focus: 1 });\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>You can't do that, but you could use/write your own dialog which is displayed using DOM elements (like phoenix suggested, it just doesn't have to be that particular jQuery plugin, you could write your own or use plugin from another JS framework).</p>\n\n<p>The \"use jQuery + plugin X\" answers are starting to get annoying. There are a lot of JS libraries out there and even more plugins. For example using any JS library here is unnecessary if you just want to display a custom dialog. While it's a quick solution/answer, answers like that do more harm in a long run then good. People new to JavaScript or programing in general start to think that jQuery and/or plugins are the only way to go and they include 50kb+ library just to write 3 lines of their own (which sometimes don't even use the library :D).</p>\n\n<p>In my opinion Markus Johnsson comment is the best answer, it's a shame it's not posted as one.</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I am displaying a JavaScript confirm box when the user clicks on the \"Delete Data\" button. I am displaying it as shown in this image: </p>\n\n<p><img src=\"http://i.stack.imgur.com/7KQn2.jpg\" alt=\"alt text\"></p>\n\n<p>In the image, the \"OK\" button is selected by default. I want to select the \"Cancel\" button by default, so that if the user accidentally presses the <kbd>enter</kbd> key, the records will be safe and will not be deleted.</p>\n\n<p>Is there any way in JavaScript to select the \"Cancel\" button by default?</p>\n",
            "last_activity_date": 1411198784,
            "question_id": 1699582,
            "score": 24,
            "tags": [
                "javascript",
                "jquery",
                "confirm"
            ],
            "title": "JavaScript: How to select &quot;Cancel&quot; by default in confirm box?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Just use <a href=\"http://api.jquery.com/empty/\"><code>.empty()</code></a>:</p>\n\n<pre><code>// snip...\n}).done(function (data) {\n    // Clear drop down list\n    $(dropdown).empty(); // &lt;&lt;&lt;&lt;&lt;&lt; No more issue here\n    // Fill drop down list with new data\n    $(data).each(function () {\n        // snip...\n</code></pre>\n\n<hr>\n\n<p>There's also <a href=\"http://api.jquery.com/jquery/#jQuery2\">a more concise way</a> to build up the options:</p>\n\n<pre><code>// snip...\n$(data).each(function () {\n    $(\"&lt;option /&gt;\", {\n        val: this.value,\n        text: this.text\n    }).appendTo(dropdown);\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 62
                },
                {
                    "body": "<p>How about storing the new options in a variable, and then using .html(variable) to replace the data in the container?</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I tried both <code>.empty()</code> as well as <code>.remove()</code> for my dropdown and both were slow. Since I had almost 4,000 options there.</p>\n\n<p>I used <code>.html(\"\")</code> which is much faster in my condition.<br/>\nWhich is below</p>\n\n<pre><code>  $(dropdown).html(\"\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I wrote this little function to fill a drop down list with data from the server.</p>\n\n<pre><code>function fillDropDown(url, dropdown) {\n    $.ajax({\n        url: url,\n        dataType: \"json\"\n    }).done(function (data) {\n        // Clear drop down list\n        $(dropdown).find(\"option\").remove(); &lt;&lt;&lt;&lt;&lt;&lt; Issue here\n        // Fill drop down list with new data\n        $(data).each(function () {\n            // Create option\n            var $option = $(\"&lt;option /&gt;\");\n            // Add value and text to option\n            $option.attr(\"value\", this.value).text(this.text);\n            // Add option to drop down list\n            $(dropdown).append($option);\n        });\n    });\n}\n</code></pre>\n\n<p>I can then call the function in this way:</p>\n\n<pre><code>fillDropDown(\"/someurl/getdata\", $(\"#dropdownbox1\"))\n</code></pre>\n\n<p>Everything is working perfectly, except for the one line where I'm clearing old data from the drop down list. What am I doing wrong?</p>\n\n<p>Any tips that might help to improve this code are also highly appreciated.</p>\n",
            "last_activity_date": 1403560589,
            "question_id": 9909326,
            "score": 23,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Clear dropdownlist with JQuery"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Function to check whether <code>input[type=file]</code> is implemented:</p>\n\n<pre><code>function isInputTypeFileImplemented() {\n    var elem = document.createElement(\"input\");\n    elem.type = \"file\";\n    if (elem.disabled) return false;\n    try {\n        elem.value = \"Test\"; // Throws error if type=file is implemented\n        return elem.value != \"Test\";\n    } catch(e) {\n        return elem.type == \"file\";\n    }\n}\n</code></pre>\n\n<p><strong>Fiddle: <a href=\"http://jsfiddle.net/8EqEE/9\" rel=\"nofollow\">http://jsfiddle.net/8EqEE/9</a></strong></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Note that I haven't tested this, so I'm not sure if it would work. This is basically how you test support for HTML5 input types (e.g. <code>&lt;input type=\"color\" /&gt;</code>). But you can try it:</p>\n\n<pre><code>function upload_supported() {\n  var file_input = document.createElement(\"input\");\n  file_input.setAttribute(\"type\", \"file\");\n  return file_input.type !== \"text\";\n}\n</code></pre>\n\n<p>This is based on the browser's behavior of resetting the type attribute to <code>text</code> when it encounters an unknown input type. However, since you say that it appears grayed out, it would mean that it's not unknown, per se.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Create a <code>&lt;input type=\"file\"&gt;</code> and check to see if it's disabled.</p>\n\n<pre><code>function isFileUploadImpossible() {\n    var el = document.createElement(\"input\");\n    el.setAttribute(\"type\", \"file\");\n    return el.disabled;\n}\n</code></pre>\n\n<p>Tested in iOS 4.2.1, Android 2.3.4, Chrome 17, Firefox 11, IE7.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I too have been searching for a solution to this problem. It is not as simple as the solutions suggested here already. Some of the browsers claim to support certain types but some of those types have been disabled due to incompleteness. So what ends up happening is that when you return InputElement.type it may return as the \"file\" type or \"tel\" or \"number\" but it is still treated by the browser as \"text\".. Sadly I do not think you can do this atm unless you can talk the browser devs into fixing it so that the disabled types return as text..</p>\n\n<p>as an added note IE returns all unsupported types as text. I have tested this with lastest versions of Chrome and FF aswell. Chrome \"lies\" about support for numbers, telphone types i know so far and FF also returns tel when it is not supported. I am sure this happens with other types as well.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>A hybrid of the value based error checking (try/catch) plus a check for disabled seems to give good coverage across all the PC and mobile browsers we tested.</p>\n\n<pre><code>alert((function isInputTypeFileImplemented(){\n  var elem;\n  try {\n    elem = document.createElement(\"input\");\n    elem.type = \"file\";\n  } catch(e) {\n    return -1; // type=file is not implemented  \n  }\n  try {\n    elem.value = \"Test\";\n    if (elem.value == \"Test\") {\n      return -2; // type=file should throw an error on line above\n    } else {\n      if (elem.disabled) {\n        return -3; // type=file disabled in iOS &lt; 6\n      } else {\n        return true;\n      }\n    }\n  } catch(e){\n    return true; // type=file implemented correctly\n  }\n})())\n</code></pre>\n\n<p>NOTE: You could change the logic order around if you prefer a different flow.</p>\n\n<p>Fiddle: <a href=\"http://jsfiddle.net/BRk5J/\" rel=\"nofollow\">http://jsfiddle.net/BRk5J/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>UPDATE: This is now part of <a href=\"https://github.com/Modernizr\" rel=\"nofollow\">Modernizr</a> now.</p>\n\n<p>There is a <a href=\"https://github.com/Modernizr/Modernizr/pull/626\" rel=\"nofollow\">pull request for modernizr</a> that seems to work. Essentially it just checks:</p>\n\n<pre><code>var elem = document.createElement('input');\nelem.type = 'file';\nreturn !elem.disabled;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Update to Rob W's solution above that supports iOS 5 + iOS 6 Beta too. (Causing an exception isn't what I would recommend, but this works):</p>\n\n<pre><code>     function isInputTypeFileImplemented(){\n        var elem = document.createElement(\"input\");\n        elem.type = \"file\";\n        try {\n            elem.value = \"Test\"; //If type=file is implemented, this would throw an \n            if (elem.disabled) {\n                return false;\n            } else {\n                return true;\n            }\n        } catch(e){\n            return false;\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm building a mobile version of my site which has a file upload facility, accessed via an 'Upload Button'</p>\n\n<p>I would like to hide the button from iPhone users, as the control just appears greyed out - is this possible?</p>\n\n<p>I don't really want to detect the iPhone; I feel it would be much better to detect the feature - making it start to work automatically should Apple enable this (or the phone is Jailbroken, or something...)</p>\n",
            "last_activity_date": 1355925446,
            "question_id": 8077955,
            "score": 23,
            "tags": [
                "javascript",
                "html",
                "iphone"
            ],
            "title": "Detect if &lt;input type=&quot;file&quot; /&gt; is supported"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Technically it HTML5 is a standard for the next generation of HTML.  In reality it has become an all encompassing buzzword for javascript and every web technology developed since HTML4.</p>\n\n<p>These are frequently refereed to as HTML5 technologies.</p>\n\n<ul>\n<li>Javascript</li>\n<li>HTML Canvas</li>\n<li>WebGL</li>\n<li>CSS3</li>\n<li>Other CSS improvements such as flex boxes</li>\n<li>Offline Storage</li>\n<li>Geolocation</li>\n<li>New events such as touch and orientation</li>\n<li>Ajax</li>\n<li>Websockets</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>You cannot create web pages without HTML. Nowadays, javascript is the script of the web and, to do most things dynamically, you need to use it despite the many things CSS3 can even do.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I got asked a question that I really didn't know how to answer. \"What's the difference between HTML5 and Javascript?\" I mean we know HTML is a simple markup language but to get into the things that HTML5 does, such as the <code>&lt;canvas&gt;</code> tag for instance; don't you really NEED JavaScript to produce those canvas animations? Would you even be able to make an image slider without any JavaScript assistance? When it comes down to it wouldn't I be able to just use a JavaScript plugin vs HTML5 99% of the time?</p>\n",
            "last_activity_date": 1317742864,
            "question_id": 7650426,
            "score": 23,
            "tags": [
                "javascript",
                "jquery",
                "css",
                "html5",
                "animation"
            ],
            "title": "What&#39;s The Difference HTML5 vs Javascript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>No, <code>setInterval</code> is not CPU intensive in and of itself.  If you have a lot of intervals running on very short cycles (or a very complex operation running on a moderately long interval), then <em>that</em> can easily become CPU intensive, depending upon exactly what your intervals are doing and how frequently they are doing it.</p>\n\n<p>I wouldn't expect to see any issues with checking the URL every 100 milliseconds on an interval, though personally I would increase the interval to 250 milliseconds, just because I don't expect that the difference between the two would be noticeable to a typical user and because I generally try to use the longest timeout intervals that I think I can get away with, particularly for things that are expected to result in a no-op most of the time.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I would rather say it's quite the opposite. Using <code>setTimeout</code> and <code>setInterval</code> correctly, can drastical reduce the browsers CPU usage. For instance, using <code>setTimeout</code> instead of using a <code>for</code> or <code>while</code> loop will not only reduce the intensity of CPU usage, but will also guarantee that the browser has a chance to update the UI queue more often. So long running processes will not freeze and lockup the user experience.</p>\n\n<p>But in general, using <code>setInterval</code> really like a lot on your site may slow down things. 20 simultaneously running intervals with more or less heavy work will affect the show. And then again.. you really can mess up any part I guess that is not a problem of <code>setInterval</code>.</p>\n\n<p>..and by the way, you don't need to check the hash like that. There are events for that:</p>\n\n<pre><code>onhashchange\n</code></pre>\n\n<p>will fire when there was a change in the hash.</p>\n\n<pre><code>window.addEventListener('hashchange', function(e) {\n    console.log('hash changed, yay!');\n}, false);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>There's a bit of marketing going there under the \"CPU intensive\" term. What it really means is \"more CPU intensive than some alternatives\". It's not \"CPU intensive\" as in \"uses a whole lot of CPU power like a game or a compression algorithm would do\".</p>\n\n<p>Explanation :</p>\n\n<blockquote>\n  <p>Once the browser has yielded control it relies on an interrupt from\n  the underlying operating system and hardware to receive control and\n  issue the JavaScript callback. Having longer durations between these\n  interrupts allows hardware to enter low power states which\n  significantly decreases power consumption.\n  By default the Microsoft Windows operating system and Intel based\n  processors use 15.6ms resolutions for these interrupts (64 interrupts\n  per second). This allows Intel based processors to enter their lowest\n  power state. For this reason web developers have traditionally only\n  been able to achieve 64 callbacks per second when using setTimeout(0)\n  when using HTML4 browsers including earlier editions of Internet\n  Explorer and Mozilla Firefox.</p>\n  \n  <p>Over the last two years browsers have attempted to increase the number\n  of callbacks per second that JavaScript developers can receive through\n  the setTimeout and setInterval API\u2019s by changing the power conscious\n  Windows system settings and preventing hardware from entering low\n  power states. The HTML5 specification has gone to the extreme of\n  recommending 250 callbacks per second. This high frequency can result\n  in a 40% increase in power consumption, impacting battery life,\n  operating expenses, and the environment. In addition, this approach\n  does not address the core performance problem of improving CPU\n  efficiency and scheduling.</p>\n</blockquote>\n\n<p>From <a href=\"http://ie.microsoft.com/testdrive/Performance/setImmediateSorting/Default.html\" rel=\"nofollow\">http://ie.microsoft.com/testdrive/Performance/setImmediateSorting/Default.html</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In your case there will not be any issue. But if your doing some huge animations in canvas or working with webgl , then there will be some CPU issues, so for that you can use requestAnimationFrame.</p>\n\n<p>Refer this link <a href=\"http://paulirish.com/2011/requestanimationframe-for-smart-animating/\" rel=\"nofollow\">About requestAnimationFrame</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I don't think <code>setInterval</code> is inherently going to cause you significant performance problems.  I suspect the reputation may come from an earlier era, when CPUs were less powerful.</p>\n\n<p>There are ways that you can improve the performance, however, and it's probably wise to do them:</p>\n\n<ol>\n<li>Pass a function to <code>setInterval</code>, rather than a string.</li>\n<li>Have as few intervals set as possible.</li>\n<li>Make the interval durations as long as possible.</li>\n<li>Have the code running each time as short and simple as possible.</li>\n</ol>\n\n<p>Don't optimise prematurely -- don't make life difficult for yourself when there isn't a problem.</p>\n\n<p>One thing, however, that you can do in your particular case is to use the <code>onhashchange</code> event, rather than timeouts, in browsers that support it.</p>\n",
                    "is_accepted": true,
                    "score": 14
                }
            ],
            "body": "<p>I read somewhere that setInterval is CPU intensive. I created a script that uses setInterval and monitored the CPU usage but didn't notice a change. I want to know if there is something I missed.</p>\n\n<p>What the code does is check for changes to the hash in the URL (content after #) every 100 milliseconds and if it has changed, load a page using AJAX. If it has not changed, nothing happens. Would there be any CPU issues with that.</p>\n",
            "last_activity_date": 1385015895,
            "question_id": 6650134,
            "score": 23,
            "tags": [
                "javascript",
                "ajax",
                "cpu",
                "setinterval"
            ],
            "title": "Is setInterval CPU intensive?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>text/javascript was introduced when the web was young and people hadn't thought things through.</p>\n\n<p>Then people thought things through, and decided that text/* should be reserved for things designed to be human readable (which is why some XML is text/xml and other XML is application/xml). JavaScript is not human readable, so text/javascript was deprecated and application/javascript was introduced to replace it.</p>\n\n<p>Years later, some browsers still haven't caught up.</p>\n\n<p>You can configure your server to always serve application/javascript in the HTTP headers; browsers that don't support it also pay no attention to the actual content-type.</p>\n\n<p>For the time being, if you are writing HTML 4 or XHTML 1, specify text/javascript in the type attribute for the sake of backwards compatibility. If you are writing HTML 5, then omit the type attribute (as it is now optional).</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>HTML 4.01 (1999) specification suggests using MIME type <code>text/javascript</code> (<a href=\"http://www.w3.org/TR/1999/REC-html401-19991224/interact/scripts.html#h-18.2.2.2\" rel=\"nofollow\">http://www.w3.org/TR/1999/REC-html401-19991224/interact/scripts.html#h-18.2.2.2</a>).</p>\n\n<p>However, RFC 4329 (2006) now recommends the use of <code>application/javascript</code>.</p>\n\n<p>It seems that historically <code>text/javascript</code> was used a lot and since it was the type that browsers most likely supported, this was the type that got suggested also in the HTML specification. Ideally, you would use <code>application/javascript</code>.</p>\n\n<p>In practice you may need to use <code>text/javascript</code> to provide compatibility with less-conforming browsers.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/876561/when-serving-javascript-files-is-it-better-to-use-the-application-javascript-or\">When serving JavaScript files, is it better to use the application/javascript or application/x-javascript</a>  </p>\n</blockquote>\n\n\n\n<p>whats is difference between text/javascript and application/javascript?</p>\n\n<p>As IE will completely ignore the script tag if you have set type attribute to application/javascript.</p>\n\n<p>But what is the main difference and in which case we need to use the particular.</p>\n",
            "last_activity_date": 1359196144,
            "question_id": 6122905,
            "score": 23,
            "tags": [
                "javascript"
            ],
            "title": "whats is difference between text/javascript and application/javascript"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>Someone came up with an idea <a href=\"http://www.picnet.com.au/blogs/Guido/post/2010/03/04/How-to-prevent-Stop-running-this-script-message-in-browsers.aspx\">here</a></p>\n\n<blockquote>\n  <p>Avoiding the 'Script taking too long' (all browsers have some form or another of this) message in browsers is relatively simple. You just have to make sure the browser knows you have not created an endless loop or recursion. And the easiest way to do is is to just give the browser a breather in between long running tasks.</p>\n  \n  <p>So how would we go about this.  Well the simplest solution is to just break up your task into mutliple smaller tasks with a setTimeout in between these tasks.  The utility (see <a href=\"http://www.picnet.com.au/blogs/Guido/post/2010/03/04/How-to-prevent-Stop-running-this-script-message-in-browsers.aspx\">link</a>) does just this</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 22
                }
            ],
            "body": "<blockquote>\n  <p>Stop running this script?</p>\n  \n  <p>A script on this page is causing\n  Internet Explorer to run slowly. If it\n  continues to run, your computer might\n  become unresponsive.</p>\n</blockquote>\n\n<p>I'm sure we've all seen this useful and informative error message from IE7 (or rather IE8 in IE7 mode).  I need some help with removing this message.</p>\n\n<p>So, for my work, I need to get our website working in IE7.  Apparently, some of our clients can't upgrade or use another browser (corporate regulations or something).</p>\n\n<p>Anyway, the page in question contains tabs (using jQueryUI).  After the page loads, jQuery loads the data for each tab using AJAX; the tabs are loaded one by one, using a queue.  In each tab, there are 'widgets' which contain HTML and JavaScript (for each tab load, there are various script tags).</p>\n\n<p>I am getting the 'slow script' error during the loading of the tabs.  I know that IE hates when scripts don't return control to the browser.  So, I was wondering if there was a way to 'return control' or sleep somehow, so IE can 'reset' it's slow script counter.</p>\n",
            "last_activity_date": 1352394394,
            "question_id": 5667456,
            "score": 23,
            "tags": [
                "javascript",
                "jquery",
                "internet-explorer"
            ],
            "title": "Stop running this script, IE7"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>You have to call this function after insert dynamic HTML element</p>\n\n<p><code>ko.applyBindings(viewModel, elementContainingDynamicContent)</code></p>\n\n<p>Example here <a href=\"http://jsfiddle.net/rniemeyer/FCN5p/\">http://jsfiddle.net/rniemeyer/FCN5p/</a></p>\n",
                    "is_accepted": true,
                    "score": 34
                },
                {
                    "body": "<p>Use \"html\" tag</p>\n\n\n\n<p>see:<a href=\"http://knockoutjs.com/documentation/html-binding.html\" rel=\"nofollow\">http://knockoutjs.com/documentation/html-binding.html</a> for more details</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm using JQuery DataTables for all my tables because of all the nice built-in features, but it seems the only way to customize the table layout is to set the \"sDom\" option attribute for the DataTable and use something like $(\"div.SOMECLASS\").html(HTML_HERE) to insert the customized html into the table. (FYI, i'm just trying to customize the header).</p>\n\n<p>The problem is I want the inserted html to use knockoutjs binding. Knockout doesn't seem to initialize the binding this way. </p>\n\n<p>Is there a way to work around this? </p>\n\n<p>This is part of the html that I want to insert. It's pretty much a drop down list of some custom filter functions for the table. </p>\n\n<pre><code>'&lt;li&gt;&lt;a data-bind=\"click: Filter(\\'Severity 1\\', 2)\"&gt;Severity 1&lt;/a&gt;&lt;/li&gt;'\n</code></pre>\n\n<p>-Thanks!</p>\n",
            "last_activity_date": 1395765089,
            "question_id": 10826482,
            "score": 22,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "knockout.js",
                "knockout-2.0"
            ],
            "title": "Get dynamically inserted HTML to work with knockoutjs"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<pre><code>var myobject = new MyClass1(\"5678999\", \"text\");\nvar dto = { MyClass1: myobject };\nconsole.log(JSON.stringify(dto));\n</code></pre>\n\n<p>EDIT:</p>\n\n<p><code>JSON.stringify</code> will stringify <strong>all</strong> 'properties' of your class. If you want to persist only some of them, you can specify them individually like this:</p>\n\n<pre><code>var dto = { MyClass1: {\n    property1: myobject.property1,\n    property2: myobject.property2\n}};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>You can use a named function on the constructor. </p>\n\n<pre><code>MyClass1 = function foo(id, member) {\n    this.id = id;\n    this.member = member;\n}\n\nvar myobject = new MyClass1(\"5678999\", \"text\");\n\nconsole.log( myobject.constructor );\n\n//function foo(id, member) {\n//    this.id = id;\n//    this.member = member;\n//}\n</code></pre>\n\n<p>You could use a regex to parse out 'foo' from myobject.constructor and use that to get the name.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Well, the type of an element is not standardly serialized, so you should add it manually. For example</p>\n\n<pre><code>var myobject = new MyClass1(\"5678999\", \"text\");\nvar toJSONobject = { objectType: myobject.constructor, objectProperties: myobject };\nconsole.log(JSON.stringify(toJSONobject));\n</code></pre>\n\n<p>Good luck!</p>\n\n<p>edit: changed typeof to the correct .constructor. See <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor\" rel=\"nofollow\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/constructor</a> for more information on the constructor property for Objects.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Below is another way by which we can JSON data with JSON.stringify() function</p>\n\n<pre><code>var Utils = {};\nUtils.MyClass1 = function (id, member) {\n    this.id = id;\n    this.member = member;\n}\nvar myobject = { MyClass1: new Utils.MyClass1(\"5678999\", \"text\") };\nalert(JSON.stringify(myobject));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>ok i resolve my problem in this way:</p>\n\n<p>i adjust the json2.js standard method JSON.stringify() and in str() function when reads an object i put first the typeof, very simple:</p>\n\n<pre><code>....\n    // Otherwise, iterate through all of the keys in the object.\n            var speechModify = false;\n            if(value.classname) {\n                partial.push('\"' + value.classname + '\":{');\n                speechModify = true;\n            }\n.....\n</code></pre>\n\n<p>Only to add is a classname attribute in my classes. And after the iterate adds this sentence:</p>\n\n<pre><code>if(speechModify)\n            partial.push(\"}\");\n\n// Join all of the member texts together, separated with commas,\n// and wrap them in braces.\n\n            v = partial.length === 0\n                ? '{}'\n                : gap\n                ? '{\\n' + gap + partial.join(',\\n' + gap) + '\\n' + mind + '}'\n                : '{' + partial.join(',') + '}';\n            gap = mind;\n\n        v = v.replace(\"{,\",\"{\");\n        v = v.replace(\",}\", \"}\");\n</code></pre>\n\n<p>Thanks all.</p>\n",
                    "is_accepted": true,
                    "score": 1
                },
                {
                    "body": "<p>This might be useful.\n<a href=\"http://nanodeath.github.com/HydrateJS/\" rel=\"nofollow\">http://nanodeath.github.com/HydrateJS/</a>\n<a href=\"https://github.com/nanodeath/HydrateJS\" rel=\"nofollow\">https://github.com/nanodeath/HydrateJS</a></p>\n\n<p>Use <code>hydrate.stringify</code> to serialize the object and <code>hydrate.parse</code> to deserialize.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If It's Just A JSON You Can stringify A Json :</p>\n\n<pre><code>var obj = {\n    cons: [[String, 'some', 'somemore']],\n    func: function(param, param2){\n        param2.some = 'bla';\n    }\n};\n\nvar text=JSON.stringify(obj);\n</code></pre>\n\n<p>And Parse To Jason Again By parse :</p>\n\n<pre><code>var myVar=JSON.parse(text`);\n</code></pre>\n\n<p>If You Have Functions In The Object Use This To Serialize:</p>\n\n<pre><code>function objToString(obj, ndeep) {\n  switch(typeof obj){\n    case \"string\": return '\"'+obj+'\"';\n    case \"function\": return obj.name || obj.toString();\n    case \"object\":\n      var indent = Array(ndeep||1).join('\\t'), isArray = Array.isArray(obj);\n      return ('{['[+isArray] + Object.keys(obj).map(function(key){\n           return '\\n\\t' + indent +(isArray?'': key + ': ' )+ objToString(obj[key], (ndeep||1)+1);\n         }).join(',') + '\\n' + indent + '}]'[+isArray]).replace(/[\\s\\t\\n]+(?=(?:[^\\'\"]*[\\'\"][^\\'\"]*[\\'\"])*[^\\'\"]*$)/g,'');\n    default: return obj.toString();\n  }\n}\n</code></pre>\n\n<p>Example</p>\n\n<p>Serialize:</p>\n\n<pre><code>var text=objToString(obj); //To Serialize Object\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>\"{cons:[[String,\"some\",\"somemore\"]],func:function(param,param2){param2.some='bla';}}\"\n</code></pre>\n\n<p>Unserialize:</p>\n\n<pre><code>Var myObj=eval('('+text+')');//To UnSerialize \n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>Object {cons: Array[1], func: function, spoof: function}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>i have this javascript prototype:</p>\n\n<pre><code>Utils.MyClass1 = function(id, member) {\nthis.id = id;\nthis.member = member;\n}\n</code></pre>\n\n<p>and i create a new Object:</p>\n\n<pre><code>var myobject = new MyClass1(\"5678999\", \"text\");\n</code></pre>\n\n<p>if i do: </p>\n\n<pre><code>console.log(JSON.stringify(myobject));\n</code></pre>\n\n<p>The result is:</p>\n\n<pre><code>{\"id\":\"5678999\", \"member\":\"text\"}\n</code></pre>\n\n<p>but i need that the typeof the objects includes in json string, like this:</p>\n\n<pre><code>\"MyClass1\": { \"id\":\"5678999\", \"member\":\"text\"} \n</code></pre>\n\n<p>There are a fast way using any framework or something? or i need to implement the toJson() method in the class and do it manually.</p>\n\n<p>Thanks!  </p>\n",
            "last_activity_date": 1416550926,
            "question_id": 8164802,
            "score": 22,
            "tags": [
                "javascript",
                "json",
                "constructor"
            ],
            "title": "serialize javascript object into a JSON string"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Had it wrong at first. Should have used <code>concat()</code> instead.</p>\n\n<pre><code>var a1 = [1,2,3,4,5];\nvar a2 = [21,22];\n\nvar result = a1.slice( 0, 2 ).concat( a2 ).concat( a1.slice( 2 ) );\n</code></pre>\n\n<p><strong>Example:</strong> <a href=\"http://jsfiddle.net/f3cae/1/\" rel=\"nofollow\">http://jsfiddle.net/f3cae/1/</a></p>\n\n<p>This takes a <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/slice\" rel=\"nofollow\"><code>slice()</code><sup><i>[docs]</i></sup></a> of <code>a1</code> up to the index, then does a <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/concat\" rel=\"nofollow\"><code>concat()</code><sup><i>[docs]</i></sup></a> to add <code>a2</code> to that array, then uses <code>.concat()</code> again taking another <code>.slice()</code> of <code>a1</code>, but this time starting at the same index through the end.</p>\n\n<p>And add it to <code>Array.prototype</code> if you wish:</p>\n\n<p><strong>Example:</strong> <a href=\"http://jsfiddle.net/f3cae/2/\" rel=\"nofollow\">http://jsfiddle.net/f3cae/2/</a></p>\n\n<pre><code>Array.prototype.injectArray = function( idx, arr ) {\n    return this.slice( 0, idx ).concat( arr ).concat( this.slice( idx ) );\n};\n\nvar a1 = [1,2,3,4,5];\nvar a2 = [21,22];\n\nvar result = a1.injectArray( 2, a2 );\n</code></pre>\n\n<hr>\n\n<p><s>You can use the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\" rel=\"nofollow\"><code>splice()</code><sup><i>[docs]</i></sup></a> method without iterating.</p>\n\n<pre><code>a1.splice( 2, 0, a2 );\n</code></pre>\n\n\n\n<p><a href=\"http://jsfiddle.net/f3cae/\" rel=\"nofollow\">http://jsfiddle.net/f3cae/</a>\n</s></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can use <code>splice</code> combined with some <code>apply</code> trickery:</p>\n\n<pre><code>a1 = [1,2,3,4,5];\na2 = [21,22];\n\na1.splice.apply(a1, [2, 0].concat(a2));\n\nconsole.log(a1); // [1, 2, 21, 22, 3, 4, 5];\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 34
                },
                {
                    "body": "<p>I wanted to find a way to do this with <code>splice()</code> and no iterating: <a href=\"http://jsfiddle.net/jfriend00/W9n27/\" rel=\"nofollow\">http://jsfiddle.net/jfriend00/W9n27/</a>.</p>\n\n<pre><code>a1 = [1,2,3,4,5];\na2 = [21,22];\n\na2.unshift(2, 0);        // put first two params to splice onto front of array\nArray.prototype.splice.apply(a1, a2);   // pass array as arguments parameter to splice\nalert(a1.join(', '));    // [1, 2, 21, 22, 3, 4, 5];\n</code></pre>\n\n<p>In general purpose function form:</p>\n\n<pre><code>function arrayInsertAt(destArray, pos, arrayToInsert) {\n    var args = [];\n    args.push(pos);                           // where to insert\n    args.push(0);                             // nothing to remove\n    args = args.concat(arrayToInsert);        // add on array to insert\n    destArray.splice.apply(destArray, args);  // splice it in\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var a1 = [1,2,3,4,5];\nvar a2 = [21,22];\n\nfunction injectAt(d, a1, a2) {\n    for(var i=a1.length-1; i&gt;=d; i--) {\n        a1[i + a2.length] = a1[i];\n    }\n    for(var i=0; i&lt;a2.length; i++) {\n        a1[i+d] = a2[i];\n    }\n}\n\ninjectAt(2, a1, a2);\n\nalert(a1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's my version with no special tricks:</p>\n\n<pre><code>function insert_array(original_array, new_values, insert_index) {\n    for (var i=0; i&lt;new_values.length; i++) {\n        original_array.splice((insert_index + i), 0, new_values[i]);\n    }\n    return original_array;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want to insert another array into an array without creating a new one, the easiest way is to use either <code>push</code> or <code>unshift</code> with <code>apply</code></p>\n\n<p>Eg:</p>\n\n<pre><code>a1 = [1,2,3,4,5];\na2 = [21,22];\n\n// Insert a1 at beginning of a2\na2.unshift.apply(a2,a1);\n// Insert a1 at end of a2\na2.push.apply(a2,a1);\n</code></pre>\n\n<p>This works because both <code>push</code> and <code>unshift</code> take a variable number of arguments.\nA bonus, you can easily choose which end to attach the array from!</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>What is the more efficient way to insert an array inside another array. </p>\n\n<pre><code>a1 = [1,2,3,4,5];\na2 = [21,22];\n\nnewArray - a1.insertAt(2,a2) -&gt; [1,2, 21,22, 3,4,5];\n</code></pre>\n\n<p>Iterating a2 using splice looks a bit awfull from a performance point of view if a2 array is large.</p>\n\n<p>Thanks.</p>\n",
            "last_activity_date": 1409845768,
            "question_id": 7032550,
            "score": 22,
            "tags": [
                "javascript",
                "arrays",
                "performance"
            ],
            "title": "Javascript - insert an array inside another array"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>You should be able to create a reference to your survey before you iterate over the questions.</p>\n\n<pre><code>function Survey() {\n    this.questions = new Array();\n    var survey = this;\n    $('.question').each(function(i) {\n        survey.questions.push(new Question(this));\n    });\n}\n\nfunction Question(element) {\n    this.element = $(element);\n}\n\nvar survey = new Survey();\n\n$.each(survey.questions, function() {\n    $(\"ul\").append(\"&lt;li&gt;\" + this.element.text() + \"&lt;/li&gt;\");\n});\n</code></pre>\n\n<p>Working example on <a href=\"http://jsfiddle.net/markcoleman/MfBHT/1/\">jsfiddle</a></p>\n",
                    "is_accepted": true,
                    "score": 17
                },
                {
                    "body": "<p>Though this may not be relevant answer , But since the question is how to pass parameter to jQuery each function .</p>\n\n<p><strong>First Approach : Using Partial Function</strong> - <a href=\"http://ejohn.org/blog/partial-functions-in-javascript/\" rel=\"nofollow\">more on this</a> \nand  from <a href=\"http://docs.closure-library.googlecode.com/git/closure_goog_base.js.source.html#line1119\" rel=\"nofollow\">closure library</a></p>\n\n<p><a href=\"http://jsfiddle.net/yA89R/5/\" rel=\"nofollow\">jsfiddle</a>:</p>\n\n<pre><code>var param = 'extra-param';   \n\nvar partial = function(fn, var_args) {\n  var args = Array.prototype.slice.call(arguments, 1);\n  return function() {\n    // Clone the array (with slice()) and append additional arguments\n    // to the existing arguments.\n    var newArgs = args.slice();\n    newArgs.push.apply(newArgs, arguments);\n    return fn.apply(this, newArgs);\n  };\n};\n\n$(['joe','james','rick','kirk']).each(partial (function (index,value) {\n    alert(arguments.length);\n    alert(arguments[0]);\n },param));\n</code></pre>\n\n<p><strong>Second Approach is</strong></p>\n\n<p>$.each function can take either 2 parameters <code>Index</code> and <code>Element</code>(which can also be referred as <code>this</code>)\nOR\nif you do not need <code>Index</code> then you can pass <code>Array</code> as argument to $.each and element can referred as this </p>\n\n<p><strong>CAUTION : args is for internal use only - by jQuery</strong></p>\n\n<pre><code>// Execute a callback for every element in the matched set.\n// (You can seed the arguments with an array of args, but this is\n// only used internally.)\neach: function( callback, args ) {\n    return jQuery.each( this, callback, args );\n},\n</code></pre>\n\n<p>Which will call  <code>each: function( obj, callback, args )</code></p>\n\n<p>then call  <code>callback.apply( obj[ i ], args );</code> if you pass array as argument\notherwise <code>callback.call( obj[ i ], i, obj[ i ] )</code>;</p>\n\n<p><em>please note the difference of apply and call</em></p>\n\n<p>Sample code : <a href=\"http://jsfiddle.net/dekajp/yA89R/1/\" rel=\"nofollow\">http://jsfiddle.net/dekajp/yA89R/1/</a></p>\n\n<pre><code>var param = 'rick';\n$(['joe','james','rick','kirk']).each(function (arg1 , arg2 ,arg3) {\n    //alert('[this: '+this +'] [arg1: '+ arg1 +'] [arg2:'+arg2+'] [param:'+param+']');\n},['hello 1','hello 2','hello 3']);\n</code></pre>\n\n<p>For Reference jQuery Each Code version 1.9</p>\n\n<pre><code>// args is for internal usage only\n    each: function( obj, callback, args ) {\n        var value,\n            i = 0,\n            length = obj.length,\n            isArray = isArraylike( obj );\n\n        if ( args ) {\n            if ( isArray ) {\n                for ( ; i &lt; length; i++ ) {\n                    value = callback.apply( obj[ i ], args );\n\n                    if ( value === false ) {\n                        break;\n                    }\n                }\n            } else {\n                for ( i in obj ) {\n                    value = callback.apply( obj[ i ], args );\n\n                    if ( value === false ) {\n                        break;\n                    }\n                }\n            }\n\n        // A special, fast, case for the most common use of each\n        } else {\n            if ( isArray ) {\n                for ( ; i &lt; length; i++ ) {\n                    value = callback.call( obj[ i ], i, obj[ i ] );\n\n                    if ( value === false ) {\n                        break;\n                    }\n                }\n            } else {\n                for ( i in obj ) {\n                    value = callback.call( obj[ i ], i, obj[ i ] );\n\n                    if ( value === false ) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        return obj;\n    },\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I'm working on an app that will present surveys to the user. The markup looks something like this:</p>\n\n<pre><code>&lt;body&gt;\n    &lt;div class=\"question\" id=\"q1\"&gt;\n        Question 1\n    &lt;/div&gt;\n    &lt;div class=\"question\" id=\"q2\"&gt;\n        Question 2\n    &lt;/div&gt;\n    &lt;!-- etc --&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>I want to construct the JavaScript objects from the DOM using jQuery, so in the <code>Survey</code> constructor I'm traversing the jQuery set using the <code>each()</code> method. The problem is that within the callback function I'm unable to get a reference to the <code>Survey</code> object in order to append each <code>Question</code> object to the <code>Survey.questions</code> array. How can get a reference to the <code>Survey</code> object? Is there a way to pass an additional parameter (e.g. a reference to the <code>Survey</code> object) to the callback function?</p>\n\n<pre><code>function Survey() {\n    this.questions = new Array;\n    $('.question').each(function(i) { (/* Survey object */).questions.push(new Question(this)); });\n}\n\nfunction Question(element) {\n    this.element = $(element);\n}\n</code></pre>\n",
            "last_activity_date": 1392245909,
            "question_id": 5033861,
            "score": 22,
            "tags": [
                "javascript",
                "jquery",
                "oop"
            ],
            "title": "Pass additional parameters to jQuery each() callback"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>I think you want to traverse the DOM nodes:</p>\n\n<pre><code>var childNodes = document.getElementById('test').childNodes, i, output = [];\n\nfor (i = 0; i &lt; childNodes.length; i++)\n    if (childNodes[i].nodeName == \"SCRIPT\")\n        output.push(childNodes[i].innerHTML);\n\nreturn output.join('');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I don't think there's a simple solution to just \"grab original source\" as it'll have to be something that's supplied by the browser. But, <strong>if you are only interested in doing this for a section of the page</strong>, then I have a workaround for you.</p>\n\n<p>You can wrap the section of interest inside a \"frozen\" script:</p>\n\n<p><code>&lt;script id=\"frozen\" type=\"text/x-frozen-html\"&gt;</code></p>\n\n<p>The <code>type</code> attribute I just made up, but it will force the browser to ignore everything inside it. You then add another script tag (proper javascript this time) immediately after this one - the \"thawing\" script. This thawing script will get the frozen script by ID, grab the text inside it, and do a <code>document.write</code> to add the actual contents to the page. Whenever you need the original source, it's still captured as text inside the frozen script.</p>\n\n<p>And there you have it. The downside is that I wouldn't use this for the whole page... (SEO, syntax highlighting, performance...) but it's quite acceptable if you have a special requirement on part of a page.</p>\n\n<hr>\n\n<p>Edit: Here is some sample code. Also, as @FlashXSFX correctly pointed out, any script tags within the frozen script will need to be escaped. So in this simple example, I'll make up a <code>&lt;x-script&gt;</code> tag for this purpose.</p>\n\n<pre><code>&lt;script id=\"frozen\" type=\"text/x-frozen-html\"&gt;\n   &lt;div id=\"test\"&gt;\n      &lt;x-script type=\"text/javascript\"&gt;document.write(\"hello\");&lt;/x-script&gt;\n   &lt;/div&gt;\n&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n   // Grab contents of frozen script and replace `x-script` with `script`\n   function getSource() {\n      return document.getElementById(\"frozen\")\n         .innerHTML.replace(/x-script/gi, \"script\");\n   }\n   // Write it to the document so it actually executes\n   document.write(getSource());\n&lt;/script&gt;\n</code></pre>\n\n<p>Now whenever you need the source:</p>\n\n<pre><code>alert(getSource());\n</code></pre>\n\n<p>See the demo: <a href=\"http://jsbin.com/uyica3/edit\" rel=\"nofollow\">http://jsbin.com/uyica3/edit</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Brute force approach</p>\n\n<pre><code>var orig = document.getElementById(\"test\").innerHTML;\nalert(orig.replace(/&lt;\\/script&gt;[.\\n\\r]*.*/i,\"&lt;/script&gt;\"));\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>This could be better</p>\n\n<pre><code>var orig = document.getElementById(\"test\").innerHTML + \"&lt;&lt;&gt;&gt;\";\nalert(orig.replace( /&lt;\\/script&gt;[^(&lt;&lt;&gt;&gt;)]+&lt;&lt;&gt;&gt;/i, \"&lt;\\/script&gt;\"));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you override document.write to add some identifiers at the beginning and end of everything written to the document by the script, you will be able to remove those writes with a regular expression.</p>\n\n<p>Here's what I came up with:</p>\n\n<pre><code>    &lt;script type=\"text/javascript\" language=\"javascript\"&gt;\n        var docWrite = document.write;\n        document.write = myDocWrite;\n\n        function myDocWrite(wrt) {\n            docWrite.apply(document, ['&lt;!--docwrite--&gt;' + wrt + '&lt;!--/docwrite--&gt;']);\n        }\n    &lt;/script&gt;\n</code></pre>\n\n<p>Added your example somewhere in the page after the initial script:</p>\n\n<pre><code>    &lt;div id=\"test\"&gt;\n        &lt;script type=\"text/javascript\"&gt;     document.write(\"hello\");&lt;/script&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<p>Then I used this to alert what was inside:</p>\n\n<pre><code>    var regEx = /&lt;!--docwrite--&gt;(.*?)&lt;!--\\/docwrite--&gt;/gm;\n    alert(document.getElementById('test').innerHTML.replace(regEx, ''));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want the pristine document, you'll need to fetch it again. There's no way around that. If it weren't for the document.write() (or similar code that would run during the load process) you could load the original document's innerHTML into memory on load/domready, before you modify it.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I can't think of a solution that would work the way you're asking. The only code that Javascript has access to is via the DOM, which only contains the result after the page has been processed.</p>\n\n<p>The closest I can think of to achieve what you want is to use Ajax to download a fresh copy of the raw HTML for your page into a Javascript string, at which point since it's a string you can do whatever you like with it, including displaying it in an alert box.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Could you send an Ajax request to the same page you're currently on and use the result as your original HTML? This is foolproof given the right conditions, since you are literally getting the original HTML document. However, this won't work if the page changes on every request (with dynamic content), or if, for whatever reason, you cannot make a request to that specific page.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A simple way is to fetch it form the server again. It will be in the cache most probably. Here is my solution using <a href=\"http://api.jquery.com/jquery.get/\" rel=\"nofollow\">jQuery.get()</a>. It takes the original uri of the page and loads the data with an ajax call:</p>\n\n<pre><code>$.get(document.location.href, function(data,status,jq) {console.log(data);})\n</code></pre>\n\n<p>This will print the original code without any javascript. It does not do any error handling!</p>\n\n<p>If don't want to use jQuery to fetch the source, consult the answer to this question: <a href=\"http://stackoverflow.com/questions/8567114/how-to-make-an-ajax-call-without-jquery\">How to make an ajax call without jquery?</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I have this code:</p>\n\n<pre><code>&lt;div id=\"test\"&gt;\n    &lt;script type=\"text/javascript\"&gt;document.write(\"hello\");&lt;/script&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>If I do:</p>\n\n<pre><code>alert(document.getElementById('test').innerHTML);\n</code></pre>\n\n<p>it shows:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;document.write(\"hello\");&lt;/script&gt;hello\n</code></pre>\n\n<p><strong>Is it possible to get in some way the original HTML source without the changes made by the processed Javascript?</strong> In simple terms, I would like the <code>alert</code> to show only:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;document.write(\"hello\");&lt;/script&gt;\n</code></pre>\n\n<p>without the final <code>\"hello\"</code> (that is the result of the processed script).</p>\n\n<hr>\n\n<p>UPDATE: i thought it was clear that this is only a specific example, but I'm looking for a general purpose solution, I've never needed to write \"hello\" in my webpages. :)</p>\n",
            "last_activity_date": 1407456186,
            "question_id": 4397577,
            "score": 22,
            "tags": [
                "javascript",
                "html",
                "source-code",
                "innerhtml"
            ],
            "title": "Get original innerHTML source without the Javascript generated contents"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p><code>$get</code> &amp; <code>$find</code> are shortcut functions Microsoft has built into their Ajax JavaScript Library.</p>\n\n<p><code>$get</code> is short for the standard JavaScript <a href=\"https://developer.mozilla.org/en/DOM/document.getElementByID\"><code>GetElementById</code> function</a>.  <code>$find</code> is short for .Net's <a href=\"http://www.asp.net/ajax/documentation/live/clientreference/Sys/ApplicationClass/SysApplicationFindComponentMethod.aspx\"><code>findComponent()</code> function</a>.  This is not a standard JavaScript function and is specific to Microsoft's Ajax JavaScript library.</p>\n\n<p>Matt Berseth does a great write up of the differences &amp; usages <a href=\"http://web.archive.org/web/20100212204840/http://mattberseth.com/blog/2007/08/the_everuseful_get_and_find_as.html\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<ol>\n<li><p><code>$get(elementId)</code> returns a DOM element, same as <code>document.getElementById(elementId)</code></p></li>\n<li><p><code>$find(elementId)</code> returns an ASP.NET-AJAX JavaScript object, with it's own functions and properties.</p>\n\n<p>Inconveniently, in Microsoft Ajax those objects are always attached to some DOM element as it's attribute and are related to that DOM element in some ways, so that's why you have to pass element ID to retrieve the object data.</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 11
                }
            ],
            "body": "<p>I'm a .NET programmer who've just started to learn more about client side scripting, and I was wondering sometimes you use <code>$get('value')</code> and <code>$find('value')</code> and I've discovered that these are just shortcuts for <code>document.getElementById('value')</code> and <a href=\"http://msdn.microsoft.com/en-us/library/bb397522%28loband%29.aspx\"><code>Sys.Application.findComponent('value')</code></a>, respectively.</p>\n\n<p>However, I still don't understand: what is the difference between these two functions in JavaScript? What exactly are they looking up/retrieving when invoked?</p>\n\n<p>Thanks in advance.</p>\n",
            "last_activity_date": 1400206454,
            "question_id": 2726304,
            "score": 22,
            "tags": [
                "javascript",
                "asp.net-ajax"
            ],
            "title": "What&#39;s the difference between $get and $find in JavaScript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>No. <code>this</code> is just a local reference to the object so deleting it does not make the object not exist. There is no way for an object to self destruct in this manner. If you have large objects that you believe should be erased afterwards then you should look at using the Facade or Strategy patterns.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>That wouldn't work, first because the <a href=\"http://bclary.com/2004/11/07/#a-10.1.7\"><code>this</code></a> value associated with an execution context is <em>immutable</em>.</p>\n\n<p>You might now think that deleting <code>myObject</code> (by <code>delete myObject;</code>) might work, but that wouldn't do it either.</p>\n\n<p>Variables are really properties of the <em>Variable Object</em>, this object is not accessible by code, it is just in front of in the <em>scope chain</em>, where you do the variable declarations.</p>\n\n<p>The Variable statement, creates those properties with the <code>{ DontDelete }</code> attribute, and that causes the <code>delete</code> operator to fail.</p>\n\n<p>An option if you want to achieve this is to <em>nullify</em> your <code>myObject</code> instance, but that doesn't guarantees that another reference is still pointing to that object.</p>\n\n<p>Recommended lectures:</p>\n\n<ul>\n<li><a href=\"http://perfectionkills.com/understanding-delete/\">Understanding <code>delete</code></a></li>\n<li><a href=\"http://bclary.com/2004/11/07/#a-10.1.3\">Variable instantiation</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 27
                },
                {
                    "body": "<p>You could try</p>\n\n<pre><code>window.namespace.myObject = Object.create(baseObject);\n\nnamespace.myObject.init = function() {\n\n   /* do some stuff... */\n\n   delete window.namespace.myObject;\n\n}\n\nnamespace.myObject.init();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am wondering if it is possible for an object in javascript to delete itself once it has finished its task.</p>\n\n<p>For example, I have the following object...</p>\n\n<pre><code>var myObject = Object.create(baseObject);\nmyObject.init = function() {\n  /* do some stuff... */\n   delete this;\n};\nmyObject.init();\n</code></pre>\n\n<p>Does this work?  If not, is there another way?</p>\n\n<p>Thanks,</p>\n",
            "last_activity_date": 1386178985,
            "question_id": 2304860,
            "score": 22,
            "tags": [
                "javascript",
                "oop",
                "delete"
            ],
            "title": "Can an object automatically delete itself in javascript once it has achieved its purpose?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>I see you are using the sass helper method.</p>\n\n<p>In standard (non Sass) CSS you do something like this:</p>\n\n<p><code>.class { background-image: url(&lt;%= asset_path 'image.png' %&gt;) }</code></p>\n\n<p>The CSS file will need to have erb added to the extensions:</p>\n\n<p><code>file_name.css.erb</code></p>\n\n<p>For javascript the same rules apply:</p>\n\n<p><code>file_name.js.erb</code></p>\n\n<p>and in the file:</p>\n\n<p><code>var image_path = '&lt;%= asset_path 'image.png' %&gt;'</code></p>\n\n<p>The Rails <a href=\"http://edgeguides.rubyonrails.org/asset_pipeline.html\">asset pipeline guide</a> is an excellent source of information about how to use these features.</p>\n",
                    "is_accepted": true,
                    "score": 36
                },
                {
                    "body": "<p>In Rails 4, instead of using a <code>js.erb</code> view I recommend that you stick to the asset pipeline, and pass the URL to it with a variable instead using gon or some other technique discussed at: <a href=\"http://stackoverflow.com/questions/2721880/ruby-on-rails-send-javascript-variable-from-controller-to-external-javascript\">Ruby on Rails - Send JavaScript variable from controller to external Javascript asset file</a></p>\n\n<p>With <code>gon</code>:</p>\n\n<p>app/views/layouts/application.html.erb:</p>\n\n<pre><code>&lt;head&gt;\n  &lt;meta charset=\"utf-8\"/&gt;\n  &lt;%= include_gon %&gt;\n</code></pre>\n\n<p>app/controllers/application_controller.rb:</p>\n\n<pre><code>before_filter { gon.path = asset_path 'image.png' }\n</code></pre>\n\n<p>app/assets/javascripts/file.js.coffee:</p>\n\n<pre><code>alert gon.path\n</code></pre>\n\n<p>This method is faster because file is precompiled only once at startup, gets served by the server instead of through Rails, and on the same HTTP request as the rest of the Js.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In CSS files, you can get the proper name of an image asset (with the fingerprint) by using:</p>\n\n<pre><code>background-image: url(image-url(\"rails.png\"))\n</code></pre>\n\n<p>but how do you do the same from a JavaScript file?</p>\n",
            "last_activity_date": 1415704243,
            "question_id": 7381041,
            "score": 21,
            "tags": [
                "javascript",
                "image",
                "asset-pipeline",
                "rails-3.1"
            ],
            "title": "URL of images in JavaScript code using Rails 3.1 asset pipeline?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The biggest reason not to use the 2nd form is that you'll end up eliminating anything else that existed in the prototype before you assign it.  If that isn't something you're concerned with there's no reason not to declare it the way you've demonstrated.</p>\n",
                    "is_accepted": true,
                    "score": 14
                },
                {
                    "body": "<p>I think there is another drawback of using the \"assignment\" form to the <code>prototype</code> property: You will likely wipe out the <code>prototype.__proto__</code> property (prototype chain) when you're dealing with the \"pseudo-classical\" inheritance.</p>\n\n<p>Of course, one could argue there is a fishy way to remedy this, which is to attach the <code>__proto__</code> property yourself to connect the chain again. But forgetting doing this will break the code if you call the parent method. See my fiddle here: <a href=\"http://jsfiddle.net/glenn/v5Yub/\" rel=\"nofollow\">http://jsfiddle.net/glenn/v5Yub/</a></p>\n\n<p>Conclusion: The \"assignment\" form might look simpler / cleaner, but the \"property\" form is safer.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>In JavaScript we can assign properties to a function's prototype or set its prototype object directly:</p>\n\n<pre><code>var MyClass = function() { };\n\n// The \"property\" form...\nMyClass.prototype.foo = function() { ... };\nMyClass.prototype.bar = function() { ... };\nMyClass.prototype.gah = function() { ... };\n\n// OR the \"assignment\" form...\nMyClass.prototype = {\n  foo:function() { ... },\n  bar:function() { ... },\n  gah:function() { ... }\n};\n</code></pre>\n\n<p>I personally prefer the assignment form because you can easily wrap the object in a closure (e.g. to hide \"private\" objects) and if you later decide to change the name of \"MyClass\" you've only got to find two spots instead of potentially dozens.  (Of course, the same could be said for the \"property\" form by using and calling a function which takes the existing prototype as an argument but the \"assignment\" form seems more direct in my opinion.)</p>\n\n<p>Is there a strong reason to use one form instead of the other?</p>\n\n<p><strong>[Edit]</strong></p>\n\n<p>As commenter @Raynos mentions, the second form (assignment) clobbers the <code>prototype.constructor</code> attribute, which should be set to the MyClass function (and is by default in the first form [property]).  Are there any real drawbacks to this (other than the the fact that the property isn't set)?</p>\n",
            "last_activity_date": 1402070448,
            "question_id": 6256535,
            "score": 21,
            "tags": [
                "javascript",
                "prototype-programming"
            ],
            "title": "Is it ok to assign the JavaScript prototype object instead of just its properties?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>document.location is deprecated in favor of window.location, which can be accessed by just location, since it's a global object.</p>\n\n<p>The location object has multiple properties and methods. If you try to use it as a string then it acts like location.href. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><code>document.location</code> is a synonym for <code>window.location</code> that has been deprecated for almost as long as JavaScript has existed. Don't use it.</p>\n\n<p><code>location</code> is a structured object, with properties corresponding to the parts of the URL. <code>location.href</code> is the whole URL in a single string. Assigning a string to either is defined to cause the same kind of navigation, so take your pick.</p>\n\n<p>(I consider writing to <code>location.href= something</code> to be marginally better as it's slightly more explicit about what it's doing. You'd generally want to avoid just <code>location= something</code> as it looks misleadingly like a variable assignment. <code>window.location= something</code> is fine though.)</p>\n",
                    "is_accepted": true,
                    "score": 28
                },
                {
                    "body": "<p><code>document.location</code> is an object, while <code>document.location.href</code> is a string. But the former has a <code>toString</code> method, so you can read from it as if it was a string and get the same value as <code>document.location.href</code>.</p>\n\n<p>In some browsers - most modern ones, I think - you can also assign to <code>document.location</code> as if it were a string. According to the <a href=\"https://developer.mozilla.org/en/DOM/document.location\" rel=\"nofollow\">Mozilla documentation</a> however, it is better to use <code>window.location</code> for this purpose as <code>document.location</code> was originally read-only and so may not be as widely supported.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The <code>document.location</code> is an object that contains properties for the current location.</p>\n\n<p>The <code>href</code> property is one of these properties, containing the complete URL, i.e. all the other properties put together.</p>\n\n<p>Some browsers allow you to assign an URL to the <code>location</code> object and acts as if you assigned it to the <code>href</code> property. Some other browsers are more picky, and requires you to use the <code>href</code> property. Thus, to make the code work in all browsers, you have to use the <code>href</code> property.</p>\n\n<p>Both the <code>window</code> and <code>document</code> objects has a <code>location</code> object. You can set the URL using either <code>window.location.href</code> or <code>document.location.href</code>. However, logically the <code>document.location</code> object should be read-only (as you can't change the URL of a document; changing the URL loads a new document), so to be on the safe side you should rather use <code>window.location.href</code> when you want to set the URL.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<pre class=\"lang-js prettyprint-override\"><code>typeof document.location; // 'object'\ntypeof document.location.href; // 'string'\n</code></pre>\n\n<p>The <code>href</code> property is a string, while <code>document.location</code> itself is an object.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>As of <strong>June 14th 2013</strong> (<em>HTML5</em>), there is a significant difference</p>\n\n<p><code>Browser : Chrome 27.X.X</code></p>\n\n<p><strong>References: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.location\" rel=\"nofollow\">document.location</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.location\" rel=\"nofollow\">window.location</a></strong> (<em>MDN</em>)</p>\n\n<hr>\n\n<h1>document.location</h1>\n\n<p><code>type: Object</code></p>\n\n<p>The object when called by itself <code>document.location</code> return its <code>origin</code> + <code>pathname</code> properties concatenated.</p>\n\n<p>To retrieve just the URL as a string, the read-only <code>document.URL</code> property can be used.</p>\n\n<pre><code>ancestorOrigins: DOMStringList\nassign: function () { [native code] }\nhash: \"\"\nhost: \"stackoverflow.com\"\nhostname: \"stackoverflow.com\"\nhref: \"http://stackoverflow.com/questions/2652816/what-is-the-difference-between-document-location-href-and-document-location?rq=1\"\norigin: \"http://stackoverflow.com\"\npathname: \"/questions/2652816/what-is-the-difference-between-document-location-href-and-document-location\"\nport: \"\"\nprotocol: \"http:\"\nreload: function () { [native code] }\nreplace: function () { [native code] }\nsearch: \"?rq=1\"\ntoString: function toString() { [native code] }\nvalueOf: function valueOf() { [native code] }\n</code></pre>\n\n<hr>\n\n<h1>document.location.href</h1>\n\n<p><code>type: string</code></p>\n\n<pre><code>http://stackoverflow.com/questions/2652816/what-is-the-difference-between-document-location-href-and-document-location?rq=1\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is an example of the practical significance of the difference and how it can bite you if you don't realize it (document.location being an object and document.location.href being a string):</p>\n\n<p>We use MonoX Social CMS (<a href=\"http://mono-software.com\" rel=\"nofollow\">http://mono-software.com</a>) free version at <a href=\"http://social.ClipFlair.net\" rel=\"nofollow\">http://social.ClipFlair.net</a> and we wanted to add the language bar WebPart at some pages to localize them, but at some others (e.g. at discussions) we didn't want to use localization. So we made two master pages to use at all our .aspx (ASP.net) pages, in the first one we had the language bar WebPart and the other one had the following script to remove the /lng/el-GR etc. from the URLs and show the default (English in our case) language instead for those pages</p>\n\n<pre><code>&lt;script&gt;\n  var curAddr = document.location; //MISTAKE\n  var newAddr = curAddr.replace(new RegExp(\"/lng/[a-z]{2}-[A-Z]{2}\", \"gi\"), \"\");\n  if (curAddr != newAddr)\n    document.location = newAddr;\n&lt;/script&gt;\n</code></pre>\n\n<p>But this code isn't working, replace function just returns Undefined (no exception thrown) so it tries to navigate to say x/lng/el-GR/undefined instead of going to url x. Checking it out with Mozilla Firefox's debugger (F12 key) and moving the cursor over the curAddr variable it was showing lots of info instead of some simple string value for the URL. Selecting Watch from that popup you could see in the watch pane it was writing \"Location -> ...\" instead of \"...\" for the url. That made me realize it was an object</p>\n\n<p>One would have expected replace to throw an exception or something, but now that I think of it the problem was that it was trying to call some non-existent \"replace\" method on the URL object which seems to just give back \"undefined\" in Javascript.</p>\n\n<p>The correct code in that case is:</p>\n\n<pre><code>&lt;script&gt;\n  var curAddr = document.location.href; //CORRECT\n  var newAddr = curAddr.replace(new RegExp(\"/lng/[a-z]{2}-[A-Z]{2}\", \"gi\"), \"\");\n  if (curAddr != newAddr)\n    document.location = newAddr;\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What is the difference  between <code>document.location.href</code> and <code>document.location</code>?</p>\n\n<p>Is it the same across browsers?</p>\n",
            "last_activity_date": 1408536582,
            "question_id": 2652816,
            "score": 21,
            "tags": [
                "javascript"
            ],
            "title": "What is the difference between document.location.href and document.location?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Once you clear the interval using <code>clearInterval</code> you could <code>setInterval</code> once again. And to avoid repeating the callback externalize it as a separate function:</p>\n\n<pre><code>var ticker = function() {\n    console.log('idle');\n};\n</code></pre>\n\n<p>then:</p>\n\n<pre><code>var myTimer = window.setInterval(ticker, 4000);\n</code></pre>\n\n<p>then when you decide to restart:</p>\n\n<pre><code>window.clearInterval(myTimer);\nmyTimer = window.setInterval(ticker, 4000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If by \"restart\", you mean to start a new 4 second interval at this moment, then you must stop and restart the timer.</p>\n\n<pre><code>function myFn() {console.log('idle');}\n\nvar myTimer = setInterval(myFn, 4000);\n\n// Then, later at some future time, \n// to restart a new 4 second interval starting at this exact moment in time\nclearInterval(myTimer);\nmyTimer = setInterval(myFn, 4000);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 41
                }
            ],
            "body": "<p>How do I reset a setInterval timer back to 0?</p>\n\n<pre><code> var myTimer = setInterval(function() {\n      console.log('idle');\n }, 4000);\n</code></pre>\n\n<p>I tried clearInterval(myTimer) but that completely stops the interval. I want it to restart from 0.</p>\n",
            "last_activity_date": 1321296386,
            "question_id": 8126466,
            "score": 20,
            "tags": [
                "javascript",
                "setinterval",
                "reset",
                "restart"
            ],
            "title": "Javascript - Reset setInterval back to 0"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>Try <code>browser.execute_script</code> instead of <code>selenium.GetEval</code>.</p>\n\n<p>See <a href=\"http://stackoverflow.com/questions/5585343/getting-the-return-value-of-javascript-code-in-selenium/5585345#5585345\">this answer</a> for example.</p>\n",
                    "is_accepted": true,
                    "score": 34
                }
            ],
            "body": "<p>I am totally new to Selenium. I want to execute a javascript snippet in the following code(as commented in the code), but can't do so. Please help.</p>\n\n<pre><code>from selenium import webdriver\nimport selenium\nfrom selenium.common.exceptions import NoSuchElementException\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\npatch = raw_input(\"Enter patch number\\n\")\nrel = raw_input(\"Enter release\\n\")\nplat = raw_input(\"Enter port\\n\")\n\nbrowser = webdriver.Firefox()\n\nbrowser.get(\"xxxxxxxxxxxxxxxxx\")\n\npdtfamily = browser.find_element_by_id(\"prodFamilyID\")\npdtfamily.send_keys(\"Database &amp; Tools\" + Keys.TAB)\ntime.sleep(5)\n\npdt = browser.find_element_by_id(\"productID\")\npdt.send_keys(\"Intelligent Agent\" + Keys.TAB)\ntime.sleep(5)\n\npdt1 = browser.find_element_by_id(\"patchCacheChkBxID\")\npdt1.send_keys(Keys.SPACE)\ntime.sleep(5)\n\npdt7 =  browser.find_element_by_id(\"M__Idf\")\npdt7.send_keys(plat)\n\npdt8 =  browser.find_element_by_id(\"M__Idg\")\npdt8.send_keys(\"American English\")\n\n# Here I want to execute this javascript - \"submitForm('patchCacheAdd',1,{'event':'ok'});return false\"\n\nbrowser.close()\n</code></pre>\n\n<p>If I use -</p>\n\n<pre><code>selenium.GetEval(\"submitForm('patchCacheAdd',1,{'event':'ok'});return false\")\n</code></pre>\n\n<p>it errors out as -</p>\n\n<pre><code>AttributeError: 'module' object has no attribute 'GetEval'I \n</code></pre>\n",
            "last_activity_date": 1318858517,
            "question_id": 7794087,
            "score": 20,
            "tags": [
                "javascript",
                "python",
                "selenium"
            ],
            "title": "Running javascript in Selenium using Python"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You may need to extend the Collection object to install your own convention for fetches.  In doing so, you would likely provide your own fetch function.  Something like:</p>\n\n<pre><code>fetch : function(options) {\n  options || (options = {});\n  var model = this;\n  var success = function(resp) {\n    if (!model.set(model.parse(resp), options)) return false;\n    if (options.success) options.success(model, resp);\n  };\n  var error = wrapError(options.error, model, options);\n  (this.sync || Backbone.sync)('create', this, success, error);\n  return this;\n}\n</code></pre>\n\n<p>where it uses a 'create' instead of a 'read'.  On first blush, this is what I'd try first, though there may be a more elegant way to do it.</p>\n\n<p>The downside of this approach is that you essentially have framework code in your app and if the framework changes you might encounter problems.  You would do well to compartmentalize this change into a separate layer to make it easy to update with new framework releases.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Backbone.sync is the function used to interact with the server via your models. You can provide your own implementation that issues a POST request for the 'read' method instead of GET. See <a href=\"http://documentcloud.github.com/backbone/#Sync\" rel=\"nofollow\">http://documentcloud.github.com/backbone/#Sync</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Also note that fetch supports Jquery.ajax parameters, so you can easily set type = post in the call.</p>\n\n<pre><code>Messages.fetch({data: {api_key: 'secretkey'}, type: 'POST'});\n</code></pre>\n\n<p>For more parameters:\n<a href=\"http://api.jquery.com/jQuery.ajax/\">http://api.jquery.com/jQuery.ajax/</a></p>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<pre><code>try {\n    // THIS for POST+JSON\n    options.contentType = 'application/json';\n    options.type = 'POST';\n    options.data = JSON.stringify(options.data);\n\n    // OR THIS for GET+URL-encoded\n    //options.data = $.param(_.clone(options.data));\n\n    console.log('.fetch options = ', options);\n    collection.fetch(options);\n} catch (excp) {\n    alert(excp);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have managed to work with REST api's to \"fetch()\" data where the url's contain minimal parameters(and use \"GET\") - but how would one retrieve a collection when the url must be \"POST\"ed to?</p>\n",
            "last_activity_date": 1389104568,
            "question_id": 6428823,
            "score": 20,
            "tags": [
                "javascript",
                "jquery",
                "backbone.js"
            ],
            "title": "Backbone.js fetch a collection using post?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>After some more research I found a solution myself on the bgiframe site:</p>\n\n<p>I downloaded version 2.1.3-pre at</p>\n\n<p><a href=\"https://github.com/brandonaaron/bgiframe/blob/master/jquery.bgiframe.js\">https://github.com/brandonaaron/bgiframe/blob/master/jquery.bgiframe.js</a></p>\n\n<p>and this solved the problem.</p>\n",
                    "is_accepted": true,
                    "score": 17
                },
                {
                    "body": "<p>In the plugin code for bgiframe version 2.1.1 was doing a regex search for \"6.0\" but it needs to search for \"MSIE 6.0\". Tillito has found the correct source.</p>\n\n<p>In the bgiframe code look for:</p>\n\n<p><code>if($.browser.msie&amp;&amp;/6.0/.test(navigator.userAgent)</code></p>\n\n<p>Change to:</p>\n\n<p><code>if($.browser.msie &amp;&amp; /msie 6\\.0/i.test(navigator.userAgent)</code></p>\n\n<p>OR just get the source here: <a href=\"https://github.com/brandonaaron/bgiframe/blob/master/jquery.bgiframe.js\">https://github.com/brandonaaron/bgiframe/blob/master/jquery.bgiframe.js</a></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>var parent = document.createElement(\"div\");\nparent.innerHTML = html;\nthis.insertBefore( parent, this.firstChild );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Add below tag after head tag</p>\n\n<pre><code>&lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>The uiquery plugin bgiframe (version 2.1.1) causes the following java script error in Internet Explorer 9:</p>\n\n<pre><code>jquery.bgiframe.js, line 94 character 5\n</code></pre>\n\n<p>My menu does not work any more, I hope the reason is this error.</p>\n\n<p>Any ideas?</p>\n\n<p>ADDED:</p>\n\n<p>The line in jquery.bgiframe.js is:</p>\n\n<pre><code>this.insertBefore( document.createElement(html), this.firstChild );\n</code></pre>\n\n<p>and the error sais:</p>\n\n<pre><code>SCRIPT5022: DOM Exception: INVALID_CHARACTER_ERR (5) \n</code></pre>\n",
            "last_activity_date": 1367617725,
            "question_id": 6424526,
            "score": 20,
            "tags": [
                "javascript",
                "internet-explorer-9",
                "bgiframe"
            ],
            "title": "bgiframe plugin causes error in IE9"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>sorry for answering an old post, but I bumped into the same problem as you.</p>\n\n<p>None of the javascript YAML parsers available satisfied my needs so I developed my own:\nIt is available here: <a href=\"http://code.google.com/p/javascript-yaml-parser/\">http://code.google.com/p/javascript-yaml-parser/</a></p>\n\n<p>Hope it helps somebody :)</p>\n\n<p>Cumps,\nDiogo</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p><a href=\"https://github.com/nodeca/js-yaml\">JS-YAML</a> parser works in browser. Here is online demo <a href=\"http://nodeca.github.com/js-yaml/\">http://nodeca.github.com/js-yaml/</a> . Thought, it's primary goal is node.js, and browser version was done just fo fun :)</p>\n",
                    "is_accepted": true,
                    "score": 14
                },
                {
                    "body": "<p>Here is one that I found. Not sure of how much of the spec this meets, but it suited my needs.</p>\n\n<p><a href=\"https://github.com/jeremyfa/yaml.js\">https://github.com/jeremyfa/yaml.js</a></p>\n",
                    "is_accepted": false,
                    "score": 13
                }
            ],
            "body": "<p>I am looking for a JavaScript YAML parser which converts the YAML into something usable within a HTML page. I've tried this version on Github (<a href=\"https://github.com/visionmedia/js-yaml\">https://github.com/visionmedia/js-yaml</a>) but it looks like it only works with node.js</p>\n\n<p>Which libraries should I be using and is there any sample code to show example usage?</p>\n",
            "last_activity_date": 1371121873,
            "question_id": 4335804,
            "score": 20,
            "tags": [
                "javascript",
                "html",
                "parsing",
                "yaml"
            ],
            "title": "JavaScript YAML Parser"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<pre><code>$('#grid').trigger( 'reloadGrid' );\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 39
                },
                {
                    "body": "<p>This worked for me.</p>\n\n<pre><code>jQuery('#grid').jqGrid('clearGridData');\njQuery('#grid').jqGrid('setGridParam', {data: dataToLoad});\njQuery('#grid').trigger('reloadGrid');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have been trying to get a grid to be updated from the datasource when a button is pushed. </p>\n\n<p>So I have in the click event something like this:</p>\n\n<pre><code>$('#grid').jqGrid('trigger','reloadGrid');\n</code></pre>\n\n<p>However this does not work and I get an error thrown for unknown method 'trigger' </p>\n\n<p>I have also tried</p>\n\n<pre><code>$('#grid').jqGrid('trigger(\"reloadGrid\")');\n</code></pre>\n\n<p>How would I execute this function? </p>\n",
            "last_activity_date": 1422515533,
            "question_id": 3135171,
            "score": 20,
            "tags": [
                "javascript",
                "jquery",
                "jqgrid"
            ],
            "title": "How to refresh the data in a jqGrid?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>GOT IT!!!</p>\n\n<p>With the developer mode, go into resources and find your script and copy and paste it into a text document or a new window. If you can't find it in resources, do a search for a variable or line of code you used.</p>\n",
                    "is_accepted": true,
                    "score": 3
                },
                {
                    "body": "<p>Same problem came up here, I opened up the javascript console in a script paused state. (Paused it using the Developer Tools)</p>\n\n<p>Then I changed the variable value so that the while loop would end.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Run Process Explorer and kill the chrome process that's using lots of CPU...it will \"crash\" the page and let you reload...</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>GOT IT WITHOUT DEVELOPER MODE</p>\n\n<ul>\n<li>Open a new tab</li>\n<li>Open the Task Manager with Shift-Escape</li>\n<li>Kill task</li>\n<li><strong>Use back button for the killed tab</strong> (JSFiddle won't run the script)</li>\n<li>Fix bug</li>\n<li>Update</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>One way of breaking the infinite loop is to throw an unhandled exception, which will stop the execution of current call stack.\nTo do so:</p>\n\n<ol>\n<li>pause the debbuger</li>\n<li>find a promising statement inside the loop, for example a function call: <code>foo.bar(args)</code></li>\n<li>in console, overwrite the function to throw : <code>foo.bar=function(){throw 42;}</code></li>\n<li>unpause the debugger </li>\n</ol>\n\n<p>worked for me. I haven't tried, but I believe that by overloading getter or setter you can use the trick described above also for assignments and reads, not only for function calls. Also, by setting a variable to undefined, you may cause fatal error (and thus break the loop) if the field of this variable is used in the loop. For example <code>delete foo.tab</code> will break <code>foo.tab[42]</code> or <code>foo.tab.bar</code>. For some reason, simply writting <code>foo=undefined</code> in the console, will not do (perhaps it defines a variable local to the console window named foo).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In case others are stuck after reading the other answers, here's what worked for me (Chrome, Mac). For me the JSFiddle tab was 'stuck' but the rest of Chrome responsive. I had the JavaScript Console open on the Resources pane, but it was unresponsive too. Reloading the page in this state didn't help because JSFiddle would give me the script before I got anything at all.</p>\n\n<p>In the end this worked for me; maybe it will help you too...</p>\n\n<ul>\n<li>While the page is unresponsive, go to <code>Chrome &gt; Preferences &gt; Privacy</code> and disable JavaScript.</li>\n<li>Wait for page to die (about 4 or 5 minutes for me);\u00a0the sad face icon comes up in that tab.</li>\n<li>Hit the back button. It should look like JSFiddle is loading, but it won't because funnily enough JSFiddle needs JavaScript just to render a page.</li>\n<li><code>View &gt; Developer &gt; View source</code></li>\n<li>My script, only slightly mangled, was sitting there all innocent like in a <code>div</code> called <code>'panel_js'</code>.</li>\n<li>Highlight, copy, breathe again, learn lesson.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>When you get an infinite loop in jsfiddle in Chrome, your only choice (that I know of) is to close the tab.  Of course, this means you lose all your work in the current window!  Is there an easy way to stop an infinitely executing script?</p>\n\n<ol>\n<li>I have the developer tools open because I was doing some debugging.</li>\n<li>I am able to pause the script and step through the loop.</li>\n<li>I can't find anywhere to stop the script.</li>\n<li>I can't modify the script or variables to stop the infinite loop (because the script execution occurs in an iframe on a separate domain, so modifying data in the iframe with JavaScript is not allowed and generates an Exception in the console).</li>\n</ol>\n\n<p>It all started because I decided to swap directions on my loop from</p>\n\n<pre><code>for (var c = 0; c &lt;= 11; c++)\n</code></pre>\n\n<p>to</p>\n\n<pre><code>for (var c = 12; c &gt; 0; c++)\n</code></pre>\n\n<p>But as you can see above, I forgot to change it from <code>c++</code> to <code>c--</code>.</p>\n\n<p>Any ideas??  I still have the tab open and I'm hoping to get it back without closing the tab :-)</p>\n",
            "last_activity_date": 1424908743,
            "question_id": 7616143,
            "score": 19,
            "tags": [
                "javascript",
                "google-chrome",
                "infinite-loop"
            ],
            "title": "Cancel infinite loop execution"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p><a href=\"http://jsbeautifier.org/\" rel=\"nofollow\">http://jsbeautifier.org/</a>  should fix all your problems</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><a href=\"https://github.com/rdio/jsfmt\" rel=\"nofollow\">jsfmt</a> formats javascript and allows AST searching and rewriting. Analogous to gofmt.</p>\n\n<p>In some ide's like netbeans you can automatically format code with <code>alt+shift+f</code>. </p>\n\n<p>There are also online ones. <a href=\"http://jsbeautifier.org/\" rel=\"nofollow\">http://jsbeautifier.org/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There's a bunch of tools around for doing things like this. I use <a href=\"http://jsbeautifier.org/\" rel=\"nofollow\">JS Beautifier</a> which will at least fix indentation errors and also the spaces-around-functions-part (I've tested it, yay!)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>While it checks for different things than JSLint, the <code>fixjsstyle</code> mode of the <a href=\"http://code.google.com/closure/utilities/docs/linter_howto.html\">Google closure linter</a> may do what you want.</p>\n\n<p>It automatically fixes code to (more closely) fit with the <a href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\">Google Javascript style guide</a> which is well worth a read.</p>\n\n<p>As others have pointed out, the <a href=\"http://jsbeautifier.org/\">Javascript beautifier</a> is the way to go for spacing issues.</p>\n",
                    "is_accepted": true,
                    "score": 13
                },
                {
                    "body": "<p>If you use/have Visual Studio it does formatting of JavaScript too. You may need to configure formatting options from defaults.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Simply use IDE which supports custom code formatting. Like NetBeans, WebStorm or Visual Studio.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"https://github.com/jshint/fixmyjs\" rel=\"nofollow\">https://github.com/jshint/fixmyjs</a> -- Node npm package</p>\n\n<p>In \"legacy mode\" with JSHint</p>\n\n<p><code>var jshint = require('jshint').JSHINT\n    var fixmyjs = require('fixmyjs')\n    jshint(stringOfCode, objectOfOptions)\n    var stringFixedCode = fixmyjs(jshint.data(), stringOfCode, objectOfOptions).run()</code></p>\n\n<p><s><a href=\"http://fixmyjs.com\" rel=\"nofollow\">http://fixmyjs.com</a> -- hosted web interface -- seems to be down as of 2/27/14 (see <a href=\"https://github.com/goatslacker/fixmyjs.com/issues/10\" rel=\"nofollow\">issue</a>)</s>\n<a href=\"https://goatslacker.github.io/fixmyjs.com/\" rel=\"nofollow\">https://goatslacker.github.io/fixmyjs.com/</a></p>\n\n<p>Works great!</p>\n\n<p>There is also a Sublime Text 2/3 Package <a href=\"https://github.com/addyosmani/sublime-fixmyjs\" rel=\"nofollow\">https://github.com/addyosmani/sublime-fixmyjs</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>I've run JSLint for the first time on a rather lengthy file, and I have a lot of errors like <code>expected exactly 1 space between \"function\" and \"(\"</code> or <code>unexpected ' '</code>. I didn't realize this was important at all anywhere I learned about javascript and now fixing each one of these rather simple things by hand seems frustrating. Some I can figure out with simple find and replaces, but I wondered if there's any tools online that will automatically make these changes for me since they seem to be pretty straightforward?</p>\n\n<p>(I have <code>/*jslint white: false */</code> in my file, I develop in <a href=\"https://netbeans.org/\" rel=\"nofollow\">Netbeans</a> and auto-format (except then I have to correct hanging jQuery chainings because it doesn't do it right), and my code still ends up with a huge number of things that jslint complains about as far as unexpected numbers of spaces.)</p>\n",
            "last_activity_date": 1412693877,
            "question_id": 7564139,
            "score": 19,
            "tags": [
                "javascript",
                "jslint"
            ],
            "title": "Any tool to automatically fix simple JSLint issues?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You see this behavior because of event bubbling. One workaround: check the source of the event in the callback using <code>event.target</code>:</p>\n\n<pre><code>$(window).bind('resize', function(event) {\n    if (!$(event.target).hasClass('ui-resizable')) {\n        console.log(\"resize\");\n    }\n});\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/mattball/HEfM9/\">http://jsfiddle.net/mattball/HEfM9/</a></p>\n\n<hr>\n\n<p><s>Another solution is to add a <code>resize</code> handler to the resizable and stop the event's propagation up the DOM tree (that's the \"bubbling\").</s> (<em>Edit:</em> this should work, but for some reason does not: <a href=\"http://jsfiddle.net/mattball/5DtdY\">http://jsfiddle.net/mattball/5DtdY</a>.)</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>I think that actually the safest would be to do the following:</p>\n\n<pre><code>$(window).bind('resize', function(event) {\n    if (this == event.target) {\n        console.log(\"resize\");\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>For me, with JQuery 1.7.2 none of the solution proposed here worked. So I had to come up with a slightly different one that works on older IE browsers as well as Chrome...</p>\n\n<pre><code>$(window).bind('resize', function(event) {\n    if ($(event.target).prop(\"tagName\") == \"DIV\") {return;}  // tag causing event is a div (i.e not the window)\n    console.log(\"resize\");\n});\n</code></pre>\n\n<p>This might have to be adapted if the element resized is something else than a <code>&lt;div&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>All of these answers are not going to help. The issue is that resize event bubbles up to the window. So eventually the e.target will be the window even if the resize happened on the div. So the real answer is to simply stop propagating the resize event:</p>\n\n<pre><code>$(\"#mydiv\").resizable().on('resize', function (e) {\n    e.stopPropagation(); \n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<pre><code>$(window).resize(function(e) {\n  if (e.target == window)\n    /* do your stuff here */;\n});\n</code></pre>\n\n<p><a href=\"http://bugs.jqueryui.com/ticket/7514\" rel=\"nofollow\">http://bugs.jqueryui.com/ticket/7514</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I have 2 events, one to detect window resize and other to detect the resizable stop of div.</p>\n\n<p>But when I resize the div, in the console detect the window resize event.</p>\n\n<p>Is there any way to block this?</p>\n\n<pre><code>$(document).ready(function(){\n     $(window).bind('resize', function(){\n        console.log(\"resize\");    \n     }); \n     $(\".a\").resizable();\n });\n</code></pre>\n\n<p>Example: <a href=\"http://jsfiddle.net/qwjDz/1/\" rel=\"nofollow\">http://jsfiddle.net/qwjDz/1/</a></p>\n",
            "last_activity_date": 1415208578,
            "question_id": 7494378,
            "score": 19,
            "tags": [
                "javascript",
                "jquery",
                "resize",
                "resizable"
            ],
            "title": "jQuery UI resizable fire window resize event"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>In JavaScript functions are first-class objects. That means you can pass functions around as parameters to a function, or treat them as variables in general.</p>\n\n<p>Let's say we are talking about a function <code>hello</code>,</p>\n\n<pre><code>function hello() {\n    alert('yo');\n}\n</code></pre>\n\n<p>When we simply write</p>\n\n<pre><code>hello\n</code></pre>\n\n<p>we are referring to the function which doesn't execute it's contents. But when we add the parens <code>()</code> after the function name,</p>\n\n<pre><code>hello()\n</code></pre>\n\n<p>then we are actually calling the function which will alert \"yo\" on the screen.</p>\n\n<p>The <code>bind</code> method in jQuery accepts the type of event (string) and a function as its arguments. In your example, you are passing the type - \"click\" and the actual function as an argument. </p>\n\n<p>Have you seen Inception? Consider this contrived example which might make things clearer. Since functions are first-class objects in JavaScript, we can pass and return a function from within a function. So let's create a function that returns a function when invoked, and the returned function also returns another function when invoked.</p>\n\n<pre><code>function reality() {\n    return function() {\n        return function() {\n            alert('in a Limbo');\n        }\n    };\n}\n</code></pre>\n\n<p>Here <code>reality</code> is a function, <code>reality()</code> is a function, and <code>reality()()</code> is a function as well. However <code>reality()()()</code> is not a function, but simply <code>undefined</code> as we are not returning a function (we aren't returning anything) from the innermost function.</p>\n\n<p>So for the <code>reality</code> function example, you could have passed any of the following to jQuery's bind.</p>\n\n<pre><code>$('#foo').bind('click', reality);\n$('#foo').bind('click', reality());\n$('#foo').bind('click', reality()());\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 44
                },
                {
                    "body": "<p>You are not doing the same thing in your jQuery example as in the second <code>setTimeout</code> example - in your code you are passing the function and binding the <code>click</code> event.</p>\n\n<p>In the first <code>setTimout</code> example, the <code>monitor</code> function is passed in and can be invoked directly, in the second, the sting <code>monitor()</code> is passed in and needs to be <code>eval</code>ed.</p>\n\n<p>When passing a function around, you use the function name. When invoking it, you need to use the <code>()</code>.</p>\n\n<p>Eval will invoke what is passed in, so a <code>()</code> is required for a successful function invocation.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Your jQuery <code>bind</code> example is similar to <code>setTimeout(monitor, 100);</code>, you are passing a reference of a function object as an argument.</p>\n\n<p>Passing a string to the <code>setTimeout</code>/<code>setInterval</code> methods should be avoided for the same reasons you should avoid <code>eval</code> and the <code>Function</code> constructor when it is unnecessary.</p>\n\n<p>The code passed as a string will be evaluated and run in the global execution context, which can give you \"scope issues\", consider the following example:</p>\n\n<pre><code>// a global function\nvar f = function () {\n  alert('global');\n};\n\n(function () {\n  // a local function\n  var f = function() {\n    alert('local');\n  };\n\n  setTimeout('f()', 100); // will alert \"global\"\n  setTimeout(f, 100);     // will alert \"local\"\n})();\n</code></pre>\n\n<p>The first <code>setTimeout</code> call in the above example, will execute the global <code>f</code> function, because the evaluated code has no access to the local lexical scope of the anonymous function.</p>\n\n<p>If you pass the reference of a function object to the <code>setTimeout</code> method -like in the second <code>setTimeout</code> call- the exact same function you refer in the current scope will be executed.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>First of all, \"()\" is not part of the function name.\nIt is syntax used to make function calls.</p>\n\n<p>First, you bind a function to an identifier name by either using a function declaration:</p>\n\n<pre><code>function x() {\n    return \"blah\";\n}\n</code></pre>\n\n<p>... or by using a function expression:</p>\n\n<pre><code>var x = function() {\n    return \"blah\";\n};\n</code></pre>\n\n<p>Now, whenever you want to run this function, you use the parens:</p>\n\n<pre><code>x();\n</code></pre>\n\n<p>The setTimeout function accepts both and identifier to a function, or a string as the first argument...</p>\n\n<pre><code>setTimeout(x, 1000);\nsetTimeout(\"x()\", 1000);\n</code></pre>\n\n<p>If you supply an identifier, then it will get called as a function.\nIf you supply an string, than it will be evaluated (executed).</p>\n\n<p>The first method (supplying an identifier) is preferred ...</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Now, I usually call a function (that requires no arguments) with <code>()</code> like this:</p>\n\n<pre><code>myFunction(); //there's empty parens\n</code></pre>\n\n<p>Except in jQuery calls where I can get away with:</p>\n\n<pre><code>$('#foo').bind('click', myFunction); //no parens\n</code></pre>\n\n<p>Fine. But recently I saw this comment <a href=\"http://stackoverflow.com/questions/3640187/how-can-i-modify-pasted-text\">here</a> on SO:</p>\n\n<p>\"Consider using <code>setTimeout(monitor, 100);</code> instead of <code>setTimeout('monitor()', 100);</code>. Eval is evil :)\"</p>\n\n<p>Yikes! Are we really <code>eval()</code>-ing a string here? I guess I don't really understand the significance and implications of 'calling' a function. What are the real rules about calling and referring to functions?</p>\n",
            "last_activity_date": 1304193170,
            "question_id": 3641330,
            "score": 19,
            "tags": [
                "javascript"
            ],
            "title": "What&#39;s the meaning of &quot;()&quot; in a function call?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>$(\"#chk0\") is refering to an element with the id chk0. You might try adding id's to the elements. Ids are unique even though the names are the same so that in jQuery you can access a single element by it's id.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Use an ID to uniquely identify the checkbox. Your current example is trying to select the checkbox with an id of '#chk0':</p>\n\n<p><code>&lt;input type=\"checkbox\" id=\"chk0\" name=\"chk0\" value=\"true\" disabled&gt;</code></p>\n\n<p><code>$('#chk0').attr(\"disabled\", \"disabled\");</code></p>\n\n<p>You'll also need to remove the attribute for <code>disabled</code> to enable the checkbox. Something like:</p>\n\n<p><code>$('#chk0').removeAttr(\"disabled\");</code></p>\n\n<p>See the docs for <a href=\"http://docs.jquery.com/Attributes/removeAttr#name\" rel=\"nofollow\">removeAttr</a></p>\n\n<p>The value XHTML for disabling/enabling an input element is as follows:</p>\n\n<pre><code>&lt;input type=\"checkbox\" id=\"chk0\" name=\"chk0\" value=\"true\" disabled=\"disabled\" /&gt;\n&lt;input type=\"checkbox\" id=\"chk0\" name=\"chk0\" value=\"true\" /&gt;\n</code></pre>\n\n<p>Note that it's the <em>absence</em> of the disabled attribute that makes the input element enabled. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can add different classes to select, or select by type like this:</p>\n\n<p><code>$('input[type=\"checkbox\"]').removeAttr(\"disabled\");</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>\"True\" and \"False\" do not work, to disable, set to value disabled.</p>\n\n<p><code>$('.someElement').attr('disabled', 'disabled');</code></p>\n\n<p>To enable, remove.</p>\n\n<p><code>$('.someElement').removeAttr('disabled');</code></p>\n\n<p>Also, don't worry about multiple items being selected, jQuery will operate on all of them that match.  If you need just one you can use many things :first, :last, nth, etc.</p>\n\n<p>You are using name and not id as other mention -- remember, if you use id valid xhtml requires the ids be unique.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Some things before the actual code..</p>\n\n<p>the hash (#)  you use as the selector is for IDs and not for names of elements.\nalso the disabled attribute is not a true false scenario .. if it has disabled attribute it means that it is true .. you need to remove the attribute and not set it to false.\nAlso there are the form selectors that identify specific types of items in a form ..</p>\n\n<p>so the code would be </p>\n\n<pre><code>$(\"input:checkbox[name='chk0']\").removeAttr('disabled');\n</code></pre>\n\n<hr>\n\n<p>Bringing the answer up-to-date</p>\n\n<p>You should use the <a href=\"http://api.jquery.com/prop/\"><code>.prop()</code></a> method (<em>added since v1.6</em>)</p>\n\n<pre><code>$(\"input:checkbox[name='chk0']\").prop('disabled', false); // to enable the checkbox\n</code></pre>\n\n<p>and</p>\n\n<pre><code>$(\"input:checkbox[name='chk0']\").prop('disabled', true); // to disable the checkbox\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 21
                },
                {
                    "body": "<p>Seriously, just don't use jQuery for this. <code>disabled</code> is a boolean property of form elements that works perfectly in every major browser since 1997, and there is no possible way it could be simpler or more intuitive to change whether or not a form element is disabled.</p>\n\n<p>The simplest way of getting a reference to the checkbox would be to give it an <code>id</code>. Here's my suggested HTML:</p>\n\n<pre><code>&lt;input type=\"hidden\" name=\"chk0\" value=\"\"&gt;\n&lt;input type=\"checkbox\" name=\"chk0\" id=\"chk0_checkbox\" value=\"true\" disabled&gt;\n</code></pre>\n\n<p>And the line of JavaScript to make the check box enabled:</p>\n\n<pre><code>document.getElementById(\"chk0_checkbox\").disabled = false;\n</code></pre>\n\n<p>If you prefer, you can instead use jQuery to get hold of the checkbox:</p>\n\n<pre><code>$(\"#chk0_checkbox\")[0].disabled = false;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                }
            ],
            "body": "<p>I have following HTML with two elements having the same name</p>\n\n<pre><code>&lt;input type=\"hidden\" name= \"chk0\" value=\"\"&gt;\n&lt;input type=\"checkbox\" name=\"chk0\" value=\"true\" disabled&gt;\n</code></pre>\n\n<p>Through JQuery, I want to set the enable the checkbox. So, I am using something like this:</p>\n\n<pre><code>$('#chk0').attr(\"disabled\",false);\n</code></pre>\n\n<p>But this doesn't work. I assume JQuery is getting confused with two elements having the same identical name. Unfortunatel, I cannot avoid using two different names because, when the form is posted, I want all the checkboxes to get posted (not just the ones that are checked). Hence I have to use hidden element with the same name.. So, back to the question, how can I enable the checkbox through JQuery in the above scenario? Is there a \"type\" parameter for attr which distingues hidden from checkbox?</p>\n\n<p>Thanks</p>\n",
            "last_activity_date": 1374509727,
            "question_id": 2009609,
            "score": 19,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "JQuery - Set Attribute value"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<pre><code>$('#myDiv').text()\n</code></pre>\n\n<p>Although you'd be better off doing something like:</p>\n\n<pre><code>&lt;div id=\"myDiv\"&gt;&lt;p&gt;Some Text&lt;/p&gt;&lt;/div&gt;\n&lt;script type=\"text/javascript\"&gt;\n   $(function(){\n       var txt = $('#myDiv p').text();\n       alert(txt);\n    };\n&lt;/script&gt;\n</code></pre>\n\n<p>Make sure you're linking to your jQuery file too :)</p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>if you div looks like this:</p>\n\n<pre><code>&lt;div id=\"someId\"&gt;Some Value&lt;/div&gt;\n</code></pre>\n\n<p>you could retrieve it with jquery like this:</p>\n\n<pre><code>$('#someId').text()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>myDivObj = document.getElementById(\"myDiv\");\nif ( myDivObj ) {\n   alert ( myDivObj.innerHTML ); \n}else{\n   alert ( \"Alien Found\" );\n}\n</code></pre>\n\n<p>Above code will show the innerHTML, i.e if  you have used html tags inside  div then it will show even those too. probably this is not what you expected. So another solution is to use: innerText / textContent property [ thanx to bobince, see his comment ] </p>\n\n<pre><code>function showDivText(){\n    \t\tdivObj = document.getElementById(\"myDiv\");\n    \t\tif ( divObj ){\n    \t\t\tif ( divObj.textContent ){ // FF\n    \t\t\t\talert ( divObj.textContent );\n    \t\t\t}else{\t// IE\t\t\t\n    \t\t\t\talert ( divObj.innerText );  //alert ( divObj.innerHTML );\n    \t\t\t} \n    \t\t}  \n    \t}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 13
                },
                {
                    "body": "<p>You could use</p>\n\n<pre><code>jQuery('#gregsButton').click(function() { \n    var mb = jQuery('#myDiv').text(); \n    alert(\"Value of div is: \" + mb); \n});\n</code></pre>\n\n<p>Looks like there may be a conflict with using the $. Remember that the variable 'mb' will not be accessible outside of the event handler. Also, the text() function returns a string, no need to get mb.value.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You could also use innerhtml to get the value within the tag....</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>your div looks like this:</p>\n\n<pre><code>&lt;div id=\"someId\"&gt;Some Value&lt;/div&gt;\n</code></pre>\n\n<p>With jquery:  </p>\n\n<pre><code>   &lt;script type=\"text/javascript\"&gt;\n     $(function(){\n         var text = $('#someId').html(); \n         //or\n         var text = $('#someId').text();\n       };\n  &lt;/script&gt; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I have a page containing the following div element:</p>\n\n<pre><code>&lt;div id=\"myDiv\" class=\"myDivClass\" style=\"\"&gt;Some Value&lt;/div&gt;\n</code></pre>\n\n<p>How would I retrieve the value (\"Some Value\") either through JQuery or through standard JS?  I tried:</p>\n\n<pre><code>var mb = document.getElementById(\"myDiv\");\n</code></pre>\n\n<p>But the debugger console shows \"mb is null\".  Just wondering how to retrieve this value.</p>\n\n<p>---- UPDATE ----\nWhen I try the suggestion I get:  $ is not a function</p>\n\n<p>This is part of a JQuery event handler where I am trying to read the value when I click a button.  The handler function is working but it can't interpret the jQuery value it seems:</p>\n\n<pre><code>jQuery('#gregsButton').click(function() { \n   var mb = $('#myDiv').text();\n   alert(\"Value of div is: \" + mb.value); \n});\n</code></pre>\n",
            "last_activity_date": 1422536906,
            "question_id": 1827659,
            "score": 19,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "Get a Div Value in JQuery"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>The reported behavior deviates from the requirements of the <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\">ECMA specification</a>.</p>\n\n<p>Per clause 8.5, the <code>Number</code> type has the IEEE-754 64-bit binary values, except there is only one NaN. So 2.175 cannot be represented exactly; the closest you can get is 2.17499999999999982236431605997495353221893310546875.</p>\n\n<p>Per 15.7.4.5, <code>toFixed(20)</code> uses an algorithm that boils down to:</p>\n\n<ul>\n<li>\u201cLet <em>n</em> be an integer for which the exact mathematical value of <em>n</em> \u00f7 10<sup><em>f</em></sup> \u2013 <em>x</em> is as close to zero as possible. If there are two such <em>n</em>, pick the larger <em>n</em>.\u201d</li>\n<li>In the above, <em>f</em> is 20 (the number of digits requested), and <em>x</em> is the operand, which should be 2.17499999999999982236431605997495353221893310546875.</li>\n<li>This results in selecting 217499999999999982236 for <em>n</em>.</li>\n<li>Then <em>n</em> is formatted, producing \u201c2.17499999999999982236\u201d.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I appreciate Eric's contribution, but, with all due respect, it doesn't answer the question. I admit I was too tongue-in-cheeky with those 'right' and 'amazingly correct' phrases; but yes, I understand that IE behavior is a deviation actually.</p>\n\n<p>Anyway. I was still looking for an explanation what causes IE to behave differently - and I finally got something looking like a clue... ironically, in Mozilla's tracker, in this <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=186563\">lengthy discussion</a>. Quote:</p>\n\n<pre><code>OUTPUT IN MOZILLA: \na = 0.827 ==&gt; a.toFixed(17) = 0.82699999999999996 \nb = 1.827 ==&gt; b.toFixed(17) = 1.82699999999999996\n\nOUTPUT IN IE6: \na = 0.827 ==&gt; a.toFixed(17) = 0.82700000000000000 \nb = 1.827 ==&gt; b.toFixed(17) = 1.82700000000000000\n</code></pre>\n\n<blockquote>\n  <p>The difference seen in IE and Mozilla is as follows. <strong>IE is storing 'a' as a string</strong>\n  and Mozilla is storing 'a' as a value.  The spec doesn't nail down the\n  storage format.  Thus when IE does <code>a.toFixed</code> it starts out with a\n  exact string representation while Mozilla suffers the round trip conversions.</p>\n</blockquote>\n\n<p>Would be great to have kind of official confirmation on this, but at least that explains everything I have seen yet. In particular,</p>\n\n<pre><code>console.log( 0.3.toFixed(20) ); // 0.30000000000000000000\nconsole.log( 0.2.toFixed(20) ); // 0.20000000000000000000\nconsole.log( (0.3 - 0.2).toFixed(20) ); // \"0.09999999999999998000\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>First of all, Floating points are can not be \"<em>precisely</em>\" represented in binary numbers. There will be an elevation/depression, either the value will be <strong>a little higher</strong> or <strong>a little lower</strong>. How much that is elevated/depressed depends on how the conversion is done. There is not exactly a \"<strong>right value</strong>\" even for a string output of ECMAScript's <code>toFixed()</code>.</p>\n\n<p>But the ECMA Standards do spice things up by er.. setting standards. Which is a good thing in my opinion. It's like \"<em>If we are all gonna make mistakes anyway, let's make the same one.</em>\"</p>\n\n<p>So, the question now would be, how and why does IE deviates from the Standards. Let's examine the following test cases.</p>\n\n<p>Candidates are IE 10.0.9200.16688 and Chrome 30.0.1599.69, running on x64 Windows 8 Pro.</p>\n\n<pre><code>Case Code                       IE (10)                        Chrome (30)\n--------------------------------------------------------------------------------\nA    (0.06).toFixed(20)         0.60000000000000000000    0.05999999999999999778\nB    (0.05+0.01).toFixed(20)    0.06000000000000000500    0.06000000000000000472\n</code></pre>\n\n<p>So, regardless it's IE or Chrome, we see <code>(0.06)</code> is not exactly equal to <code>(0.05+0.01)</code>. Why is that? It's because (0.06) has a representation that is very close to but not equal to (0.06), so does (0.05) and (0.01). When we perform an operation, such as an addition, <strong>the very less significant errors</strong> can sum up to become <strong>an error of slightly different magnitude</strong>.</p>\n\n<p>Now, the difference in represented value in different browsers can be impacted due to 2 reasons:</p>\n\n<ul>\n<li>The conversion algorithm used.</li>\n<li>When the conversion takes place.</li>\n</ul>\n\n<p>Now we don't know what algo IE uses since I can't look into it's source. But the above test cases clearly demonstrate one other thing, IE and Chrome handles the conversion \"<em>not only differently</em>\" but also \"<strong>on a different occasion</strong>\".</p>\n\n<p>In JavaScript, when we create a number (aka instance of a <code>Number</code> class with or without the <code>new</code> keyword), we actually provide a <code>literal</code>. The literal is always a string even if it denotes a number <sup>[1]</sup>. The browser parses the literal and creates the object and assigns the represented value.</p>\n\n<p>Now, here's where things tend to go different ways. IE holds off the conversion until it is needed. That means until an operation takes place, IE keeps the number as literal (or some intermediary format). But Chrome converts it rightaway in the operational format.</p>\n\n<p>After the operation is done, IE does not revert back to the literal format or the intermediary format, as it is pointless and may cause a slight loss in precision.</p>\n\n<p>I hope that clarifies something.</p>\n\n<hr>\n\n<p><sup>[1]</sup> Value represented in code are always <code>literal</code>s. If you quote them they are called <code>String Literal</code>s.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Consider the following:</p>\n\n<pre><code>var x = 2.175;\nconsole.log(x.toFixed(2));  // 2.17\n</code></pre>\n\n<p>What? No, no surprise here. That's rather obvious, see: Number literal <code>2.175</code> is actually stored in memory (by IEEE-754 rules) as a value that's just a tiny little bit smaller than 2.175. And that's easy to prove:</p>\n\n<pre><code>console.log(x.toFixed(20)); // 2.17499999999999982236\n</code></pre>\n\n<p>That's how it works in the latest versions of Firefox, Chrome, and Opera on 32-bit Windows setup. But that's not the question.</p>\n\n<p>The real question is how Internet Explorer <strong>6</strong> (!) actually manages to do it <del>right</del> as humans do:</p>\n\n<pre><code>var x = 2.175;\nconsole.log(x.toFixed(2));  // 2.18\nconsole.log(x.toFixed(20)); // 2.17500000000000000000\n</code></pre>\n\n<p>OK, I overdramatized: actually all Internet Explorers I tested this on (IE8, IE9, IE10) behave the same way. Still, WAT?</p>\n\n<p><strong>UPDATE:</strong> It gets stranger:</p>\n\n<pre><code>x=1.0;while((x-=0.1) &gt; 0) console.log(x.toFixed(20));\n\nIE                        Chrome\n0.90000000000000000000    0.90000000000000002220\n0.80000000000000000000    0.80000000000000004441\n0.70000000000000010000    0.70000000000000006661\n0.60000000000000010000    0.60000000000000008882\n0.50000000000000010000    0.50000000000000011102\n0.40000000000000013000    0.40000000000000013323\n0.30000000000000015000    0.30000000000000015543\n0.20000000000000015000    0.20000000000000014988\n0.10000000000000014000    0.10000000000000014433\n0.00000000000000013878    0.00000000000000013878\n</code></pre>\n\n<p>Why the difference - in all but the last one? And why no difference in the last one? It's very similar for <code>x=0.1; while(x-=0.01)...</code>, by the way: until we get very close to zero, <code>toFixed</code> in IE apparently attempts to cut some corners.</p>\n\n<p><em>Disclaimer: I <a href=\"http://stackoverflow.com/a/18646081/1229023\">do</a> know that floating-point math is kinda flawed. What I don't understand is what's the difference between IE and the rest of the browser's world.</em></p>\n",
            "last_activity_date": 1381427842,
            "question_id": 19166098,
            "score": 18,
            "tags": [
                "javascript",
                "internet-explorer",
                "floating-point"
            ],
            "title": "Number.prototype.toFixed: amazingly correct in Internet Explorer"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Backbone collections are generally used to store lists, not trees.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Try representing the tree with <code>Model</code> as the node and each node containing a <code>Collection</code> of its child nodes: </p>\n\n<pre><code>var CTreeDataItem = Backbone.Model.extend({\n    initialize: function() {\n        if (Array.isArray(this.get('items'))) {\n            this.set({items: new CTreeDataItemChildren(this.get('items'))});\n        }\n    }\n});\n\n// children collection\nvar CTreeDataItemChildren = Backbone.Collection.extend({\n    model: CTreeDataItem\n});\n\n// create\nvar treeData = new CTreeDataItemChildren(treeJs);\n\n// access\ntreeData.at(0).get('items').at(1).get('title')\n// returns \"Item2\"\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT 2011-05-18:</strong> If you want to flatten the tree and maintain a reference to the parent that each node had in the tree:</p>\n\n<pre><code>// flatten the tree outside of Backbone. Alternatively,\n// you could override the constructor of the CTree collection\n// to provide encapsulation\nfunction flatten(parentID, arr) {\n    var out = [];\n    for (var i = 0; i &lt; arr.length; i++) {\n        var node = arr[i];\n        node.parentID = parentID;\n        out.push(node);\n        if (Array.isArray(node.items))\n            Array.prototype.push.apply(out, flatten(node.id, node.items));\n        delete node.items;\n    }\n    return out;\n}\n\n// remove above code that would have provided nesting\nvar CTreeDataItem = Backbone.Model.extend({});\n\n// children collection, as before \nvar CTreeDataItemCollection = Backbone.Collection.extend({\n    model: CTreeDataItem\n});\n\n// create\nvar treeData = new CTreeDataItemChildren(flatten('', treeJs));\n\n// as before, but now there's the 'parentID' FK\ntreeData.at(3).get('parentID')\n// returns \"ti1\"\n</code></pre>\n\n<p>Hope that's what you're after.</p>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>You need to use <a href=\"http://documentcloud.github.com/backbone/#Model-parse\" rel=\"nofollow\">Backbone.Model parse</a> method which is used to parse data before it gets passed to a model. You can use it to turn data on each level of your tree to Collections and Models representing items on these collections.</p>\n\n<p>Then when saving you'd have to override the <code>toJSON</code> method on the Model to return the json representation of your data the same way you receive it. It is later on used by Backbone.sync to send the data back to the server. By default it returns only <code>_.clone</code> of your <code>Model.attributes</code> and you want all the Collections and CollectionModels in there as well.</p>\n\n<p>All hail the backbone! :)</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I want to load json data in form of a tree into Backbone Collection. I can't do this. Can anyone explain what I'm doing wrong?</p>\n\n<p>My very simple model:</p>\n\n<pre><code>CTreeDataItem = Backbone.Model.extend(\n{\n});\nCTreeDataItems = Backbone.Collection.extend(\n{\n    model: CTreeDataItem\n});\n</code></pre>\n\n<p>And my load attepmt:</p>\n\n<pre><code>    var treeJs =\n        [\n            { id: \"tvRoot\", title: 'Root', cssClass: 'root',\n                items: [\n                    { id: \"ti1\", title: 'Item1', cssClass: 'item',\n                        items: [\n                            { id: \"ti11\", title: 'SubItem11', cssClass: 'subitem'},\n                            { id: \"ti12\", title: 'SubItem12', cssClass: 'subitem'}]},\n                    { id: \"ti2\", title: 'Item2', cssClass: 'item',},\n                    { id: \"ti3\", title: 'Item3', cssClass: 'item', \n                        items: [\n                            { id: \"ti31\", title: 'SubItem31', cssClass: 'subitem'},\n                            { id: \"ti32\", title: 'SubItem32', cssClass: 'subitem'},\n                            { id: \"ti33\", title: 'SubItem33', cssClass: 'subitem'}]}]\n        }];\n    this.TreeData = new CTreeDataItems();\n    this.TreeData.add(treeJs);\n</code></pre>\n",
            "last_activity_date": 1319702894,
            "question_id": 6026752,
            "score": 18,
            "tags": [
                "javascript",
                "backbone.js"
            ],
            "title": "Backbone collections representing tree data"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<pre><code>var result = (35.8 / 100) * 10000;\n</code></pre>\n\n<p>(Thank you <a href=\"http://stackoverflow.com/users/223391/jball\">jball</a> for this change of order of operations. I didn't consider it).</p>\n",
                    "is_accepted": true,
                    "score": 51
                },
                {
                    "body": "<pre><code>int n = 12345;\ndouble p = 35.8;\ndouble result = n * p / 100;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Your percentage divided by 100 (to get the percentage between 0 and 1) times by the number</p>\n\n<pre><code>35.8/100*10000\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This is what I would do:</p>\n\n<pre><code>// num is your number\n// amount is your percentage\nfunction per(num, amount){\n  return num*amount/100;\n}\n\n...\n&lt;html goes here&gt;\n...\n\nalert(per(10000, 35.8));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you want to pass the % as part of your function you should use the following alternative:</p>\n\n<pre><code>&lt;script&gt;\nfunction fpercentStr(quantity, percentString)\n{\n    var percent = new Number(percentString.replace(\"%\", \"\"));\n    return fpercent(quantity, percent);\n}\n\nfunction fpercent(quantity, percent)\n{\n    return quantity * percent / 100;\n}\ndocument.write(\"test 1:  \" + fpercent(10000, 35.873))\ndocument.write(\"test 2:  \" + fpercentStr(10000, \"35.873%\"))\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can calculate the result of any no. of students  using following code:</p>\n\n<pre><code>&lt;script&gt;\n    var n,sum,sub,mark,out,per,tot,res,i,d;\n    p=0;\n    n=0;\n    mark=0;\n    out=0;\n    tot=0;\n    sum=0;\n    per=0;\n    i=1;\n\n    n=parseInt(prompt(\"Enter the no. of subjct for  you  to see the result:\"));\n    while(i&lt;=n)\n    {\n        sub=prompt(\"enter the subject name:\");\n        document.write(\"enter the subject name:\");\n        document.write(sub);\n        mark=parseInt(prompt(\"enter the marks obtained:\"));\n        document.write(\" marks obtained:\");\n        document.write(mark);\n        out=parseInt(prompt(\"enter the marks out off:\"));\n        document.write(\" marks out off:\");\n        document.write(out);\n        document.write(\"&amp;lt;br&amp;gt;\");\n        i++;\n        sum=sum+mark;\n        tot=tot+out;\n    }\n    document.write(\"TOTAL:\");\n    document.write(tot);\n    document.write(\"TOTAL MARKS OBTAINED:\");\n    document.write(sum);\n    per=parseFloat(sum/tot*100);\n    document.write(\"PERCENTAGE OBTAINED:\");\n    document.write(per);\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre class=\"lang-js prettyprint-override\"><code>var number = 10000;\nvar result = .358 * number;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I use two very useful JS functions:\n<a href=\"http://blog.bassta.bg/2013/05/rangetopercent-and-percenttorange/\" rel=\"nofollow\">http://blog.bassta.bg/2013/05/rangetopercent-and-percenttorange/</a></p>\n\n<pre><code>function rangeToPercent(number, min, max){\n   return ((number - min) / (max - min));\n}\n</code></pre>\n\n<p>and</p>\n\n<pre><code>function percentToRange(percent, min, max) {\n   return((max - min) * percent + min);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am wondering how in javascript if i was given a number (say 10000) and then was given a percentage (say 35.8%)</p>\n\n<p>how would I work out how much that is (eg 3580)</p>\n",
            "last_activity_date": 1420534628,
            "question_id": 4372902,
            "score": 18,
            "tags": [
                "javascript",
                "math"
            ],
            "title": "javascript: calculate x% of a number"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>This solves your problem?</p>\n\n<pre><code>try {\n    eval(str);\n} catch (e) {\n    console.log(e.lineNumber)\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>1) Run:</p>\n\n<pre>\nvar javascript_offset;\ntry {\n  undefined_function();\n} catch(ex1) {\n  javascript_offset = ex1.lineNumber;\n}\ntry {\n  YOUR_STRING_WITH_JS\n} catch (ex2) {\n  var line_that_caused_it = ex2.lineNumber - javascript_offset -2;\n  HANDLE_THE_EXCEPTION_HERE\n}\n</pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Try adding the try/catch to the string instead of around the eval:</p>\n\n<pre><code>var code = 'try{\\nvar c = thisFuncIsNotDefined();\\n}catch(e){alert(e.lineNumber);}';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I found a solution which is pretty inefficient, yet I only use it when debug_mode==1 so it's not that bad..</p>\n\n<p>I write the eval_str to a file, I \"import that file, and invoke it inside a try{}catch{} and I parse the error line from the stack trace...</p>\n\n<p>In my specific case, this is how the code looks like:</p>\n\n<pre><code>var errFileContent = \"exports.run = \"+evalStringAsAFunction+\";\";\nfs.writeFile('/home/vadmin/Alligator/lib/debugging.js', errFileContent, function (err) {\n    var debug = require('./debugging');\n    try{\n         debug.run(args...);\n    }\n    catch(er){\n         log.debug(parseg(er));\n    }\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 3
                }
            ],
            "body": "<p>In JavaScript I have a <code>var str = \".a long string that contains many lines...\"</code>\nIn case of exception that caused by <code>eval(str);</code></p>\n\n<p>I had like to catch it and print the the line number that caused the exception. (the line internal to str..)</p>\n\n<p>Is it possible?</p>\n\n<p><strong>EDIT</strong> As part of the Alligator project (<a href=\"http://github.com/mrohad/Alligator\">http://github.com/mrohad/Alligator</a>), an application server for JavaScript, I am reading files from the disk and eval() anything that is nested to a scriplet( &lt; ? ? > )</p>\n\n<p>I am running this script outside a browser, using NodeJS (on top of V8).</p>\n",
            "last_activity_date": 1281906462,
            "question_id": 3488994,
            "score": 18,
            "tags": [
                "javascript",
                "exception",
                "eval",
                "node.js",
                "v8"
            ],
            "title": "Javascript eval() Exception - line number"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>It adds to the scope of the statements contained in the block:</p>\n\n<pre><code>return sObj.options[selectedIndex].value;\n</code></pre>\n\n<p>can become:</p>\n\n<pre><code>with (sObj)\n    return options[selectedIndex].value;\n</code></pre>\n\n<p>In your case, it doens't do a whole lot...but consider the following:</p>\n\n<pre><code>var a, x, y;\nvar r = 10;\na = Math.PI * r * r;\nx = r * Math.cos(PI);\ny = r * Math.sin(PI /2);\n</code></pre>\n\n<p>Becomes:</p>\n\n<pre><code>var a, x, y;\nvar r = 10;\nwith (Math) {\n  a = PI * r * r;\n  x = r * cos(PI);\n  y = r * sin(PI / 2);\n}\n</code></pre>\n\n<p>...saves a couple of keystrokes. The Mozilla documentation actually does a pretty good job of explaining things in a little more detail (along with pros and cons of using it):</p>\n\n<p><a href=\"https://developer.mozilla.org/index.php?title=En/Core%5FJavaScript%5F1.5%5FReference/Statements/With\" rel=\"nofollow\">with - Mozilla Developer Center</a></p>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>I would recommend NOT using this because of performance issues, but what the above means is:</p>\n\n<p>for the object <strong>sObj</strong> (here presumably a select element), all children and properties referenced on this one (or between following curly braces) treat that as their parent scope.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It isn't a function (as was indicated in the question title before it was edited) but a statement. It may make more sense if the code sample is formatted like so:</p>\n\n<pre><code>with (sObj){\n    return options[selectedIndex].value;\n}\n</code></pre>\n\n<p>Regarding what it does (<a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Object_Manipulation_Statements\" rel=\"nofollow\">Source</a>)</p>\n\n<blockquote>\n  <p>The with statement establishes the default object for a set of statements. JavaScript looks up any unqualified names within the set of statements to determine if the names are properties of the default object. If an unqualified name matches a property, then the property is used in the statement; otherwise, a local or global variable is used.</p>\n</blockquote>\n\n<p>Which means that in the code sample, it is first checked if <code>options</code> is a property of <code>sObj</code>. If it is then <code>options</code> refers to <code>sObj.options</code>, otherwise it checks other scopes for a variable defined by the name <code>options</code></p>\n\n<p>The downside of using a <code>with</code> statement is that it is impossible to know from just glancing at the code what gets accessed. There are other better alternatives as shown in <a href=\"http://www.yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/\" rel=\"nofollow\">this article</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In that with block you dont have to type:</p>\n\n<pre><code>sObj.options[selectedIndex].value\n</code></pre>\n\n<p>but you can just use:</p>\n\n<pre><code>options[selectedIndex].value\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Its the equivalent of </p>\n\n<pre><code>return sObj.options[selectedIndex].value;\n</code></pre>\n\n<p><code>With</code> lets you issue a block of statements in the context of a particular object. Therefore all of the statements in the <code>with</code> block are taken to be members of the object in parenthesis.</p>\n\n<p>This can make code more readable at times, <strong>but</strong> it also can lead to ambiguity, since the variable references can either be with sObj or global. </p>\n\n<p><strong><a href=\"http://stackoverflow.com/questions/61552/are-there-legitimate-uses-for-javascripts-with-statement\">legitimate uses for javascript's \"with\" statement</a></strong> :D</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>the <code>with</code> statement is pure syntactical sugar, but it also can cause some nasty bugs.</p>\n\n<p>See <a href=\"http://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/\" rel=\"nofollow\">with Statement Considered Harmful</a> for clarification:</p>\n\n<blockquote>\n  <p>If you can't read a program and be confident that you know what it is going to do, you can\u2019t have confidence that it is going to work correctly. For this reason, the <code>with</code> statement should be avoided.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Your example could be rewritten as...</p>\n\n<pre><code>return sObj.options[selectedIndex].value;\n</code></pre>\n\n<p>...as the 'with' statement places all related statements in the scope of the supplied object. In this case, it's pretty pointless but, if you were doing lots of operations on 'sObj', then it saves a lot of typing.</p>\n\n<p>Totally ficticious example..</p>\n\n<pre><code>with (sObj) \n{\n   if(options[selectedIndex].value &lt; 10){\n       options[selectedIndex].value++;\n       total+ = options[selectedIndex].value;\n   }\n}\n</code></pre>\n\n<p>But, having said that, it's often the case that saving typing can be achieved in better ways.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"http://yuiblog.com/blog/2006/04/11/with-statement-considered-harmful/\" rel=\"nofollow\">It brings pain and suffering among you and others</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I saw JavaScript code which begins with <code>with</code>. That's a bit confusing. What does it do and how can it be used correctly?</p>\n\n<pre><code>with (sObj) return options[selectedIndex].value;\n</code></pre>\n",
            "last_activity_date": 1335545868,
            "question_id": 2538350,
            "score": 18,
            "tags": [
                "javascript",
                "with-statement"
            ],
            "title": "What does &quot;with&quot; do in JavaScript?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Use <a href=\"http://prototypejs.org/doc/latest/dom/Element/insert/index.html\" rel=\"nofollow\">Element.insert(element, content)</a>.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>container.\n    insert({\n        // key is position\n        // 'before', 'after', 'top' and 'bottom' are allowed\n        top: new Element('label').\n            update('Omschrijving:')\n    }).\n    insert({\n        top: new Element('input').\n            addClassName('textfield').\n            writeAttribute('name', 'factuur_orderregel[]')\n    }).\n    insert({\n        top: new Element('div').\n            addClassName('spacer')\n    });\n</code></pre>\n\n<p>I think Prototype's <code>Element.insert</code> is somewhat awkward for <code>before</code>/<code>after</code>, however. For instance, if you wanted to place the <code>.spacer</code> before the <code>.textfield</code>, sometime later in your code, you would need to do something like:</p>\n\n<pre><code>container.\n    down('.textfield').\n    insert({\n        before: new Element('div').\n            addClassName('spacer')\n    });\n</code></pre>\n\n<p>This is, especially if you're familiar with the DOM API's <code>Element.insertBefore</code>, somewhat unintuitive, as you are <strong>not</strong> inserting the <code>.spacer</code> into the <code>.textfield</code>, but instead into the <code>container</code>, <strong>before</strong> the <code>.textfield</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As well as <code>appendChild</code>, DOM nodes have an <a href=\"https://developer.mozilla.org/en/DOM/element.insertBefore\">insertBefore</a> method</p>\n\n<pre><code>container.insertBefore(newFreeformLabel, container.firstChild);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p>If I had seen Gareth's solution on time, I might go with that, as it was I used:</p>\n\n<pre><code>$('toggle_product').innerHTML = insertContent + $('toggle_product').innerHTML;\n</code></pre>\n\n<p>as Prototypes' insert() function was returning error in IE8..</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I making a website with the javascript library. If the user select a option on a dropdown (select) box there must be added a label and a textbox. This I do with the appendChild option. The only problem with the appenChild option is that the items always be added after the items in used element. This is my code:</p>\n\n<pre><code>var newFreeformLabel = document.createElement('label');\nnewFreeformLabel.innerHTML = 'Omschrijving:';\nvar newFreeformField = document.createElement('input');\nnewFreeformField.className = 'textfield';\nnewFreeformField.name = 'factuur_orderregel[]';\nvar newFreeformSpacer = document.createElement('div');\nnewFreeformSpacer.className = 'spacer';\n\ncontainer.appendChild(newFreeformLabel);\ncontainer.appendChild(newFreeformField);\ncontainer.appendChild(newFreeformSpacer);\n</code></pre>\n\n<p>Here container is the element where the items must be added. The only problem is that the items are added on the end of the element and I want to added the items on the beginning of the html element.</p>\n",
            "last_activity_date": 1380005635,
            "question_id": 618089,
            "score": 18,
            "tags": [
                "javascript",
                "html",
                "prototypejs"
            ],
            "title": "How to append child before. prototype"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Because SOAP reinvents a lot of the HTTP wheel in its quest for protocol-independence. What's the point if you <em>know</em> you're going to serve the response over HTTP anyway (since your client is a web browser)?</p>\n\n<p>UPDATE: I second gizmo's (implied) suggestion of JSON.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<ul>\n<li>Because it's bloated</li>\n<li>Because JSON is natively understandable by the JavaScript</li>\n<li>Because XML isn't fast to manipulate with JavaScript.</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 34
                },
                {
                    "body": "<p>It could be done. Just remember that SOAP is not the fastest way to exchange information as there is a big overhead (big XMLs have to be sent back and forth) - that's probably why you don't see it used that often</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If the web browser is your only client then I would have to agree that SOAP is overkill.</p>\n\n<p>However, if you are going to have multiple types of front end clients on running on different platforms then SOAP may be appropriate.  The nice part about SOAP is that there are a lot of tools out there that will generate code for you to handle sending, receiving, and parsing of SOAP based on the WSDL file.</p>\n\n<p>For example, if you wanted to develop a C++ front end client then all you need is the WSDL file and Microsoft's tools will generate all the C++ code to generate the SOAP request based on a data structure, send the request, receive the response, and parse the response into a return data structure.</p>\n\n<p>There are tools to do this both on the client and server side.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>Why is it not a good idea to use SOAP for communicating with the front end? For example, a web browser using JavaScript.</p>\n",
            "last_activity_date": 1222264074,
            "question_id": 127038,
            "score": 18,
            "tags": [
                "javascript",
                "soap"
            ],
            "title": "Why is it not a good idea to use SOAP for communicating with the front end (ie web browser)?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>It looks like you're definitely hitting an iOS 8 bug.  In iOS7, Safari would (apparently) ignore or keep unfocused elements that had focus set prior to page load.  This includes both <code>&lt;input autofocus&gt;</code> and <code>input.focus()</code> that occur up to some point, possibly page load (I tested just with an inline script).</p>\n\n<p>In iOS 8, Safari is now apparently remembering that the element was focussed but not actually focussing it until a touch down event.  It is then blindly sending a click event to whichever element received the touch up.</p>\n\n<p>Both browsers behave the same for <code>input.focus()</code> occurring after page load.  They both zoom to the element and bring up the keyboard.</p>\n\n<p>Tests:</p>\n\n<ul>\n<li><code>input.focus()</code> before page load: <a href=\"http://fiddle.jshell.net/qo6ctnLz/3/show/\">http://fiddle.jshell.net/qo6ctnLz/3/show/</a></li>\n<li><code>&lt;input autofocus&gt;</code>: <a href=\"http://fiddle.jshell.net/qo6ctnLz/4/show/\">http://fiddle.jshell.net/qo6ctnLz/4/show/</a></li>\n<li><code>input.focus()</code> after page load: <a href=\"http://fiddle.jshell.net/qo6ctnLz/6/show/\">http://fiddle.jshell.net/qo6ctnLz/6/show/</a></li>\n</ul>\n\n<p>The good news is that you only need to be worried about new behavior on elements you want to prefocus.  The other good news is that while you will have to use a user-agent workaround, you can use it for all iOS versions since they were already behaving like you weren't autofocusing:</p>\n\n<pre><code>if (!/iPad|iPhone|iPod/g.test(navigator.userAgent)) {\n    element.focus();\n}\n</code></pre>\n\n<p>This appears to be the approach <a href=\"http://www.google.com\">http://www.google.com</a> uses based on some basic user-agent testing:</p>\n\n<ul>\n<li>Mac Book Pro: autofocus before page load.</li>\n<li>iPhone: no autofocus</li>\n<li>iPad: no autofocus</li>\n<li>Kit Kat (Android): focus <em>after</em> page load, possibly doing extra detection for presence of software keyboard.</li>\n</ul>\n\n<p>If you haven't, you should go ahead and file a radar with Apple at <a href=\"https://bugreport.apple.com\">https://bugreport.apple.com</a>.</p>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>It seems that in iOS 8 there has been an API change on the default handling for the javascript focus() command. If your application is a hybrid app in which you have direct control over Apple's web view facade the below is directly from apples docs. </p>\n\n<p>A Boolean value indicating whether web content can programmatically display the keyboard.</p>\n\n<p>[myWebView setKeyboardDisplayRequiresUserAction:YES];</p>\n\n<p>When this property is set to YES, the user must explicitly tap the elements in the web view to display the keyboard <strong>(or other relevant input view)</strong> for that element. When set to NO, a focus event on an element causes the input view to be displayed and associated with that element automatically.</p>\n\n<p>The default value for this property is YES.</p>\n\n<p>From the last paragraph it seems this method call is not strictly for the keyboard. It indicates that it is for input views across the board i.e. drop down and date picker etc.</p>\n\n<p>It seems though there is a bug as this method call is not currently working for me. The current behavior I am receiving corresponds as if it defaults to NO. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have a solution:</p>\n\n<ol>\n<li>Disable all inputs</li>\n<li>Enable the input you wish to focus</li>\n<li>Set the focus to that input</li>\n<li>Re-enable all the other inputs</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Prior to iOS8, using the Javascript <code>.focus()</code> method on an input element would appear to have no effect (the virtual keyboard would not display). After the latest iOS 8 release, running the <code>.focus()</code> method seemed to have no effect on page load but once a user touched anywhere on the screen the virtual keyboard would instantly appear and scroll the page to the element in focus. (This is also an issue when I use the HTML attribute \"autofocus\")</p>\n\n<p>This change has caused issues with iOS8 users on my site. When a user attempts to click a button on my page the sudden scroll and keyboard appearance causes them to unintentionally click a button that was lower on the screen.</p>\n\n<p>I am assuming this is a bug in iOS8 and was not intentional feature, my question is what is the most efficient solution to fixing this problem? </p>\n\n<p>Do I have to check <code>navigator.userAgent</code> to see if the device is iOS8, every time I use the <code>.focus()</code> method?</p>\n",
            "last_activity_date": 1426129094,
            "question_id": 26146252,
            "score": 17,
            "tags": [
                "javascript",
                "ios",
                "uikeyboard",
                "autofocus"
            ],
            "title": "in iOS8 using .focus() will show virtual keyboard and scroll page after touch"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>The TypeScript way of doing this is to place the ellipsis operator (<code>...</code>) before the name of the argument. The above would be written as,</p>\n\n<pre><code>function sum(...numbers: number[]) {\n    var aggregateNumber = 0;\n    for (var i = 0; i &lt; numbers.length; i++)\n        aggregateNumber += numbers[i];\n    return aggregateNumber;\n}\n</code></pre>\n\n<p>This will then type check correctly with</p>\n\n<pre><code>console.log(sum(1, 5, 10, 15, 20));\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 53
                }
            ],
            "body": "<p>IMO, one of the main concerns of the <a href=\"http://www.typescriptlang.com\">TypeScript</a> language is to support the existing vanilla JavaScript code. This is the impression I had at first glance. Take a look at the following JavaScript function which is perfectly valid:</p>\n\n<blockquote>\n  <p>Note: I am not saying that I like this approach. I am just saying this is a\n  valid JavaScript code.</p>\n</blockquote>\n\n<pre><code>function sum(numbers) { \n\n    var agregatedNumber = 0; \n    for(var i = 0; i &lt; arguments.length; i++) { \n        agregatedNumber += arguments[i];\n    }\n\n    return agregatedNumber;\n}\n</code></pre>\n\n<p>So, we consume this function with any number of arguments:</p>\n\n<pre><code>console.log(sum(1, 5, 10, 15, 20));\n</code></pre>\n\n<p>However, when I try this out with <a href=\"http://www.typescriptlang.org/Playground/\">TypeScript Playground</a>, it gives compile time errors.</p>\n\n<p>I am assuming that this is a bug. Let's assume that we don't have the compatibility issues. Then, is there any way to write this type of functions with open-ended arguments? Such as <code>params</code> feature in C#?</p>\n",
            "last_activity_date": 1414608082,
            "question_id": 12697275,
            "score": 17,
            "tags": [
                "javascript",
                "typescript"
            ],
            "title": "open-ended function arguments with TypeScript"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Similar post</p>\n\n<p><a href=\"http://stackoverflow.com/questions/5159521/can-i-configure-expressjs-to-serve-some-pages-over-http-and-others-over-https\">Can I configure expressjs to serve some pages over http and others over https?</a></p>\n\n<p>Be aware that express now support creating Https servers with:</p>\n\n<pre><code> var app = require('express').createServer({ key: ... });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can share the implementation via something like:</p>\n\n<pre><code>var register = function (app) {\n    // config middleware\n    app.configure({\n\n    });\n\n    // config routes\n    app.get(...);\n};\n\nvar http = express.createServer();\nregister(http);\nhttp.listen(80);\n\nvar https = express.createServer({ key: /* https properties */ });\nregister(https);\nhttps.listen(443);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 8
                },
                {
                    "body": "<p>As a possible update to this question, you might want to check out the changes <a href=\"https://github.com/visionmedia/express/wiki/Migrating-from-2.x-to-3.x\" rel=\"nofollow\">here</a> for express 3.  The change document says:</p>\n\n<blockquote>\n  <p>The return value of <code>express()</code> is a JavaScript Function,\n  encapsulating everything that makes an Express app tick. This means\n  you can easily setup HTTP and HTTPS versions of your application by\n  passing it to node's <code>http.createServer()</code> and <code>https.createServer()</code>:</p>\n</blockquote>\n\n<p>In Express 3, <code>express.createServer()</code> is now <code>express()</code></p>\n\n<p>Here is a complete example for express 3:</p>\n\n<pre><code>var fs = require('fs')\n    , https = require('https')\n    , http = require('http')\n    , express = require('express')\n    , keys_dir = 'keys/'\n    , server_options = {\n        key  : fs.readFileSync(keys_dir + 'privatekey.pem'),\n        ca   : fs.readFileSync(keys_dir + 'certauthority.pem'),\n        cert : fs.readFileSync(keys_dir + 'certificate.pem')\n      }\n    , app = express();\napp.configure(function(){\n  app.use(express.cookieParser());\n  app.use(express.bodyParser());\n  app.use(express.methodOverride());\n  app.use(express.session( { secret: '' } ));\n  app.use(app.router);\n});\napp.configure('development',function(){\n  app.use(express.static(__dirname + '/public'));\n  app.use(express.errorHandler({dumpExceptions: true, showStack:true}));\n  app.set('view options', { pretty: true });\n});\napp.get('/', function(req, res){\n  res.send('Hello World!');\n});\nhttps.createServer(server_options,app).listen(7000);\nhttp.createServer(app).listen(8000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                }
            ],
            "body": "<p>Can I create an Express server listening on both HTTP and HTTPS, with the same routes and the same middlewares?</p>\n\n<p>Currently I do this with Express on HTTP, with <a href=\"http://www.stunnel.org/\">stunnel</a> tunneling HTTPS to Express, but I prefer a pure Node solution.</p>\n\n<p>I can do it with this code, but using the <code>handle</code> method that is marked as private:</p>\n\n<pre><code>var express = require( 'express' )\n    , https = require(\"https\")\n    , fs = require( 'fs' );\n\nvar app = express.createServer();\n// init routes and middlewares\napp.listen( 80 );\n\nvar privateKey = fs.readFileSync( 'privatekey.pem' ).toString();\nvar certificate = fs.readFileSync( 'certificate.pem' ).toString();\nvar options = {key: privateKey, cert: certificate};\nhttps.createServer( options, function(req,res)\n{\n    app.handle( req, res );\n} ).listen( 443 );\n</code></pre>\n",
            "last_activity_date": 1418822076,
            "question_id": 8355473,
            "score": 17,
            "tags": [
                "javascript",
                "node.js",
                "https",
                "express"
            ],
            "title": "Listen on HTTP and HTTPS for a single express app"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Use the <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/Tech/XUL/Property/selectedIndex\"><code>selectedIndex</code> property</a>:</p>\n\n<pre><code>document.getElementById(\"Mobility\").selectedIndex = 12; //Option 10\n</code></pre>\n\n<p><strong>Alternate method:</strong></p>\n\n<p>Loop through each value:</p>\n\n<pre><code>//Get select object\nvar objSelect = document.getElementById(\"Mobility\");\n\n//Set selected\nsetSelectedValue(objSelect, \"10\");\n\nfunction setSelectedValue(selectObj, valueToSet) {\n    for (var i = 0; i &lt; selectObj.options.length; i++) {\n        if (selectObj.options[i].text== valueToSet) {\n            selectObj.options[i].selected = true;\n            return;\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 23
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/questions/5813123/cross-browser-issue-document-getelementbyid-value-not-working-in-ie-but-work\">This may do it</a></p>\n\n<p><code>document.forms['someform'].elements['someelement'].value</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>function setSelectedIndex(s, v) {\n    for ( var i = 0; i &lt; s.options.length; i++ ) {\n        if ( s.options[i].value == v ) {\n            s.options[i].selected = true;\n            return;\n        }\n    }\n}\n</code></pre>\n\n<p>Where s is the dropdown and v is the value</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Yes. As mentioned in the posts, <code>value</code> property is nonstandard and does not work with IE. You will need to use the <code>selectedIndex</code> property to achieve this. You can refer to the w3schools DOM reference to see the properties of HTML elements. The following link will give you the list of properties you can work with on the select element.</p>\n\n<p><a href=\"http://www.w3schools.com/jsref/dom_obj_select.asp\" rel=\"nofollow\">http://www.w3schools.com/jsref/dom_obj_select.asp</a></p>\n\n<p><strong>Update</strong></p>\n\n<p>This was not supported during 2011 on IE. As commented by finnTheHuman, it is supported at present.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>i have a drop down like this</p>\n\n<pre><code>&lt;select style=\"width: 280px\" id=\"Mobility\" name=\"Mobility\"&gt;\n  &lt;option selected=\"\"&gt;Please Select&lt;/option&gt;\n  &lt;option&gt;K&lt;/option&gt;\n  &lt;option&gt;1&lt;/option&gt;\n  &lt;option&gt;2&lt;/option&gt;\n  &lt;option&gt;3&lt;/option&gt;\n  &lt;option&gt;4&lt;/option&gt;\n  &lt;option&gt;5&lt;/option&gt;\n  &lt;option&gt;6&lt;/option&gt;\n  &lt;option&gt;7&lt;/option&gt;\n  &lt;option&gt;8&lt;/option&gt;\n  &lt;option&gt;9&lt;/option&gt;\n  &lt;option&gt;10&lt;/option&gt;\n  &lt;option&gt;11&lt;/option&gt;\n  &lt;option&gt;12&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>I use this line to select a value it works in Mozilla not in IE? Why its not working?</p>\n\n<pre><code>var element = document.getElementById(\"Mobility\");\nelement.value = \"10\";\n</code></pre>\n",
            "last_activity_date": 1404048413,
            "question_id": 8140862,
            "score": 17,
            "tags": [
                "javascript"
            ],
            "title": "How to select a value in dropdown javascript?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>im setting width and height to editor area like this</p>\n\n<pre><code>&lt;style&gt;\n#content{width: 620px; height: 500px;} \n&lt;/style&gt;\n\n&lt;textarea name=\"content\" id=\"content\" cols=\"50\" rows=\"15\"&gt;&lt;/textarea&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yes, this is very annoying. I wrote my own function to adjust the height to the given input. You may modify it to set your height/width as you wish:</p>\n\n<pre><code>    resizeIframe: function(frameid) {\n        var frameid = frameid ? frameid : this.editor.id+'_ifr';\n        var currentfr=document.getElementById(frameid);\n\n        if (currentfr &amp;&amp; !window.opera){\n            currentfr.style.display=\"block\";\n            if (currentfr.contentDocument &amp;&amp; currentfr.contentDocument.body.offsetHeight) { //ns6 syntax\n                currentfr.height = currentfr.contentDocument.body.offsetHeight + 26;\n            }\n            else if (currentfr.Document &amp;&amp; currentfr.Document.body.scrollHeight) { //ie5+ syntax\n                    currentfr.height = currentfr.Document.body.scrollHeight;\n            }\n            styles = currentfr.getAttribute('style').split(';');\n            for (var i=0; i&lt;styles.length; i++) {\n                if ( styles[i].search('height:') ==1 ){\n                    styles.splice(i,1);\n                    break;\n                }\n            };\n            currentfr.setAttribute('style', styles.join(';'));\n        }\n    },\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I noticed that a containing table was enforcing widths, and also the icon set are td's, so there's a minimum width they'll collapse down to, so if you have many icons in a single row - it could be messing all over your widths.</p>\n\n<p>Sort of related SO question of mine, ended up being quite related to your problem: <a href=\"http://stackoverflow.com/questions/4489304/able-to-float-td-elements-consistently\">Able to float td elements consistently?</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know all about this, it <em>is</em> very annoying.</p>\n\n<p>Adding this to any loaded CSS file fixed the width for me (I just put it in the global css, not in any of the TinyMCE css files, I did not test with height):</p>\n\n<pre><code>.mceEditor &gt; table {\n    width:/* my width */ !important;\n}\n</code></pre>\n\n<p>This would affect all instances, which was fine in my case. You can target the toolbar itself with <code>.mceToolbar</code></p>\n\n<p>You kind of <em>do</em> want TinyMCE to resize the textarea, so it can be wide enough to fit all the toolbar icons.</p>\n",
                    "is_accepted": true,
                    "score": 15
                },
                {
                    "body": "<pre><code>tinyMCE.init({\n        mode : \"exact\",\n         .....\n</code></pre>\n\n<p>mode : \"exact\" will disable the ability to resize grid by drag</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is my fix. <br/>\nIt works also for multiple instances of TinyMCE editors (init() with 'height' property works only for the first instance, so it's a workaround to achieve a fixed or minimum height of the editor box).</p>\n\n<pre><code>.mceEditor td.mceIframeContainer iframe {\n    min-height: 350px !important;\n}\n.mceEditor table {\n    height: auto !important;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Its saves the last size because of the theme settings. You can turn it off by using the following</p>\n\n<pre><code>$('textarea.tinymce').tinymce({\n    theme_advanced_resizing: true,\n    theme_advanced_resizing_use_cookie : false,\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I found the TinyMCE text-area (called '.mceContentBody' in my theme) too small and awkwardly margined in the new post content area. \nIn my theme there's a css file called editor-style. I changed the width (to 98%) yet since TinyMCE uses cookies to remember the editor size, the CSS changes weren't sticking. After <strong>CLEARING MY BROWSER'S CACHE</strong>, the CSS width/margin changes took effect. Finally. Gah.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>According to the (conflicting) documentation of TinyMCE, the editor takes on the size of the textarea (or other) element that it replaces. It also says that you can set the size of the editor by specifying <code>{ height: '123', width: '123' }</code> in the <code>init</code> method.</p>\n\n<p>I have tried BOTH and still get only one result - the editor resizes itself to (how it remembers is beyond me) what it was the last time a user resized it.</p>\n",
            "last_activity_date": 1422122822,
            "question_id": 6436934,
            "score": 17,
            "tags": [
                "javascript",
                "jquery",
                "tinymce"
            ],
            "title": "TinyMCE width and height disobedient!"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>You can pass a function to <code>replace</code>.</p>\n\n<pre><code>var r = a.replace(/(f)/, function(v) { return v.toUpperCase(); });\n</code></pre>\n\n<p><strong>Explanation</strong></p>\n\n<pre><code>a.replace( /(f)/, \"$1\".toUpperCase())\n</code></pre>\n\n<p>In this example you pass a string to the replace function. Since you are using the special replace syntax <em>($N grabs the Nth capture)</em> you are simply giving the same value. The <code>toUpperCase</code> is actually deceiving because you are only making the replace string upper case <em>(Which is somewhat pointless because the <code>$</code> and one <code>1</code> characters have no upper case so the return value will still be <code>\"$1\"</code>)</em>.</p>\n\n<pre><code>a.replace( /(f)/, String.prototype.toUpperCase.apply(\"$1\"))\n</code></pre>\n\n<p>Believe it or not the semantics of this expression are exactly the same.</p>\n",
                    "is_accepted": true,
                    "score": 48
                },
                {
                    "body": "<p>I know I'm late to the party but here is a shorter method that is more along the lines of your initial attempts.</p>\n\n<pre><code>a.replace('f', String.call.bind(a.toUpperCase));\n</code></pre>\n\n<p>So where did you go wrong and what is this new voodoo?</p>\n\n<h3>Problem 1</h3>\n\n<p>As stated before, you were attempting to pass the results of a called method as the second parameter of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" rel=\"nofollow\">String.prototype.replace()</a>, when instead you ought to be passing a reference to a function</p>\n\n<h3>Solution 1</h3>\n\n<p>That's easy enough to solve. Simply removing the parameters and parentheses will give us a reference rather than executing the function.</p>\n\n<pre><code>a.replace('f', String.prototype.toUpperCase.apply)\n</code></pre>\n\n<h3>Problem 2</h3>\n\n<p>If you attempt to run the code now you will get an error stating that undefined is not a function and therefore cannot be called. This is because String.prototype.toUpperCase.apply is actually a reference to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"nofollow\">Function.prototype.apply()</a> via JavaScript's prototypical inheritance. So what we are actually doing looks more like this</p>\n\n<pre><code>a.replace('f', Function.prototype.apply)\n</code></pre>\n\n<p>Which is obviously not what we have intended. How does it know to run <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"nofollow\">Function.prototype.apply()</a> on <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\" rel=\"nofollow\">String.prototype.toUpperCase()</a>?</p>\n\n<h3>Solution 2</h3>\n\n<p>Using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" rel=\"nofollow\">Function.prototype.bind()</a> we can create a copy of Function.prototype.call with its context specifically set to String.prototype.toUpperCase. We now have the following</p>\n\n<pre><code>a.replace('f', Function.prototype.apply.bind(String.prototype.toUpperCase))\n</code></pre>\n\n<h3>Problem 3</h3>\n\n<p>The last issue is that <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\" rel=\"nofollow\">String.prototype.replace()</a> will pass several arguments to its replacement function. However, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"nofollow\">Function.prototype.apply()</a> expects the second parameter to be an array but instead gets either a string or number (depending on if you use capture groups or not). This would cause an invalid argument list error.</p>\n\n<h3>Solution 3</h3>\n\n<p>Luckily, we can simply substitute in <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" rel=\"nofollow\">Function.prototype.call()</a> (which accepts any number of arguments, none of which have type restrictions) for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"nofollow\">Function.prototype.apply()</a>. We have now arrived at working code!</p>\n\n<pre><code>a.replace(/f/, Function.prototype.call.bind(String.prototype.toUpperCase))\n</code></pre>\n\n<h3>Shedding bytes!</h3>\n\n<p>Nobody wants to type <em>prototype</em> a bunch of times. Instead we'll leverage the fact that we have objects that reference the same methods via inheritance. The String constructor, being a function, inherits from Function's prototype. This means that we can substitute in String.call for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call\" rel=\"nofollow\">Function.prototype.call</a> (actually we can use Date.call to save even more bytes but that's less semantic).</p>\n\n<p>We can also leverage our variable 'a' since it's prototype includes a reference to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase\" rel=\"nofollow\">String.prototype.toUpperCase</a> we can swap that out with a.toUpperCase. It is the combination of the 3 solutions above and these byte saving measures that is how we get the code at the top of this post.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'd like to know how to replace a capture group with its uppercase in JavaScript. Here's a simplified version of what I've tried so far that's not working:</p>\n\n<pre><code>&gt; a=\"foobar\"\n'foobar'\n&gt; a.replace( /(f)/, \"$1\".toUpperCase() )\n'foobar'\n&gt; a.replace( /(f)/, String.prototype.toUpperCase.apply(\"$1\") )\n'foobar'\n</code></pre>\n\n<p>Would you explain what's wrong with this code?</p>\n",
            "last_activity_date": 1399530546,
            "question_id": 6142922,
            "score": 17,
            "tags": [
                "javascript",
                "regex",
                "replace",
                "uppercase"
            ],
            "title": "Replace a Regex capture group with uppercase in Javascript"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>I think I have found a solution. I haven't tested it on IE but it seems to be working on Firefox :</p>\n\n<pre><code>Ext.EventManager.on(window, 'beforeunload', function() {\n    alert('cross-exit tab click AND cross-exit browser click');\n});\n\nExt.EventManager.on(window, 'unload', function() {\n    alert('cross-exit tab click');\n});\n</code></pre>\n\n<p>PS : Thank you exhuma for having edited the question ;)</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>This thread might shed some insight:\n<a href=\"http://forums.devarticles.com/javascript-development-22/how-to-stop-browser-from-closing-using-javascript-8458.html\">http://forums.devarticles.com/javascript-development-22/how-to-stop-browser-from-closing-using-javascript-8458.html</a></p>\n\n<p>I haven't given this solution a test-run yet. But it seems possible.</p>\n\n<p>Here's a more in-depth discussion on the <code>onbeforeunload</code> event handler.\n<a href=\"http://bytes.com/topic/javascript/insights/825556-using-onbeforeunload-javascript-event\">http://bytes.com/topic/javascript/insights/825556-using-onbeforeunload-javascript-event</a></p>\n\n<p>And then there's always <a href=\"http://www.quirksmode.org/dom/events/index.html\">quirksmode</a>. Unfortunately the load/unload events are not yet covered by quirksmode. As stated on the page:</p>\n\n<blockquote>\n  <p>I haven\u2019t tested the load and unload events yet; they\u2019ll be added to the table later on.</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 6
                }
            ],
            "body": "<p>First of all, thank you for reading my question.\nI would like to know if there is any way to handle the browser exit event.</p>\n\n<p>For example, I would like to send a query when the user click on the cross-exit or simply close his browser.</p>\n\n<p>Thanks a lot.</p>\n\n<p>$t0rM </p>\n",
            "last_activity_date": 1273651258,
            "question_id": 2808840,
            "score": 17,
            "tags": [
                "javascript",
                "browser",
                "javascript-events",
                "extjs"
            ],
            "title": "ExtJS : handling browser exit event (click on cross-exit)"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>try</p>\n\n<pre><code> $(':input',\"#\" + form.id)\n  .not(':button, :submit, :reset, :hidden')\n  .val('');\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\"#\" + form.id)[0].reset();\n</code></pre>\n\n<p>check this\n<a href=\"http://stackoverflow.com/questions/6987452/clearing-file-input-box-in-internet-explorer\">Clearing file input box in Internet Explorer</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I believe that this is an IE bug and I have created the following connect bug report:\n<a href=\"https://connect.microsoft.com/IE/feedback/details/811930/ie11-crash-when-clearing-multiple-input-fields-with-jquery\" rel=\"nofollow\">https://connect.microsoft.com/IE/feedback/details/811930/ie11-crash-when-clearing-multiple-input-fields-with-jquery</a></p>\n\n<p>I have added a slightly modified version of your recursive function there as a work around. The function is slightly more generic and looks like this:</p>\n\n<pre><code>function clearFields (counter, selector) {\n    var i = counter || 0, deferred = new $.Deferred();\n    if (selector.eq(i).length === 1){\n        setTimeout(function(){\n            selector.eq(i).val(\"\");\n            i = i + 1;\n            clearFields(i, selector).always(function(){\n                deferred.resolve();\n            });\n        },0);\n    } else {\n        deferred.resolve();\n    }\n    return deferred.promise();\n}\n\n$(document).ready(function(){\n    $('#clearFormNormal').click(function(){\n        $(\"form input\").val(\"\");\n    });\n    $('#clearFormSetTimeout').click(function(){\n        clearFields(0, $(\"form input\"));\n    });\n});\n</code></pre>\n\n<p>Please up-vote the connect issue.</p>\n\n<p><strong>How the clearFields function works:</strong></p>\n\n<p>First, note that I did not write the original function this was based off of, so the <em>why</em> of it working is only conjecture on my part.</p>\n\n<p>The clearFields function is a recursive function. Each time it runs, it takes two parameters: counter (which is the index in the set of fields to be cleared) and selector (the jquery object that contains the set of fields to be cleared)</p>\n\n<p>The function creates looks at the element specified by counter in the set of DOM elements specified by selector. If such an element exists, then it creates an asynchronous setTimeout which will clear that element. This async function then increments counter (which is called i here) and recursively calls clearFields. I believe that the recursiveness is key because I tried using just a setTimeout in a loop and it didn't work.</p>\n\n<p>The recursion stops when counter goes past the index of the last element in the collection which is when selector.eq(counter).length !== 1</p>\n\n<p>I think this function could further be improved by swapping the order of counter and selector parameters so that counter would be optional for the first call. </p>\n\n<p>I have never needed to use the jQuery deferred code before, so I don't know what role that plays in this function.</p>\n",
                    "is_accepted": true,
                    "score": 6
                },
                {
                    "body": "<p>I believe it is a bug of IE and it is not related to jQuery, as you can simply show it by the following html page like:</p>\n\n<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n    &lt;html&gt;    \n  &lt;head&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=windows-1252\"&gt;&lt;/meta&gt;\n    &lt;title&gt;test&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n  &lt;form id=\"form_1\"&gt;\n  &lt;input type=\"text\" value=\"\" size=\"10\"/&gt;&lt;br/&gt;\n  &lt;input type=\"text\" value=\"\" size=\"10\"/&gt;&lt;br/&gt;\n  &lt;input type=\"text\" value=\"\" size=\"10\"/&gt;&lt;br/&gt;\n  &lt;input type=\"text\" value=\"\" size=\"10\"/&gt;&lt;br/&gt;\n  &lt;input type=\"text\" value=\"\" size=\"10\"/&gt;&lt;br/&gt;\n  &lt;input type=\"text\" value=\"\" size=\"10\"/&gt;&lt;br/&gt;\n  &lt;input type=\"text\" value=\"\" size=\"10\"/&gt;&lt;br/&gt;\n  &lt;input type=\"text\" value=\"\" size=\"10\"/&gt;&lt;br/&gt;\n  &lt;input type=\"text\" value=\"\" size=\"10\"/&gt;&lt;br/&gt;\n  &lt;input type=\"text\" value=\"\" size=\"10\"/&gt;&lt;br/&gt;\n  &lt;input type=\"text\" value=\"\" size=\"10\"/&gt;&lt;br/&gt;\n  &lt;input type=\"button\" value=\"reset\" onclick=\"document.getElementById('form_1').reset();\"&gt;\n  &lt;/form&gt;.\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>One can find that IE 11 will crash after you reset the form.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I think this is a bug in Internet Explorer 11. I reported a <a href=\"http://connect.microsoft.com/IE/feedback/details/808033/ie11-two-reproducible-crashes-on-assigning-the-value-of-an-input-element-with-javascript\" rel=\"nofollow\">similar bug</a> on Microsoft Connect. I was able to reproduce the issues I encountered both with and without jQuery.</p>\n\n<p>On the bug report, there is a very simple (and quite surprising) workaround (discovered by philbee21). Before assigning the empty string, first set the value to a single space:</p>\n\n<pre><code>fields.forEach(function (field) {\n    field.value = ' ';\n    field.value = clearValue;\n});\n</code></pre>\n\n<p>I have created an <a href=\"http://jsfiddle.net/philr3/5CC5Z/\" rel=\"nofollow\">updated fiddle</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This appears to fix the issue:</p>\n\n<pre><code>$(document).ready(function(){\n    $('#clearFormNormal').click(function(){\n        $(\"form input\").val($(\"form input\").val());\n        $(\"form input\").val(\"\");\n    });\n});\n</code></pre>\n\n<p>I am not sure why, but my theory is that setting the field value to it's current value resets a reference that was null.  </p>\n\n<p>Check out the JS Fiddle here: <a href=\"http://jsfiddle.net/Cy5D5/22/\" rel=\"nofollow\">http://jsfiddle.net/Cy5D5/22/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The fix for this bug was included in the IE updates for February 2014 released today on Windows Update.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>If I'm clearing a form with 5 or more fields in IE11 using $('form input').val(\"\") IE11 will crash. \nHTML:</p>\n\n<pre><code>&lt;form&gt;\n    &lt;label&gt;1&lt;/label&gt;&lt;input type=\"text\"/&gt;\n    &lt;label&gt;2&lt;/label&gt;&lt;input type=\"text\"/&gt;\n    &lt;label&gt;3&lt;/label&gt;&lt;input type=\"text\"/&gt;\n    &lt;label&gt;4&lt;/label&gt;&lt;input type=\"text\"/&gt;\n    &lt;label&gt;5&lt;/label&gt;&lt;input type=\"text\"/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>$(document).ready(function(){\n    $('#clearFormNormal').click(function(){\n        $(\"form input\").val(\"\");\n    });\n});\n</code></pre>\n\n<p>When I'm doing this recursive and with a setTimeout it works.</p>\n\n<p>JS:</p>\n\n<pre><code>function clearFields (counter) {\n    var i = counter || 0, deferred = new $.Deferred();\n    if ($(\"form input\").eq(i).length === 1){\n        setTimeout(function(){\n            $(\"form input\").eq(i).val(\"\");\n            i = i + 1;\n            clearFields(i).always(function(){\n                deferred.resolve();\n            });\n        },0);\n    } else {\n        deferred.resolve();\n    }\n    return deferred.promise();\n}\n\n$(document).ready(function(){\n    $('#clearFormSetTimeout').click(function(){\n        clearFields();\n    });\n});\n</code></pre>\n\n<p>See the <a href=\"http://jsfiddle.net/fransoverbeek/Cy5D5/7/\">http://jsfiddle.net/fransoverbeek/Cy5D5/7/</a> as well</p>\n\n<p>Is this an IE11 bug?</p>\n",
            "last_activity_date": 1410895270,
            "question_id": 20654447,
            "score": 16,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "internet-explorer-11"
            ],
            "title": "IE11 is crashing when clearing a form with 5 or more fields using JQuery $(...).val(&quot;&quot;)"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>It depends on your usecase. It may make sense to check the type too, but if it's just a flag, it does not.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Since you already initialized clearly as bool, I think <code>===</code> operator is not required.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In general, it is cleaner and simpler to omit the <code>=== true</code>.</p>\n\n<p>However, in Javascript, those statements are different.  </p>\n\n<p><code>if (booleanValue)</code> will execute if <code>booleanValue</code> is <em>truthy</em> &ndash; anything other than <code>0</code>, <code>false</code>, <code>NaN</code>, <code>[]</code>, <code>null</code>, and <code>undefined</code>.</p>\n\n<p><code>if (booleanValue === true)</code> will only execute if <code>booleanValue</code> is precisely equal to <code>true</code>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Since the checked value is Boolean it preferred to use it  directly for less coding and at all it did same ==true </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The identity (===) operator behaves identically to the equality (==) operator except no type conversion is done, and the types must be the same to be considered equal. </p>\n\n<p>if (booleanValue) is essentially if (booleanValue==true).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This depends. If you are concerned that your variable could end up as something that resolves to TRUE. Then hard checking is a must. Otherwise it is up to you. However, I doubt that the syntax <code>whatever == TRUE</code> would ever confuse anyone who knew what they were doing.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If the variable can only ever take on boolean values, then it's reasonable to use the shorter syntax.</p>\n\n<p>If it can potentially be assigned other types, and you need to distinguish <code>true</code> from <code>1</code> or <code>\"foo\"</code>, then you must use <code>=== true</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you write: <code>if(x === true)</code> , It will be true for only x = true</p>\n\n<p>If you write: <code>if(x)</code> , it will be true for any <strong>x</strong> that is not: '' (empty string), false, null, undefined, 0.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>First off, the facts:</p>\n\n<pre><code>if (booleanValue)\n</code></pre>\n\n<p>or </p>\n\n<pre><code>if (booleanValue == true)\n</code></pre>\n\n<p>Will satisfy the <code>if</code> statement for any truthy value of <code>booleanValue</code> including <code>true</code>, any non-zero number, any non-empty string value, any object or array reference, etc... because when you don't use <code>===</code>, javascript will use type-coercion to make the two values in the comparison have the same type and a lot of truthy values will coerce to true to match the condition.</p>\n\n<p>On the other hand:</p>\n\n<pre><code>if (booleanValue === true)\n</code></pre>\n\n<p>This will only satisfy the <code>if</code> condition if <code>booleanValue</code> is exactly equal to <code>true</code>.  No other truthy value will satisfy it.</p>\n\n<hr>\n\n<p>So, it really depends upon the expected values for <code>booleanValue</code> and how you want the code to work.  If you know in advance that it's only ever going to have a <code>true</code> or <code>false</code> value, then comparing it explicitly with </p>\n\n<pre><code>if (booleanValue === true)\n</code></pre>\n\n<p>is just extra code and unnecessary and</p>\n\n<pre><code>if (booleanValue)\n</code></pre>\n\n<p>is more compact and arguably cleaner/better.</p>\n\n<p>If, on the other hand, you don't know what <code>booleanValue</code> might be and you want to test if it is truly set to <code>true</code> with no other automatic type conversions allowed, then </p>\n\n<pre><code>if (booleanValue === true)\n</code></pre>\n\n<p>is not only a good idea, but required.</p>\n\n<hr>\n\n<p>For example, if you look at the implementation of <code>.on()</code> in jQuery, it has an optional return value.  If the callback returns <code>false</code>, then jQuery will automatically stop propagation of the event.  In this specific case, since jQuery wants to ONLY stop propagation if <code>false</code> was returned, they check the return value explicity for <code>=== false</code> because they don't want <code>undefined</code> or <code>0</code> or <code>\"\"</code> or anything else that will automatically type-convert to false to also satisfy the comparison.</p>\n\n<p>For example, here's the jQuery event handling callback code:</p>\n\n<pre><code>ret = ( specialHandle || handleObj.handler ).apply( matched.elem, args );\n\nif ( ret !== undefined ) {\n     event.result = ret;\n     if ( ret === false ) {\n         event.preventDefault();\n         event.stopPropagation();\n     }\n }\n</code></pre>\n\n<p>You can see that jQuery is explicitly looking for <code>ret === false</code>.</p>\n\n<p>But, there are also many other places in the jQuery code where a simpler check is appropriate given the desire of the code.  For example:</p>\n\n<pre><code>// The DOM ready check for Internet Explorer\nfunction doScrollCheck() {\n    if ( jQuery.isReady ) {\n        return;\n    }\n    ...\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 26
                },
                {
                    "body": "<p>In Javascript the idea of boolean is fairly ambiguous. Consider this:</p>\n\n<pre><code> var bool = 0 \n if(bool){..} //evaluates to false\n\n if(//uninitialized var) //evaluates to false\n</code></pre>\n\n<p>So when you're using an if statement, (or any other control statement), one does not have to use a \"boolean\" type var. Therefore, in my opinion, the \"=== true\" part of your statement is unnecessary if you know it is a boolean, but absolutely necessary if your value is an ambiguous \"truthy\" var. More on booleans in javscript can be found <a href=\"http://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I think that your reasoning is sound.  But in practice I have found that it is far more common to omit the <code>===</code> comparison.  I think that there are three reasons for that:</p>\n\n<ol>\n<li>It does not usually add to the meaning of the expression - that's in cases where the value is known to be boolean anyway.</li>\n<li>Because there is a great deal of type-uncertainty in JavaScript, forcing a type check tends to bite you when you get an unexpected <code>undefined</code> or <code>null</code> value.  Often you just want your test to fail in such cases.  (Though I try to balance this view with the \"fail fast\" motto).</li>\n<li>JavaScript programmers like to play fast-and-loose with types - especially in boolean expressions - because we can.</li>\n</ol>\n\n<p>Consider this example:</p>\n\n<pre><code>var someString = getInput();\nvar normalized = someString &amp;&amp; trim(someString);  \n// trim() removes leading and trailing whitespace\n\nif (normalized) {\n    submitInput(normalized);\n}\n</code></pre>\n\n<p>I think that this kind of code is not uncommon.  It handles cases where <code>getInput()</code> returns <code>undefined</code>, <code>null</code>, or an empty string.  Due to the two boolean evaluations <code>submitInput()</code> is only called if the given input is a string that contains non-whitespace characters.</p>\n\n<p>In JavaScript <code>&amp;&amp;</code> returns its first argument if it is falsy or its second argument if the first argument is truthy; so <code>normalized</code> will be <code>undefined</code> if <code>someString</code> was undefined and so forth.  That means that none of the inputs to the boolean expressions above are actually boolean values.</p>\n\n<p>I know that a lot of programmers who are accustomed to strong type-checking cringe when seeing code like this.  But note applying strong typing would likely require explicit checks for <code>null</code> or <code>undefined</code> values, which would clutter up the code.  In JavaScript that is not needed.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In the plain \"if\" the variable will be coerced to a Boolean and it uses toBoolean on the object:-</p>\n\n<pre><code>    Argument Type   Result\n\n    Undefined       false\n    Null            false\n    Boolean         The result equals the input argument (no conversion).\n    Number          The result is false if the argument is +0, \u22120, or NaN;\n                    otherwise the result is true.\n    String          The result is false if the argument is the empty \n                    String (its length is zero); otherwise the result is true.\n    Object          true.\n</code></pre>\n\n<p>But comparison with === does not have any type coercion, so they must be equal without coercion.</p>\n\n<p>If you are saying that the object may not even be a Boolean then you may have to consider more than just true/false.</p>\n\n<pre><code>if(x===true){\n...\n} else if(x===false){\n....\n} else {\n....\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Today I've gotten a remark about code considering the way I check whether a variable is true or false in a school assignment.</p>\n\n<p>The code which I had written was something like this:</p>\n\n<pre><code>var booleanValue = true;\n\nfunction someFunction(){\n    if(booleanValue === true){\n        return \"something\";\n    }\n}\n</code></pre>\n\n<p>They said it was better/neater to write it like this:</p>\n\n<pre><code>var booleanValue = true;\n\nfunction someFunction(){\n    if(booleanValue){\n        return \"something\";\n    }\n}\n</code></pre>\n\n<p>The remark which I have gotten about the \"=== true\" part was that it was not needed and could create confusion.</p>\n\n<p>However my idea is that it is better to check whether the variable is a boolean or not, especially since Javascript is a loosetyped language.</p>\n\n<p>In the second example a string would also return \"something\";</p>\n\n<p>So my question; Is it neater to loose the \"=== true\" part in the future, or is it good practise to check the type of the variable as well.</p>\n\n<p><strong>Edit:</strong>\nIn my \"real\" code the boolean represents whether an image has been deleted or not, so the only values boolValue should ever have is true or false.</p>\n\n<p>0 and 1 for example shouldn't be in that variable.</p>\n",
            "last_activity_date": 1425832748,
            "question_id": 15393935,
            "score": 16,
            "tags": [
                "javascript",
                "semantics"
            ],
            "title": "boolean in an if statement"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>In general, this is probably not a good idea. It's also (in general) bad practice to expose the model implementation to all of its callers, if for no other reason than refactoring becomes more difficult and onerous. We can easily solve both:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>myModule.factory( 'aModel', function () {\n  var myModel = { a: 10, b: 10 };\n\n  return {\n    get_a: function () { return myModel.a; },\n    get_b: function () { return myModel.a; },\n    get_c: function () { return myModel.a + myModel.b; }\n  };\n});\n</code></pre>\n\n<p>That's the best practice approach. It scales well, only gets called when it's needed, and doesn't pollute <code>$rootScope</code>.</p>\n\n<p>PS: You could also update <code>c</code> when either <code>a</code> or <code>b</code> is set to avoid the recalc in every call to <code>get_c</code>; which is best depends on your implementation details.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>From what I can see of your structure, having <code>a</code> and <code>b</code> as getters may not be a good idea but <code>c</code> should be a function...</p>\n\n<p>So I could suggest</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>myModule.factory( 'aModel', function () {\n  return {\n    a: 10,\n    b: 10,\n    c: function () { return this.a + this.b; }\n  };\n});\n</code></pre>\n\n<p>With this approach you cannot ofcourse 2 way bind <code>c</code> to an input variable.. But two way binding <code>c</code> does not make any sense either because if you set the value of <code>c</code>, how would you split up the value between <code>a</code> and <code>b</code>?</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I must admit, the first time I read your question and saw your example I thought to myself <em>\"this is just wrong\"</em>, however, after looking into it again I realized it wasn't so bad as I thought it would be. </p>\n\n<p>Let's face the facts, the <code>$rootScope</code> is there to be used, if you want to share anything application-wide, that's the perfect place to put it. Of course you will need to careful, it's something that's being shared between all the scopes so you don't want to inadvertently change it. But let's face it, that's not the real problem, you already have to be careful when using nested controllers (because child scopes inherit parent scope properties) and non-isolated scope directives. The 'problem' is already there and we shouldn't use it as an excuse not follow this approach.</p>\n\n<p>Using <code>$watch</code> also seems to be a good idea. It's something that the framework already provides you for free and does exactly what you need. So, why reinventing the wheel? The idea is basically the same as an 'change' event approach.</p>\n\n<p>On a performance level, your approach can be in fact 'heavy', however it will always depend on the frequency you update the <code>a</code> and <code>b</code> properties. For example, if you set <code>a</code> or <code>b</code> as the <code>ng-model</code> of an input box (like on your jsbin example), <code>c</code>  will be re-calculated every time the user types something... that's clearly over-processing. If you use a soft approach and update <code>a</code> and/or <code>b</code> solely when necessary, then you shouldn't have performance problems. It would be the same as re-calculate <code>c</code> using 'change' events or a setter&amp;getter approach. However, if you really need to re-calculate <code>c</code> on real-time (i.e: while the user is typing) the performance problem will always be there and is not the fact that you are using <code>$rootScope</code> or <code>$watch</code> that will help improve it.</p>\n\n<p>Resuming, <strong>in my opinion</strong>, your approach is not bad (at all!), just be careful with the <code>$rootScope</code> properties and avoid \u00b4real-time\u00b4 processing.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Although from a high level, I agree with the answer by bmleite ($rootScope exists to be used, and using $watch appears to work for your use case), I want to propose an alternative approach.</p>\n\n<p>Use <code>$rootScope.$broadcast</code> to push changes to a <code>$rootScope.$on</code> listener, which would then recalculate your <code>c</code> value. </p>\n\n<p>This could either be done manually - i.e. when you would be actively changing <code>a</code> or <code>b</code> values, or possibly even on a short timeout to throttle the frequency of the updates. A step further from that would be to create a 'dirty' flag on your service, so that <code>c</code> is only calculated when required.</p>\n\n<p>Obviously such an approach means a lot more involvement in recalculation in your controllers, directives etc - but if you don't want to bind an update to every possible change of <code>a</code> or <code>b</code>, the issue becomes a matter of 'where to draw the line'.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I realize this is a year and a half later, but since I've recently had the same decision to make, I thought I'd offer an alternative answer that \"worked for me\" without polluting <code>$rootScope</code> with any new values. </p>\n\n<p>It does, however still <em>rely</em> on <code>$rootScope</code>. Rather than broadcasting messages, however, it simply calls <code>$rootScope.$digest</code>. </p>\n\n<p>The basic approach is to provide a single complex model object as a field on your angular service. You can provide more than as you see fit, just follow the same basic approach, and make sure each field hosts a complex object whose reference doesn't change, i.e. don't re-assign the field with a new complex object. Instead, only modify the fields of this model object. </p>\n\n<pre><code>var myModule = angular.module('myModule', []);\n\n//A service providing a model available to multiple controllers\nmyModule.service('aModel', function($rootScope, $timeout) {\n  var myModel = {\n    a: 10,\n    b: 10,\n    c: null\n  };\n\n  //compute c from a and b\n  calcC = function() {\n    myModel.c = parseInt(myModel.a, 10) * parseInt(myModel.b, 10);\n  };\n  calcC();\n\n  this.myModel = myModel;\n\n  // simulate an asynchronous method that frequently changes the value of myModel. Note that\n  // not appending false to the end of the $timeout would simply call $digest on $rootScope anyway\n  // but we want to explicitly not do this for the example, since most asynchronous processes wouldn't \n  // be operating in the context of a $digest or $apply call. \n  var delay = 2000; // 2 second delay\n  var func = function() {\n    myModel.a = myModel.a + 10;\n    myModel.b = myModel.b + 5;\n    calcC();\n    $rootScope.$digest();\n    $timeout(func, delay, false);\n  };\n  $timeout(func, delay, false);\n});\n</code></pre>\n\n<p>Controllers that wish to depend on the service's model are then free to inject the model into their scope. For example:</p>\n\n<pre><code>$scope.theServiceModel = aModel.myModel;\n</code></pre>\n\n<p>And bind directly to the fields:</p>\n\n<pre><code>&lt;div&gt;A: {{theServiceModel.a}}&lt;/div&gt;\n&lt;div&gt;B: {{theServiceModel.b}}&lt;/div&gt;\n&lt;div&gt;C: {{theServiceModel.c}}&lt;/div&gt;\n</code></pre>\n\n<p>And everything will automatically update whenever the values update within the service. </p>\n\n<p>Note that this will only work if you inject types that inherit from Object (e.g. array, custom objects) directly into the scope. If you inject primitive values like string or number directly into scope (e.g. <code>$scope.a = aModel.myModel.a</code>) you will get a copy put into scope and will thus never receive a new value on update. Typically, best practice is to just inject the whole model object into the scope, as I did in my example. </p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>In angular, I have an object that will be exposed across my application via a service.</p>\n\n<p>Some of the fields on that object are dynamic, and will be updated as normal by bindings in the controllers that use the service. But some of the fields are computed properties, that depend on the other fields, and need to be dynamically updated.</p>\n\n<p>Here's a simple example (which is working on jsbin here: <a href=\"http://jsbin.com/erudis/21/edit\">http://jsbin.com/erudis/21/edit</a>). My service model exposes fields <code>a</code>, <code>b</code> and <code>c</code> where <code>c</code> is calculated from <code>a + B</code> in <code>calcC()</code>. Note, in my real application the calculations are a lot more complex, but the essence is here.</p>\n\n<p>The only way I can think to get this to work, is to bind my service model to the $rootScope, and then use $rootScope.$watch to watch for any of the controllers changing <code>a</code> or <code>b</code> and when they do, recalculating <code>c</code>. But that seems ugly. <strong>Is there a better way of doing this?</strong></p>\n\n<hr>\n\n<p>A second concern is performance. In my full application <code>a</code> and <code>b</code> are big lists of objects, which get aggregated down to <code>c</code>. This means that the $rootScope.$watch functions will be doing a lot of deep array checking, which sounds like it will hurt performance.</p>\n\n<p>I have this all working with an evented approach in BackBone, which cuts down the recalculation as much as possible, but angular doesn't seem to play well with an evented approach. <strong>Any thoughts on that would be great too.</strong></p>\n\n<hr>\n\n<p>Here's the example application.</p>\n\n<pre><code>var myModule = angular.module('myModule', []);\n\n//A service providing a model available to multiple controllers\nmyModule.factory('aModel', function($rootScope) {\n  var myModel = {\n    a: 10,\n    b: 10,\n    c: null\n  };\n\n  //compute c from a and b\n  calcC = function() {\n    myModel.c = parseInt(myModel.a, 10) * parseInt(myModel.b, 10);\n  };\n\n  $rootScope.myModel = myModel;\n  $rootScope.$watch('myModel.a', calcC);\n  $rootScope.$watch('myModel.b', calcC);\n\n  return myModel;\n});\n\n\nmyModule.controller('oneCtrl', function($scope, aModel) {\n  $scope.aModel = aModel;\n});\n\nmyModule.controller('twoCtrl', function($scope, aModel) {\n  $scope.anotherModel = aModel;\n});\n</code></pre>\n",
            "last_activity_date": 1401723341,
            "question_id": 14573023,
            "score": 16,
            "tags": [
                "javascript",
                "angularjs"
            ],
            "title": "Is binding objects to angular&#39;s $rootScope in a service bad?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Use a regex:</p>\n\n<pre><code>if (/^(?:[a-z]+:)?\\/\\//i.test(url))\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<pre><code>var pat = /^https?:\\/\\//i;\nif (pat.test(urlString))\n{\n    //do stuff\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 7
                },
                {
                    "body": "<pre><code>var adress = 'http://roflmao.com';\nif (adress.substr(0,7) == 'http://' || adress.substr(0,8) == 'https://') {\n    //\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>var external = RegExp('^(https?:)?//');\nif(external.test(el)){\n    // do something\n}\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>With the next regular expression, you can even check if the link goes to the same domain or to an external one:</p>\n\n<pre><code>var external = RegExp('^((f|ht)tps?:)?//(?!' + location.host + ')');\nif(external.test(el)){\n    // do something\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Nowdays, when a lot of services use <a href=\"http://stackoverflow.com/questions/4831741/can-i-change-all-my-http-links-to-just\">protocol-relative URL</a> (eg. <em>//cdn.example.com/libary.js</em>), this method is more safer:</p>\n\n<pre><code>var isAbsolute = new RegExp('^([a-z]+://|//)');\n\nif (isAbsolute.test(urlString)) {\n  // go crazy here\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h2>FAST</h2>\n\n<p>If you only need to test for <code>http://</code> or <code>https://</code> then the <em>most efficient</em> way is:</p>\n\n<pre><code>if (urlString.indexOf('http://') === 0 || urlString.indexOf('https://') === 0)\n</code></pre>\n\n<hr>\n\n<h2>UNIVERSAL</h2>\n\n<p>However, I would suggest a <em>more universal, non case-sensitive, protocol-agnostic</em> approach:</p>\n\n<pre><code>var r = new RegExp('^(?:[a-z]+:)?//', 'i');\nr.test('http://example.com'); // true - regular http absolute URL\nr.test('HTTP://EXAMPLE.COM'); // true - HTTP upper-case absolute URL\nr.test('https://www.exmaple.com'); // true - secure http absolute URL\nr.test('ftp://example.com/file.txt'); // true - file transfer absolute URL\nr.test('//cdn.example.com/lib.js'); // true - protocol-relative absolute URL\nr.test('/myfolder/test.txt'); // false - relative URL\nr.test('test'); // false - also relative URL\n</code></pre>\n\n<hr>\n\n<h3>Explain the RegExp</h3>\n\n<pre><code>^(?:[a-z]+:)?//\n</code></pre>\n\n<p><code>^</code> - beginning of the string<br>\n<code>(?:</code> - beginning of a non-captured group<br>\n<code>[a-z]+</code> - any character of 'a' to 'z' 1 or more times<br>\n<code>:</code> - string (colon character)<br>\n<code>)?</code> - end of the non-captured group. Group appearing 0 or 1 times<br>\n<code>//</code> - string (two forward slash characters)<br>\n<code>'i'</code> - non case-sensitive flag</p>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>Don't use low-level stuff like regexp etc. These things have been solved by so many other people. Especially the edge cases.</p>\n\n<p>Have a look at <a href=\"http://medialize.github.io/URI.js/\" rel=\"nofollow\">URI.js</a>, it should do the job: <a href=\"http://medialize.github.io/URI.js/docs.html#is\" rel=\"nofollow\">http://medialize.github.io/URI.js/docs.html#is</a></p>\n\n<pre><code>var uri = new URI(\"http://example.org/\");\nuri.is(\"absolute\") === true;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How can I test a URL if it is a relative or absolute path in Javascript or jQuery? I want to handle accordingly depending if the passed in URL is a local or external path.</p>\n\n<pre><code>if (urlString starts with http:// or https://)\n //do this\n</code></pre>\n",
            "last_activity_date": 1392390822,
            "question_id": 10687099,
            "score": 16,
            "tags": [
                "javascript",
                "jquery",
                "string",
                "url"
            ],
            "title": "How to test if a URL string is absolute or relative?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>To make something like <a href=\"http://www.quirksmode.org/js/associative.html\">associative array in JavaScript</a> you have to use objects.</p>\n\n<pre><code>var arr = {}; // {} will create an object\nvar name = \"name\";\nvar val = 2;\narr[name]  = val;\nconsole.log(arr);\u200b\n</code></pre>\n\n<p><strong>DEMO:</strong> <a href=\"http://jsfiddle.net/bz8pK/1/\">http://jsfiddle.net/bz8pK/1/</a></p>\n",
                    "is_accepted": true,
                    "score": 35
                },
                {
                    "body": "<p>JavaScript doesn't have associate arrays. You need to use Objects instead:</p>\n\n<pre><code>var obj = {};\nvar name = \"name\";\nvar val = 2;\nobj[name] = val;\nconsole.log(obj);\u200b\n</code></pre>\n\n<p>To get value you can use now different ways:</p>\n\n<pre><code>console.log(obj.name);\u200b\nconsole.log(obj[name]);\u200b\nconsole.log(obj[\"name\"]);\u200b\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>Please correct this code:</p>\n\n<pre><code>var arr = [];    \nvar name = \"name\";\nvar val = 2;\narr.push(val); //works , but not associative\narr[name]  = val; //does not work\nconsole.log(arr);\u200b\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/bz8pK/\">jsfiddle</a></p>\n",
            "last_activity_date": 1336734459,
            "question_id": 10550158,
            "score": 16,
            "tags": [
                "javascript"
            ],
            "title": "how to push associative item into array in javascript?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>IE's XDomainRequest does not allow custom headers to be set. See item #3 here: <a href=\"http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx\" rel=\"nofollow\">http://blogs.msdn.com/b/ieinternals/archive/2010/05/13/xdomainrequest-restrictions-limitations-and-workarounds.aspx</a>  The XDomainRequest object is locked down to the point where it is difficult to make authenticated requests.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is what we did for IE.</p>\n\n<p>If you have control over the target domain, host a (static) html file there. Include the html using the iframe.</p>\n\n<p>Now this iframe does actually have access to the local domain, so you can communicate between the parent and child frame to get what you need.</p>\n\n<p>This worked <em>much</em> better than XDomainRequest for us.</p>\n\n<p><a href=\"https://developer.mozilla.org/en/DOM/window.postMessage\">window.postMessage</a> is the best way to setup the communication:</p>\n\n<p>But I'm pretty sure that only started working since IE8. If you require older browsers as well, you must use a different hack.</p>\n\n<p>In our case, this was our 3-layer system:</p>\n\n<ol>\n<li>CORS, for browsers that support it</li>\n<li>An iframe &amp; window.postMessage as a primary fallback</li>\n<li>A server-side proxy script as the secondary fallback</li>\n</ol>\n\n<p>All of these options work well, are reliable and didn't feel too much like a hack. The secondary fallback was barely ever used.</p>\n\n<p>Keep in mind that the 'Authentication' header specifically is special, and I would not be shocked that that's blocked under certain circumstances anyway. We added a custom header 'X-Authenticate' as it did pass through all the time. </p>\n",
                    "is_accepted": true,
                    "score": 11
                }
            ],
            "body": "<p>Since jQuery ajax ist not working for CORS/IE, I'm using <code>XDomainRequest</code> to retreive data from another Server. Work's fine, but I would like to send some header ('Authentification', 'content-type').</p>\n\n<p>Is there a chance to add/change header in XDomainRequest?</p>\n\n<p>Or does someone know a workaround?</p>\n",
            "last_activity_date": 1331663199,
            "question_id": 9652364,
            "score": 16,
            "tags": [
                "javascript",
                "jquery",
                "internet-explorer",
                "cors",
                "xdomainrequest"
            ],
            "title": "cross-origin header in IE8/IE9"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>One way:</p>\n\n<pre><code>var lastPart = url.split(\"/\").pop();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 45
                },
                {
                    "body": "<p>Check out the split method, it does what you want: <a href=\"http://www.w3schools.com/jsref/jsref_split.asp\" rel=\"nofollow\">http://www.w3schools.com/jsref/jsref_split.asp</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Assuming there is no trailing slash, you could get it like this:</p>\n\n<pre><code>var url = \"http://www.mysite.com/category/action\";\nvar parts = url.split(\"/\");\nalert(parts[parts.length-1]);\n</code></pre>\n\n<p>However, if there <strong>can</strong> be a trailing slash, you could use the following:</p>\n\n<pre><code>var url = \"http://www.mysite.com/category/action/\";\nvar parts = url.split(\"/\");\nif (parts[parts.length-1].length==0){\n alert(parts[parts.length-2]);\n}else{\n  alert(parts[parts.length-1]);  \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>str.substring(str.lastIndexOf(\"/\") + 1)\n</code></pre>\n\n<p>Though if your URL could contain a query or fragment, you might want to do</p>\n\n<pre><code>var end = str.lastIndexOf(\"#\");\nif (end &gt;= 0) { str = str.substring(0, end); }\nend = str.lastIndexOf(\"?\");\nif (end &gt;= 0) { str = str.substring(0, end); }\n</code></pre>\n\n<p>first to make sure you have a URL with the path at the end.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Well, the first thing I can think of is using the <code>split</code> function.</p>\n\n<pre><code>string.split(separator, limit)\n</code></pre>\n\n<p>Since everyone suggested the split function, a second way wood be this:</p>\n\n<pre><code>var c = \"http://www.example.com/category/action\";\nvar l = c.match(/\\w+/g)\nalert(l)\n</code></pre>\n\n<p>The regexp is just a stub to get the idea. Basically you get every words in the url.</p>\n\n<p>l = http,www,example,com,category,action</p>\n\n<p>get the last one.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Or the regex way:</p>\n\n<pre><code>var lastPart = url.replace(/.*\\//, \"\"); //tested in FF 3\n</code></pre>\n\n<p>OR</p>\n\n<pre><code>var lastPart = url.match(/[^/]*$/)[0]; //tested in FF 3\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>My url will look like this:</p>\n\n<p><a href=\"http://www.example.com/category/action\">http://www.example.com/category/action</a></p>\n\n<p>How can I get the word \"action\". This last part of the url (after the last forward slash \"/\") will be different each time. So whether its \"action\" or \"adventure\", etc. how can I always get the word after the last closing forward slash?</p>\n",
            "last_activity_date": 1306633995,
            "question_id": 6165381,
            "score": 16,
            "tags": [
                "javascript"
            ],
            "title": "How to get the last part of a string in JavaScript?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>If the caret (the cursor) is somewhere in the text field, it registers in Javascript as an empty selection. That is, the selectionStart and selectionEnd attributes are the same. You can use those attributes to detect the position of the caret.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Apparently selectionStart and selectionEnd are quite useful here. Check this out: \n<a href=\"http://www.scottklarr.com/topic/425/how-to-insert-text-into-a-textarea-where-the-cursor-is/\" rel=\"nofollow\">http://www.scottklarr.com/topic/425/how-to-insert-text-into-a-textarea-where-the-cursor-is/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use the <a href=\"http://plugins.jquery.com/project/jCaret\" rel=\"nofollow\">jQuery Caret plugin</a> to get/set the cursor position .<br>\nExample usage:</p>\n\n<pre><code>var cursorPosition = $(\"#textbox\").caret().start);\n</code></pre>\n\n<p>You could 'store' this position like this:</p>\n\n<pre><code>$(\"#textbox\").focusout(function(){\n   var cursorPosition = $(this).caret().start);\n   $(this).data(\"lastCursorPos\", cursorPosition);\n});\n</code></pre>\n\n<p>To retrieve it (on your div click event), do this:</p>\n\n<pre><code>var lastCursorPosition = $(\"#textbox\").data(\"lastCursorPos\");\n</code></pre>\n\n<p>Hope this helps. Cheers</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a working example of what you are trying to do check it out at:\n<a href=\"http://jsfiddle.net/J5Z2n/1/\" rel=\"nofollow\">http://jsfiddle.net/J5Z2n/1/</a></p>\n\n<pre>\nHello there my good friend....\nhow do you do\n</pre>\n\n<p>the jQuery:</p>\n\n<pre>\nfunction insertAt (myField, myValue, startSel, endSel) {\n    if (startSel || startSel == '0') {\n        var startPos = startSel;\n\n        var endPos = endSel;\n\n        myField.val(myField.val().substring(0, startPos)+ myValue+ myField.val().substring(endPos, myField.val().length));\n\n  } \n  else {\n\n      myField.val() += myValue;\n\n  }\n}\n\n// calling the function\nvar targetBox = $('textarea#insert'),\n    startSel, \n    endSel;\ntargetBox.bind('focusout', function() {\n    //insertAtCursor(this, 'how do you do');\n    startSel = this.selectionStart;\n    endSel = this.selectionEnd;\n});\n\n    $(\"#myvalue\").click(function() {\n        var myValue = $(this).text();\n        insertAt(targetBox, myValue, startSel, endSel);\n\n    });    \n</pre>\n\n<p>The original function was borrowed from this post\n<a href=\"http://alexking.org/blog/2003/06/02/inserting-at-the-cursor-using-javascript\" rel=\"nofollow\">http://alexking.org/blog/2003/06/02/inserting-at-the-cursor-using-javascript</a></p>\n\n<p>That should give you a solid head start I hope. Cheers</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've written a cross-browser jQuery plug-in for dealing with the caret/selection in textareas and text inputs called <a href=\"http://code.google.com/p/rangyinputs/\">Rangy inputs</a> (terrible name, I really should think of a better one). A combination of methods from this and the techniques in <a href=\"http://stackoverflow.com/questions/5889127/insert-value-into-textarea-where-cursor-was/5889281#5889281\">Edgar Villegas Alvarado's answer</a> should do the trick, although in IE, the <code>focusout</code> event fires too late and you'll need to use the proprietary <code>beforedeactivate</code> event instead:</p>\n\n<pre><code>var $textBox = $(\"#foo\");\n\nfunction saveSelection(){\n    $textBox.data(\"lastSelection\", $textBox.getSelection());\n}\n\n$textBox.focusout(saveSelection);\n\n$textBox.bind(\"beforedeactivate\", function() {\n    saveSelection();\n    $textBox.unbind(\"focusout\");\n});\n</code></pre>\n\n<p>When inserting text later, the following will insert text at the previous cursor position (or overwrite the previously selected text, if the user had selected any):</p>\n\n<pre><code>var selection = $textBox.data(\"lastSelection\");\n$textBox.focus();\n$textBox.setSelection(selection.start, selection.end);\n$textBox.replaceSelectedText(\"Some new text\");\n</code></pre>\n\n<p>See jsFiddle example here: <a href=\"http://jsfiddle.net/rQXrJ/1/\">http://jsfiddle.net/rQXrJ/1/</a></p>\n",
                    "is_accepted": true,
                    "score": 15
                }
            ],
            "body": "<p>I have a textarea and a div with values. When I click on a value I insert it into textarea. I need it to be inserted where my cursor was in textarea. Why do I say WAS? Because when I move it out and click on a value to insert, I assume it looses focus in the text area. </p>\n\n<p>So, my question is, is there a way to \"remember\" the latest cursor position within textarea and then insert my values at that position?</p>\n\n<p>Perhaps it could be a char number in a string?.. Currently I add it like this: </p>\n\n<pre><code>input.val( function( i, val ) { return val + \" \" + myInsert + \" \"; } );\n</code></pre>\n\n<p>Also I use jQuery, perhaps I could use it?</p>\n",
            "last_activity_date": 1304613107,
            "question_id": 5889127,
            "score": 16,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Insert value into TEXTAREA where cursor was"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>For what you're trying to do (sets of objects), there is no native Javascript implementation. You would have to implement this on your own. One way to do this would be to implement a hashing function for your objects. The backing data-type of the set would be an associative array, where the key of the array is the value you get from calling the object's hash function, and the value of the array is the object itself.</p>\n\n<p>Of course, this doesn't address the issue that you highlighted, so you will need to take equality into account as well (implement an equals function perhaps)?</p>\n\n<p>Instead of making the hash function a property of the object itself, you can have a standalone hash function that takes in an object as input and generates a hash value (presumably by iterating over its properties).</p>\n\n<p>Using this method you should be able to get <code>O(1)</code> for insertion, searching, and removing (not counting the order of the hash function, which shouldn't be any worse than <code>O(n)</code>, especially if you are iterating over its properties to create your hashed value).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It's not possible for all objects, but if your object has a <code>.toString()</code> method implemented, it is:</p>\n\n<pre><code>var x = {toString: function(){ return 'foo'; }};\nvar y = {toString: function(){ return 'bar'; }};\nvar obj = {};\nobj[x] = 'X';\nobj[y] = 'Y';\nconsole.log(obj);\n// { foo: 'X', bar: 'Y' }\n</code></pre>\n\n<p>If you want to make this easier, make it a class:</p>\n\n<pre><code>function myObj(name){\n   this.name = name;\n}\nmyObj.prototype.toString = function(){ return this.name; }\n\nvar obj = {};\nobj[new myObj('foo')] = 'X';\nobj[new myObj('bar')] = 'Y';\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 4
                },
                {
                    "body": "<p>Just typed this up, it's only briefly tested:</p>\n\n<pre><code>var Set = function Set()\n{\n    var list = [];\n\n    var contains;\n    this.contains = contains = function(x) {\n        return list.indexOf(x) &gt;= 0;\n    }\n\n    var put;\n    this.put = put = function(x) {\n        if (!contains(x))\n            list.push(x);\n\n        return this;\n    }\n\n    var remove;\n    this.remove = remove = function(x)\n    {\n        var idx = list.indexOf(x);\n        if (idx &gt;= 0)\n            list.splice(idx,1);\n\n        return this;\n    }\n\n    var all;\n    this.all = all = function()\n    {\n        return list.concat();\n    }\n\n    return this;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>ES6 provides a native <code>Map</code>:</p>\n\n<pre><code>let m = new Map();\nlet a = {};\nlet b = {};\n\nm.set(a, b);\nm.set(b, 10);\n\nm.get(m.get(a))  // 10\n</code></pre>\n\n<p>Here's one I have from a long time ago that is about as close to natural structure as you can get:</p>\n\n<pre><code>function map() {\n    var keys = [];\n    var values = [];\n\n    function get(key) {\n        var i = keys.indexOf(key);\n        return i === -1 ? null : values[i];\n    }\n\n    get.set = function set(key, value) {\n        var i = keys.indexOf(key);\n\n        if (i === -1) {\n            keys.push(key);\n            values.push(value);\n        } else {\n            values[i] = value;\n        }\n    };\n\n    return get;\n}\n</code></pre>\n\n<p>Use it like so:</p>\n\n<pre><code>var m = map();\nvar a = {};\nvar b = {};\n\nm.set(a, b);\nm.set(b, 10);\n\nm(m(a));  // 10\n</code></pre>\n\n<p>To remove a value, just use <code>x.set(whateverKey, null)</code> because it returns null when the key is not found so there is no difference.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I'm answering my own question, but I came up with an alternative solution I thought was interesting and thought it would be useful to share it.</p>\n\n<p>cwolves' answer gave me an idea.  Providing an object's <code>toString()</code> method uniquely identifies the instance, properties of an object can be used to store a set of objects.  Essentially, to store object <code>x</code>, you can use <code>items[x.toString()] = x;</code>.  Note that the value is the object itself, so then the set of objects can be extracted by looking at all <code>item</code>'s properties and dumping all the values in to an array.</p>\n\n<p>Here's the class, which I call <code>ObjectSet</code>, in full.  It requires objects are uniquely identified by their <code>toString()</code> method, which is OK for my purposes.  <code>add</code>, <code>remove</code> and <code>contains</code> should all run in better than O(n) time - whatever javascript's property access efficiency is, which hopefully is either O(1) or O(n log n).</p>\n\n<pre><code>// Set of objects.  Requires a .toString() overload to distinguish objects.\nvar ObjectSet = function ()\n{\n    this.items = {};\n    this.item_count = 0;\n};\n\nObjectSet.prototype.contains = function (x)\n{\n    return this.items.hasOwnProperty(x.toString());\n};\n\nObjectSet.prototype.add = function (x)\n{\n    if (!this.contains(x))\n    {\n        this.items[x.toString()] = x;\n        this.item_count++;\n    }\n\n    return this;\n};\n\nObjectSet.prototype.remove = function (x)\n{\n    if (this.contains(x))\n    {\n        delete this.items[x.toString()];\n        this.item_count--;\n    }\n\n    return this;\n};\n\nObjectSet.prototype.clear = function ()\n{\n    this.items = {};\n    this.item_count = 0;\n\n    return this;\n};\n\nObjectSet.prototype.isEmpty = function ()\n{\n    return this.item_count === 0;\n};\n\nObjectSet.prototype.count = function ()\n{\n    return this.item_count;\n};\n\nObjectSet.prototype.values = function ()\n{\n    var i, ret = [];\n\n    for (i in this.items)\n    {\n        if (this.items.hasOwnProperty(i))\n            ret.push(this.items[i]);\n    }\n\n    return ret;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's a mad suggestion ... key it on the result of <code>JSON.stringify(object)</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It seems that the inner call of function works when prefixed with <em>this</em>. \nExemple:</p>\n\n<pre><code>var put;\nthis.put = put = function(x) {\n    if (!this.contains(x))\n        list.push(x);\n\n    return this;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>ECMAScript6 <code>Set</code> should behave like that:</p>\n\n<ul>\n<li>Official wiki ES6 approved features section: <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets\" rel=\"nofollow\">http://wiki.ecmascript.org/doku.php?id=harmony:simple_maps_and_sets</a></li>\n<li>Unofficial ES6 cheat sheet: <a href=\"https://github.com/lukehoban/es6features#map--set--weakmap--weakset\" rel=\"nofollow\">https://github.com/lukehoban/es6features#map--set--weakmap--weakset</a></li>\n</ul>\n\n<p>Working example on Firefox 32 (but not implemented in Chromium 37):</p>\n\n<pre><code>if (Set) {\n  var s = new Set()\n  var a = {}\n  var b = {}\n  var c = {}\n  s.add(a)\n  s.add(b)\n  s.add(b)\n  assert(s.size === 2)\n  assert(s.has(a))\n  assert(s.has(b))\n  assert(!s.has(c))\n}\n</code></pre>\n\n<p>This is not surprising since <code>{} != {}</code>: equality compares object addresses by default.</p>\n\n<p>A module that implements it for browsers without support: <a href=\"https://github.com/medikoo/es6-set\" rel=\"nofollow\">https://github.com/medikoo/es6-set</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'd like to have a set of objects in Javascript.  That is, a data structure that contains only unique objects.</p>\n\n<p>Normally using properties is recommended, e.g. <code>myset[\"key\"] = true</code>.  However, I need the keys to be objects.  I've read that Javascript casts property names to strings, so I guess I can't use <code>myset[myobject] = true</code>.</p>\n\n<p>I could use an array, but I need something better than O(n) performance for adding, finding and removing items.</p>\n\n<p>It needs to be able to tell objects apart by reference only, so given:</p>\n\n<pre><code>var a = {};\nvar b = {};\n</code></pre>\n\n<p>then both <code>a</code> and <code>b</code> should be able to be added, because they're separate objects.</p>\n\n<p>Basically, I'm after something like C++'s <code>std::set</code>, that can store Javascript objects.  Any ideas?</p>\n",
            "last_activity_date": 1423760359,
            "question_id": 5657219,
            "score": 16,
            "tags": [
                "javascript",
                "object",
                "data-structures",
                "set"
            ],
            "title": "Set of objects in javascript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p><code>$(window).load(myfunc)</code> is what you're looking for. If you're working with the load event of an iframe, you can replace <code>window</code> with the iframe element/selector.</p>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>Try <code>load()</code>:</p>\n\n<pre><code>jQuery(document).load(myfunc)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>From the jQuery API on the <a href=\"http://api.jquery.com/ready/\" rel=\"nofollow\">ready</a> handler:</p>\n\n<blockquote>\n  <p>The .ready() method is generally\n  incompatible with the &lt;body onload=\"\"&gt;\n  attribute. If load must be used,\n  either do not use .ready() or use\n  jQuery's .load() method to attach load\n  event handlers to the window or to\n  more specific items, like images.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This works as well:</p>\n\n<pre><code>$(window).load(function(){\n    // ..\n    myfunc();\n    // ..\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I have tried below code. Its working fine.</p>\n\n<pre><code>window.onunload = window.onbeforeunload = function () {\n  if (window.isAlreadyUnloaded) return;\n   window.isAlreadyUnloaded = true;\n  \"Do your action here\"\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is it allowed to use <code>&lt;body onLoad=\"myfunc()\"&gt;</code> along with jQuery's <code>document.ready()</code> handlers?\nI can't find a way to achieve the same functionality of the <code>&lt;body onLoad&gt;</code> with jQuery.</p>\n\n<p>An example of a use case would be a facebook application. An Iframe facebook app requires the use of the <code>FB.Canvas.setSize</code> function which resize the iframe. I would need to fire it up only when all elements on the page are finished loaded.</p>\n\n<p>Thanks!</p>\n\n<p>Joel</p>\n",
            "last_activity_date": 1351471321,
            "question_id": 4638296,
            "score": 16,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "jQuery equivalent of body onLoad"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The \"keypress\" event is (in its original IE form, and in Safari/Chrome) about an actual character being added to a text field.  The backspace key clearly does not add a new character to the field value, so it causes no keypress event.</p>\n\n<p>Firefox and Opera are a little more willy-nilly about generating typing events.</p>\n\n<p>PPK (<a href=\"http://quirksmode.org\">quirksmode</a>) <a href=\"http://www.quirksmode.org/dom/events/keys.html\">considers the IE and Webkit behaviors to be the sensible ones</a>, and I pretty much agree. </p>\n",
                    "is_accepted": true,
                    "score": 16
                },
                {
                    "body": "<p>Try using <code>keydown</code>and <code>keyup</code>functions instead for IE.  </p>\n\n<p><a href=\"http://stackoverflow.com/questions/4084715/javascript-e-keycode-doesnt-catch-backspace-del-in-ie\">Javascript e.keyCode doesn't catch Backspace/Del in IE</a></p>\n",
                    "is_accepted": false,
                    "score": 15
                }
            ],
            "body": "<p>Why isn't backspace being detected using jquery keypress event?</p>\n\n<pre><code>$(\"#field\").keypress(function(event){alert(event.which);});\n</code></pre>\n",
            "last_activity_date": 1292097059,
            "question_id": 4418562,
            "score": 16,
            "tags": [
                "javascript",
                "jquery",
                "javascript-events"
            ],
            "title": "Why isn&#39;t backspace being detected using jquery keypress event?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>As far as I know, there's not. And I do this all the time for converting dates to the XML dateTime format.</p>\n\n<p>It's also important to note that those methods you list return a number, not a string.</p>\n\n<p>You can, of course, add these yourself by modifying <code>Date.prototype</code>.</p>\n\n<pre><code>Date.prototype.getHoursTwoDigits = function()\n{\n    var retval = this.getHours();\n    if (retval &lt; 10)\n    {\n        return (\"0\" + retval.toString());\n    }\n    else\n    {\n        return retval.toString();\n    }\n}\n\nvar date = new Date();\ndate.getHoursTwoDigits();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 19
                },
                {
                    "body": "<p>Similar to @jdmichal's solution, posting because I'd prefer something a little shorter:</p>\n\n<pre><code>function pad(n) { return (\"0\" + n).slice(-2); }\n\npad(6); // -&gt; \"06\"\npad(12); // -&gt; \"12\"\n</code></pre>\n\n<p>Rather than add individual methods to <code>Date.prototype</code>, you could just add this method to <code>Number.prototype</code>:</p>\n\n<pre><code>Number.prototype.pad = function (len) {\n    return (new Array(len+1).join(\"0\") + this).slice(-len);\n}\n\n// Now .pad() is callable on any number, including those returned by\nvar time = date.getHours().pad(2) + \":\"\n         + date.getMinutes().pad(2) + \":\"\n         + date.getSeconds().pad(2);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<pre><code>function pad2(number) {\n\n     return (number &lt; 10 ? '0' : '') + number\n\n}\n\ndocument.write(pad2(2) + '&lt;br /&gt;');\ndocument.write(pad2(10) + '&lt;br /&gt;');\n</code></pre>\n\n<p>OUTPUT:</p>\n\n<p>02</p>\n\n<p>10</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>Looking for a creative way to be sure values that come from the getHours, getMinutes, and getSeconds() method for the javascript Date object return <code>\"06\"</code> instead of <code>6</code> (for example). Are there any parameters that I don't know about? Obviously I could write a function that does it by checking the length and prepending a <code>\"0\"</code> if need be, but I thought there might be something more streamlined than that.</p>\n\n<p>Thanks.</p>\n",
            "last_activity_date": 1367571698,
            "question_id": 3313875,
            "score": 16,
            "tags": [
                "javascript",
                "date"
            ],
            "title": "Javascript Date: Ensure getMinutes(), getHours(), getSeconds() puts 0 in front if necessary"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Problem in this ajax library. </p>\n\n<p><code>XHR.setRequestHeader()</code> must be called after <code>XHR.open()</code>.</p>\n\n<pre><code>// @method XRequest: Object constructor. As this implements a singleton, the object can't be created calling the constructor, GetInstance should be called instead\nfunction XRequest()\n{\n    this.XHR = XRequest.CreateXHR();\n}\n\nXRequest.instance = null;\n\n\n// @method static GetInstance: Creates a singleton object of type XRequest. Should be called whenever an object of that type is required.\n// @return: an instance of a XRequest object\nXRequest.GetInstance = function()\n{\n    if(XRequest.instance == null)\n    {\n        XRequest.instance = new XRequest();\n    }\n\n    return XRequest.instance;\n}\n\n// @method static CreateXHR: Implments a basic factory method for creating a XMLHttpRequest object\n// @return: XMLHttp object or null\nXRequest.CreateXHR = function()\n{\n    var xhr = null;\n    var factory = [\n                    function() { return new XMLHttpRequest(); },\n                    function() { return new ActiveXObject(\"Msxml2.XMLHTTP\"); },\n                    function() { return new ActiveXObject(\"Microsoft.XMLHTTP\"); }\n                ];\n\n    for(var i = 0; i &lt; factory.length; ++i)\n    {\n        var f = factory[i];\n        xhr = f();\n        if(xhr)\n            return xhr;\n    }\n\n    return null;\n}\n\nXRequest.prototype.SetRequestHeader = function(name, value)\n{\n    if(this.XHR)\n    {\n        //alert(name+'|||'+value);\n        this.XHR.setRequestHeader(name, value);\n    }\n}\n\nXRequest.prototype.SendRequest = function(args)\n{\n    var async = true;\n    var type = \"\";\n    var url = \"\";\n    var username = \"\";\n    var password = \"\";\n    var body = null;\n    var success = null; \n    var failure = null;\n\n    for(e in args)\n    {\n        switch(e)\n        {\n            case \"async\":\n                async = args[e];\n                break;\n\n            case \"type\":\n                type = args[e];\n                break;\n\n            case \"success\":\n                success = args[e];\n                break;\n            case \"failure\":\n                failure = args[e];\n                break;\n\n            case \"url\":\n                url = args[e];\n                break;\n\n            case \"username\":\n                username = args[e];\n                break;\n\n            case \"password\":\n                password = args[e];\n                break;\n\n            case \"body\":\n                body = args[e];\n                break;\n        }\n    }\n\n    var that = this;\n    this.XHR.onreadystatechange = function()\n        {\n            alert(\"readyState == \" + that.XHR.readyState + \"  status == \" + that.XHR.status);\n            if(that.XHR.readyState == 4)\n            {\n                if(that.XHR.status == 200 || that.XHR.status == 0)\n                {\n                    if(success)\n                        success(that.XHR);\n                }\n                else\n                {\n                    if(failure)\n                        failure();\n                }\n            }\n        };\n\n    this.XHR.open(type, url, async, username, password);\n    for(e in args)\n    {\n        switch(e)\n        {\n            case \"setHeader\":\n                var h = args[e].split(\":\");             \n                if(h.length == 2)\n                {\n                    this.SetRequestHeader(h[0], h[1]);\n                }\n                break;\n        }\n    }\n    this.XHR.send(body);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>Regardless, you can simplify your <code>SendRequest</code> method by creating a mixin instead of using a giant <code>switch</code>. </p>\n\n<pre><code>XRequest.prototype.SendRequest = function(params) {\n    var defaultParams = {\n        async:    true,\n        type:     \"\",\n        url:      \"\",\n        username: \"\",\n        password: \"\",\n        body:     null,\n        success:  null,\n        failure:  null\n    };\n\n    for ( var i in defaultParams ) {\n        if ( defaultParams.hasOwnProperty(i) &amp;&amp; typeof params[i] == \"undefined\" ) {\n            params[i] = defaultParams[i];\n        }\n    }\n\n    var that = this;\n    this.XHR.onreadystatechange = function() {\n        if ( that.XHR.readyState == 4 ) {\n            if ( that.XHR.status == 200 || that.XHR.status == 0 ) {\n                if ( params.success ) {\n                    params.success(that.XHR);\n                }\n            } else {\n                if ( params.failure ) {\n                    params.failure();\n                }\n            }\n        }\n    };\n\n    this.XHR.open(\n        params.type, parms.url, params.async, params.username, params.password\n    );\n\n    // It doesn't make sense to have a for/switch here when you're only handling\n    // one case\n    if ( params.setHeader ) {\n        var h = params.setHeader.split(\":\");\n        if ( h.length == 2) {\n            this.SetRequestHeader(h[0], h[1]);\n        }\n    }\n\n    this.XHR.send(params.body);\n};\n</code></pre>\n\n<p>Also be careful: your existing <code>for..in</code> loops have two distinct problems:</p>\n\n<ol>\n<li>You're not using <code>var</code> and causing a global to be created: <code>for (e in args)</code> should be <code>for (var e in args)</code></li>\n<li>Whenever you use <code>for..in</code>, you should always check to make sure that each key is a direct member of the object, and not something inherited inadvertently through prototype</li>\n</ol>\n\n<p>.</p>\n\n<pre><code>for ( var i in obj ) {\n    if ( obj.hasOwnProperty(i) ) {\n        // do stuff here\n    }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 9
                },
                {
                    "body": "<p>Usually this error occurs with the XMLHttpRequest when you call the open method with async = true, or you leave the async parameter undefined so it defaults to asynchronous, and then you access the status or responseText properties. Those properties are only available after you do a synchronous call, or on the readyState becoming ready (once the asynchronous call responds). I suggest you first try with async = false, and then switch to it being true and use the onReadyStateChange.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>In my case the error occurred when i tried to access <code>xhr.statusText</code> within the <code>xhr.onreadystatechange</code> method, however retrieving <code>xhr.readyState</code> went just fine.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I'm developing a simple auxiliary class to send requests using XmlHttpRequest (code below). But I cant make it work. At google chrome, for example, I get the error <code>INVALID_STATE_ERR: DOM Exception 11</code> and at the other browsers I get a status == 0.</p>\n\n<pre><code>//@method XRequest: Object constructor. As this implements a singleton, the object can't be created calling the constructor, GetInstance should be called instead\nfunction XRequest() {\n    this.XHR = XRequest.CreateXHR();\n}\nXRequest.instance = null;\n\n//@method static GetInstance: Creates a singleton object of type XRequest. Should be called whenever an object of that type is required.\n//@return: an instance of a XRequest object\nXRequest.GetInstance = function() {\n    if(XRequest.instance == null) {\n        XRequest.instance = new XRequest();\n    }\n    return XRequest.instance;\n}\n\n//@method static CreateXHR: Implments a basic factory method for creating a XMLHttpRequest object\n//@return: XMLHttp object or null\nXRequest.CreateXHR = function() {\n    var xhr = null;\n    var factory = [\n        function() { return new XMLHttpRequest(); },\n        function() { return new ActiveXObject(\"Msxml2.XMLHTTP\"); },\n        function() { return new ActiveXObject(\"Microsoft.XMLHTTP\"); }\n    ];\n\n    for(var i = 0; i &lt; factory.length; ++i) {\n        var f = factory[i];\n        xhr = f();\n        if(xhr) return xhr;\n    }\n    return null;\n}\n\nXRequest.prototype.SetRequestHeader = function(name, value) {\n    if(this.XHR) {\n        this.XHR.setRequestHeader(name, value);\n    }\n}\n\nXRequest.prototype.SendRequest = function(args) {\n    var async = true;\n    var type = \"\";\n    var url = \"\";\n    var username = \"\";\n    var password = \"\";\n    var body = null;\n    var success = null; \n    var failure = null;\n\n    for(e in args) {\n        switch(e) {\n            case \"async\":\n                async = args[e];\n                break;\n            case \"type\":\n                type = args[e];\n                break;\n            case \"success\":\n                success = args[e];\n                break;\n            case \"failure\":\n                failure = args[e];\n                break;\n            case \"url\":\n                url = args[e];\n                break;\n            case \"username\":\n                username = args[e];\n                break;\n            case \"password\":\n                password = args[e];\n                break;\n            case \"body\":\n                body = args[e];\n            break;\n            case \"setHeader\":\n                var h = args[e].split(\":\");\n                if(h.length == 2) {\n                    this.SetRequestHeader(h[0], h[1]);\n                }\n                break;\n        }\n    }\n\n    var that = this;\n    this.XHR.onreadystatechange = function() {\n        alert(\"readyState == \" + that.XHR.readyState + \"  status == \" + that.XHR.status);\n        if(that.XHR.readyState == 4) {\n            if(that.XHR.status == 200 || that.XHR.status == 0) {\n                if(success) success(that.XHR);\n            } else {\n                if(failure) failure();\n            }\n        }\n    };\n    this.XHR.open(type, url, async, username, password);\n    this.XHR.send(body);\n}\n</code></pre>\n\n<p><strong>Example of usage:</strong></p>\n\n<pre><code>&lt;script language=\"javascript\"&gt;\n    function onLoad() {\n        var x = XRequest.GetInstance();\n        x.SendRequest({type:\"GET\",\n            setHeader:\"Accept:text/html, image/png, image/*, */*\",\n            url: \"http://your_server.com/getData?param1=test\",\n            success:onSuccess, failure:onFail\n        });\n    }\n\n    function onSuccess(obj) {\n        alert(\"OK\");                \n    }\n\n    function onFail() {\n        alert(\"Not at this time!\");\n    }\n&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1362387794,
            "question_id": 2357430,
            "score": 16,
            "tags": [
                "javascript",
                "ajax",
                "xmlhttprequest"
            ],
            "title": "INVALID_STATE_ERR: DOM Exception 11"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Remove <code>javascript:</code> from <code>onclick=\"..</code>, <code>onsubmit=\"..</code> declarations</p>\n\n<p><code>javascript:</code> prefix is used only in <code>href=\"\"</code> or similar attributes (not events related)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In this bit of code:</p>\n\n<pre><code>getRadioButtonValue(this[\"whichThing\"]))\n</code></pre>\n\n<p>you're not actually getting a reference to anything. Therefore, your radiobutton in the getradiobuttonvalue function is undefined and throwing an error. </p>\n\n<p><strong>EDIT</strong>\nTo get the value out of the radio buttons, grab the <a href=\"http://jquery.com/\">JQuery</a> library, and then use this:</p>\n\n<pre><code>  $('input[name=whichThing]:checked').val()\n</code></pre>\n\n<p><strong>Edit 2</strong> \nDue to the desire to reinvent the wheel, here's non-Jquery code:</p>\n\n<pre><code>var t = '';\n for (i=0; i&lt;document.myform.whichThing.length; i++) \n {\n         if (document.myform.whichThing[i].checked==true)\n         {\n            t =t +document.myform.whichThing[i].value\n         }\n      }\n</code></pre>\n\n<p>or, basically, modify the original line of code to read thusly: </p>\n\n<pre><code>getRadioButtonValue(document.myform.whichThing))\n</code></pre>\n\n<p><strong>Edit 3</strong>\nHere's your homework:</p>\n\n<pre><code>      function handleClick()\n      {\n        alert(\"Favorite weird creature: \"+getRadioButtonValue(document.aye.whichThing));\n        //event.preventDefault(); // disable normal form submit behavior\n        return false; // prevent further bubbling of event\n      }\n    &lt;/script&gt;\n  &lt;/head&gt;\n&lt;body&gt;\n&lt;form name=\"aye\" onSubmit=\"return handleClick()\"&gt;\n      &lt;input name=\"Submit\"  type=\"submit\" value=\"Update\" /&gt;\n      Which of the following do you like best?\n      &lt;p&gt;&lt;input type=\"radio\" name=\"whichThing\" value=\"slithy toves\" /&gt;Slithy toves&lt;/p&gt;\n      &lt;p&gt;&lt;input type=\"radio\" name=\"whichThing\" value=\"borogoves\" /&gt;Borogoves&lt;/p&gt;\n      &lt;p&gt;&lt;input type=\"radio\" name=\"whichThing\" value=\"mome raths\" /&gt;Mome raths&lt;/p&gt;\n    &lt;/form&gt;\n</code></pre>\n\n<p>Notice the following, I've moved the function call to the Form's \"onSubmit\" event. An alternative would be to change your SUBMIT button to a standard button, and put it in the OnClick event for the button. I also removed the unneeded \"JavaScript\" in front of the function name, and added an explicit RETURN on the value coming out of the function. </p>\n\n<p>In the function itself, I modified the how the form was being accessed. The structure is:\n<strong>document.[THE FORM NAME].[THE CONTROL NAME]</strong> to get at things. Since you renamed your from aye, you had to change the document.myform. to document.aye. Additionally, the <em>document.aye[\"whichThing\"]</em> is just wrong in this context, as it needed to be <em>document.aye.whichThing</em>.</p>\n\n<p>The final bit, was I commented out the <strong>event.preventDefault();</strong>. that line was not needed for this sample. </p>\n\n<p><strong>EDIT 4</strong> Just to be clear. <strong>document.aye[\"whichThing\"]</strong> will provide you direct access to the selected value, but <strong>document.aye.whichThing</strong> gets you access to the collection of radio buttons which you then need to check.   Since you're using the \"getRadioButtonValue(object)\" function to iterate through the collection, you need to use <strong>document.aye.whichThing</strong>.  </p>\n\n<p>See the difference in this method:</p>\n\n<pre><code>function handleClick()\n{\n   alert(\"Direct Access: \" + document.aye[\"whichThing\"]);\n   alert(\"Favorite weird creature: \"+getRadioButtonValue(document.aye.whichThing));\n   return false; // prevent further bubbling of event\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 14
                },
                {
                    "body": "<p>You can either use javascript url form with </p>\n\n<pre><code>&lt;form action=\"javascript:handleClick()\"&gt;\n</code></pre>\n\n<p>Or use onSubmit event handler</p>\n\n<pre><code>&lt;form onSubmit=\"return handleClick()\"&gt;\n</code></pre>\n\n<p>In the later form, if you return false from the handleClick it will prevent the normal submision procedure. Return true if you want the browser to follow normal submision procedure.</p>\n\n<p>Your onSubmit event handler in the button also fails because of the <code>Javascript:</code> part</p>\n\n<p><strong>EDIT:</strong>\nI just tried this code and it works:</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;script type=\"text/javascript\"&gt;\n\n      function handleIt() {\n        alert(\"hello\");\n      }\n\n    &lt;/script&gt;\n  &lt;/head&gt;\n\n&lt;body&gt;\n    &lt;form name=\"myform\" action=\"javascript:handleIt()\"&gt;\n      &lt;input name=\"Submit\"  type=\"submit\" value=\"Update\"/&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>There are a few things to change in your edited version:</p>\n\n<ol>\n<li><p>You've taken the suggestion of using <code>document.myform['whichThing']</code> a bit too literally. Your form is named \"aye\", so the code to access the whichThing radio buttons should use that name: `document.aye['whichThing'].</p></li>\n<li><p>There's no such thing as an <code>action</code> attribute for the <code>&lt;input&gt;</code> tag. Use <code>onclick</code> instead: <code>&lt;input name=\"Submit\"  type=\"submit\" value=\"Update\" onclick=\"handleClick();return false\"/&gt;</code></p></li>\n<li><p>Obtaining and cancelling an Event object in a browser is a very involved process. It varies a lot by browser type and version. IE and Firefox handle these things very differently, so a simple <code>event.preventDefault()</code> won't work... in fact, the event variable probably won't even be defined because this is an onclick handler from a tag. This is why Stephen above is trying so hard to suggest a framework. I realize you want to know the mechanics, and I recommend google for that. In this case, as a simple workaround, use <code>return false</code> in the onclick tag as in number 2 above (or return false from the function as stephen suggested).</p></li>\n<li><p>Because of #3, get rid of everything not the alert statement in your handler.</p></li>\n</ol>\n\n<p>The code should now look like:</p>\n\n<pre><code>function handleClick()\n      {\n        alert(\"Favorite weird creature: \"+getRadioButtonValue(document.aye['whichThing']));\n      }\n    &lt;/script&gt;\n  &lt;/head&gt;\n&lt;body&gt;\n    &lt;form name=\"aye\"&gt;\n      &lt;input name=\"Submit\"  type=\"submit\" value=\"Update\" onclick=\"handleClick();return false\"/&gt;\n      Which of the following do you like best?\n      &lt;p&gt;&lt;input type=\"radio\" name=\"whichThing\" value=\"slithy toves\" /&gt;Slithy toves&lt;/p&gt;\n      &lt;p&gt;&lt;input type=\"radio\" name=\"whichThing\" value=\"borogoves\" /&gt;Borogoves&lt;/p&gt;\n      &lt;p&gt;&lt;input type=\"radio\" name=\"whichThing\" value=\"mome raths\" /&gt;Mome raths&lt;/p&gt;\n    &lt;/form&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am basing my question and example on Jason's answer in <a href=\"http://stackoverflow.com/questions/662630/javascript-form-bypassing-default-behaviour-for-ajax/664938#664938\">this</a> question</p>\n\n<p>I am trying to avoid using an eventListner, and just to call handleClick onsubmit, when the submit button is clicked.</p>\n\n<p>Absolutely nothing happens with the code I have.</p>\n\n<p>Why is handleClick not being called?</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;script type=\"text/javascript\"&gt;\n      function getRadioButtonValue(rbutton)\n      {\n        for (var i = 0; i &lt; rbutton.length; ++i)\n        { \n          if (rbutton[i].checked)\n            return rbutton[i].value;\n        }\n        return null;\n      }\n\n      function handleClick(event)\n      {\n        alert(\"Favorite weird creature: \"+getRadioButtonValue(this[\"whichThing\"]));\n        event.preventDefault(); // disable normal form submit behavior\n        return false; // prevent further bubbling of event\n      }\n    &lt;/script&gt;\n  &lt;/head&gt;\n&lt;body&gt;\n    &lt;form name=\"myform\" onSubmit=\"JavaScript:handleClick()\"&gt;\n      &lt;input name=\"Submit\"  type=\"submit\" value=\"Update\" onClick=\"JavaScript:handleClick()\"/&gt;\n      Which of the following do you like best?\n      &lt;p&gt;&lt;input type=\"radio\" name=\"whichThing\" value=\"slithy toves\" /&gt;Slithy toves&lt;/p&gt;\n      &lt;p&gt;&lt;input type=\"radio\" name=\"whichThing\" value=\"borogoves\" /&gt;Borogoves&lt;/p&gt;\n      &lt;p&gt;&lt;input type=\"radio\" name=\"whichThing\" value=\"mome raths\" /&gt;Mome raths&lt;/p&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>edit:</p>\n\n<p>Please do not suggest a framework as a solution.</p>\n\n<p>Here are the relevant changes I have made to the code, which results in the same behavior.</p>\n\n<pre><code>      function handleClick()\n      {\n        alert(\"Favorite weird creature: \"+getRadioButtonValue(document.myform['whichThing'])));\n        event.preventDefault(); // disable normal form submit behavior\n        return false; // prevent further bubbling of event\n      }\n    &lt;/script&gt;\n  &lt;/head&gt;\n&lt;body&gt;\n&lt;form name=\"aye\"&gt;;\n      &lt;input name=\"Submit\"  type=\"submit\" value=\"Update\" action=\"JavaScript:handleClick()\"/&gt;\n      Which of the following do you like best?\n      &lt;p&gt;&lt;input type=\"radio\" name=\"whichThing\" value=\"slithy toves\" /&gt;Slithy toves&lt;/p&gt;\n      &lt;p&gt;&lt;input type=\"radio\" name=\"whichThing\" value=\"borogoves\" /&gt;Borogoves&lt;/p&gt;\n      &lt;p&gt;&lt;input type=\"radio\" name=\"whichThing\" value=\"mome raths\" /&gt;Mome raths&lt;/p&gt;\n    &lt;/form&gt;\n</code></pre>\n",
            "last_activity_date": 1405384446,
            "question_id": 683498,
            "score": 16,
            "tags": [
                "javascript",
                "html",
                "forms",
                "javascript-events",
                "html-form"
            ],
            "title": "calling javascript from a html form"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>I just had the same issue and have been hunting around for a solution - apparently it's a Chrome issue with stack traces in general and happens to apply to Angular because it uses stack traces in error reporting. See:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/19087412/will-the-source-mapping-in-google-chrome-push-to-error-stack\">Will the source mapping in Google Chrome push to Error.stack</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The only solution I could find is to bite the bullet and parse the source maps yourself. Here is some code that will do this. First you need to add <a href=\"https://github.com/mozilla/source-map\">source-map</a> to your page. Then add this code:</p>\n\n<pre><code>angular.module('Shared').factory('$exceptionHandler', \nfunction($log, $window, $injector) {\n  var getSourceMappedStackTrace = function(exception) {\n    var $q = $injector.get('$q'),\n        $http = $injector.get('$http'),\n        SMConsumer = window.sourceMap.SourceMapConsumer,\n        cache = {};\n\n    // Retrieve a SourceMap object for a minified script URL\n    var getMapForScript = function(url) {\n      if (cache[url]) {\n        return cache[url];\n      } else {\n        var promise = $http.get(url).then(function(response) {\n          var m = response.data.match(/\\/\\/# sourceMappingURL=(.+\\.map)/);\n          if (m) {\n            var path = url.match(/^(.+)\\/[^/]+$/);\n            path = path &amp;&amp; path[1];\n            return $http.get(path + '/' + m[1]).then(function(response) {\n              return new SMConsumer(response.data);\n            });\n          } else {\n            return $q.reject();\n          }\n        });\n        cache[url] = promise;\n        return promise;\n      }\n    };\n\n    if (exception.stack) { // not all browsers support stack traces\n      return $q.all(_.map(exception.stack.split(/\\n/), function(stackLine) {\n        var match = stackLine.match(/^(.+)(http.+):(\\d+):(\\d+)/);\n        if (match) {\n          var prefix = match[1], url = match[2], line = match[3], col = match[4];\n          return getMapForScript(url).then(function(map) {\n            var pos = map.originalPositionFor({\n              line: parseInt(line, 10), \n              column: parseInt(col, 10)\n            });\n            var mangledName = prefix.match(/\\s*(at)?\\s*(.*?)\\s*(\\(|@)/);\n            mangledName = (mangledName &amp;&amp; mangledName[2]) || '';\n            return '    at ' + (pos.name ? pos.name : mangledName) + ' ' + \n              $window.location.origin + pos.source + ':' + pos.line + ':' + \n              pos.column;\n          }, function() {\n            return stackLine;\n          });\n        } else {\n          return $q.when(stackLine);\n        }\n      })).then(function (lines) {\n        return lines.join('\\n');\n      });\n    } else {\n      return $q.when('');\n    }\n  };\n\n  return function(exception) {\n    getSourceMappedStackTrace(exception).then($log.error);\n  };\n});\n</code></pre>\n\n<p>This code will download the source, then download the sourcemaps, parse them, and finally attempt to replace the locations in the stack trace the mapped locations. This works perfectly in Chrome, and quite acceptably in Firefox. The disadvantage is that you are adding a fairly large dependency to your code base and that you move from very fast synchronous error reporting to fairly slow async error reporting.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I would take a look at the following project: <a href=\"https://github.com/novocaine/sourcemapped-stacktrace\" rel=\"nofollow\">https://github.com/novocaine/sourcemapped-stacktrace</a></p>\n\n<p>It does essentially the same thing as the answer from @jakub-hampl but might be useful.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>According to <a href=\"https://github.com/angular/angular.js/issues/5217\" rel=\"nofollow\">this issue</a> it seems that Angular's <code>$logProvider</code> breaks sourcemapping. A workaround like this is suggested in the issue:</p>\n\n<pre><code>var module = angular.module('source-map-exception-handler', [])\n\nmodule.config(function($provide) {\n  $provide.decorator('$exceptionHandler', function($delegate) {\n    return function(exception, cause) {\n        $delegate(exception, cause);\n        throw exception;\n    };\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I've written an AngularJS app but it's proving a bit of a nightmare to debug. I'm using Grunt + uglify to concatenate and minify my application code. It also creates a source map alongside the minified JS file.</p>\n\n<p>The source map seems to work properly when there is a JS error in the file, but outside of the AngularJS application. e.g. If I write <code>console.log('a.b');</code> at the top of one of the files, the error logged in the Chrome debugger displays line + file info for the original file, not the minified one.</p>\n\n<p>The problem occurs when there is a problem with code that Angular runs itself (e.g. in Controller code). I get a nice stack trace from Angular, but it only details the minified file not the original.</p>\n\n<p>Is there anything I can do to get Angular to acknowledge the source map?</p>\n\n<p>Example error below:</p>\n\n<pre><code>TypeError: Cannot call method 'getElement' of undefined\nat Object.addMapControls (http://my-site/wp-content/plugins/my-maps/assets/js/app.min.js:1:2848)\nat Object.g [as init] (http://my-site/wp-content/plugins/my-maps/assets/js/app.min.js:1:344)\nat new a (http://my-site/wp-content/plugins/my-maps/assets/js/app.min.js:1:591)\nat d (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.0-rc.2/angular.min.js:29:495)\nat Object.instantiate (http://ajax.googleapis.com/ajax/libs/angularjs/1.2.0-rc.2/angular.min.js:30:123)\n</code></pre>\n",
            "last_activity_date": 1409742286,
            "question_id": 19420604,
            "score": 15,
            "tags": [
                "javascript",
                "angularjs",
                "source-maps"
            ],
            "title": "AngularJS - Stack trace ignoring source map"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Assuming you want to run the two operations in parallel rather than waiting for one to finish before starting the next, you'll need to track how many operations have completed in each callback.</p>\n\n<p>In raw node.js javascript, one way to do this would be this:</p>\n\n<pre><code>exports.init = function(req, res){\n    var NYLakes = null;\n    var NJLakes = null;\n    var filterNY = {\"State\" : \"NY\"};\n\n    db.collection('lakes').find(filterNY).toArray(function(err, result) {\n        if (err) throw err;\n        NYLakes = result;\n        complete();\n    });\n\n    var filterNJ = {\"State\" : \"NJ\"};\n    db.collection('lakes').find(filterNJ).toArray(function(err, result) {\n        if (err) throw err;\n        NJLakes = result;\n        complete();\n    });\n\n    function complete() {\n        if (NYLakes !== null &amp;&amp; NJLakes !== null) {\n            res.render('explore/index', {\n                NYlakes: NYLakes,\n                NJlakes: NJLakes\n            });\n        }\n    }\n\n};\n</code></pre>\n\n<p>Basically what's happening here is that you check at the end of each operation if all of them have finished, and at that point you finish off the operation.</p>\n\n<p>If you're doing a lot of these things, take a look at the <a href=\"https://github.com/caolan/async\">async</a> library as an example of a tool to make it easier to manage this sort of thing.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>You can use <code>async</code> module:</p>\n\n<pre><code>var states = [{\"State\" : \"NY\"},{\"State\" : \"NJ\"}];\n\nvar findLakes = function(state,callback){\n  db.collection('lakes').find(state).toArray(callback);\n}\n\nasync.map(states, findLakes , function(err, results){\n    // do something with array of results\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I'm a big fan of underscore/lodash, so I usually use <code>_.after</code>, which creates a function that only executes after being called a certain number of times.</p>\n\n<pre><code>var finished = _.after(2, doRender);\n\nasyncMethod1(data, function(err){\n  //...\n  finished();\n});\n\nasyncMethod2(data, function(err){\n  //...\n  finished();\n})\n\nfunction doRender(){\n  res.render(); // etc\n} \n</code></pre>\n\n<p>Since javascript hoists the definition of functions defined with the <code>function funcName()</code> syntax, your code reads naturally: top-to-bottom.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>Wait.for <a href=\"https://github.com/luciotato/waitfor\" rel=\"nofollow\">https://github.com/luciotato/waitfor</a></p>\n\n<p><strong>using Wait.for:</strong></p>\n\n<pre><code>exports.init = function(req, res){\n\n    var NYLakes = {};\n    var NJLakes = {};\n\n    var coll = db.collection('lakes');\n\n    var filterNY = {\"State\" : \"NY\"};\n    var a = wait.forMethod(coll,'find',filterNY);\n    NYLakes = wait.forMethod(a,'toArray');\n\n    var filterNJ = {\"State\" : \"NJ\"};\n    var b = wait.forMethod(coll,'find',filterNJ);\n    NJLakes = wait.forMethod(b,'toArray');\n\n    res.render('explore/index',\n        {\n            NYlakes: NYLakes,\n            NJlakes: NJLakes\n        }\n    );\n\n};\n</code></pre>\n\n<p><strong>Requesting in parallel using wait.for parallel map:</strong></p>\n\n<pre><code>exports.init = function(req, res){\n\n    var coll = db.collection('lakes');\n\n    //execute in parallel, wait for results\n    var result = wait.parallel.map(\n                    [{coll:coll,filter:{\"State\" : \"NY\"}}\n                    , {coll:coll,filter:{\"State\" : \"NJ\"}}]\n                    , getData);\n\n    res.render('explore/index',\n        {\n            NYlakes: result[0],\n            NJlakes: result[1]\n        }\n    );\n\n};\n\n//map function\nfunction getData(item,callback){\ntry{\n    var a = wait.forMethod(item.coll,'find',item.filter);\n    var b = wait.forMethod(a,'toArray');\n    callback (null, b);\n} catch(err){\n    callback(err);\n}\n</code></pre>\n\n<p>I'm not familiar with mongo, so you may have to adjust the calls.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm trying to make multiple MongoDB queries before I render a Jade template, but I can't quite figure out how to wait until all the Mongo Queries are completed before rendering the template. </p>\n\n<pre><code>    exports.init = function(req, res){\n\n\n        var NYLakes = {};\n        var NJLakes = {};\n        var filterNY = {\"State\" : \"NY\"};\n        db.collection('lakes').find(filterNY).toArray(function(err, result) {\n            if (err) throw err;\n            NYLakes = result;\n        });\n\n        var filterNJ = {\"State\" : \"NJ\"};\n        db.collection('lakes').find(filterNJ).toArray(function(err, result) {\n            if (err) throw err;\n            NJLakes = result;\n        });\n\n        res.render('explore/index',\n            {\n                NYlakes: NYLakes,\n                NJlakes: NJLakes\n            }\n        );\n\n    };\n</code></pre>\n",
            "last_activity_date": 1383846278,
            "question_id": 18008479,
            "score": 15,
            "tags": [
                "javascript",
                "node.js",
                "mongodb"
            ],
            "title": "Node.js - wait for multiple async calls"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Try using lates jQuery (container is draggable in IE9, and \"Object expected\" error disapears)</p>\n\n<pre><code> &lt;script type=\"text/javascript\"\n src=\"//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js\"&gt;&lt;/script&gt;\n &lt;script type=\"text/javascript\"\n src=\"//ajax.googleapis.com/ajax/libs/jqueryui/1.10.2/jquery-ui.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Make sure you have installed Flash player for IE (it is separate install)\nIt can be downloaded from here\n<a href=\"http://get.adobe.com/flashplayer/otherversions/\" rel=\"nofollow\">http://get.adobe.com/flashplayer/otherversions/</a></p>\n\n<p>But even Unloadify <a href=\"http://www.uploadify.com/demos/\" rel=\"nofollow\">demos</a> is not working in my IE9 (I can click like a minute in Select files button with no result and suddenly with no reason it starts to work and opens select files dialog)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It appears there is a problem in the sources of uploadify that conflicts with jquery UI in IE 9. Specifically in the swfupload utility. In order to fix it you need to do a little hack which appears to have detailed steps here: <a href=\"http://www.uploadify.com/forum/#/discussion/comment/19212\" rel=\"nofollow\">http://www.uploadify.com/forum/#/discussion/comment/19212</a></p>\n\n<p>Sorry I can't validate this without setting up a whole test environment. Not something that can just be put in a JSFiddle. Good luck, let me know if you succeed.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>IE9 seems to have a bug with SWFUpload embeds, whereby if you try to\ncall \"getAttribute / removeAttribute / setAttribute\" on the element,\nan \"object expected\" error is raised. And I found that the cleanUp()\nfunction in the swfupload.js remove all the js functions including\n\"getAttribute / removeAttribute / setAttribute\" from the object DOM in\nIE9.</p>\n\n<p>To fix this issue</p>\n\n<p>In SWFUpload.prototype.cleanUp</p>\n\n<p>Change:</p>\n\n<pre><code>if (typeof (movieElement[key]) === \"function\")\n</code></pre>\n\n<p>To:</p>\n\n<pre><code>if (typeof (movieElement[key]) === \"function\" &amp;&amp; key[0] &lt;= 'Z') // Remove only Flash functions (starts with capital letters). \n</code></pre>\n\n<p>Patched version of uploadify is kept at this location</p>\n\n<p><a href=\"http://www.dariowiz.com/scripts/jquery.uploadify3.1Fixed.js\">http://www.dariowiz.com/scripts/jquery.uploadify3.1Fixed.js</a></p>\n\n<p>Regards.</p>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>You find the finally solution for this problem here >>> <strong><a href=\"https://groups.google.com/forum/?fromgroups=#!topic/swfupload/57ySk2JoLbE\" rel=\"nofollow\">https://groups.google.com/forum/?fromgroups=#!topic/swfupload/57ySk2JoLbE</a></strong></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am trying to bind uploadify on div.<br>\nWhen I clicked on upload button it show me error like <code>SCRIPT5007: Object expected.</code></p>\n\n<p>For demo check below link which produced error on dragging of div in ie9</p>\n\n<p><strong>head</strong></p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.7.2.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"http://ajax.aspnetcdn.com/ajax/jquery.ui/1.8.20/jquery-ui.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"http://www.uploadify.com/wp-content/themes/uploadify/js/jquery.uploadify.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p><strong>body</strong></p>\n\n<pre><code>&lt;div class=\"container\" id=\"container\"&gt;\n    &lt;div id=\"uploadify-item\"&gt;&lt;/div&gt;\n    This container is not draggable in IE9 but it works in Chrome and FF. Why not?\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>js</strong></p>\n\n<pre><code>$('#uploadify-item').uploadify({\n    'swf'      : 'http://www.uploadify.com/uploadify/uploadify.swf',\n    'uploader' : 'http://www.uploadify.com/uploadify/uploadify.php'\n});\n$(\"#container\").draggable();\n</code></pre>\n\n<p>Refer : <a href=\"http://jsfiddle.net/axzdR/19/\">http://jsfiddle.net/axzdR/19/</a></p>\n",
            "last_activity_date": 1377212143,
            "question_id": 16145365,
            "score": 15,
            "tags": [
                "javascript",
                "internet-explorer",
                "internet-explorer-9",
                "uploadify"
            ],
            "title": "Uploadify in ie9 getting js error : SCRIPT5007: Object expected"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Your <code>ExtendedService</code>should inject the <code>BasicService</code>in order to be able to access it. Beside that <code>BasicService</code> is an object literal, so you can't actually call it as function (<code>BasicService()</code>).</p>\n\n<pre><code>.factory('ExtendedService', function($http, BasicService){\n  BasicService['method_four'] = function(){};\n  return BasicService;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 12
                },
                {
                    "body": "<p>Sorry if I post here but may be it's a good place to do it.\nI refer to this <a href=\"http://stackoverflow.com/questions/21496331/angularjs-are-service-singleton\">post</a></p>\n\n<p>watch out to extend a service/factory because are singleton \nso you can extend a service/factory once.</p>\n\n<pre><code>'use strict';\n            angular.module('animal', [])\n                .factory('Animal',function(){\n                        return {\n                            vocalization:'',\n                            vocalize : function () {\n                                console.log('vocalize: ' + this.vocalization);\n                            }\n                        }\n\n                });\n                angular.module('dog', ['animal'])\n                    .factory('Dog', function (Animal) {\n                        Animal.vocalization = 'bark bark!';\n                        Animal.color = 'red';\n                        return Animal;\n                    });\n\n                angular.module('cat', ['animal'])\n                   .factory('Cat', function (Animal) {\n                        Animal.vocalization = 'meowwww';\n                        Animal.color = 'white';\n                        return Animal;\n                    });\n                 angular.module('app', ['dog','cat'])\n                .controller('MainCtrl',function($scope,Cat,Dog){\n                     $scope.cat = Cat;\n                     $scope.dog = Dog;\n                     console.log($scope.cat);\n                     console.log($scope.dog);\n                    //$scope.cat = Cat;\n                });\n</code></pre>\n\n<p>but if you do like</p>\n\n<pre><code>'use strict';\n            angular.module('animal', [])\n                .factory('Animal',function(){\n                    return function(vocalization){\n                        return {\n                            vocalization:vocalization,\n                            vocalize : function () {\n                                console.log('vocalize: ' + this.vocalization);\n                            }\n                        }\n                    }\n                });    \n                angular.module('app', ['animal'])\n                    .factory('Dog', function (Animal) {\n                        function ngDog(){\n                            this.prop = 'my prop 1';\n                            this.myMethod = function(){\n                                console.log('test 1');\n                            }\n                        }\n                        return angular.extend(Animal('bark bark!'), new ngDog());\n                    })\n                    .factory('Cat', function (Animal) {\n                        function ngCat(){\n                            this.prop = 'my prop 2';\n                            this.myMethod = function(){\n                                console.log('test 2');\n                            }\n                        }\n                        return angular.extend(Animal('meooow'), new ngCat());\n                    })\n                .controller('MainCtrl',function($scope,Cat,Dog){\n                     $scope.cat = Cat;\n                     $scope.dog = Dog;\n                     console.log($scope.cat);\n                     console.log($scope.dog);\n                    //$scope.cat = Cat;\n                });\n</code></pre>\n\n<p>it works                 </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>More cleaner and imperative way</p>\n\n<pre><code>.factory('ExtendedService', function($http, BasicService){\n\n    var extended = angular.extend(BasicService, {})\n    extended.method = function() {\n        // ...\n    }\n    return extended;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>In my opinion, a better way:</p>\n\n<pre><code>.factory('ExtendedService', function($http, BasicService){\n    var service = angular.copy(BasicService);\n\n    service.methodFour = function(){\n        //code for method four\n    };\n\n    return service;\n});\n</code></pre>\n\n<p>Here at least does not change the inherited service.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>To expand on Stewie's answer, you could also do the following:</p>\n\n<pre><code>.factory('ExtendedService', function($http, BasicService){\n    var service = {\n        method_one: BasicService.method_one,\n        method_two: BasicService.method_two,\n        method_three: BasicService.method_three,\n        method_four: method_four\n    });\n\n    return service ;\n\n    function method_four(){\n\n    }\n}\n</code></pre>\n\n<p>This has the benefit that the original service is not altered, while keeping it's functionality. You can also choose to use your own implementations in the ExtendedService for the other 3 methods from BasicService.</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I am fairly new to <a href=\"http://angularjs.org/\"><code>angularjs</code></a> and am not able to find any documentation or examples for this. What I am looking to do is to extend a basic service so that i can use the methods defined under the basic service from other services. So for example say i have a basic service as follows.</p>\n\n<pre><code>angular.module('myServices', []).\n\n    factory('BasicService', function($http){\n        var some_arg = 'abcd'\n        var BasicService = {\n            method_one: function(arg=some_arg){ /*code for method one*/},\n            method_two: function(arg=some_arg){ /*code for method two*/},\n            method_three: function(arg=some_arg){ /*code for method three*/},\n        });\n        return BasicService;\n    }   \n);\n</code></pre>\n\n<p>Now i want to define an Extended service that extends from the above <code>BasicService</code> so that i can use methods defined under the BasicService from my extended service. Maybe something like:</p>\n\n<pre><code>    factory('ExtendedService', function($http){\n        var ExtendedService = BasicService();\n        ExtendedService['method_four'] = function(){/* code for method four */}\n        return ExtendedService;\n    }\n</code></pre>\n",
            "last_activity_date": 1424838182,
            "question_id": 15293943,
            "score": 15,
            "tags": [
                "javascript",
                "angularjs"
            ],
            "title": "how can i extend a service"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>It is flawed. You should try to <em>decouple</em> / <em>break up</em> code at the lowest point possible. I think its unlikely that just decoupling each iteration of a loop is enough on the long run.</p>\n\n<p>However, what you really need to do is, to setup an <em>asyncronous runaway timer</em> which gives the implementation enough room to update the <em>UI Queue</em> (or <em>UI thread</em>). This typically is done using methods like <code>setTimeout()</code> (client), <code>nextTick</code> (node.js) or <code>setImmediate</code> (coming soon).</p>\n\n<p>For instance, lets say we have an array, and we want to process each entry</p>\n\n<pre><code>var data = new Array(10000).join( 'data-' ).split('-'); // create 10.000 entries\n\nfunction process( elem ) {\n    // assume heavy operations\n    elem.charAt(1) + elem.charAt(2);\n}\n\nfor(var i = 0, len = data.length; i &lt; len; i++ ) {\n    process( data[i] );\n}\n</code></pre>\n\n<p>Now this code is a classic loop, iterating over the array and process its data. It'll also consume 100% CPU time and will therefore <em>block</em> the browsers <em>UI queue</em> as long as it takes to process all entries (which basically means, the browser UI will freeze and become unresponsive).</p>\n\n<p>To avoid that, we could create a construct like this:</p>\n\n<pre><code>var data  = new Array(10000).join( 'data-' ).split('-'); // create 10.000 entries\n\nfunction runAsync( data ) {\n    var start = Date.now();\n\n    do {\n        process( data.shift() );\n    } while( data.length &amp;&amp; Date.now() - start &gt; 100 );\n\n    if( data.length ) {\n        setTimeout( runAsync.bind( null, data ), 100 );\n    }\n}\n\nrunAsync( data.concat() );\n</code></pre>\n\n<p><strong>What happens here ?</strong></p>\n\n<p>What we're basically doing is:</p>\n\n<ul>\n<li>Take the array and process as much data/entries as possible within a timeframe of <em>100ms</em></li>\n<li>After that, stop processing (call <code>setTimeout</code>) and give the UI a chance to update</li>\n<li>do that as long as we still have data in the array</li>\n</ul>\n\n<p>Any delay above <em>100 ms</em> is typically recognized by the human eyes as \"<em>lag</em>\". Anything below that seems fluently and nice (at least our eyes will tell us so). 100ms is a good value as limit for maximum processing times. I'd even suggest to go down to 50ms.</p>\n\n<p>The caveat here is that the <em>overall processing time</em> will increase, but I think its a better deal to have longer processing and stay responsive, instead faster processing and a very bad user experience.</p>\n\n<hr>\n\n<p>Quick Demo:</p>\n\n<ul>\n<li><a href=\"http://jsfiddle.net/VZSAw/5/\">classic iteration (move the red square around, will block)</a></li>\n<li><a href=\"http://jsfiddle.net/VZSAw/6/\">runaway script timer (move the red square around, will be possible)</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 20
                },
                {
                    "body": "<p>So you want to limit the number of concurrent asynchronous operations? The flaw in your implementation is that you will be deferring each action until the previous one has completed.</p>\n\n<p>One option is to use a sequence helper, you could then break this queue up into more manageable chunks for processing.</p>\n\n<p><a href=\"https://github.com/michiel/asynchelper-js/blob/master/lib/sequencer.js\" rel=\"nofollow\">https://github.com/michiel/asynchelper-js/blob/master/lib/sequencer.js</a></p>\n\n<pre><code>var actions = [];\n$.each(assets, function(key, value) {\n\n    actions.push(function(callback) {\n      $.ajax({\n          url: 'process.php?id='+val,\n          success: function(msg) {\n\n            callback();\n          }\n        });\n    });\n  }\n);\n\nvar sequencer = new Sequencer(actions);\nsequencer.start();\n</code></pre>\n\n<p>If you split your actions array into two arrays, and have them run side by side you would then only ever have two processes running at a time until both queues have completed.</p>\n\n<p>e.g.</p>\n\n<pre><code>var arr1 = actions.splice(0,100);\nvar arr2 = actions.splice(100,200);\n\nvar sequencer1 = new Sequencer(arr1);\nsequencer1.start();\n\nvar sequencer2 = new Sequencer(arr2);\nsequencer2.start();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am doing \"heavy\" canvas operations in a jQuery each loop causing slower devices (IE and the iPad) to sometimes become totally unresponsive.</p>\n\n<p>So I was thinking I could use underscore's <code>_.defer()</code> to queue the functions in my each loop like:</p>\n\n<pre><code>function handleAsset = _.defer(function(){\n//weightlifting goes here (partly async)\n});\n\n$.each(assets, handleAsset);\n</code></pre>\n\n<p>Yet this throws a weird error (the stack trace points to the <code>$.each</code>):</p>\n\n<pre><code>Uncaught TypeError: Object 20877 has no method 'call'\n</code></pre>\n\n<p>Is this approach flawed? Is this due to async operations going on inside the handler function? Is there another / a better way to achieve this?</p>\n",
            "last_activity_date": 1355963880,
            "question_id": 13955976,
            "score": 15,
            "tags": [
                "javascript",
                "jquery",
                "underscore.js"
            ],
            "title": "How can I defer a jQuery each loop"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>You could test if the data you receive is wrapped by a <code>results</code> member and react accordingly. For example,</p>\n\n<pre><code>var M = Backbone.Model.extend({\n    parse: function (data) {\n        if (_.isObject(data.results)) {\n            return data.results;\n        } else {\n            return data;\n        }\n    }\n});\n</code></pre>\n\n<p>And a Fiddle <a href=\"http://jsfiddle.net/9rCH3/\">http://jsfiddle.net/9rCH3/</a></p>\n\n<p>If you want to generalize this behavior, either derive all your model classes from this base class or modify Backbone's prototype to provide this function :</p>\n\n<pre><code>Backbone.Model.prototype.parse = function (data) {\n    if (_.isObject(data.results)) {\n        return data.results;\n    } else {\n        return data;\n    }\n};\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/9rCH3/1/\">http://jsfiddle.net/9rCH3/1/</a></p>\n",
                    "is_accepted": true,
                    "score": 19
                }
            ],
            "body": "<p>I'm trying to use Backbone with an API.</p>\n\n<p>The default API response format is:</p>\n\n<pre><code>{\nsomemetadatas:xxx , \nresults:yyy\n}\n</code></pre>\n\n<p>Whether it's a fetch for a single model or a collection.</p>\n\n<p>So as far as I know I can override the Backbone <code>parse</code> function with:</p>\n\n<pre><code>parse: function (response) {\n    return response.results;\n},\n</code></pre>\n\n<p>But I've seen in <a href=\"http://backbonejs.org/#Collection-parse\">the documentation</a>:</p>\n\n<blockquote>\n  <p><strong>parse</strong> <code>collection.parse(response)</code></p>\n  \n  <p><strong>parse</strong> is called by Backbone whenever\n  a collection's models are returned by the server, in fetch. The\n  function is passed the raw <code>response</code> object, and should return the\n  array of model attributes to be added to the collection. The default\n  implementation is a no-op, simply passing through the JSON response.\n  Override this if you need to work with a preexisting API, or better\n  namespace your responses. Note that afterwards, if your model class\n  already has a <code>parse</code> function, it will be run against each fetched\n  model.</p>\n</blockquote>\n\n<p>So if I have a response for a collection fetch like that:</p>\n\n<pre><code>{\nsomemetadatas:xxx , \nresults:[user1,user2]\n}\n</code></pre>\n\n<p>The first <code>parse</code> function on the collection will extract <code>[user1,user2]</code>.</p>\n\n<p>But the doc says:</p>\n\n<blockquote>\n  <p>Note that afterwards, if your model class\n  already has a <code>parse</code> function, it will be run against each fetched\n  model.</p>\n</blockquote>\n\n<p>So it will try to find <code>response.results;</code> on <code>user1</code> and <code>user2</code></p>\n\n<p>I need both parse functions on the model and collection because both model and collection datas will be under the result attribute.</p>\n\n<p>But if i fetch on a collection, I don't want the model parse function to be used againt a single array element.</p>\n\n<hr>\n\n<p>So is there a solution to this problem?</p>\n\n<p>I think of a solution where my collection parse function will transform something like this:</p>\n\n<pre><code>{\nsomemetadatas:xxx , \nresults:[user1,user2]\n}\n</code></pre>\n\n<p>into something like this:</p>\n\n<pre><code>[ {results.user1} , {results.user2} ]\n</code></pre>\n\n<p>So that the model parse function will not fail on a collection fetch.\nBut it's a bit hacky... is there any elegant solution to this problem?</p>\n\n<hr>\n\n<p>By the way, as my API will always produce results of this form, is it possible to override by default the <code>parse</code> function of all my models and collections? (Sorry i'm a JS noob...)</p>\n",
            "last_activity_date": 1384454322,
            "question_id": 11938500,
            "score": 15,
            "tags": [
                "javascript",
                "backbone.js"
            ],
            "title": "Overriding backbone&#39;s parse function"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>A quick and dirty solution is to programmatically click the button on document ready:</p>\n\n<pre><code>$(function() {\n  $(\".right.carousel-control\").click();\n});\n</code></pre>\n\n<p>BTW: make sure you load jQuery before the other scripts referring to $, right now you have two <code>Uncaught ReferenceError: $ is not defined</code> because you call $ on line 101 and 182, but jquery is first loaded on line 243.</p>\n\n<p>I would recommend using a tool like firebug or developer tool (chrome/safari) to catch these errors.</p>\n\n<p>EDIT: I think you already have a working solution, but because you use jquery before it's loaded it doesn't work.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>$('.carousel').carousel({\n  interval: 2000\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Try to initialize your carousel like this:</p>\n\n<pre><code>$('.carousel').carousel().next();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Note: As mentioned in the comments this solution will work correctly for Bootstrap 2. Refer to MattZ's answer for instructions on how to accomplish the same behavior on Bootstrap 3. </p>\n\n<p>I had the same issue as you and all I had to do to fix it was call the carousel('cycle') method after I had initialized the carousel:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n$(document).ready(function () {\n    $('.carousel').carousel({\n        interval: 3000\n    });\n\n    $('.carousel').carousel('cycle');\n});\n&lt;/script&gt;  \n</code></pre>\n\n<p>I realize this question is old but I was googling tonight trying to figure it out myself and saw noone had properly answered it. Top voted answer will not automatically start the carousel, it will only cycle once a button has been pressed which is not what the OP was looking for.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>This is the solution which worked for me, based on Jesse Carter's answer to this question. I have no idea why this works, but for some reason it needs 2 calls, one inside the document dot ready and the other outside. If I remove either of them then something goes wrong, eg the pause functionality cant be made to work properly, or the automatic cycling. Further to this the interval only seems to work inside the doc.ready. Comments from javascript heads most welcome ;-) but I suspect that this area of T.B. is not entirely bug free! I'm using 2.0.2 which I know is a little bit behind ( current version now is <a href=\"https://github.com/twitter/bootstrap/issues?milestone=11&amp;state=closed\" rel=\"nofollow\">2.0.4</a>) but I don't see any changes to this area </p>\n\n<pre><code>jQuery(document).ready(function () {\n    jQuery('#myCarousel').carousel(\n    {\n    interval:2000\n    });\n});\n\njQuery('#myCarousel').carousel();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Not sure if you got this sorted out, but I was having that problem as well. I resolved it by wrapping the carousel interval setting in a function like this:</p>\n\n<pre><code>!function ($) {\n$(function() {\n    $('.carousel').carousel({ interval: 3000 })\n});\n}(window.jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The jquery.js file must load before the bootstrap.js, whether they are placed in the head tags or at the end of your file. </p>\n\n<pre><code>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.8.2/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"bootstrap/js/bootstrap.js\"type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The right way to fix this is to add the \"active\" class to the first image in the carousel while creating it. This will make the carousel start cycling as soon as possible.</p>\n\n<p>Here is an example:</p>\n\n<pre><code>    &lt;div class=\"carousel slide\"&gt;\n      &lt;div class=\"carousel-inner\"&gt;\n        &lt;div class=\"item active\"&gt;&lt;/div&gt;\n        &lt;div class=\"item\"&gt;&lt;/div&gt;\n        &lt;div class=\"item\"&gt;&lt;/div&gt;\n      &lt;/div&gt;\n    &lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>While there undoubtedly are correct answers here, I just wanted to add that you can reproduce the exact behavior as the poster describes by adding errors to your code. Remove semicolons or the ending script tag for example, and the carousel wont autoplay anymore.</p>\n\n<p>So the first thing you should do is to look for errors in your javascript console!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this.</p>\n\n<pre><code>$(document).ready(function ()\n{\n    $('.carousel').carousel({interval:5000,pause:false});\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In Bootstrap 3.0, this can be accomplished by adding a 'data-ride' attribute to the carousel container:</p>\n\n<pre><code>&lt;div id=\"my-carousel\" class=\"carousel slide\" data-ride=\"carousel\"&gt;\n    &lt;div class=\"carousel-inner\"&gt;\n        ...\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"https://github.com/twbs/bootstrap/blob/v3.0.0/js/carousel.js#L210\">https://github.com/twbs/bootstrap/blob/v3.0.0/js/carousel.js#L210</a></p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>In Bootstrap 3.0, this can be accomplished by adding a 'data-ride' attribute to the carousel container:</p>\n\n\n    \n        ...\n    \n\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>    &lt;div id=\"myCarousel\" class=\"carousel slide\"&gt;\n            &lt;!-- Indicators --&gt;\n            &lt;ol class=\"carousel-indicators\"&gt;\n              &lt;li data-target=\"#myCarousel\" data-slide-to=\"0\" class=\"active\"&gt;&lt;/li&gt;\n              &lt;li data-target=\"#myCarousel\" data-slide-to=\"1\"&gt;&lt;/li&gt;\n            &lt;/ol&gt;\n            &lt;!-- Wrapper for slides --&gt;\n            &lt;div class=\"carousel-inner\"&gt;\n              &lt;div class=\"item active\"&gt;\n               &lt;img src=\"img1\" class=\"img-responsive\" alt=\"stuff1\" &gt; \n              &lt;/div&gt;\n              &lt;div class=\"item\"&gt;\n               &lt;img src=\"img2\" class=\"img-responsive\" alt=\"stuff2\" &gt; \n              &lt;/div&gt;\n            &lt;/div&gt;\n           &lt;!-- Controls--&gt;\n      &lt;a class=\"left carousel-control\" href=\"#myCarousel\" data-slide=\"prev\"&gt;\n        &lt;span class=\"icon-prev\"&gt;&lt;/span&gt;\n      &lt;/a&gt;\n      &lt;a class=\"right carousel-control\" href=\"#myCarousel\" data-slide=\"next\"&gt;\n        &lt;span class=\"icon-next\"&gt;&lt;/span&gt;\n      &lt;/a&gt; \n          &lt;/div&gt;\n\n &lt;!--This script should be at the very bottom of the page (footer works for me)--&gt;  \n    &lt;script&gt;\n    $('#myCarousel').carousel\n    ({\n        interval: 2000,\n\n\n        })\n\n    &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>if none of those solutions work for you. \ntry this:</p>\n\n<pre><code>$(document).ready(function () {\n  function playcarousel(){\n    $('.carousel-control.right').trigger('click');\n  } \n  window.setInterval(playcarousel, 4000); \n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Using bootstrap.js version 2.02</p>\n\n<p>I'm trying to get the Twitter Bootstrap Carousel to automatically cycle as soon as someone visits my site.  Right now, the auto cycling works only after you click one of the cycle buttons at least once.  </p>\n\n<p>I want the carousel to begin cycling at the interval right away.</p>\n\n<p>Does anyone know how to do this?  </p>\n\n<p>My site is hotairraccoon.com</p>\n\n<p>You'll see how after you click the carousel once, it begins to cycle every 5 seconds or so, but I don't want the click to be required to reveal carousel content.</p>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1386962932,
            "question_id": 9750816,
            "score": 15,
            "tags": [
                "javascript",
                "twitter-bootstrap",
                "carousel"
            ],
            "title": "How can I make the boostrap js carousel automatically cycle as soon as the page loads?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Have your AJAX handler trigger some custom event like <code>contentAdded</code>, and bind <code>fancyPlugin</code> to that event.</p>\n\n<p>Alternatively, you can use <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-eventgroupings-mutationevents\" rel=\"nofollow\">DOM mutation events</a> to call <code>fancyPlugin</code> for any change in the container. Native browser support isn't quite there yet, but there are <a href=\"https://www.adaptavist.com/display/jQuery/Mutation+Events\" rel=\"nofollow\">plugins</a> which should take care of that.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If those elements are added with AJAX you could use the <a href=\"http://api.jquery.com/ajaxSuccess\" rel=\"nofollow\"><code>.ajaxSuccess()</code></a> method:</p>\n\n<pre><code>$('#container').ajaxSuccess(function(result) {\n    $('.elements').fancyPlugin();\n});\n</code></pre>\n\n<p>And here's a <a href=\"http://jsfiddle.net/dvppN/3/\" rel=\"nofollow\">live demo</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Have you looked at the jQuery .live event handler? It automatically binds when a new item is added to the dom if it meets the specified requirements.</p>\n\n<p><a href=\"http://api.jquery.com/live/\" rel=\"nofollow\">http://api.jquery.com/live/</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>What if you make something like this?</p>\n\n<pre><code>$(document).ready(function(){\n    $('.elements').live('load', function () {\n        $(this).fancyPlugin();\n    })\n});\n</code></pre>\n\n<p>The events are not re-binded after ajax calls or within the content they return. <code>live()</code> attaches a handler to the event now and in the future.\"</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Use jquery live</p>\n\n<pre><code>$(document).ready(function(){\n    $('.elements').live('load', function () {\n        $(this).fancyPlugin();\n    })\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I think this will work in all browsers except IE:</p>\n\n<pre><code>document.body.addEventListener(\"DOMNodeInserted\", function(event){\n    var $elementJustAdded = $(event.target);\n    if ($elementJustAdded.hasClass('elements')) {\n        $elementJustAdded.fancyPlugin();\n    }\n}, false);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>Interesting.  Essentially, you'd like something like:</p>\n\n<pre><code>$('selector').ready( ... do something ... );\n</code></pre>\n\n<p>The problem is that kind of logic isn't available.  Elements loading on the page don't trigger any specific events I'm aware of, they just inherit CSS from the DOM nodes above them.  What I would do is just, from the <code>$.get</code> success function, trigger a custom event.  The rest of your code can hook into that event to do any plugin reloading work that may be needed.  You can pass a list of relevant selectors with the event, and use that to invoke the appropriate plugins (you can keep a set of <code>selector -&gt; plugin refresh function</code> relationships in a hashtable)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Another way of doing this is creating your own event :</p>\n\n<pre><code>var container=$('#container');\n$.get('ajax.html', function(data){   \n   container.html(data);\n   $('.elements',container).trigger('added.yourns');    \n});\n\ncontainer.on('added.yourns','.elements',function(){\n  $(this).fancyPlugin();\n});\n</code></pre>\n\n<p>Then, when adding ellements, simply trigger the event with the <code>trigger</code> method!</p>\n\n<pre><code>var aDiv=$('div');\naDiv.appendTo(someNode);\naDiv.trigger('added.yourns');\n</code></pre>\n\n<p>Doing so will enable you to attach any behaviour in any javascript file !</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>I have a jQuery plugin that I am using:</p>\n\n<pre><code>$(document).ready(function(){\n    $('.elements').fancyPlugin();\n});\n</code></pre>\n\n<p>This works great until I start adding new elements:</p>\n\n<pre><code>$.get('ajax.html', function(data){\n    $('#container').html(data);\n});\n</code></pre>\n\n<p>I could call the plugin function again like this:</p>\n\n<pre><code>$.get('ajax.html', function(data){\n    $('#container').html(data).find('.elements').fancyPlugin();\n});\n</code></pre>\n\n<p>...except that the AJAX is happening inside another jQuery plugin that shouldn't have to know about the <code>fancyPlugin()</code>.</p>\n\n<p>How can I apply this plugin to all current and future elements?</p>\n",
            "last_activity_date": 1376483716,
            "question_id": 6781661,
            "score": 15,
            "tags": [
                "javascript",
                "jquery",
                "jquery-plugins"
            ],
            "title": "jQuery: How to call a jQuery plugin function on an element that hasn&#39;t yet been added to the DOM?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You can check what was clicked with <a href=\"http://api.jquery.com/event.target/\"><code>event.target</code></a>:</p>\n\n<pre><code>$(something).click(function(e){\n    alert(e.target)\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The \"event\" parameter passed to the handler has a \"target\" property, which refers to the element that was the direct target of the event. You can check that property to see if it's the <code>&lt;body&gt;</code> element.</p>\n\n<p>Note that the jQuery \".delegate()\" facility can be used to do that checking for you.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Compare <a href=\"http://api.jquery.com/event.target\"><code>event.target</code></a> to <code>this</code>. <code>this</code> is always the event where the handler is bound; <code>event.target</code> is always the element where the event originated.</p>\n\n<pre><code>$(document.body).click(function(event) {\n    if (event.target == this) {\n        // event was triggered on the body\n    }\n});\n</code></pre>\n\n<p>In the case of elements you know to be unique in a document (basically, just <code>body</code>) you can also check the <code>nodeName</code> of <code>this</code>:</p>\n\n<pre><code>$(document.body).click(function(event) {\n    if (event.target.nodeName.toLowerCase() === 'body') {\n        // event was triggered on the body\n    }\n});\n</code></pre>\n\n<p>You have to do <code>toLowerCase()</code> because the case of <code>nodeName</code> is inconsistent across browsers.</p>\n\n<p>One last option is to compare to an ID if your element has one, because these also have to be unique:</p>\n\n<pre><code>$('#foo').click(function(event) {\n    if (event.target.id === 'foo') {\n        // event was triggered on #foo\n    }\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 31
                }
            ],
            "body": "<p>Clicking on elements in jQuery causes bubble up to body. If we have a click handler binded to body that shows an alert, then clicking on any element will bubble up to body and trigger the alert. My Question is, is there any way to know if the body alert was triggered as a result of direct click to body, or was the click triggered because of a bubble up to body. </p>\n",
            "last_activity_date": 1305831094,
            "question_id": 6063129,
            "score": 15,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Is there any way to check if bubble triggered the click?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Use <a href=\"https://developer.mozilla.org/en/DOM/window.onerror\"><code>window.onerror</code></a> instead of a big <code>try/catch</code>.</p>\n\n<p>You could actually do some useful things in the error handler, like posting the error information to your server so you know when things are breaking on your page.</p>\n",
                    "is_accepted": true,
                    "score": 28
                },
                {
                    "body": "<p>Turn on the debugger and break on error.</p>\n\n<p>You don't want to catch every error in the entire page on production code. That's horrible.</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>Is there some way to wrap the entire page in a try/catch, so that I can catch any error from any script that is executing?</p>\n",
            "last_activity_date": 1296844415,
            "question_id": 4901605,
            "score": 15,
            "tags": [
                "javascript"
            ],
            "title": "Add global try/catch to JavaScript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>What do you mean 'engine for .net'?</p>\n\n<p>Regardless, there is Microsofts AJAX Framework, or jQuery. Microsofts is integrated via controls and so on, but I prefer jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You might want to check out <a href=\"http://blogs.msdn.com/jscript/archive/2007/05/07/introducing-managed-jscript.aspx\" rel=\"nofollow\">Managed JScript</a>.  It sounds like something you are looking for, but I don't really know much about it.</p>\n\n<p><strong>Edit:</strong> Sounds like Managed JScript is dead according to another post, so I would look into Google's V8.</p>\n\n<p>You can also use Google's V8 Engine from .NET.  Check out this other question, and the provided solution: <a href=\"http://stackoverflow.com/questions/356948\">http://stackoverflow.com/questions/356948</a>.  This example uses Managed C++.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If your point 'engine' is Javascript Parser,I think MS JScript.NET has the ability to do this,Take a look this article:<a href=\"http://www.odetocode.com/code/80.aspx\" rel=\"nofollow\">http://www.odetocode.com/code/80.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There was, at one time, a clone of JavaScript <a href=\"http://blogs.msdn.com/deepak/archive/2007/05/02/managed-jscript-is-availaible.aspx\">that ran on the DLR</a>. <a href=\"http://dlr.codeplex.com/Thread/View.aspx?ThreadId=58121\"><strong>But now it's dead</strong></a>.</p>\n\n<p>A quick search turns up <a href=\"http://code.remobjects.com/p/roscript/\">RemObjects Script</a> and <a href=\"http://code.google.com/p/ecmascript-net/\">ECMAScript.NET</a>. Might as well start there...</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here's a recent project I came across: script_sharp, to write JavaScript using the C# language. You write it in C# and it gets turned into JavaScript.</p>\n\n<p><a href=\"http://weblogs.asp.net/rosherove/archive/2009/08/11/script-script-sharp-solving-the-javascript-overload-problem.aspx\" rel=\"nofollow\">http://weblogs.asp.net/rosherove/archive/2009/08/11/script-script-sharp-solving-the-javascript-overload-problem.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>You can check <a href=\"http://jint.codeplex.com\" rel=\"nofollow\">Jint</a> which is a Javascript interpreter for .NET.</p>\n",
                    "is_accepted": true,
                    "score": 11
                },
                {
                    "body": "<p>You can take a look at this project <a href=\"http://javascriptdotnet.codeplex.com/\" rel=\"nofollow\">http://javascriptdotnet.codeplex.com/</a> which look like what you are looking for.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Try Javascript .NET:</p>\n\n<p><a href=\"http://javascriptdotnet.codeplex.com/\">http://javascriptdotnet.codeplex.com/</a></p>\n\n<p>It implements Google V8. You can compile and run Javascript directly from .NET code with it, and supply CLI objects to be used by the Javascript code as well. And V8 is probably the best engine ever created in terms of performance, it generates native code from Javascript.</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>I'm looking for an open source javascript engine for .NET. Thanks.</p>\n",
            "last_activity_date": 1335853166,
            "question_id": 1283370,
            "score": 15,
            "tags": [
                "c#",
                "javascript",
                "javascript-engine"
            ],
            "title": "Any Javascript Engine for .NET/C#?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Use <code>if (l.keyCode == 10 || l.keyCode == 13)</code> instead of <code>if (l.keyCode == 13)</code>...</p>\n\n<p>Under Windows, a new line consists of a <code>Carriage Return</code> (13) followed by a <code>Line Feed</code> (10).</p>\n\n<p>Under *nix, a new line consists of a <code>Line Feed</code> (10) only.</p>\n\n<p>Under Mac, a new line consists of a <code>Carriage Return</code> (13) only.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>This <strong><em>could</em></strong> be a browser specific issue. Different browsers handle the keycode differently. It's good to normalize this prior to inspection:</p>\n\n<pre><code>var code = ev.keyCode || ev.charCode || 0;\n</code></pre>\n\n<p>It's important to note that webkit browsers have a slightly different key mapping than the rest:</p>\n\n<pre><code>var webkitKeymap = {\n            63232: 38, // up\n            63233: 40, // down\n            63234: 37, // left\n            63235: 39, // right\n            63276: 33, // page up\n            63277: 34, // page down\n            25: 9      // SHIFT-TAB (Safari provides a different key code in\n                       // this case, even though the shiftKey modifier is set)\n        };\n</code></pre>\n\n<p>This code can be found in YUI's event utility.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this</p>\n\n<pre><code>&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head id=\"Head1\" &gt;\n    &lt;title&gt;&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div&gt;\n        &lt;input id=\"TestTextBox\" type=\"text\" /&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;script type=\"text/javascript\"&gt;\n    $(function()\n    {\n       var  testTextBox = $('#TestTextBox');\n        var code =null;\n        testTextBox.keypress(function(e)\n        {\n            code= (e.keyCode ? e.keyCode : e.which);\n            if (code == 13) alert('Enter key was pressed.');\n            e.preventDefault();\n        });\n\n    });\n\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 47
                }
            ],
            "body": "<p><strong>Update:</strong></p>\n\n<p>I finally figured out that \"keypress\" has a better compatibility than \"keydown\" or \"keyup\" on Linux platform. I just changed \"keyup\"/\"keydown\" to \"keypress\", so all went well.</p>\n\n<p>I don't know what the reason is but it is solution for me. Thanks all who had responsed my question.</p>\n\n<p>--</p>\n\n<p>I have some codes that needs to detect key press event (I have to know when the user press Enter) with JQuery and here are the codes in Javascript:</p>\n\n<pre><code>j.input.bind(\"keyup\", function (l) {\n    if (document.selection) {\n        g._ieCacheSelection = document.selection.createRange()\n    }\n}).bind(\"keydown\", function(l) {\n    //console.log(l.keyCode);\n    if (l.keyCode == 13) {\n        if(l.ctrlKey) {\n            g.insertCursorPos(\"\\n\");\n            return true;\n        } else {\n            var k = d(this),\n            n = k.val();\n            if(k.attr('intervalTime')) {\n                    //alert('can not send');\n                    k.css('color','red').val('Dont send too many messages').attr('disabled','disabled').css('color','red');\n                    setTimeout(function(){k.css('color','').val(n).attr('disabled','').focus()},1000);\n                    return\n            }\n    if(g_debug_num[parseInt(h.buddyInfo.id)]==undefined) {\n            g_debug_num[parseInt(h.buddyInfo.id)]=1;\n    }\n        if (d.trim(n)) {\n            var m = {\n                to: h.buddyInfo.id,\n                from: h.myInfo.id,\n                //stype: \"msg\",\n                body: (g_debug_num[parseInt(h.buddyInfo.id)]++)+\" : \"+n,\n                timestamp: (new Date()).getTime()\n            };\n            //g.addHistory(m);\n            k.val(\"\");\n            g.trigger(\"sendMessage\", m);\n            l.preventDefault();\n            g.sendStatuses(\"\");\n            k.attr('intervalTime',100);\n            setTimeout(function(){k.removeAttr('intervalTime')},1000);\n            return\n        }\n        return\n    }\n}\n</code></pre>\n\n<p>It works fine on Windows but on Linux, it fails to catch the Enter event sometimes. Can someone help?</p>\n\n<p><strong>Updated:</strong></p>\n\n<p>It seems good if I only use English to talk. But I have to use some input method to input Chinese. If it is the problem? (JQuery can not detect Enter if I use Chinese input method? )</p>\n",
            "last_activity_date": 1328790837,
            "question_id": 1248100,
            "score": 15,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "Detect key event (Enter) with JQuery in Javascript (on Linux platform)"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The security rules does differ with the version of browser. Generally newer versions have stricter rules, but also more fine tuned.</p>\n\n<p>I suspect that older browsers would freely let you access the location object of the top frame, a little newer browsers would deny it totally, and the current versions let you compare location objects but not read from them.</p>\n\n<p>You might be able find documentation about this, but it would be specific for each browser and specific for each version of the browser. As far as I know, there is no real standard for this. Each browser vendor tries to protect the user as much as possible, while still keeping some usability for the web site builder. Generally you can't really assume that anything close to the border works in all browsers, or that it will continue to work in future versions.</p>\n",
                    "is_accepted": true,
                    "score": 5
                },
                {
                    "body": "<p>This is exactly specified by the <a href=\"http://www.w3.org/TR/html5/browsers.html#security-location\" rel=\"nofollow\">HTML5 standard in section 5.5.3.1</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>There is a very particular edge case in cross-domain policies regarding the window.top.Location object...</p>\n\n<p>Let's say I have IFrame A , in domain www.xxx.com, living inside a page in domain www.aaa.com.</p>\n\n<p>The page inside the IFrame can:  </p>\n\n<ul>\n<li>Compare window.top.location to window.location (to detect whether it's being framed)</li>\n<li>Call window.top.location.replace(window.location) to redirect to self </li>\n<li>Call window.top.location.replace(\"any arbitrary string\") to redirect somewhere else</li>\n</ul>\n\n<p>But it cannot:</p>\n\n<ul>\n<li>Alert, Document.Write, or do any kind of output of window.top.location.href</li>\n<li>Concatenate it in any other variable, or use it in any useful way</li>\n<li>Call window.top.location.reload()</li>\n</ul>\n\n<p>These are just the ones I could quickly find. I'm sure there are other edge cases.<br />\nIt seems like the browser is not allowing the use of the top.location object if the top is in another domain, <strong>except</strong> for a few whitelisted things...</p>\n\n<p>Is this documented anywhere?<br />\nCan I find what these whitelisted things are?<br />\nIs this in the HTML standard, and implemented equally in all browsers? Or is the implmenetation of this semi-random?</p>\n\n<p>Thanks!<br />\nDaniel</p>\n",
            "last_activity_date": 1380820704,
            "question_id": 1113902,
            "score": 15,
            "tags": [
                "javascript",
                "security",
                "cross-domain",
                "window.location"
            ],
            "title": "What exactly can an IFrame do with the top.Location object (cross-domain)?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Can I get some clarification first to make sure I get the problem?</p>\n\n<p><code>document.write</code> calls will add content to the markup at the point in the markup at which they occur. For example if you include <code>document.write</code> calls in a function but call the function elsewhere, the <code>document.write</code> output will happen at the point in the markup the function is <em>defined</em> not where it is <em>called</em>.</p>\n\n<p>Therefore for this to work at all the Flickr <code>document.write</code> statements will need to be part of the <code>content</code> in <code>element.innerHTML = content</code>. Is this definitely the case?</p>\n\n<p>You might quickly test if this should work at all by adding a single and simple <code>document.write</code> call in the content that is set as the <code>innerHTML</code> and see what this does:</p>\n\n<pre><code>&lt;script&gt;\n  var content = \"&lt;p&gt;1st para&lt;/p&gt;&lt;script&gt;document.write('&lt;p&gt;2nd para&lt;/p&gt;');&lt;/script&gt;\"\n  element.innerHTML = content;\n&lt;/script&gt;\n</code></pre>\n\n<p>If that works, the concept of <code>document.write</code> working in content set as the <code>innerHTML</code> of an element might just work.</p>\n\n<p>My gut feeling is that it won't work, but it should be pretty straightforward to test the concept.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I created a simple test page that illustrates the problem:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta http-equiv=\"Content-type\" content=\"text/html; charset=utf-8\" /&gt;\n        &lt;title&gt;Document Write Testcase&lt;/title&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"container\"&gt;\n        &lt;/div&gt;\n        &lt;div id=\"container2\"&gt;\n        &lt;/div&gt;\n\n        &lt;script&gt;\n            // This doesn't work!\n            var container = document.getElementById('container');\n            container.innerHTML = \"&lt;script type='text/javascript'&gt;alert('foo');document.write('bar');&lt;\\/script&gt;\";\n\n            // This does!\n            var container2 = document.getElementById('container2');\n            var script = document.createElement(\"script\");\n            script.type = 'text/javascript';\n            script.innerHTML = \"alert('bar');document.write('foo');\";\n            container.appendChild(script);\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>This page alerts 'bar' and prints 'foo', while I expected it to also alert 'foo' and print 'bar'. But, unfortunately, since the <code>script</code> tag is part of a larger HTML page, I cannot single out that tag and append it like the example above. Well, I can, but that would require scanning <code>innerHTML</code> content for <code>script</code> tags, and replacing them in the string by placeholders, and then inserting them using the DOM. Sounds not <em>that</em> trivial.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>So you're using a DOM method to create a <code>script</code> element and append that to an existing element and this then causes the content of the appended <code>script</code> element to execute? That sounds good.</p>\n\n<p>You say that the script tag is part of a larger HTML page and therefore cannot be singled out. Can you not give the script tag an ID and target it? I'm probably missing something obvious here.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In theory, yes, I can single out a script tag that way. The problem is that we potentially have dozens of situations where this occurs, so I am trying to find some cause or documentation of this behavior.</p>\n\n<p>Also, the <code>script</code> tag does not seem to be a part of the DOM anymore after it gets loaded. In our environment, my <code>container</code> div remains empty, so I cannot fetch the <code>script</code> tag. It should work, though, because in my example above the script does not get executed, but is still part of the DOM.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>document.write</code> is about as deprecated as they come. Thanks to the wonders of JavaScript, though, you can just assign your own function to the <code>write</code> method of the <code>document</code> object which uses <code>innerHTML</code> on an element of your choosing to append the supplied content.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In general, script tags aren't executed when using innerHTML. In your case, this is good, because the <code>document.write</code> call would wipe out everything that's already in the page. However, that leaves you without whatever HTML document.write was supposed to add.</p>\n\n<p>jQuery's HTML manipulation methods will execute scripts in HTML for you, the trick is then capturing the calls to <code>document.write</code> and getting the HTML in the proper place. If it's simple enough, then something like this will do:</p>\n\n<pre><code>var content = '';\ndocument.write = function(s) {\n    content += s;\n};\n// execute the script\n$('#foo').html(markupWithScriptInIt);\n$('#foo .whereverTheDocumentWriteContentGoes').html(content);\n</code></pre>\n\n<p>It gets complicated though. If the script is on another domain, it will be loaded asynchronously, so you'll have to wait until it's done to get the content. Also, what if it just writes the HTML into the middle of the fragment without a wrapper element that you can easily select? <a href=\"http://github.com/iamnoah/writeCapture\">writeCapture.js</a>  (full disclosure: I wrote it) handles all of these problems. I'd recommend just using it, but at the very least you can look at the code to see how it handles everything.</p>\n\n<p>EDIT: Here is a <a href=\"http://iamnoah.github.com/writeCapture/lbFlickrDemo.html\">page</a> demonstrating what sounds like the effect you want.</p>\n",
                    "is_accepted": true,
                    "score": 9
                },
                {
                    "body": "<p>use <code>document.writeln(content);</code> instead of <code>document.write</code>, but best of all is using </p>\n\n<pre><code>innerHTML.\n&lt;br&gt;use element.innerHTML += content;\n</code></pre>\n\n<p>instead <code>element.innerHTML = content;</code> to add your text after element old string (like <code>document.write</code>) or it will overwrite your element's innerHTML!</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am currently loading a lightbox style popup that loads it's HTML from an XHR call. This content is then displayed in a 'modal' popup using <code>element.innerHTML = content</code> This works like a charm.</p>\n\n<p>In another section of this website I use a Flickr 'badge' (<a href=\"http://www.elliotswan.com/2006/08/06/custom-flickr-badge-api-documentation/\">http://www.elliotswan.com/2006/08/06/custom-flickr-badge-api-documentation/</a>) to load flickr images dynamically. This is done including a script tag that loads a flickr javascript, which in turn does some <code>document.write</code> statments.</p>\n\n<p>Both of them work perfectly when included in the HTML. Only when loading the flickr badge code <em>inside</em> the lightbox, no content is rendered at all. It seems that using <code>innerHTML</code> to write <code>document.write</code> statements is taking it a step too far, but I cannot find any clue in the javascript implementations (FF2&amp;3, IE6&amp;7) of this behavior.</p>\n\n<p>Can anyone clarify if this should or shouldn't work? Thanks.</p>\n",
            "last_activity_date": 1339630874,
            "question_id": 53945,
            "score": 15,
            "tags": [
                "javascript",
                "html",
                "ajax"
            ],
            "title": "Dynamically inserting javascript into HTML that uses document.write"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>What should happen in the case of overflow?  If you want it to just get to the bottom of the window, use absolute positioning:</p>\n\n<pre><code>div {\n  position:absolute;\n  top:300px;\n  bottom:0px;\n  left:30px;\n  right:30px;\n}\n</code></pre>\n\n<p>This will put the div 30 px in from each side, 300 px from the top of the screen, and flush with the bottom.  Add an \"overflow:auto;\" to handle cases where the content is larger than the div.\n<hr/>\nEdit: @Whoever marked this down, an explanation would be nice... Is something wrong with the answer?</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>The DIV houses a control that does it's own overflow handling.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If I understand what you're asking, this should do the trick:</p>\n\n<pre><code>// the more standards compliant browsers (mozilla/netscape/opera/IE7) use \n// window.innerWidth and window.innerHeight\n\nvar windowHeight;\n\nif (typeof window.innerWidth != 'undefined')\n{\n    windowHeight = window.innerHeight;\n}\n// IE6 in standards compliant mode (i.e. with a valid doctype as the first \n// line in the document)\nelse if (typeof document.documentElement != 'undefined'\n        &amp;&amp; typeof document.documentElement.clientWidth != 'undefined' \n        &amp;&amp; document.documentElement.clientWidth != 0)\n{\n    windowHeight = document.documentElement.clientHeight;\n}\n// older versions of IE\nelse\n{\n    windowHeight = document.getElementsByTagName('body')[0].clientHeight;\n}\n\ndocument.getElementById(\"yourDiv\").height = windowHeight - 300 + \"px\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>document.getElementById('myDiv').style.height = 500;</p>\n\n<p>This is the very basic JS code required to adjust the height of your object dynamically.  I just did this very thing where I had some auto height property, but when I add some content via XMLHttpRequest I needed to resize my parent div and this offsetheight property did the trick in IE6/7 and FF3</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<blockquote>\n  <p>@17 of 26 I used to have a solution like this - I found that it ran into weird issues with ie 6.0 sometimes being off by a few pixels, which really made the layout look odd.</p>\n</blockquote>\n\n<p>Yeah, in my solution I just wound up shrinking the height by an arbitrary number of pixels for IE.</p>\n\n<p>I could not find any other way to dynamically size a div though.  A lot of my layout uses tables since they handle dynamically sized content automatically.</p>\n\n<p>Cross-browser web design just plain sucks :P.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this simple, specific function:</p>\n\n<pre><code>function resizeElementHeight(element) {\n  var height = 0;\n  var body = window.document.body;\n  if (window.innerHeight) {\n      height = window.innerHeight;\n  } else if (body.parentElement.clientHeight) {\n      height = body.parentElement.clientHeight;\n  } else if (body &amp;&amp; body.clientHeight) {\n      height = body.clientHeight;\n  }\n  element.style.height = ((height - element.offsetTop) + \"px\");\n}\n</code></pre>\n\n<p>It does not depend on the current distance from the top of the body being specified (in case your 300px changes).</p>\n\n<p><hr /></p>\n\n<p>EDIT: By the way, you would want to call this on that div every time the user changed the browser's size, so you would need to wire up the event handler for that, of course.</p>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>With minor corrections:</p>\n\n<pre><code>function rearrange()\n{\nvar windowHeight;\n\nif (typeof window.innerWidth != 'undefined')\n{\n\twindowHeight = window.innerHeight;\n}\n// IE6 in standards compliant mode (i.e. with a valid doctype as the first\n// line in the document)\nelse if (typeof document.documentElement != 'undefined'\n\t\t&amp;&amp; typeof document.documentElement.clientWidth != 'undefined'\n\t\t&amp;&amp; document.documentElement.clientWidth != 0)\n{\n\twindowHeight = document.documentElement.clientHeight;\n}\n// older versions of IE\nelse\n{\n\twindowHeight = document.getElementsByTagName('body')[0].clientHeight;\n}\n\ndocument.getElementById(\"foobar\").style.height = (windowHeight - document.getElementById(\"foobar\").offsetTop  - 6)+ \"px\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Simplest I could come up...</p>\n\n<pre><code>function resizeResizeableHeight() {\n    $('.resizableHeight').each( function() {\n        $(this).outerHeight( $(this).parent().height() - ( $(this).offset().top - ( $(this).parent().offset().top + parseInt( $(this).parent().css('padding-top') ) ) ) )\n    });\n}\n</code></pre>\n\n<p>Now all you have to do is add the resizableHeight class to everything you want to autosize (to it's parent).</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In a web application I'm working on, I have a page that contains a DIV that has an auto-width depending on the width of the browser window.</p>\n\n<p>However, I need to be able to have an auto-height for the object.  The DIV starts about 300px from the top screen, and it's height should make it stretch to the bottom of the browser screen.  I have a max height for the container DIV, so there would have to be minimum-height for the div.  But I believe I can just restrict that in CSS, and use Javascript to handle the resizing of the DIV.</p>\n\n<p>My javascript isn't nearly as good as it should be.  Is there an easy script I could write that would do this for me?</p>\n\n<p>Edit: \nThe DIV houses a control that does it's own overflow handling (implements its own scroll bar).</p>\n",
            "last_activity_date": 1412002556,
            "question_id": 33080,
            "score": 15,
            "tags": [
                "javascript",
                "css",
                "html",
                "height"
            ],
            "title": "Setting the height of a DIV dynamically"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>It's not really a performance question at all, since arrays and objects work very differently (or are supposed to, at least). Arrays have a continuous index <code>0..n</code>, while objects map arbitrary keys to arbitrary values. If <em>you</em> want to supply specific keys, the only choice is an object. If you don't care about the keys, an array it is.</p>\n\n<p>If you try to set arbitrary (numeric) keys on an array, you really have a performance <em>loss</em>, since the array will fill in all indexes in-between:</p>\n\n<pre><code>&gt; foo = [];\n  []\n&gt; foo[100] = 'a';\n  \"a\"\n&gt; foo\n  [undefined, undefined, undefined, ..., \"a\"]\n</code></pre>\n\n<p>The literals for both options should make it very clear how they can be used:</p>\n\n<pre><code>var arr = ['foo', 'bar', 'baz'];     // no keys, not even the option for it\nvar obj = { foo : 'bar', baz : 42 }; // associative by its very nature\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><strong>The short version: Arrays are mostly faster than objects. But there is no 100% correct solution.</strong></p>\n\n<h1>Explanation</h1>\n\n<p>There are some misconceptions in your question.</p>\n\n<h2>There are no associative arrays in Javascript. Only Arrays and Objects.</h2>\n\n<p><strong>These are arrays:</strong></p>\n\n<pre><code>var a1 = [1, 2, 3];\nvar a2 = [\"a\", \"b\", \"c\"];\nvar a3 = [];\na3[0] = \"a\";\na3[1] = \"b\";\na3[2] = \"c\";\n</code></pre>\n\n<p><strong>This is an array, too:</strong></p>\n\n<pre><code>var a3 = [];\na3[29938] = \"a\";\na3[32994] = \"b\";\n</code></pre>\n\n<p>It's basically an array with holes in it, because every array does have continous indexing. It's slower than arrays without holes. But iterating manually through the array is even slower (mostly).</p>\n\n<p><strong>This is an object:</strong></p>\n\n<pre><code>var a3 = {};\na3[29938] = \"a\";\na3[32994] = \"b\";\n</code></pre>\n\n<p>Here is a performance test of three possibilities:</p>\n\n<h2><a href=\"http://jsperf.com/array-vs-object-performance\">Lookup Array vs Holey Array vs Object Performance Test</a></h2>\n\n<p>An excellent read about these topics at Smashing Magazine: <a href=\"http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/\">Writing fast memory efficient JavaScript</a></p>\n",
                    "is_accepted": true,
                    "score": 24
                },
                {
                    "body": "<p>I tried to take this to the next dimension, literally.  </p>\n\n<p>Given a 2 dimensional array, in which the x and y axes are always the same length, is it faster to:</p>\n\n<p>a) look up the cell by creating a two dimensional array and looking up the first index, followed by the second index, i.e:    </p>\n\n<p>var arr=[][]<br>\nvar cell=[x][y]    </p>\n\n<p>or</p>\n\n<p>b) create an object with a string representation of the x and y coordinates, and then do a single lookup on that obj, i.e:   </p>\n\n<p>var obj={}<br>\nvar cell = obj['x,y']    </p>\n\n<p>Result:<br>\nTurns out that it's much faster to do two numeric index lookups on the arrays, than one property lookup on the object.</p>\n\n<p>Results here:</p>\n\n<p><a href=\"http://jsperf.com/arr-vs-obj-lookup-2\" rel=\"nofollow\">http://jsperf.com/arr-vs-obj-lookup-2</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a model with possibly thousands of objects. I was wondering what would be the most efficient way of storing them and retrieving a single object once I have it's id. The id's are long numbers.</p>\n\n<p>So these are the 2 options I was thinking about. in option one it's a simple array with an incrementing index. in option 2 it's an associative array and maybe an object, if it makes a difference. My question is which one is more efficient, when I mostly need to retrieve a single object, but also sometimes loop through them and sort.</p>\n\n<pre><code>// option one: non associative array\nvar a = [{id: 29938, name: 'name1'},\n         {id: 32994, name: 'name1'}];\nfunction getObject(id) {\n    for (var i=0; i &lt; a.length; i++) {\n        if (a[i].id = id) \n            return a[i];\n    }\n}\n\n// option two: associative array\nvar a = [];  // maybe {} makes a difference?\na[29938] = {id: 29938, name: 'name1'};\na[32994] = {id: 32994, name: 'name1'};\nfunction getObject(id) {\n    return a[id];\n}\n</code></pre>\n\n<p><strong>Update:</strong></p>\n\n<p>OK, I get that using an array in the second option is out of the question. So the declaration line the second option should really be: <code>var a = {};</code> and the only question is: what is performing better in retrieving an object with a given id: an array or an object where the id is the key.</p>\n\n<p>and also, will the answer change if i will have to sort the list many times?</p>\n",
            "last_activity_date": 1423943445,
            "question_id": 17295056,
            "score": 14,
            "tags": [
                "javascript",
                "performance"
            ],
            "title": "Array vs. Object efficiency in JavaScript"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Did you read the top of the page you linked to in Apple's documentation? It says:</p>\n\n<blockquote>\n  <p>Note: This technology is supported only on desktop versions of Safari. For iOS, use DOM Touch, described in Handling Events (part of Safari Web Content Guide) and Safari DOM Additions Reference.</p>\n</blockquote>\n\n<p><a href=\"http://developer.apple.com/library/safari/#documentation/appleapplications/Reference/SafariWebContent/HandlingEvents/HandlingEvents.html#//apple_ref/doc/uid/TP40006511\" rel=\"nofollow\">DOM Touch link</a></p>\n\n<p><a href=\"http://developer.apple.com/library/safari/#documentation/appleapplications/Reference/SafariJSRef/_index.html#//apple_ref/doc/uid/TP40001482\" rel=\"nofollow\">Safari DOM Additions link</a></p>\n\n<p>I believe you may want to listen for the touchmove and touchend events instead of on drag and on drop. :)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Working alternative :</p>\n\n<p>Firstly, use jquery UI <a href=\"http://jqueryui.com/demos/\">http://jqueryui.com/demos/</a> for drag and drop functionality </p>\n\n<p>and then add this script <a href=\"https://github.com/furf/jquery-ui-touch-punch\">https://github.com/furf/jquery-ui-touch-punch</a> for playing it in Ipad or Iphone.</p>\n\n<p>Hope it helps.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I had a similar issue with one of my project but it can be resolved by following tutorial: <a href=\"http://popdevelop.com/2010/08/touching-the-web/\" rel=\"nofollow\">http://popdevelop.com/2010/08/touching-the-web/</a> .  It works for me I hope you will like it. </p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am coding a webpage to be viewed on iPad. It uses Safaris/Webkits drag &amp; drop. I have exactly copied Safari's example drag &amp; drop code but it wont work.</p>\n\n<p><strong>My Problem:</strong> The ondrop event is never triggered when I run the webpage(HTML, CSS &amp; Javascript) on Safari Desktop or on Safari on an iPad. On ipad I cannot even drag the elements(the microscope thingie appears &amp; it wont drag when I hold &amp; move my finger over the element). The drag does work on desktop though.</p>\n\n<p>Whats going wrong?</p>\n\n<p>The small code example can be found at the very bottom of this page: <a href=\"http://developer.apple.com/library/safari/#documentation/appleapplications/Conceptual/SafariJSProgTopics/Tasks/DragAndDrop.html\">http://developer.apple.com/library/safari/#documentation/appleapplications/Conceptual/SafariJSProgTopics/Tasks/DragAndDrop.html</a></p>\n\n<p><strong>Here is the JSFiddle</strong>(remember the drag &amp; drop is Webkit so only for Safari-this webpage is for ipad only): <a href=\"http://jsfiddle.net/eyM3y/\">http://jsfiddle.net/eyM3y/</a></p>\n",
            "last_activity_date": 1329315120,
            "question_id": 8766052,
            "score": 14,
            "tags": [
                "javascript",
                "html",
                "css",
                "safari",
                "drag-and-drop"
            ],
            "title": "Drag &amp; Drop on Safari iOS: Wont drag, wont respond to drop on desktop/iPad"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>It's probably used to mark internal/private properties. Just like in python prefixing a variable with a underscore is an easy way to tell developers that a variable is internal and they better not tamper with it (and if they do so, even a minor update of the involved library may break things).</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It means private fields or private methods. Methods that are only for internal use.</p>\n\n<p>They should not be invoked outside of the class.</p>\n\n<p>Private fields contain data for internal use.</p>\n\n<p>They should not be read or written into (directly) from outside of the class.</p>\n",
                    "is_accepted": true,
                    "score": 24
                },
                {
                    "body": "<p>Usually <code>_</code> is used to tell the user/programmer that it is a private/protected variable in question.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As far as I'm aware, it's generally used to indicate a private variable (but doesn't actually provide any privacy, just a convention).</p>\n\n<p>It's discussed briefly here, though they're advised against:\n<a href=\"http://javascript.crockford.com/code.html\" rel=\"nofollow\">http://javascript.crockford.com/code.html</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>When used like <code>_varname</code> it's just part of the variables name, and has no javascript meaning. Developers use it to signify the meaning or scope of the variable. In this case it looks like it is telling the developer this variable should be a local or private variable. </p>\n\n<p>A few things to note, in this particular example using <code>_.varname</code> would signify a variable or function with the underscore.js library. Also one could use <code>_varname</code> to signify a variable holding an underscore object, similarly at our office, we use <code>$varname</code> to signify a variable containing a Jquery object.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<pre><code>var Gallery = Backbone.Controller.extend({\n    _index: null,\n    _photos: null,\n    _album :null,\n    _subalbums:null,\n    _subphotos:null,\n    _data:null,\n    _photosview:null,\n    _currentsub:null,\n    routes: {\n        \"\": \"index\",\n        \"subalbum/:id\": \"subindex\",\n        \"subalbum/:id/\" : \"directphoto\",\n        \"subalbum/:id/:num\" : \"hashphoto\"\n    },\n    initialize: function(options) {\n        var ws = this;\n        if (this._index === null){\n            $.ajax({\n                url: 'data/album1.json',\n                dataType: 'json',\n                data: {},\n                success: function(data) {\n                    ws._data = data;\n                    ws._photos =\n                    new PhotoCollection(data);\n                    ws._index =\n                    new IndexView({model: ws._photos});\n                    Backbone.history.loadUrl();\n                }\n            });\n            return this;\n        }\n        return this;\n    },\n    //Handle rendering the initial view for the\n    //application\n    index: function() {\n        this._index.render();\n    },\n</code></pre>\n\n<p>I'm reading a tutorial on backbone.js here: <a href=\"http://addyosmani.com/blog/building-spas-jquerys-best-friends/\">http://addyosmani.com/blog/building-spas-jquerys-best-friends/</a></p>\n\n<p>What are the underscores? (_index, _photos, _album)  Why use them?</p>\n",
            "last_activity_date": 1394647373,
            "question_id": 8288756,
            "score": 14,
            "tags": [
                "javascript",
                "oop",
                "backbone.js"
            ],
            "title": "In Javascript, what does this underscore mean?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You can use the <a href=\"https://github.com/FriendsOfSymfony/FOSJsRoutingBundle\">FOSJsRoutingBundle</a>.</p>\n",
                    "is_accepted": true,
                    "score": 30
                },
                {
                    "body": "<pre><code>url:  \"{{ path('SampleBundle_route_value',{'parameter':controller_value}) }}\"\n</code></pre>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I know it's an old question, but just in case you don't want to install a bundle like FOSJsRoutingBundle, here's a little hack:</p>\n\n<pre><code>var url = '{{ path(\"yourroute\", {'region_id': 'region_id'}) }}'; \nurl = url.replace(\"region_id\", this.value);\n</code></pre>\n\n<p>'region_id' is just used as a placeholder, then you replace it in JS with your actual variable this.value</p>\n",
                    "is_accepted": false,
                    "score": 24
                }
            ],
            "body": "<p>Quite odd problem, sorry for asking, i'm quite new to Symfony/Twig. My route requires a mandatory <code>region_id</code> paramenter:</p>\n\n<pre><code>ajax_provinces_by_region:\n  pattern: /ajax/region/{region_id}/provinces\n  defaults: {_controller: SWAItaliaInCifreBundle:Ajax:provincesByRegion }\n  requirements: {region_in: \\d+}\n</code></pre>\n\n<p>The <strong>question</strong> is: how can i generate this route based on a <code>select</code> element in javascript (code below)?</p>\n\n<p>The <strong>problem</strong> is: i can't use <code>path</code> and <code>url</code> helpers from Symfony as they require to specify the <code>region_id</code> parameter (<code>this.value</code>) i can't access because it's a javascript variable (and Twig is compiled server-side).</p>\n\n<pre><code>$(document).ready(function() {\n    $('select#regions').change(function(){\n\n        // Make an ajax call to get all region provinces\n        $.ajax({\n            url: // Generate the route using Twig helper\n        });\n\n    });\n});\n</code></pre>\n",
            "last_activity_date": 1367431795,
            "question_id": 7626792,
            "score": 14,
            "tags": [
                "javascript",
                "symfony2",
                "routes",
                "twig"
            ],
            "title": "Generating routes in javascript with Twig and Symfony2"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>I think you're violating the <a href=\"http://en.wikipedia.org/wiki/Same_origin_policy\" rel=\"nofollow\">Same Origin Policy</a>.  You'll notice <a href=\"https://github.com/vimeo/player-api/blob/master/javascript/playground.html\" rel=\"nofollow\">here</a> that where you're doing a lot of event handling, they are using special froogaloop API calls.</p>\n\n<p>I've never used froogaloop so I'm probably wrong.  But that's my guess.  The errors seem to suggest that the iframe is attempting to modify the URL in your browser, and that's now allowed by Same Origin.  That's why the API wraps up window.postMessage for you.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>After hours and hours of frustration... I have found the solution.</p>\n\n<p>Since I was using an ID on the iframe... apparently the vimeo API forces you to add the parameter to the URL you are fetching (player_id=iframe-id). </p>\n\n<p>So the iFrame should look like this: </p>\n\n<pre><code>&lt;iframe src=\"http://player.vimeo.com/video/3718294?api=1&amp;amp;player_id=iframe-video\" width=\"623\" height=\"350\" frameborder=\"0\" id=\"iframe-video\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>Special thanks to Drew Baker for pointing this out: <a href=\"http://vimeo.com/forums/topic:38114#comment_5043696\">http://vimeo.com/forums/topic:38114#comment_5043696</a></p>\n",
                    "is_accepted": true,
                    "score": 44
                }
            ],
            "body": "<p>I'm trying to recognize the onPlay, onPause, and onFinish event for vimeo using the froogaloop API. I've tried everything I could imagine with this thing, and no luck.</p>\n\n<p>I get this error on Firefox:\n<a href=\"http://cl.ly/1I3I0d152O3M1H232528\">http://cl.ly/1I3I0d152O3M1H232528</a></p>\n\n<p>And in Chrome:\n<a href=\"http://cl.ly/1A3z2q1g420g1x3r1x2F\">http://cl.ly/1A3z2q1g420g1x3r1x2F</a></p>\n\n<p>Importing froogaloop from the CDN:</p>\n\n<pre><code>&lt;script src=\"http://a.vimeocdn.com/js/froogaloop2.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>My JS:</p>\n\n<pre><code>$(function(){\n\n    var vimeoPlayer = document.querySelector('iframe');\n\n    $f(vimeoPlayer).addEvent('ready', ready);\n\n    function ready(player_id) {\n\n        froogaloop = $f(player_id);\n\n        function setupEventListeners() {\n            function onPlay() {\n                froogaloop.addEvent('play',\n                function(data) {\n                    console.log('play event');\n                });\n            }\n\n            function onPause() {\n\n                froogaloop.addEvent('pause',\n                function(data) {\n                    console.log('pause event');\n                });\n            }\n\n            function onFinish() {\n                froogaloop.addEvent('finish',\n                function(data) {\n                    console.log('finish');\n                });\n            }\n            onPlay();\n            onPause();\n            onFinish();\n        }\n        setupEventListeners();\n    }\n\n})\n</code></pre>\n\n<p>My HTML: </p>\n\n<pre><code>&lt;iframe src=\"http://player.vimeo.com/video/3718294?api=1\" width=\"623\" height=\"350\" frameborder=\"0\" id=\"iframe-video\"&gt;&lt;/iframe&gt;\n</code></pre>\n",
            "last_activity_date": 1345904100,
            "question_id": 6537415,
            "score": 14,
            "tags": [
                "javascript",
                "jquery",
                "iframe",
                "vimeo",
                "froogaloop"
            ],
            "title": "Vimeo Froogaloop API not recognizing an event"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The <code>PATH</code> really is the important part. You can skip it, however, if you specify the absolute path. Try something like this:</p>\n\n<pre><code>/path/to/phantomjs render_image.js\n</code></pre>\n\n<p>...but that can get tiring. For a quick way to add it to your <code>PATH</code>, from the directory of the <code>phantomjs</code> executable, symbolically link it into <code>/usr/local/bin</code>:</p>\n\n<pre><code>sudo ln -s /path/to/phantomjs /usr/local/bin/\n</code></pre>\n\n<p><code>/usr/local/bin</code> is likely on your <code>PATH</code>.</p>\n",
                    "is_accepted": true,
                    "score": 33
                },
                {
                    "body": "<p>add this line to this file /home/optiman2/.bashrc</p>\n\n<pre><code>PATH=/home/optiman2/phantomjs/bin:$PATH\n</code></pre>\n\n<p>this worked for me.</p>\n\n<p>and remember to use this command, before test phantomjs:\nsource .bashrc</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I followed <a href=\"http://code.google.com/p/phantomjs/wiki/BuildInstructions\">these instructions</a> (except for copying the executable to my PATH because I cannot seem to find it and it does not seem necessary). Then I made a file called image_render.js in my public javascripts directory with </p>\n\n<pre><code>console.log('Hello, world!');\nphantom.exit();\n</code></pre>\n\n<p>inside it, saved it, and ran <code>phantomjs render_image.js</code> in my terminal. However, my terminal does not recognize the command:</p>\n\n<pre><code>-bash: phantomjs: command not found\n</code></pre>\n\n<p>What have I done wrong?</p>\n",
            "last_activity_date": 1405001043,
            "question_id": 6448459,
            "score": 14,
            "tags": [
                "javascript",
                "ruby-on-rails",
                "debugging",
                "error-handling",
                "phantomjs"
            ],
            "title": "phantomjs: command not found"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You could create a closure using an immediate function (one that executes right away) that returns another function:</p>\n\n<pre><code>for (var i = 0; i &lt; some_array.length; i++) {\n    var title = some_array[i];\n    $.getJSON('some.url/' + title, (function() {\n        var ii = i;\n        return function(data) {\n           do_something_with_data(data, ii);\n        };\n    })());\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Create N closures and pass in the value of 'i' each time, like so:</p>\n\n<pre><code>var i, title;\nfor (i = 0; i &lt; some_array.length; i++) {\n    title = some_array[i];\n    $.getJSON('some.url/' + title, (function(i_copy) {\n        return function(data) {\n            do_something_with_data(data, i_copy);\n        };\n    })(i));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You need to understand what a <em>closure</em> is. In javascript, when inside a function you use a variable that was defined in an outer context (outer function or global), you create a closure around that variable, which keeps the variable instantiated and lets the function continue to refer to it each time it is invoked (as well as any other function instances with a closure on the item).</p>\n\n<p>Because the original variable is still instantiated, if you change the value of that variable <em>anywhere</em> in the code, when the function runs later it will have the current changed value, <em>not</em> the value when the function was first created.</p>\n\n<p>Before we address making the closure work right, note that declaring the <code>title</code> variable repeatedly in the loop doesn't work (in fact, you can think of the variable as essentially being <em>hoisted</em> into the <code>function</code>'s scope--<code>for</code> loops have no scope, therefore the variable is declared only <em>once</em> for the function and is <em>not</em> declared or redeclared inside the loop). Declaring the variable outside the loop should help clarify for you why your code isn't working as you'd expect.</p>\n\n<p>As is, when the callbacks run, because they have a closure over the same variable <code>i</code>, they are all affected when <code>i</code> increments and they will all use the <em>current</em> value of <code>i</code> when they run (which will be wrong as you discovered, because the callbacks run <em>after</em> the loop has completely finished creating the callbacks). Asynchronous code (such as the JSON call response) does not and cannot run until all synchronous code finishes executing--so the loop is guaranteed to complete before any callback is ever executed.</p>\n\n<p>To get around this you need a new function to run that has its <em>own</em> scope so that in the callbacks declared inside of the loop, there is a new closure over each <em>different</em> value. You could do that with a separate function, or just use an invoked anonymous function in the callback parameter. Here's an example:</p>\n\n<pre><code>var title, i;\nfor (i = 0; i &lt; some_array.length; i += 1) {\n    title = some_array[i];\n    $.getJSON(\n       'some.url/' + title,\n       (function(thisi) {\n          return function(data) {\n             do_something_with_data(data, thisi);\n             // create a new closure on the parameter thisi\n             // which will hold the correct value at invocation time\n          };\n       }(i)) // calling the function with the current value\n    );\n}\n</code></pre>\n\n<p>For clarity I'll break it out into a separate function so you can see what's going on:</p>\n\n<pre><code>function createCallback(item) {\n   return function(data) {\n      do_something_with_data(data, item);\n      // This reference to the 'item' parameter creates a closure on it.\n      // In this inner function it will have the value as it was at the\n      // time the createCallback function was invoked\n      // (unless, of course, we change it).\n   };\n }\n\nvar title, i, l = some_array.length;\nfor (i = 0; i &lt; l; i += 1) {\n    title = some_array[i];\n    $.getJSON('some.url/' + title, createCallback(i));\n    // Note how this is not a *reference* to the createCallback function, but\n    // the *value that createCallback() returns*, which is itself a function.\n}\n</code></pre>\n\n<p>Note: since your array apparently only has titles in it, you could consider using the <code>title</code> variable instead of <code>i</code> which requires you to go back to <code>some_array</code>. But either way works, you know what you want.</p>\n\n<p>One potentially useful way to think about this that the the callback-creating function (either the anonymous or the <code>createCallback</code> one) in essence converts the <em>value</em> of the <code>i</code> variable into separate <code>thisi</code> variables, via each time introducing a new function with its own scope. Perhaps it could be said that \"parameters break values out of closures\".</p>\n\n<p>Just be careful: this technique will not work on objects without copying them, since objects are reference types. Merely passing them as parameters will not yield something that cannot be changed after the fact. You can duplicate a street address all you like, but this doesn't create a new house. You must build a new house if you want an address that leads to something different.</p>\n",
                    "is_accepted": true,
                    "score": 34
                },
                {
                    "body": "<p>I think some browsers have trouble with making multiple asynchronous calls at the same time, so you could make them one at a time:</p>\n\n<pre><code>var i;\nfunction DoOne(data)\n{\n    if (i &gt;= 0)\n        do_something_with_data(data, i);\n    if (++i &gt;= some_array.length)\n        return;\n    var title = some_array[i];\n    $.getJSON('some.url/' + title, DoOne);\n}\n\n// to start the chain:\ni = -1;\nDoOne(null);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you can modify the service at <code>some.url</code>, it would be <strong>much</strong> better if rather than making a separate HTTP request for each item in <code>some_array</code>, you simply passed every item in the array in a single HTTP request.</p>\n\n<pre><code>$.getJSON('some.url', { items: some_array }, callback);\n</code></pre>\n\n<p>Your array will be JSON serialized and POSTed to the server.  Assuming <code>some_array</code> is an array of strings, the request will look like this:</p>\n\n<pre><code>POST some.url HTTP/1.1\n...\n\n{'items':['a','b','c', ... ]}\n</code></pre>\n\n<p>Your server script should then deserialize the JSON request from the request body and loop over each item in the <code>items</code> array, returning a JSON-serialized array of responses.</p>\n\n<pre><code>HTTP/1.1 200 OK\n...\n\n{'items':[{id:0, ... }, {id:1, ... }, ... ]}\n</code></pre>\n\n<p>(Or whatever data it is you're returning.)  If your response items are in the same order as the request items, it is easy to piece things back together.  In your success callback, simply match the item index with <code>some_array</code>'s index.  Putting it all together:</p>\n\n<pre><code>$.getJSON('some.url', { items: some_array }, function(data) {\n    for (var i = 0; i &lt; data.items.length; i++) {\n        do_something_with_data(data.items[i], i);\n    }\n});\n</code></pre>\n\n<p>By 'batching up' your requests into a single HTTP request like this, you'll <strong>significantly</strong> improve performance.  Consider that if each network round-trip takes at least 200ms, with 5 items, you're looking at a minimum 1 second delay.  By requesting them all at once, network delay stays a constant 200ms.  (Obviously with larger requests, server script execution and network transfer times will come in to play, but performance will still be an order of a magnitude better than if you issue a separate HTTP request for each item.)</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I've never had to use callback functions before, so I may have made a completely stupid mistake. I think I somewhat understand the problem here, but not how to solve it.</p>\n\n<p>My code (a bit simplified) is:</p>\n\n<pre><code>for (var i = 0; i &lt; some_array.length; i++) {\n    var title = some_array[i];\n    $.getJSON('some.url/' + title, function(data) {\n        do_something_with_data(data, i);\n    }\n</code></pre>\n\n<p>Now as far as I understand, this anonymous function will only be called if getJSON() has received the data. But by this point, <code>i</code> does not have the value I would require. Or, as far as my observation goes, it has the last value it would have after the loop is done (shouldn't it be out of bounds?).</p>\n\n<p>As a result, if the array had a size of 6, <code>do_something_with_data()</code> would be called five times with the value 5.</p>\n\n<p>Now I thought, just pass <code>i</code> to the anonymous function</p>\n\n<pre><code>function(data, i) { }\n</code></pre>\n\n<p>but this does not seem to be possible. <strong>i</strong> is undefined now.</p>\n",
            "last_activity_date": 1394954033,
            "question_id": 6129145,
            "score": 14,
            "tags": [
                "javascript",
                "jquery",
                "json"
            ],
            "title": "Pass extra parameter to jQuery getJSON() success callback function"
        }
    ]
}
