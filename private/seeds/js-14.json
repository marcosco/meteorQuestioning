{
    "items": [
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Various clipboard events are available in Javascript, though support is spotty. QuicksMode.org has a <a href=\"http://www.quirksmode.org/dom/events/cutcopypaste.html\">compatibility grid</a> and <a href=\"http://www.quirksmode.org/dom/events/tests/cutcopypaste.html\">test page</a>. The events are not exposed through jQuery, so you'll either have to extend the library or use native Javascript events. </p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>You can add and remove events of any kind by using the <a href=\"http://api.jquery.com/on/\"><code>.on()</code></a> and <a href=\"http://api.jquery.com/off\"><code>off()</code></a> methods</p>\n\n<p>Try this, for instance</p>\n\n<pre><code>jQuery(document).on('paste', function(e){ alert('pasting!') });\n</code></pre>\n\n<p>jQuery is actually quite indifferent to whether the event type you assign is supported by the browser, so you can assign arbitrary event types to elements (and general objects) such as:</p>\n\n<pre><code>jQuery('p').on('foobar2000', function(e){ alert(e.type); });\n</code></pre>\n\n<p>In case of custom event types, you must <a href=\"http://api.jquery.com/trigger\"><code>.trigger()</code></a> them \"manually\" in your code, like this:</p>\n\n<pre><code>jQuery('p').trigger('foobar2000');\n</code></pre>\n\n<p>Neat eh?</p>\n\n<p>Furthermore, to work with proprietary/custom DOM events in a cross-browser compatible way, you may need to use/write an \"jQuery event plugin\" ... example of which may be seen in <del><a href=\"http://plugins.jquery.com/files/jquery.event.wheel.js.txt\">jquery.event.wheel.js</a></del> Brandon Aaron's <a href=\"https://github.com/brandonaaron/jquery-mousewheel\">Mousewheel plugin</a></p>\n",
                    "is_accepted": true,
                    "score": 80
                },
                {
                    "body": "<p>Mozilla supports an \"input\" event which I'm having trouble finding useful documentation for.  At the very least, I know it fires on paste.</p>\n\n<pre><code>   this.addEventListener('input',\n    function(){//stuff here},\n    false\n   );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>The <a href=\"http://docs.jquery.com/Events/bind#typedatafn\">jQuery documentation</a> says the library has built-in support for the following events: blur, focus, load, resize, scroll, unload, click, dblclick, mousedown, mouseup, mousemove, mouseover, mouseout, mouseenter, mouseleave, change, select, submit, keydown, keypress, keyup, and error.</p>\n\n<p>I need to handle cut, copy, and paste events. How best to do that? FWIW, I only need to worry about WebKit (lucky me!).</p>\n\n<p>UPDATE: I'm working on a \"widget\" in a Dashboard-like environment. It uses WebKit, so it only really matters (for my purposes) whether these events are supported there, which it looks like they are.</p>\n",
            "last_activity_date": 1386682731,
            "question_id": 237254,
            "score": 55,
            "tags": [
                "javascript",
                "jquery",
                "event-handling",
                "webkit"
            ],
            "title": "How do you handle oncut, oncopy, and onpaste in jQuery?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Look in JavaScript split() Method</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/split\" rel=\"nofollow\">Mozilla Developer Network</a></li>\n<li><a href=\"http://www.w3schools.com/jsref/jsref_split.asp\" rel=\"nofollow\">W3Schools</a></li>\n</ul>\n\n<p>Usage:</p>\n\n<pre><code>\"something -- something_else\".split(\" -- \") \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>If it is the basic JavaScript split function, look at documentation, <em><a href=\"http://www.w3schools.com/jsref/jsref_split.asp\">JavaScript split() Method</a></em> (<a href=\"http://en.wikipedia.org/wiki/W3Schools\">W3Schools</a>).</p>\n\n<p>Basically, you just do this:</p>\n\n<pre><code>var array = myString.split(' -- ')\n</code></pre>\n\n<p>Then your two values are stored in the array - you can get the values like this:</p>\n\n<pre><code>var firstValue = array[0];\nvar secondValue = array[1];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>Documentation can be found e.g. at <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/split\">MDN</a>. Note that <code>.split()</code> is <strong>not</strong> a jQuery method, but a native string method. </p>\n\n<p>If you use <code>.split()</code> on a string, then you get an array back with the substrings:</p>\n\n<pre><code>var str = 'something -- something_else';\nvar substr = str.split(' -- ');\n// substr[0] contains \"something\"\n// substr[1] contains \"something_else\"\n</code></pre>\n\n<p>If this value is in some field you could also do:</p>\n\n<pre><code>tRow.append($('&lt;td&gt;').text($('[id$=txtEntry2]').val().split(' -- ')[0])));\n</code></pre>\n\n<hr>\n",
                    "is_accepted": true,
                    "score": 240
                },
                {
                    "body": "<pre><code>    var str;\n    var sid = new Array();\n    str = \"your_string\";\n    sid = (str.split(\"_\"));\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>    sid[0]=\"your\";\n    sid[1]=\"string\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I need to break apart a string that always looks like this:</p>\n\n<blockquote>\n  <p>something -- something_else. </p>\n</blockquote>\n\n<p>I need to put \"something_else\" in another input field. Currently, this string example is being added to an HTML table row on the fly like this:</p>\n\n<pre><code>tRow.append($('&lt;td&gt;').text($('[id$=txtEntry2]').val()));\n</code></pre>\n\n<p>I figure \"split\" is the way to go, but there is very little documentation that I can find.</p>\n",
            "last_activity_date": 1409916087,
            "question_id": 2555794,
            "score": 101,
            "tags": [
                "javascript",
                "split"
            ],
            "title": "How to use split?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>I don't recommend to \"download\" CSV data this way. IE7 only allows up to 2000 characters in the address bar, so chances are high that your file gets truncated.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Found a solution that works (with help from <a href=\"http://www.topsemtips.com/2008/11/save-html-table-to-excel-using-jquery/\">http://www.topsemtips.com/2008/11/save-html-table-to-excel-using-jquery/</a>):</p>\n\n<p>I changed the function to:</p>\n\n<pre><code>function popup(data) {\n    $(\"#main div.inner\").append('&lt;form id=\"exportform\" action=\"export.php\" method=\"post\" target=\"_blank\"&gt;&lt;input type=\"hidden\" id=\"exportdata\" name=\"exportdata\" /&gt;&lt;/form&gt;');\n    $(\"#exportdata\").val(data);\n    $(\"#exportform\").submit().remove();\n    return true; \n}\n</code></pre>\n\n<p>And created the file export.php:</p>\n\n<pre><code>&lt;?php\n\n    header(\"Content-type: application/vnd.ms-excel; name='excel'\");\n    header(\"Content-Disposition: filename=export.csv\");\n    header(\"Pragma: no-cache\");\n    header(\"Expires: 0\");\n\n    print $_REQUEST['exportdata'];\n\n?&gt;\n</code></pre>\n\n<p><strong>Update:</strong>\nA more IE7 friendly version:</p>\n\n<pre><code>&lt;?php\n\n    header('Content-Type: application/force-download');\n    header('Content-disposition: attachment; filename=filename.csv');\n\n    print $_POST['exportdata'];\n\n?&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 20
                },
                {
                    "body": "<p>thanks for your question and answer, worked well for me. Here is the (almost identical) ASP.Net version of your solution that I'm using:</p>\n\n<p>Change table2CSV.js popup function to:</p>\n\n<pre><code>function popup(data) {\n       $(\"body\").append('&lt;form id=\"exportform\" action=\"CsvExport.ashx\" method=\"post\" target=\"_blank\"&gt;&lt;input type=\"hidden\" id=\"exportdata\" name=\"exportdata\" /&gt;&lt;/form&gt;');\n       $(\"#exportdata\").val(data);\n       $(\"#exportform\").submit().remove();\n       return true;\n} \n</code></pre>\n\n<p>Noting the change from export.php to a .ashx generic handler.</p>\n\n<p>The generic handler code:</p>\n\n<pre><code> public void ProcessRequest (HttpContext context) {\n    context.Response.ContentType = \"application/force-download\";\n    context.Response.AddHeader(\"content-disposition\", \"filename=filename.csv\");\n\n    context.Response.Write(context.Request.Form[\"exportdata\"]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I highly recommend using <a href=\"http://datatables.net/extras/tabletools/\" rel=\"nofollow\">http://datatables.net/extras/tabletools/</a>, it makes is very easy to play around with tables</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Not compatible with all browsers, but no server side needed! Try the code below <a href=\"http://jsfiddle.net/TdWgC/3/\" rel=\"nofollow\">using JSFiddle</a> and tell us if it is running in your browser.</p>\n\n<pre><code>$('&lt;a&gt;&lt;/a&gt;')\n    .attr('id','downloadFile')\n    .attr('href','data:text/csv;charset=utf8,' + encodeURIComponent(data))\n    .attr('download','filename.csv')\n    .appendTo('body');\n\n$('#downloadFile').ready(function() {\n    $('#downloadFile').get(0).click();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm using the jQuery Table to CSV Plugin.  I've altered the popup so that it tells the browser to download a CSV file.</p>\n\n<p>It was:</p>\n\n<pre><code>function popup(data) {\n  var generator = window.open('', 'csv', 'height=400,width=600'); \n  generator.document.write('&lt;html&gt;&lt;head&gt;&lt;title&gt;CSV&lt;/title&gt;'); \n  generator.document.write('&lt;/head&gt;&lt;body &gt;'); \n  generator.document.write('&lt;textArea cols=70 rows=15 wrap=\"off\" &gt;'); \n  generator.document.write(data); \n  generator.document.write('&lt;/textArea&gt;'); \n  generator.document.write('&lt;/body&gt;&lt;/html&gt;'); \n  generator.document.close();\n  return true; \n}\n</code></pre>\n\n<p>I've changed it to:</p>\n\n<pre><code>function popup(data) {\n  window.location='data:text/csv;charset=utf8,' + encodeURIComponent(data);\n  return true; \n}\n</code></pre>\n\n<p>It works, for the most part.  It still requires that you find your spreadsheet software, and create your own filename...because it creates a strange file name (Example: 14YuskG_.csv.part).</p>\n\n<p>Any suggestions on how to improve this?</p>\n",
            "last_activity_date": 1392749096,
            "question_id": 921037,
            "score": 30,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "jQuery Table to CSV export"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<pre><code>h.className = h.className + (h.className ? ' error' : 'error')\n</code></pre>\n\n<p>You want the operator to work for <code>h.className</code>, better be specific about it.<br>\nOf course, no harm should come from  <code>h.className += ' error'</code>, but that's another matter.</p>\n\n<p>Also, note that <code>+</code> has precedence over the ternary operator: <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Operator_Precedence\">JavaScript Operator Precedence</a> </p>\n",
                    "is_accepted": true,
                    "score": 138
                },
                {
                    "body": "<p>The right hand side of the <code>=</code> operator is evaluated left to right.  So, </p>\n\n<pre><code>g.className = h.className + h.className ? ' error' : 'error';`\n</code></pre>\n\n<p>is equivalent to </p>\n\n<pre><code>h.className = (h.className + h.className) ? ' error' : 'error';\n</code></pre>\n\n<p>To be equivalent to </p>\n\n<pre><code>h.className += h.className ? ' error' : 'error';\n</code></pre>\n\n<p>you have to separate the ternary statement in parenthesis</p>\n\n<pre><code>h.className = h.className + (h.className ? ' error' : 'error');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The <code>+=</code> does what you want, but in the ternary statement at the right hand of it, it checks if <code>h.className</code> is falsey, which it would be if it was undefined. If it's truthy (i.e. if a class name is already specified), then error is added with a space (i.e. adding a <em>new</em> class), otherwise it's added without the space.</p>\n\n<p>The code could be rewritten as you suggest, but you need to specify that <code>h.className</code> is to be used for truthiness-comparison, rather than for using its actual value, in the ternary operator, so make sure you don't bother with the concatenation of values at the same time as doing your ternary operation:</p>\n\n<pre><code>h.className = h.className + (h.className ? ' error' : 'error');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>if (h.className) {\n    h.className = h.className + ' error';\n} else {\n    h.className = h.className + 'error';\n}\n</code></pre>\n\n<p>should be equivalent of:</p>\n\n<pre><code>h.className += h.className ? ' error' : 'error';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Think of it this way:</p>\n\n<pre><code>&lt;variable&gt; = &lt;expression&gt; ? &lt;true clause&gt; : &lt;false clause&gt;\n</code></pre>\n\n<p>The way the statement gets executed is basically as follows:</p>\n\n<ol>\n<li>Does <code>&lt;expression&gt;</code> evaluate to true, or does it evaluate to false?</li>\n<li>If <code>&lt;expression&gt;</code> evaluates to true, then the value of <code>&lt;true clause&gt;</code> is assigned to <code>&lt;variable&gt;</code>, <code>&lt;false clause&gt;</code> is ignored, and the next statement is executed.</li>\n<li>If <code>&lt;expression&gt;</code> evaluates to false, then <code>&lt;true clause&gt;</code> is ignored and the value of <code>&lt;false clause&gt;</code> is assigned to <code>&lt;variable&gt;</code>.</li>\n</ol>\n\n<p>The important thing to realise with the ternary operator in this and other languages is that whatever code is in <code>&lt;expression&gt;</code> should produce a boolean result when evaluated: either true or false.</p>\n\n<p>In the case of your example replace \"assigned to\" in my explanation with \"added to\", or similar for whichever shorthand arithmetic you are using, if any.</p>\n",
                    "is_accepted": false,
                    "score": 120
                },
                {
                    "body": "<p>I would like to pick explanation of wayne :</p>\n\n<pre><code>&lt;variable&gt; = &lt;expression&gt; ? &lt;true clause&gt; : &lt;false clause&gt;\n</code></pre>\n\n<p>Lets consider both the cases:</p>\n\n<pre><code>case 1:\nh.className += h.className ? 'true' : 'false'     \n</code></pre>\n\n<ul>\n<li>assignment operator works fine and value gets appended </li>\n<li>when runs for the first time, o/p: false</li>\n<li>2nd time. o/p: falsetrue -- values keeps appending</li>\n</ul>\n\n<blockquote>\n  <p>case2: \n  h.className = h.className + h.className ? 'true' : 'false'</p>\n</blockquote>\n\n<ul>\n<li>the result is not same as case 1</li>\n<li>when runs for the first time, o/p: false</li>\n<li>2nd time. o/p: false -- values doesn't keep appending</li>\n</ul>\n\n<p><code>explanation</code></p>\n\n<blockquote>\n  <p>In the above code, case 1 works fine</p>\n</blockquote>\n\n<p>whereas\n case2: </p>\n\n<pre><code>h.className = h.className + h.className ? 'true' : 'false'\nis executed as \n h.className = (h.className + h.className) ? 'true' : 'false'\n</code></pre>\n\n<p><code>h.className + h.className</code> => considered as expression for ternary operator as ternary operator is given higher precedence. so, always the result of the ternary expression is just assigned</p>\n\n<p><s>You need to define the precedence by using brackets </s></p>\n\n<p>You need to define the order of evaluation to be considered with the help of brackets for case 2 to work as case 1 </p>\n\n<pre><code>h.className = h.className + (h.className ? ' error' : 'error') \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know this is a very old question, but I am not 100% happy with any of the answers as they all seem incomplete. So here we go again from first principals:</p>\n\n<h2>The user's overall aim:</h2>\n\n<p>Summarising the code: <em>\"I wish to add an <code>error</code> class name to a string, optionally with a leading space if there are already class names in the string.\"</em></p>\n\n<h2>Simplest solution</h2>\n\n<p>As Kobi pointed out, 5 years ago, having a leading space in class names will not cause any problems with any known browsers, so the shortest correct solution would actually be:</p>\n\n<pre><code>h.className += ' error';\n</code></pre>\n\n<p>That should have been the <em>actual answer</em> to the <em>actual problem</em>.</p>\n\n<hr>\n\n<p>Be that as it may, the questions asked were...</p>\n\n<h2>1) Why did this work?</h2>\n\n<pre><code>h.className += h.className ? ' error' : 'error'\n</code></pre>\n\n<p>The conditional/ternary operator works like an if statement, that assigns the result of its <code>true</code> or <code>false</code> paths to a variable.</p>\n\n<p>So that code worked because it is evaluated simply as:</p>\n\n<pre><code>if (h.className IS NOT null AND IS NOT undefined AND IS NOT '') \n    h.className += ' error'\nelse\n    h.className += 'error'\n</code></pre>\n\n<h2>2) and why did this break?</h2>\n\n<pre><code>h.className = h.className + h.className ? ' error' : 'error'\n</code></pre>\n\n<p>The question states \"that gives a[n] error in my console\", which may mislead you into thinking the code <em>does not function</em>. In fact the following code does run, without <em>error</em>, but it simply returns ' error' if the string <em>was not</em> empty and 'error' if the string <em>was</em> empty and so <em>did not meet the requirements</em>.</p>\n\n<p>That code always results in a string that contains only <code>' error'</code> or <code>'error'</code> because it evaluates to this pseudo code:</p>\n\n<pre><code>if ((h.className + h.className) IS NOT null AND IS NOT undefined AND IS NOT '')\n    h.className = ' error'\nelse\n    h.className = 'error'\n</code></pre>\n\n<p>The reason for this is that the addition operator (<code>+</code> to the common folk) has higher \"precedence\" (6) than the conditional/ternary operator (15). <em>I know the numbers appear backwards</em></p>\n\n<p><em>Precedence</em> simply means that each type of operator in a language is evaluated in a particular predefined order (and not just left-to-right).</p>\n\n<h2>Reference: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence\" rel=\"nofollow\">Javascript Operator Precedence</a></h2>\n\n<h2>How to change the order of evaluation:</h2>\n\n<p>Now we know why it fails, you need to know how to make it work.</p>\n\n<p>Some other answers talk about <em>changing the precedence</em>, but <em>you can't</em>. Precedence is hard-wired into the language. That is just a fixed set of rules... However, you can change the <em>order of evaluation</em>...</p>\n\n<p>The tool in our toolbox that can <em>change the order of evaluation</em> is the grouping operator (aka brackets). It does this by ensuring the expressions in the brackets are evaluated <em>before</em> operations outside the brackets. That's all they do, but that's enough. </p>\n\n<p>Brackets work simply because they (grouping operators) have <em>higher precedence than all other operators</em> (\"there is now a level 0\").</p>\n\n<p>By simply adding brackets you <em>change the order of evaluation</em> to ensure the conditional test is performed first, before the simple string concatenation:</p>\n\n<pre><code>h.className = h.className + (h.className ? ' error' : 'error')\n</code></pre>\n\n<p><em>I will now leave this answer to rust unseen among the others :)</em></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I cant seem to wrap my head around the first part of this code ( += ) in combination with the ternary operator.</p>\n\n<pre><code>h.className += h.className ? ' error' : 'error'\n</code></pre>\n\n<p>The way i think this code works is as following: </p>\n\n<pre><code>h.className = h.className + h.className ? ' error' : 'error'\n</code></pre>\n\n<p>But that isn't correct because that gives a error in my console.</p>\n\n<p>So my question is how should i interpet this code correctly?</p>\n",
            "last_activity_date": 1402570992,
            "question_id": 1788917,
            "score": 110,
            "tags": [
                "javascript",
                "variable-assignment",
                "conditional-operator",
                "operator-precedence",
                "compound-assignment"
            ],
            "title": "Operator precedence with Javascript Ternary operator"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>If it's a global variable then <code>window[variableName]</code>\nor in your case <code>window[\"onlyVideo\"]</code> should do the trick.</p>\n",
                    "is_accepted": true,
                    "score": 88
                },
                {
                    "body": "<p>Javascript has an Eval() function for such occassions</p>\n\n<pre><code>function (varString) {\n  var myVar = eval(varString);\n  // .....\n}\n</code></pre>\n\n<p>Edit: Sorry, I think I skimmed the question too quickly.  This will only get you the variable, to set it you need</p>\n\n<pre><code>function SetTo5(varString) {\n  var newValue = 5;\n  eval(varString + \" = \" + newValue);\n}\n</code></pre>\n\n<p>But I imagine there is a more appropriate way to accomplish what you're looking for? I don't think eval() is something you really want to use unless there's a great reason for it. <a href=\"http://24ways.org/2005/dont-be-eval\">eval()</a></p>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<pre><code>var myString = \"echoHello\";\n\nwindow[myString] = function() {\n    alert(\"Hello!\");\n}\n\nechoHello();\n</code></pre>\n\n<p>Say no to the <strong>evil</strong> eval. Example here: <a href=\"http://fiddle.jshell.net/Shaz/WmA8t/\">http://fiddle.jshell.net/Shaz/WmA8t/</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You can access the window object as an associative array and set it that way</p>\n\n<pre><code>window[\"onlyVideo\"] = \"TEST\";\ndocument.write(onlyVideo);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>As far as eval vs. global variable solutions...</p>\n\n<p>I think there are advantages to each but this is really a false dichotomy.\nIf you are paranoid of the global namespace just create a temporary namespace &amp; use the same technique.</p>\n\n<pre><code>var tempNamespace = {};\nvar myString = \"myVarProperty\";\n\ntempNamespace[myString] = 5;\n</code></pre>\n\n<p>Pretty sure you could then access as tempNamespace.myVarProperty (now 5), avoiding using window for storage. (The string could also be put directly into the brackets)</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The window['variableName'] method ONLY works if the variable is defined in the global scope.  The correct answer is \"Refactor\".  If you can provide an \"Object\" context then a possible general solution exists, but there are some variables which no global function could resolve based on the scope of the variable.</p>\n\n<pre><code>(function(){\n    var findMe = 'no way';\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I've looked for solutions, but couldn't find any that work.</p>\n\n<p>I have a variable called <code>onlyVideo</code>.</p>\n\n<p><code>\"onlyVideo\"</code> the string gets passed into a function.  I want to set the variable <code>onlyVideo</code> inside the function as something.  How can I do that?</p>\n\n<p>(There are a number of variables that could be called into the function, so I need it to work dynamically, not hard coded if statements)</p>\n\n<p><strong>Edit: There's probably a better way of doing what you're attempting to do. I asked this early on in my javascript adventure and I haven't utilized it once since. Look up how javascript objects work.</strong></p>\n\n<p>a simple intro:</p>\n\n<pre><code>// create javascript object\nvar obj = { \"key1\": 0 };\n\n// assign - set \"key2\" to 1\nobj[\"key2\"] = 1;\n\n// read values\nobj.key1 === 0;\nobj.key2 === 1;\n\n// read values with a string, same result as above\n// but works with special characters and spaces\n// and of course variables\nobj[\"key1\"] === 0;\nobj[\"key2\"] === 1;\n\n// read with a variable\nvar key1Str = \"key1\";\nobj[key1Str] === 0;\n</code></pre>\n\n<p>This is much better than using global variables and assigning them via <code>window[variable]</code>. Try to only use global variables if you can confidently say you know what you're doing.</p>\n",
            "last_activity_date": 1421435696,
            "question_id": 5613834,
            "score": 66,
            "tags": [
                "javascript",
                "jquery",
                "variables"
            ],
            "title": "Convert string to variable name in Javascript"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>I would suggest using <a href=\"http://jquery.com/\" rel=\"nofollow\">JQuery</a>, <a href=\"http://beckelman.net/post/2008/11/04/Right-or-Left-Click-Context-Menu-Using-jQuery-Demo.aspx\" rel=\"nofollow\">Here's an example</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I think that you are looking for something like this:</p>\n\n<pre><code>   function rightclick() {\n    var rightclick;\n    var e = window.event;\n    if (e.which) rightclick = (e.which == 3);\n    else if (e.button) rightclick = (e.button == 2);\n    alert(rightclick); // true or false, you can trap right click here by if comparison\n}\n</code></pre>\n\n<p>(<a href=\"http://www.quirksmode.org/js/events_properties.html\">http://www.quirksmode.org/js/events_properties.html</a>)</p>\n\n<p>And then use the onmousedown even with the function rightclick() (if you want to use it globally on whole page you can do this <code>&lt;body onmousedown=rightclick(); &gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Use the <code>oncontextmenu</code> event.</p>\n\n<p>Here's an example:</p>\n\n<pre><code>&lt;div oncontextmenu=\"javascript:alert('success!');return false;\"&gt;\n    Lorem Ipsum\n&lt;/div&gt;\n</code></pre>\n\n<p>And using event listeners:</p>\n\n<pre><code>el.addEventListener('contextmenu', function(ev) {\n    ev.preventDefault();\n    alert('success!');\n    return false;\n}, false);\n</code></pre>\n\n<p>Don't forget to return false, otherwise the standard context menu will still pop up.</p>\n\n<p>If you are going to use a function you've written rather than <code>javascript:alert(\"Success!\")</code>, remember to return false in BOTH the function AND the <code>oncontextmenu</code> attribute.</p>\n",
                    "is_accepted": true,
                    "score": 96
                }
            ],
            "body": "<p>I want to block the standard context menus, and handle the right-click event manually.</p>\n\n<p>How is this done?</p>\n",
            "last_activity_date": 1398154863,
            "question_id": 4235426,
            "score": 67,
            "tags": [
                "javascript",
                "html",
                "events",
                "javascript-events",
                "event-handling"
            ],
            "title": "How can I capture the right-click event in JavaScript?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Assuming that you are using ajax to load the images, you could simply abort the request in the <a href=\"https://developer.mozilla.org/en/DOM/window.onunload\" rel=\"nofollow\">window.onunload</a> event. Declare a global variable for the XMLHttpRequest object that you are using.</p>\n\n<pre><code>var xhr;\n//if using the XMLHttpRequest object directly\n//you may already be doing something like this\nfunction getImage(...){\n  xhr = new XMLHttpRequest();\n  xhr.open(....);\n}\n</code></pre>\n\n<p>if using jQuery, you could assign the return value of the call you $.ajax() or $.get to xhr variable.</p>\n\n<pre><code>xhr = $.ajax(.....);\n</code></pre>\n\n<p>Handle the window.onunload and abort the request.</p>\n\n<pre><code>window.onunload = function(){\n  xhr.abort();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I had the exact same issue, when users 'paged' quickly through (ajax) search results the browser was still trying to download profile images for every page not just the current one. This code worked for me, called on the paging event just before the new search was run:</p>\n\n<pre><code>//cancel image downloads\nif(window.stop !== undefined)\n{\n     window.stop();\n}\nelse if(document.execCommand !== undefined)\n{\n     document.execCommand(\"Stop\", false);\n}\n</code></pre>\n\n<p>Essentially it's like clicking the \"Stop\" button on the browser.</p>\n\n<p>Tested in <strong>IE, FireFox, Chrome, Opera and Safari</strong></p>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<p>The poor mans solution would be to simply set the SRC property of the image tag to an empty string, or point it towards a widget.</p>\n\n<p><em>edit</em></p>\n\n<p>Saw your comment, surprised it doesn't work with changing the SRC property to empty... try using a blank.gif or something.</p>\n\n<p>If that doesn't work, you may be bounded by browser architecture, meaning you are S.O.L.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Reassigning the SRC tag to a different image does not work in IE7, it continues trying to download the first image.</p>\n\n<p>Here is the setup:</p>\n\n<p>I created an HTTP handler that is of type JPEG.  It contains code that never finishes executing.  So someImage.src=myhandler.ashx will perpetually sit there loading until it times out.</p>\n\n<p>In the middle of this, press another button that reassigns the image to a small image file:\nsomeImage.src=small.jpg</p>\n\n<p>The request for myhandler.ashx does not end, even though we have reassigned the src.</p>\n\n<p>Furthermore if you actually delete the node someImage.parentNode.removeChild(someImage) is still keeps trying to download myhandler.ashx</p>\n\n<p>Tested with IE7 and monitored with HTTP Watch Pro.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a website that makes heavy use of Ajax.  Occasionally I need to load large image files on the page for the user.  My question is, when these large image files are being download, is there a way to stop them if, say, the user navigates away from the page displaying the image?  Thanks.</p>\n",
            "last_activity_date": 1394732762,
            "question_id": 930237,
            "score": 37,
            "tags": [
                "javascript",
                "image"
            ],
            "title": "Javascript: Cancel/Stop Image Requests"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>keep your code and, use jquery to handle links.</p>\n\n<pre><code>$(function () {\n  $(\"a\").click(function {\n    window.onbeforeunload = null;\n  });\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 23
                },
                {
                    "body": "<p>Another implementation is the following you can find it in this webpage:\n<a href=\"http://ujap.de/index.php/view/JavascriptCloseHook\">http://ujap.de/index.php/view/JavascriptCloseHook</a></p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;script type=\"text/javascript\"&gt;\n      var hook = true;\n      window.onbeforeunload = function() {\n        if (hook) {\n          return \"Did you save your stuff?\"\n        }\n      }\n      function unhook() {\n        hook=false;\n      }\n    &lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- this will ask for confirmation: --&gt;\n    &lt;a href=\"http://google.com\"&gt;external link&lt;/a&gt;\n\n    &lt;!-- this will go without asking: --&gt;\n    &lt;a href=\"anotherPage.html\" onClick=\"unhook()\"&gt;internal link, un-hooked&lt;/a&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>What it does is you use a variable as a flag.</p>\n",
                    "is_accepted": false,
                    "score": 30
                }
            ],
            "body": "<p>I tried the following code to get an alert upon closing a browser window:</p>\n\n<pre><code>&lt;script language=\"JavaScript\" type=\"text/javascript\"&gt;\n  window.onbeforeunload = confirmExit;\n  function confirmExit()\n  {\n    return \"You have attempted to leave this page.  If you have made any changes to the fields without clicking the Save button, your changes will be lost.  Are you sure you want to exit this page?\";\n  }\n&lt;/script&gt;\n</code></pre>\n\n<p>It works, but if the page contains one hyperlink, clicking on that hyperlink raises the same alert. I need to show the alert only when I close the browser window and not upon clicking hyperlinks.</p>\n",
            "last_activity_date": 1409921167,
            "question_id": 333665,
            "score": 35,
            "tags": [
                "javascript",
                "ajax"
            ],
            "title": "Javascript To Get An Alert When Closing The Browser Window"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>If you want to set something on a timer, you can use JavaScript's <code>setTimeout</code> or <code>setInterval</code> methods:</p>\n\n<pre><code>setTimeout ( expression, timeout );\nsetInterval ( expression, interval );\n</code></pre>\n\n<p>Where <code>expression</code> is a function and <code>timeout</code> and <code>interval</code> are integers in milliseconds. <code>setTimeout</code> runs the timer once and runs the <code>expression</code> once whereas setInterval will run the <code>expression</code> every time the <code>interval</code> passes.</p>\n\n<p>So in your case it would work something like this:</p>\n\n<pre><code>setInterval(function() {\n    //call $.ajax here\n}, 5000); //5 seconds\n</code></pre>\n\n<p>As far as the Ajax goes, see jQuery's <a href=\"http://api.jquery.com/jQuery.ajax/\"><code>ajax()</code> method</a>. If you run an interval, there is nothing stopping you from calling the same <code>ajax()</code> from other places in your code.</p>\n",
                    "is_accepted": true,
                    "score": 45
                }
            ],
            "body": "<p>I was wondering if someone could help me out. I have a php page that echos out rows from a database. I want to call it via jquery/ajax every 30 seconds. But I also want to be able to call the page at any time so that if I add a record via the form, once the form submits I want the page via called to ajax to update the results right away. Can anyone point me in the right direction or provide some base code so I can try to figure this out? Still very new to jquery/ajax.</p>\n",
            "last_activity_date": 1411440971,
            "question_id": 4542863,
            "score": 29,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "timer",
                "setinterval"
            ],
            "title": "Jquery/Ajax call with timer"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>The <a href=\"https://developer.mozilla.org/en/DOM/event.initKeyEvent\" rel=\"nofollow\">Mozilla Developer Center</a> provides the following explanation:</p>\n\n<ol>\n<li>Create an event using <code>document.createEvent(\"KeyboardEvent\")</code></li>\n<li><p>Init the keyevent using</p>\n\n<p><code>event.initKeyEvent (type, bubbles, cancelable, viewArg, \n       ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, \n           keyCodeArg, charCodeArg)</code></p></li>\n<li><p><a href=\"https://developer.mozilla.org/en/DOM/element.dispatchEvent\" rel=\"nofollow\">Dispatch the event</a></p></li>\n</ol>\n\n<p>I don't see the last one in your code, maybe that's what you're missing. I hope this works in IE as well...</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Did you dispatch the event correctly?</p>\n\n<pre><code>function simulateKeyEvent(character) {\n  var evt = document.createEvent(\"KeyboardEvent\");\n  (evt.initKeyEvent || evt.initKeyboardEvent)(\"keypress\", true, true, window,\n                    0, 0, 0, 0,\n                    0, character.charCodeAt(0)) \n  var canceled = !body.dispatchEvent(evt);\n  if(canceled) {\n    // A handler called preventDefault\n    alert(\"canceled\");\n  } else {\n    // None of the handlers called preventDefault\n    alert(\"not canceled\");\n  }\n}\n</code></pre>\n\n<p>If you use jQuery, you could do:</p>\n\n<pre><code>function simulateKeyPress(character) {\n  jQuery.event.trigger({ type : 'keypress', which : character.charCodeAt(0) });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>I am working on <a href=\"https://github.com/termi/DOM-Keyboard-Event-Level-3-polyfill\">DOM Keyboard Event Level 3 polyfill</a> . In latest browsers or with this polyfill you can do something like this:</p>\n\n<pre><code>element.addEventListener(\"keydown\", function(e){ console.log(e.key, e.char, e.keyCode) })\n\nvar e = new KeyboardEvent(\"keydown\", {bubbles : true, cancelable : true, key : \"Q\", char : \"Q\", shiftKey : true});\nelement.dispatchEvent(e);\n\n//If you need legacy property \"keyCode\"\n// Note: In some browsers you can't overwrite \"keyCode\" property. (At least in Safari)\ndelete e.keyCode;\nObject.defineProperty(e, \"keyCode\", {\"value\" : 666})\n</code></pre>\n\n<p>UPDATE:</p>\n\n<p>Now my polyfill supports legacy properties \"keyCode\", \"charCode\" and \"which\"</p>\n\n<pre><code>var e = new KeyboardEvent(\"keydown\", {\n    bubbles : true,\n    cancelable : true,\n    char : \"Q\",\n    key : \"q\",\n    shiftKey : true,\n    keyCode : 81\n});\n</code></pre>\n\n<p>Examples <a href=\"http://jsfiddle.net/termi/yjc5F/\">here</a></p>\n\n<p>Additionally here is cross-browser initKeyboardEvent separately from my polyfill: <a href=\"https://gist.github.com/4654819/\">(gist)</a></p>\n\n<p>Polyfill <a href=\"http://h123.ru/-/tests/KeyboardEvent\">demo</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>This is due to a <a href=\"https://bugs.webkit.org/show_bug.cgi?id=16735\">bug</a> in Webkit.</p>\n\n<p>You can work around the Webkit bug using <code>createEvent('Event')</code> rather than <code>createEvent('KeyboardEvent')</code>, and then assigning the <code>keyCode</code> property. See <a href=\"http://stackoverflow.com/a/12522752/52207\">this answer</a> and <a href=\"http://jsbin.com/awenaq/3\">this example</a>.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I am not very good with this but <code>KeyboardEvent</code> => see <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent\" rel=\"nofollow\">KeyboardEvent</a>\n is initialized with <code>initKeyEvent</code> .<br />\nHere is an example for emitting event on <code>&lt;input type=\"text\" /&gt;</code> element\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>document.getElementById(\"txbox\").addEventListener(\"keypress\", function(e) {\r\n  alert(\"Event \" + e.type + \" emitted!\\nKey / Char Code: \" + e.keyCode + \" / \" + e.charCode);\r\n}, false);\r\n\r\ndocument.getElementById(\"btn\").addEventListener(\"click\", function(e) {\r\n  var doc = document.getElementById(\"txbox\");\r\n  var kEvent = document.createEvent(\"KeyboardEvent\");\r\n  kEvent.initKeyEvent(\"keypress\", true, true, null, false, false, false, false, 74, 74);\r\n  doc.dispatchEvent(kEvent);\r\n}, false);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input id=\"txbox\" type=\"text\" value=\"\" /&gt;\r\n&lt;input id=\"btn\" type=\"button\" value=\"CLICK TO EMIT KEYPRESS ON TEXTBOX\" /&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm trying to simulate a keyboard event in Safari using JavaScript.</p>\n\n<p>I have tried this:</p>\n\n<pre><code>var event = document.createEvent(\"KeyboardEvent\");\nevent.initKeyboardEvent(\"keypress\", true, true, null, false, false, false, false, 115, 0);\n</code></pre>\n\n<p>...and also this:</p>\n\n<pre><code>var event = document.createEvent(\"UIEvents\");\nevent.initUIEvent(\"keypress\", true, true, window, 1);\nevent.keyCode = 115;\n</code></pre>\n\n<p>After trying both approaches, however, I have the same problem: after the code has been executed, the <code>keyCode</code>/<code>which</code> properties of the event object are set to <code>0</code>, not <code>115</code>.</p>\n\n<p>Does anyone know how to reliably create and dispatch a keyboard event in Safari? (I'd prefer to achieve it in plain JavaScript if possible.)</p>\n",
            "last_activity_date": 1424004524,
            "question_id": 961532,
            "score": 33,
            "tags": [
                "javascript",
                "javascript-events",
                "safari",
                "webkit",
                "keyboard-events"
            ],
            "title": "Firing a Keyboard Event in JavaScript"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Your extension could interact with the website (e.g. changing variables) and your website could detect this.</p>\n\n<p>But there should be a better way to do this. I wonder how Google is doing it on there extension gallery (already installed applications are marked).</p>\n\n<p><strong>Edit:</strong></p>\n\n<p>The gallery use the <a href=\"http://code.google.com/chrome/extensions/trunk/management.html\" rel=\"nofollow\">chrome.management.get</a> function. Example:</p>\n\n<pre><code>chrome.management.get(\"mblbciejcodpealifnhfjbdlkedplodp\", function(a){console.log(a);});\n</code></pre>\n\n<p>But you can only access the method from pages with the right permissions.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I am sure there is a direct way (calling functions on your extension directly, or by using the JS classes for extensions), but an indirect method (until something better comes along):</p>\n\n<p>Have your Chrome extension look for a specific DIV or other element on your page, with a very specific ID.</p>\n\n<p>For example:</p>\n\n<pre><code>&lt;div id=\"ExtensionCheck_JamesEggersAwesomeExtension\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Do a <code>getElementById</code> and set the <code>innerHTML</code> to the version number of your extension or something.  You can then read the contents of that client-side.</p>\n\n<p>Again though, you should use a direct method if there is one available.</p>\n\n<hr>\n\n<p><strong>EDIT: Direct method found!!</strong></p>\n\n<p>Use the connection methods found here:  <a href=\"https://developer.chrome.com/extensions/extension#global-events\" rel=\"nofollow\">https://developer.chrome.com/extensions/extension#global-events</a></p>\n\n<p>Untested, but you should be able to do...</p>\n\n<pre><code>var myPort=chrome.extension.connect('yourextensionid_qwerqweroijwefoijwef', some_object_to_send_on_connect);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 14
                },
                {
                    "body": "<p>You could have the extension <a href=\"http://code.google.com/chrome/extensions/cookies.html#method-set\" rel=\"nofollow\">set a cookie</a> and have your websites JavaScript check if that cookie is present and update accordingly. This and probably most other methods mentioned here could of course be cirvumvented by the user, <strong>unless</strong> you try and have the extension create custom cookies depending on timestamps etc, and have your application analyze them server side to see if it really is a user with the extension or someone pretending to have it by modifying his cookies.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There's another method shown at <a href=\"https://groups.google.com/a/chromium.org/group/chromium-extensions/browse_thread/thread/f00adcb1630168ce\" rel=\"nofollow\">this Google Groups post</a>. In short, you could try detecting whether the extension icon loads successfully. This may be helpful if the extension you're checking for isn't your own.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Another possible solution if you own the website is to use <a href=\"http://code.google.com/chrome/webstore/docs/inline_installation.html\" rel=\"nofollow\">inline installation</a>.  </p>\n\n<pre><code>if (chrome.app.isInstalled) {\n  // extension is installed.\n}\n</code></pre>\n\n<p>I know this an old question but this way was introduced in Chrome 15 and so I thought Id list it for anyone only now looking for an answer.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I thought I would share my research on this.\nI needed to be able to detect if a specific extension was installed for some file:/// links to work.\nI came across this article <a href=\"http://blog.kotowicz.net/2012/02/intro-to-chrome-addons-hacking.html\">here</a>\nThis explained a method of getting the manifest.json of an extension.</p>\n\n<p>I adjusted the code a bit and came up with:</p>\n\n<pre><code>   function Ext_Detect_NotInstalled(ExtName,ExtID) {\n   console.log(ExtName + ' Not Installed');\n   if (divAnnounce.innerHTML  != '')\n   divAnnounce.innerHTML = divAnnounce.innerHTML + \"&lt;BR&gt;\"\n\n   divAnnounce.innerHTML = divAnnounce.innerHTML + 'Page needs ' + ExtName + ' Extension -- to intall the LocalLinks extension click &lt;a href=\"https://chrome.google.com/webstore/detail/locallinks/' + ExtID +'\"&gt;here&lt;/a&gt;';\n  }\n\n  function Ext_Detect_Installed(ExtName,ExtID) {\n    console.log(ExtName + ' Installed');\n  }\n\n  var Ext_Detect = function(ExtName,ExtID) {\n    var s = document.createElement('script');\n    s.onload = function(){Ext_Detect_Installed(ExtName,ExtID);};\n    s.onerror = function(){Ext_Detect_NotInstalled(ExtName,ExtID);};\n    s.src = 'chrome-extension://' + ExtID + '/manifest.json';\n    document.body.appendChild(s);\n  }\n\n var is_chrome = navigator.userAgent.toLowerCase().indexOf('chrome') &gt; -1;\n\n if (is_chrome==true)\n {\n  window.onload = function() { Ext_Detect('LocalLinks','jllpkdkcdjndhggodimiphkghogcpida');};\n }\n</code></pre>\n\n<p>With this you should be able to use Ext_Detect(ExtensionName,ExtensionID) to detect the installation of any number of extensions.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Chrome now has the ability to send messages from the website to the extension.</p>\n\n<p>So in the extension add something like:</p>\n\n<pre><code>chrome.runtime.onMessageExternal.addListener(\n    function(request, sender, sendResponse) {\n        if (request) {\n            if (request.message) {\n                if (request.message == \"version\") {\n                    sendResponse({version: 1.0});\n                }\n            }\n        }\n        return true;\n    });\n</code></pre>\n\n<p>This will then let you make a call from the website:</p>\n\n<pre><code>var hasExtension = false;\n\nchrome.runtime.sendMessage(extensionId, { message: \"version\" },\n    function (reply) {\n        if (reply) {\n            if (reply.version) {\n                if (reply.version &gt;= requiredVersion) {\n                    hasExtension = true;\n                }\n            }\n        }\n    });\n</code></pre>\n\n<p>You can then check the hasExtension variable. The only drawback is the call is asynchronous, so you have to work around that somehow.</p>\n\n<p>Edit:\nAs mentioned below, you'll need to add an entry to the <em>manifest.json</em> listing the domains that can message your addon. Eg:</p>\n\n<pre><code>\"externally_connectable\": {\n    \"matches\": [\"*://localhost/*\", \"*://your.domain.com/*\"]\n},\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Another method is to <a href=\"https://developer.chrome.com/extensions/manifest/web_accessible_resources\" rel=\"nofollow\">expose a web-accessible resource</a>, though this will allow any website to test if your extension is installed.</p>\n\n<p>Suppose your extension's ID is <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</code>, and you add a file (say, a transparent pixel image) as <code>test.png</code> in your extension's files.</p>\n\n<p>Then, you expose this file to the web pages with <code>web_accessible_resources</code> manifest key:</p>\n\n\n\n<pre class=\"lang-js prettyprint-override\"><code>  \"web_accessible_resources\": [\n    \"test.png\"\n  ],\n</code></pre>\n\n<p>In your web page, you can try to load this file by its full URL (in an <code>&lt;img&gt;</code> tag, via XHR, or in any other way):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>chrome-extension://aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/test.png\n</code></pre>\n\n<p>If the file loads, then the extension is installed. If there's an error while loading this file, then the extension is not installed.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// Code from http://goo.gl/SnuOJV\nfunction detectExtension(extensionId, callback) { \n  var img; \n  img = new Image(); \n  img.src = \"chrome-extension://\" + extensionId + \"/test.png\"; \n  img.onload = function() { \n    callback(true); \n  }; \n  img.onerror = function() { \n    callback(false); \n  };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I used the cookie method:</p>\n\n<p>In my manifest.js file I included a content script that only runs on my site:</p>\n\n<pre><code> \"content_scripts\": [\n        {\n        \"matches\": [\n            \"*://*.mysite.co/*\"\n            ],\n        \"js\": [\"js/mysite.js\"],\n        \"run_at\": \"document_idle\"\n        }\n    ], \n</code></pre>\n\n<p>in my js/mysite.js I have one line:</p>\n\n<pre><code>document.cookie = \"extension_downloaded=True\";\n</code></pre>\n\n<p>and in my index.html page I look for that cookie.</p>\n\n<pre><code>if (document.cookie.indexOf('extension_downloaded') != -1){\n    document.getElementById('install-btn').style.display = 'none';\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am in the process of building a Chrome extension, and for the whole thing to work the way I would like it to, I need an external JavaScript script to be able to detect if a user has my extension installed. </p>\n\n<p>For example: A user installs my plugin, then goes to a website with my script on it. The website detects that my extension is installed and updates the page accordingly.</p>\n\n<p>Is this possible?</p>\n",
            "last_activity_date": 1424341506,
            "question_id": 6293498,
            "score": 25,
            "tags": [
                "javascript",
                "google-chrome",
                "google-chrome-extension"
            ],
            "title": "Check whether user has a Chrome extension installed"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Use a JSON parser like <code>JSON.parse</code>:</p>\n\n<pre><code>function IsJsonString(str) {\n    try {\n        JSON.parse(str);\n    } catch (e) {\n        return false;\n    }\n    return true;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 166
                },
                {
                    "body": "<p>in prototype js we have method isJSON. try that </p>\n\n<p><a href=\"http://api.prototypejs.org/language/string/prototype/isjson/\">http://api.prototypejs.org/language/string/prototype/isjson/</a></p>\n\n<p>even <a href=\"http://www.prototypejs.org/learn/json\">http://www.prototypejs.org/learn/json</a></p>\n\n<pre><code>\"something\".isJSON();\n// -&gt; false\n\"\\\"something\\\"\".isJSON();\n// -&gt; true\n\"{ foo: 42 }\".isJSON();\n// -&gt; false\n\"{ \\\"foo\\\": 42 }\".isJSON();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You can use the javascript <a href=\"http://en.wikipedia.org/wiki/JSON#JavaScript_eval.28.29\" rel=\"nofollow\">eval()</a> function to verify if it's valid.</p>\n\n<p>e.g.</p>\n\n<pre><code>var jsonString = '{ \"Id\": 1, \"Name\": \"Coke\" }';\nvar json;\n\ntry {\n  json = eval(jsonString);\n} catch (exception) {\n  //It's advisable to always catch an exception since eval() is a javascript executor...\n  json = null;\n}\n\nif (json) {\n  //this is json\n}\n</code></pre>\n\n<p>Alternatively, you can use <code>JSON.parse</code> function from <a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\" rel=\"nofollow\">json.org</a>:</p>\n\n<pre><code>try {\n  json = JSON.parse(jsonString);\n} catch (exception) {\n  json = null;\n}\n\nif (json) {\n  //this is json\n}\n</code></pre>\n\n<p>Hope this helps.</p>\n\n<p><strong>WARNING</strong>: <code>eval()</code> is <strong>dangerous</strong> if someone adds malicious JS code, since it will execute it. Make sure the JSON String is <em>trustworthy</em>, i.e. you got it from a trusted source.</p>\n\n<p><strong>Edit</strong> For my 1st solution, it's recommended to do this.</p>\n\n<pre><code> try {\n      json = eval(\"{\" + jsonString + \"}\");\n    } catch (exception) {\n      //It's advisable to always catch an exception since eval() is a javascript executor...\n      json = null;\n    }\n</code></pre>\n\n<p>To <em>guarantee</em> json-ness. If the <code>jsonString</code> isn't pure JSON, the eval will throw an exception.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><em>A comment first. The question was about not using <code>try/catch</code>.<br/>\nIf you do not mind to use it, read the answer below.\nHere we just check a <code>JSON</code> string using a regexp, and it will work in most cases, not all.</em></p>\n\n<p>Have a look around the line 450 in <a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\" rel=\"nofollow\">https://github.com/douglascrockford/JSON-js/blob/master/json2.js</a></p>\n\n<p>There is a regexp that check for a valid JSON, something like:</p>\n\n<pre><code>if (/^[\\],:{}\\s]*$/.test(text.replace(/\\\\[\"\\\\\\/bfnrtu]/g, '@').\nreplace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g, ']').\nreplace(/(?:^|:|,)(?:\\s*\\[)+/g, ''))) {\n\n  //the json is ok\n\n}else{\n\n  //the json is not ok\n\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 37
                },
                {
                    "body": "<p>Maybe it will useful:</p>\n\n<pre><code>    function parseJson(code)\n{\n    try {\n        return JSON.parse(code);\n    } catch (e) {\n        return code;\n    }\n}\nfunction parseJsonJQ(code)\n{\n    try {\n        return $.parseJSON(code);\n    } catch (e) {\n        return code;\n    }\n}\n\nvar str =  \"{\\\"a\\\":1,\\\"b\\\":2,\\\"c\\\":3,\\\"d\\\":4,\\\"e\\\":5}\";\nalert(typeof parseJson(str));\nalert(typeof parseJsonJQ(str));\nvar str_b  = \"c\";\nalert(typeof parseJson(str_b));\nalert(typeof parseJsonJQ(str_b));\n</code></pre>\n\n<p>output:</p>\n\n<p>IE7: <strong>string</strong>,object,string,string</p>\n\n<p>CHROME: object,object,string,string</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>function get_json(txt)\n{  var data\n\n   try     {  data = eval('('+txt+')'); }\n   catch(e){  data = false;             }\n\n   return data;\n}\n</code></pre>\n\n<p>If there are errors, return false. </p>\n\n<p>If there are no errors, return json data</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I prefere this way :</p>\n\n<pre><code>if (!typeof arg == 'object') {\n    //Not JSon\n} else {\n    //Json\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p><em>I know i'm 3 years late to this question, but I felt like chiming in.</em></p>\n\n<p>While Gumbo's solution works great, it doesn't handle a few cases where no exception is raised for <code>JSON.parse({something that isn't JSON})</code></p>\n\n<p>I also prefer to return the parsed JSON at the same time, so the calling code doesn't have to call <code>JSON.parse(jsonString)</code> a second time.</p>\n\n<p>This seems to work well for my needs:</p>\n\n<pre><code>function tryParseJSON (jsonString){\n    try {\n        var o = JSON.parse(jsonString);\n\n        // Handle non-exception-throwing cases:\n        // Neither JSON.parse(false) or JSON.parse(1234) throw errors, hence the type-checking,\n        // but... JSON.parse(null) returns 'null', and typeof null === \"object\", \n        // so we must check for that, too.\n        if (o &amp;&amp; typeof o === \"object\" &amp;&amp; o !== null) {\n            return o;\n        }\n    }\n    catch (e) { }\n\n    return false;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 74
                },
                {
                    "body": "<blockquote>\n  <p>This answer to reduce the cost of trycatch statement.</p>\n</blockquote>\n\n<p>I used JQuery to parse JSON strings and I used trycatch statement to handle exceptions, but throwing exceptions for un-parsable strings slowed down my code, so I used simple Regex to check the string if it is a possible JSON string or not without going feather by checking it's syntax, then I used the regular way by parsing the string using JQuery :</p>\n\n<pre><code>if (typeof jsonData == 'string') {\n    if (! /^[\\[|\\{](\\s|.*|\\w)*[\\]|\\}]$/.test(jsonData)) {\n        return jsonData;\n    }\n}\n\ntry {\n    jsonData = $.parseJSON(jsonData);\n} catch (e) {\n\n}\n</code></pre>\n\n<blockquote>\n  <p>I wrapped the previous code in a recursive function to parse nested JSON responses.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Something like:</p>\n\n<pre><code>var jsonString = '{ \"Id\": 1, \"Name\": \"Coke\" }';\n\n//should be true\nIsJsonString(jsonString);\n\n//should be false\nIsJsonString(\"foo\");\nIsJsonString(\"&lt;div&gt;foo&lt;/div&gt;\")\n</code></pre>\n\n<p>EDIT:\nThe solution should not contain try/catch. Some of us turn on \"break on all errors\" and they don't like the debugger breaking on those invalid Json strings.</p>\n",
            "last_activity_date": 1421053033,
            "question_id": 3710204,
            "score": 81,
            "tags": [
                "javascript",
                "json"
            ],
            "title": "How to check if a string is a valid JSON string in JavaScript without using Try/Catch"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>I don't think this is the best solution to get the javascript to execute java code. See here:</p>\n\n<p>If you want to expose native code to the HTML to be callable via javascript, do the following around your web view declaration:</p>\n\n<pre><code>JavaScriptInterface jsInterface = new JavaScriptInterface(this);\nwebView.getSettings().setJavaScriptEnabled(true);\nwebView.addJavascriptInterface(jsInterface, \"JSInterface\");\n</code></pre>\n\n<p>Declare the class <code>JavaScriptInterface</code>:</p>\n\n<pre><code>public class JavaScriptInterface {\n    private Activity activity;\n\n    public JavaScriptInterface(Activity activiy) {\n        this.activity = activiy;\n    }\n\n    public void startVideo(String videoAddress){\n        Intent intent = new Intent(Intent.ACTION_VIEW);\n        intent.setDataAndType(Uri.parse(videoAddress), \"video/3gpp\"); \n        activity.startActivity(intent);\n    }\n}\n</code></pre>\n\n<p>I am declaring a single function for playing a video, but you can do whatever you want.</p>\n\n<p>Finally you call this in the <code>WebView</code> contents via simple javascript call:</p>\n\n<pre><code>&lt;video width=\"320\" height=\"240\" controls=\"controls\" poster='poster.gif'\n       onclick=\"window.JSInterface.startVideo('file:///sdcard/test.3gp');\" &gt;\n   Your browser does not support the video tag.\n&lt;/video&gt;\n</code></pre>\n\n<p>The example is taken from another answer of mine, about playing videos, but should be explaining enough.</p>\n\n<p><strong>EDIT</strong> As per @CedricSoubrie's comment: if the target version of the application is set to 17 or higher you need to add annotation <code>@JavascriptInterface</code> above each method you want to export to the web view.</p>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<p>Your function returns 'true'. That makes the 'onclick' property of your HTML code equal to true, hence the button remains 'clicked.'</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to make a synchronous calls to java code on my android app.</p>\n\n<p>I am using this solution.\n<a href=\"http://stackoverflow.com/a/3338656\">http://stackoverflow.com/a/3338656</a></p>\n\n<p>my java code:</p>\n\n<pre><code>final class MyWebChromeClient extends WebChromeClient {\n        public boolean onJsAlert(WebView view, String url, String message, JsResult result) {\n            Log.d(\"LogTag\", message);\n            result.confirm();\n            return true;\n        }\n    }\n</code></pre>\n\n<p>my javascript code:</p>\n\n<pre><code>&lt;html&gt;\n&lt;script&gt;\nfunction java_request(){\n    alert('test');\n}\n&lt;/script&gt;\n&lt;body&gt;\n&lt;h2&gt;Welcome&lt;/h2&gt;\n&lt;div id=\"area\"&gt;&lt;/div&gt;\n&lt;form&gt;\n&lt;input type=\"button\" value=\"java_call\" onclick=\"java_request()\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>problem is when I tap on java_call button, button gets in pressed state.\nI see console log as 'test'. Everything is normal until here. But that button never gets to its normal state. It continues in pressed state. May be js execution is broken or something?</p>\n\n<p>Why the button never returns its normal state?</p>\n",
            "last_activity_date": 1404144774,
            "question_id": 10389572,
            "score": 23,
            "tags": [
                "javascript",
                "android",
                "android-webview"
            ],
            "title": "call java function from javascript over android webview"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>The problem is autofill is handled differently by different browsers. Some dispatch the change event, some don't. So it is almost impossible to hook onto an event which is triggered when browser autocompletes an input field.</p>\n\n<ul>\n<li><p>Change event trigger for different browsers:</p>\n\n<ul>\n<li><p>For username/password fields:</p>\n\n<ol>\n<li>Firefox 4, IE 7, and IE 8 don't dispatch the change event.</li>\n<li>Safari 5 and Chrome 9 do dispatch the change event.</li>\n</ol></li>\n<li><p>For other form fields:</p>\n\n<ol>\n<li>IE 7 and IE 8 don't dispatch the change event.</li>\n<li>Firefox 4 does dispatch the change change event when users select a value from a list of suggestions and tab out of the field.</li>\n<li>Chrome 9 does not dispatch the change event.</li>\n<li>Safari 5 does dispatch the change event.</li>\n</ol></li>\n</ul></li>\n</ul>\n\n<p>You best options are to either disable autocomplete for a form using <code>autocomplete=\"off\"</code> in your form or poll at regular interval to see if its filled.</p>\n\n<p>For your question on whether it is filled on or before document.ready again it varies from browser to browser and even version to version. For username/password fields only when you select a username password field is filled. So altogether you would have a very messy code if you try to attach to any event.</p>\n\n<p>You can have a good read on this <a href=\"http://avernet.blogspot.in/2010/11/autocomplete-and-javascript-change.html\">HERE</a></p>\n",
                    "is_accepted": true,
                    "score": 32
                },
                {
                    "body": "<p>I know this is an old thread but I can imagine many comes to find a solution to this here.</p>\n\n<p>To do this, you can check if the input(s) has value(s) with:</p>\n\n<pre><code>$(function() {\n    setTimeout(function() {\n        if ($(\"#inputID\").val().length &gt; 0) {\n            // YOUR CODE\n        }\n    }, 100);\n});\n</code></pre>\n\n<p>I use this myself to check for values in my login form when it's loaded to enable the submit button.\nThe code is made for jQuery but is easy to change if needed.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There is a new polyfill component to address this issue on github. Have a look at <a href=\"https://github.com/tbosch/autofill-event\" rel=\"nofollow\">autofill-event</a>. Just need to bower install it and voil\u00e0, autofill works as expected.</p>\n\n<pre><code>bower install autofill-event\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I used the blur event on the username to check if the pwd field had been auto-filled.</p>\n\n<pre><code> $('#userNameTextBox').blur(function () {\n        if ($('#userNameTextBox').val() == \"\") {\n            $('#userNameTextBox').val(\"User Name\");\n        }\n        if ($('#passwordTextBox').val() != \"\") {\n            $('#passwordTextBoxClear').hide(); // textbox with \"Password\" text in it\n            $('#passwordTextBox').show();\n        }\n    });\n</code></pre>\n\n<p>This works for IE, and should work for all other browsers (I've only checked IE)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Unfortunately the only reliable way i have found to check this cross browser is to poll the input. To make it responsive also listen to events. \nChrome has started hiding auto fill values from javascript which needs a hack.</p>\n\n<ul>\n<li>Poll every half to third of a second ( Does not need to be instant in most cases )</li>\n<li>Trigger the change event using JQuery then do your logic in a function listening to the change event.</li>\n<li><p>Add a fix for Chrome hidden autofill password values.</p>\n\n<pre><code>$(document).ready(function () {\n    $('#inputID').change(YOURFUNCTIONNAME);\n    $('#inputID').keypress(YOURFUNCTIONNAME);\n    $('#inputID').keyup(YOURFUNCTIONNAME);\n    $('#inputID').blur(YOURFUNCTIONNAME);\n    $('#inputID').focusin(YOURFUNCTIONNAME);\n    $('#inputID').focusout(YOURFUNCTIONNAME);\n    $('#inputID').on('input', YOURFUNCTIONNAME);\n    $('#inputID').on('textInput', YOURFUNCTIONNAME);\n    $('#inputID').on('reset', YOURFUNCTIONNAME);\n\n    window.setInterval(function() {\n        var hasValue = $(\"#inputID\").val().length &gt; 0;//Normal\n        if(!hasValue){\n            hasValue = $(\"#inputID:-webkit-autofill\").length &gt; 0;//Chrome\n        }\n\n        if (hasValue) {\n            $('#inputID').trigger('change');\n        }\n    }, 333);\n});\n</code></pre></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Just in case someone is looking for a solution (just as I was today), to listen to a browser autofill change, here's a custom jquery method that I've built, just to simplify the proccess when adding a change listener to an input:</p>\n\n<pre><code>    $.fn.allchange = function (callback) {\n        var me = this;\n        var last = \"\";\n        var infunc = function () {\n            var text = $(me).val();\n            if (text != last) {\n                last = text;\n                callback();\n            }\n            setTimeout(infunc, 100);\n        }\n        setTimeout(infunc, 100);\n    };\n</code></pre>\n\n<p>You can call it like this:</p>\n\n<pre><code>$(\"#myInput\").allchange(function () {\n    alert(\"change!\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>My solution:</p>\n\n<p>Listen to <code>change</code> events as you would normally, and on the DOM content load, do this:</p>\n\n<pre><code>setTimeout(function() {\n    $('input').each(function() {\n        var elem = $(this);\n        if (elem.val()) elem.change();\n    })\n}, 250);\n</code></pre>\n\n<p>This will fire the change events for all the fields that aren't empty before the user had a chance to edit them.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>i use this solution for same problem.</p>\n\n<p>html code should change to this  : </p>\n\n<pre><code>&lt;input type=\"text\" name=\"username\" /&gt;\n&lt;input type=\"text\" name=\"password\" id=\"txt_password\" /&gt;\n</code></pre>\n\n<p>and then jQuery code can be in document.ready :</p>\n\n<pre><code>$('#txt_password').focus(function(){\n    $(this).attr('type','password');\n</code></pre>\n\n<p>});</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had the same problem and I've written this solution.</p>\n\n<p>It starts polling on every input field when the page is loading (I've set 10 seconds but you can tune this value).<br>\nAfter 10 seconds it stop polling on every input field and it starts polling only on the focused input (if one).\nIt stops when you blur the input and again starts if you focus one.</p>\n\n<p>In this way you poll only when really needed and only on a valid input.</p>\n\n<pre><code>// This part of code will detect autofill when the page is loading (username and password inputs for example)\nvar loading = setInterval(function() {\n    $(\"input\").each(function() {\n        if ($(this).val() !== $(this).attr(\"value\")) {\n            $(this).trigger(\"change\");\n        }\n    });\n}, 100);\n// After 10 seconds we are quite sure all the needed inputs are autofilled then we can stop checking them\nsetTimeout(function() {\n    clearInterval(loading);\n}, 10000);\n// Now we just listen on the focused inputs (because user can select from the autofill dropdown only when the input has focus)\nvar focused;\n$(document)\n.on(\"focus\", \"input\", function() {\n    var $this = $(this);\n    focused = setInterval(function() {\n        if ($this.val() !== $this.attr(\"value\")) {\n            $this.trigger(\"change\");\n        }\n    }, 100);\n})\n.on(\"blur\", \"input\", function() {\n    clearInterval(focused);\n});\n</code></pre>\n\n<p>It does not work quite well when you have multiple values inserted automatically, but it could be tweaked looking for every input on the current form.</p>\n\n<p>Something like:</p>\n\n<pre><code>// This part of code will detect autofill when the page is loading (username and password inputs for example)\nvar loading = setInterval(function() {\n    $(\"input\").each(function() {\n        if ($(this).val() !== $(this).attr(\"value\")) {\n            $(this).trigger(\"change\");\n        }\n    });\n}, 100);\n// After 10 seconds we are quite sure all the needed inputs are autofilled then we can stop checking them\nsetTimeout(function() {\n    clearInterval(loading);\n}, 10000);\n// Now we just listen on inputs of the focused form\nvar focused;\n$(document)\n.on(\"focus\", \"input\", function() {\n    var $inputs = $(this).parents(\"form\").find(\"input\");\n    focused = setInterval(function() {\n        $inputs.each(function() {\n            if ($(this).val() !== $(this).attr(\"value\")) {\n                $(this).trigger(\"change\");\n            }\n        });\n    }, 100);\n})\n.on(\"blur\", \"input\", function() {\n    clearInterval(focused);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do you tell if a browser has auto filled a text-box? Especially with username &amp; password boxes that autofill around page load.</p>\n\n<p>My first question is when does this occur in the page load sequence? Is it before or after document.ready?</p>\n\n<p>Secondly how can I use logic to find out if this occurred? Its not that i want to stop this from occurring, just hook into the event. Preferably something like this:</p>\n\n<pre><code>if (autoFilled == true) {\n\n} else {\n\n}\n</code></pre>\n\n<p>If possible I would love to see a jsfiddle showing your answer.</p>\n\n<p><strong>Possible duplicates</strong></p>\n\n<p><a href=\"http://stackoverflow.com/questions/3535738/dom-event-for-browser-password-autofill\">DOM event for browser password autofill?</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/4938242/browser-autofill-and-javascript-triggered-events\">Browser Autofill and Javascript triggered events</a></p>\n\n<p>--Both these questions don't really explain what events are triggered, they just continuously recheck the text-box (not good for performance!).</p>\n",
            "last_activity_date": 1414140207,
            "question_id": 11708092,
            "score": 34,
            "tags": [
                "javascript",
                "jquery",
                "events",
                "event-handling"
            ],
            "title": "Detecting Browser Autofill"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>You can set a CSS color using rgb also, such as this:</p>\n\n<pre><code>background-color: rgb(0, 70, 255);\n</code></pre>\n\n<p>It is <a href=\"http://www.w3schools.com/css/css%5Funits.asp\" rel=\"nofollow\">valid CSS</a>, don't worry.</p>\n\n<p><hr /></p>\n\n<p><strong>Edit:</strong> See <a href=\"http://stackoverflow.com/questions/638948/background-color-hex-to-js-variable-jquery/639030#639030\">nickf answer</a> for a nice way to convert it if you absolutely need to.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>try this out:</p>\n\n<pre><code>var rgbString = \"rgb(0, 70, 255)\"; // get this in whatever way.\n\nvar parts = rgbString.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n// parts now should be [\"rgb(0, 70, 255\", \"0\", \"70\", \"255\"]\n\ndelete (parts[0]);\nfor (var i = 1; i &lt;= 3; ++i) {\n    parts[i] = parseInt(parts[i]).toString(16);\n    if (parts[i].length == 1) parts[i] = '0' + parts[i];\n} \nvar hexString ='#'+parts.join('').toUpperCase(); // \"#0070FF\"\n</code></pre>\n\n<p>In response to the question in the comments below:</p>\n\n<blockquote>\n  <p>I'm trying to modify the regex to handle both rgb and rgba depending which one I get. Any hints? Thanks. </p>\n</blockquote>\n\n<p>I'm not exactly sure if it makes sense in the context of this question (since you can't represent an rgba color in hex), but I guess there could be other uses. Anyway, you could change the regex to be like this:</p>\n\n<pre><code>/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(0\\.\\d+))?\\)$/\n</code></pre>\n\n<p>Example output:</p>\n\n<pre><code>var d = document.createElement('div');\nd.style.backgroundColor = 'rgba( 255,  60, 50, 0)';\n\n/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(1|0\\.\\d+))?\\)$/.exec(d.style.backgroundColor);\n\n// [\"rgba(255, 60, 50, 0.33)\", \"255\", \"60\", \"50\", \"0.33\"]\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 61
                },
                {
                    "body": "<p>I found another function awhile back (<a href=\"http://markmail.org/message/hilbsejsl4zxwlv6#query%3a+page:1+mid%3ahilbsejsl4zxwlv6+state%3aresults\" rel=\"nofollow\">by R0bb13</a>). It doesn't have the regex, so I had to borrow it from nickf to make it work properly. I'm only posting it because it's an interesting method that doesn't use an if statement or a loop to give you a result. Also this script returns the hex value with a # (It was needed by the <a href=\"http://acko.net/dev/farbtastic\" rel=\"nofollow\">Farbtastic</a> plugin I was using at the time)</p>\n\n<pre><code>//Function to convert hex format to a rgb color\nfunction rgb2hex(rgb) {\n var hexDigits = [\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"];\n rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n function hex(x) {\n  return isNaN(x) ? \"00\" : hexDigits[(x - x % 16) / 16] + hexDigits[x % 16];\n }\n return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n}\n\n// call the function: rgb( \"rgb(0, 70, 255)\" );\n// returns: #0046ff\n</code></pre>\n\n<p>Note: The hex result from nickf's script should be 0046ff and not 0070ff, but no big deal :P</p>\n\n<p>Update, another <strong>better</strong> alternative method:</p>\n\n<pre><code>function rgb2hex(rgb) {\n rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n function hex(x) {\n  return (\"0\" + parseInt(x).toString(16)).slice(-2);\n }\n return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I found this solution <a href=\"http://haacked.com/archive/2009/12/29/convert-rgb-to-hex.aspx\" rel=\"nofollow\">http://haacked.com/archive/2009/12/29/convert-rgb-to-hex.aspx</a> and i am using it in my project</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>These solutions will fail in Chrome, as it returns an rgba(x,x,x,x) for background-color.</p>\n\n<p>EDIT: This is not necessarily true. Chrome will still set backgrounds using rgb(), depending on what you are doing. Most likely as long as there is no alpha channel applied, Chrome will respond with rgb instead of rgba.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>How about this solution, function <strong>stringRGB2HEX</strong> returns a copy of the input string where all occurencies of colors in the format \"rgb(r,g,b)\" have been replaced by the hex format \"#rrggbb\".</p>\n\n<pre><code>   //function for private usage of the function below\n   //(declaring this one in global scope should make it faster rather than \n   //declaraing it as temporary function inside stringRGB2HEX that need to be\n   //instantieted at every call of stringRGB2HEX\n   function _rgb2hex(rgb_string, r, g, b) \n   {\n      //VERY IMPORTANT: by adding (1 &lt;&lt; 24) we avoid 'rgb(0, 0, 0)' to be mistakenly converted into '#0'\n      var rgb = (1 &lt;&lt; 24) | (parseInt(r) &lt;&lt; 16) | (parseInt(g) &lt;&lt; 8) | parseInt(b); //same thing of: ( r + (256 * g) + (65536 * b) + 16777216)\n      //toString(16) specify hex 16 radix, works only for numbers [source: http://msdn.microsoft.com/en-us/library/dwab3ed2(v=VS.85).aspx]   \n      return '#' + rgb.toString(16).substr(1); //substr(1) because we have to remove the (1 &lt;&lt; 24) added above\n   }\n\n   function stringRGB2HEX(string)\n   {\n      if(typeof string === 'string')\n         string = string.replace(/rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/g, _rgb2hex);\n      return string;\n   }\n</code></pre>\n\n<p>This one converts also rgb colors in complex styles like <code>background</code>.</p>\n\n<p>A <code>style.background</code> value like: <code>\"none no-repeat scroll rgb(0, 0, 0)\"</code> is easily converted into <code>\"none no-repeat scroll #000000\"</code> by simply doing <code>stringRGB2HEX(style.background)</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>With JQuery..</p>\n\n<pre><code>var cssColorToHex = function(colorStr){\n    var hex = '#';\n    $.each(colorStr.substring(4).split(','), function(i, str){\n        var h = ($.trim(str.replace(')',''))*1).toString(16);\n        hex += (h.length == 1) ? \"0\" + h : h;\n    });\n    return hex;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"http://www.phpied.com/rgb-color-parser-in-javascript/\" rel=\"nofollow\">http://www.phpied.com/rgb-color-parser-in-javascript/</a></p>\n\n<p>A JavaScript class that accepts a string and tries to figure out a valid color out of it. Some accepted inputs are for example:</p>\n\n<pre><code>* rgb(0, 23, 255)\n* #336699\n* ffee66\n* fb0\n* red\n* darkblue\n* cadet blue\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you have jQuery available, this is the super-compact version that I just came up with.</p>\n\n<pre>\nvar RGBtoHEX = function(color) {\n  return \"#\"+$.map(color.match(/\\b(\\d+)\\b/g),function(digit){\n    return ('0' + parseInt(digit).toString(16)).slice(-2)\n  }).join('');\n};\n</pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p><strong>Here you go, this will allow you to use $(selector).getHexBackgroundColor() to return the hex value easily :</strong></p>\n\n<pre><code>$.fn.getHexBackgroundColor = function() {\n    var rgb = $(this).css('background-color');\n    rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n    function hex(x) {return (\"0\" + parseInt(x).toString(16)).slice(-2);}\n    return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm kind of new to JavaScript and jQuery and now I'm facing a problem:</p>\n\n<p>I need to post some data to PHP and one bit of the data needs to be the background color hex of div X.</p>\n\n<p>jQuery has the css(\"background-color\") function and with it I can get RGB value of the background into a JavaScript variable.</p>\n\n<p>The CSS function seems to return a string like this rgb(0, 70, 255). </p>\n\n<p>I couldn't find any way to get hex of the background-color (even though it's set as hex in CSS).</p>\n\n<p>So it seems like I need to convert it. I found a function for converting RGB to hex, but it needs to be called with three different variables, r, g and b. So I would need to parse the string rgb(x,xx,xxx) into var r=x; var g=xx; var b=xxx; somehow. </p>\n\n<p>I tried to google parsing strings with JavaScript, but I didn't really understand the regular expressions thing. </p>\n\n<p>Is there a way to get the background-color of div as hex, or can the string be converted into 3 different variables?</p>\n",
            "last_activity_date": 1386963066,
            "question_id": 638948,
            "score": 33,
            "tags": [
                "javascript",
                "jquery",
                "hex",
                "rgb",
                "background-color"
            ],
            "title": "Background-color hex to JavaScript variable"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>The flash almost certainly doesn't propagate the click event to its parent. Nothing you can do unless you wrote the flash, I suppose.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>the flash object will always catch the click and not automatically pass it along. you will have to build that functionality - catch onclick in flash and call JS-function.</p>\n\n<p>what are you trying to accomplish?</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It is best to think of all swf's as having a z-order of infinity.  Flash is on top and there is very little which can be done to stop that.  On the other hand, if you have access to the code of the SWF itself, or if you can use another swf to load your current swf, you'll be able to use a couple of different Flash commands to address the JavaScript of the page. (ExternalInterface is your best bet).</p>\n\n<pre><code>//This is what your AS code should look like:\nimport flash.external.ExternalInterface;\nimport flash.events.MouseEvent;\n\nroot.addEventListener( MouseEvent.CLICK, useExternal, true );\n\nfunction useExternal( event:MouseEvent):void\n{\n    //swfClickFunction is defined in JavaScript\n    ExternalInterface.call( \"swfClickFunction\" );\n}\n</code></pre>\n\n<p>Another alternative solution using onmousedown instead of onclick is provided by Darwin below. </p>\n",
                    "is_accepted": true,
                    "score": 20
                },
                {
                    "body": "<p>do onclick event on a the object tag. (obejct tag supports mouse events). then grab the parent div via DOM. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found this at <a href=\"http://progproblems.blogspot.com/2009/08/javascript-onclick-for-flash-embeded.html\">http://progproblems.blogspot.com/2009/08/javascript-onclick-for-flash-embeded.html</a></p>\n\n<ol>\n<li>Set the param <code>wmode</code> to <code>transparent</code>. This allows the object containing the flash to receive the javascript <code>onclick</code>.</li>\n<li>Use <code>onmousedown</code> insted of <code>onclick</code>. In spite of using <code>wmode</code> <code>transparent</code>, some browsers still wont call  the <code>onclick</code>, but they do call <code>onmousedown</code>.</li>\n</ol>\n\n<p>The code looks like this:</p>\n\n<pre><code>&lt;div onmousedown=\"clickBanner(1)\"&gt;\n&lt;object&gt;\n&lt;param name=\"movie\" value=\"3.swf\"&gt;\n&lt;param name=\"wmode\" value=\"transparent\" /&gt;\n&lt;embed wmode=transparent allowfullscreen=\"true\" allowscriptaccess=\"always\" src=\"3.swf\"&gt;&lt;/embed&gt;\n&lt;/object&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>It work for my needs =)</p>\n",
                    "is_accepted": false,
                    "score": 76
                },
                {
                    "body": "<p>Try this easy solution cover the flash with div and put the click event on top div so flash will never grab the mouse. </p>\n\n<pre><code>&lt;div style=\"position:absolute;top:209px;left:80px;z-index:500;\" id=\"helpvideos\"&gt; \n&lt;div style=\"float:left\"&gt;\n&lt;fb:swf \n    swfbgcolor=\"FFFFFF\"  \n    swfsrc='&lt;?php echo SITE_URL;?&gt;swf/3_sidebar.swf'  \n    width='600' height='670'\n    wmode=\"transparent\"\n     /&gt;\n&lt;/div&gt;\n&lt;div style=\"width:600px;height:670px;position:absolute;float:left;z-index:6000;\" onclick=\"document.getElementById('helpvideos').setStyle('display','none');\"&gt;&amp;nbsp;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>&lt;param name=\"wmode\" value=\"transparent\" /&gt;\n</code></pre>\n\n<p>This was the solution for me. Well, I implemented it over the AC_RunActiveContent.js at the params:</p>\n\n<pre><code>'wmode', 'transparent',\n</code></pre>\n\n<p>Nice!!!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had that problem when I tried to make automated dynamic-placed banners. If SWF were setted to 'opaquecolor' mode, then I had no clicks acceptables - and i had to use opaquecolor because some banners were messed up with the websites colors. The solution I found, is to set the SWF to 'transparent' mode, at a &lt;div&gt; of z-index:10, and place beneath it a new &lt;div&gt; of same dimensions of the SWF file, filled with the opaquecolor of the SWF. Both divs into an &lt;a&gt; tag. That worked.</p>\n\n<pre><code>Example:\n    &lt;a href=\"www.mysite.com\"&gt;\n    &lt;div id=\"SWF_file_container\" style=\"width:100px; height:40px; z-index:10;\"&gt;\n    &lt;object&gt; .... &lt;/object&gt; (adding SWF in TRANSPARENT MODE)\n    &lt;/div&gt;\n    &lt;div id=\"opaquecolor_of_swf\" style=\"width:100px; height:40px; z-index:2; background-color:#ff0000;\"&gt;&lt;/div&gt;\n    &lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have one embed flash movie inside one div, I put one javascript onclick event handler in the main div, but isn't catching the click, what is wrong?</p>\n\n<p>Code:</p>\n\n<pre><code>   &lt;div id=\"top-box-player\" onclick=\"alert('Hi Bananas!');\"&gt;\n     &lt;object width=\"400\" height=\"300\"&gt;\n        &lt;param name=\"movie\" value=\"general.swf\"&gt;\n        &lt;embed src=\"./swf/general.swf\" width=\"400\" height=\"300\"&gt;\n        &lt;/embed&gt;\n     &lt;/object&gt;\n   &lt;/div&gt;\n</code></pre>\n",
            "last_activity_date": 1348003452,
            "question_id": 1444562,
            "score": 30,
            "tags": [
                "javascript",
                "html",
                "swf",
                "onclick"
            ],
            "title": "javascript onclick event over flash object"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Following solution doesn't work for IE, you'll need to apply TextRange objects etc. for that. As this uses selections to perform this, it shouldn't break the HTML in normal cases, for example:</p>\n\n<pre><code>&lt;div&gt;abcd&lt;span&gt;efg&lt;/span&gt;hij&lt;/div&gt;\n</code></pre>\n\n<p>With <code>highlight(3,6);</code></p>\n\n<p>outputs:</p>\n\n<pre><code>&lt;div&gt;abc&lt;em&gt;d&lt;span&gt;ef&lt;/span&gt;&lt;/em&gt;&lt;span&gt;g&lt;/span&gt;hij&lt;/div&gt;\n</code></pre>\n\n<p>Take note how it wraps the first character outside of the span into an <code>em</code>, and then the rest within the <code>span</code> into a new one. Where as if it would just open it at character 3 and end at character 6, it would give invalid markup like:</p>\n\n<pre><code>&lt;div&gt;abc&lt;em&gt;d&lt;span&gt;ef&lt;/em&gt;g&lt;/span&gt;hij&lt;/div&gt;\n</code></pre>\n\n<p><strike>\nThe code:</p>\n\n<pre><code>var r = document.createRange();\nvar s = window.getSelection()\n\nr.selectNode($('div')[0]);\ns.removeAllRanges();\ns.addRange(r);\n\n// not quite sure why firefox has problems with this\nif ($.browser.webkit) {\n    s.modify(\"move\", \"backward\", \"documentboundary\");\n}\n\nfunction highlight(start,end){\n    for(var st=0;st&lt;start;st++){\n        s.modify(\"move\", \"forward\", \"character\");\n    }\n\n    for(var st=0;st&lt;(end-start);st++){\n        s.modify(\"extend\", \"forward\", \"character\");\n    }\n}\n\nhighlight(2,6);\n\nvar ra = s.getRangeAt(0);\nvar newNode = document.createElement(\"em\");\nnewNode.appendChild(ra.extractContents()); \nra.insertNode(newNode);\n</code></pre>\n\n<p>Example: <a href=\"http://jsfiddle.net/niklasvh/4NDb9/\" rel=\"nofollow\">http://jsfiddle.net/niklasvh/4NDb9/</a></p>\n\n<p><strong>edit</strong> Looks like at least my FF4 had some issues with</p>\n\n<pre><code>s.modify(\"move\", \"backward\", \"documentboundary\");\n</code></pre>\n\n<p>but at the same time, it seems to work without it, so I just changed it to</p>\n\n<pre><code>if ($.browser.webkit) {\n        s.modify(\"move\", \"backward\", \"documentboundary\");\n}\n</code></pre>\n\n<p></strike></p>\n\n<p><strong>edit</strong> \nas Tim Pointed out, modify is only available from FF4 onwards, so I took a different approach to getting the selection, which doesn't need the modify method, in hopes in making it a bit more browser compatible (IE still needs its own solution). </p>\n\n<p>The code:</p>\n\n<pre><code>var r = document.createRange();\nvar s = window.getSelection()\n\nvar pos = 0;\n\nfunction dig(el){\n    $(el).contents().each(function(i,e){\n        if (e.nodeType==1){\n            // not a textnode\n         dig(e);   \n        }else{\n            if (pos&lt;start){\n               if (pos+e.length&gt;=start){\n                range.setStart(e, start-pos);\n               }\n            }\n\n            if (pos&lt;end){\n               if (pos+e.length&gt;=end){\n                range.setEnd(e, end-pos);\n               }\n            }            \n\n            pos = pos+e.length;\n        }\n    });  \n}\nvar start,end, range;\n\nfunction highlight(element,st,en){\n    range = document.createRange();\n    start = st;\n    end = en;\n    dig(element);\n    s.addRange(range);\n\n}\nhighlight($('div'),3,6);\n\nvar ra = s.getRangeAt(0);\n\nvar newNode = document.createElement(\"em\");\nnewNode.appendChild(ra.extractContents()); \nra.insertNode(newNode);\n</code></pre>\n\n<p>example: <a href=\"http://jsfiddle.net/niklasvh/4NDb9/\" rel=\"nofollow\">http://jsfiddle.net/niklasvh/4NDb9/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Below is a function to set the selection to a pair of character offsets within a particular element. This is naive implementation: it does not take into account any text that may be made invisible (either by CSS or by being inside a <code>&lt;script&gt;</code> or <code>&lt;style&gt;</code> element, for example) and may have browser discrepancies (IE versus everything else) with line breaks, and takes no account of collapsed whitespace (such as 2 or more consecutive space characters collapsing to one visible space on the page). However, it does work for your example in all major browsers.</p>\n\n<p>For the other part, the highlighting, I'd suggest using <code>document.execCommand()</code> for that. You can use my function below to set the selection and then call <code>document.execCommand()</code>. You'll need to make the document temporarily editable in non-IE browsers for the command to work. See my answer here for code: <a href=\"http://stackoverflow.com/questions/2584301/getselection-surroundcontents-across-multiple-tags/2584352#2584352\">getSelection &amp; surroundContents across multiple tags</a></p>\n\n<p>Here's a jsFiddle example showing the whole thing, working in all major browsers: <a href=\"http://jsfiddle.net/8mdX4/\">http://jsfiddle.net/8mdX4/</a></p>\n\n<p>And the selection setting code:</p>\n\n<pre><code>function getTextNodesIn(node) {\n    var textNodes = [];\n    if (node.nodeType == 3) {\n        textNodes.push(node);\n    } else {\n        var children = node.childNodes;\n        for (var i = 0, len = children.length; i &lt; len; ++i) {\n            textNodes.push.apply(textNodes, getTextNodesIn(children[i]));\n        }\n    }\n    return textNodes;\n}\n\nfunction setSelectionRange(el, start, end) {\n    if (document.createRange &amp;&amp; window.getSelection) {\n        var range = document.createRange();\n        range.selectNodeContents(el);\n        var textNodes = getTextNodesIn(el);\n        var foundStart = false;\n        var charCount = 0, endCharCount;\n\n        for (var i = 0, textNode; textNode = textNodes[i++]; ) {\n            endCharCount = charCount + textNode.length;\n            if (!foundStart &amp;&amp; start &gt;= charCount\n                    &amp;&amp; (start &lt; endCharCount ||\n                    (start == endCharCount &amp;&amp; i &lt; textNodes.length))) {\n                range.setStart(textNode, start - charCount);\n                foundStart = true;\n            }\n            if (foundStart &amp;&amp; end &lt;= endCharCount) {\n                range.setEnd(textNode, end - charCount);\n                break;\n            }\n            charCount = endCharCount;\n        }\n\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n    } else if (document.selection &amp;&amp; document.body.createTextRange) {\n        var textRange = document.body.createTextRange();\n        textRange.moveToElementText(el);\n        textRange.collapse(true);\n        textRange.moveEnd(\"character\", end);\n        textRange.moveStart(\"character\", start);\n        textRange.select();\n    }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 28
                },
                {
                    "body": "<p>You could take a look at how works this powerful JavaScript utility which support selection over multiple DOM elements:</p>\n\n<p><strong>MASHA</strong> (short for Mark &amp; Share) <em>allow you to mark interesting parts of web page content and share it</em></p>\n\n<p><a href=\"http://mashajs.com/index_eng.html\" rel=\"nofollow\">http://mashajs.com/index_eng.html</a></p>\n\n<p>It's also on GitHub <a href=\"https://github.com/SmartTeleMax/MaSha\" rel=\"nofollow\">https://github.com/SmartTeleMax/MaSha</a></p>\n\n<p>Works even on Mobile Safari and IE! </p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I would like to highlight (apply css to) a certain text range, denoted by its start and end position. This is more diffucult than it seems, since there may be other tags within the text, that need to be ignored.</p>\n\n<p>Example:</p>\n\n<pre><code>&lt;div&gt;abcd&lt;em&gt;efg&lt;/em&gt;hij&lt;/div&gt;\n</code></pre>\n\n<p><code>highlight(2, 6)</code> needs to highlight <code>\"cdef</code>\" without removing the  tag.</p>\n\n<p>I have tried already using a TextRange object, but without success.</p>\n\n<p>Thanks in advance!</p>\n",
            "last_activity_date": 1342531725,
            "question_id": 6240139,
            "score": 20,
            "tags": [
                "javascript",
                "selection",
                "textrange"
            ],
            "title": "Highlight text range using JavaScript"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>No performance benefit, just a matter of personal choice and style.</p>\n\n<p>The first version is just more succinct.</p>\n\n<hr>\n\n<p>Update:</p>\n\n<p>In terms of the amount of data going over the wire, of course less is better, however you would need a hell of a lot of removed <code>var</code> declarations in order to see a real impact.</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Minification_%28programming%29\">Minification</a> has been mentioned as something that the first example will help with for better minification, however, as <a href=\"http://stackoverflow.com/users/222908/daniel-vassallo\">Daniel Vassallo</a> points out in the comments, a good minifier will automatically do that for you anyways, so in that respect no impact whatsoever.</p>\n",
                    "is_accepted": true,
                    "score": 29
                },
                {
                    "body": "<p>I don't think there's any noticeable difference, as far as I'm concerned it's just personal preference.</p>\n\n<p>I hate having multiple var declarations so I usually do:</p>\n\n<pre><code>var \n   one\n  ,two\n  ,three\n  ,four\n;\n</code></pre>\n\n<p>As it's shorter and arguably more readable, no <code>var</code> noise to look at.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The first saves a few characters--so there is a very small saving in terms of the JS filesize and therefore bandwidth consumption.  The only time this would become noticable would be in extreme cases.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I prefer the second version (each has its own <code>var</code>).  I think that's because I come from a C++ background.  In C++, you can declare variables like you do in your first example, but it is frowned upon (it easily leads to mistakes when you're trying to create pointers that way).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you are minifying your javascript, there is a fairly large benefit:</p>\n\n<pre><code>var one, two, three, four;\n</code></pre>\n\n<p>becomes</p>\n\n<pre><code>var a, b, c, d;\n</code></pre>\n\n<p>Where as</p>\n\n<pre><code>var one;\nvar two;\nvar three;\nvar four;\n</code></pre>\n\n<p>becomes</p>\n\n<pre><code>var a;\nvar b;\nvar c;\nvar d;\n</code></pre>\n\n<p>That's an additional three instances of <code>var</code>, which can add up over time.</p>\n\n<p>See The \"A List Apart\" article series \"Better Javascript Minification\" <a href=\"http://www.alistapart.com/articles/better-javascript-minification/\" rel=\"nofollow\">Part 1</a> and <a href=\"http://www.alistapart.com/articles/javascript-minification-part-II/\" rel=\"nofollow\">Part 2</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As others have noted, it is a style preference. <a href=\"http://www.jslint.com/\" rel=\"nofollow\">JSLint</a> might tell you to only have one <code>var</code> per function (if you use the \"Good Parts\"). Thus if using JSLint to check your code (not a bad idea, IMHO), you'll end up using the first format more than the latter. </p>\n\n<p>On the other hand, the same author, <a href=\"http://www.crockford.com/\" rel=\"nofollow\">Douglas Crockford</a>, says to put each variable in its own line in his <a href=\"http://javascript.crockford.com/code.html\" rel=\"nofollow\">coding conventions</a>. So you may want to uncheck the \"All one <code>var</code> per function\" checkbox in JSLint if you use it. ;-)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I agree with the other answerers that this is mainly a matter of personal style. But to bring an \"Authoritative\" opinion into the discussion, this is what <a href=\"http://en.wikipedia.org/wiki/Douglas_Crockford\">Douglas Crockford</a> says on the <a href=\"http://www.jslint.com/lint.html#scope\">website of the popular JSLint tool</a>:</p>\n\n<blockquote>\n  <p>But because JavaScript does not have block scope, it is wiser to declare all of a function's variables at the top of the function. It is recommended that a single var statement be used per function. This can be enforced with the <code>onevar</code> option.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><strong>Fun Fact of the Day:</strong> In JavaScript you can use commas to group any number of <strong>expressions</strong> into a single statement. This is basically an artifact of the <code>for</code> statement, where multiple assignment expressions are often grouped together in the header. Most people do not know that such syntax is still valid outside a <code>for</code> loop. So you can do this</p>\n\n<pre><code>var i = 0;\nwhile (i &lt; 10)\n    alert(i + ' * ' + i + ' = '),\n    alert(i * i + '!!'),\n    i++;\n\nalert(\"Wasn't that fun??\");\n</code></pre>\n\n<p>Instead of</p>\n\n<pre><code>var i = 0;\nwhile (i &lt; 10) {\n    alert(i + ' * ' + i + ' = ');\n    alert(i * i + '!!');\n    i++;\n}\n\nalert(\"Wasn't that fun??\");\n</code></pre>\n\n<p>Though most people would advise you not to.</p>\n\n<p>Statements, such as <code>var</code>, cannot be used this way. That is you cannot have <code>var</code> in the middle of a bunch of other comma separated expressions. </p>\n\n<p>Anyway... the more you know...</p>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>Since I don't see any references to it, <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-12.2\" rel=\"nofollow\">here</a> is a link to the ECMA-262 specification, which is the underlying spec for JavaScript.  The grammar from that page says:</p>\n\n<pre><code>12.2 Variable Statement\n\nSyntax\n\n  VariableStatement :\n    var VariableDeclarationList ;\n\n  VariableDeclarationList :\n    VariableDeclaration\n    VariableDeclarationList , VariableDeclaration\n\n  VariableDeclarationListNoIn :\n    VariableDeclarationNoIn\n    VariableDeclarationListNoIn , VariableDeclarationNoIn\n\n  VariableDeclaration :\n    Identifier Initialiseropt\n\n  VariableDeclarationNoIn :\n    Identifier InitialiserNoInopt\n\n  Initialiser :\n    = AssignmentExpression\n  InitialiserNoIn :\n    = AssignmentExpressionNoIn\n</code></pre>\n\n<p>What you can glean from this is using commas or not doesn't matter.  Either way, it ends up being parsed as a <code>VariableDeclaration</code> and is treated exactly the same.  There should be no difference to how the script engine treats the two declarations.  The only differences would be ones already mentioned in other answers - saving more space and practically immeasurable differences in the amount of time it takes to apply the grammar to find all the <code>VariableDeclarations</code> when the script is compiled.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>After reading Crockford and others, I started to chain my variables with comma exclusively. Then later, I really got annoyed by the Chrome DevTools debugger that wouldn't stop at variable definitions with comma. For the debugger, variable definitions chained with comma are a single statement, while multiple var statements are multiple statements at which the debugger can stop. Therefore, I switched back from:</p>\n\n<pre><code>var a = doSomethingA,\n    b = doSomethignB,\n    c = doSomethingC;\n</code></pre>\n\n<p>To:</p>\n\n<pre><code>var a = doSomethingA;\nvar b = doSomethignB;\nvar c = doSomethingC;\n</code></pre>\n\n<p>By now, I find the second variant much cleaner. Have any others experienced the debugger issue? Please don't come up with the \"less code through the wire\" argument. There are minifiers.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>What are the differences and/or advantages, if any, of using commas when declaring a group of variables rather than semicolons.</p>\n\n<p>For example:</p>\n\n<pre><code>var foo = 'bar', bar = 'foo';\n</code></pre>\n\n<p>versus</p>\n\n<pre><code>var foo = 'bar';\nvar bar = 'foo';\n</code></pre>\n\n<p>I know that if you specify the <code>var</code> keyword on the first variable in the first example it persists across all of the variables, so they both produce the same end result regarding scope.  Is it just personal preference, or is there a performance benefit to doing it either way?</p>\n",
            "last_activity_date": 1400746638,
            "question_id": 3781406,
            "score": 38,
            "tags": [
                "javascript",
                "variables"
            ],
            "title": "JavaScript variable definition: Commas vs. Semicolons"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>I think the first article you link to states it pretty clearly:</p>\n\n<blockquote>\n  <p>The obvious advantage to writing JavaScript in this manner is that you can use it obscure values that you don't want the user to directly access.</p>\n</blockquote>\n\n<p>The goal here is to encapsulate and abstract away the fields by only allowing access to them thru a get() or set() method. This way, you can store the field/data internally in whichever way you want, but outside components are only away of your published interface. This allows you to make internal changes without changing external interfaces, to do some validation or error-checking within the set() method, etc.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You'd use them for instance to implement computed properties.</p>\n\n<p>For example:</p>\n\n<pre><code>function Circle(radius) {\n    this.radius = radius;\n}\n\nObject.defineProperty(Circle.prototype, 'circumference', {\n    get: function() { return 2*Math.PI*this.radius; }\n});\n\nObject.defineProperty(Circle.prototype, 'area', {\n    get: function() { return Math.PI*this.radius*this.radius; }\n});\n\nc = new Circle(10);\nconsole.log(c.area); // Should output 314.159\nconsole.log(c.circumference); // Should output 62.832\n</code></pre>\n\n<p><sup><a href=\"http://codepen.io/anon/pen/HJigF?editors=101\" rel=\"nofollow\">(CodePen)</a></sup></p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>Getters and Setters are just general concepts that do exactly what the name says: Get a variable/object, and Set a variable/object. </p>\n\n<p>Here's how I personally \"get\" and \"set\" my own variables:</p>\n\n<pre><code>var data = \"Hello World\"\n</code></pre>\n\n<p>Some people sometimes need to abstract things out, so they do that instead:</p>\n\n<pre><code>function get(value){\n    [...]\n}\n\nfunction set(name,value){\n    [...]\n}\n\nset(\"data\",\"Hello World\");\nvar data = get(\"data\");\n</code></pre>\n\n<p>I don't use Getters and Setters much, but there are some good uses for them, for example when you need to abstract out the way a variable is stored/accessed.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Have a look at:</p>\n\n<p><a href=\"https://developer.mozilla.org/En/Core%5FJavaScript%5F1.5%5FGuide:Creating%5FNew%5FObjects:Defining%5FGetters%5Fand%5FSetters\" rel=\"nofollow\">Defining Getters and Setters</a></p>\n\n<p>and this</p>\n\n<p><a href=\"http://books.google.com/books?id=wgKTVaMOP6EC&amp;pg=PA1050&amp;lpg=PA1050&amp;dq=define%2Bjavascript%2Bgetter%2Bsetter&amp;source=bl&amp;ots=j%5FnJiD3B5y&amp;sig=cO3NvIwOyAB5MSKcsa0N39xOCfc&amp;hl=en&amp;ei=slT7Say3EteX%5FAasqZiKBQ&amp;sa=X&amp;oi=book%5Fresult&amp;ct=result&amp;resnum=9\" rel=\"nofollow\">Javascript Bible</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you're referring to the concept of accessors, then the simple goal is to hide the underlying storage from arbitrary manipulation.  The most extreme mechanism for this is</p>\n\n<pre><code>function Foo(someValue) {\n    this.getValue = function() { return someValue; }\n    return this;\n}\n\nvar myFoo = new Foo(5);\n/* We can read someValue through getValue(), but there is no mechanism\n * to modify it -- hurrah, we have achieved encapsulation!\n */\nmyFoo.getValue();\n</code></pre>\n\n<p>If you're referring to the actual JS getter/setter feature, eg. <code>defineGetter</code>/<code>defineSetter</code>, or <code>{ get Foo() { /* code */ } }</code>, then it's worth noting that in most modern engines subsequent usage of those properties will be much much slower than it would otherwise be.  eg. compare performance of</p>\n\n<pre><code>var a = { getValue: function(){ return 5; }; }\nfor (var i = 0; i &lt; 100000; i++)\n    a.getValue();\n</code></pre>\n\n<p>vs.</p>\n\n<pre><code>var a = { get value(){ return 5; }; }\nfor (var i = 0; i &lt; 100000; i++)\n    a.value;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Getters and setters really only make sense when you have private properties of classes.  Since Javascript doesn't really have private class properties as you would normally think of from Object Oriented Languages, it can be hard to understand.  Here is one example of a private counter object.   The nice thing about this object is that the internal variable \"count\" cannot be accessed from outside the object.</p>\n\n<pre><code>var counter = function() {\n    var count = 0;\n\n    this.inc = function() {\n        count++;\n    };\n\n    this.getCount = function() {\n        return count;\n    };\n};\n\nvar i = new Counter();\ni.inc();\ni.inc();\n// writes \"2\" to the document\ndocument.write( i.getCount());\n</code></pre>\n\n<p>If you are still confused, take a look at Crockford's article on <a href=\"http://javascript.crockford.com/private.html\" rel=\"nofollow\">Private Members in Javascript</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In addition to <a href=\"http://stackoverflow.com/questions/812961/javascript-getters-and-setters-for-dummies-meaning-me/812985#812985\">@Sii's answer</a>, setters can also be used to update other values.</p>\n\n<pre><code>function Name(first, last) {\n    this.first = first;\n    this.last = last;\n}\n\nName.prototype = {\n    get fullName() {\n        return this.first + \" \" + this.last;\n    },\n\n    set fullName(name) {\n        var names = name.split(\" \");\n        this.first = names[0];\n        this.last = names[1];\n    }\n};\n</code></pre>\n\n<p>Now, you can set <code>fullName</code>, and <code>first</code> and <code>last</code> will be updated and vice versa.</p>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>I've got one for you guys that might be a little ugly, but it does get'er done across platforms</p>\n\n<pre><code>function myFunc () {\n\nvar _myAttribute = \"default\";\n\nthis.myAttribute = function() {\n    if (arguments.length &gt; 0) _myAttribute = arguments[0];\n    return _myAttribute;\n}\n}\n</code></pre>\n\n<p>this way, when you call</p>\n\n<pre><code>var test = new myFunc();\ntest.myAttribute(); //-&gt; \"default\"\ntest.myAttribute(\"ok\"); //-&gt; \"ok\"\ntest.myAttribute(); //-&gt; \"ok\"\n</code></pre>\n\n<p>If you really want to spice things up.. you can insert a typeof check:</p>\n\n<pre><code>if (arguments.length &gt; 0 &amp;&amp; typeof arguments[0] == \"boolean\") _myAttribute = arguments[0];\nif (arguments.length &gt; 0 &amp;&amp; typeof arguments[0] == \"number\") _myAttribute = arguments[0];\nif (arguments.length &gt; 0 &amp;&amp; typeof arguments[0] == \"string\") _myAttribute = arguments[0];\n</code></pre>\n\n<p>or go even crazier with the advanced typeof check: <a href=\"http://www.codingforums.com/showthread.php?t=105653\" rel=\"nofollow\">type.of() code at codingforums.com</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>What's so confusing about it... getters are functions that are called when you get a property, setters, when you set it.\nexample, if you do</p>\n\n<pre><code>obj.prop = \"abc\";\n</code></pre>\n\n<p>You're setting the property prop, if you're using getters/setters, then the setter function will be called, with \"abc\" as an argument. \nThe setter function definition inside the object would ideally look something like this:</p>\n\n<pre><code>set prop(var) {\n   // do stuff with var...\n}\n</code></pre>\n\n<p>I'm not sure how well that is implemented across browsers. It seems Firefox also has an alternative syntax, with double-underscored special (\"magic\") methods. As usual Internet Explorer does not support any of this.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can define instance method for js class, via prototype of the constructor.<br /></p>\n\n<p>Following is the sample code:</p>\n\n<pre><code>// BaseClass\n\nvar BaseClass = function(name) {\n    // instance property\n    this.name = name;\n};\n\n// instance method\nBaseClass.prototype.getName = function() {\n    return this.name;\n};\nBaseClass.prototype.setName = function(name) {\n    return this.name = name;\n};\n\n\n// test - start\nfunction test() {\n    var b1 = new BaseClass(\"b1\");\n    var b2 = new BaseClass(\"b2\");\n    console.log(b1.getName());\n    console.log(b2.getName());\n\n    b1.setName(\"b1_new\");\n    console.log(b1.getName());\n    console.log(b2.getName());\n}\n\ntest();\n// test - end\n</code></pre>\n\n<p>And, this should work for any browser, you can also simply use nodejs to run this code.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I was also somewhat confused by the <a href=\"http://ejohn.org/blog/javascript-getters-and-setters/\" rel=\"nofollow\">explanation I read</a>, because I was trying to add a property to an existing prototype that I did not write, so replacing the prototype seemed like the wrong approach. So, for posterity, here's how I added a <code>last</code> property to <code>Array</code>:</p>\n\n<pre><code>Object.defineProperty(Array.prototype, \"last\", {\n    get: function() { return this[this.length - 1] }\n});\n</code></pre>\n\n<p>Ever so slightly nicer than adding a function IMHO.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Sorry to resurrect an old question, but I thought I might contribute a couple of very basic examples and for-dummies explanations.  None of the other answers posted thusfar illustrate syntax like the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects#Defining_getters_and_setters\" rel=\"nofollow\">MDN guide</a>'s first example, which is about as basic as one can get.</p>\n\n<p><strong>Getter:</strong></p>\n\n<pre><code>var settings = {\n    firstname: 'John',\n    lastname: 'Smith',\n    get fullname() { return this.firstname + ' ' + this.lastname; }\n};\n\nconsole.log(settings.fullname);\n</code></pre>\n\n<p>... will log <code>John Smith</code>, of course.  A <em>getter</em> behaves like a variable object property, but offers the flexibility of a function to calculate its returned value on the fly.  It's basically a fancy way to create a function that doesn't require () when calling.</p>\n\n<p><strong>Setter:</strong></p>\n\n<pre><code>var address = {\n    set raw(what) {\n        var loc = what.split(/\\s*;\\s*/),\n        area = loc[1].split(/,?\\s+(\\w{2})\\s+(?=\\d{5})/);\n\n        this.street = loc[0];\n        this.city = area[0];\n        this.state = area[1];\n        this.zip = area[2];\n    }\n};\n\naddress.raw = '123 Lexington Ave; New York NY  10001';\nconsole.log(address.city);\n</code></pre>\n\n<p>... will log <code>New York</code> to the console.  Like getters, <em>setters</em> are called with the same syntax as setting an object property's value, but are yet another fancy way to call a function without ().</p>\n\n<p>See <a href=\"http://jsfiddle.net/calraith/dybsLm5L/\" rel=\"nofollow\">this jsfiddle</a> for a more thorough, perhaps more practical example.  Passing values into the object's <em>setter</em> triggers the creation or population of other object items.  Specifically, in the jsfiddle example, passing an array of numbers prompts the setter to calculate mean, median, mode, and range; then sets object properties for each result.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've been trying to get my head around getters and setters and its not sinking in. I've read <a href=\"http://ejohn.org/blog/javascript-getters-and-setters/\">JavaScript Getters and Setters</a> and <a href=\"https://developer.mozilla.org/En/Core%5FJavaScript%5F1.5%5FGuide:Creating%5FNew%5FObjects:Defining%5FGetters%5Fand%5FSetters\">Defining Getters and Setters</a> and just not getting it.</p>\n\n<p>Can someone clearly state:</p>\n\n<ol>\n<li>What a getter and setter are meant to do, and </li>\n<li>Give some VERY simple examples?</li>\n</ol>\n",
            "last_activity_date": 1413171024,
            "question_id": 812961,
            "score": 34,
            "tags": [
                "javascript"
            ],
            "title": "Javascript getters and setters for dummies?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<pre><code>^.*(?=.{8,})(?=.*[a-zA-Z])(?=.*\\d)(?=.*[!#$%&amp;? \"]).*$\n\n---\n\n^.*              : Start\n(?=.{8,})        : Length\n(?=.*[a-zA-Z])   : Letters\n(?=.*\\d)         : Digits\n(?=.*[!#$%&amp;? \"]) : Special characters\n.*$              : End\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 36
                },
                {
                    "body": "<p>You can achieve each of the individual requirements easily enough (e.g. minimum 8 characters: <code>.{8,}</code> will match 8 or more characters).</p>\n\n<p>To combine them you can use \"positive lookahead\" to apply multiple sub-expressions to the same content. Something like <code>(?=.*\\d.*).{8,}</code> to match one (or more) digits with lookahead, and 8 or more characters.</p>\n\n<p>So:</p>\n\n<pre>\n(?=.*\\d.*)(?=.*[a-zA-Z].*)(?=.*[!#\\$%&\\?].*).{8,}\n</pre>\n\n<p>Remembering to escape meta-characters.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Try this</p>\n\n<pre><code>((?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[\\W]).{6,20})\n</code></pre>\n\n<p>Description of above Regular Expression:</p>\n\n<pre><code>(           # Start of group\n  (?=.*\\d)      #   must contains one digit from 0-9\n  (?=.*[a-z])       #   must contains one lowercase characters\n  (?=.*[\\W])        #   must contains at least one special character\n              .     #     match anything with previous condition checking\n                {8,20}  #        length at least 8 characters and maximum of 20 \n)           # End of group\n</code></pre>\n\n<p>\"/W\" will increase the range of characters that can be used for password and pit can be more safe.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>can any one help me in creating a regular expression for password validation.</p>\n\n<p>The Condition is \"Password must contain 8 characters and at least one number, one  letter and one unique character such as <code>!#$%&amp;? \"</code></p>\n",
            "last_activity_date": 1376292038,
            "question_id": 2370015,
            "score": 18,
            "tags": [
                "javascript",
                "regex"
            ],
            "title": "Regular Expression for password validation"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>I'm guessing you mean something like this:</p>\n\n<p>Go to url in browser, URL is: <a href=\"http://example.com/image.png\" rel=\"nofollow\">http://example.com/image.png</a></p>\n\n<p>and instead of displaying, the browser prompts you to save the image?</p>\n\n<p>I'm fairly certain that you cannot force this with javascript and will need a server-side language to control headers.  And even at that point you cannot FORCE the browser to download it, each useragent will react differently to whatever headers you may send.</p>\n\n<p>EDIT: I seem to remember the header being <code>Content-Disposition: attachment;</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You need to use server-side scripting for this. <a href=\"http://stackoverflow.com/search?q=force%20download%20script\">Search on stackoverflow</a>.</p>\n\n<p>Alternately, your server might allow you to alter headers dynamically via configuration.</p>\n\n<h3>Apache solution with mod_headers</h3>\n\n<p>Place your downloadable images in a directory. Inside this directory, create a <code>.htaccess</code> file with the following contents:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>SetEnvIf Request_URI \"([^/]+\\.jpg)$\" REQUESTED_IMAGE_BASENAME=$1\nSetEnvIf Request_URI \"([^/]+\\.png)$\" REQUESTED_IMAGE_BASENAME=$1\nHeader set Content-Disposition \"attachment; filename=\\\"%{REQUESTED_IMAGE_BASENAME}e\\\"\" env=REQUESTED_IMAGE_BASENAME\n</code></pre>\n\n<p>Test Request:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>HEAD /test/Water%20lilies.jpg HTTP/1.1\nHost: localhost\n</code></pre>\n\n<p>Test Response:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>HTTP/1.1 200 OK\nDate: Sat, 23 Jul 2011 09:03:52 GMT\nServer: Apache/2.2.17 (Win32)\nLast-Modified: Thu, 23 Aug 2001 14:00:00 GMT\nETag: \"26000000017df3-14752-38c32e813d800\"\nAccept-Ranges: bytes\nContent-Length: 83794\nContent-Disposition: attachment; filename=\"Water lilies.jpg\"\nContent-Type: image/jpeg\n</code></pre>\n\n<h3>HTML5 Solution</h3>\n\n<p>You can <a href=\"http://www.w3.org/TR/html5/links.html#downloading-resources\" rel=\"nofollow\">use the HTML5 <code>download</code> attribute on anchors</a>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;p&gt;Example 1&lt;br&gt;\r\n   &lt;a href=\"http://dummyimage.com/600x400/000/fff.png\" download&gt;Download this image&lt;/a&gt;&lt;/p&gt;\r\n\r\n&lt;p&gt;Example 2&lt;br&gt;\r\n   &lt;a href=\"http://dummyimage.com/600x400/000/fff.png\" download=\"alternate-filename.png\"&gt;&lt;img\r\n       src=\"http://dummyimage.com/150x100/000/fff.png\"&gt;&lt;/a&gt;&lt;/p&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>This is totally possible. Just encode the image as Base64 then do a <code>window.open</code> with a <code>data:image/jpg,Base64,...</code>-style url.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have come up with pure JavaScript way to force download of image, with the following restrictions:</p>\n\n<ol>\n<li>Using HTML5 so not working at all in IE browsers before IE9.</li>\n<li>In IE (even 9) limited to very  small images, due to URL length limit.</li>\n<li>The image name (when saved to machine) can't be determined in the code, in Chrome it will be just \"download\" without extension and in Firefox it will be what looks like jibberish string with \".part\" extension - either way, user will have to rename the file to make it usable.</li>\n<li>Can only download images in the same domain - same origin policy.</li>\n</ol>\n\n<p>The above restrictions (especially the third) more or less renders this useless but still, the \"core\" idea <strong>is</strong> working and hopefully at some point in the future it will be possible to determine file name then it will become much more useful.</p>\n\n<p>Here is the code:</p>\n\n<pre><code>function DownloadImage(imageURL) {\n    var oImage = document.getElementById(imageURL);\n    var canvas = document.createElement(\"canvas\");\n    document.body.appendChild(canvas);\n    if (typeof canvas.getContext == \"undefined\" || !canvas.getContext) {\n        alert(\"browser does not support this action, sorry\");\n        return false;\n    }\n\n    try {\n        var context = canvas.getContext(\"2d\");\n        var width = oImage.width;\n        var height = oImage.height;\n        canvas.width = width;\n        canvas.height = height;\n        canvas.style.width = width + \"px\";\n        canvas.style.height = height + \"px\";\n        context.drawImage(oImage, 0, 0, width, height);\n        var rawImageData = canvas.toDataURL(\"image/png;base64\");\n        rawImageData = rawImageData.replace(\"image/png\", \"image/octet-stream\");\n        document.location.href = rawImageData;\n        document.body.removeChild(canvas);\n    }\n    catch (err) {\n        document.body.removeChild(canvas);\n        alert(\"Sorry, can't download\");\n    }\n\n    return true;\n}\n</code></pre>\n\n<p>As you can see, the trick is drawing the image into <code>canvas</code> object, get the raw binary data of the image then force download by using <code>image/octet-stream</code> mime type and changing the browser location.</p>\n\n<p>Usage sample follows as well.</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;image id=\"myimage\" src=\"Penguins.jpg\" /&gt;\n&lt;button type=\"btnDownload\" rel=\"myimage\"&gt;Download&lt;/button&gt;\n</code></pre>\n\n<p>JavaScript:</p>\n\n<pre><code>window.onload = function() {\n    var arrButtons = document.getElementsByTagName(\"button\");\n    for (var i = 0; i &lt; arrButtons.length; i++) {\n        var oButton = arrButtons[i];\n        var sRelatedImage = oButton.getAttribute(\"rel\");\n        if (sRelatedImage &amp;&amp; sRelatedImage.length &gt; 0) {\n            oButton.onclick = function() {\n                HandleRelatedImage(this, sRelatedImage);\n            }\n        }\n    }\n};\n\nfunction HandleRelatedImage(oButton, sRelatedImage) {\n    var oImage = document.getElementById(sRelatedImage);\n    if (!oImage) {\n        alert(\"related image '\" + sRelatedImage + \"' does not exist\");\n        return false;\n    }\n\n    return DownloadImage(sRelatedImage);\n}\n</code></pre>\n\n<p>This allows to \"attach\" download button to every existing image by assigning the <code>rel</code> attribute of the button to the image ID - the code will do the rest and attach the actual click events.</p>\n\n<p>Due to the same origin policy can't post live example at jsFiddle - they're using \"sandbox\" domain to execute the scripts.</p>\n",
                    "is_accepted": false,
                    "score": 10
                }
            ],
            "body": "<p>I want to know if there is any way to make a script using Javascript/jQuery to download (open a download dialog) a image so the browser won't just show it.</p>\n",
            "last_activity_date": 1419889180,
            "question_id": 6796974,
            "score": 3,
            "tags": [
                "javascript",
                "jquery",
                "file-io",
                "force-download"
            ],
            "title": "Force Download an Image Using Javascript"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Delete all invisible characters (whitespace) around that area, then give it another try.</p>\n\n<p>I've seen that error in Safari when copy/pasting code. You can pick up some invalid (and unfortunately invisible) characters.</p>\n\n<p>Used to happen to me a lot when copying from jsFiddle.</p>\n",
                    "is_accepted": true,
                    "score": 129
                },
                {
                    "body": "<p>It doesn't apply to this particular code example, but as Google food, since I got the same error message:</p>\n\n<pre><code>&lt;script&gt;document.write('&lt;script src=\"\u2026\"&gt;&lt;/script&gt;');&lt;/script&gt;\n</code></pre>\n\n<p>will give this error but</p>\n\n<pre><code>&lt;script&gt;document.write('&lt;script src=\"\u2026\"&gt;&lt;'+'/script&gt;');&lt;/script&gt;\n</code></pre>\n\n<p>will not.</p>\n\n<p>Further explanation here: <a href=\"http://stackoverflow.com/questions/236073/why-split-the-script-tag-when-writing-it-with-document-write/236106#236106\">Why split the &lt;script&gt; tag when writing it with document.write()?</a></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Double backslash also works ! Then you declare there really should be a / instead of some function or something.</p>\n\n<pre><code>&lt;script&gt;document.write('&lt;script src=\"\u2026\"&gt;&lt;//script&gt;');&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Also for the Google-fodder: check in your text editor whether the .js file is saved as Unicode and consider setting it to ANSI; also check if the linefeeds are set to DOS and consider switching them to Unix (depending on your server, of course).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Another possible cause for Googlers: Using additional units in a size like so:</p>\n\n<pre><code>$('#file_upload').uploadify({\n    'uploader'  : '/uploadify/uploadify.swf',\n    'script'    : '/uploadify/uploadify.php',\n    'cancelImg' : '/uploadify/cancel.png',\n    'folder'    : '/uploads',\n    'queueID'        : 'custom-queue',\n    'buttonImg': 'img/select-images.png',\n    'width': '351px'\n});\n</code></pre>\n\n<p>Setting '351px' there gave me the error. Removing 'px' banished the error.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>When in doubt... use JSLint to get it out!</p>\n\n<p><a href=\"http://www.jslint.com\" rel=\"nofollow\">http://www.jslint.com</a></p>\n\n<p>I just ran into a similar problem whilst copying this from JFiddle;</p>\n\n<pre><code>$('input[name=MeetAll]').change(function (e) {\n  $('#MeetMost').attr('checked', !$('#MeetAll').attr('checked'));\n});\n$('input[name=MeetMost]').change(function (e) {\n  $('#MeetAll').attr('checked', !$('#MeetMost').attr('checked'));\n});\u200b\n</code></pre>\n\n<p>Jslint told me i had a random \".\" Charachter...</p>\n\n<p>Things that make you go \"hmmmmmm\"</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I got the same error when the script file I was including container some special characters and when I was running in local moode (directly from local disk). I my case the solution was to explicitly tell the encoding:</p>\n\n<pre><code>&lt;script src=\"my.js\" charset=\"UTF-8\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It won't be exactly refering to the given problem, but I wanna share my mistake here, maybe some1 will make simmilar one and will also land with his/her problem here:</p>\n\n<p>Ive got \"<code>Unexpected token ILLEGAL</code>\" error because I named a function with a number as 1st char.</p>\n\n<p>It was \"<code>3x3check()</code>\".\nChanging it to \"<code>check3x3()</code>\" solved my problem.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Note for anyone running Vagrant: this can be caused by a bug with their shared folders. Specify NFS for your shared folders in your Vagrantfile to avoid this happening.</p>\n\n<p>Simply adding <code>type: \"nfs\"</code> to the end will do the trick, like so:</p>\n\n<pre><code>config.vm.synced_folder \".\", \"/vagrant\", type: \"nfs\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This error can also be caused by a javascript line like this one:</p>\n\n<pre><code>navi_elements.style.bottom = 20px;\n</code></pre>\n\n<p>Notice that the value is not a string.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use online Minify, it removes these invisible characters efficiently but also changes your code. So be careful.</p>\n\n<p><a href=\"http://jscompress.com/\" rel=\"nofollow\">http://jscompress.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<pre><code>// if the box is outside the window, move it to the end\nfunction checkEdge() {\n    var windowsLeftEdge = $('#window').position().left;\n\n    $('.box').each( function(i, box) {\n        // right edge of the sliding box\n        var boxRightEdge = $(box).position().left + $(box).width();\n\n        // position of last box + width + 10px\n        var newPosition = getNewPosition();\n\n        if ( parseFloat(boxRightEdge) &lt; parseFloat(windowsLeftEdge) ) { \n            $(box).css('left', newPosition);\n            $(box).remove().appendTo('#window');\n            first = $('.box:first').attr('class');\n        }\n    });\n}\u200b //Uncaught SyntaxError: Unexpected token ILLEGAL Occurs Here\n\n// arrange the boxes to be aligned in a row\nfunction arrangeBoxes() {\n    $('.box').each( function(i, item) {\n        var position = $('#window').position().left + i * ( $(item).width());\n        $(item).css('left', position+'px')\n    });\n}\n\n// shifts all the boxes to the left, then checks if any left the window\nfunction shiftLeft() {\n    $('.box').animate({'left' : \"-=100px\"}, 5000, 'linear', checkEdge());\n}\n\n// returns the new location for the box that exited the window\nfunction getNewPosition() {\n    return $('.box:last').position().left + $('.box:last').outerWidth();\n}\n\n$(window).load(function() {\n      arrangeBoxes();\n    shiftLeft();\n    setInterval('shiftLeft()', 5000);\n\n    $('#gallery-slideshow').nivoSlider({\n        effect:'fade', //Specify sets like: 'fold,fade,sliceDown'\n        slices:15,\n        animSpeed:500, //Slide transition speed\n        pauseTime:3000,\n        startSlide:0, //Set starting Slide (0 index)\n        directionNav:true, //Next &amp; Prev\n        directionNavHide:true, //Only show on hover\n        controlNav:false, //1,2,3...\n        keyboardNav:false, //Use left &amp; right arrows\n        pauseOnHover:false, //Stop animation while hovering\n        manualAdvance:false, //Force manual transitions\n        captionOpacity:0, //Universal caption opacity\n        beforeChange: function(){},\n        afterChange: function(){},\n        slideshowEnd: function(){}, //Triggers after all slides have been shown\n        lastSlide: function(){}, //Triggers when last slide is shown\n        afterLoad: function(){} //Triggers when slider has loaded\n    });\n\n});\n\n$(document).ready(function(){\n\n    $('.class-table tr').click(function(){\n        window.location=$(this).find(\"a\").attr(\"href\"); return false;\n    });\n\n    $('.special-workshop').click(function(){\n        window.location=$(this).find(\"a\").attr(\"href\"); return false;\n    });\n\n});\n</code></pre>\n\n<p>I am getting an Uncaught SyntaxError: Unexpected token ILLEGAL on the line mentioned above. It occurs only in Google Chrome and Safari. It works in Firefox and the same code works on this JSBin (<a href=\"http://jsbin.com/uceqi/18\">http://jsbin.com/uceqi/18</a>)</p>\n\n<p>What is going on?</p>\n\n<p>There are numerous references to this problem on Stackoverflow but none of them seem to apply to this situation.</p>\n\n<p>If it helps JSLint also throws and error on that line character 2 \"Problem at line 22 character 2: Unexpected '\u200b'.\"</p>\n",
            "last_activity_date": 1412952713,
            "question_id": 4404526,
            "score": 54,
            "tags": [
                "javascript",
                "jquery",
                "google-chrome",
                "safari"
            ],
            "title": "Unexpected token ILLEGAL in webkit"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<pre><code>&lt;form name=\"formname\" .... id=\"form-first\"&gt;\n    &lt;iframe id=\"one\" src=\"iframe2.html\"&gt;\n    &lt;/iframe&gt;\n&lt;/form&gt;\n\n\nfunction iframeRef( frameRef ) {\n    return frameRef.contentWindow ? frameRef.contentWindow.document : frameRef.contentDocument\n}\n\nvar inside = iframeRef( document.getElementById('one') )\n</code></pre>\n\n<p>inside is now a reference to the document, so you can do getElementsByTagName('textarea') and whatever you like, depending on what's inside the iframe src.</p>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<p>Using jQuery you can use <code>contents()</code>. For example:</p>\n\n<pre><code>var inside = $('#one').contents();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>I have a webpage where there is a texarea within a iframe. I need to read the value of this textarea from its child page javascript. Presently by using <code>window.parent.getelementbyID().value</code> in the javascript, I am able to fetch values of all controls in the parent page except the textarea within the iframe.\nThe frame id and frame name in my parent page changes in runtime, hence we cannot use the frame id/frame name for reference.</p>\n\n<p>Can anyone please give me any pointers to resolve this issue? \nThanks in Advance,</p>\n",
            "last_activity_date": 1384845531,
            "question_id": 1452871,
            "score": 23,
            "tags": [
                "javascript",
                "dom",
                "iframe"
            ],
            "title": "How can I access iFrame elements with Javascript?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>There are numerous reasons why disabling the back button will not really work. Your best bet is to warn the user:</p>\n\n<pre><code>window.onbeforeunload = function() { return \"You work will be lost.\"; };\n</code></pre>\n\n<p>This page does list a number of ways you <em>could</em> try to disable the back button, but none are guaranteed:</p>\n\n<p><a href=\"http://www.irt.org/script/311.htm\">http://www.irt.org/script/311.htm</a></p>\n",
                    "is_accepted": true,
                    "score": 24
                },
                {
                    "body": "<p><strong>It is generally a bad idea overriding the default behavior of web browsers.</strong> Client side script do not have the privilege to do this for security reasons. </p>\n\n<p>There are lot of other similar type of questions asked before like,</p>\n\n<p><a href=\"http://stackoverflow.com/questions/1495219/how-can-i-prevent-the-backspace-key-from-navigating-back\">How can I prevent the backspace key from navigating back?</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/3850442/how-to-prevent-browsers-default-history-back-action-for-backspace-button-with-j?lq=1\">How to prevent browser's default history back action for backspace button with JavaScript?</a></p>\n\n<p>You can-not actually disable back button but you can play with your logic to prevent user from navigating back. Here you go.</p>\n\n<pre><code>(function ($, global) {\n\n    var _hash = \"!\",\n    noBackPlease = function () {\n        global.location.href += \"#\";\n\n        setTimeout(function () {\n            global.location.href += \"!\";\n        }, 50);\n    };\n\n    global.setInterval(function () {\n        if (global.location.hash != _hash) {\n            global.location.hash = _hash;\n        }\n    }, 100);\n\n    global.onload = function () {\n        noBackPlease();\n\n        // disables backspace on page except on input fields and textarea.\n        $(document.body).keydown(function (e) {\n            var elm = e.target.nodeName.toLowerCase();\n            if (e.which == 8 &amp;&amp; elm !== 'input' &amp;&amp; elm  !== 'textarea') {\n                e.preventDefault();\n            }\n            // stopping event bubbling up the DOM tree..\n            e.stopPropagation();\n        });\n    }\n\n})(jQuery, window);\n</code></pre>\n\n<p>Just put this snippet in a separate script (Recommended) and include it in on a page where you want this functionality. Currently it will execute <code>onload</code> event of DOM attached to window. You can easily modified the script to control the execution of <code>noBackPlease()</code>. All you need to do is to make this function public and use where ever you want but then again, <code>onload</code> should be the ideal entry point of this script.</p>\n\n<p><em>Tested in all browsers and IE-8, 9</em>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://jordanhollinger.com/2012/06/08/disable-the-back-button-using-html5\" rel=\"nofollow\">This article on jordanhollinger.com</a> is the best option I feel. Similar to Razor's answer but a bit clearer. Code below; full credits to Jordan Hollinger:</p>\n\n<p>Page before:</p>\n\n<pre><code>&lt;a href=\"/page-of-no-return.htm#no-back&gt;You can't go back from the next page&lt;/a&gt;\n</code></pre>\n\n<p>Page of no return's JavaScript:</p>\n\n<pre><code>// It works without the History API, but will clutter up the history\nvar history_api = typeof history.pushState !== 'undefined'\n\n// The previous page asks that it not be returned to\nif ( location.hash == '#no-back' ) {\n  // Push \"#no-back\" onto the history, making it the most recent \"page\"\n  if ( history_api ) history.pushState(null, '', '#stay')\n  else location.hash = '#stay'\n\n  // When the back button is pressed, it will harmlessly change the url\n  // hash from \"#stay\" to \"#no-back\", which triggers this function\n  window.onhashchange = function() {\n    // User tried to go back; warn user, rinse and repeat\n    if ( location.hash == '#no-back' ) {\n      alert(\"You shall not pass!\")\n      if ( history_api ) history.pushState(null, '', '#stay')\n      else location.hash = '#stay'\n    }\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code> &lt;HTML&gt;\n  &lt;HEAD&gt;\n&lt;TITLE&gt;Disable Back Button in Browser - Online Demo&lt;/TITLE&gt;\n&lt;STYLE&gt;body,input{font-family:Calibri,Arial}&lt;/STYLE&gt;\n&lt;script type=\"text/javascript\"&gt;window.history.forward();function noBack()                     {window.history.forward();}&lt;/script&gt;\n&lt;/HEAD&gt;\n    &lt;BODY onload=\"noBack();\" onpageshow=\"if (event.persisted) noBack();\" onunload=\"\"&gt;\n      &lt;H2&gt;Demo&lt;/H2&gt;\n\n &lt;p&gt;This page contains the code to avoid Back button.\n  &lt;/p&gt;\n &lt;p&gt;Click here to Goto &lt;a href=\"noback.html\"&gt;NoBack Page&lt;/a&gt;\n &lt;/p&gt;\n &lt;/BODY&gt;\n\n&lt;/HTML&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>&lt;script&gt;\nwindow.location.hash=\"no-back-button\";\nwindow.location.hash=\"Again-No-back-button\";//again because google chrome don't insert first hash into history\nwindow.onhashchange=function(){window.location.hash=\"no-back-button\";}\n&lt;/script&gt; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>This is the way I could it accomplish it.\nWeirdly changing the window.location didn't worked out fine in chrome and safari.\nHappens that the location.hash doesn't create an entry in the history for chrome and safari. So you will have to use the pushstate.\nThis is working for me in all browsers.</p>\n\n<pre><code>    history.pushState({ page: 1 }, \"title 1\", \"#nbb\");\n    window.onhashchange = function (event) {\n        window.location.hash = \"nbb\";\n\n    };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This code will disable the back button for modern browsers which support the HTML5 History API. Under normal circumstances, pushing the back button goes back one step, to the previous page. If you use history.pushState(), you start adding extra sub-steps to the current page. The way it works is, if you were to use history.pushState() three times, then start pushing the back button, the first three times it would navigate back in these sub-steps, and then the fourth time it would go back to the previous page. </p>\n\n<p>If you combine this behaviour with an event listener on the <code>popstate</code> event, you can essentially set up an infinite loop of sub-states. So, you load the page, push a sub-state, then hit the back button, which pops a sub-state and also pushes another one, so if you push the back button again it will never run out of sub-states to push. If you feel that it's necessary to disable the back button, this will get you there.</p>\n\n<pre><code>history.pushState(null, null, 'no-back-button');\nwindow.addEventListener('popstate', function(event) {\n  history.pushState(null, null, 'no-back-button');\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>   &lt;script src=\"~/main.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        window.history.forward();\n        function noBack() { window.history.forward(); } &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You simply cannot and should not do this. However, but this might be helpful </p>\n\n<pre><code>&lt;script type = \"text/javascript\" &gt;\nhistory.pushState(null, null, 'pagename');\nwindow.addEventListener('popstate', function(event) {\nhistory.pushState(null, null, 'pagename');\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>Works in my chrome and firefox</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I create one HTML page ( index.html ). I also create a one ( mechanism.js ) inside a ( script ) folder / directory. Then, I lay all my content inside of ( index.html ) using form, table, span, and div tags as needed. Now, here's the trick that will make back / forward do nothing!</p>\n\n<p>First, the fact that you have only one page! Second, the use of JavaScript with span / div tags to hide and display content on the same page when needed via regular links!</p>\n\n<p>Inside ' index.html ' :</p>\n\n<pre><code>    &lt;td width=\"89px\" align=\"right\" valign=\"top\" style=\"letter-spacing:1px;\"&gt;\n     &lt;small&gt;\n      &lt;b&gt;\n       &lt;a href=\"#\" class=\"traff\" onClick=\"DisplayInTrafficTable();\"&gt;IN&lt;/a&gt;&amp;nbsp;\n      &lt;/b&gt;\n     &lt;/small&gt;\n     [&amp;nbsp;&lt;span id=\"inCountSPN\"&gt;0&lt;/span&gt;&amp;nbsp;]\n    &lt;/td&gt;\n</code></pre>\n\n<p>Inside ' mechanism.js ' :</p>\n\n<pre><code>    function DisplayInTrafficTable()\n    {\n     var itmsCNT = 0;\n     var dsplyIn = \"\";\n     for ( i=0; i&lt;inTraffic.length; i++ )\n     {\n      dsplyIn += \"&lt;tr&gt;&lt;td width='11'&gt;&lt;/td&gt;&lt;td align='right'&gt;\" + (++itmsCNT) + \"&lt;/td&gt;&lt;td width='11'&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;\" + inTraffic[i] + \"&lt;/b&gt;&lt;/td&gt;&lt;td width='11'&gt;&lt;/td&gt;&lt;td&gt;\" + entryTimeArray[i] + \"&lt;/td&gt;&lt;td width='11'&gt;&lt;/td&gt;&lt;td&gt;\" + entryDateArray[i] + \"&lt;/td&gt;&lt;td width='11'&gt;&lt;/td&gt;&lt;/tr&gt;\";\n     }\n     document.getElementById('inOutSPN').innerHTML = \"\" +\n                                             \"&lt;table border='0' style='background:#fff;'&gt;&lt;tr&gt;&lt;th colspan='21' style='background:#feb;padding:11px;'&gt;&lt;h3 style='margin-bottom:-1px;'&gt;INCOMING TRAFFIC REPORT&lt;/h3&gt;\" + DateStamp() + \"&amp;nbsp;&amp;nbsp;-&amp;nbsp;&amp;nbsp;&lt;small&gt;&lt;a href='#' style='letter-spacing:1px;' onclick='OpenPrintableIn();'&gt;PRINT&lt;/a&gt;&lt;/small&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr style='background:#eee;'&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;###&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;ID #&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td width='79'&gt;&lt;b&gt;TYPE&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;FIRST&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;LAST&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;PLATE #&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;COMPANY&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;TIME&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;DATE&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;b&gt;IN / OUT&lt;/b&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\" + dsplyIn.toUpperCase() + \"&lt;/table&gt;\" +\n                                             \"\";\n     return document.getElementById('inOutSPN').innerHTML;\n    }\n</code></pre>\n\n<p>It looks hairy, but note the function names and calls, embedded HTML, and the span tag id calls. This was to show how you can inject different HTML into same span tag on same page! How can Back/Forward affect this design? It cannot, because you are hiding objects and replacing others all on the same page!</p>\n\n<p>How to hide and display? Here goes:\nInside functions in ' mechanism.js ' as needed, use:</p>\n\n<pre><code>    document.getElementById('textOverPic').style.display = \"none\"; //hide\n    document.getElementById('textOverPic').style.display = \"\";     //display\n</code></pre>\n\n<p>Inside ' index.html ' call functions through links:</p>\n\n<pre><code>    &lt;img src=\"images/someimage.jpg\" alt=\"\" /&gt;\n    &lt;span class=\"textOverPic\" id=\"textOverPic\"&gt;&lt;/span&gt;\n</code></pre>\n\n<p>and</p>\n\n<pre><code>    &lt;a href=\"#\" style=\"color:#119;font-size:11px;text-decoration:none;letter-spacing:1px;\" onclick=\"HiddenTextsManager(1);\"&gt;Introduction&lt;/a&gt;\n</code></pre>\n\n<p>I hope I did not give you a headache. Sorry if I did :-)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In my case this was a shopping order. So what I did was disable the button. When the user clicked back, the button was disabled still. When they clicked back one more time, and then clicked a page button to go forward. I knew their order was submitted and skipped to another page.</p>\n\n<p>In the case when the page actually refreshed which would make the button (theoretically), available; I was then able to react in the page load that the order is already submitted and redirect then too.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;script language=\"JavaScript\"&gt;\n    javascript:window.history.forward(1);\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am doing online quiz app in php. I want to restrict user while going back in exam.\nI have tried following script but it stops my timer.\nWhat should I do please suggest me.\nI have included source code.\nThe timer is stored in cdtimer.js</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n        window.history.forward();\n        function noBack()\n        {\n            window.history.forward();\n        }\n&lt;/script&gt;\n&lt;body onLoad=\"noBack();\" onpageshow=\"if (event.persisted) noBack();\" onUnload=\"\"&gt;\n</code></pre>\n\n<p>I have exam timer which takes duration of exam from <em>mysql db</em> and starts timer accordingly it stops when I put code for disabling back button. what will be the problem. </p>\n",
            "last_activity_date": 1426225785,
            "question_id": 12381563,
            "score": 10,
            "tags": [
                "javascript",
                "browser"
            ],
            "title": "how to stop browser back button using javascript"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>It does support <code>localStorage</code>, though you need to be in IE8 mode (this will not work in IE7 mode).</p>\n\n<p>To check that you're working in IE8 mode, load up the developer console. At the top, make sure that IE8 mode is selected. Standards mode would also be nice.</p>\n\n<p>One thing that you also want to make sure of is that you're using the HTML5 doctype. You shouldn't be able to use an XHTML doctype with HTML5 features.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n</code></pre>\n\n<p>Using this doctype should not impact your browser support.</p>\n\n<p>Also, make sure you access <code>window.localStorage</code>. It shouldn't be an issue, but IE has been known to host weirder issues. Perhaps it's looking for a locally scoped <code>localStorage</code> object? Who knows.</p>\n",
                    "is_accepted": true,
                    "score": 44
                },
                {
                    "body": "<p>the comment of musicfreak was correct.\nBecause this feature requires domain, I had to use it only through a live url (at least localhost) and not by opening it as a file from a disk.</p>\n\n<p>There is no need to add <code>window.localStorage</code> as IE8 recognizes just <code>localStorage</code> as well.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Expanding upon a previous good Answer:</p>\n\n<p>I had this same problem --worse! even IE10 failed!-- and I discovered the solution (for me) had more to do with my development environment than Internet Explorer.  What I had done was create an HTML file, and edit it a lot using a good text editor.  I could click-drag the file into a browser to see my progress in developing the page, and later simply refresh the browser window, when I updated/edited various things in the file.</p>\n\n<p>It turns out that for Chrome and Firefox and Opera, window.localStorage was a valid object, but for Internet Explorer, it was \"undefined\" (as seen in the debugger).  However, once I fired up a Web Server program (for \"localhost\"), and used that to feed the HTML page to the browser, then Internet Explorer provided a valid object (\"DispHTMLStorage\") for window.localStorage.  Also note that in Tools/Options/Advanced for IE, there is a checkbox \"enable DOM storage\" --it appears to be checked by default, but it is always possible that some user will have manually disabled it.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I am trying to use the HTML5 feature <code>localStorage</code>. According to <a href=\"http://blogs.msdn.com/b/giorgio/archive/2009/11/29/ie8-and-html-5.aspx\">this blog</a> it can be done using IE8, however when I try to use it I get a javascript error <code>'localStorage is null or not an object'</code></p>\n\n<p>So my question: can <code>localStorage</code> be used by IE8 out-of-the-box? Here is my code:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\" /&gt;\n    &lt;title&gt;IE8 - DOM Storage&lt;/title&gt;\n    &lt;script type=\"text/javascript\"&gt; \n        function Save() {\n            localStorage.setItem('key','value');            \n        }        \n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;        \n    &lt;button onclick=\"Save();\"&gt;\n        Save\n    &lt;/button&gt;  \n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1380045694,
            "question_id": 3452816,
            "score": 39,
            "tags": [
                "javascript",
                "html",
                "html5",
                "internet-explorer",
                "internet-explorer-8"
            ],
            "title": "Does IE8 out-of-the-box have support for &#39;localStorage&#39;"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n&lt;title&gt;Untitled Document&lt;/title&gt;\n&lt;script&gt;\nremoveIt = function()\n{\n    var theSelect = document.getElementById(\"theSelect\");\n    var theOption = document.getElementById(\"theOption\");\n    theSelect.removeChild(theOption);\n};\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;select id=\"theSelect\"&gt;\n&lt;option&gt;1&lt;/option&gt;\n&lt;option id=\"theOption\"&gt;2&lt;/option&gt;\n&lt;option&gt;3&lt;/option&gt;\n&lt;/select&gt;\n&lt;input type=\"button\" onclick=\"removeIt()\" value=\"remove it!\"/&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I quickly got it working by simply removing it from its parentNode... obviously this is going to be a hack.<br>\nI'll try to find a better solution for you =)  </p>\n\n<p>By the way, welcome to Stack Overflow</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The workaround is to remove the <code>option</code> elements in response to your event and add them back if and when they are needed. IIRC, IE will not allow you to set the <code>display</code> to <code>none</code> on <code>option</code> elements. I would advise storing the removed elements in an array so that you can easily add them back in.</p>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>You probably have to remove the <code>&lt;option&gt;</code> instead of 'hiding' it. If it's not a solution for you, try disabling it.</p>\n\n<pre><code>document.getElementsByTagName('option')[0].disabled='disabled'\n</code></pre>\n\n<p>PS: You might want to reconsider using <code>getElementsByTagName('option')</code>, can get messy if you have more <code>&lt;select&gt;</code> elements.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The question is rather why that works in any browser at all?</p>\n\n<p>The options are not used as elements in the page, they contain the information to show in the select element. Some browsers let you apply some styles to the options, but generally you can't really expect cross browser support for any styles at all.</p>\n\n<p>If you want to keep an option from being displayed, you just have to remove it from the select.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As my solution (asp.net) .I try to do by that way.\n1.Create a dropdowlist will all ListItems \n2.Using javscript to add or remove ListItems (Note: add option need same value and text in asp:dropdowlist items)</p>\n\n<pre><code>function removeOptionSelected()\n{\n  var ddl = document.getElementById('ddl_DropList');\n  var i;\n  for (i = ddl.length - 1; i&gt;=0; i--) {\n\n      ddl.remove(i);\n  }\n}\nfunction addOptions3()\n{\n     removeOptionSelected();\n     var ddl = document.getElementById('ddl_DropList');\n    var elOptNew = document.createElement('option');\n\n    elOptNew.text = 'Monthly Top Producer(Project)';\n    elOptNew.value = 'GCE';\n    try {\n        ddl.add(elOptNew, null); // standards compliant; doesn't work in IE\n      }\n      catch(ex) {\n        ddl.add(elOptNew); // IE only\n      }\n    elOptNew = document.createElement('option');\n    elOptNew.text = 'Monthly Top Leaders - DD';\n    elOptNew.value = 'DRE';\n    try {\n        ddl.add(elOptNew, null); // standards compliant; doesn't work in IE\n      }\n      catch(ex) {\n        ddl.add(elOptNew); // IE only\n      }\n    elOptNew = document.createElement('option');\n    elOptNew.text = 'Monthly Top Leaders - SDD';\n    elOptNew.value = 'DRESDD';\n    try {\n        ddl.add(elOptNew, null); // standards compliant; doesn't work in IE\n      }\n      catch(ex) {\n        ddl.add(elOptNew); // IE only\n      }\n    elOptNew = document.createElement('option');\n    elOptNew.text = 'Monthly Top Leaders - GD';\n    elOptNew.value = 'GRE';\n    try {\n        ddl.add(elOptNew, null); // standards compliant; doesn't work in IE\n      }\n      catch(ex) {\n        ddl.add(elOptNew); // IE only\n      }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For deleting of one option from select form may be used jQuery's $().eq().remove() or $().remove().</p>\n\n<p>Similar was my deleting of one table row from table:</p>\n\n<pre><code>$('form table tr').eq(1).remove();\n</code></pre>\n\n<p>where:</p>\n\n<pre><code>$('form table tr')\n</code></pre>\n\n<p>say that removed element will be table row (tr) from table enclosed in form (form table).</p>\n\n<pre><code>eq(1)\n</code></pre>\n\n<p>say that removed will be the second element (element with index number 1)</p>\n\n<pre><code>remove()\n</code></pre>\n\n<p>say that element will be removed.</p>\n\n<p>But when this should be used on option, then all needed would be (for example):</p>\n\n<pre><code>$('select option[value=\"1\"]').remove();\n</code></pre>\n\n<p>because it is simplier to find option by value than by index number (unless you would have more ioption with the same value - but it is nonsense, to have such options). Using of index number is good if you have not any else that you may use to find removed element.</p>\n\n<p>Also you may, of course, add form name or form name and select name (or id, or class) into element identification</p>\n\n<pre><code>$('form[name=\"date\"] selection[name=\"day\"] option[value=\"1\"]').remove();\n$('form#date selection#day option[value=\"1\"]').remove();\n</code></pre>\n\n<p>but the first option is better - and more logical, due to server-side processes, where you need to use attribute <em>name</em> instead <em>id</em> or <em>class</em>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know this is now old, but you could - especially if you are using jQuery change parent.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;meta charset=\"UTF-8\"&gt;\n        &lt;title&gt;Demo Page&lt;/title&gt;\n        &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; \n        &lt;script src=\"//code.jquery.com/jquery-1.11.0.min.js\"&gt;&lt;/script&gt;\n        &lt;script&gt;\n\n            function sourceListChange() {\n                var oVisible = $('#destList');\n                var newCategory = $( \"#sourceList\" ).val()||'';\n                var oToShow = $();\n\n                oHiddenDestList.append(oVisible.find('option'));\n\n                if (newCategory) {\n                    oToShow = oHiddenDestList.find('.'+newCategory);\n                }           \n\n                if (oToShow.length==0) {\n                    oVisible.append (oHiddenDestList.find('.NA'));\n                } else if (oToShow.length!=1) {\n                    oVisible.append (oHiddenDestList.find('.SELECT'));\n                }\n                oVisible.prop('selectedIndex', 0);\n\n                oVisible.append (oToShow);\n            }\n\n            $(document).ready(function() {\n                sourceListChange();\n            });\n\n            var oHiddenDestList = $(document.createElement('select'));\n\n        &lt;/script&gt;\n        &lt;style&gt;\n\n        &lt;/style&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n\n        Select a parent group:\n        &lt;select id=\"sourceList\" onchange=\"sourceListChange()\"&gt;\n            &lt;option class=\"SELECT\" value=\"\" selected disabled&gt;Please Select&lt;/option&gt;\n            &lt;option value=\"veg\"&gt;Vegetables&lt;/option&gt;\n            &lt;option value=\"fruit\"&gt;Fruit&lt;/option&gt;\n        &lt;/select&gt;\n\n        &lt;select id=\"destList\"&gt;\n            &lt;option class=\"SELECT\" value=\"*\" selected disabled&gt;Please Select&lt;/option&gt;\n            &lt;option class=\"NA\" value=\"\" selected disabled&gt;Not Applicable&lt;/option&gt;\n            &lt;option class=\"fruit\"&gt;Apple&lt;/option&gt;\n            &lt;option class=\"fruit\"&gt;Bannana&lt;/option&gt;\n            &lt;option class=\"veg\"&gt;Carrot&lt;/option&gt;\n            &lt;option class=\"veg\"&gt;Pea&lt;/option&gt;\n        &lt;/select&gt;       \n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Solution:</p>\n\n<pre><code>var ua = navigator.userAgent.toLowerCase();\n\nvar check = function(r) { return r.test(ua);};\n\nvar isChrome = check(/chrome/);\n`\nvar f=document.getElementById('select_tag_id');\n\nf.options[i].style.display='none';\n\nif (isChrome) f.size=2;\n</code></pre>\n\n<p>The select box changed to 2 size (like multiple), but working.\nThis trick don't working under safari :(</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>ok, heres some sample code that demonstrates the problem.\nif i click the button in firefox, the first option disappears.\nif i click the button in chrome, nothing happens, or rather if i inspect the first option, it does have the attribute \"style='display:none'\" but the option itself on the html page is not hidden.</p>\n\n<pre><code>&lt;form&gt;\n&lt;select&gt;\n&lt;option&gt;1&lt;/option&gt;\n&lt;option&gt;2&lt;/option&gt;\n&lt;option&gt;3&lt;/option&gt;\n&lt;/select&gt;\n&lt;input type=\"button\" onclick=\"document.getElementsByTagName('option')[0].style.display='none'\" value=\"hide option 1\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>does anyone know why this doesnt work in chrome? and does anyone know of a workaround?</p>\n",
            "last_activity_date": 1424802833,
            "question_id": 2324250,
            "score": 26,
            "tags": [
                "javascript",
                "firefox",
                "coding-style",
                "google-chrome"
            ],
            "title": "style.display=&#39;none&#39; doesnt work on option tags in chrome, but it does in firefox, anyone know why? or a workaround?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>By using the <a href=\"http://www.w3schools.com/jS/js%5Fobj%5Fdate.asp\">Date</a> object:</p>\n\n<pre><code>var a = new Date(); // Now\nvar b = new Date(2010, 0, 1, 0, 0, 0, 0); // 2010\nvar d = (b-a); // difference in milliseconds\n</code></pre>\n\n<p>You can get the number of seconds by dividing the milliseconds by 1000, and rounding the number:</p>\n\n<pre><code>var seconds = Math.round((b-a)/1000);\n</code></pre>\n\n<p>You could then get <code>minutes</code> by again dividing <code>seconds</code> by 60, then <code>hours</code> by dividing <code>minutes</code> by 60, then <code>days</code> by dividing <code>hours</code> by 24, etc.</p>\n\n<p>You'll note that I provided some values for the second Date object. Those parameters are as follows:</p>\n\n<pre><code>// new Date(year, month, day, hours, minutes, seconds, milliseconds)\n</code></pre>\n\n<p>As noted in the comments of this solution, you don't necessarily need to provide these values unless they're necessary for the date you wish to represent.</p>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<p>Use <strong><a href=\"http://www.datejs.com/\">DateJs</a></strong>.</p>\n\n<p>Swiss knife tool for javascript date-time prgoramming!</p>\n\n<p><strong>http://www.datejs.com/</strong></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>    // This is for first date\n    first = new Date(2010, 03, 08, 15, 30, 10); // Get the first date epoch object\n    document.write((first.getTime())/1000); // get the actual epoch values\n    second = new Date(2012, 03, 08, 15, 30, 10); // Get the first date epoch object\n    document.write((second.getTime())/1000); // get the actual epoch values\n    diff= second - first ;\n    one_day_epoch = 24*60*60 ;  // calculating one epoch\n    if ( diff/ one_day_epoch &gt; 365 ) // check , is it exceei\n    {\n    alert( 'date is exceeding one year');\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I have found this and it works fine for me:</p>\n\n<p><strong>Calculating the Difference between Two Known Dates</strong></p>\n\n<p>Unfortunately, calculating a date interval such as days, weeks, or months between two known dates is not as easy because you can't just add Date objects together. In order to use a Date object in any sort of calculation, we must first retrieve the Date's internal millisecond value, which is stored as a large integer. The function to do that is Date.getTime(). Once both Dates have been converted, subtracting the later one from the earlier one returns the difference in milliseconds. The desired interval can then be determined by dividing that number by the corresponding number of milliseconds. For instance, to obtain the number of days for a given number of milliseconds, we would divide by 86,400,000, the number of milliseconds in a day (1000 x 60 seconds x 60 minutes x 24 hours):</p>\n\n<pre><code>Date.daysBetween = function( date1, date2 ) {\n  //Get 1 day in milliseconds\n  var one_day=1000*60*60*24;\n\n  // Convert both dates to milliseconds\n  var date1_ms = date1.getTime();\n  var date2_ms = date2.getTime();\n\n  // Calculate the difference in milliseconds\n  var difference_ms = date2_ms - date1_ms;\n\n  // Convert back to days and return\n  return Math.round(difference_ms/one_day); \n}\n\n//Set the two dates\nvar y2k  = new Date(2000, 0, 1); \nvar Jan1st2010 = new Date(y2k.getFullYear() + 10, y2k.getMonth(), y2k.getDate());\nvar today= new Date();\n//displays 726\nconsole.log( 'Days since ' \n           + Jan1st2010.toLocaleDateString() + ': ' \n           + Date.daysBetween(Jan1st2010, today));\n</code></pre>\n\n<p>The rounding is optional, depending on whether you want partial days or not.</p>\n\n<p><a href=\"http://www.htmlgoodies.com/html5/javascript/calculating-the-difference-between-two-dates-in-javascript.html#fbid=2JOUcJjwG3a\" rel=\"nofollow\">Reference</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>Date.prototype.addDays = function(days) {\n\n   var dat = new Date(this.valueOf())\n   dat.setDate(dat.getDate() + days);\n   return dat;\n}\n\nfunction getDates(startDate, stopDate) {\n\n  var dateArray = new Array();\n  var currentDate = startDate;\n  while (currentDate &lt;= stopDate) {\n    dateArray.push(currentDate);\n    currentDate = currentDate.addDays(1);\n  }\n  return dateArray;\n}\n\nvar dateArray = getDates(new Date(), (new Date().addDays(7)));\n\nfor (i = 0; i &lt; dateArray.length; i ++ ) {\n  //  alert (dateArray[i]);\n\n    date=('0'+dateArray[i].getDate()).slice(-2);\n    month=('0' +(dateArray[i].getMonth()+1)).slice(-2);\n    year=dateArray[i].getFullYear();\n    alert(date+\"-\"+month+\"-\"+year );\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How to find the difference between two dates?</p>\n",
            "last_activity_date": 1420862519,
            "question_id": 1968167,
            "score": 22,
            "tags": [
                "javascript",
                "datetime",
                "datediff"
            ],
            "title": "Difference between dates in JavaScript"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>In recent non-IE browsers (Firefox 4+, WebKit browsers released since early 2009, Opera 11, maybe earlier), you can use the <a href=\"http://www.w3.org/TR/cssom-view/#the-getclientrects-and-getboundingclientrect-methods\" rel=\"nofollow\"><code>getClientRects()</code></a> method of <code>Range</code>. In IE, you can use the <code>boundingLeft</code> and <code>boundingTop</code> properties of the <code>TextRange</code> that can be extracted from the selection. Here's a function that will do what you want in recent browsers.</p>\n\n<p>Note that there are some situations in which you may wrongly get co-ordinates <code>0, 0</code>, as mentioned in the comments by @Louis. In that case you'll have to fall back to a workaround of temporarily inserting an element and getting its position.</p>\n\n<p>jsFiddle: <a href=\"http://jsfiddle.net/NFJ9r/65/\" rel=\"nofollow\">http://jsfiddle.net/NFJ9r/65/</a></p>\n\n<p>Code:</p>\n\n<pre><code>function getSelectionCoords() {\n    var sel = document.selection, range, rects, rect;\n    var x = 0, y = 0;\n    if (sel) {\n        if (sel.type != \"Control\") {\n            range = sel.createRange();\n            range.collapse(true);\n            x = range.boundingLeft;\n            y = range.boundingTop;\n        }\n    } else if (window.getSelection) {\n        sel = window.getSelection();\n        if (sel.rangeCount) {\n            range = sel.getRangeAt(0).cloneRange();\n            if (range.getClientRects) {\n                range.collapse(true);\n                rects = range.getClientRects();\n                if (rects.length &gt; 0) {\n                    rect = range.getClientRects()[0];\n                }\n                x = rect.left;\n                y = rect.top;\n            }\n            // Fall back to inserting a temporary element\n            if (x == 0 &amp;&amp; y == 0) {\n                var span = document.createElement(\"span\");\n                if (span.getClientRects) {\n                    // Ensure span has dimensions and position by\n                    // adding a zero-width space character\n                    span.appendChild( document.createTextNode(\"\\u200b\") );\n                    range.insertNode(span);\n                    rect = span.getClientRects()[0];\n                    x = rect.left;\n                    y = rect.top;\n                    var spanParent = span.parentNode;\n                    spanParent.removeChild(span);\n\n                    // Glue any broken text nodes back together\n                    spanParent.normalize();\n                }\n            }\n        }\n    }\n    return { x: x, y: y };\n}\n</code></pre>\n\n<p><strong>UPDATE</strong></p>\n\n<p>I submitted a WebKit bug as a result of the comments, and it's now been fixed.</p>\n\n<p><a href=\"https://bugs.webkit.org/show_bug.cgi?id=65324\" rel=\"nofollow\">https://bugs.webkit.org/show_bug.cgi?id=65324</a></p>\n",
                    "is_accepted": true,
                    "score": 28
                },
                {
                    "body": "<p><strong>The above answer by TimDown does not work if the caret is in an empty element.</strong> </p>\n\n<p>The code below solves the problem. Note how it is almost identical to TimDown's solution except that this code checks the <code>range.getClientRects()</code> array has <code>length&gt;0</code> before calling <code>range.getClientRects()[0]</code></p>\n\n<pre><code>function getSelectionCoords() {\n    var sel = document.selection, range, rect;\n    var x = 0, y = 0;\n    if (sel) {\n        if (sel.type != \"Control\") {\n            range = sel.createRange();\n            range.collapse(true);\n            x = range.boundingLeft;\n            y = range.boundingTop;\n        }\n    } else if (window.getSelection) {\n        sel = window.getSelection();\n        if (sel.rangeCount) {\n            range = sel.getRangeAt(0).cloneRange();\n            if (range.getClientRects) {\n                range.collapse(true);\n                if (range.getClientRects().length&gt;0){\n                    rect = range.getClientRects()[0];\n                    x = rect.left;\n                    y = rect.top;\n                }\n            }\n            // Fall back to inserting a temporary element\n            if (x == 0 &amp;&amp; y == 0) {\n                var span = document.createElement(\"span\");\n                if (span.getClientRects) {\n                    // Ensure span has dimensions and position by\n                    // adding a zero-width space character\n                    span.appendChild( document.createTextNode(\"\\u200b\") );\n                    range.insertNode(span);\n                    rect = span.getClientRects()[0];\n                    x = rect.left;\n                    y = rect.top;\n                    var spanParent = span.parentNode;\n                    spanParent.removeChild(span);\n\n                    // Glue any broken text nodes back together\n                    spanParent.normalize();\n                }\n            }\n        }\n    }\n    return { x: x, y: y };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I need the coordinates in pixels of the beginning of the text selection (anywhere on the page, not in a textarea).</p>\n\n<p>I tried using the cursor coordinates but this didn't work quite well because the cursor coordinates and the beginning of the selection are not always the same (for example when a user drags over a text).</p>\n\n<p>I hope someone has the solution!</p>\n",
            "last_activity_date": 1413967297,
            "question_id": 6846230,
            "score": 14,
            "tags": [
                "javascript",
                "html",
                "cursor",
                "selection",
                "textselection"
            ],
            "title": "Coordinates of selected text in browser page"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>If you follow this <a href=\"http://www.javascriptkit.com/javatutors/datedifference.shtml\" rel=\"nofollow\">tutorial</a>, one way is to use:</p>\n\n<pre><code>Date.getTime()\n</code></pre>\n\n<p>You will find a full <a href=\"http://javascript.internet.com/math-related/date-difference.html\" rel=\"nofollow\">javascript function here</a>, complete with date validation.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Use the <a href=\"http://w3schools.com/jsref/jsref_obj_date.asp\">Date object</a> like so:</p>\n\n<pre><code>function DateDiff(var /*Date*/ date1, var /*Date*/ date2) {\n    return date1.getTime() - date2.getTime();\n}\n</code></pre>\n\n<p>This will return the number of milliseconds difference between the two dates. Converting it to seconds, minutes, hours etc. shouldn't be too difficult.</p>\n",
                    "is_accepted": true,
                    "score": 41
                }
            ],
            "body": "<p>I doing a function in Javascript like the VisualBasic DateDiff.</p>\n\n<p>You give two dates and the returning time interval (Seconds, Minutes, Days, etc...)</p>\n\n<pre><code>DateDiff(ByVal Interval As Microsoft.VisualBasic.DateInterval, _\n  ByVal Date1 As Date, ByVal Date2 As Date) as Long\n</code></pre>\n\n<p>So what's the best way to calculate the difference of Javascript Dates?</p>\n",
            "last_activity_date": 1389994080,
            "question_id": 327429,
            "score": 31,
            "tags": [
                "javascript"
            ],
            "title": "What&#39;s the best way to calculate date difference in Javascript"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p>No, that is not possible, because PHP is a server side language, it does not access the client's browser in any way or form (the client requests from the PHP server).</p>\n\n<p>The client may provide some meta info through HTTP headers, but they don't necessarily tell you whether the user has JavaScript enabled or not and you can't rely on them anyway,</p>\n",
                    "is_accepted": true,
                    "score": 28
                },
                {
                    "body": "<p>PHP can't be used to detect whether javascript is enabled or not. Instead use <code>&lt;noscript&gt;</code> to display an alternate message / do something.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Make your main php page assume jscript is off, and add a <code>&lt;script&gt;</code> to redirect to the jscript-enabled app in the <code>&lt;head&gt;</code>. If the user actually uses your first page, assume jscript is off.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Technically no because as the other answers have said, PHP is strictly server-side, but you could do this...</p>\n\n<p>In the PHP page on the server, output (a lot of HTML has been deleted for brevity)</p>\n\n<pre><code>&lt;html&gt;\n   &lt;head&gt;\n      &lt;script type=\"text/javascript\" src=\"jquery1.4.4.js\"&gt;&lt;/script&gt;\n      &lt;script type=\"text/javascript\"&gt;\n        $(document).ready(function(){\n           $.get(\"myPage.php\");\n         });\n      &lt;/script&gt;\n   &lt;/head&gt;\n &lt;/html&gt;\n</code></pre>\n\n<p>Then in <code>myPage.php</code> set a session variable to indicate the client supports JS</p>\n\n<pre><code>&lt;?php\n   session_start();\n   $_SESSION['js'] = true;\n?&gt;\n</code></pre>\n\n<p>But really, just use <code>&lt;script&gt;&lt;/script&gt;&lt;noscript&gt;&lt;/noscript&gt;</code> tags, much, much less effort...</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can't tell if a browser has JS enabled, but you can tell if the browser supports JS <a href=\"http://php.net/manual/en/function.get-browser.php\" rel=\"nofollow\">http://php.net/manual/en/function.get-browser.php</a></p>\n\n<p><code>$js_capable = get_browser(null, true)=&gt;javascript == 1</code></p>\n\n<p>Having said this, that's probably not of much use. You should reconsider detecting JS from PHP. There should be no need for it if you use <a href=\"http://en.wikipedia.org/wiki/Progressive_enhancement\" rel=\"nofollow\" title=\"Progressive Enhancement\">progressive enhancement</a>, meaning that JS only adds functionality to what's already on the page.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You can try with 2 metod:</p>\n\n<ul>\n<li>setting cookies with JS and detecting them from PHP</li>\n<li>creating a form with a hidden field and an empty value; and then assigning some value to it with JS, if the field gets the value \u2013 JS is ON, otherwise it\u2019s off. But the form had to be submitted first before PHP can request that hidden field\u2019s value.</li>\n</ul>\n\n<p>if you want detect if JS enable enable setting before the loading of the page you can try this (I don't konw if it works):</p>\n\n<pre><code>&lt;?php\nif (isset($_POST['jstest'])) {\n  $nojs = FALSE;\n  } else {\n  // create a hidden form and submit it with javascript\n  echo '&lt;form name=\"jsform\" id=\"jsform\" method=\"post\" style=\"display:none\"&gt;';\n  echo '&lt;input name=\"jstest\" type=\"text\" value=\"true\" /&gt;';\n  echo '&lt;script language=\"javascript\"&gt;';\n  echo 'document.jsform.submit();';\n  echo '&lt;/script&gt;';\n  echo '&lt;/form&gt;';\n  // the variable below would be set only if the form wasn't submitted, hence JS is disabled\n  $nojs = TRUE;\n}\nif ($nojs){\n  //JS is OFF, do the PHP stuff\n}\n?&gt;\n</code></pre>\n\n<p>there is a fine tutorial on this issue on address <a href=\"http://www.inspirationbit.com/php-js-detection-of-javascript-browser-settings/\" rel=\"nofollow\">http://www.inspirationbit.com/php-js-detection-of-javascript-browser-settings/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>perhaps a more simple option...</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;noscript&gt;\n  This page needs JavaScript activated to work. \n  &lt;style&gt;div { display:none; }&lt;/style&gt;\n&lt;/noscript&gt;\n&lt;div&gt;\nmy content\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>Other option:\nIf you dont' have to check if JS is enabled at the visitors first view (mainpage) you can set a cookie with js. On the next page you can check with php if the cookie is there...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use logic the logic (default/switch) - is this example I printed the variable in php:</p>\n\n<p>PHP:</p>\n\n<pre><code>$js = 'No';\nprint 'Javascript Enabled: &amp;lt;span id=\"jsEnabled\"&amp;gt;'.$js.'&amp;lt;/span&amp;gt;';\n</code></pre>\n\n<p>JS: (in my document ready)</p>\n\n<pre><code>jQuery('#jsEnabled').text('Yes'); or $('#jsEnabled').text('Yes');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is the way I check whether javascript and cookies are enabled or not <a href=\"http://asdlog.com/Check_if_cookies_and_javascript_are_enabled\" rel=\"nofollow\">http://asdlog.com/Check_if_cookies_and_javascript_are_enabled</a></p>\n\n<p>I copy/paste it here</p>\n\n<pre><code>&lt;?\nif($_SESSION['JSexe']){     //3rd check js\n    if($_COOKIE['JS'])  setcookie('JS','JS',time()-1);//check on every page load\n    else            header('Location: js.html');\n}               //2nd so far it's been server-side scripting. Client-side scripting must be executed once to set second cookie.\n                //Without JSexe, user with cookies and js enabled would be sent to js.html the first page load.\nelseif($_COOKIE['PHP'])     $_SESSION['JSexe'] = true;\nelse{               //1st check cookies\n    if($_GET['cookie']) header('Location: cookies.html');\n    else{\n                setcookie('PHP','PHP');\n                header('Location: '.$_SERVER['REQUEST_URI'].'?cookie=1');\n    }\n}\n?&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\"&gt;document.cookie = 'JS=JS'&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Recently, I had the following dilemma:</p>\n\n<p>I use a PHP function that generates a QR image related to the current URL, which is very useful for mobile devices. The function works fine, but having my site on a shared hosting, there are some limits for CPU and RAM usage. This function is to heavy and it consumes a lot of CPU time and RAM, so the hosting guys asked me to decrease the usage.</p>\n\n<p>After some tries, I finally reached the idea that I can save some CPU &amp; RAM usage from search engine bots. It is difficult to recognize a bot by browser identification, but all the bots have no JS enabled and that's the main criteria I used to detect if it is a real browser or it is a bot. To explain how significant it is to prevent executing code which will not give anything more for Search Engines (QR, in my case, does not affect search engines), I can say that just Google bot for example makes about 16000 crawls a day on my site.</p>\n\n<p>So I've made this very simple thing which helped a lot:</p>\n\n<pre><code>&lt;script language=\"javascript\"&gt;&lt;!--\ndocument.write('&lt;?php echo drawQR($_SERVER[\"REQUEST_URI\"]);?&gt;');\n//--&gt;&lt;/script&gt;\n</code></pre>\n\n<p>This code uses JS to write a line of PHP code, so this line will be written only when JS is enabled. </p>\n\n<p>Of couse you can use 'noscript' tag if you want to show something when JS is disabled, but this method shows how to execute some PHP only when JS is enabled.</p>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Yes.</p>\n\n<p>Ensure you have the latest <code>jQuery.js</code></p>\n\n<pre><code>//javascript\n$(function(){\n$('#jsEnabled2').html('Yes it is')\n}) \n\n//php\n$js - 'No';\n$jscheck = 'Javascript Enabled: ';\n$jscheck .= '&lt;span id=\"jsEnabled\"&gt;'.$js.'&lt;/span&gt;';\nprint $jscheck;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>You can set a cookie using Javascript and then reload the page using Javascript. Then using PHP you shall check if the cookie is setted, if it is Javascript is enabled!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>//Here is a solution: \n//it works perfect</p>\n\n<pre><code>&lt;?php\n\nif(!isset($_SESSION['js'])||$_SESSION['js']==\"\"){\n  echo \"&lt;noscript&gt;&lt;meta http-equiv='refresh' content='0;url=/get-javascript-status.php&amp;js=0'&gt; &lt;/noscript&gt;\";\n   $js = true;\n\n }elseif(isset($_SESSION['js'])&amp;&amp; $_SESSION['js']==\"0\"){\n   $js = false;\n   $_SESSION['js']=\"\";\n\n }elseif(isset($_SESSION['js'])&amp;&amp; $_SESSION['js']==\"1\"){\n   $js = true;\n   $_SESSION['js']=\"\";\n}\n\nif ($js) {\n    echo 'Javascript is enabled';\n } else {\n    echo 'Javascript is disabled';\n}\n\n?&gt;\n</code></pre>\n\n<p>//And then inside get-javascript-status.php : </p>\n\n<pre><code>$_SESSION['js'] = isset($_GET['js'])&amp;&amp;$_GET['js']==\"0\" ? \"0\":\"1\";\nheader('location: /');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here is a small include I made up that I have on top of my pages to detect if js is enabled. Hope this helps out...</p>\n\n<pre><code>&lt;?php\n//Check if we should check for js\nif ((!isset($_GET['jsEnabled']) || $_GET['jsEnabled'] == 'true') &amp;&amp; !isset($_SERVER['HTTP_X_REQUESTED_WITH'])){\n\n   //Check to see if we already found js enabled\n   if (!isset($_SESSION['javaEnabled'])){\n      //Check if we were redirected by javascript\n      if (isset($_GET['jsEnabled'])){\n         //Check if we have started a session\n         if(session_id() == '') {\n            session_start();\n         }\n\n         //Set session variable that we have js enabled\n         $_SESSION['javaEnabled'] = true;\n      }\n      else{\n         $reqUrl = $_SERVER['REQUEST_URI'];\n         $paramConnector = (strpos($reqUrl, \"?\"))? \"&amp;\" : \"?\";\n\n         echo \"\n            &lt;script type='text/javascript'&gt;\n               window.location = '\" . $reqUrl . $paramConnector . \"jsEnabled=true'\n            &lt;/script&gt;\n            &lt;noscript&gt;\n               &lt;!-- Redirect to page and tell us that JS is not enabled --&gt;\n               &lt;meta HTTP-EQUIV='REFRESH' content='0; \" . $reqUrl . $paramConnector . \"jsEnabled=false'&gt;\n            &lt;/noscript&gt;\n         \";\n\n         //Break out and try again to check js\n         exit;\n      }\n   }\n}\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Its 2013. Simply have your script render the non-js templates inside a <code>body &gt; noscript</code> tag, then inside your CSS keep your main js site container div display: none; After that just put something like <code>&lt;script&gt;$('#container').show();&lt;/script&gt;</code> immediately after you close you main #container div and before your noscript tag. (if you're using jquery of course).</p>\n\n<p>Doing it this way will show the HTML for the non-js enabled browsers automatically, and then the js enabled browsers will only see the js site.</p>\n\n<p>If you're worried about over-bloating the page size with too much mark up, then you could do the same but instead leave <code>&lt;div id=\"content\"&gt;&lt;/div&gt;</code> empty, then with the js code instead of just showing the div use an ajax call to fetch the content for it.</p>\n\n<p>On a  side note, I would probably include additional css files for the non-js site within the noscript tag to save on bandwidth. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>How about using some <code>php</code> in the <code>&lt;script&gt;</code> tag like :</p>\n\n<pre><code>&lt;html&gt;\n&lt;script&gt;\n    window.onload = dothis;\n    function dothis(){\n        document.write('&lt;?php echo \"JavaScript is enabled\"; ?&gt;');\n    }\n&lt;/script&gt;\n&lt;/html&gt;\n\n&lt;?php\necho 'JavaScript is disabled';\n?&gt;\n</code></pre>\n\n<p>This seems to work for me.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>It's not that hard. Just type:</p>\n\n<pre><code>&lt;body&gt;\n    &lt;noscript&gt;\n        &lt;?php\n            $js = false;\n        ?&gt;\n    &lt;/noscript&gt;\n    &lt;!--content--&gt;\n        &lt;?php\n            if($js != false)\n            {\n                echo \"JavaScript is enabled!\";\n            }\n            else{\n                echo \"JavaScript is disabled. Please enable JavaScript in order to use this website.\";    \n            }\n        ?&gt;\n    &lt;!--/content--&gt;  \n&lt;/body&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Since PHP is server side you can't know in PHP whether the client has Javascript enabled unless you use sessions (or some other way to store data across requests) and first send some code to which the client responds.</p>\n\n<p>If you put the following at the start of your PHP file the client is redirected to the same URL with either 'js=0' or 'js=1' appended to the query string, depending on whether they have Javascript enabled or not. Upon receiving the redirected request the script records the result in a session variable and then redirects back to the original URL, i.e. without the appended 'js=0' or 'js=1'.Upon receiving this second redirect the script proceeds as normal, now with the session variable set according to the clients Javascript capability.</p>\n\n<p>If you don't care about how your query string looks in the user's address bar you can skip the second redirect and just set the session variable. While these redirects are taking place the user is shown a short informative message (also something you could skip if you don't care about that).</p>\n\n<pre><code>&lt;?php\nsession_start();\nif (!isset($_SESSION['js']) &amp;&amp; !isset($_GET['js'])) {\n    $url=$_SERVER['SCRIPT_URI'];\n    $qry='?'.($q=$_SERVER['QUERY_STRING']).($q?'&amp;':'').'js';\n    die('&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;meta charset=\"utf-8\" /&gt;&lt;title&gt;js check&lt;/title&gt;'.\n        '&lt;script type=\"text/javascript\"&gt;window.location.href=\"'.$url.$qry.'=1\";&lt;/script&gt;'.\n        '&lt;noscript&gt;&lt;meta http-equiv=\"refresh\" content=\"0; url='.$url.$qry.'=0\" /&gt;&lt;/noscript&gt;'.\n        '&lt;/head&gt;&lt;body&gt;Hold on while we check whether you have Javascript enabled.&lt;/body&gt;&lt;/html&gt;');\n} elseif (isset($_GET['js'])) {\n    $_SESSION['js']=$_GET['js'];\n    $qry = preg_replace('%&amp;?js=(0|1)$%', '', $_SERVER['QUERY_STRING']);\n    $url = $_SERVER['SCRIPT_URI'].($qry?'?':'').$qry;\n    die('&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt;&lt;meta charset=\"utf-8\" /&gt;&lt;title&gt;js check&lt;/title&gt;'.\n        '&lt;meta http-equiv=\"refresh\" content=\"0; url='.$url.$qry.'\" /&gt;'.\n        '&lt;/head&gt;&lt;body&gt;Hold on while we check whether you have Javascript enabled.&lt;/body&gt;&lt;/html&gt;');\n}\n\nif ($_SESSION['js']) {\n    //Javascript is enabled\n} else {\n    //Javascript is disabled\n}\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;noscript&gt;\n    &lt;?php if(basename($_SERVER['REQUEST_URI']) != \"disable.html\"){ ?&gt;\n        &lt;meta http-equiv=\"Refresh\" content=\"0;disable.html\"&gt;\n    &lt;?php } ?&gt;\n&lt;/noscript&gt;\n</code></pre>\n\n<p>Place above code in your header file after title tag and set appropriate like[disable.html] for redirection.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Create a cookie using JavaScript and read it using PHP.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there a way to check if JavaScript is enabled with PHP? If so, how?</p>\n",
            "last_activity_date": 1410393837,
            "question_id": 4454551,
            "score": 28,
            "tags": [
                "php",
                "javascript"
            ],
            "title": "Check if JavaScript is enabled with PHP"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>It's safer to use <code>[]</code> than it is to use <code>new Array()</code>, because you can actually override the value of <code>Array</code> in JavaScript:</p>\n\n<pre><code>Array = function() { };\n\nvar x = new Array();\n// x is now an Object instead of an Array.\n</code></pre>\n\n<p>In other words, <code>[]</code> is unambiguous.</p>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/questions/383402/is-javascript-s-new-keyword-considered-harmful\">Crockford doesn't like <code>new</code></a>. Therefore, <a href=\"http://www.jslint.com/lint.html#new\">JSLint expects you to avoid it</a> when possible. And creating a new array object is possible without using <code>new</code>....</p>\n",
                    "is_accepted": true,
                    "score": 21
                },
                {
                    "body": "<p>There's nothing wrong with the first syntax per se. In fact, on <a href=\"http://www.w3schools.com/JS/js%5Fobj%5Farray.asp\" rel=\"nofollow\">w3schools</a>, it lists <code>new Array()</code> as the way to create an array. The problem is that this is the \"old way.\" The \"new way\", <code>[]</code> is shorter, and allows you to initialize values in the array, as in <code>[\"foo\", \"bar\"]</code>. Most developers prefer <code>[]</code> to <code>new Array()</code> in terms of good style.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Nothing wrong with either form, but you usually see literals used wherever possible-</p>\n\n<p>var s='' is not <strong>more</strong> correct than var s=new String()....</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>It seems like you can get different performance based on which you are using and for what purpose depending on browser or environment: </p>\n\n<p><a href=\"http://jsperf.com/new-array-vs-literal/11\" rel=\"nofollow\">http://jsperf.com/new-array-vs-literal/11</a> ( [1,.2] vs new Array(1,.2) ) the literal is way faster in this circumstance.</p>\n\n<p><a href=\"http://jsperf.com/new-array-vs-literal/7\" rel=\"nofollow\">http://jsperf.com/new-array-vs-literal/7</a> ( new Array(500000) vs [].length(500000) ) new Array is faster in chrome v21 it seems for this test by about 7% or 30%) depending on what you do.</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>In JSLint, it warns that</p>\n\n<pre><code>var x = new Array();\n</code></pre>\n\n<p>(That's not a real variable name) should be</p>\n\n<pre><code>var result = [];\n</code></pre>\n\n<p>What is wrong with the 1st syntax? What's the reasoning behind the suggestion?</p>\n",
            "last_activity_date": 1358799935,
            "question_id": 885156,
            "score": 25,
            "tags": [
                "javascript",
                "jslint"
            ],
            "title": "What&#39;s wrong with var x = new Array();"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p><code>document.all</code> is a proprietary Microsoft extension to the W3C standard.  </p>\n\n<p><code>getElementById()</code> is standard - use that.</p>\n\n<p>However, consider if using a js library like <a href=\"http://jquery.com/\">jQuery</a> would come in handy.  For example, <code>$(\"#id\")</code> is the jQuery equivalent for <code>getElementById()</code>.  Plus, you can use <a href=\"http://api.jquery.com/category/selectors/\">more than just CSS3</a> selectors.</p>\n",
                    "is_accepted": true,
                    "score": 33
                },
                {
                    "body": "<p><code>document.all</code> is <strong>very</strong> old, you <a href=\"http://simonwillison.net/2003/Aug/11/documentAll/\">don't have to use it anymore</a>.</p>\n\n<p>To quote <a href=\"http://www.nczonline.net/blog/2009/12/29/feature-detection-is-not-browser-detection/\">Nicholas Zakas</a>:</p>\n\n<blockquote>\n  <p>For instance, when the DOM was young,\n  not all browsers supported\n  getElementById(), and so there was a\n  lot of code that looked like this:</p>\n</blockquote>\n\n<pre><code>if(document.getElementById){  //DOM\n    element = document.getElementById(id);\n} else if (document.all) {  //IE\n    element = document.all[id];\n} else if (document.layers){  //Netscape &lt; 6\n    element = document.layers[id];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p><strong>document.all()</strong> is a non-standard way of accessing DOM elements. It's been deprecated from a few browsers. It gives you access to all sub elements on your document.</p>\n\n<p><strong>document.getElementById()</strong> is a standard and fully supported. Each element have a unique id on the document.</p>\n\n<p>If you have:</p>\n\n<pre><code>&lt;div id=\"testing\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>Using </p>\n\n<pre><code>document.getElementById(\"testing\"); \n</code></pre>\n\n<p>Will have access to that specific div.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>And document.all will not be supported from IE11 on!</p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ie/ms537434(v=vs.85).aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/ie/ms537434(v=vs.85).aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><code>document.querySelectorAll</code> (and its <code>document.querySelector()</code> variant that returns the first found element) is much, much more powerful. You can easily:</p>\n\n<ul>\n<li>get an entire collection with <code>document.querySelectorAll(\"*\")</code>, effectively emulating non-standard <code>document.all</code> property;</li>\n<li>use <code>document.querySelector(\"#your-id\")</code>, effectively emulating <code>document.getElementById()</code> function;</li>\n<li>use <code>document.querySelectorAll(\".your-class\")</code>, effectively emulating <code>document.getElementsByClassName()</code> function;</li>\n<li>use <code>document.querySelectorAll(\"form\")</code> instead of <code>document.forms</code>, and <code>document.querySelectorAll(\"a\")</code> instead of <code>document.links</code>;</li>\n<li>and perform any much more complex DOM querying (using any available CSS selector) that just cannot be covered with other document builtins.</li>\n</ul>\n\n<p>Unified querying API is the way to go. Even if <code>document.all</code> would be in the standard, it's just inconvenient.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Actually, <strong><code>document.all</code></strong> is only <strong><em>minimally</em></strong> comparable to <strong><code>document.getElementById</code></strong>.  You wouldn't use one in place of the other, they don't return the same things.</p>\n\n<p>If you were trying to filter through browser capabilities you could use them as in <a href=\"http://stackoverflow.com/a/2408436\">Marcel Korpel's answer</a> like this:  </p>\n\n<pre><code>if(document.getElementById){  //DOM\n    element = document.getElementById(id);\n} else if (document.all) {    //IE\n    element = document.all[id];\n} else if (document.layers){  //Netscape &lt; 6\n    element = document.layers[id];\n}\n</code></pre>\n\n<p><br />\nBut, functionally, <strong><code>document.getElementsByTagName('*')</code></strong> is more equivalent to <strong><code>document.all</code></strong>.</p>\n\n<p>For example, if you were actually going to use <strong><code>document.all</code></strong> to examine all the elements on a page, like this:</p>\n\n<pre><code>var j = document.all.length;\nfor(var i = 0; i &lt; j; i++){\n   alert(\"Page element[\"+i+\"] has tagName:\"+document.all(i).tagName);\n}\n</code></pre>\n\n<p>you would use <strong><code>document.getElementsByTagName('*')</code></strong> instead:</p>\n\n<pre><code>var k = document.getElementsByTagName(\"*\");\nvar j = k.length; \nfor (var i = 0; i &lt; j; i++){\n    alert(\"Page element[\"+i+\"] has tagName:\"+k[i].tagName); \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Specifically, <code>document.all</code> was introduced for IE4 BEFORE <code>document.getElementById</code> had been introduced. </p>\n\n<p>So, the presence of <code>document.all</code> means that the code is intended <strong>to support IE4</strong>, or is trying to identify the browser as IE4 (though it could have been Opera), or the person who wrote (or copied and pasted) the code wasn't up on the latest.</p>\n\n<p>In the highly unlikely event that you need to support IE4, then, you do need <code>document.all</code> (or a library that handles these ancient IE specs).</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>When should you use <code>document.all</code> vs. <code>document.getElementById</code>?</p>\n",
            "last_activity_date": 1394302401,
            "question_id": 2408424,
            "score": 27,
            "tags": [
                "javascript",
                "getelementbyid"
            ],
            "title": "document.all vs. document.getElementById"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>That is true, innerHTML on tbody elements is readOnly in IE</p>\n\n<blockquote>\n  <p>The property is read/write for all\n  objects except the following, for\n  which it is read-only: COL, COLGROUP,\n  FRAMESET, HEAD, HTML, STYLE, TABLE,\n  TBODY, TFOOT, THEAD, TITLE, TR.</p>\n</blockquote>\n\n<p>source: <a href=\"http://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx\">http://msdn.microsoft.com/en-us/library/ms533897(VS.85).aspx</a></p>\n\n<p>You can do something like this to work around it:</p>\n\n<pre><code>function setTBodyInnerHTML(tbody, html) {\n  var temp = tbody.ownerDocument.createElement('div');\n  temp.innerHTML = '&lt;table&gt;' + html + '&lt;/table&gt;';\n\n  tbody.parentNode.replaceChild(temp.firstChild.firstChild, tbody);\n}\n</code></pre>\n\n<p>Basically it creates a temporary node into which you inject a full <code>table</code>. Then it replaces the <code>tbody</code> with the <code>tbody</code> from the injected <code>table</code>. If it proves to be slow, you could make it faster by caching <code>temp</code> instead of creating it each time.</p>\n",
                    "is_accepted": true,
                    "score": 26
                },
                {
                    "body": "<p>Create a temp node to store a table in, then copy them to the tbody</p>\n\n<pre><code>  var tempNode = document.createElement('div');\n  tempNode.innerHTML = \"&lt;table&gt;\" + responseText+ \"&lt;/table&gt;\";\n\n  var tempTable = tempNode.firstChild;\n  var tbody = // get a reference to the tbody\n  for (var i=0, tr; tr = tempTable.rows[i]; i++) {\n    tbody.appendChild(tr);\n  } \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Both the answers above seem a bit unclear.  Plus, the created div is never removed, so calling those functions repeatedly eats memory.  Try this:</p>\n\n<pre><code>\n// this function must come before calling it to properly set \u201ctemp\u201d \nfunction MSIEsetTBodyInnerHTML(tbody, html) { //fix MS Internet Exploder\u2019s lameness\n  var temp = MSIEsetTBodyInnerHTML.temp;\n  temp.innerHTML = '&lt;table&gt;&lt;tbody&gt;' + html + '&lt;/tbody&gt;&lt;/table&gt;';\n  tbody.parentNode.replaceChild(temp.firstChild.firstChild, tbody);  }\nMSIEsetTBodyInnerHTML.temp = document.createElement('div');\n\nif (navigator  &&  navigator.userAgent.match( /MSIE/i ))  \n  MSIEsetTBodyInnerHTML(tbody, html);\nelse  //by specs, you can not use \u201cinnerHTML\u201d until after the page is fully loaded  \n  tbody.innerHTML=html;    \n\n</code></pre>\n\n<p>Even with this code, though, MSIE does not seem to properly re-size the table cells in my application, but I'm filling an empty tbody tag with variable generated content, while the thead cells' colspan values are set to a fixed value: the maximum number of cells that may be in the generated tbody.  While the table tbody is 50 cells wide, only two columns show.  Perhaps if the table was originally filled, and the cells were replaced with the same internal structure, this method would work.  Google's Chrome does an excellent job of rebuilding the table, while Opera's desktop browser can resize to more columns just fine, but if you remove columns, the remaining column widths remain as narrow as they were; however with Opera, by hiding the table (display=none) then re-showing it (display=table), the generated table tbody cells then size properly.  I've given up with Firefox.  It's the MSIE-6 of 2012 - a nightmare to develop for which must have additional markup added just to make HTML-CSS layouts work because it does not conform to standards that even MSIE now does.  So I haven't tested the tbody.innerHTML workings in Firefox.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This can be fixed by creating a shim/polyfill for .innerHTML. This could get you (you, dear reader) started:</p>\n\n<pre><code>if (/(msie|trident)/i.test(navigator.userAgent)) {\n var innerhtml_get = Object.getOwnPropertyDescriptor(HTMLElement.prototype, \"innerHTML\").get\n var innerhtml_set = Object.getOwnPropertyDescriptor(HTMLElement.prototype, \"innerHTML\").set\n Object.defineProperty(HTMLElement.prototype, \"innerHTML\", {\n  get: function () {return innerhtml_get.call (this)},\n  set: function(new_html) {\n   var childNodes = this.childNodes\n   for (var curlen = childNodes.length, i = curlen; i &gt; 0; i--) {\n    this.removeChild (childNodes[0])\n   }\n   innerhtml_set.call (this, new_html)\n  }\n })\n}\n\nvar mydiv = document.createElement ('div')\nmydiv.innerHTML = \"test\"\ndocument.body.appendChild (mydiv)\n\ndocument.body.innerHTML = \"\"\nconsole.log (mydiv.innerHTML)\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/DLLbc/9/\" rel=\"nofollow\">http://jsfiddle.net/DLLbc/9/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found myself in the same situation today.</p>\n\n<p>I solved my problem by replacing the entire table markup with floating divs and css that simulate the table behaviour. This way i was able to use innerHTML in IE without problems.</p>\n\n<p>While this could not be a solution for anyone, if you are allowed to your table with floating divs i suggest you to do so.</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I have a table like this:</p>\n\n<pre><code>&lt;table&gt;\n&lt;thead&gt;\n    &lt;tr&gt;\n        &lt;th colspan=\"1\"&gt;a&lt;/th&gt;\n        &lt;th colspan=\"3\"&gt;b&lt;/th&gt;\n    &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody id=\"replaceMe\"&gt;\n    &lt;tr&gt;\n        &lt;td&gt;data 1&lt;/td&gt;\n        &lt;td&gt;data 2&lt;/td&gt;\n        &lt;td&gt;data 3&lt;/td&gt;\n        &lt;td&gt;data 4&lt;/td&gt;\n    &lt;/tr&gt;\n&lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n\n<p>and a method returns me the following after an ajax request:</p>\n\n<pre><code>&lt;tr&gt;\n    &lt;td&gt;data 1 new&lt;/td&gt;\n    &lt;td&gt;data 2 new&lt;/td&gt;\n    &lt;td&gt;data 3 new&lt;/td&gt;\n    &lt;td&gt;data 4 new&lt;/td&gt;\n&lt;/tr&gt;\n</code></pre>\n\n<p>I want to change the innerHTML like</p>\n\n<pre><code>document.getElementById('replaceMe').innerHTML = data.responseText;\n</code></pre>\n\n<p>However, it seems that IE can't set innerHTML on `. Can anyone help me with a simple workaround for this issue?</p>\n",
            "last_activity_date": 1415268101,
            "question_id": 4729644,
            "score": 15,
            "tags": [
                "javascript",
                "internet-explorer"
            ],
            "title": "Can&#39;t set innerHTML on tbody in IE"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><a href=\"http://tools.ietf.org/html/rfc2396#section-4\">http://tools.ietf.org/html/rfc2396#section-4</a></p>\n\n<blockquote>\n  <p>When a URI reference is used to\n  perform a retrieval action on the\n  identified resource, the optional\n  fragment identifier, separated from\n  the URI by a crosshatch (\"#\")\n  character, consists of additional\n  reference information to be\n  interpreted by the user agent after\n  the retrieval action has been\n  successfully completed. As such, it is\n  not part of a URI, but is often used\n  in conjunction with a URI.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><strong>No, it is available to the browser only</strong>, so you have to deal it with Javascript. The server can not read it.</p>\n\n<p><strong>Explanation:</strong><br>\nBasically the hash component of the page URL (the part following the # sign) is processed by the browser only - the browser never passes it to the server. This sadly is part of the HTML standard and is the same whether or not you are using IE or any other browser (and for that matter PHP or any other server side technology).</p>\n\n<p>Here's what <strong><a href=\"http://en.wikipedia.org/wiki/Fragment_identifier\">Wikipedia</a></strong> says about it:</p>\n\n<blockquote>\n  <p>The fragment identifier functions differently than the rest of the URI: namely, its processing is <strong>exclusively client-side with no participation from the server</strong>. When an agent (such as a Web browser) requests a resource from a Web server, the agent sends the URI to the server, but does not send the fragment. Instead, the agent waits for the server to send the resource, and then the agent processes the resource according to the fragment value. In the most common case, the agent scrolls a Web page down to the anchor element which has an attribute string equal to the fragment value. Other client behaviors are possible</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 15
                },
                {
                    "body": "<p>As the browser does not send the hash to the server by default, the only way to do it is to use some Javascript:</p>\n\n<ol>\n<li><p>When the form submits, grab the hash (window.location.hash) and store it in a server-side hidden input field Put this in a DIV with an id of \"urlhash\" so we can find it easily later.</p></li>\n<li><p><strong>On the server</strong> you can use this value if you need to do something with it. You can even change it if you need to.</p></li>\n<li><p>On page load <strong>on the client</strong>, check the value of this this hidden field. You will want to find it by the DIV it is contained in as the auto-generated ID won't be known. <em>Yes, you could do some trickery here with .ClientID but we found it simpler to just use the wrapper DIV as it allows all this Javascript to live in an external file and be used in a generic fashion.</em></p></li>\n<li><p>If the hidden input field has a valid value, set that as the URL hash (window.locaion.hash again) and/or perform other actions.</p></li>\n</ol>\n\n<p>We used jQuery to simplify the selecting of the field, etc... all in all it ends up being a few jQuery calls, one to save the value, and another to restore it.</p>\n\n<p>Before submit:</p>\n\n<pre><code>$(\"form\").submit(function() {\n  $(\"input\", \"#urlhash\").val(window.location.hash);\n});\n</code></pre>\n\n<p>On page load:</p>\n\n<pre><code>var hashVal = $(\"input\", \"#urlhash\").val();\nif (IsHashValid(hashVal)) {\n  window.location.hash = hashVal;\n}\n</code></pre>\n\n<p>IsHashValid() can check for \"undefined\" or other things you don't want to handle.</p>\n\n<p>Also, make sure you use $(document).ready() appropriately, of course.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>For example if I type in the URL:</p>\n\n<p><a href=\"http://www.foo.com/page.php?parameter=kickme#MOREURL\">http://www.foo.com/page.php?parameter=kickme#MOREURL</a></p>\n\n<p>In the server isn't the part: #MOREURL</p>\n\n<p>Is possible to send or get these part to the server without jQuery AJAX?.</p>\n\n<p>Thanks</p>\n",
            "last_activity_date": 1366446988,
            "question_id": 3664257,
            "score": 14,
            "tags": [
                "php",
                "javascript",
                "url",
                "hash",
                "href"
            ],
            "title": "Why the hash part of the URL is not in the server side?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Instead of</p>\n\n<pre><code>chrome.extension.onRequest.addListener(onRequest);\n</code></pre>\n\n<p>Use</p>\n\n<pre><code>chrome.extension.onMessage.addListener(onRequest);\n</code></pre>\n\n<p>Since you are using sendMessage and not sendRequest.</p>\n\n<p>Message parsing has been updated in the new version of Chrome. sendRequest and onRequest are being deprecated. It is recommended to go with sendMessage and onMessage.</p>\n\n<p>Refer docs for <a href=\"http://code.google.com/chrome/extensions/messaging.html\" rel=\"nofollow\">message parsing between Content Script and Background</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><code>sendMessage</code> and <code>onRequest</code> are <strong>not compatible</strong>.</p>\n\n<p>If you need to support <strong>Chrome 19 and earlier</strong>, use <strong><code>onRequest</code></strong> and <strong><code>sendRequest</code></strong>:</p>\n\n<pre><code>chrome.extension.onRequest.addListener(function(request, sender, sendResponse) {\n    // Warning: Chrome 19- [receiver]\n});\nchrome.extension.sendRequest(message, optional_sendResponse);\n</code></pre>\n\n<hr>\n\n<p>For <strong>Chrome 20 - 25</strong>, use <code>chrome.extension.<b>onMessage</b></code> and <code>chrome.extension.<b>sendMessage</b></code>:</p>\n\n<pre><code>chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {\n    // Chrome 20+\n});\nchrome.extension.sendMessage(message, optional_sendResponse);\n</code></pre>\n\n<hr>\n\n<p>For <strong>Chrome 26+</strong>, use <a href=\"https://developer.chrome.com/extensions/runtime.html#event-onMessage\"><code>chrome<b>.runtime.</b>onMessage</code></a> and <a href=\"https://developer.chrome.com/extensions/runtime.html#method-sendMessage\"><code>chrome<b>.runtime.</b>sendMessage</code></a>.</p>\n\n<hr>\n\n<p>Note: As of Chrome 26, the deprecated methods are still supported, albeit undocumented. If you get a chance, update your extension to use the new methods, to ensure that your extension will still work in the future.<br>\nSee <a href=\"http://stackoverflow.com/a/15718294/938089?chrome-runtime-sendmessage-not-working-as-expected\">this answer</a> for code to create a which is compatible with Chrome 20+.</p>\n",
                    "is_accepted": true,
                    "score": 16
                }
            ],
            "body": "<p>When trying to communicate between my Content- and Background Script I get the following errors:</p>\n\n<pre><code>Port error: Could not establish connection. Receiving end does not exist.\nError in event handler for 'undefined': Cannot read property 'message' of undefined       \nTypeError: Cannot read property 'message' of undefined\n</code></pre>\n\n<p><strong>background.js</strong></p>\n\n<pre><code>function onRequest(request, sender, callbackFunction) {\n    console.log(\"Me (BS) became this Message:\" + request.message);\n    sendResponse({message: request.message})\n};\nchrome.extension.onRequest.addListener(onRequest);\n</code></pre>\n\n<p><strong>streamcloud.js</strong></p>\n\n<pre><code>function contactBackground(nachricht){\n    chrome.extension.sendMessage({message: nachricht}, function(response) {\n        console.log(\"The Background Script got the following Message: \" + response.message);\n    });\n}\n</code></pre>\n\n<p>and my <strong>manifest.json</strong></p>\n\n<pre><code>{\n  \"name\": \"InstantWatch - Dev\",\n  \"manifest_version\": 2,\n  \"version\": \"0.7\",\n  \"permissions\": [\"tabs\", \"http://*/\", \"https://*/\"],\n  \"background\": {\n    \"scripts\": [\"background.js\"]\n  },  \n  \"browser_action\": {\n    \"default_title\": \"InstantWatch\",\n    \"default_icon\" : \"icon.ico\"\n  },\n  \"content_scripts\": [\n    {\n      \"matches\": [\"http://*/*\", \"http://*/*\"],\n      \"js\": [\"jquery.js\", \"streamcloud.js\"]\n    }\n  ]\n}\n</code></pre>\n\n<p>I found the solution to add an background_page: \"background.html\" with an empty background.html, but since background_page isn't supported since manifest_version: 2, I can't use that.</p>\n",
            "last_activity_date": 1369497097,
            "question_id": 11811554,
            "score": 6,
            "tags": [
                "javascript",
                "google-chrome",
                "google-chrome-extension"
            ],
            "title": "Chrome Extension: Port error: Could not establish connection. Receiving end does not exist."
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>AJAX isn't for downloading files. Pop up a new window with the download link as its address, or do <code>document.location = ...</code>.</p>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>I have accomplished this with a hidden iframe. I use perl, not php, so will just give concept, not code solution.</p>\n\n<p>Client sends Ajax request to server, causing the file content to be generated. This is saved as a temp file on the server, and the filename is returned to the client.</p>\n\n<p>Client (javascript) receives filename, and sets the iframe src to some url that will deliver the file, like:</p>\n\n<pre><code>$('iframe_dl').src=\"/app?download=1&amp;filename=\" + the_filename\n</code></pre>\n\n<p>Server slurps the file, unlinks it, and sends the stream to the client, with these headers:</p>\n\n<pre><code>Content-Type:'application/force-download'\nContent-Disposition:'attachment; filename=the_filename'\n</code></pre>\n\n<p>Works like a charm.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>@joe : Many thanks, this was a good heads up!</p>\n\n<p>I had a slightly harder problem:\n1. sending an AJAX request with POST data, for the server to produce a ZIP file\n2. getting a response back\n3. download the ZIP file</p>\n\n<p>So that's how I did it (using JQuery to handle the AJAX request):</p>\n\n<ol>\n<li><p>Initial post request:\n <pre><code>var parameters = {\n     pid     : \"mypid\",\n   \"files[]\": [\"file1.jpg\",\"file2.jpg\",\"file3.jpg\"]\n}</p>\n\n<p>var options = {\n   url: \"request/url\",//replace with your request url\n   type: \"POST\",//replace with your request type\n   data: parameters,//see above\n   context: document.body,//replace with your contex\n   success: function(data){\n    if (data) {\n        if (data.path) {\n                    //Create an hidden iframe, with the 'src' attribute set to the created ZIP file.\n            var dlif = $('<code>&lt;iframe/&gt;</code>',{'src':data.path}).hide();\n            //Append the iFrame to the context\n            this.append(dlif);\n        } else if (data.error) {\n            alert(data.error);\n        } else {\n            alert('Something went wrong');\n        }\n    }\n}\n};\n$.ajax(options);</code></pre></p></li>\n</ol>\n\n<p>The \"request/url\" handles the zip creation (off topic, so I wont post the full code) and returns the following JSON object. Something like:</p>\n\n<pre><code> //Code to create the zip file\n //......\n //Id of the file\n $zipid = \"myzipfile.zip\"\n //Download Link - it can be prettier\n $dlink = 'http://'.$_SERVER[\"SERVER_NAME\"].'/request/download&amp;file='.$zipid;\n //JSON response to be handled on the client side\n $result = '{\"success\":1,\"path\":\"'.$dlink.'\",\"error\":null}';\n header('Content-type: application/json;');\n echo $result;\n</code></pre>\n\n<p>The \"request/download\" can perform some security checks, if needed, and generate the file transfer:</p>\n\n<pre><code>$fn = $_GET['file'];\nif ($fn) {\n  //Perform security checks\n  //.....check user session/role/whatever\n  $result = $_SERVER['DOCUMENT_ROOT'].'/path/to/file/'.$fn;\n  if (file_exists($result)) {\n    header('Content-Description: File Transfer');\n    header('Content-Type: application/force-download');\n    header('Content-Disposition: attachment; filename='.basename($result));\n    header('Content-Transfer-Encoding: binary');\n    header('Expires: 0');\n    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');\n    header('Pragma: public');\n    header('Content-Length: ' . filesize($result));\n    ob_clean();\n    flush();\n    readfile($result);\n    @unlink($result);\n  }\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>A very simple solution using jQuery:</p>\n\n<p>on the client side:</p>\n\n<pre><code>$('.act_download_statement').click(function(e){\n    e.preventDefault();\n    form = $('#my_form');\n    form.submit();\n});\n</code></pre>\n\n<p>and on the server side, make sure you send back the correct <code>Content-Type</code> header, so the browser will know its an attachment and the download will begin.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>You can't download the file directly via ajax.</p>\n\n<p>You can put a link on the page with the URL to your file (returned from the ajax call) or another way is to use a hidden <code>iframe</code> and set the URL of the source of that <code>iframe</code> dynamically. This way you can download the file without refreshing the page.</p>\n\n<p>Here is the code</p>\n\n<pre><code>$.ajax({\n    url : \"yourURL.php\",\n    type : \"GET\",\n    success : function(data) {\n        $(\"#iframeID\").attr('src', 'downloadFileURL');\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a button and <code>onclick</code> it will call an ajax function. </p>\n\n<p>Here is my ajax function</p>\n\n<pre><code>function csv(){\n\n    ajaxRequest = ajax();//ajax() is function that has all the XML HTTP Requests\n\n    postdata = \"data=\" + document.getElementById(\"id\").value;\n\n    ajaxRequest.onreadystatechange = function(){\n        var ajaxDisplay = document.getElementById('ajaxDiv');\n        if(ajaxRequest.readyState == 4 &amp;&amp; ajaxRequest.status==200){\n            ajaxDisplay.innerHTML = ajaxRequest.responseText;           \n        }\n    }\n\n    ajaxRequest.open(\"POST\",\"csv.php\",false);\n    ajaxRequest.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    ajaxRequest.send(postdata);\n}\n</code></pre>\n\n<p>I create the csv file based on the user input. After it's created I want it to prompt download or force download(preferably force). I am using the following script at the end of the php file to download the file. If I run this script in a separate file it works fine. </p>\n\n<pre><code>$fileName = 'file.csv';\n$downloadFileName = 'newfile.csv';\n\nif (file_exists($fileName)) {\n    header('Content-Description: File Transfer');\n    header('Content-Type: text/csv');\n    header('Content-Disposition: attachment; filename='.$downloadFileName);\n    ob_clean();\n    flush();\n    readfile($fileName);\n    exit;\n}\necho \"done\";\n</code></pre>\n\n<p>But If I run it at the end of csv.php it outputs the contents of the file.csv into the page(into the ajaxDiv) instead of downloading. </p>\n\n<p>Is there a way to force download the file at the end of csv.php?</p>\n",
            "last_activity_date": 1410822009,
            "question_id": 6668776,
            "score": 15,
            "tags": [
                "php",
                "javascript",
                "ajax",
                "download"
            ],
            "title": "Download file through an ajax call php"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You need to put the closure into a separate function.</p>\n\n<pre><code>for(var dontUse = 0; dontUse &lt; 10; ++dontUse) {\n    (function(i) {\n        createButton(x, y, function() { alert(\"button \" + i + \" pressed\"); }\n    })(dontUse);\n}\n</code></pre>\n\n<p>Thise code creates an anonymous function that takes <code>i</code> as a parameter for each iteration of the loop.<br>\nSince this anonymous function has a separate <code>i</code> parameter for each iteration, it fixes the problem.</p>\n\n<p>This is equivalent to</p>\n\n<pre><code>function createIndexedButton(i) {\n    createButton(x, y, function() { alert(\"button \" + i + \" pressed\"); }\n}\n\nfor(var i = 0; i &lt; 10; ++i) {\n    createIndexedButton(i);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>for(var i = 0; i &lt; 10; ++i) {\n    createButton(x, y, (function(n) {\n        return function() {\n            alert(\"button \" + n + \" pressed\");\n        }\n    }(i));\n}\n</code></pre>\n\n<p>The anonymous function on the outside is automatically invoked and creates a new closure with <code>n</code> in its scope, where that takes the <em>then current</em> value of <code>i</code> each time it's invoked.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Create a new scope for the closure by executing another function:</p>\n\n<pre><code>for(var i = 0; i &lt; 10; ++i) {\n    createButton(x,y, function(value) { return function() { alert(...); }; }(i));\n}\n</code></pre>\n\n<p><a href=\"http://www.mennovanslooten.nl/blog/post/62\" rel=\"nofollow\">http://www.mennovanslooten.nl/blog/post/62</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>for(var i = 0; i &lt; 10; i++) {\n    (function(i) {\n        createButton(function() { alert(\"button \" + i + \" pressed\"); });\n    })(i);\n}\n</code></pre>\n\n<p>Note that JSLint doesn't like this pattern. It throws \"Don't make functions within a loop.\".</p>\n\n<p><strong>Live demo:</strong> <a href=\"http://jsfiddle.net/simevidas/ZKeXX/\" rel=\"nofollow\">http://jsfiddle.net/simevidas/ZKeXX/</a></p>\n",
                    "is_accepted": true,
                    "score": 5
                },
                {
                    "body": "<p>One solution, if you're coding for a browser that uses JavaScript 1.7 or higher, is to use the <code>let</code> keyword:</p>\n\n<pre><code>for(var i = 0; i &lt; 10; ++i) {\n    let index = i;\n    createButton(x, y, function() { alert(\"button \" + index + \" pressed\"); }\n}\n</code></pre>\n\n<p>From the MDC Doc Center:</p>\n\n<blockquote>\n  <p>The let keyword causes the item\n  variable to be created with block\n  level scope, causing a new reference\n  to be created for each iteration of\n  the for loop. This means that a\n  separate variable is captured for each\n  closure, solving the problem caused by\n  the shared environment.</p>\n</blockquote>\n\n<p>Check out the <a href=\"https://developer.mozilla.org/en/JavaScript/Guide/Closures\" rel=\"nofollow\">MDC Doc Center</a> for the traditional approach (creating another closure).</p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I would like to do the something along the following:</p>\n\n<pre><code>for(var i = 0; i &lt; 10; ++i) {\n    createButton(x, y, function() { alert(\"button \" + i + \" pressed\"); }\n}\n</code></pre>\n\n<p>The with this is that I always get the final value of <code>i</code> because Javasript's closure is not by-value.<br>\nSo how can I do this with javascript?</p>\n",
            "last_activity_date": 1386429188,
            "question_id": 5555464,
            "score": 5,
            "tags": [
                "javascript",
                "closures",
                "anonymous-function"
            ],
            "title": "Javascript: closure of loop?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>First you can create the file from a handler <code>.ashx</code></p>\n\n<p>Let say that you have the file for downloading at <code>download.ashx</code> and you have some parametres to pass from your javascript, eg <code>download.ashx?p1=8827&amp;p2=8831</code> to know what you going to create.</p>\n\n<p>Then on your javascript you simple can make a redirect as</p>\n\n<pre><code>window.location = \"download.ashx?p1=8827&amp;p2=8831\";\n</code></pre>\n\n<p>or alternative you can use the <code>window.open</code> for do the same think</p>\n\n<pre><code>window.open(\"download.ashx?p1=8827&amp;p2=8831\");\n</code></pre>\n\n<p>and your file will start the download.</p>\n\n<p>Just make sure that you have set the header of attachment, and the correct contenttype on your handle eg:</p>\n\n<pre><code>  HttpContext.Current.Response.ContentType = \"application/octet-stream\";\n  HttpContext.Current.Response.AddHeader(\"Content-Disposition\", \n                    \"attachment; filename=\" + SaveAsThisFileName);\n</code></pre>\n\n<p>Simple and clear, both tested and working.</p>\n\n<p>Also you may interesting on this answer: <a href=\"http://stackoverflow.com/a/14616216/159270\">How to handle errors</a>.</p>\n",
                    "is_accepted": true,
                    "score": 7
                }
            ],
            "body": "<p>I have interesting task which requires me to download a dynamically generated file from a server (ASP.NET) to the client. On the client side it is just JavaScript (jQuery) and the client is able to generate a lot of parameters to customize how the data is exported. </p>\n\n<p>What is the best way to do download the file from the server?  Should I use a WCF service such as what is described <a href=\"http://www.codeproject.com/Articles/166763/WCF-Streaming-Upload-Download-Files-Over-HTTP\" rel=\"nofollow\">here</a> or simple page like <a href=\"http://shawpnendu.blogspot.com/2009/05/how-to-download-file-from-server-using.html\" rel=\"nofollow\">this one</a>? </p>\n\n<p>I don't know how to download a file without reloading the page (I'm not sure that $.ajax will work in this case). Could someone please give me some direction on this topic? Thanks. </p>\n",
            "last_activity_date": 1359662996,
            "question_id": 10912164,
            "score": 8,
            "tags": [
                "javascript",
                "asp.net",
                "wcf"
            ],
            "title": "What is the best way to download file from server"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The short answer is you have to take into consideration the <code>offset</code> of the canvas.</p>\n\n<p>The long answer depends on how your code is written, so I'll give you two answers, which should cover the bases. </p>\n\n<p>There are a lot of possible combinations, so you may have to experiment. Also, different browsers may act differently, so... <em>beware</em>.</p>\n\n<p>Assume your HTML is something like this:</p>\n\n<pre><code>#canvas {\n    width: 200px;\n    height: 200px;\n    margin: 100px;\n    padding: 0px;\n    position: static; /* fixed or static */\n    top: 100px;\n    left: 100px;\n}\n\n&lt;body&gt;\n    &lt;div id=\"canvas\"&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Your JS is something like this:</p>\n\n<pre><code>var CANVAS_WIDTH = 200,\nCANVAS_HEIGHT = 200;\n\nvar container = document.getElementById( 'canvas' );\ndocument.body.appendChild( container );\n\nrenderer = new THREE.WebGLRenderer();\nrenderer.setSize( CANVAS_WIDTH, CANVAS_HEIGHT );\ncontainer.appendChild( renderer.domElement );\n</code></pre>\n\n<p><strong>Method 1</strong> For the following method to work correctly, set the canvas position <em>static</em>; margin > 0 and padding > 0 are OK</p>\n\n<pre><code>mouse.x = ( ( event.clientX - renderer.domElement.offsetLeft ) / renderer.domElement.width ) * 2 - 1;\nmouse.y = - ( ( event.clientY - renderer.domElement.offsetTop ) / renderer.domElement.height ) * 2 + 1;\n</code></pre>\n\n<p><strong>Method 2</strong> For this alternate method, set the canvas position <em>fixed</em>; set top > 0, set left > 0; padding must be 0; margin > 0 is OK</p>\n\n<pre><code>mouse.x = ( ( event.clientX - container.offsetLeft ) / container.clientWidth ) * 2 - 1;\nmouse.y = - ( ( event.clientY - container.offsetTop ) / container.clientHeight ) * 2 + 1;\n</code></pre>\n\n<p>Here is a Fiddle if you want to experiment: <a href=\"http://jsfiddle.net/fek9ddg5/1/\" rel=\"nofollow\">http://jsfiddle.net/fek9ddg5/1/</a></p>\n\n<p>EDIT: Fiddle updated to three.js r.69</p>\n",
                    "is_accepted": true,
                    "score": 17
                },
                {
                    "body": "<p>WestLangley, thanks a lot for your explanation. It was really helpful as usual.</p>\n\n<p>In my case, I had my chart in a div absolutely positioned, so I had to do this:</p>\n\n<pre><code>    var offset = $('.rightBlock').offset();\n\n\n    mouse.x = ( ( event.clientX - offset.left ) / renderer.domElement.width ) * 2 - 1;\n    mouse.y = - ( ( event.clientY - offset.top ) / renderer.domElement.height ) * 2 + 1;\n</code></pre>\n\n<p>Where rightBlock is my container, that uses only 70% of the screen. </p>\n\n<p>You inspired me and help me solving this problematic issue! Thanks a lot.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>My Three.js script runs fine when there is only one target div on the page (which holds renderer.domElement). As soon as I add another div with fixed height and width above the target div, ray.intersectObjects returns null. I doubt that the vector that I am creating for ray is causing the problem. Here is the code.</p>\n\n<pre><code>var vector = new THREE.Vector3( ( event.clientX / divWidth ) * 2 - 1, -( event.clientY / divHeight ) * 2 + 1, 0.5 );\n\nprojector.unprojectVector( vector, camera );\n\nvar ray = new THREE.Ray( camera.position, vector.subSelf( camera.position ).normalize() );\n\nvar intersects = ray.intersectObjects( myObjects, true );\n</code></pre>\n\n<p>Any ideas on how I can solve this.</p>\n\n<p>EDIT: it is now <code>THREE.Raycaster</code>  (three.js r.56)</p>\n",
            "last_activity_date": 1424862253,
            "question_id": 13542175,
            "score": 6,
            "tags": [
                "javascript",
                "three.js"
            ],
            "title": "THREE.js Ray Intersect fails by adding div"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You could make <code>Controls</code> a class of it's own:</p>\n\n<pre><code>var Controls = function (controllable_object) {\n    this.ref = controllable_object;\n};\nControls.prototype.next = function () {\n    this.ref.foo();\n}\n// ..\n\nvar Carousel = function () {\n    this.controls = new Controls(this);\n};\n// ..\n</code></pre>\n\n<p>This doesn't allow you to override the implementation of <code>Controls</code> though. With more dependency injection you'd get something like:</p>\n\n<pre><code>var Controls = function (controllable_object) {\n    this.ref = controllable_object;\n};\nControls.prototype.next = function () {\n    this.ref.foo();\n}\n// ..\n\nvar Carousel = function () {\n        this.controllers = [];\n    };\nCarousel.prototype.addController = function (controller) {\n        this.controllers.push(controller);\n    };\n// ..\n\nvar carousel = new Carousel();\ncarousel.addController(new Controls(carousel));\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 2
                },
                {
                    "body": "<blockquote>\n  <p>My inheritance is done like this:</p>\n\n<pre><code>$.extend(this.prototype , new parentClass);\n</code></pre>\n</blockquote>\n\n<p>Ouch. This is not inheritance (with <code>new BigCarousel instanceof Carousel</code>), but just copying properties. Maybe this is enough for you, but then you should call it <em>mixin</em>. Also, you should <a href=\"http://stackoverflow.com/q/12592913/1048572\">avoid using <code>new</code> for inheritance</a>.</p>\n\n<hr>\n\n<blockquote>\n  <p>But this will cause the value of \"this\" being lost. How can I work around that?</p>\n</blockquote>\n\n<p>It's impossible to have <code>this</code> point to the parent object with nested properties (as long as you don't want to explicitly set it every time). You have only two choices:</p>\n\n<ul>\n<li>Forget it, and organize your methods by prefixing them (<code>controlNext</code>, <code>controlBind</code>, \u2026)</li>\n<li><p>Give each of your carousels its own <code>controls</code> object. For inheritance, make them <code>CarouselControls</code> instances for example. This especially fits well if those controls are quite independent from the carousel, and don't need to access the carousel they're attached to everywhere. If they are not, you still can pass a reference to the parent carousel into their constructor for example:</p>\n\n<pre><code>this.controls = new CarouselControls(this);\n</code></pre>\n\n<p>Also, for customizing the controls in different carousels, you might have to subclass the <code>CarouselControls</code> as well - or you prepare your <code>Controls</code> object to serve for different carousels in general, so that from <code>BigCarousel</code> you can</p>\n\n<pre><code>Carousel.call(this); // make this a carousel\nthis.controls.activate({big: true, fast: false}); // or something\n</code></pre></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use the .bind method of Function.</p>\n\n<p>In Javascript Functions inherit from Object, so they have their own methods. One of those methods is .bind:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Function/bind</a></p>\n\n<p>Also you are doing inheritance wrong, the right way with raw Javascript is:</p>\n\n<pre><code>ChildClass= function() {\n    ParentClass.apply(this, arguments); //calling parent constructor\n    //constructor\n};\n\nChildClass.prototype= new ParentClass();\n</code></pre>\n\n<p>Then you can simply do this on your constructor:</p>\n\n<pre><code>Courossel= function() {\n    ParentClass.apply(this, arguments); //calling parent constructor\n    this.controls.next.bind(this);\n    this.controls.prev.bind(this);\n    this.controls.bindControls.bind(this);\n}\n</code></pre>\n\n<p>But I have to say that Frits suggestion is better, make the controls their own class and instantiate it on Carousel constructor passing a reference to your Carousel instance (the this keyword). Just don't call it \".ref\", it's confusing.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have build a large application using javascript prototype and inheritance.\nBut I am having a hard time organizing my code.\nFor example I have a class carousel which has many functions like this:</p>\n\n<pre><code>Carousel.prototype.next = function () {...}\nCarousel.prototype.prev = function () {..}\nCarousel.prototype.bindControls = function () {..}\n</code></pre>\n\n<p>I would like to organize my code like this :</p>\n\n<pre><code>Carousel.prototype.controls = {\n   next: function () { ... } , \n   prev: function() { ... },\n   bindControls: function () { .. }\n}\n</code></pre>\n\n<p>But this will cause the value of \"this\" being lost. I can keep track of it using a global instance but this will cause problems when the class is inherited for example In another file I have something like this to override parent class</p>\n\n<pre><code>BigCarousel.prototype.next = function () {...}\n</code></pre>\n\n<p>My inheritance is done like  this:</p>\n\n<pre><code>Function.prototype.inheritsFrom = function (parentClass) {\n    if (parentClass.constructor === Function) {\n        //Normal Inheritance\n        this.prototype              = $.extend(this.prototype , new parentClass);\n        this.prototype.constructor  = this;\n        this.prototype.parent       = parentClass.prototype;\n    }\n    else {\n        //Pure Virtual Inheritance\n        this.prototype = $.extend(this.prototype, parentClass);\n        this.prototype.constructor = this;\n        this.prototype.parent = parentClass;\n    }\n    return this;\n};\n</code></pre>\n\n<p>So I can do:</p>\n\n<pre><code>BigCarousel.inheritsFrom(Carousel)\n</code></pre>\n\n<p>Does anyone know how can I work around the \"this\" value ? </p>\n",
            "last_activity_date": 1365440131,
            "question_id": 15884096,
            "score": 3,
            "tags": [
                "javascript",
                "oop",
                "javascript-objects"
            ],
            "title": "Organize prototype javascript while perserving object reference and inheritance"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>The google.maps.LatLng constructor takes two numbers for arguments.  This won't work:</p>\n\n<pre><code>var newLatLang = new google.maps.LatLng(newCoords);\n</code></pre>\n\n<p>You need to convert newCoords into two numbers.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/6778061/convert-string-to-latlng-google-maps\">Convert String to latlng google maps</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/15315722/convert-52-43242-4-43242-to-google-latlng\">Convert \u201c[52.43242, 4.43242]\u201d to google LatLng</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/15853530/how-do-i-get-a-pin-on-google-maps-using-location-from-a-variable\">How do I get a pin on Google Maps using location from a variable?</a></p>\n",
                    "is_accepted": true,
                    "score": 2
                }
            ],
            "body": "<p>Trying to move marker/map on interval with lat/long coords from sql db.</p>\n\n<pre><code>function initialize() {\n    var myLatLng = new google.maps.LatLng(41,14);\n\n    var myOptions = {\n        zoom: 16,\n        center: myLatLng,\n        scrollwheel: false,\n        panControl: true,\n        zoomControl: true,\n        mapTypeControl: true,\n        scaleControl: true,\n        streetViewControl: true,\n        overviewMapControl: true,\n        mapTypeId: google.maps.MapTypeId.SATELLITE,\n    }\n\n    map = new google.maps.Map(document.getElementById('map_canvas'), myOptions);\n\n    marker = new google.maps.Marker({\n        position: myLatLng,\n        map: map,\n        draggable: false\n});\n\n}\ngoogle.maps.event.addDomListener(window, 'load', initialize);\n\nfunction getCoords() {\n\n$.ajax({\nurl: \"../ajaxscript.php\",\ntype: \"POST\",\ndata: {\nfoo : \"bar\"\n},\ndataType: \"text\",\nsuccess: function(returnedData) {\n      alert(returnedData);\n    moveMarkerMap(returnedData);\n}\n});\n\n}\n\nfunction moveMarkerMap(newCoords) {\nvar newLatLang = new google.maps.LatLng(newCoords);\nmap.panTo(newLatLang);\nmarker.setPosition(newLatLang);\n\n}\nwindow.setInterval(getCoords, 5000);\n</code></pre>\n\n<p>Setting the new google.maps.LatLng(14,41) in moveMarkerMap() will move it, and the returnedData shows in alert() but marker won't move when used with moveMarkerMap()</p>\n\n<p>The returned string from ajax is correct format; (9.624672,7.242244) as shown in alert()\nso not sure why its not working.</p>\n",
            "last_activity_date": 1373894941,
            "question_id": 17654989,
            "score": 2,
            "tags": [
                "javascript",
                "ajax",
                "google-maps",
                "google-maps-api-3"
            ],
            "title": "google maps move marker with lat/lng from ajax success returned data"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>For your purposes, I recommend using SVG, since you get DOM events, like mouse handling, including drag and drop, included, you don't have to implement your own redraw, and you don't have to keep track of the state of your objects. Use Canvas when you have to do bitmap image manipulation and use a regular div when you want to manipulate stuff created in HTML. As to performance, you'll find that modern browsers are now accelerating all three, but that canvas has received the most attention so far. On the other hand, how well you write your javascript is critical to getting the most performance with canvas, so I'd still recommend using SVG.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<h2>The short answer:</h2>\n\n<p>SVG would be <em>easier</em> for you, since selection and moving it around is already built in. SVG objects are DOM objects, so they have \"click\" handlers, etc.</p>\n\n<p>DIVs are okay but clunky and have <em>awful</em> performance loading at large numbers.</p>\n\n<p>Canvas has the best performance hands-down, but you have to implement all concepts of managed state (object selection, etc) yourself, or use a library.</p>\n\n<hr>\n\n<h2>The long answer:</h2>\n\n<p>HTML5 Canvas is simply a drawing surface for a bit-map. You set up to draw (Say with a color and line thickness), draw that thing, and then the Canvas has no knowledge of that thing: It doesn't know where it is or what it is that you've just drawn, it's just pixels. If you want to draw rectangles and have them move around or be selectable then you have to code all of that from scratch, <strong>including</strong> the code to remember that you drew them.</p>\n\n<p>SVG on the other hand must maintain references to each object that it renders. Every SVG/VML element you create is a real element in the DOM. By default this allows you to keep much better track of the elements you create and makes dealing with things like mouse events easier by default, but it slows down significantly when there are a large number of objects</p>\n\n<p>Those SVG DOM references mean that some of the footwork of dealing with the things you draw is done for you. And SVG is faster when rendering <em>really large</em> objects, but slower when rendering <em>many</em> objects.</p>\n\n<p>A game would probably be faster in Canvas. A huge map program would probably be faster in SVG. If you do want to use Canvas, I have some tutorials on getting movable objects up and running <a href=\"http://simonsarris.com/blog/510-making-html5-canvas-useful\">here</a>.</p>\n\n<p>Canvas would be better for faster things and heavy bitmap manipulation (like animation), but will take more code if you want lots of interactivity.</p>\n\n<p>I've run a bunch of numbers on HTML DIV-made drawing versus Canvas-made drawing. I could make a huge post about the benefits of each, but I will give some of the relevant results of my tests to consider for your specific application:</p>\n\n<p>I made Canvas and HTML DIV test pages, both had movable \"nodes.\" Canvas nodes were objects I created and kept track of in Javascript. HTML nodes were movable Divs.</p>\n\n<p>I added 100,000 nodes to each of my two tests. They performed quite differently:</p>\n\n<p>The HTML test tab took forever to load (timed at slightly under 5 minutes, chrome asked to kill the page the first time). Chrome's task manager says that tab is taking up 168MB. It takes up 12-13% CPU time when I am looking at it, 0% when I am not looking.</p>\n\n<p>The Canvas tab loaded in one second and takes up 30MB. It also takes up 13% of CPU time all of the time, regardless of whether or not one is looking at it. <em>(2013 edit: They've mostly fixed that)</em></p>\n\n<p>Dragging on the HTML page is smoother, which is expected by the design, since the current setup is to redraw EVERYTHING every 30 milliseconds in the Canvas test. There are plenty of optimizations to be had for Canvas for this. (canvas invalidation being the easiest, also clipping regions, selective redrawing, etc.. just depends on how much you feel like implementing)</p>\n\n<p>There is no doubt you could get Canvas to be faster at object manipulation as the divs in that simple test, and of course far faster in the load time. Drawing/loading is faster in Canvas and has far more room for optimizations, too (ie, excluding things that are off-screen is very easy).</p>\n\n<h2>Conclusion:</h2>\n\n<ul>\n<li>SVG is probably better for applications and apps with few items (less than 1000? Depends really)</li>\n<li>Canvas is better for thousands of objects and careful manipulation, but a lot more code (or a library) is needed to get it off the ground.</li>\n<li>HTML Divs are clunky and do not scale, making a circle is only possible with rounded corners, making complex shapes is possible but involves hundreds of tiny tiny pixel-wide divs. Madness ensues.</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 202
                },
                {
                    "body": "<p>I agree with Simon Sarris's conclusions:</p>\n\n<p>I have compared some visualization in Protovis (SVG) to Processingjs (Canvas) which display > 2000 points and processingjs is much faster than protovis. </p>\n\n<p>Handling events with SVG is of course much easer because you can attach them to the objects. In Canvas you have to do it manually (check mouse position, etc) but for simple interaction it shouldn't be hard. </p>\n\n<p>There is also the <a href=\"http://dojotoolkit.org/reference-guide/dojox/gfx.html\">dojo.gfx</a> library of the dojo toolkit. It provides an abstraction layer and you can specify the renderer (SVG, Canvas, Silverlight). That might be also an viable choice although I don't know how much overhead the additional abstraction layer adds but it makes it easy to code interactions and animations and is renderer-agnostic. </p>\n\n<p>Here are some interesting benchmarks:</p>\n\n<ul>\n<li><a href=\"http://svbreakaway.info/tp.php#jan21a\">http://svbreakaway.info/tp.php#jan21a</a></li>\n<li><a href=\"http://www.eleqtriq.com/2010/02/canvas-svg-flash/\">http://www.eleqtriq.com/2010/02/canvas-svg-flash/</a></li>\n<li><a href=\"http://smus.com/canvas-vs-svg-performance/\">http://smus.com/canvas-vs-svg-performance/</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>To add to this, I've been doing a diagram application, and initially started out with canvas.  The diagram consists of many nodes, and they can get quite big.  The user can drag elements in the diagram around.</p>\n\n<p>What I found was that on my Mac, for very large images, SVG is superior. I have a MacBook Pro 2013 13\" Retina, and it runs the fiddle below quite well.  The image is 6000x6000 pixels, and has 1000 objects. A similar construction in canvas was impossible to animate for me when the user was dragging objects around in the diagram.</p>\n\n<p>On modern displays you also have to account for different resolutions, and here SVG gives you all of this for free.  </p>\n\n<p>Fiddle: <a href=\"http://jsfiddle.net/knutsi/PUcr8/16/\" rel=\"nofollow\">http://jsfiddle.net/knutsi/PUcr8/16/</a></p>\n\n<p>Fullscreen: <a href=\"http://jsfiddle.net/knutsi/PUcr8/16/embedded/result/\" rel=\"nofollow\">http://jsfiddle.net/knutsi/PUcr8/16/embedded/result/</a></p>\n\n<pre><code>var wiggle_factor = 0.0;\nnodes = [];\n\n// create svg:\nvar svg = document.createElementNS(\"http://www.w3.org/2000/svg\", \"svg\");\nsvg.setAttribute('style', 'border: 1px solid black');\nsvg.setAttribute('width', '6000');\nsvg.setAttribute('height', '6000');\nsvg.setAttributeNS(\"http://www.w3.org/2000/xmlns/\", \"xmlns:xlink\", \"http://www.w3.org/1999/xlink\");\ndocument.body.appendChild(svg);\n\n\nfunction makeNode(wiggle) {\n    var node = document.createElementNS(\"http://www.w3.org/2000/svg\", \"g\");\n    var node_x = (Math.random() * 6000);\n    var node_y = (Math.random() * 6000);\n    node.setAttribute(\"transform\", \"translate(\" + node_x + \", \" + node_y +\")\");\n\n    // circle:\n    var circ = document.createElementNS(\"http://www.w3.org/2000/svg\", \"circle\");\n    circ.setAttribute( \"id\",\"cir\")\n    circ.setAttribute( \"cx\", 0 + \"px\")\n    circ.setAttribute( \"cy\", 0 + \"px\")\n    circ.setAttribute( \"r\",\"100px\");\n    circ.setAttribute('fill', 'red');\n    circ.setAttribute('pointer-events', 'inherit')\n\n    // text:\n    var text = document.createElementNS(\"http://www.w3.org/2000/svg\", \"text\");\n    text.textContent = \"This is a test! \u00c5\u00c6\u00d8\";\n\n    node.appendChild(circ);\n    node.appendChild(text);\n\n    node.x = node_x;\n    node.y = node_y;\n\n    if(wiggle)\n        nodes.push(node)\n    return node;\n}\n\n// populate with 100 nodes:\nfor(var i = 0; i &lt; 1000; i++) {\n    var node = makeNode(true);\n    svg.appendChild(node);\n}\n\n// make  one mapped to mouse:\nvar bnode = makeNode(false);\nsvg.appendChild(bnode);\n\ndocument.body.onmousemove=function(event){\n    bnode.setAttribute(\"transform\",\"translate(\" + (event.clientX + window.pageXOffset) + \", \" + (event.clientY + window.pageYOffset) +\")\");\n};\n\nsetInterval(function() {\n    wiggle_factor += 1/60;\n    nodes.forEach(function(node) {\n\n        node.setAttribute(\"transform\", \"translate(\" \n                          + (Math.sin(wiggle_factor) * 200 + node.x) \n                          + \", \" \n                          + (Math.sin(wiggle_factor) * 200 + node.y) \n                          + \")\");        \n    })\n},1000/60);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>What is the best way for element creation on the fly and being able to move it around?\nLet's say I want to create rectangle, circle and polygon then I want to select the objects and move it around</p>\n\n<p>And how is the performance of those three while in use for showing a web page?\nLet's say I want to create three visually identical web page and have header, footer, widget and text content in them. The first one is created using full canvas, the second is created using svg, and the third is created using plain div html and css.</p>\n",
            "last_activity_date": 1420563691,
            "question_id": 5882716,
            "score": 133,
            "tags": [
                "javascript",
                "html5",
                "canvas",
                "svg"
            ],
            "title": "Html5 Canvas vs SVG vs div"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>I'm not sure how FWIX.com is doing it specifically, but I'd wager they are using <a href=\"http://code.google.com/apis/maps/documentation/javascript/overlays.html#CustomOverlays\" rel=\"nofollow\">Custom Overlays</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>EDIT</strong> After some hunting around, this seems to be the best option:</p>\n\n<p><a href=\"http://google-maps-utility-library-v3.googlecode.com/svn/trunk/infobubble/examples/example.html\">http://google-maps-utility-library-v3.googlecode.com/svn/trunk/infobubble/examples/example.html</a></p>\n\n<p>You can see a customised version of this InfoBubble that I used on <a href=\"http://diveseven.com/atlas\">Dive Seven, a website for online scuba dive logging</a>.  It looks like this:</p>\n\n<p><img src=\"http://i.imgur.com/us1bl.png\"/></p>\n\n<hr>\n\n<p>Google <a href=\"http://gmaps-samples-v3.googlecode.com/svn/trunk/infowindow_custom/infowindow-custom.html\">provide a demo</a> that shows how to implement a custom info window.  It requires a fair amount of code, but seems to be pretty straightforward.</p>\n\n<hr>\n\n<p>There are some more examples using the <a href=\"http://google-maps-utility-library-v3.googlecode.com/svn/trunk/styledmarker/examples/\">Google Maps Utility Library (v3) Styled Marker extension</a>.  They definitely don't look as nice as the example in your screenshot, however.</p>\n",
                    "is_accepted": false,
                    "score": 70
                },
                {
                    "body": "<p>For people still trying to achieve this, I just implemented this using the InfoBox class provided by google <a href=\"http://google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/1.1.5/docs/reference.html\">that you can find here</a>. It basically extends the infoWindow class allowing for more customization and styling. </p>\n\n<p>Check out their <a href=\"http://google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/1.1.5/examples/infobox-basic.html\">basic example here</a>.</p>\n\n<p>Cheers!</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>you can take a look at this <a href=\"http://gmaps-samples-v3.googlecode.com/svn/trunk/infowindow_custom/infobox.js\" rel=\"nofollow\">http://gmaps-samples-v3.googlecode.com/svn/trunk/infowindow_custom/infobox.js</a></p>\n\n<p>and just massage it to fit your needs</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found InfoBox perfect for advanced styling.</p>\n\n<blockquote>\n  <p>An InfoBox behaves like a <strong>google.maps.InfoWindow</strong>, but it\n  supports several additional properties for advanced styling. An\n  InfoBox can also be used as a map label. An InfoBox also fires the\n  same events as a <strong>google.maps.InfoWindow</strong>.</p>\n</blockquote>\n\n<p>Include <a href=\"http://code.google.com/p/google-maps-utility-library-v3/source/browse/trunk/infobox/src/infobox.js\">http://code.google.com/p/google-maps-utility-library-v3/source/browse/trunk/infobox/src/infobox.js</a> in your page</p>\n\n<p>Then use this an exmaple : <a href=\"http://google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/1.1.5/docs/examples.html\">http://google-maps-utility-library-v3.googlecode.com/svn/tags/infobox/1.1.5/docs/examples.html</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You can even append your own css class on the popup container/canvas or how do you want.\nCurrent google maps 3.7 has popups styled by canvas element which prepends popup div container in code.\nSo at googlemaps 3.7 You can get into rendering process by popup's domready event like this:</p>\n\n<pre><code>var popup = new google.maps.InfoWindow();\ngoogle.maps.event.addListener(popup, 'domready', function() {\n  if (this.content &amp;&amp; this.content.parentNode &amp;&amp; this.content.parentNode.parentNode) {\n    if (this.content.parentNode.parentNode.previousElementSibling) {\n      this.content.parentNode.parentNode.previousElementSibling.className = 'my-custom-popup-container-css-classname';\n    }\n  }\n});\n</code></pre>\n\n<p>element.previousElementSibling is not present at IE8- so if you want to make it work at it, <a href=\"http://stackoverflow.com/a/5197873/389755\">follow this</a>.</p>\n\n<p><a href=\"https://developers.google.com/maps/documentation/javascript/3.7/reference#InfoWindow\" rel=\"nofollow\">check InfoWindow reference</a> for events and more..</p>\n\n<p>I found this most clean in some cases.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can modify the whole InfoWindow using jquery alone...</p>\n\n<pre><code>var popup = new google.maps.InfoWindow({\n    content:'&lt;p id=\"hook\"&gt;Hello World!&lt;/p&gt;'\n});\n</code></pre>\n\n<p>Here the &lt;p&gt; element will act as a hook into the actual InfoWindow. Once the domready fires, the element will become active and accessible using javascript/jquery, like <code>$('#hook').parent().parent().parent().parent()</code>.</p>\n\n<p>The below code just sets a 2 pixel border around the InfoWindow.</p>\n\n<pre><code>google.maps.event.addListener(popup, 'domready', function() {\n    var l = $('#hook').parent().parent().parent().siblings();\n    for (var i = 0; i &lt; l.length; i++) {\n        if($(l[i]).css('z-index') == 'auto') {\n            $(l[i]).css('border-radius', '16px 16px 16px 16px');\n            $(l[i]).css('border', '2px solid red');\n        }\n    }\n});\n</code></pre>\n\n<p>You can do anything like setting a new CSS class or just adding a new element.</p>\n\n<p>Play around with the elements to get what you need...</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Styling the infowindow is fairly straightforward with vanilla javascript. I used some of the info from this thread when writing this. I also took into account the possible problems with earlier versions of ie (although I have not tested it with them).</p>\n\n<pre><code>var infowindow = new google.maps.InfoWindow({\n  content: '&lt;div id=\"gm_content\"&gt;'+contentString+'&lt;/div&gt;'\n});\n\ngoogle.maps.event.addListener(infowindow,'domready',function(){\n  var el = document.getElementById('gm_content').parentNode.parentNode.parentNode;\n  el.firstChild.setAttribute('class','closeInfoWindow');\n  el.firstChild.setAttribute('title','Close Info Window');\n  el = (el.previousElementSibling)?el.previousElementSibling:el.previousSibling;\n  el.setAttribute('class','infoWindowContainer');\n  for(var i=0; i&lt;11; i++){\n    el = (el.previousElementSibling)?el.previousElementSibling:el.previousSibling;\n    el.style.display = 'none';\n  }\n});\n</code></pre>\n\n<p>The code creates the infowindow as usual (no need for plugins, custom overlays or huge code), using a div with an id to hold the content. This gives a hook in the system that we can use to get the correct elements to manipulate with a simple external stylesheet.</p>\n\n<p>There are a couple of extra pieces (that are not strictly needed) which handle things like giving a hook into the div with the close info window image in it.</p>\n\n<p>The final loop hides all the pieces of the pointer arrow. I needed this myself as I wanted to have transparency on the infowindow and the arrow got in the way. Of course, with the hook, changing the code to replace the arrow image with a png of your choice should be fairly simple too.</p>\n\n<p>If you want to change it to jquery (no idea why you would) then that should be fairly simple.</p>\n\n<p>I'm not usually a javascript developer so any thoughts, comments, criticisms welcome :)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Below piece of code may help you out.</p>\n\n<pre><code>var infowindow = new google.maps.InfoWindow();\n google.maps.event.addListener(marker, 'mouseover', (function(marker) {\n            return function() {\n                var content = address;\n                infowindow.setContent(content);\n                infowindow.open(map, marker);\n            }\n          })(marker));\n</code></pre>\n\n<p>Here is an article &lt; <a href=\"http://www.coolcoder.in/2014/03/how-to-locate-multiple-addresses-on.html\" rel=\"nofollow\">How to locate multiple addresses on google maps with perfect zoom</a> > that helped me achieved this. You can refer it for working JS Fiddle link and complete example.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I just came across <a href=\"http://fwix.com/\"><strong>http://fwix.com/</strong></a></p>\n\n<p>I really like how they create the InfoWindow (popup) when you click on a map marker because the corners on their InfoWindow are not as round as the default InfoWindow corners.</p>\n\n<p><em>Question</em>: How do they create their InfoWindow so square, which I like, because the default Google Maps InfoWindow for a map marker is very round.</p>\n\n<p><strong>UPDATE</strong>:</p>\n\n<p>Here is a screenshot of what I'm talking about:</p>\n\n<p><img src=\"http://img155.imageshack.us/img155/9274/fwix.png\" alt=\"example\"></p>\n",
            "last_activity_date": 1397205426,
            "question_id": 3860277,
            "score": 74,
            "tags": [
                "javascript",
                "html",
                "css",
                "google-maps"
            ],
            "title": "Google Maps: How to create a custom InfoWindow?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Well, if you paste the JSON into <a href=\"http://www.jsonlint.com/\" rel=\"nofollow\">JSONlint</a> you get formatted output.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Just paste it into: <a href=\"http://www.jsonlint.com/\" rel=\"nofollow\">http://www.jsonlint.com/</a></p>\n\n<p>Validation <strong>and</strong> beautification :)</p>\n\n<p>If you just want beautification, this works on JSON as well as any javascript code:  <a href=\"http://jsbeautifier.org/\" rel=\"nofollow\">http://jsbeautifier.org/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><a href=\"http://jsbeautifier.org/\" rel=\"nofollow\">jsbeautifier.org</a></p>\n\n<p>Result:</p>\n\n<pre><code>{\n    \"name\": \"Steve\",\n    \"surname\": \"Jobs\",\n    \"company\": \"Apple\"\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h3>Programmatic formatting solution:</h3>\n\n<p>The <code>JSON.stringify</code> method supported by many modern browsers (including IE8) can output a beautified JSON string:</p>\n\n<pre><code>JSON.stringify(jsObj, null, \"\\t\"); // stringify with tabs inserted at each level\nJSON.stringify(jsObj, null, 4);    // stringify with 4 spaces at each level\n</code></pre>\n\n<pre><b>Demo: </b><a href=\"http://jsfiddle.net/AndyE/HZPVL/\">http://jsfiddle.net/AndyE/HZPVL/</a></pre>\n\n<p>This method is also included with <a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\">json2.js</a>, for supporting older browsers.  </p>\n\n<h3>Manual formatting solution</h3>\n\n<p>If you don't need to do it programmatically, Try <a href=\"http://www.jsonlint.com/\">JSON Lint</a>.  Not only will it prettify your JSON, it will validate it at the same time.</p>\n",
                    "is_accepted": true,
                    "score": 224
                },
                {
                    "body": "<p>Here's something that might be interesting for developers hacking (minified or obfuscated) JavaScript more frequently.</p>\n\n<p>You can build your own CLI JavaScript beautifier in under 5 mins and have it handy on the command-line. You'll need <a href=\"http://www.mozilla.org/rhino/\" rel=\"nofollow\">Mozilla Rhino</a>, JavaScript file of some of the JS beautifiers available online, small hack and a script file to wrap it all up.</p>\n\n<p>I wrote an article explaining the procedure: <a href=\"http://blog.shonzilla.com/post/1448821411/command-line-javascript-beautifier\" rel=\"nofollow\">Command-line JavaScript beautifier implemented in JavaScript</a>.</p>\n\n<p>Cheers!<br/>\nShonzilla</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If the correct Mime Type is used, FireBug shows JSON responses formatted and beautified. </p>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<p>Do you know of any \"JSON Beautifier\" for JavaScript?</p>\n\n<p><strong>From</strong></p>\n\n<pre><code>{\"name\":\"Steve\",\"surname\":\"Jobs\",\"company\":\"Apple\"}\n</code></pre>\n\n<p><strong>To</strong></p>\n\n<pre><code>{\n  \"name\" : \"Steve\",\n  \"surname\" : \"Jobs\",\n  \"company\" : \"Apple\"\n}\n</code></pre>\n\n<p><strong>Example</strong></p>\n\n<pre><code>some_magic(jsonObj); // return beautified JSON\n</code></pre>\n",
            "last_activity_date": 1344461204,
            "question_id": 2614862,
            "score": 101,
            "tags": [
                "javascript",
                "json",
                "automation",
                "code-formatting",
                "beautification"
            ],
            "title": "How can I beautify JSON programmatically?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p><a href=\"http://alexgorbatchev.com/SyntaxHighlighter/\">SyntaxHighlighter</a> is available as a <a href=\"https://github.com/alexgorbatchev/SyntaxHighlighter\">GitHub project</a>.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p><a href=\"http://code.google.com/p/syntaxhighlighter/\" rel=\"nofollow\">SyntaxHighlighter</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>How about:</p>\n\n<p><a href=\"http://code.google.com/p/syntaxhighlighter/\">syntaxhighlighter</a></p>\n\n<p><a href=\"http://softwaremaniacs.org/soft/highlight/en/\">highlight.js</a></p>\n\n<p><a href=\"http://www.devpro.it/jshighlighter/\">JSHighlighter</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>StackOverflow uses <a href=\"http://code.google.com/p/google-code-prettify/\">Prettify</a>.</p>\n",
                    "is_accepted": true,
                    "score": 85
                },
                {
                    "body": "<p>If you're using jQuery there's Chilli:</p>\n\n<p><a href=\"http://code.google.com/p/jquery-chili-js/\">http://code.google.com/p/jquery-chili-js/</a></p>\n\n<p>All you have to do is include the jquery-chili.js and recipes.js, and do the highlight with </p>\n\n<pre><code>$(\"code\").chili();\n</code></pre>\n\n<p>It should figure out the language by itself.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I'm very happy with <strong><a href=\"http://shjs.sourceforge.net/\" rel=\"nofollow\">SHJS</a></strong>. It supports a bevy of languages and seems pretty fast and accurate.</p>\n\n<p>Here's an example where I use it on <strong><a href=\"http://andrew.hedges.name/blog/2008/05/13/widget-javascript-the-un-series-part-0\" rel=\"nofollow\">my blog</a></strong>. I'm using my own custom CSS file that simulates <strong><a href=\"http://panic.com/coda/\" rel=\"nofollow\">Coda's</a></strong> syntax highlighting. Email me if you'd like to use it.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I'm not being argumentative but just thought it worth mentioning that if you're using a CMS or blog platform then using a backend highlighter is better for obvious reasons \u2014 Have a look at <a href=\"http://qbnz.com/highlighter/\" rel=\"nofollow\">Geshi</a>(<a href=\"http://qbnz.com/highlighter/\" rel=\"nofollow\">http://qbnz.com/highlighter/</a>) if you're interested. Actually you could set up your server to parse HTML content through a backend technology \u2014 so there is no need for the JS highlighters at all. (The only functionality they add is the ability to print/copy[using swf].)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"http://www.webresourcesdepot.com/11-syntax-highlighters-to-beautify-code-presentation/\" rel=\"nofollow\">This article at the Web Resources Depot</a> lists a bunch of options for highlighting code, some of which use Javascript. It was published on 4th May 2009.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://www.oriontransfer.co.nz/software/jquery-syntax\" rel=\"nofollow\">jQuery.Syntax</a> is an extremely fast and lightweight syntax highlighter. It has dynamic loading of syntax source files and integrates cleanly using CSS or modelines.</p>\n\n<p>It was developed specifically to fill a gap - that is: a fast, clean, client-side syntax parser.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><a href=\"https://github.com/balupton/jquery-syntaxhighlighter\">jQuery Syntax Highlighter</a> is a new one based on <a href=\"http://code.google.com/p/google-code-prettify/\">Google's Prettify</a> - a really really really popular plain javascript syntax highlighter.</p>\n\n<p>It supports such things as <code>code</code> and <code>pre</code> blocks, able to use classnames like <code>language-javascript</code> to indicate we want it to highlight, as well as wordwrap. You can copy and paste code by selecting it normally instead of having to open a raw view like many others. It can be further customised by using the HTML5 data attribute <code>data-sh</code> or via specifying options at initialisation. A great stable choice which is updated regularly.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>If you are looking for syntax highlighting in an in-browser editor, try <a href=\"http://codemirror.net\" rel=\"nofollow\">CodeMirror</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I recently developed one called rainbow. </p>\n\n<p>The main design goal was to make the core library really small and make it really easy for developers to extend. </p>\n\n<p>See <a href=\"http://rainbowco.de\">http://rainbowco.de</a>.</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>What about <a href=\"http://prismjs.com/\">Prism</a> by Lea Verou. </p>\n\n<p>From her <a href=\"http://lea.verou.me/2012/07/introducing-prism-an-awesome-new-syntax-highlighter/\">blog post</a> announcement in June (2012):</p>\n\n<blockquote>\n  <ul>\n  <li>It\u2019s tiny. The core is only 1.5KB minified &amp; gzipped.</li>\n  <li>It\u2019s incredibly extensible. Not only it\u2019s easy to add new languages (that\u2019s a given with every syntax highlighter these days), but also to\n  extend existing ones.</li>\n  <li>It supports parallelism through Web Workers, for better performance in certain cases.</li>\n  <li>It doesn\u2019t force you to use any Prism-specific markup, not even a Prism-specific class name, only standard markup you should be using\n  anyway. So, you can just try it for a while, remove it if you don\u2019t\n  like it and leave no traces behind.</li>\n  </ul>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>What Javascript libraries can you recommend for syntax highlighting &lt;code&gt; blocks in HTML?</p>\n\n<p>(One suggestion per answer please).</p>\n",
            "last_activity_date": 1364920356,
            "question_id": 160694,
            "score": 85,
            "tags": [
                "javascript",
                "html",
                "syntax",
                "syntax-highlighting"
            ],
            "title": "Syntax highlighting code with Javascript"
        },
        {
            "answer_count": 27,
            "answers": [
                {
                    "body": "<p>Not sure why no-one's just answered this - seems like a perfectly reasonable technical question to ask whether it's possible.</p>\n\n<p>No, I don't think there's a cross-browser way to disable the backspace button. I know it's not enabled by default in FF these days though.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://forums.mozillazine.org/viewtopic.php?f=25&amp;t=432726\" rel=\"nofollow\">Here is a way to do it in Firefox and IE</a>. <strong>However I would highly insist that you don't do this. As the comments state it's generally not a good idea to override default behavior unless it makes sense.</strong> </p>\n\n<p>Lets say for example that you wanted to save a copy of this webpage for viewing offline, you pressed <kbd>Ctrl</kbd>+<kbd>S</kbd> and instead of your browser saving the web page, your browser just closes. How would that make you feel? Probably a little pissed.  </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Based on the comments it appears you want to stop people losing information in forms, if they press backspace to delete but the field is not focused.</p>\n\n<p>In which case, you want to look at the <strong>onunload</strong> event handler. Stack Overflow uses it - if you try to leave a page when you've started writing an answer, it pops up a warning.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This code solves the problem, at least in IE and Firefox (haven't tested any other, but I give it a reasonable chance of working if the problem even exists in other browsers).</p>\n\n<pre><code>// Prevent the backspace key from navigating back.\n$(document).unbind('keydown').bind('keydown', function (event) {\n    var doPrevent = false;\n    if (event.keyCode === 8) {\n        var d = event.srcElement || event.target;\n        if ((d.tagName.toUpperCase() === 'INPUT' &amp;&amp; \n             (\n                 d.type.toUpperCase() === 'TEXT' ||\n                 d.type.toUpperCase() === 'PASSWORD' || \n                 d.type.toUpperCase() === 'FILE' || \n                 d.type.toUpperCase() === 'EMAIL' || \n                 d.type.toUpperCase() === 'SEARCH' || \n                 d.type.toUpperCase() === 'DATE' )\n             ) || \n             d.tagName.toUpperCase() === 'TEXTAREA') {\n            doPrevent = d.readOnly || d.disabled;\n        }\n        else {\n            doPrevent = true;\n        }\n    }\n\n    if (doPrevent) {\n        event.preventDefault();\n    }\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 186
                },
                {
                    "body": "<p>This code solves the problem in all browsers:</p>\n\n<pre><code>onKeydown:function(e)\n{\n    if (e.keyCode == 8) \n    {\n      var d = e.srcElement || e.target;\n      if (!((d.tagName.toUpperCase() == 'BODY') || (d.tagName.toUpperCase() == 'HTML'))) \n      {\n         doPrevent = false;\n      }\n       else\n      {\n         doPrevent = true;\n      }\n    }\n    else\n    {\n       doPrevent = false;\n    }\n      if (doPrevent)\n      {\n         e.preventDefault();\n       }\n\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>    document.onkeydown = function (e) {    \n        e.stopPropagation();\n        if ((e.keyCode==8  ||  e.keyCode==13) &amp;&amp;\n            (e.target.tagName != \"TEXTAREA\") &amp;&amp; \n            (e.target.tagName != \"INPUT\")) { \n            return false;\n        }\n    };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>Another method using jquery</strong></p>\n\n<pre><code>    &lt;script type=\"text/javascript\"&gt;\n\n    //set this variable according to the need within the page\n    var BACKSPACE_NAV_DISABLED = true;\n\n    function fnPreventBackspace(event){if (BACKSPACE_NAV_DISABLED &amp;&amp; event.keyCode == 8) {return false;}}\n    function fnPreventBackspacePropagation(event){if(BACKSPACE_NAV_DISABLED &amp;&amp; event.keyCode == 8){event.stopPropagation();}return true;}\n\n    $(document).ready(function(){ \n        if(BACKSPACE_NAV_DISABLED){\n            //for IE use keydown, for Mozilla keypress  \n            //as described in scr: http://www.codeproject.com/KB/scripting/PreventDropdownBackSpace.aspx\n            $(document).keypress(fnPreventBackspace);\n            $(document).keydown(fnPreventBackspace);\n\n            //Allow Backspace is the following controls \n            var jCtrl = null;\n            jCtrl = $('input[type=\"text\"]');\n            jCtrl.keypress(fnPreventBackspacePropagation);\n            jCtrl.keydown(fnPreventBackspacePropagation);\n\n            jCtrl = $('input[type=\"password\"]');\n            jCtrl.keypress(fnPreventBackspacePropagation);\n            jCtrl.keydown(fnPreventBackspacePropagation);\n\n            jCtrl = $('textarea');\n            jCtrl.keypress(fnPreventBackspacePropagation);\n            jCtrl.keydown(fnPreventBackspacePropagation);\n\n            //disable backspace for readonly and disabled\n            jCtrl = $('input[type=\"text\"][readonly=\"readonly\"]')\n            jCtrl.keypress(fnPreventBackspace);\n            jCtrl.keydown(fnPreventBackspace);\n\n            jCtrl = $('input[type=\"text\"][disabled=\"disabled\"]')\n            jCtrl.keypress(fnPreventBackspace);\n            jCtrl.keydown(fnPreventBackspace);\n        }\n    }); \n\n    &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>Modification of erikkallen's Answer to address different input types</strong></p>\n\n<p>I've found that an enterprising user might press backspace on a checkbox or a radio button in a vain attempt to clear it and instead they would navigate backwards and lose all of their data.</p>\n\n<p>This change should address that issue.</p>\n\n<p><strong>New Edit to address content editable divs</strong></p>\n\n<pre><code>    //Prevents backspace except in the case of textareas and text inputs to prevent user navigation.\n    $(document).keydown(function (e) {\n        var preventKeyPress;\n        if (e.keyCode == 8) {\n            var d = e.srcElement || e.target;\n            switch (d.tagName.toUpperCase()) {\n                case 'TEXTAREA':\n                    preventKeyPress = d.readOnly || d.disabled;\n                    break;\n                case 'INPUT':\n                    preventKeyPress = d.readOnly || d.disabled ||\n                        (d.attributes[\"type\"] &amp;&amp; $.inArray(d.attributes[\"type\"].value.toLowerCase(), [\"radio\", \"checkbox\", \"submit\", \"button\"]) &gt;= 0);\n                    break;\n                case 'DIV':\n                    preventKeyPress = d.readOnly || d.disabled || !(d.attributes[\"contentEditable\"] &amp;&amp; d.attributes[\"contentEditable\"].value == \"true\");\n                    break;\n                default:\n                    preventKeyPress = true;\n                    break;\n            }\n        }\n        else\n            preventKeyPress = false;\n\n        if (preventKeyPress)\n            e.preventDefault();\n    });\n</code></pre>\n\n<hr>\n\n<p><strong>Example</strong><br>\nTo test make 2 files.</p>\n\n<p>starthere.htm - open this first so you have a place to go back to</p>\n\n<pre><code>&lt;a href=\"./test.htm\"&gt;Navigate to here to test&lt;/a&gt;\n</code></pre>\n\n<p>test.htm - This will navigate backwards when backspace is pressed while the checkbox or submit has focus (achieved by tabbing). Replace with my code to fix.</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n\n    $(document).keydown(function(e) {\n        var doPrevent;\n        if (e.keyCode == 8) {\n            var d = e.srcElement || e.target;\n            if (d.tagName.toUpperCase() == 'INPUT' || d.tagName.toUpperCase() == 'TEXTAREA') {\n                doPrevent = d.readOnly || d.disabled;\n            }\n            else\n                doPrevent = true;\n        }\n        else\n            doPrevent = false;\n\n        if (doPrevent)\n            e.preventDefault();\n    });\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;input type=\"text\" /&gt;\n&lt;input type=\"radio\" /&gt;\n&lt;input type=\"checkbox\" /&gt;\n&lt;input type=\"submit\" /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p><a href=\"http://www.sitepoint.com/forums/showthread.php?168890-disable-back-for-javascript\" rel=\"nofollow\">Sitepoint: Disable back for Javascript</a></p>\n\n<p><code>event.stopPropagation()</code> and <code>event.preventDefault()</code> do nothing in IE.  I had to send return <code>event.keyCode == 11</code> (I just picked something) instead of just saying <code>\"if not = 8, run the event\"</code> to make it work, though.  <code>event.returnValue = false</code> also works.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This code works on all browsers and swallows the backspace key when not on a form element, or if the form element is disabled|readOnly.  It is also efficient, which is important when it is executing on every key typed in.</p>\n\n<pre><code>$(function(){\n    /*\n     * this swallows backspace keys on any non-input element.\n     * stops backspace -&gt; back\n     */\n    var rx = /INPUT|SELECT|TEXTAREA/i;\n\n    $(document).bind(\"keydown keypress\", function(e){\n        if( e.which == 8 ){ // 8 == backspace\n            if(!rx.test(e.target.tagName) || e.target.disabled || e.target.readOnly ){\n                e.preventDefault();\n            }\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>Combining solutions given by \"thetoolman\" &amp;&amp; \"Biff MaGriff\"</p>\n\n<p>following code seems to work correctly in IE 8/Mozilla/Chrome</p>\n\n<pre><code>$(function () {\n    var rx = /INPUT|TEXTAREA/i;\n    var rxT = /RADIO|CHECKBOX|SUBMIT/i;\n\n    $(document).bind(\"keydown keypress\", function (e) {\n        var preventKeyPress;\n        if (e.keyCode == 8) {\n            var d = e.srcElement || e.target;\n            if (rx.test(e.target.tagName)) {\n                var preventPressBasedOnType = false;\n                if (d.attributes[\"type\"]) {\n                    preventPressBasedOnType = rxT.test(d.attributes[\"type\"].value);\n                }\n                preventKeyPress = d.readOnly || d.disabled || preventPressBasedOnType;\n            } else {preventKeyPress = true;}\n        } else { preventKeyPress = false; }\n\n        if (preventKeyPress) e.preventDefault();\n    });\n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><strong>Simplest way to prevent navigation on pressing backspace</strong></p>\n\n<pre><code>$(document).keydown(function () {\n    if (event.keyCode == 8) {\n        if (event.target.nodeName == 'BODY') {\n            event.preventDefault();\n        }\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This solution is similar to others that have been posted, but it uses a simple whitelist making it easily customizable to allow the backspace in specified elements just by setting the selector in the .is() function.</p>\n\n<p>I use it in this form to prevent the backspace on pages from navigating back:</p>\n\n<pre><code>$(document).on(\"keydown\", function (e) {\n    if (e.which === 8 &amp;&amp; !$(e.target).is(\"input:not([readonly]), textarea\")) {\n        e.preventDefault();\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I had some problems with the accepted solution and the Select2.js plugin; I was not able to delete characters in the editable box as the delete action was being prevented. This was my solution:</p>\n\n<p>//Prevent backwards navigation when trying to delete disabled text.\n$(document).unbind('keydown').bind('keydown', function (event) {</p>\n\n<pre><code>if (event.keyCode === 8) {\n\n    var doPrevent = false,\n        d = event.srcElement || event.target,\n        tagName = d.tagName.toUpperCase(),\n        type = (d.type ? d.type.toUpperCase() : \"\"),\n        isEditable = d.contentEditable,\n        isReadOnly = d.readOnly,\n        isDisabled = d.disabled;\n\n    if (( tagName === 'INPUT' &amp;&amp; (type === 'TEXT' || type === 'PASSWORD') ) ||  tagName === 'PASSWORD' || tagName === 'TEXTAREA') {\n\n        doPrevent =  isReadOnly || isDisabled;\n    }\n    else if(tagName === 'SPAN'){\n\n        doPrevent = !isEditable;\n    }\n    else {\n\n        doPrevent = true;\n    }\n}\n\nif (doPrevent) {\n    event.preventDefault();\n}\n</code></pre>\n\n<p>});</p>\n\n<p>Select2 creates a Span with an attribute of \"contentEditable\" which is set to true for the editable combo box in it. I added code to account for the spans tagName and the different attribute. This solved all my problems.</p>\n\n<p>Edit: If you are not using the Select2 combobox plugin for jquery, then this solution may not be needed by you, and the accepted solution might be better.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Using Dojo toolkit 1.7, this works in IE 8:</p>\n\n<pre><code>require([\"dojo/on\", \"dojo/keys\", \"dojo/domReady!\"],\nfunction(on, keys) {\n    on(document.body,\"keydown\",function(evt){if(evt.keyCode == keys.BACKSPACE)evt.preventDefault()});\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've been using this in my code for some time now.  I write online tests for students and ran into the problem when students were pressing backspace during their test and it would take them back to the login screen.  Frustrating!  It works on FF for sure.  </p>\n\n<pre><code>document.onkeypress = Backspace;\nfunction Backspace(event) {\n    if (event.keyCode == 8) {\n        if (document.activeElement.tagName == \"INPUT\") {\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Have you tried the very simple solution of just adding the following attribute to your read only text field:</p>\n\n<p>onkeydown=\"return false;\" </p>\n\n<p>This will keep the browser from going back in history when the Backspace key is pressed in a read only text field.  Maybe I am missing your true intent, but seems like this would be the simplest solution to your issue.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A much neater solution -</p>\n\n<pre><code>$(document).on('keydown', function (e) {\n    var key = e == null ? event.keyCode : e.keyCode;\n    if(key == 8 &amp;&amp; $(document.activeElement.is(':not(:input)')))   //select, textarea\n      e.preventDefault();\n});\n</code></pre>\n\n<p>Alternately, you could only check if</p>\n\n<pre><code>$(document.activeElement).is('body')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A more elegant/concise solution:</p>\n\n<pre><code>$(document).on('keydown',function(e){\n  var $target = $(e.target||e.srcElement);\n  if(e.keyCode == 8 &amp;&amp; !$target.is('input,[contenteditable=\"true\"],textarea'))\n  {\n    e.preventDefault();\n  }\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Pure javascript version, which works in all browsers:</p>\n\n<pre><code>document.onkeydown = function(e) {stopDefaultBackspaceBehaviour(e);}\ndocument.onkeypress = function(e) {stopDefaultBackspaceBehaviour(e);}\n\nfunction stopDefaultBackspaceBehaviour(event) {\n  var event = event || window.event;\n  if (event.keyCode == 8) {\n    var elements = \"HTML, BODY, TABLE, TBODY, TR, TD, DIV\";\n    var d = event.srcElement || event.target;\n    var regex = new RegExp(d.tagName.toUpperCase());\n    if (regex.test(elements)) {\n      event.preventDefault ? event.preventDefault() : event.returnValue = false;\n    }\n  }\n}\n</code></pre>\n\n<p>Of course you can use \"INPUT, TEXTAREA\" and use \"if (!regex.test(elements))\" then. The first worked fine for me.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Performance?</strong></p>\n\n<p>I was worried about performance and made a fiddle: <a href=\"http://jsfiddle.net/felvhage/k2rT6/9/embedded/result/\" rel=\"nofollow\">http://jsfiddle.net/felvhage/k2rT6/9/embedded/result/</a></p>\n\n<pre><code>var stresstest = function(e, method, index){...\n</code></pre>\n\n<p>I have analyzed the most promising methods i found in this thread. It turns out, they were all very fast and most probably do not cause a problem in terms of \"sluggishness\" when typing.\nThe slowest Method i looked at was about 125 ms for 10.000 Calls in IE8. Which is 0.0125ms per Stroke.</p>\n\n<p>I found the methods posted by Codenepal and Robin Maben to be fastest ~ 0.001ms (IE8) but beware of the different semantics.</p>\n\n<p>Perhaps this is a relief to someone introducing this kind of functionality to his code.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To elaborate slightly on @erikkallen's <a href=\"http://stackoverflow.com/a/2768256/225386\">excellent answer</a>, here is a function that allows all keyboard-based input types, including <a href=\"http://www.w3schools.com/tags/att_input_type.asp\" rel=\"nofollow\">those introduced in HTML5</a>:</p>\n\n<pre><code>$(document).unbind('keydown').bind('keydown', function (event) {\n    var doPrevent = false;\n    var INPUTTYPES = [\n        \"text\", \"password\", \"file\", \"date\", \"datetime\", \"datetime-local\",\n        \"month\", \"week\", \"time\", \"email\", \"number\", \"range\", \"search\", \"tel\",\n        \"url\"];\n    var TEXTRE = new RegExp(\"^\" + INPUTTYPES.join(\"|\") + \"$\", \"i\");\n    if (event.keyCode === 8) {\n        var d = event.srcElement || event.target;\n        if ((d.tagName.toUpperCase() === 'INPUT' &amp;&amp; d.type.match(TEXTRE)) ||\n             d.tagName.toUpperCase() === 'TEXTAREA') {\n            doPrevent = d.readOnly || d.disabled;\n        } else {\n            doPrevent = true;\n        }\n    }\n    if (doPrevent) {\n        event.preventDefault();\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The other answers here have established that this cannot be done without whitelisting elements in which Backspace is allowed. This solution is not ideal because the whitelist is not as straightforward as merely textareas and text/password inputs, but is repeatedly found to be incomplete and needing to be updated. </p>\n\n<p>However, since the purpose of suppressing the backspace functionality is merely to prevent users from accidentally losing data, the beforeunload solution is a good one because the modal popup is surprising--modal popups are bad when they are triggered as part of a standard workflow, because the user gets used to dismissing them without reading them, and they are annoying. In this case, the modal popup would only appear as an alternative to a rare and surprising action, and is therefore acceptable. </p>\n\n<p>The problem is that an onbeforeunload modal must not pop up whenever the user navigates away from the page (such as when clicking a link or submitting a form), and we don't want to start whitelisting or blacklisting specific onbeforeunload conditions. </p>\n\n<p>The ideal combination of tradeoffs for a generalized solution is as follows: keep track of whether backspace is pressed, and only pop up the onbeforeunload modal if it is. In other words:</p>\n\n<pre><code>function confirmBackspaceNavigations () {\n    // http://stackoverflow.com/a/22949859/2407309\n    var backspaceIsPressed = false\n    $(document).keydown(function(event){\n        if (event.which == 8) {\n            backspaceIsPressed = true\n        }\n    })\n    $(document).keyup(function(event){\n        if (event.which == 8) {\n            backspaceIsPressed = false\n        }\n    })\n    $(window).on('beforeunload', function(){\n        if (backspaceIsPressed) {\n            backspaceIsPressed = false\n            return \"Are you sure you want to leave this page?\"\n        }\n    })\n} // confirmBackspaceNavigations\n</code></pre>\n\n<p>This has been tested to work in IE7+, FireFox, Chrome, Safari, and Opera. Just drop this function into your global.js and call it from any page where you don't want users to accidentally lose their data.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I had a hard time finding a non-JQUERY answer. Thanks to Stas for putting me on the track.</p>\n\n<p><strong>Chrome:</strong>  If you don't need cross browser support, you can just use a blacklist, rather than whitelisting. This pure JS version works in Chrome, but not in IE. Not sure about FF and Safari. </p>\n\n<p>In Chrome (ver. 36, mid 2014), keypresses not on an input or contenteditable element seem to be targeted to <code>&lt;BODY&gt;</code>. This makes it possible use a blacklist, which I prefer to whitelisting. IE uses the last click target - so it might be a div or anything else. That makes this useless in IE.</p>\n\n<pre><code>window.onkeydown = function(event) {\n    if (event.keyCode == 8) {\n    //alert(event.target.tagName); //if you want to see how chrome handles keypresses not on an editable element\n        if (event.target.tagName == 'BODY') {\n            //alert(\"Prevented Navigation\");\n            event.preventDefault();\n        }\n    }\n}  \n</code></pre>\n\n<p><strong>Cross Browser:</strong>  For pure javascript, I found Stas' answer to be the best. Adding one more condition check for contenteditable made it work for me*:</p>\n\n<pre><code>document.onkeydown = function(e) {stopDefaultBackspaceBehaviour(e);}\ndocument.onkeypress = function(e) {stopDefaultBackspaceBehaviour(e);}\n\nfunction stopDefaultBackspaceBehaviour(event) {\n    var event = event || window.event;\n    if (event.keyCode == 8) {\n        var elements = \"HTML, BODY, TABLE, TBODY, TR, TD, DIV\";\n        var d = event.srcElement || event.target;\n        var regex = new RegExp(d.tagName.toUpperCase());\n        if (d.contentEditable != 'true') { //it's not REALLY true, checking the boolean value (!== true) always passes, so we can use != 'true' rather than !== true/\n            if (regex.test(elements)) {\n                event.preventDefault ? event.preventDefault() : event.returnValue = false;\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>*Note that IEs have a \"feature\" that makes <a href=\"http://msdn.microsoft.com/en-us/library/ms537837%28v=VS.85%29.aspx\" rel=\"nofollow\"> table-related elements uneditable</a>. If you click one of those and THEN press backspace, it WILL navigate back. If you don't have editable <code>&lt;TD&gt;</code>s, this is not an issue.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Modified erikkallen answer:</p>\n\n<pre><code>$(document).unbind('keydown').bind('keydown', function (event) {\n\n    var doPrevent = false, elem;\n\n    if (event.keyCode === 8) {\n        elem = event.srcElement || event.target;\n        if( $(elem).is(':input') ) {\n            doPrevent = elem.readOnly || elem.disabled;\n        } else {\n            doPrevent = true;\n        }\n    }\n\n    if (doPrevent) {\n        event.preventDefault();\n        return false;\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Worked for me </p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n\n if (typeof window.event != 'undefined')\n    document.onkeydown = function()\n    {\n        if (event.srcElement.tagName.toUpperCase() != 'INPUT')\n            return (event.keyCode != 8);\n    }\nelse\n    document.onkeypress = function(e)\n    {\n        if (e.target.nodeName.toUpperCase() != 'INPUT')\n            return (e.keyCode != 8);\n    }\n\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>JavaScript - jQuery way:</strong></p>\n\n<pre><code>$(document).on(\"keydown\", function (e) {\n    if (e.which === 8 &amp;&amp; !$(e.target).is(\"input, textarea\")) {\n        e.preventDefault();\n    }\n});\n</code></pre>\n\n<p><strong>Javascript - the native way, that works for me:</strong></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n//on backspace down + optional callback\nfunction onBackspace(e, callback){\n    var key;\n    if(typeof e.keyIdentifier !== \"undefined\"){\n        key = e.keyIdentifier;\n\n    }else if(typeof e.keyCode !== \"undefined\"){\n        key = e.keyCode;\n    }\n    if (key === 'U+0008' || \n        key === 'Backspace' || \n        key === 8) {\n                    if(typeof callback === \"function\"){\n                callback();\n            }\n            return true;\n        }\n    return false;\n}\n\n//event listener\nwindow.addEventListener('keydown', function (e) {\n\n    switch(e.target.tagName.toLowerCase()){\n        case \"input\":\n        case \"textarea\":\n        break;\n        case \"body\":\n            onBackspace(e,function(){\n                e.preventDefault();\n            });\n\n        break;\n    }\n}, true);\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>On IE I can do this with the (terribly non-standard, but working) jQuery</p>\n\n<pre><code>if ($.browser.msie)\n    $(document).keydown(function(e) { if (e.keyCode == 8) window.event.keyCode = 0;});\n</code></pre>\n\n<p>But is it possible to do in a way which works on Firefox, or in a cross-browser way for a bonus?</p>\n\n<p>For the record:</p>\n\n<pre><code>$(document).keydown(function(e) { if (e.keyCode == 8) e.stopPropagation(); });\n</code></pre>\n\n<p>does nothing.</p>\n\n<pre><code>$(document).keydown(function(e) { if (e.keyCode == 8) e.preventDefault(); });\n</code></pre>\n\n<p>solves the problem, but renders the backspace key unusable on the page, which is even worse than the original behaviour.</p>\n\n<p>EDIT:\nThe reason I do this is that I'm not creating a simple web page but a large application. It is incredibly annoying to lose 10 minutes of work just because you pressed backspace in the wrong place. The ratio of preventing mistakes vs. annoying users should be way above 1000/1 by preventing the backspace key from navigating back.</p>\n\n<p>EDIT2: I'm <strong>not</strong> trying to prevent history navigation, just accidents.</p>\n\n<p>EDIT3: @brentonstrines comment (moved here since the question is so popular): This is a long-term 'fix', but you could throw your support behind the <a href=\"http://code.google.com/p/chromium/issues/detail?id=144832\">Chromium bug to change this behavior in webkit</a></p>\n",
            "last_activity_date": 1423590291,
            "question_id": 1495219,
            "score": 142,
            "tags": [
                "javascript",
                "firefox",
                "cross-browser",
                "internet-explorer"
            ],
            "title": "How can I prevent the backspace key from navigating back?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators/Special/void\"><code>void</code></a> is a reserved Javascript keyword. It evaluates the expression and always returns <code>undefined</code>.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<h2>What does <code>void 0</code> mean?</h2>\n\n<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators/Special_Operators/void_Operator\"><code>void</code><sup>[MDN]</sup></a> is a prefix keyword that takes one argument and always returns <code>undefined</code>.</p>\n\n<p><strong>Examples</strong></p>\n\n<pre><code>void 0\nvoid (0)\nvoid \"hello\"\nvoid (new Date())\n//all will return undefined\n</code></pre>\n\n<h2>What's the point of that?</h2>\n\n<p>It seems pretty useless, doesn't it? If it always returns <code>undefined</code>, what's wrong with just using <code>undefined</code> itself?</p>\n\n<p>In a perfect world we would be able to safely just use <code>undefined</code>: it's much simpler and easier to understand than <code>void 0</code>. But in case you've never noticed before, <em>this isn't a perfect world</em>, especially when it comes to Javascript. </p>\n\n<p>The problem with using <code>undefined</code> is that <code>undefined</code> is not a reserved word (<a href=\"http://wtfjs.com/2010/02/15/undefined-is-mutable\">and in some Javascript environments is actually a global variable <sup>[wtfjs]</sup></a>). That is, <code>undefined</code> is a permissible variable name, so you can assign a new value to it at your own caprice.</p>\n\n<pre><code>alert(undefined); //alerts \"undefined\"\nvar undefined = \"new value\";\nalert(undefined) //alerts \"new value\"\n</code></pre>\n\n<p>Note: This is no longer the case in any of the modern browsers, which do not allow <code>undefined</code> to be overwritten. However, this information is still useful for backwards-compatibility purposes.</p>\n\n<p>Because of this, you cannot safely rely on <code>undefined</code> having the value that you expect.</p>\n\n<p><code>void</code>, on the other hand, cannot be overidden. <code>void 0</code> will <em>always</em> return <code>undefined</code>. <code>undefined</code>, on the other hand, can be whatever Mr. Javascript decides he wants it to be.</p>\n\n<h2>Why <code>void 0</code>, specifically?</h2>\n\n<p>Why should we use <code>void 0</code>? What's so special about <code>0</code>? Couldn't we just as easily use <code>1</code>, or <code>42</code>, or <code>1000000</code> or <code>\"Hello, world!\"</code>?</p>\n\n<p>And the answer is, yes, we could, and it would work just as well. The only benefit of passing in <code>0</code> instead of some other argument is that <code>0</code> is short and idiomatic.</p>\n",
                    "is_accepted": true,
                    "score": 321
                },
                {
                    "body": "<p><code>void 0</code> returns undefined and can not be overwritten while <code>undefined</code> can be overwritten. </p>\n\n<pre><code>var undefined = \"HAHA\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/1291942/what-does-javascriptvoid0-mean\">What does &ldquo;javascript:void(0)&rdquo; mean?</a>  </p>\n</blockquote>\n\n\n\n<p>Reading through the Backbone.js source code:</p>\n\n<pre><code>validObj[attr] = void 0;\n</code></pre>\n\n<p>What is <code>void 0</code>? What is the purpose of using it here?</p>\n",
            "last_activity_date": 1423151548,
            "question_id": 7452341,
            "score": 159,
            "tags": [
                "javascript",
                "backbone.js"
            ],
            "title": "What does `void 0` mean?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<pre><code>function clearSelection() {\n    if(document.selection &amp;&amp; document.selection.empty) {\n        document.selection.empty();\n    } else if(window.getSelection) {\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n    }\n}\n</code></pre>\n\n<p>You can also apply these styles to the span for all non-IE browsers and IE10:</p>\n\n<pre><code>span.no_selection {\n    -webkit-user-select: none; /* webkit (safari, chrome) browsers */\n    -moz-user-select: none; /* mozilla browsers */\n    -khtml-user-select: none; /* webkit (konqueror) browsers */\n    -ms-user-select: none; /* IE10+ */\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 158
                },
                {
                    "body": "<p>or, on mozilla: </p>\n\n<pre><code>document.body.onselectstart = function() { return false; } // Or any html object\n</code></pre>\n\n<p>On IE,</p>\n\n<pre><code>document.body.onmousedown = function() { return false; } // valid for any html object as well\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>A simple Javascript function that makes the content inside a page-element unselectable:</p>\n\n<pre><code>function makeUnselectable(elem) {\n  if (typeof(elem) == 'string')\n    elem = document.getElementById(elem);\n  if (elem) {\n    elem.onselectstart = function() { return false; };\n    elem.style.MozUserSelect = \"none\";\n    elem.style.KhtmlUserSelect = \"none\";\n    elem.unselectable = \"on\";\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Using jQuery</p>\n\n<pre><code>jQuery(element).mousedown(function(e){ e.preventDefault(); })\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>To prevent IE 8 CTRL and SHIFT click text selection on individual element</p>\n\n<pre><code>var obj = document.createElement(\"DIV\");\nobj.onselectstart = function(){\n  return false;\n}\n</code></pre>\n\n<p>To prevent text selection on document</p>\n\n<pre><code>window.onload = function(){\n  document.onselectstart = function(){\n    return false;\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm handling the dblclick event on a span in my web app. A side-effect is that the double click selects text on the page. How can I prevent this selection from happening?</p>\n",
            "last_activity_date": 1416399160,
            "question_id": 880512,
            "score": 113,
            "tags": [
                "javascript",
                "selection-object"
            ],
            "title": "Prevent text selection after double click"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Yes, use <a href=\"http://api.jquery.com/jQuery.getScript\">getScript</a> instead of document.write - it will even allow for a callback once the file loads.</p>\n\n<p>You might want to check if TinyMCE is defined, though, before including it (for subsequent calls to 'Add Comment') so the code might look something like this:</p>\n\n<pre><code>$('#add_comment').click(function() {\n    if(typeof TinyMCE == \"undefined\") {\n        $.getScript('tinymce.js', function() {\n            TinyMCE.init();\n        });\n    }\n});\n</code></pre>\n\n<p>Assuming you only have to call <code>init</code> on it once, that is. If not, you can figure it out from here :)</p>\n",
                    "is_accepted": true,
                    "score": 173
                },
                {
                    "body": "<p>I realize I am a little late here, (5 years or so), but I think there is a better answer than the accepted one as follows:</p>\n\n<pre><code>$(\"#addComment\").click(function() {\n    if(typeof TinyMCE === \"undefined\") {\n        $.ajax({\n            url: \"tinymce.js\",\n            dataType: \"script\",\n            cache: true,\n            success: function() {\n                TinyMCE.init();\n            }\n        });\n    }\n});\n</code></pre>\n\n<p>The <a href=\"http://api.jquery.com/jQuery.getScript/\" rel=\"nofollow\"><code>getScript()</code></a> function actually <strong><em>prevents browser caching</em></strong>.  If you run a trace you will see the script is loaded with a URL that includes a timestamp parameter:</p>\n\n<pre><code>http://www.yoursite.com/js/tinymce.js?_=1399055841840\n</code></pre>\n\n<p>If a user clicks the <code>#addComment</code> link multiple times, <code>tinymce.js</code> will be re-loaded from a differently timestampped URL.  This defeats the purpose of browser caching.</p>\n\n<p>===</p>\n\n<p>Alternatively, in the <a href=\"http://api.jquery.com/jQuery.getScript/\" rel=\"nofollow\"><code>getScript()</code></a> documentation there is a some sample code that demonstrates how to enable caching by creating a custom <code>cachedScript()</code> function as follows:</p>\n\n<pre><code>jQuery.cachedScript = function( url, options ) {\n\n    // Allow user to set any option except for dataType, cache, and url\n    options = $.extend( options || {}, {\n        dataType: \"script\",\n        cache: true,\n        url: url\n    });\n\n    // Use $.ajax() since it is more flexible than $.getScript\n    // Return the jqXHR object so we can chain callbacks\n    return jQuery.ajax( options );\n};\n\n// Usage\n$.cachedScript( \"ajax/test.js\" ).done(function( script, textStatus ) {\n    console.log( textStatus );\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I have a very large javascript file I would like to load only if the user clicks on a certain button.  I am using jQuery as my framework.  Is there a built-in method or plugin that will help me do this?  </p>\n\n<p>Some more detail:\nI have a \"Add Comment\" button that should load the TinyMCE javascript file (I've boiled all the TinyMCE stuff down to a single JS file), then call tinyMCE.init(...).</p>\n\n<p>I don't want to load this at the initial page load because not everyone will click \"Add Comment\".</p>\n\n<p>I understand I can just do:</p>\n\n<pre><code>$(\"#addComment\").click(function(e) { document.write(\"&lt;script...\") });\n</code></pre>\n\n<p>but is there a better/encapsulated way?</p>\n",
            "last_activity_date": 1399059363,
            "question_id": 912711,
            "score": 95,
            "tags": [
                "javascript",
                "jquery",
                "jquery-plugins",
                "tinymce",
                "lazy-loading"
            ],
            "title": "JQuery to load Javascript file dynamically"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>You can wrap the user's code in a function that redefines forbidden objects as parameters -- these would then be <code>undefined</code> when called:</p>\n\n<pre><code>(function (alert) {\n\nalert (\"uh oh!\"); // User code\n\n}) ();\n</code></pre>\n\n<p>Of course, clever attackers can get around this by inspecting the Javascript DOM and finding a non-overridden object that contains a reference to the window.</p>\n\n<p><hr /></p>\n\n<p>Another idea is scanning the user's code using a tool like <a href=\"http://www.jslint.com/\" rel=\"nofollow\">jslint</a>. Make sure it's set to have no preset variables (or: only variables you want), and then if any globals are set or accessed do not let the user's script be used. Again, might be vulnerable to walking the DOM -- objects that the user can construct using literals might have implicit references to the window object that could be accessed to escape the sandbox.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Where is this user JavaScript coming from?</p>\n\n<p>There is not much you can do about a user embedding code into your page and then calling it from their browser (see Greasemonkey, <a href=\"http://www.greasespot.net/\" rel=\"nofollow\">http://www.greasespot.net/</a>). It's just something browsers do.</p>\n\n<p>However, if you store the script in a database, then retrieve it and eval() it, then you can clean up the script before it is run.</p>\n\n<p>Examples of code that removes all window. and document. references:</p>\n\n<pre><code> eval(\n  unsafeUserScript\n    .replace(/\\/\\/.+\\n|\\/\\*.*\\*\\/, '') // Clear all comments\n    .replace(/\\s(window|document)\\s*[\\;\\)\\.]/, '') // removes window. or window; or window)\n )\n</code></pre>\n\n<p>This tries to prevent the following from being executed (not tested):</p>\n\n<pre><code>window.location = 'http://mydomain.com';\nvar w = window  ;\n</code></pre>\n\n<p>There are a lot of limitations you would have to apply to the unsafe user script. Unfortunately, there is no 'sandbox container' available for JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>All the browser vendors and the HTML5 specification are working towards an actual sandbox property to allow sandboxed iframes -- but it's still limited to iframe granularity.</p>\n\n<p>In general, no degree of regular expressions, etc. can safely sanitise arbitrary user provided JavaScript as it degenerates to the halting problem :-/</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://code.google.com/p/google-caja/\">Google Caja</a> is a source-to-source translator that \"allows you to put untrusted third-party HTML and JavaScript inline in your page and still be secure.\"</p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>1) Suppose you have a code to execute:</p>\n\n<pre><code>var sCode = \"alert(document)\";\n</code></pre>\n\n<p>Now, suppose you want to execute it in a sandbox:</p>\n\n<pre><code>new Function(\"window\", \"with(window){\" + sCode + \"}\")({});\n</code></pre>\n\n<p>These two lines when executed will fail, because \"alert\" function is not available from the \"sandbox\"</p>\n\n<p>2) And now you want to expose a member of window object with your functionality:</p>\n\n<pre><code>new Function(\"window\", \"with(window){\" + sCode + \"}\")({\n    'alert':function(sString){document.title = sString}\n});\n</code></pre>\n\n<hr>\n\n<p>Indeed you can add quotes escaping and make other polishing, but I guess the idea is clear. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Have a look at <a href=\"http://www.adsafe.org/\">Douglas Crockford's ADsafe</a>:</p>\n\n<blockquote>\n  <p>ADsafe makes it safe to put guest code (such as third party scripted advertising or widgets) on any web page. ADsafe defines a subset of JavaScript that is powerful enough to allow guest code to perform valuable interactions, while at the same time preventing malicious or accidental damage or intrusion. The ADsafe subset can be verified mechanically by tools like JSLint so that no human inspection is necessary to review guest code for safety. The ADsafe  subset also enforces good coding practices, increasing the likelihood that guest code will run correctly. </p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>I've been working on a simplistic js sandbox for letting users build applets for my site. Although I still face some challenges with allowing DOM access (parentNode just won't let me keep things secure =/), my approach was just to redefine the window object with some of its useful/harmless members, and then eval() the user code with this redefined window as the default scope.</p>\n\n<p>My \"core\" code goes like this... (I'm not showing it entirely ;)</p>\n\n<pre><code>function Sandbox(parent){\n\n\tthis.scope = {\n\t\twindow: {\n\t\t\talert: function(str){\n\t\t\t\talert(\"Overriden Alert: \" + str);\n\t\t\t},\n\t\t\tprompt: function(message, defaultValue){\n\t\t\t\treturn prompt(\"Overriden Prompt:\" + message, defaultValue);\n\t\t\t},\n\t\t\tdocument: null,\n\t\t\t.\n\t\t\t.\n\t\t\t.\n\t\t\t.\n\t\t}\n\t};\n\n\tthis.execute = function(codestring){\n\n\t\t// here some code sanitizing, please\n\n\t\twith (this.scope) {\n\t\t\twith (window) {\n\t\t\t\teval(codestring);\n\t\t\t}\n\t\t}\n\t};\n}\n</code></pre>\n\n<p>So, I can instance a Sandbox and use its execute() to get code running. Also, all new declared variables within eval'd code will ultimately bound to the execute() scope, so there will not be clashing names or messing with existing code.</p>\n\n<p>Although global objects will still be accesible, those which should remain unknown to the sandboxed code must be defined as proxies in the Sandbox::scope object.</p>\n\n<p>Hope this works for you.</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>I created a sandboxing library called <a href=\"https://github.com/eligrey/jsandbox\">jsandbox</a> that uses web workers to sandbox evaluated code. It also has an input method for explicitly giving sandboxed code data it wouldn't otherwise be able to get.</p>\n\n<p>The following is an example of the API:</p>\n\n<pre><code>jsandbox\n    .eval({\n      code    : \"x=1;Math.round(Math.pow(input, ++x))\",\n      input   : 36.565010597564445,\n      callback: function(n) {\n          console.log(\"number: \", n); // number: 1337\n      }\n  }).eval({\n      code   : \"][];.]\\\\ (*# ($(! ~\",\n      onerror: function(ex) {\n          console.log(\"syntax error: \", ex); // syntax error: [error object]\n      }\n  }).eval({\n      code    : '\"foo\"+input',\n      input   : \"bar\",\n      callback: function(str) {\n          console.log(\"string: \", str); // string: foobar\n      }\n  }).eval({\n      code    : \"({q:1, w:2})\",\n      callback: function(obj) {\n          console.log(\"object: \", obj); // object: object q=1 w=2\n      }\n  }).eval({\n      code    : \"[1, 2, 3].concat(input)\",\n      input   : [4, 5, 6],\n      callback: function(arr) {\n          console.log(\"array: \", arr); // array: [1, 2, 3, 4, 5, 6]\n      }\n  }).eval({\n      code    : \"function x(z){this.y=z;};new x(input)\",\n      input   : 4,\n      callback: function(x) {\n          console.log(\"new x: \", x); // new x: object y=4\n      }\n  });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>An ugly way but maybe this works for you , I took all the globals and redefined them in the sandbox scope , as well I added the strict mode so they can't get the global object using an anonymous function.</p>\n\n<pre><code>function construct(constructor, args) {\n  function F() {\n      return constructor.apply(this, args);\n  }\n  F.prototype = constructor.prototype;\n  return new F();\n}\n// Sanboxer \nfunction sandboxcode(string, inject) {\n  \"use strict\";\n  var globals = [];\n  for (var i in window) {\n    // &lt;--REMOVE THIS CONDITION\n    if (i != \"console\")\n    // REMOVE THIS CONDITION --&gt;\n    globals.push(i);\n  }\n  globals.push('\"use strict\";\\n'+string);\n  return construct(Function, globals).apply(inject ? inject : {});\n}\nsandboxcode('console.log( this, window, top , self, parent, this[\"jQuery\"], (function(){return this;}()));'); \n// =&gt; Object {} undefined undefined undefined undefined undefined undefined \nconsole.log(\"return of this\", sandboxcode('return this;', {window:\"sanboxed code\"})); \n// =&gt; Object {window: \"sanboxed code\"}\n</code></pre>\n\n<p><a href=\"https://gist.github.com/alejandrolechuga/9381781\" rel=\"nofollow\">https://gist.github.com/alejandrolechuga/9381781</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I think that <a href=\"https://github.com/jterrace/js.js\" rel=\"nofollow\">js.js</a> is worth mentioning here. It's a JavaScript interpreter written in JavaScript.</p>\n\n<p>It's about 200 times slower than native JS, but its nature makes it a perfect sandbox environment. Another drawback is its size \u2013 almost 600 kb, which may be acceptable for desktops in some cases, but not for mobile devices.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en/docs/Web/Guide/Performance/Using_web_workers\" rel=\"nofollow\">Web workers</a> provide an easy, perfect sandbox. (Done right, and depending on how smart the browser is, they aren\u2019t even vulnerable to some of the DoS-type problems mentioned in the comments on the top answer.)</p>\n\n<p>An implementation using promises:</p>\n\n<pre><code>function safeEval(untrustedCode) {\n    return new Promise(function (resolve, reject) {\n        var worker = new Worker('eval.js');\n\n        worker.onmessage = function (e) {\n            worker.terminate();\n            resolve(e.data);\n        };\n\n        worker.onerror = function (e) {\n            reject(e.message);\n        };\n\n        worker.postMessage(untrustedCode);\n\n        setTimeout(function () {\n            worker.terminate();\n            reject('The worker timed out.');\n        }, 1000);\n    });\n}\n</code></pre>\n\n<p><code>eval.js</code>:</p>\n\n<pre><code>onmessage = function (e) {\n    postMessage(eval(e.data));\n};\n</code></pre>\n\n<p>No UI access from workers (except for <code>console</code> in some browsers), can be terminated separately, can\u2019t tie up the UI or the running script, are standard, and are as safe as the browser\u2019s own JavaScript implementation.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>As mentioned in other responces, it's enough to jail the code in sandboxed iframe (without sending it to the server-side) and communicate with messages. I would suggest to take a look at a <a href=\"https://github.com/asvd/jailed\" rel=\"nofollow\">small library</a> I created mostly because of the need to providing some API to the untrusted code, just like as described in the question: there's an opportunity to export the particular set of functions right into the sandbox where the untrusted code runs. And there's also a demo which executes the code submitted by a user in a sandbox:</p>\n\n<p><a href=\"http://asvd.github.io/jailed/demos/web/console/\" rel=\"nofollow\">http://asvd.github.io/jailed/demos/web/console/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm wondering if it's possible to sandbox JavaScript running in the browser to prevent access to features that are normally available to JavaScript code running in an HTML page.</p>\n\n<p>For example, let's say I want to provide a JavaScript API for end users to let them define event handlers to be run when \"interesting events\" happen, but I don't want those users to access the properties and functions of the <code>window</code> object. Am I able to do this? </p>\n\n<p>In the simplest case, let's say I want to prevent users calling <code>alert</code>. A couple of approaches I can think of are:</p>\n\n<ul>\n<li>Redefine <code>window.alert</code> globally. I don't think this would be a valid approach because other code running in the page (i.e. stuff not authored by users in their event handlers) might want to use <code>alert</code>.</li>\n<li>Send the event handler code to the server to process. I'm not sure that sending the code to the server to process is the right approach because the event handlers need to run in the context of the page. </li>\n</ul>\n\n<p>Perhaps a solution where the server processes the user defined function and then generates a callback to be executed on the client would work? Even if that approach works are there better ways to solve this problem?</p>\n",
            "last_activity_date": 1421665378,
            "question_id": 195149,
            "score": 75,
            "tags": [
                "javascript",
                "browser",
                "sandbox"
            ],
            "title": "Is It Possible to Sandbox JavaScript Running In the Browser?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>If I package my simple ample code I get a ~80MB gzip archive (original Code ~1kB). Within the package - among others - you can find my source html and js files.\nThere are also a lot of libraries (ssl for example) shipped with the package (because you can have low-level access to a lot of things within this framework).</p>\n\n<p>I think that they take your code and wrap around some kind of interpreter software and libraries.\nIn my case it would be like if I pack my html and js code next to a tiny browser that only displays my site.</p>\n\n<p>How ever, as long as the code works on every supported system in the same way its a nice thing.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Titanium takes your Javascript code, analyzes and preprocesses it and then pre-compiles it into a set of symbols that are resolved based on your applications uses of Titanium APIs.  From this symbol hierarchy we can build a symbol dependency matrix that maps to the underlying Titanium library symbols to understand which APIs (and related dependencies, frameworks, etc) specifically your app needs.  I'm using the word symbol in a semi-generic way since it's a little different based on the language.  In iPhone, the symbol maps to a true C symbol that ultimately maps to a compiled .o file that has been compiled for ARM/i386 architectures.  For Java, well, it's more or less a .class file, etc.  Once the front end can understand your dependency matrix, we then invoke the SDK compiler (i.e. GCC for iPhone, Java for Android) to then compile your application into the final native binary.  </p>\n\n<p>So, a simple way to think about it is that your JS code is compiled almost one to one into the representative symbols in nativeland.  There's still an interpreter running in interpreted mode otherwise things like dynamic code wouldn't work. However, its much faster, much more compact and it's about as close to pure native mapping as you can get.  </p>\n\n<p>We're obviously still got plenty of room to improve this and working on that.  So far in our latest 1.0 testing, it's almost indistinguishable from the same objective-c direct code (since in most cases it's exactly mapped to that).  From a CompSci standpoint, we can now however start to optimize things that a human really couldn't easily do that - much like the GCC compiler already does today.</p>\n",
                    "is_accepted": true,
                    "score": 131
                },
                {
                    "body": "<p>Like jhaynie said, the application is compiled into native code, but there is still an interpreter in-place to run some javascript, which allows the application to be very dynamic.</p>\n\n<p><a href=\"http://www.itwriting.com/blog/4198-is-appcelerator-titanium-native-and-what-does-native-mean-anyway.html/comment-page-1#comment-535303\" rel=\"nofollow\">appcelerator titanium</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm working on building an iPhone app with Titanium Mobile 1.0 and I see that it compiles down to a native iPhone binary.  How does this work?  Seems like it would take a lot of heavy lifting to analyze the JavaScript code and do a direct translation into Objective-C without having a superset language like 280 North's Objective-J and Cappuccino.</p>\n",
            "last_activity_date": 1371712270,
            "question_id": 2444001,
            "score": 66,
            "tags": [
                "javascript",
                "objective-c",
                "titanium"
            ],
            "title": "How Does Appcelerator Titanium Mobile Work?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<pre><code>var array = string.split(',');\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/split\">MDN reference</a>, mostly helpful for the possibly unexpected behavior of the <code>limit</code> parameter. (Hint: <code>\"a,b,c\".split(\",\", 2)</code> comes out to <code>[\"a\", \"b\"]</code>, not <code>[\"a\", \"b,c\"]</code>.)</p>\n",
                    "is_accepted": true,
                    "score": 394
                },
                {
                    "body": "<p>The split() method is used to split a string into an array of substrings, and returns the new array.</p>\n\n<pre><code>var array = string.split(',');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>In javascript and PHP you have these two very powerful functions:</p>\n\n<blockquote>\n  <p>JS: String.<strong>split</strong>(String) Array.<strong>join</strong>(String);</p>\n  \n  <p>PHP: <strong>explode</strong>(string,string) <strong>implode</strong>(string,array)</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Watch out if you are aiming at integers, like 1,2,3,4,5. If you intend to use the elements of your array as integers and not as strings after splitting the string, consider converting them into such.</p>\n\n<pre><code>var str = \"1,2,3,4,5,6\";\nvar temp = new Array();\n// this will return an array with strings \"1\", \"2\", etc.\ntemp = str.split(\",\");\n</code></pre>\n\n<p>adding a loop like this</p>\n\n<pre><code>for (a in temp ) {\n    temp[a] = parseInt(temp[a], 10); // Explicitly include base as per \u00c1lvaro's comment\n}\n</code></pre>\n\n<p>will return an array containing integers, and not strings.</p>\n",
                    "is_accepted": false,
                    "score": 54
                },
                {
                    "body": "<p>Hmm split is dangerous imho as a string can always contain a comma, observe the following: </p>\n\n<pre><code>var myArr = \"a,b,c,d,e,f,g,','\";\nresult = myArr.split(',');\n</code></pre>\n\n<p>So how would you interperate that? and what do you WANT the result to be? an array with: </p>\n\n<pre><code>['a', 'b', 'c', 'd', 'e', 'f', 'g', '\\'', '\\''] or \n['a', 'b', 'c', 'd', 'e', 'f', 'g', ',']\n</code></pre>\n\n<p>even if you escape the comma you'd have a problem.</p>\n\n<p>Quickly fiddled this together: </p>\n\n<pre><code>(function($) {\n    $.extend({\n        splitAttrString: function(theStr) {\n            var attrs = [];\n\n            var RefString = function(s) {\n                this.value = s;\n            };\n            RefString.prototype.toString = function() {\n                return this.value;\n            };\n            RefString.prototype.charAt = String.prototype.charAt;\n            var data = new RefString(theStr);\n\n            var getBlock = function(endChr, restString) {\n                var block = '';\n                var currChr = '';\n                while ((currChr != endChr) &amp;&amp; (restString.value !== '')) {\n                    if (/'|\"/.test(currChr)) {\n                        block = $.trim(block) + getBlock(currChr, restString);\n                    }\n                    else if (/\\{/.test(currChr)) {\n                        block = $.trim(block) + getBlock('}', restString);\n                    }\n                    else if (/\\[/.test(currChr)) {\n                        block = $.trim(block) + getBlock(']', restString);\n                    }\n                    else {\n                        block += currChr;\n                    }\n                    currChr = restString.charAt(0);\n                    restString.value = restString.value.slice(1);\n                }\n                return $.trim(block);\n            };\n\n            do {\n                var attr = getBlock(',', data);\n                attrs.push(attr);\n            }\n            while (data.value !== '');\n            return attrs;\n        }\n    });\n})(jQuery);\n</code></pre>\n\n<p>Feel free to use / edit it :) </p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Pass you Comma Separated string into this function and it will return array , and if not \ncomma separated string then will return null.</p>\n\n<pre><code> function SplitTheString(CommaSepStr) {\n       var ResultArray = null; \n\n        if (CommaSepStr!= null) {\n            var SplitChars = ',';\n            if (CommaSepStr.indexOf(SplitChars) &gt;= 0) {\n                ResultArray = CommaSepStr.split(SplitChars);\n\n            }\n        }\n       return ResultArray ;\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I know this question has been answered for quite a while, but I thought that my contribution would be beneficial to others researching this topic...</p>\n\n<p>Here is a function that will convert a string to an array, even if there is only one item in the list (no separator character):</p>\n\n<pre><code>function listToAray(fullString, separator) {\n  var fullArray = [];\n\n  if (fullString !== undefined) {\n    if (fullString.indexOf(separator) == -1) {\n      fullAray.push(fullString);\n    } else {\n      fullArray = fullString.split(separator);\n    }\n  }\n\n  return fullArray;\n}\n</code></pre>\n\n<p>Use it like this:</p>\n\n<pre><code>var myString = 'alpha,bravo,charlie,delta';\nvar myArray = listToArray(myString, ',');\nmyArray[2]; // charlie\n\nvar yourString = 'echo';\nvar yourArray = listToArray(yourString, ',');\nyourArray[0]; // echo\n</code></pre>\n\n<p>I created this function because <code>split</code> throws out an error if there is no separator character in the string (only one item)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>note that:</p>\n\n<pre><code> var a = \"\";\nvar x = new Array();\nx = a.split(\",\");\nalert(x.length);\n</code></pre>\n\n<p>will alert 1</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a comma separated string that I want to convert into an array so I can loop through it.</p>\n\n<p>Is there anything built-in to do this?</p>\n\n<p>For e.g. I have this string</p>\n\n<pre><code>var str = \"January,February,March,April,May,June,July,August,September,October,November,December\";\n</code></pre>\n\n<p>now want to split this by comma and store in Array object</p>\n",
            "last_activity_date": 1406320410,
            "question_id": 2858121,
            "score": 209,
            "tags": [
                "javascript",
                "string-split"
            ],
            "title": "Convert comma separated string to array"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<pre><code>function isEmpty( o ) {\n    for ( var p in o ) { \n        if ( o.hasOwnProperty( p ) ) { return false; }\n    }\n    return true;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I'm assuming that by <em>empty</em> you mean \"has no properties of its own\".</p>\n\n<pre><code>// Speed up calls to hasOwnProperty\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\n\nfunction isEmpty(obj) {\n\n    // null and undefined are \"empty\"\n    if (obj == null) return true;\n\n    // Assume if it has a length property with a non-zero value\n    // that that property is correct.\n    if (obj.length &gt; 0)    return false;\n    if (obj.length === 0)  return true;\n\n    // Otherwise, does it have any properties of its own?\n    // Note that this doesn't handle\n    // toString and valueOf enumeration bugs in IE &lt; 9\n    for (var key in obj) {\n        if (hasOwnProperty.call(obj, key)) return false;\n    }\n\n    return true;\n}\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>isEmpty(\"\"), // true\nisEmpty([]), // true\nisEmpty({}), // true\nisEmpty({length: 0, custom_property: []}), // true\n\nisEmpty(\"Hello\"), // false\nisEmpty([1,2,3]), // false\nisEmpty({test: 1}), // false\nisEmpty({length: 3, custom_property: [1,2,3]}) // false\n</code></pre>\n\n<p>If you only need to handle <a href=\"http://caniuse.com/#search=use-strict\">ECMAScript5 browsers</a>, you can use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyNames\"><code>Object.getOwnPropertyNames</code></a> instead of the <a href=\"https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Objets_globaux/Object/hasOwnProperty\"><code>hasOwnProperty</code></a> loop:</p>\n\n<pre><code>if (Object.getOwnPropertyNames(obj).length &gt; 0) return false;\n</code></pre>\n\n<p>This will ensure that even if the object only has non-enumerable properties <code>isEmpty</code> will still give you the correct results.</p>\n",
                    "is_accepted": true,
                    "score": 158
                },
                {
                    "body": "<p>For ECMAScript5 (not supported in all browsers yet though), you can use:</p>\n\n<pre><code>Object.keys(obj).length === 0\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 155
                },
                {
                    "body": "<p>It might be a bit hacky. You can try this.</p>\n\n<pre><code>if (JSON.stringify(data).length === 2) {\n   // Do something\n}\n</code></pre>\n\n<p>Not sure if there is any <strong>disadvantage</strong> of this method.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Underscore's <a href=\"http://documentcloud.github.com/underscore/#isEmpty\">isEmpty()</a> is convenient, if you don't mind adding an extra library.</p>\n\n<pre><code>_.isEmpty({});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<p>Easy and cross-browser way is by using <code>jQuery.isEmptyObject</code>:</p>\n\n<pre><code>if ($.isEmptyObject(obj))\n{\n    // do something\n}\n</code></pre>\n\n<p>More: <a href=\"http://api.jquery.com/jQuery.isEmptyObject/\">http://api.jquery.com/jQuery.isEmptyObject/</a></p>\n\n<p>You need jquery though.</p>\n",
                    "is_accepted": false,
                    "score": 114
                },
                {
                    "body": "<p>No need for a library.</p>\n\n<pre><code>function(){ //must be within a function\n var obj = {}; //the object to test\n\n for(var isNotEmpty in obj) //will loop through once if there is a property of some sort, then\n    return alert('not empty')//what ever you are trying to do once\n\n return alert('empty'); //nope obj was empty do this instead;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>if (Object.getOwnPropertyNames(obj1).length &gt; 0)\n{\n alert('obj1 is empty!');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I played a bit around and got this out:</p>\n\n<pre><code>jQuery.isBlank = function (obj) {\n    if (!obj || jQuery.trim(obj) === \"\") return true;\n    if (obj.length &amp;&amp; obj.length &gt; 0) return false;\n\n    for (var prop in obj) return false;\n    return true;\n};\n\nconsole.log(\n    $.isBlank(0), // true\n    $.isBlank(\"\"), // true\n    $.isBlank(null), // true\n    $.isBlank(false), // true\n    $.isBlank(undefined), // true\n\n    $.isBlank([]), // true\n    $.isBlank([null]), // true\n    $.isBlank([undefined]), // true\n\n    $.isBlank({}), // true\n    $.isBlank({foo: 0}), // false\n    $.isBlank({foo: null}), // false\n    $.isBlank({foo: false}), // false\n    $.isBlank({foo: undefined}), // false\n\n    $.isBlank(\"Hello\"), // false\n    $.isBlank([1,2,3]), // false\n    $.isBlank({foo: 1}), // false\n    $.isBlank({foo: 3, bar: [1,2,3]}), // false\n\n    \"incorrect:\",\n    $.isBlank(1), // true\n    $.isBlank(true), // true\n\n    $.isBlank([0]), // false\n    $.isBlank([false]), // false\n    $.isBlank(\"0\"), // false\n    $.isBlank([\"0\"]), // false\n    $.isBlank({foo: \"0\"}) // false\n);\n</code></pre>\n\n<p>Got the inspiration from here:\n<a href=\"https://gist.github.com/laktek/758269#comment-784188\" rel=\"nofollow\">https://gist.github.com/laktek/758269#comment-784188</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use <code>JSON.stringify(obj)</code> then compare it to empty object. Like this:</p>\n\n<pre><code>JSON.stringify(your_object)==\"{}\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>fast onliner for 'dictionary'-objects:</p>\n\n<pre><code>function isEmptyDict(d){for (var k in d) return false; return true}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can write a fallback if Array.isArray and Object.getOwnPropertyNames is not available</p>\n\n<pre><code>XX.isEmpty = function(a){\n    if(Array.isArray(a)){\n        return (a.length==0);\n    }\n    if(!a){\n        return true;\n    }\n    if(a instanceof Object){\n\n        if(a instanceof Date){\n            return false;\n        }\n\n        if(Object.getOwnPropertyNames(a).length == 0){\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Surprised to see so many weak answers on such a basic JS question... Top answer is no good too for these reasons: \n1) it generates global var\n2) returns true on undefined\n3) uses for...in which is extremely slow by itself\n4) function inside for...in is useless - return false without hasOwnProperty magic will work fine</p>\n\n<p>in fact there's simplier solution:</p>\n\n<pre><code>function isEmpty(value){\n    return Boolean(value &amp;&amp; typeof value == 'object') &amp;&amp; !Object.keys(value).length;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Elegant way - use keys</p>\n\n<pre><code>var myEmptyObj = {};\nvar myFullObj = {\"key\":\"value\"};\nconsole.log(Object.keys(myEmptyObj).length); //0\nconsole.log(Object.keys(myFullObj).length); //1\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"https://lodash.com/docs#isEmpty\" rel=\"nofollow\">https://lodash.com/docs#isEmpty</a> comes in pretty handy:</p>\n\n<pre><code>_.isEmpty({})   // true\n_.isEmpty()     // true\n_.isEmpty(null) // true\n_.isEmpty(\"\")   // true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What is the fastest way to check if an object is empty or not?</p>\n\n<p>Is there a faster and better way than this:</p>\n\n<pre><code>function count_obj(obj){\n    var i = 0;\n    for(var key in obj){\n        ++i;\n    }\n\n    return i;\n}\n</code></pre>\n",
            "last_activity_date": 1421840142,
            "question_id": 4994201,
            "score": 158,
            "tags": [
                "javascript"
            ],
            "title": "Is object empty?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<pre><code>$(\"#regTitle\").html(\"Hello World\");\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 622
                },
                {
                    "body": "<p>The <a href=\"http://docs.jquery.com/Attributes/html#val\">html()</a> function can take strings of HTML, and will effectively modify the <code>.innerHTML</code> property.</p>\n\n<pre><code>$('#regTitle').html('Hello World');\n</code></pre>\n\n<p>However, the <a href=\"http://api.jquery.com/text\">text()</a> function will change the (text) value of the specified element, but keep the <code>html</code> structure.</p>\n\n<pre><code>$('#regTitle').text('Hello world'); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 158
                },
                {
                    "body": "<p>If you instead have a jquery object you want to render instead of the existing content. Then just reset the content and append the new.</p>\n\n<pre><code>var itemtoReplaceContentOf = $('#regTitle');\nitemtoReplaceContentOf.html('');\nnewcontent.appendTo(itemtoReplaceContentOf);\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>$('#regTitle').empty().append(newcontent);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Here is your answer:</p>\n\n<pre><code>//This is the setter of the innerHTML property in jQuery\n$('#regTitle').html('Hello World');\n\n//This is the getter of the innerHTML property in jQuery\nvar helloWorld = $('#regTitle').html();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>same .html() can be used for setting and getting contents (inner HTML ) of matched non emepty elements</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How could I achieve the following:</p>\n\n<pre><code>document.all.regTitle.innerHTML = 'Hello World';\n</code></pre>\n\n<p>using jQuery where <code>regTitle</code> is my div ID?</p>\n",
            "last_activity_date": 1413461651,
            "question_id": 1309452,
            "score": 374,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "innerhtml"
            ],
            "title": "How to replace innerHTML of a div using jQuery?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Borrowing from the code at your link you could try something like this:</p>\n\n<pre><code>$(window).bind('resize', function() { \n    // resize the datagrid to fit the page properly:\n    $('div.subject').children('div').each(function() {\n        $(this).width('auto');\n        $(this).find('table').width('100%');\n    });\n});\n</code></pre>\n\n<p>This way you're binding directly to the window.onresize event, which actually looks like what you want from your question.</p>\n\n<p>If your grid is set to 100% width though it should automatically expand when its container expands, unless there are some intricacies to the plugin you're using that I don't know about.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>As a follow-up:</p>\n\n<p>The previous code shown in this post was eventually abandoned because it was unreliable. I am now using the following API function to resize the grid, as recommended by the jqGrid documentation:</p>\n\n<pre><code>jQuery(\"#targetGrid\").setGridWidth(width);\n</code></pre>\n\n<p>To do the actual resizing, a function implementing the following logic is bound to the window's resize event:</p>\n\n<ul>\n<li><p>Calculate the width of the grid using its parent's clientWidth and (if that is not available) its offsetWidth attribute. </p></li>\n<li><p>Perform a sanity check to make sure width has changed more than x pixels (to work around some application-specific problems)</p></li>\n<li><p>Finally, use setGridWidth() to change the grid's width</p></li>\n</ul>\n\n<p>Here is example code to handle resizing:</p>\n\n<pre><code>jQuery(window).bind('resize', function() {\n\n    // Get width of parent container\n    var width = jQuery(targetContainer).attr('clientWidth');\n    if (width == null || width &lt; 1){\n        // For IE, revert to offsetWidth if necessary\n        width = jQuery(targetContainer).attr('offsetWidth');\n    }\n    width = width - 2; // Fudge factor to prevent horizontal scrollbars\n    if (width &gt; 0 &amp;&amp;\n        // Only resize if new width exceeds a minimal threshold\n        // Fixes IE issue with in-place resizing when mousing-over frame bars\n        Math.abs(width - jQuery(targetGrid).width()) &gt; 5)\n    {\n        jQuery(targetGrid).setGridWidth(width);\n    }\n\n}).trigger('resize');\n</code></pre>\n\n<p>And example markup:</p>\n\n<pre><code>&lt;div id=\"grid_container\"&gt;\n    &lt;table id=\"grid\"&gt;&lt;/table&gt;\n    &lt;div id=\"grid_pgr\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 39
                },
                {
                    "body": "<p>Auto resize:</p>\n\n<p>For jQgrid 3.5+</p>\n\n<pre><code>        if (grid = $('.ui-jqgrid-btable:visible')) {\n            grid.each(function(index) {\n                gridId = $(this).attr('id');\n                gridParentWidth = $('#gbox_' + gridId).parent().width();\n                $('#' + gridId).setGridWidth(gridParentWidth);\n            });\n        }\n</code></pre>\n\n<p>For jQgrid 3.4.x:</p>\n\n<pre><code>       if (typeof $('table.scroll').setGridWidth == 'function') {\n            $('table.scroll').setGridWidth(100, true); //reset when grid is wider than container (div)\n            if (gridObj) {\n\n            } else {\n                $('#contentBox_content .grid_bdiv:reallyvisible').each(function(index) {\n                    grid = $(this).children('table.scroll');\n                    gridParentWidth = $(this).parent().width() \u2013 origami.grid.gridFromRight;\n                    grid.setGridWidth(gridParentWidth, true);\n                });\n            }\n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>Been using this in production for some time now without any complaints (May take some tweaking to look right on your site.. for instance, subtracting the width of a sidebar, etc)</p>\n\n<pre><code>$(window).bind('resize', function() {\n    $(\"#jqgrid\").setGridWidth($(window).width());\n}).trigger('resize');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 54
                },
                {
                    "body": "<p>this seems to be working nicely for me </p>\n\n<pre><code>$(window).bind('resize', function() {\n    jQuery(\"#grid\").setGridWidth($('#parentDiv').width()-30, true);\n}).trigger('resize');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I'm using 960.gs for layout so my solution is as follows:</p>\n\n<pre><code>    $(window).bind(\n        'resize',\n        function() {\n                    //  Grid ids we are using\n            $(\"#demogr, #allergygr, #problemsgr, #diagnosesgr, #medicalhisgr\").setGridWidth(\n                    $(\".grid_5\").width());\n            $(\"#clinteamgr, #procedgr\").setGridWidth(\n                    $(\".grid_10\").width());\n        }).trigger('resize');\n// Here we set a global options\n\njQuery.extend(jQuery.jgrid.defaults, {\n    // altRows:true,\n    autowidth : true,\n    beforeSelectRow : function(rowid, e) { // disable row highlighting onclick\n        return false;\n    },\n    datatype : \"jsonstring\",\n    datastr : grdata,  //  JSON object generated by another function\n    gridview : false,\n    height : '100%',\n    hoverrows : false,\n    loadonce : true,\n    sortable : false,\n    jsonReader : {\n        repeatitems : false\n    }\n});\n\n// Demographics Grid\n\n$(\"#demogr\").jqGrid( {\n    caption : \"Demographics\",\n    colNames : [ 'Info', 'Data' ],\n    colModel : [ {\n        name : 'Info',\n        width : \"30%\",\n        sortable : false,\n        jsonmap : 'ITEM'\n    }, {\n        name : 'Description',\n        width : \"70%\",\n        sortable : false,\n        jsonmap : 'DESCRIPTION'\n    } ],\n    jsonReader : {\n        root : \"DEMOGRAPHICS\",\n        id : \"DEMOID\"\n    }\n});\n</code></pre>\n\n<p>//   Other grids defined below...</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>autowidth: true\n</code></pre>\n\n<p>worked perfectly for me. learnt from <a href=\"http://stackoverflow.com/questions/3725236\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The main answer worked for me but made the app extremely unresponsive in IE, so I used a timer as suggested. Code looks something like this (<code>$(#contentColumn)</code> is the div that the JQGrid sits in):</p>\n\n<pre><code>  function resizeGrids() {\n    var reportObjectsGrid = $(\"#ReportObjectsGrid\");\n    reportObjectsGrid.setGridWidth($(\"#contentColumn\").width());\n};\n\nvar resizeTimer;\n\n$(window).bind('resize', function () {\n    clearTimeout(resizeTimer);\n    resizeTimer = setTimeout(resizeGrids, 60);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Hello Stack overflow enthusiasts.  I enjoyed most of answers, and I even up-voted a couple, but none of them worked for me on IE 8 for some strange reason... I did however run into these links... This guy wrote a library that seems to work.  Include it in your projects in adittion to jquery UI, throw in the name of your table and the div.</p>\n\n<p><a href=\"http://stevenharman.net/blog/archive/2009/08/21/creating-a-fluid-jquery-jqgrid.aspx\" rel=\"nofollow\">http://stevenharman.net/blog/archive/2009/08/21/creating-a-fluid-jquery-jqgrid.aspx</a></p>\n\n<p><a href=\"http://code.google.com/p/codeincubator/source/browse/#svn%2FSamples%2Fsteveharman%2FjQuery%2Fjquery.jqgrid.fluid%253Fstate%253Dclosed\" rel=\"nofollow\">http://code.google.com/p/codeincubator/source/browse/#svn%2FSamples%2Fsteveharman%2FjQuery%2Fjquery.jqgrid.fluid%253Fstate%253Dclosed</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>&lt;script&gt;\n$(document).ready(function(){    \n$(window).on('resize', function() {\n    jQuery(\"#grid\").setGridWidth($('#fill').width(), false); \n    jQuery(\"#grid\").setGridHeight($('#fill').height(),true); \n}).trigger('resize');      \n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This works..</p>\n\n<pre><code>var $targetGrid = $(\"#myGridId\");\n$(window).resize(function () {\n    var jqGridWrapperId = \"#gbox_\" + $targetGrid.attr('id') //here be dragons, this is     generated by jqGrid.\n    $targetGrid.setGridWidth($(jqGridWrapperId).parent().width()); //perhaps add padding calculation here?\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>width: null\nshrinkToFit: true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you:</p>\n\n<ul>\n<li>have <code>shrinkToFit: false</code> (mean fixed width columns)</li>\n<li>have <code>autowidth: true</code></li>\n<li>don't care about fluid height</li>\n<li>have horizontal scrollbar</li>\n</ul>\n\n<p>You can make grid with fluid width with following styles:</p>\n\n<pre><code>.ui-jqgrid {\n  max-width: 100% !important;\n  width: auto !important;\n}\n\n.ui-jqgrid-view,\n.ui-jqgrid-hdiv,\n.ui-jqgrid-bdiv {\n   width: auto !important;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/chintsu/Lqff05wn/\" rel=\"nofollow\">Here is a demo</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there any way to resize a <a href=\"http://www.trirand.com/blog/\">jqGrid</a> when the browser window is resized? I have tried the method described <a href=\"http://www.trirand.com/blog/?page%5Fid=18/discussion/browser-resize-how-to-resize-jqgrid/page-1/post-3350/\">here</a> but that technique does not work in IE7.</p>\n",
            "last_activity_date": 1423486729,
            "question_id": 875225,
            "score": 66,
            "tags": [
                "javascript",
                "jquery",
                "jqgrid",
                "grid",
                "resize"
            ],
            "title": "Resize jqGrid when browser is resized?"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<pre><code>return filename.replace(/\\.([a-zA-Z0-9]+)$/, \"$1\");\n</code></pre>\n\n<p>edit: Strangely (or maybe it's not) the <code>$1</code> in the second argument of the replace method doesn't seem to work... Sorry.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>Edit:</strong> Just because this is the accepted answer; <a href=\"http://stackoverflow.com/a/1203361/23746\">wallacer's answer</a> is indeed much better:</p>\n\n<pre><code>return filename.split('.').pop();\n</code></pre>\n\n<hr>\n\n<p>My old answer:</p>\n\n<pre><code>return /[^.]+$/.exec(filename);\n</code></pre>\n\n<p>Should do it.</p>\n\n<p><strong>Edit:</strong> In response to PhiLho's comment, use something like:</p>\n\n<pre><code>return (/[.]/.exec(filename)) ? /[^.]+$/.exec(filename) : undefined;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 180
                },
                {
                    "body": "<pre><code>var parts = filename.split('.');\nreturn parts[parts.length-1];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>function getFileExtension(filename)\n{\n  var ext = /^.+\\.([^.]+)$/.exec(filename);\n  return ext == null ? \"\" : ext[1];\n}\n</code></pre>\n\n<p>Tested with \"a.b\" (=> \"b\"), \"a\" (=> \"\"), \".hidden\" (=> \"\"), \"\" (=> \"\"), null (=> \"\")<br />\nAlso \"a.b.c.d\" (=> \"d\"), \".a.b\" (=> \"b\"), \"a..b\" (=> \"b\").</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>function file_get_ext(filename)\n    {\n    return typeof filename != \"undefined\" ? filename.substring(filename.lastIndexOf(\".\")+1, filename.length).toLowerCase() : false;\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I just realized that it's not enough to put a comment on p4bl0's answer, though Tom's answer clearly solves the problem:</p>\n\n<pre><code>return filename.replace(/^.*?\\.([a-zA-Z0-9]+)$/, \"$1\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function extension(fname) {\n  var pos = fname.lastIndexOf(\".\");\n  var strlen = fname.length;\n  if (pos != -1 &amp;&amp; strlen != pos + 1) {\n    var ext = fname.split(\".\");\n    var len = ext.length;\n    var extension = ext[len - 1].toLowerCase();\n  } else {\n    extension = \"No extension found\";\n  }\n  return extension;\n}\n</code></pre>\n\n<p>//usage</p>\n\n<p>extension('file.jpeg')</p>\n\n<p>always returns the extension lower cas so you can check it on field change\nworks for:</p>\n\n<p>file.JpEg</p>\n\n<p>file         (no extension)</p>\n\n<p>file.        (noextension)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function func() {\n  var val = document.frm.filename.value;\n  var arr = val.split(\".\");\n  alert(arr[arr.length - 1]);\n  var arr1 = val.split(\"\\\\\");\n  alert(arr1[arr1.length - 2]);\n  if (arr[1] == \"gif\" || arr[1] == \"bmp\" || arr[1] == \"jpeg\") {\n    alert(\"this is an image file \");\n  } else {\n    alert(\"this is not an image file\");\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>return filename.split('.').pop();\n</code></pre>\n\n<p>Keep it simple  :)</p>\n\n<p>Edit:</p>\n\n<p>A safer implementation if you're going to run into files with no extension, or hidden files with no extension (see VisioN's comment to Tom's answer above) would be something along these lines</p>\n\n<pre><code>var a = filename.split(\".\");\nif( a.length === 1 || ( a[0] === \"\" &amp;&amp; a.length === 2 ) ) {\n    return \"\";\n}\nreturn a.pop();    // feel free to tack .toLowerCase() here if you want\n</code></pre>\n\n<p>If <code>a.length</code> is one, it's a visible file with no extension ie. <em>file</em></p>\n\n<p>If <code>a[0] === \"\"</code> and <code>a.length === 2</code> it's a hidden file with no extension ie. <em>.htaccess</em></p>\n\n<p>Hope this helps to clear up issues with the slightly more complex cases.  In terms of performance, I believe this solution is <a href=\"http://jsperf.com/regex-vs-split/2\">a little slower than regex</a> in most browsers.  However, for most common purposes this code should be perfectly usable.</p>\n",
                    "is_accepted": false,
                    "score": 358
                },
                {
                    "body": "<p>For most applications, a simple script such as </p>\n\n<pre><code>return /[^.]+$/.exec(filename);\n</code></pre>\n\n<p>would work just fine (as provided by Tom). However this is not fool proof. It does not work if the following file name is provided:</p>\n\n<pre><code>image.jpg?foo=bar\n</code></pre>\n\n<p>It may be a bit overkill but I would suggest using a url parser such as <a href=\"http://phpjs.org/functions/parse_url\" rel=\"nofollow\">this one</a> to avoid failure due to unpredictable filenames.</p>\n\n<p>Using that particular function, you could get the file name like this:</p>\n\n<pre><code>var trueFileName = parse_url('image.jpg?foo=bar').file;\n</code></pre>\n\n<p>This will output \"image.jpg\" without the url vars. Then you are free to grab the file extension.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>function getFileExtension(filename) {\n  var fileinput = document.getElementById(filename);\n  if (!fileinput)\n    return \"\";\n  var filename = fileinput.value;\n  if (filename.length == 0)\n    return \"\";\n  var dot = filename.lastIndexOf(\".\");\n  if (dot == -1)\n    return \"\";\n  var extension = filename.substr(dot, filename.length);\n  return extension;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function getExt(filename)\n{\n    var ext = filename.split('.').pop();\n    if(ext == filename) return \"\";\n    return ext;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<pre><code>var extension = fileName.substring(fileName.lastIndexOf('.')+1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Here is my one-line non-regexp universal solution:</p>\n\n<pre><code> return fname.substr((Math.max(0, fname.lastIndexOf(\".\")) || Infinity) + 1);\n</code></pre>\n\n<p>Or even a bit shorter <strong>(yet fastest solution!)</strong>:</p>\n\n<pre><code> return fname.substr((~-fname.lastIndexOf(\".\") &gt;&gt;&gt; 0) + 2);\n</code></pre>\n\n<p>Both work correctly with names having no extension (e.g. <em>myfile</em>) or starting with <code>.</code> dot (e.g. <em>.htaccess</em>):</p>\n\n<pre><code> \"\"                            --&gt;   \"\"\n \"name\"                        --&gt;   \"\"\n \"name.txt\"                    --&gt;   \"txt\"\n \".htpasswd\"                   --&gt;   \"\"\n \"name.with.many.dots.myext\"   --&gt;   \"myext\"\n</code></pre>\n\n<p>If you care about the speed you may run the <a href=\"http://jsperf.com/extract-file-extension\"><strong>benchmark</strong></a> and check that the provided solutions are the fastest, while the short one is tremendously fast:</p>\n\n<p><img src=\"http://i.stack.imgur.com/ZL8Bn.png\" alt=\"Speed comparison\"></p>\n\n<p><em>How the short one works:</em></p>\n\n<ol>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf\"><code>String.lastIndexOf</code></a> method returns the position of the substring (i.e. <code>\".\"</code>) in the given string (i.e. <code>fname</code>). If the substring is not found method returns <code>-1</code>.</li>\n<li>Bitwise NOT operator (<code>~</code>) is functionally the same as <code>-(x + 1)</code>, so following the given formula you get <code>~(-(-1)) === -2</code>, <code>~(-(10)) === 9</code>, and <code>~(-(0)) === -1</code>. It was used here just in order to save space, otherwise <code>fname.lastIndexOf(\".\") - 1 &gt;&gt;&gt; 0</code> may be applied.</li>\n<li>The \"unacceptable\" positions of dot in the filename are <code>-1</code> and <code>0</code>, which respectively refer to names with no extension (e.g. <code>\"name\"</code>) and to names that start with dot (e.g. <code>\".htaccess\"</code>).</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#%3E%3E%3E_%28Zero-fill_right_shift%29\">Zero-fill right shift operator</a> (<code>&gt;&gt;&gt;</code>) if used with zero affects negative numbers transforming <code>-1</code> to <code>4294967295</code> and <code>-2</code> to <code>4294967294</code>, which is useful for remaining the filename unchanged in the edge cases (sort of a trick here).</li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr\"><code>String.prototype.substr</code></a> extracts the part of the filename from the position that was calculated as described. If the position number is more than the length of the string method returns <code>\"\"</code>.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 88
                },
                {
                    "body": "<p>Wallacer's answer is nice, but one more checking is needed.</p>\n\n<p>If file has no extension, it will use filename as extension which is not good.</p>\n\n<p>Try this one:</p>\n\n<pre><code>return ( filename.indexOf('.') &gt; 0 ) ? filename.split('.').pop().toLowerCase() : 'undefined';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Don't forget that some files can have no extension, so:</p>\n\n<pre><code>var parts = filename.split('.');\nreturn (parts.length &gt; 1) ? parts.pop() : '';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Fast and works correctly with paths</p>\n\n<pre><code>(filename.match(/[^\\\\\\/]\\.([^.\\\\\\/]+)$/) || [null]).pop()\n</code></pre>\n\n<p>Some edge cases</p>\n\n<pre><code>/path/.htaccess =&gt; null\n/dir.with.dot/file =&gt; null\n</code></pre>\n\n<p>Solutions using split are slow and solutions with lastIndexOf don't handle edge cases.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>i just wanted to share this.</p>\n\n<pre><code>fileName.slice(fileName.lastIndexOf('.'))\n</code></pre>\n\n<p>although this has a downfall that files with no extension will return last string.\nbut if you do so this will fix every thing :</p>\n\n<pre><code>   function getExtention(fileName){\n     var i = fileName.lastIndexOf('.');\n     if(i === -1 ) return false;\n     return fileName.slice(i)\n   }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>var filetypeArray = (file.type).split(\"/\");\nvar filetype = filetypeArray[1];\n</code></pre>\n\n<p>This is a better approach imo. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are looking for a specific extension and know its length, you can use <strong>substr</strong>:</p>\n\n<pre><code>var file1 = \"50.xsl\";\n\nif (file1.substr(-4) == '.xsl') {\n  // do something\n}\n</code></pre>\n\n<p><strong>JavaScript reference:</strong> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/substr</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>See code: </p>\n\n<pre><code>var file1 =\"50.xsl\";\nvar file2 =30.doc\";\"\ngetFileExtension(file1); //returs xsl\ngetFileExtension(file2); //returs doc\n\nfunction getFileExtension(filename) {\n/*TODO*/\n}\n</code></pre>\n",
            "last_activity_date": 1416275002,
            "question_id": 190852,
            "score": 112,
            "tags": [
                "javascript",
                "file-extension"
            ],
            "title": "How can I get file extensions with JavaScript?"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Try</p>\n\n<pre><code>$(this).attr(\"checked\" , false );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>either (plain js)</p>\n\n<pre><code>this.checked = false;\n</code></pre>\n\n<p>or (jQuery)</p>\n\n<pre><code>$(this).prop('checked', false);\n// Note that the pre-jQuery 1.6 idiom was\n// $(this).attr('checked', false);\n</code></pre>\n\n<p>See <a href=\"http://api.jquery.com/prop/\"><strong>jQuery prop() help page</strong></a> for an explanation on the difference between <em>attr()</em> and <em>prop()</em> and why prop() is now preferable.<br>\nprop() was introduced with jQuery 1.6 in May 2011.</p>\n",
                    "is_accepted": true,
                    "score": 341
                },
                {
                    "body": "<p>You wouldn't need the <code>each</code> function</p>\n\n<pre><code>$(\"input:radio\").attr(\"checked\", false);\n</code></pre>\n\n<p>Or</p>\n\n<pre><code>$(\"input:radio\").removeAttr(\"checked\");\n</code></pre>\n\n<p>The same should also apply to your textbox:</p>\n\n<pre><code>$('#frm input[type=\"text\"]').val(\"\");\n</code></pre>\n\n<p>But you could improve this</p>\n\n<pre><code>$('#frm input:text').val(\"\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<p>Try</p>\n\n<pre><code>$(this).removeAttr('checked')\n</code></pre>\n\n<p>Since a lot of browsers will interpret 'checked=anything' as true. This will remove the checked attribute altogether.</p>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Try this, this will do the trick:</p>\n\n<pre><code>        $(document).ready(function() {\n           $(\"input[type='radio']\").mousedown(function(e) {\n                if ($(this).attr(\"checked\") == true) {\n                   setTimeout(\"$('input[id=\" + $(this).attr('id') + \"]').removeAttr('checked');\", 200);}\n                else {\n                    return true\n                }\n            });\n        });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Thanks Patrick, you made my day! It's mousedown you have to use. However I've improved the code a bit, so it's cross-browser compatible and work with no bugs. Also you can do something else when there is a group of radio buttons. jQuery v1.4.2 compatible.</p>\n\n<pre><code>//We need to bind click handler as well\n//as FF sets button checked after mousedown, but before click\n$('input:radio').bind('click mousedown', (function() {\n    //Capture radio button status within its handler scope,\n    //so we do not use any global vars and every radio button keeps its own status.\n    //This required to uncheck them later.\n    //We need to store status separately as browser updates checked status before click handler called,\n    //so radio button will always be checked.\n    var isChecked;\n\n    return function(event) {\n        //console.log(event.type + \": \" + this.checked);\n\n        if(event.type == 'click') {\n            //console.log(isChecked);\n\n            if(isChecked) {\n                //Uncheck and update status\n                isChecked = this.checked = false;\n            } else {\n                //Update status\n                //Browser will check the button by itself\n                isChecked = true;\n\n                //Do something else if radio button selected\n                /*\n                if(this.value == 'somevalue') {\n                    doSomething();\n                } else {\n                    doSomethingElse();\n                }\n                */\n            }\n    } else {\n        //Get the right status before browser sets it\n        //We need to use onmousedown event here, as it is the only cross-browser compatible event for radio buttons\n        isChecked = this.checked;\n    }\n}})());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Rewrite of Igor's code as plugin.</p>\n\n<p>Use:</p>\n\n<pre><code>$('input[type=radio]').uncheckableRadio();\n</code></pre>\n\n<p>Plugin:</p>\n\n<pre><code>(function( $ ){\n\n    $.fn.uncheckableRadio = function() {\n\n        return this.each(function() {\n            $(this).mousedown(function() {\n                $(this).data('wasChecked', this.checked);\n            });\n\n            $(this).click(function() {\n                if ($(this).data('wasChecked'))\n                    this.checked = false;\n            });\n        });\n\n    };\n\n})( jQuery );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Slight modification of Laurynas' plugin based on Igor's code. This accommodates possible labels associated with the radio buttons being targeted:</p>\n\n<pre><code>(function ($) {\n    $.fn.uncheckableRadio = function () {\n\n        return this.each(function () {\n            var radio = this;\n                $('label[for=\"' + radio.id + '\"]').add(radio).mousedown(function () {\n                    $(radio).data('wasChecked', radio.checked);\n                });\n\n                $('label[for=\"' + radio.id + '\"]').add(radio).click(function () {\n                    if ($(radio).data('wasChecked'))\n                        radio.checked = false;\n                });\n           });\n    };\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>For radio and radio group:</p>\n\n<pre><code>$(document).ready(function() {\n    $(document).find(\"input:checked[type='radio']\").addClass('bounce');   \n    $(\"input[type='radio']\").click(function() {\n        $(this).prop('checked', false);\n        $(this).toggleClass('bounce');\n\n        if( $(this).hasClass('bounce') ) {\n            $(this).prop('checked', true);\n            $(document).find(\"input:not(:checked)[type='radio']\").removeClass('bounce');\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>$('#frm input[type=\"radio\":checked]').each(function(){\n   $(this).checked = false;  \n  });\n</code></pre>\n\n<p>This is almost good but you missed the [0]  </p>\n\n<p>Correct ->> <code>$(this)[0].checked = false;</code> </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function setRadio(obj) \n{\n    if($(\"input[name='r_\"+obj.value+\"']\").val() == 0 ){\n      obj.checked = true\n     $(\"input[name='r_\"+obj.value+\"']\").val(1);\n    }else{\n      obj.checked = false;\n      $(\"input[name='r_\"+obj.value+\"']\").val(0);\n    }\n\n}\n\n&lt;input type=\"radio\" id=\"planoT\" name=\"planoT[{ID_PLANO}]\" value=\"{ID_PLANO}\" onclick=\"setRadio(this)\" &gt; &lt;input type=\"hidden\" id=\"r_{ID_PLANO}\" name=\"r_{ID_PLANO}\" value=\"0\" &gt;\n</code></pre>\n\n<p>:D</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>the answer is take an unsually event how say dbl click</p>\n\n<p><code>$('input[id^=\"rad\"]').dblclick(function(){\n                var nombre = $(this).attr('id');\n                var checked =  $(this).is(\":checked\") ;\n                if(checked){\n                $(\"input[id=\"+nombre+\"]:radio\").prop( \"checked\", false );\n                }\n            })</code></p>\n\n<p>every time than you has double click in a radio checked the cheched return to false</p>\n\n<p>my radios begin whit id=radxxxxxxxx because i use this id selector goood luck, am pendding</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>You can also simulate the radiobutton behavior using only checkboxes:</p>\n\n<pre><code>&lt;input type=\"checkbox\" class=\"fakeRadio\" checked /&gt;\n&lt;input type=\"checkbox\" class=\"fakeRadio\" /&gt;\n&lt;input type=\"checkbox\" class=\"fakeRadio\" /&gt;\n</code></pre>\n\n<p>Then, you can use this simple code to work for you:</p>\n\n<pre><code>$(\".fakeRadio\").click(function(){\n    $(\".fakeRadio\").prop( \"checked\", false );\n    $(this).prop( \"checked\", true );\n});\n</code></pre>\n\n<p>It works fine and you have more control over the behavior of each button.</p>\n\n<p>You can try it by yourself at: <a href=\"http://jsfiddle.net/almircampos/n1zvrs0c/\" rel=\"nofollow\">http://jsfiddle.net/almircampos/n1zvrs0c/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function clearForm(){\n  $('#frm input[type=\"text\"]').each(function(){\n      $(this).val(\"\");  \n  });\n  $('#frm input[type=\"radio\"]:checked').each(function(){\n      $(this).attr('checked', false);  \n  });\n }\n</code></pre>\n\n<p>The correct selector is: '#frm input[type=\"radio\"]:checked'\nnot '#frm input[type=\"radio\":checked]'</p>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<p>I have group of radio buttons. I want to uncheck the check buttons after an AJAX form is submitted using jQuery. I have the following function:</p>\n\n<pre><code>function clearForm(){\n  $('#frm input[type=\"text\"]').each(function(){\n      $(this).val(\"\");  \n  });\n  $('#frm input[type=\"radio\":checked]').each(function(){\n      $(this).checked = false;  \n  });\n }\n</code></pre>\n\n<p>With the help of this function I can clear the values at the text boxes, but I can't clear the values of the radio buttons.</p>\n\n<p>By the way, I also tried <code>$(this).val(\"\");</code> but got no use.</p>\n",
            "last_activity_date": 1421374099,
            "question_id": 2117538,
            "score": 201,
            "tags": [
                "javascript",
                "jquery",
                "radio-button",
                "dynamic-forms"
            ],
            "title": "How to uncheck a radio button?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>No reason. Maybe the person who coded it came from PHP. It has the same effect as if you had named it \"_item\" or \"item\" or \"item$$\". </p>\n\n<p>Maybe it's some kind of Hungarian notation for the coder to note that the variable is a DOM element or something.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is no technical significance. They probably did it so as not to overwrite any existing <code>item</code> variable, since it's a pretty generic name. Or possibly the author has some kind of naming convention where, for example, any variables starting with a <code>$</code> are DOM elements.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The $ sign is an identifier for variables and functions.</p>\n\n<p><a href=\"http://www.authenticsociety.com/blog/JavaScript_DollarSign\" rel=\"nofollow\">http://www.authenticsociety.com/blog/JavaScript_DollarSign</a></p>\n\n<p>That has a clear explanation of what the dollar sign is for.</p>\n\n<p>Edit: The link above is now broken. Here's an alternative explanation: <a href=\"http://www.vcarrer.com/2010/10/about-dollar-sign-in-javascript.html\" rel=\"nofollow\">http://www.vcarrer.com/2010/10/about-dollar-sign-in-javascript.html</a></p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>A '$' in a variable means nothing to the interpreter, much like an underscore.</p>\n\n<p>From what I've seen, many people using <a href=\"http://jquery.com\">jQuery</a> (which is what your example code looks like to me) tend to prefix variables that contain a jQuery object with a $ so that they are easily identified and not mixed up with, say, integers.</p>\n\n<p>The dollar sign function <code>$()</code> in jQuery is a library function that is frequently used, so a short name is desirable.</p>\n",
                    "is_accepted": true,
                    "score": 173
                },
                {
                    "body": "<p>The dollar sign is treated just like a normal letter or underscore (<code>_</code>).  It has no special significance to the interpreter.</p>\n\n<p>Unlike many similar languages, <strong>identifiers</strong> (such as functional and variable names) in Javascript can contain not only letters, numbers and underscores, but <strong>can also contain dollar signs</strong>.  They are even allowed to start with a dollar sign, or consist <em>only</em> of a dollar sign and nothing else.</p>\n\n<p>Thus, <code>$</code> is a valid function or variable name in Javascript.</p>\n\n<p><strong>Why would you want a dollar sign in an identifier?</strong></p>\n\n<p>The syntax doesn't really enforce any particular usage of the dollar sign in an identifier, so it's up to you how you wish to use it.  In the past, it has often been recommended to start an identifier with a dollar sign only in <em>generated code</em> - that is, code created not by hand but by a code generator.</p>\n\n<p>In your example, however, this doesn't appear to be the case.  It looks like someone just put a dollar sign at the start for fun - perhaps they were a PHP programmer who did it out of habit, or something.  In PHP, all variable names must start with a dollar sign.</p>\n\n<p>There is another common meaning for a dollar sign in an interpreter nowadays: the jQuery object, whose name <em>only</em> consists of a single dollar sign (<code>$</code>).  This is a convention borrowed from earlier Javascript frameworks like Prototype, and if jQuery is used with other such frameworks, there will be a name clash because they will both use the name <code>$</code> (jQuery can be configured to use a different name for its global object).  There is nothing special in Javascript that allows jQuery to use the single dollar sign as its object name; as mentioned above, it's simply just another valid identifier name.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Here is a good short video explanation: <a href=\"https://www.youtube.com/watch?v=Acm-MD_6934\" rel=\"nofollow\">https://www.youtube.com/watch?v=Acm-MD_6934</a></p>\n\n<p>According to Ecma International Identifier Names are tokens that are interpreted according to the grammar given in the \u201cIdentifiers\u201d section of <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-5\" rel=\"nofollow\">chapter 5</a> of the Unicode standard, with some small modifications. An Identifier is an IdentifierName that is not a ReservedWord (<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-7.6.1\" rel=\"nofollow\">see 7.6.1</a>). The Unicode identifier grammar is based on both normative and informative character categories specified by the Unicode Standard. The characters in the specified categories in version 3.0 of the Unicode standard must be treated as in those categories by all conforming ECMAScript implementations.this standard specifies specific character additions:</p>\n\n<p><strong>The dollar sign ($) and the underscore (_) are permitted anywhere in an IdentifierName</strong>. </p>\n\n<p>Further reading can be found on: <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-7.6\" rel=\"nofollow\">http://www.ecma-international.org/ecma-262/5.1/#sec-7.6</a></p>\n\n<p><strong><em>Ecma International</strong> is an industry association founded in 1961 and dedicated to the standardization of Information and Communication Technology (ICT) and Consumer Electronics (CE).</em></p>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate</strong><br />\n  <a href=\"http://stackoverflow.com/questions/205853/why-would-a-javascript-variable-start-with-a-dollar-sign\">Why would a JavaScript variable start with a dollar sign?</a></p>\n</blockquote>\n\n<p>Got some help with a previous question and I encountered something new to me.</p>\n\n<p>The code in question is here: </p>\n\n<pre><code>var $item = $(this).parent().parent().find('input');\n</code></pre>\n\n<p>What is the purpose of the dollar sign in the variable name, why not just exclude it?</p>\n\n<p>A pretty easy question for someone I'm sure, but when I don't understand something, it drives me nuts.</p>\n",
            "last_activity_date": 1423563935,
            "question_id": 846585,
            "score": 153,
            "tags": [
                "javascript"
            ],
            "title": "Can someone explain the dollar sign in Javascript?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Perhaps you should do some sort of string replace to turn one separator into the other separator so you then only have one separator to deal with in your split.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can pass a regex into <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/String/split\">Javascript's split operator</a>. For example:</p>\n\n<pre><code>\"1,2 3\".split(/,| /) \n[\"1\", \"2\", \"3\"]\n</code></pre>\n\n<p>Or, if you want to allow multiple separators together to act as one only:</p>\n\n<pre><code>\"1, 2, , 3\".split(/(?:,| )+/) \n[\"1\", \"2\", \"3\"]\n</code></pre>\n\n<p>(You have to use the non-capturing (?:) parens because otherwise it gets spliced back into the result. Or you can be smart like Aaron and use a character class.)</p>\n\n<p>(Examples tested in Safari + FF)</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>Pass in a regexp as the parameter:</p>\n\n<pre><code>js&gt; \"Hello awesome, world!\".split(/[\\s,]+/)\nHello,awesome,world!\n</code></pre>\n\n<p><strong>Edited to add:</strong></p>\n\n<p>You can get the last element by selecting the length of the array minus 1:</p>\n\n<pre><code>&gt;&gt;&gt; bits = \"Hello awesome, world!\".split(/[\\s,]+/)\n[\"Hello\", \"awesome\", \"world!\"]\n&gt;&gt;&gt; bit = bits[bits.length - 1]\n\"world!\"\n</code></pre>\n\n<p>... and if the pattern doesn't match:</p>\n\n<pre><code>&gt;&gt;&gt; bits = \"Hello awesome, world!\".split(/foo/)\n[\"Hello awesome, world!\"]\n&gt;&gt;&gt; bits[bits.length - 1]\n\"Hello awesome, world!\"\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 213
                },
                {
                    "body": "<p>For those of you who want more customization in their splitting function, I wrote a recursive algorithm that splits a given string with a list of characters to split on. I wrote this before I saw the above post... I hope it helps some frustrated programmer...</p>\n\n<pre><code>splitString = function(string, splitters) {\n    var list = [string];\n    for(var i=0, len=splitters.length; i&lt;len; i++) {\n        traverseList(list, splitters[i], 0);\n    }\n    return flatten(list);\n}\n\ntraverseList = function(list, splitter, index) {\n    if(list[index]) {\n        if((list.constructor !== String) &amp;&amp; (list[index].constructor === String))\n            (list[index] != list[index].split(splitter)) ? list[index] = list[index].split(splitter) : null;\n        (list[index].constructor === Array) ? traverseList(list[index], splitter, 0) : null;\n        (list.constructor === Array) ? traverseList(list, splitter, index+1) : null;    \n    }\n}\n\nflatten = function(arr) {\n    return arr.reduce(function(acc, val) {\n        return acc.concat(val.constructor === Array ? flatten(val) : val);\n    },[]);\n}\n\nvar stringToSplit = \"people and_other/things\";\nvar splitList = [\" \", \"_\", \"/\"];\nsplitString(stringToSplit, splitList);\n</code></pre>\n\n<p>Example above returns: <code>[\"people\", \"and\", \"other\", \"things\"]</code></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Tricky method:</p>\n\n<pre><code>var s = \"dasdnk asd, (naks) :d skldma\";\nvar a = s.replace('(',' ').replace(')',' ').replace(',',' ').split(' ');\nconsole.log(a);//[\"dasdnk\", \"asd\", \"naks\", \":d\", \"skldma\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You could just lump all the characters you want to use as separators either singularly or collectively into a regular expression and pass them to the split function. For instance you could write:</p>\n\n<pre><code>console.log( \"dasdnk asd, (naks) :d skldma\".split(/[ \\(,\\)]+/) );\n</code></pre>\n\n<p>And the output will be:</p>\n\n<pre><code>[\"dasdnk\", \"asd\", \"naks\", \":d\", \"skldma\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Dont use RegExp as it is not much performance friendly for such a basic job. You can use the following function instead:</p>\n\n<pre><code>var multiSplit = function(str,delimeters){\n    var result = [str];\n    if (typeof(delimeters) == 'string')\n        delimeters = [delimeters];\n    while(delimeters.length&gt;0){\n        for(var i = 0;i&lt;result.length;i++){\n            var tempSplit = result[i].split(delimeters[0]);\n            result = result.slice(0,i).concat(tempSplit).concat(result.slice(i+1));\n        }\n        delimeters.shift();\n    }\n    return result;\n}\n\n\n\nmultiSplit('1,2,3.4.5.6 7 8 9',[',','.',' ']);\n// Output: [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n\nmultiSplit('1,2,3.4.5.6 7 8 9',' ');\n// Output: [\"1,2,3.4.5.6\", \"7\", \"8\", \"9\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How do I split a string with multiple separators in JavaScript?  I'm trying to split on both commas and spaces but, AFAIK, js's split function only supports one separator.</p>\n",
            "last_activity_date": 1405410580,
            "question_id": 650022,
            "score": 124,
            "tags": [
                "javascript",
                "regex",
                "split"
            ],
            "title": "How do I split a string with multiple separators in javascript?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Default the contents to <code>display:none</code> and then have an event handler that sets it to <code>display:block</code> or similar after it's fully loaded. Then have a div that's set to <code>display:block</code> with \"Loading\" in it, and set it to <code>display:none</code> in the same event handler as before.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Create a <code>&lt;div&gt;</code> element that contains your loading message, give the <code>&lt;div&gt;</code> an ID, and then when your content has finished loading, hide the <code>&lt;div&gt;</code>:</p>\n\n<pre><code>$(\"#myElement\").css(\"display\", \"none\");\n</code></pre>\n\n<p>...or in plain JavaScript:</p>\n\n<pre><code>document.getElementById(\"myElement\").style.display = \"none\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Wellp, this largely depends on how you're loading the elements needed in the 'intensive call', my initial thought is that you're doing those loads via ajax.  If that's the case, then you could use the 'beforeSend' option and make an ajax call like this:</p>\n\n<pre><code>$.ajax({\n  type: 'GET',\n  url: \"some.php\",\n  data: \"name=John&amp;location=Boston\",\n\n  beforeSend: function(xhr){                           &lt;---- use this option here\n    $('.select_element_you_want_to_load_into').html('Loading...');\n  },\n\n  success: function(msg){\n    $('.select_element_you_want_to_load_into').html(msg);\n</code></pre>\n\n<p>}\n });</p>\n\n<p><strong>EDIT</strong>\nI see, in that case, using one of the 'display:block'/'display:none' options above in conjunction with $(document).ready(...) from jQuery is probably the way to go. The $(document).ready() function waits for the entire document structure to be loaded before executing (but it doesn't wait for all media to load). You'd do something like this:</p>\n\n<pre><code>$(document).ready( function() {\n  $('table#with_slow_data').show();\n  $('div#loading image or text').hide();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Window.unload works well. Just place this on your pages. (Example using jQuery):</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n$(window).unload(function() {\n    var html = \"&lt;img src='html/loading.gif' /&gt;\";\n    $('#loading').append(html);\n});\n&lt;/script&gt;\n\n&lt;div id=\"loading\" /&gt;    \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I've needed this and after some research on the internet i came up with this (jQuery needed):</p>\n\n<p>First right after the body tag add this:</p>\n\n<pre><code>&lt;div id=\"loading\"&gt;\n  &lt;img id=\"loading-image\" src=\"images/ajax-loader.gif\" alt=\"Loading...\" /&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Then add the style class for the div and image to your css:</p>\n\n<pre><code>#loading {\n  width: 100%;\n  height: 100%;\n  top: 0px;\n  left: 0px;\n  position: fixed;\n  display: block;\n  opacity: 0.7;\n  background-color: #fff;\n  z-index: 99;\n  text-align: center;\n}\n\n#loading-image {\n  position: absolute;\n  top: 100px;\n  left: 240px;\n  z-index: 100;\n}\n</code></pre>\n\n<p>And finally add this javascript to your page (preferably at the end of your page, before closing body tag of course):</p>\n\n<pre><code>&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n  $(window).load(function() {\n    $('#loading').hide();\n  });\n&lt;/script&gt;\n</code></pre>\n\n<p>Then adjust the position of the loading image and the background color of the loading div via the style class.</p>\n\n<p>This is it, works just fine. But of course you have to have an ajax-loader.gif somewhere.</p>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>JS:</p>\n\n<pre><code>window.onload = function(){ document.getElementById(\"loading\").style.display = \"none\" }   \n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>#loading {width: 100%;height: 100%;top: 0px;left: 0px;position: fixed;display: block; z-index: 99}\n\n#loading-image {position: absolute;top: 40%;left: 45%;z-index: 100} \n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div id=\"loading\"&gt;\n&lt;img id=\"loading-image\" src=\"img/loading.gif\" alt=\"Loading...\" /&gt;\n&lt;/div&gt;  \n</code></pre>\n\n<p>Page loading image with simplest <a href=\"http://api.jquery.com/fadeOut/\" rel=\"nofollow\">fadeout</a> effect created in JS:</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Based on @mehyaa answer, but much shorter:</p>\n\n<p>HTML (right after <code>&lt;body&gt;</code>):</p>\n\n<pre><code>&lt;img id = \"loading\" src = \"loading.gif\" alt = \"Loading indicator\"&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>#loading {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  width: 32px;\n  height: 32px;\n  /* 1/2 of the height and width of the actual gif */\n  margin: -16px 0 0 -16px;\n  z-index: 100;\n  }\n</code></pre>\n\n<p>Javascript (jQuery, since I'm already using it):</p>\n\n<pre><code>$(window).load(function() {\n  $('#loading').remove();\n  });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a section on our website that loads quite slowly as it's doing some intensive calls. Any idea how i can get a div to say something similar to \"loading\" to show while the page prepares itself and then vanish when everything is ready?</p>\n\n<p>Cheers</p>\n",
            "last_activity_date": 1413222667,
            "question_id": 1853662,
            "score": 43,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "dom"
            ],
            "title": "How to show Page Loading image/div/text until the page has finished loading/rendering"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>EDIT -- perhaps the best option would be to create a service endpoint that does everything the three requests do.  That way you only have to do one request, and all the data is where you need it to be in the response.  If you find you are doing the same 3 requests over and over again, you will probably want to go this route.  It is often a good design decision to set up  a facade service on the server that lumps commonly used smaller server actions together.  Just an idea.</p>\n\n<hr>\n\n<p>one way to do it would be to create a 'sync' object in your click handler before the ajax calls.  Something like</p>\n\n<pre><code>var sync = {\n   count: 0\n}\n</code></pre>\n\n<p>The sync will be bound to the scope of the success calls automatically (closure).  In the success handler, you increment the count, and if it is 3 you can call the other function.</p>\n\n<p>Alternatively, you could do something like</p>\n\n<pre><code>var sync = {\n   success1Complete: false,\n   ...\n   success3Complete: false,\n}\n</code></pre>\n\n<p>when each success is executed, it would change the value in the sync to true.  You would have to check the sync to make sure that all three are true before proceeding.</p>\n\n<p>Note the case where one of your xhrs does not return success -- you need to account for that.</p>\n\n<p>Yet another option would be to always call the final function in your success handlers, and have it access the sync option to determine whether to actually do anything.  You would need to make sure the sync is in the scope of that function though.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I like hvgotcodes' idea. My suggestion is to add a generic incrementer that compares the number complete to the number needed and then runs the final callback. This could be built into the final callback.</p>\n\n<pre><code>var sync = {\n callbacksToComplete = 3,\n callbacksCompleted = 0,\n addCallbackInstance = function(){\n  this.callbacksCompleted++;\n  if(callbacksCompleted == callbacksToComplete) {\n   doFinalCallBack();\n  }\n }\n};\n</code></pre>\n\n<p>[Edited to reflect name updates.]</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>$.ajax({type:'POST', url:'www.naver.com', dataType:'text', async:false,\n    complete:function(xhr, textStatus){},\n    error:function(xhr, textStatus){},\n    success:function( data ){\n        $.ajax({type:'POST', \n            ....\n            ....\n            success:function(data){\n                $.ajax({type:'POST',\n                    ....\n                    ....\n            }\n        }\n    });\n</code></pre>\n\n<p>I'm sorry but I can't explain what I worte cuz I'm a Korean who can't speak even a word in english. but I think you can easily understand it.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Not seeing the need for any object malarky myself. Simple have a variable which is an integer. When you start a request, increment the number. When one completes, decrement it. When it's zero, there are no requests in progress, so you're done.</p>\n\n<pre><code>$('#button').click(function() {\n    var inProgress = 0;\n\n    function handleBefore() {\n        inProgress++;\n    };\n\n    function handleComplete() {\n        if (--inProgress) {\n            // do what's in here when all requests have completed.\n        }\n    };\n\n    $.ajax({\n        beforeSend: handleBefore,\n        complete: function () {\n            // whatever\n            handleComplete();\n            // whatever\n        }\n    });\n    $.ajax({\n        beforeSend: handleBefore,\n        complete: function () {\n            // whatever\n            handleComplete();\n            // whatever\n        }\n    });\n    $.ajax({\n        beforeSend: handleBefore,\n        complete: function () {\n            // whatever\n            handleComplete();\n            // whatever\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I asked the same question a while ago and got a couple of good answers here: <a href=\"http://stackoverflow.com/questions/2208710/best-way-to-add-a-callback-after-a-series-of-asynchronous-xhr-calls/2208860#2208860\">Best way to add a 'callback' after a series of asynchronous XHR calls</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a callback object I wrote where you can either set a single callback to fire once all complete or let each have their own callback and fire them all once all complete:</p>\n\n<p><em>NOTICE</em></p>\n\n<p>Since jQuery 1.5+ you can use the deferred method as described in another answer:</p>\n\n<pre><code>  $.when($.ajax(), [...]).then(function(results){},[...]);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/EN8nc/164/\">Example of deferred here</a></p>\n\n<p>for jQuery &lt; 1.5 the following will work or if you need to have your ajax calls fired at unknown times as shown here with two buttons: <a href=\"http://jsfiddle.net/EN8nc/165/\">fired after both buttons are clicked</a></p>\n\n<p><strong>[usage]</strong></p>\n\n<p>for <strong>single</strong> callback once complete: <strong><a href=\"http://www.jsfiddle.net/subhaze/EN8nc/6/\">Working Example</a></strong></p>\n\n<pre><code>// initialize here\nvar requestCallback = new MyRequestsCompleted({\n    numRequest: 3,\n    singleCallback: function(){\n        alert( \"I'm the callback\");\n    }\n});\n\n//usage in request\n$.ajax({\n    url: '/echo/html/',\n    success: function(data) {\n        requestCallback.requestComplete(true);\n    }\n});\n$.ajax({\n    url: '/echo/html/',\n    success: function(data) {\n        requestCallback.requestComplete(true);\n    }\n});\n$.ajax({\n    url: '/echo/html/',\n    success: function(data) {\n        requestCallback.requestComplete(true);\n    }\n});\n</code></pre>\n\n<p>each having <strong>their own</strong> callback when all complete: <strong><a href=\"http://www.jsfiddle.net/subhaze/EN8nc/5/\">Working Example</a></strong></p>\n\n<pre><code>//initialize \nvar requestCallback = new MyRequestsCompleted({\n    numRequest: 3\n});\n\n//usage in request\n$.ajax({\n    url: '/echo/html/',\n    success: function(data) {\n        requestCallback.addCallbackToQueue(true, function() {\n            alert('Im the first callback');\n        });\n    }\n});\n$.ajax({\n    url: '/echo/html/',\n    success: function(data) {\n        requestCallback.addCallbackToQueue(true, function() {\n            alert('Im the second callback');\n        });\n    }\n});\n$.ajax({\n    url: '/echo/html/',\n    success: function(data) {\n        requestCallback.addCallbackToQueue(true, function() {\n            alert('Im the third callback');\n        });\n    }\n});\n</code></pre>\n\n<p><strong>[The Code]</strong></p>\n\n<pre><code>var MyRequestsCompleted = (function() {\n    var numRequestToComplete, requestsCompleted, callBacks, singleCallBack;\n\n    return function(options) {\n        if (!options) options = {};\n\n        numRequestToComplete = options.numRequest || 0;\n        requestsCompleted = options.requestsCompleted || 0;\n        callBacks = [];\n        var fireCallbacks = function() {\n            alert(\"we're all complete\");\n            for (var i = 0; i &lt; callBacks.length; i++) callBacks[i]();\n        };\n        if (options.singleCallback) callBacks.push(options.singleCallback);\n\n        this.addCallbackToQueue = function(isComplete, callback) {\n            if (isComplete) requestsCompleted++;\n            if (callback) callBacks.push(callback);\n            if (requestsCompleted == numRequestToComplete) fireCallbacks();\n        };\n        this.requestComplete = function(isComplete) {\n            if (isComplete) requestsCompleted++;\n            if (requestsCompleted == numRequestToComplete) fireCallbacks();\n        };\n        this.setCallback = function(callback) {\n            callBacks.push(callBack);\n        };\n    };\n})();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 57
                },
                {
                    "body": "<p>I got some good hints from the answers on this page. I adapted it a bit for my use and thought I could share.</p>\n\n<pre><code>// lets say we have 2 ajax functions that needs to be \"synchronized\". \n// In other words, we want to know when both are completed.\nfunction foo1(callback) {\n    $.ajax({\n        url: '/echo/html/',\n        success: function(data) {\n            alert('foo1');\n            callback();               \n        }\n    });\n}\n\nfunction foo2(callback) {\n    $.ajax({\n        url: '/echo/html/',\n        success: function(data) {\n            alert('foo2');\n            callback();\n        }\n    });\n}\n\n// here is my simplified solution\najaxSynchronizer = function() {\n    var funcs = [];\n    var funcsCompleted = 0;\n    var callback;\n\n    this.add = function(f) {\n        funcs.push(f);\n    }\n\n    this.synchronizer = function() {\n        funcsCompleted++;\n        if (funcsCompleted == funcs.length) {\n            callback.call(this);\n        }\n    }\n\n    this.callWhenFinished = function(cb) {\n        callback = cb;\n        for (var i = 0; i &lt; funcs.length; i++) {\n            funcs[i].call(this, this.synchronizer);\n        }\n    }\n}\n\n// this is the function that is called when both ajax calls are completed.\nafterFunction = function() {\n    alert('All done!');\n}\n\n// this is how you set it up\nvar synchronizer = new ajaxSynchronizer();\nsynchronizer.add(foo1);\nsynchronizer.add(foo2);\nsynchronizer.callWhenFinished(afterFunction);\n</code></pre>\n\n<p>There are some limitations here, but for my case it was ok.\nI also found that for more advanced stuff it there is also a AOP plugin (for jQuery) that might be useful: <a href=\"http://code.google.com/p/jquery-aop/\" rel=\"nofollow\">http://code.google.com/p/jquery-aop/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I came across this problem today, and this was my naive attempt before watching the accepted answer.</p>\n\n<pre><code>&lt;script&gt;\n    function main() {\n        var a, b, c\n        var one = function() {\n            if ( a != undefined  &amp;&amp; b != undefined &amp;&amp; c != undefined ) {\n                alert(\"Ok\")\n            } else {\n                alert( \"\u00ac\u00ac \")\n            }\n        }\n\n        fakeAjaxCall( function() {\n            a = \"two\"\n            one()\n        } )\n        fakeAjaxCall( function() {\n            b = \"three\"\n            one()\n        } )\n        fakeAjaxCall( function() {\n            c = \"four\"\n            one()\n        } )\n    }\n    function fakeAjaxCall( a ) {\n        a()\n    }\n    main()\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Looks like you've got some answers to this, however I think there is something worth mentioning here that will greatly simplify your code.  jQuery introduced the <a href=\"http://api.jquery.com/jQuery.when/\"><code>$.when</code></a> in v1.5.  It looks like:</p>\n\n<pre><code>$.when($.ajax(...), $.ajax(...)).then(function (resp1, resp2) {\n    //this callback will be fired once all ajax calls have finished.\n});\n</code></pre>\n\n<p>Didn't see it mentioned here, hope it helps.</p>\n",
                    "is_accepted": false,
                    "score": 71
                },
                {
                    "body": "<p>It's not jquery (and it appears jquery has a workable solution) but just as another option....</p>\n\n<p>I've had similar problems working heavily with SharePoint web services - you often need to pull data from multiple sources to generate input for a single process.</p>\n\n<p>To solve it I embedded this kind of functionality into my AJAX abstraction library. You can easily define a request which will trigger a set of handlers when complete. However each request can be defined with multiple http calls. Here's the component (and detailed documentation):</p>\n\n<p><a href=\"http://depressedpress.com/javascript-extensions/dp_ajax/\" rel=\"nofollow\">DPAJAX at DepressedPress.com</a></p>\n\n<p>This simple example creates one request with three calls and then passes that information, in the call order, to a single handler:</p>\n\n<pre><code>    // The handler function \nfunction AddUp(Nums) { alert(Nums[1] + Nums[2] + Nums[3]) }; \n\n    // Create the pool \nmyPool = DP_AJAX.createPool(); \n\n    // Create the request \nmyRequest = DP_AJAX.createRequest(AddUp); \n\n    // Add the calls to the request \nmyRequest.addCall(\"GET\", \"http://www.mysite.com/Add.htm\", [5,10]); \nmyRequest.addCall(\"GET\", \"http://www.mysite.com/Add.htm\", [4,6]); \nmyRequest.addCall(\"GET\", \"http://www.mysite.com/Add.htm\", [7,13]); \n\n    // Add the request to the pool \nmyPool.addRequest(myRequest); \n</code></pre>\n\n<p>Note that unlike many of the other solutions (including, I believe the \"when\" solution in jquery) provided this method does not force single threading of the calls being made - each will still run as quickly (or as slowly) as the environment allows but the single handler will only be called when all are complete. It also supports the setting of timeout values and retry attempts if your service is a little flakey.</p>\n\n<p>I've found it insanely useful (and incredibly simple to understand from a code perspective).  No more chaining, no more counting calls and saving output.  Just \"set it and forget it\".</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>async   : false,\n</code></pre>\n\n<p>By default, all requests are sent asynchronously (i.e. this is set to true by default). If you need synchronous requests, set this option to <strong><code>false</code></strong>. Cross-domain requests and <code>dataType: \"jsonp\"</code> requests do not support synchronous operation. Note that synchronous requests may temporarily lock the browser, disabling any actions while the request is active. As of <strong>jQuery 1.8</strong>, the use of <code>async: false</code> with <strong>jqXHR</strong> (<code>$.Deferred</code>) is deprecated; you must use the <strong>success/error/complete</strong> callback options instead of the corresponding methods of the <strong>jqXHR</strong> object such as <code>jqXHR.done()</code> or the deprecated <code>jqXHR.success()</code>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I want to make three ajax calls in a click event. Each ajax call does a distinct operation and returns back data that is needed for a final callback. The calls themselves are not dependent on one another, they can all go at the same time, however I would like to have a final callback when all three are complete.</p>\n\n<pre><code>$('#button').click(function() {\n    fun1();\n    fun2();\n    fun3();\n//now do something else when the requests have done their 'success' callbacks.\n});\n\nvar fun1= (function() {\n    $.ajax({/*code*/});\n});\nvar fun2 = (function() {\n    $.ajax({/*code*/});\n});\nvar fun3 = (function() {\n    $.ajax({/*code*/});\n});\n</code></pre>\n",
            "last_activity_date": 1358353622,
            "question_id": 4368946,
            "score": 58,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "callback"
            ],
            "title": "Javascript callback for multiple ajax calls"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>This is because of ng-include that create a new child scope, so $scope.lineText isn't changed. I think that <code>this</code> refer to the current scope, so <code>this.lineText</code> should be set.</p>\n",
                    "is_accepted": true,
                    "score": 29
                },
                {
                    "body": "<p>As @Renan mentioned, ng-include creates a new child scope.  This scope prototypically inherits (see dashed lines below) from the HomeCtrl scope.  <code>ng-model=\"lineText\"</code> actually creates a primitive scope property on the child scope, not HomeCtrl's scope.  This child scope is not accessible to the parent/HomeCtrl scope:</p>\n\n<p><img src=\"http://i.stack.imgur.com/IxZOe.png\" alt=\"ng-include scope\"></p>\n\n<p>To store what the user typed into HomeCtrl's $scope.lines array, I suggest you pass the value to the addLine function:</p>\n\n<pre><code> &lt;form ng-submit=\"addLine(lineText)\"&gt;\n</code></pre>\n\n<p>In addition, since lineText is owned by the ngInclude scope/partial, I feel it should be responsible for clearing it:</p>\n\n<pre><code> &lt;form ng-submit=\"addLine(lineText); lineText=''\"&gt;\n</code></pre>\n\n<p>Function addLine() would thus become:</p>\n\n<pre><code>$scope.addLine = function(lineText) {\n    $scope.chat.addLine(lineText);\n    $scope.lines.push({\n        text: lineText\n    });\n};\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/mrajcok/9krVn/\">Fiddle</a>.</p>\n\n<p>Alternatives:</p>\n\n<ul>\n<li>define an object property on HomeCtrl's $scope, and use that in the partial: <code>ng-model=\"someObj.lineText</code>; <a href=\"http://jsfiddle.net/mrajcok/9krVn/4/\">fiddle</a></li>\n<li>not recommended, this is more of a hack: use $parent in the partial to create/access a <code>lineText</code> property on the HomeCtrl $scope: \u00a0<code>ng-model=\"$parent.lineText\"</code>; <a href=\"http://jsfiddle.net/mrajcok/9krVn/3/\">fiddle</a></li>\n</ul>\n\n<p>It is a bit involved to explain why the above two alternatives work, but it is fully explained here: <a href=\"http://stackoverflow.com/questions/14049480/what-are-the-nuances-of-scope-prototypal-prototypical-inheritance-in-angularjs\">What are the nuances of scope prototypal / prototypical inheritance in AngularJS?</a></p>\n\n<p>I don't recommend using <code>this</code> in the addLine() function.  It becomes much less clear which scope is being accessed/manipulated.</p>\n",
                    "is_accepted": false,
                    "score": 156
                },
                {
                    "body": "<p>I've figured out how to work around this issue without mixing parent and sub scope data.\nSet a <code>ng-if</code> on the the <code>ng-include</code> element and set it to a scope variable.\nFor example :</p>\n\n<pre><code>&lt;div ng-include=\"{{ template }}\" ng-if=\"show\"/&gt;\n</code></pre>\n\n<p>In your controller, when you have set all the data you need in your sub scope, then set show to <code>true</code>. The <code>ng-include</code> will copy at this moment the data set in your scope and set it in your sub scope.</p>\n\n<p>The rule of thumb is to reduce scope data deeper the scope are, else you have this situation.</p>\n\n<p>Max</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Instead of using <code>this</code> as the accepted answer suggests, use <code>$parent</code> instead. So in your <code>partial1.html</code>you'll have:</p>\n\n<pre><code>&lt;form ng-submit=\"$parent.addLine()\"&gt;\n    &lt;input type=\"text\" ng-model=\"$parent.lineText\" size=\"30\" placeholder=\"Type your message here\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>If you want to learn more about the scope in <code>ng-include</code> or other directives, check this out: <a href=\"https://github.com/angular/angular.js/wiki/Understanding-Scopes#ng-include\" rel=\"nofollow\">https://github.com/angular/angular.js/wiki/Understanding-Scopes#ng-include</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I have this module routes:</p>\n\n<pre><code>var mainModule = angular.module('lpConnect', []).\n    config(['$routeProvider', function ($routeProvider) {\n    $routeProvider.\n        when('/home', {template:'views/home.html', controller:HomeCtrl}).\n        when('/admin', {template:'views/admin.html', controller:AdminCtrl}).\n        otherwise({redirectTo:'/connect'});\n}]);\n</code></pre>\n\n<p>Home html:</p>\n\n<pre><code>&lt;div ng-include src=\"views.partial1\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p>partial1 html:</p>\n\n<pre><code>&lt;form ng-submit=\"addLine()\"&gt;\n    &lt;input type=\"text\" ng-model=\"lineText\" size=\"30\" placeholder=\"Type your message here\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>HomeCtrl:</p>\n\n<pre><code>function HomeCtrl($scope, $location, $window, $http, Common) {\n    ...\n    $scope.views = {\n        partial1:\"views/partial1.html\"\n    };\n\n    $scope.addLine = function () {\n        $scope.chat.addLine($scope.lineText);\n        $scope.lines.push({text:$scope.lineText});\n        $scope.lineText = \"\";\n    };\n...\n}\n</code></pre>\n\n<p>in the addLine function $scope.lineText is undefined, this can be resolved by adding  <strong>ng-controller=\"HomeCtrl\"</strong> to partial1.html , however it causes the controller to be called twice, what am I missing here?</p>\n",
            "last_activity_date": 1417758910,
            "question_id": 11412410,
            "score": 81,
            "tags": [
                "javascript",
                "html",
                "angularjs",
                "angularjs-scope",
                "angularjs-ng-include"
            ],
            "title": "AngularJS - losing scope when using ng-include"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>I couldn't find a way to inject and use the $routeParams service (which I would assume would be a better solution) I tried this thinking it might work:</p>\n\n<pre><code>angular.module('myApp', []).\n    config(function ($routeProvider, $routeParams) {\n        $routeProvider.when('/:primaryNav/:secondaryNav', {\n            templateUrl: 'resources/angular/templates/nav/'+$routeParams.primaryNav+'/'+$routeParams.secondaryNav+'.html'\n        });\n    });\n</code></pre>\n\n<p>Which yielded this error: <strong>Unknown provider: $routeParams from myApp</strong></p>\n\n<p>If something like that isn't possible you can change your templateUrl to point to a partial html file that just has ng-include and then set the url in your controller using $routeParams like this:</p>\n\n<pre><code>angular.module('myApp', []).\n    config(function ($routeProvider) {\n        $routeProvider.when('/:primaryNav/:secondaryNav', {\n            templateUrl: 'resources/angular/templates/nav/urlRouter.html',\n            controller: 'RouteController'\n        });\n    });\n\nfunction RouteController($scope, $routeParams) {\n        $scope.templateUrl = 'resources/angular/templates/nav/'+$routeParams.primaryNav+'/'+$routeParams.secondaryNav+'.html';\n    }\n</code></pre>\n\n<p>With this as your <strong>urlRouter.html</strong></p>\n\n<pre><code>&lt;div ng-include src=\"templateUrl\"&gt;&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 51
                },
                {
                    "body": "<p>I've added support for this in my fork of angular. It allows you to specify\n$routeProvider.when('/:some/:param/:filled/:url',{templateUrl:'/:some/:param/:filled/template.ng.html'});</p>\n\n<p><a href=\"https://github.com/jamie-pate/angular.js/commit/dc9be174af2f6e8d55b798209dfb9235f390b934\" rel=\"nofollow\">https://github.com/jamie-pate/angular.js/commit/dc9be174af2f6e8d55b798209dfb9235f390b934</a></p>\n\n<p>not sure this will get picked up as it is kind of against the grain for angular, but it is useful to me</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Alright, think I got it...</p>\n\n<p>Little background first:\nThe reason I needed this was to stick Angular on top of Node Express and have Jade process my partials for me.</p>\n\n<p>So here's whatchya gotta do...\n(drink beer and spend 20+ hours on it first!!!)...</p>\n\n<p>When you set up your module, save the <code>$routeProvider</code> globally:</p>\n\n<pre><code>// app.js:\nvar routeProvider\n    , app = angular.module('Isomorph', ['ngResource']).config(function($routeProvider){\n\n        routeProvider = $routeProvider;\n        $routeProvider\n            .when('/', {templateUrl: '/login', controller: 'AppCtrl'})\n            .when('/home', {templateUrl: '/', controller: 'AppCtrl'})\n            .when('/login', {templateUrl: '/login', controller: 'AppCtrl'})\n            .when('/SAMPLE', {templateUrl: '/SAMPLE', controller: 'SAMPLECtrl'})\n            .when('/map', {templateUrl: '/map', controller: 'MapCtrl'})\n            .when('/chat', {templateUrl: '/chat', controller: 'ChatCtrl'})\n            .when('/blog', {templateUrl: '/blog', controller: 'BlogCtrl'})\n            .when('/files', {templateUrl: '/files', controller: 'FilesCtrl'})\n            .when('/tasks', {templateUrl: '/tasks', controller: 'TasksCtrl'})\n            .when('/tasks/new', {templateUrl: '/tasks/new', controller: 'NewTaskCtrl'})\n            .when('/tasks/:id', {templateUrl: '/tasks', controller: 'ViewTaskCtrl'})\n            .when('/tasks/:id/edit', {templateUrl: '/tasks', controller: 'EditTaskCtrl'})\n            .when('/tasks/:id/delete', {templateUrl: '/tasks', controller: 'DeleteTaskCtrl'})\n        .otherwise({redirectTo: '/login'});\n\n});\n\n// ctrls.js\n...\napp.controller('EditTaskCtrl', function($scope, $routeParams, $location, $http){\n\n    var idParam = $routeParams.id;\n    routeProvider.when('/tasks/:id/edit/', {templateUrl: '/tasks/' + idParam + '/edit'});\n    $location.path('/tasks/' + idParam + '/edit/');\n\n});\n...\n</code></pre>\n\n<p>That may be more info than what was needed...</p>\n\n<ul>\n<li><p>Basically, u'll wanna store your Module's <code>$routeProvider</code> var globally, eg as <code>routeProvider</code> so that it can be accessed by your Controllers.</p></li>\n<li><p>Then you can just use <code>routeProvider</code> and create a NEW route (you can't 'RESET a route' / 'REpromise'; you must create a new one), I just added a slash (/) at the end so that it is as semantic as the first.</p></li>\n<li><p>Then (inside your Controller), set the <code>templateUrl</code> to the view you want to hit.</p></li>\n<li><p>Take out the <code>controller</code> property of the <code>.when()</code> object, lest you get an infinite request loop.</p></li>\n<li><p>And finally (still inside the Controller), use <code>$location.path()</code> to redirect to the route that was just created.</p></li>\n</ul>\n\n<p>If you're interested in how to slap an Angular app onto an Express app, you can fork my repo here: <a href=\"https://github.com/cScarlson/isomorph\" rel=\"nofollow\">https://github.com/cScarlson/isomorph</a>.</p>\n\n<p>And this method also allows for you to keep the AngularJS Bidirectional Data-Bindings in case you want to bind your HTML to your database using WebSockets: otherwise without this method, your Angular data-bindings will just output <code>{{model.param}}</code>.</p>\n\n<p>If you clone this at this time, you'll need mongoDB on your machine to run it.</p>\n\n<p>Hope this solves this issue!</p>\n\n<p>Cody</p>\n\n<p>Don't drink your bathwater.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This very helpful feature is now available starting at version 1.1.2 of AngularJS. It's considered unstable but I have used it (1.1.3) and it works fine.</p>\n\n<p>Basically you can use a function to generate a templateUrl string. The function is passed the route parameters that you can use to build and return the templateUrl string.</p>\n\n<pre><code>var app = angular.module('app',[]);\n\napp.config(\n    function($routeProvider) {\n        $routeProvider.\n            when('/', {templateUrl:'/home'}).\n            when('/users/:user_id', \n                {   \n                    controller:UserView, \n                    templateUrl: function(params){ return '/users/view/' + params.user_id; }\n                }\n            ).\n            otherwise({redirectTo:'/'});\n    }\n);\n</code></pre>\n\n<p>Many thanks to <a href=\"https://github.com/lrlopez\">https://github.com/lrlopez</a> for the pull request.</p>\n\n<p><a href=\"https://github.com/angular/angular.js/pull/1524\">https://github.com/angular/angular.js/pull/1524</a></p>\n",
                    "is_accepted": false,
                    "score": 89
                },
                {
                    "body": "<p>Router:-</p>\n\n<pre><code>...\n.when('/enquiry/:page', {\n    template: '&lt;div ng-include src=\"templateUrl\" onload=\"onLoad()\"&gt;&lt;/div&gt;',\n    controller: 'enquiryCtrl'\n})\n...\n</code></pre>\n\n<p>Controller:-</p>\n\n<pre><code>...\n// template onload event\n$scope.onLoad = function() {\n    console.log('onLoad()');\n    f_tcalInit();  // or other onload stuff\n}\n\n// initialize\n$scope.templateUrl = 'ci_index.php/adminctrl/enquiry/'+$routeParams.page;\n...\n</code></pre>\n\n<p>I believe it is a weakness in angularjs that $routeParams is NOT visible inside the router. A tiny enhancement would make a world of difference during implementation.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I was having a similar issue and used '$stateParams' instead of 'routeParam'</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>templateUrl can be use as function with returning generated URL. We can manipulate url with passing argument which takes routeParams. </p>\n\n<p>See the example.</p>\n\n<pre><code>.when('/:screenName/list',{\n    templateUrl: function(params){\n         return params.screenName +'/listUI'\n    }\n})\n</code></pre>\n\n<p>Hope this help.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Our application has 2-level navigating. We want to use AngularJS <code>$routeProvider</code> to dynamically provide templates to an <code>&lt;ng-view /&gt;</code>. I was thinking of doing something along the lines of this:</p>\n\n<pre><code>angular.module('myApp', []).\nconfig(['$routeProvider', function($routeProvider) {\n    $routeProvider.when('/:primaryNav/:secondaryNav', {\n        templateUrl: 'resources/angular/templates/nav/'+&lt;&lt;primaryNavHere&gt;&gt;+'/'+&lt;&lt;secondaryNavHere&gt;&gt;+'.html'\n    });\n}]);\n</code></pre>\n\n<p>I just don't know how to populate the parts within the <code>&lt;&lt;&gt;&gt;</code>. I know the  primaryNav and secondaryNav get bound to the $routeParams, but how do I access $routeParams here in order to dynamically serve up the template?</p>\n",
            "last_activity_date": 1417594956,
            "question_id": 11534710,
            "score": 48,
            "tags": [
                "javascript",
                "angularjs"
            ],
            "title": "AngularJS - How to use $routeParams in generating the templateUrl?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Revealing module pattern is described pretty good in <a href=\"http://www.addyosmani.com/resources/essentialjsdesignpatterns/book/#designpatternsjavascript\">Essential JavaScript Design Patterns For Beginners</a> article.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>To the code outside the module, it makes little difference.  In all 3 cases in that article, the methods are called the same way.  But the structure of the module itself is internally different.</p>\n\n<p>Crockford's module pattern and what they call the \"revealing module pattern\" are pretty much the same thing, structurally.  The only difference being that they assign the method to a local var first in order be more readable.  But there really isn't anything special about it, and you have some examples right there in your link.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<blockquote>\n  <p>DC = Douglas Crockford<br>\n    RMP = Revealing Module Pattern</p>\n</blockquote>\n\n<h2>Difference between DC and RMP is mainly organizational/readable</h2>\n\n<p>Example is presented in the article itself? And what exactly are you asking because those things don't have anything to do with files but rather to closures.</p>\n\n<p>You put everything in a closure (function) and expose only those part that you wish to be accessible. The difference between DC style and RMP is that in the first one functions are defined in different places while in the RMP they're always defined in the same place and then afterwards <em>revealed</em> in the <em>public</em> object literal.</p>\n\n<p>So in the DC and RMP you have:</p>\n\n<ul>\n<li>closure that makes it possible to define private parts (variables and functions)</li>\n<li>private part</li>\n<li>public result that defines publicly visible functionality and variables (state)</li>\n</ul>\n\n<p>These two patterns differ only in readability. In DC case you can't always know where certain functionality will be defined, but in the RMP you always know everything is in the private part.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>A small example:</p>\n\n<pre><code>var revealed = function(){\n   var a = [1,2,3];\n   function abc(){\n     return (a[0]*a[1])+a[2];\n   }\n\n   return {\n      name: 'revealed',\n      abcfn: abc\n   }\n}();\n</code></pre>\n\n<p>in the anonymous function that is initiated to give <code>revealed</code> a value, <code>a</code> and <code>abc</code> are private to that function. What the function returns is an object literal with a <code>name</code> property and a <code>abcfn</code> property, which is a reference to the <code>abc function</code>. The <code>abc function</code> uses the private variable <code>a</code>. This can all be done thanks to the use of <a href=\"http://www.javascriptkit.com/javatutors/closures.shtml\">closures</a> (everything within the scope of a function can be referenced by everything else in that same function).</p>\n\n<p>Revealed usage:</p>\n\n<pre><code>alert(revealed.name);    //=&gt; 'revealed'\nalert(revealed.abcfn()); //=&gt; 5 (1*2+3)\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 62
                },
                {
                    "body": "<p>The method called by the author \"Douglas Crockford's pattern for creating objects\" is actually the module pattern that was developed mostly by Richard Cornford <em>et al</em>. See <a href=\"http://groups.google.com/group/comp.lang.javascript/msg/9f58bd11bd67d937\">http://groups.google.com/group/comp.lang.javascript/msg/9f58bd11bd67d937</a> </p>\n\n<p>As for examples, there are many. Read the following article and follow some of the links: <a href=\"http://peter.michaux.ca/articles/module-pattern-provides-no-privacy-at-least-not-in-javascript-tm\">http://peter.michaux.ca/articles/module-pattern-provides-no-privacy-at-least-not-in-javascript-tm</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The basic concept of a Revealing Module is that you have an <code>Object</code> which <em>encapsulates</em> its data and behavior:</p>\n\n<pre><code>var Module = (function(){\n    var privateStuff = {};\n    var publicStuff = {};\n\n    return publicStuff;\n})();\n</code></pre>\n\n<p>However, there are some best practices you should employ when using this pattern. Here's a module (\"<code>Modulus</code>\") with some properties for demonstration sake, which employs some of these practices:</p>\n\n<pre><code>function AbstractSomeClass(id) {\n    this.id = id;\n    return this;\n}\n\nvar Modulus = (new (function SomeClass() {\n    var thus = this;\n\n    function NameClass(name){\n        this.value = thus.name || name;\n    }\n\n    AbstractSomeClass.call(this, 998);\n\n    this.name = 'Touring';\n    this.name = ( new NameClass('Hofstadter') ).value;\n\n    return {\n        id: this.id,\n        name: this.name\n    };\n})());\n</code></pre>\n\n<p>Notice the <code>(new (function SomeClass(){ ... })());</code> syntax. Using <code>new</code> like this allows you to use the <code>this</code> keyword <em>inside</em> of the closure. This is handy if you need to inherit properties from another class (<code>AbstractSomeClass.call(this, 998);</code>) -- However, you'll still need to <em>reveal</em> the properties that you would like to have public, e.g.:</p>\n\n<pre><code>return {\n    id: this.id,\n    name: this.name\n};\n</code></pre>\n\n<p>Also notice that we assign <code>this</code> to <code>thus</code> -- which allows us to use the Parent-<code>this</code> inside of a subclass that has its own <code>this</code> scope (<code>this.value = thus.name || name;</code>)</p>\n\n<p>Once again, these are just a few of the conventions and best practices that are suggested.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I stumbled across this post: <a href=\"http://blog.alexanderdickson.com/javascript-revealing-module-pattern\"><em>JavaScript's Revealing Module Pattern</em></a>. I would like to use this in my project. </p>\n\n<p>Let's imagine I have a function <code>abc</code> and I am calling that function in my main JavaScript file. </p>\n\n<p>Does this pattern make things different? Can anyone show me a basic example of this pattern?</p>\n",
            "last_activity_date": 1408135764,
            "question_id": 5647258,
            "score": 47,
            "tags": [
                "javascript"
            ],
            "title": "How to use Revealing module pattern in JavaScript"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>You actually don't need any jQuery to check if there is an overflow happening or not. Using <a href=\"https://developer.mozilla.org/en/DOM/element.offsetHeight\" rel=\"nofollow\"><code>element.offsetHeight</code></a>, <a href=\"https://developer.mozilla.org/en/DOM/element.offsetWidth\" rel=\"nofollow\"><code>element.offsetWidth</code></a> , <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element.scrollHeight\" rel=\"nofollow\"><code>element.scrollHeight</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Element.scrollWidth\" rel=\"nofollow\"><code>element.scrollWidth</code></a> you can determine if your element have content bigger than it's size:</p>\n\n<pre><code>if (element.offsetHeight &lt; element.scrollHeight ||\n    element.offsetWidth &lt; element.scrollWidth) {\n    // your element have overflow\n} else {\n    // your element doesn't have overflow\n}\n</code></pre>\n\n<p>See example in action: <a href=\"http://jsbin.com/ujiwah/4/edit#javascript,html,live\" rel=\"nofollow\">Fiddle</a></p>\n\n<p>But if you want to know what element inside your element is visible or not then you need to do more calculation. There is three states for a child element in terms of visibility:</p>\n\n<p><img src=\"http://i.stack.imgur.com/O56yk.png\" alt=\"enter image description here\"></p>\n\n<p>If you want to count semi-visible items it would be the script you need:</p>\n\n<pre><code>var invisibleItems = [];\nfor(var i=0; i&lt;element.childElementCount; i++){\n  if (element.children[i].offsetTop + element.children[i].offsetHeight &gt;\n      element.offsetTop + element.offsetHeight ||\n      element.children[i].offsetLeft + element.children[i].offsetWidth &gt;\n      element.offsetLeft + element.offsetWidth ){\n\n        invisibleItems.push(element.children[i]);\n    }\n\n}\n</code></pre>\n\n<p>And if you don't want to count semi-visible you can calculate with a little difference.</p>\n",
                    "is_accepted": true,
                    "score": 141
                },
                {
                    "body": "<p>In plain English: Get the parent element. Check it's height, and save that value. Then loop through all the child elements and check their individual heights.</p>\n\n<p>This is dirty, but you might get the basic idea:\n<a href=\"http://jsfiddle.net/VgDgz/\" rel=\"nofollow\">http://jsfiddle.net/VgDgz/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>One method is to check scrollTop against itself.  Give the content a scroll value larger than its size and then check to see if its scrollTop is 0 or not (if it is not 0, it has overflow.)</p>\n\n<p><a href=\"http://jsfiddle.net/ukvBf/\" rel=\"nofollow\">http://jsfiddle.net/ukvBf/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's a pure jQuery solution, but it's rather messy:</p>\n\n<pre><code>var div_height = $(this).height();\nvar vertical_div_top_position = $(this).offset().top;\nvar lastchild_height = $(this).children('p:last-child').height();\nvar vertical_lastchild_top_position = $(this).children('p:last-child').offset().top;\nvar vertical_lastchild_bottom_position = lastchild_height + vertical_lastchild_top_position;\nvar real_height = vertical_lastchild_bottom_position - vertical_div_top_position;\n\nif (real_height &gt; div_height){\n    //overflow div\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Partially based on Mohsen's answer (the added first condition covers the case where the child is hidden before the parent):</p>\n\n<pre><code>jQuery.fn.isChildOverflowing = function (child) {\n  var p = jQuery(this).get(0);\n  var el = jQuery(child).get(0);\n  return (el.offsetTop &lt; p.offsetTop || el.offsetLeft &lt; p.offsetLeft) ||\n    (el.offsetTop + el.offsetHeight &gt; p.offsetTop + p.offsetHeight || el.offsetLeft + el.offsetWidth &gt; p.offsetLeft + p.offsetWidth);\n};\n</code></pre>\n\n<p>Then just do:</p>\n\n<pre><code>jQuery('#parent').isChildOverflowing('#child');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had the same question as the OP, and none of those answers fitted my needs. I needed a simple condition, for a simple need.</p>\n\n<p>Here's my answer:</p>\n\n<pre><code>if ($(\"#myoverflowingelement\").prop('scrollWidth') &gt; $(\"#myoverflowingelement\").width() ) {\n  alert(\"this element is overflowing !!\");\n}\nelse {\n alert(\"this element is not overflowing!!\");\n}\n</code></pre>\n\n<p>Also, you can change <code>scrollWidth</code> by <code>scrollHeight</code> if you need to test the either case. </p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>So I used the overflowing jquery library: <a href=\"https://github.com/kevinmarx/overflowing\" rel=\"nofollow\">https://github.com/kevinmarx/overflowing</a></p>\n\n<p>After installing the library, if you want to assign the class <code>overflowing</code> to all overflowing elements, you simply run: </p>\n\n<pre><code>$('.targetElement').overflowing('.parentElement')\n</code></pre>\n\n<p>This will then give the class <code>overflowing</code>, as in  <code>&lt;div class=\"targetElement overflowing\"&gt;</code> to all elements that are overflowing. You could then add this to some event handler(click, mouseover) or other function that will run the above code so that it updates dynamically. </p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a div with a fixed height and <code>overflow:hidden;</code></p>\n\n<p>I want to check with jQuery if the div has elements that are overflowing past the fixed height of the div. How can I do this?</p>\n",
            "last_activity_date": 1424009020,
            "question_id": 7668636,
            "score": 56,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "Check with jquery if div has overflowing elements"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>JavaScript is loosely typed, so it performs type coercion/conversion in certain circumstances:</p>\n\n<p><a href=\"http://blog.jeremymartin.name/2008/03/understanding-loose-typing-in.html\">http://blog.jeremymartin.name/2008/03/understanding-loose-typing-in.html</a><br />\n<a href=\"http://www.jibbering.com/faq/faq_notes/type_convert.html\">http://www.jibbering.com/faq/faq_notes/type_convert.html</a></p>\n\n<p>Other examples:</p>\n\n<pre><code>&gt;&gt;&gt; +new Date()\n1224589625406\n&gt;&gt;&gt; +\"3\"\n3\n&gt;&gt;&gt; +true\n1\n&gt;&gt;&gt; 3 == \"3\"\ntrue\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>It does exactly the same thing as:</p>\n\n<pre>\nfunction(){ return 0+new Date; }\n</pre>\n\n<p>that has the same result as:</p>\n\n<pre>\nfunction(){ return new Date().getTime(); }\n</pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>that's the + unary operator, it's equivalent to:</p>\n\n<pre><code>function(){ return Number(new Date); }\n</code></pre>\n\n<p>see:\n<a href=\"http://xkr.us/articles/javascript/unary-add/\">http://xkr.us/articles/javascript/unary-add/</a></p>\n",
                    "is_accepted": true,
                    "score": 133
                },
                {
                    "body": "<p>Here is the <a href=\"http://bclary.com/2004/11/07/#a-11.4.6\">specification</a> regading the \"unary add\" operator. Hope it helps...</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I've seen this in a few <a href=\"http://stackoverflow.com/questions/221294/how-do-you-get-a-timestamp-in-javascript#221357\">places</a></p>\n\n<pre><code>function(){ return +new Date; }\n</code></pre>\n\n<p>And I can see that it is returning a timestamp rather than a date object, but I can't find any documentation on what the plus sign is doing.</p>\n\n<p>Can anyone explain?</p>\n",
            "last_activity_date": 1224591080,
            "question_id": 221539,
            "score": 106,
            "tags": [
                "javascript",
                "syntax"
            ],
            "title": "What does the plus sign do in &#39;return +new Date&#39;"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>It is not allowed (according to AdSense terms) to try and reload ads during the page life-cycle. Also, it is hardly possible (thanks to the platform architecture).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It is not allowed. but I think you can use a iframe for that. I saw good tutorials of that.\nI tried do it by ajax by I rollback my changes for the Adsense TOS</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>As both of the other answers state, refreshing your AdSense advertisements automatically isn't allowed.  I understand that you only intend to refresh the ad in response to user action, but it <em>still</em> isn't allowed, even though it should be!</p>\n\n<p>Remember, the reason why you want to update the advertisements is so that you can show new ones.  Displaying an advertisement is called an \"impression.\"  When you use code to refresh the ads, you are automatically generating ad impressions.</p>\n\n<p><a href=\"https://www.google.com/adsense/support/bin/answer.py?hl=en&amp;answer=48182\">AdSense Program Policies</a> state (emphasis mine):</p>\n\n<blockquote>\n  <p>Invalid Clicks and Impressions</p>\n  \n  <p>Clicks on Google ads must result from genuine user interest. <strong>Any method that artificially generates clicks or impressions on your Google ads is strictly prohibited.</strong> These prohibited methods include but are not limited to repeated manual clicks or impressions, using robots, automated click and impression generating tools, third-party services that generate clicks or impressions such as paid-to-click, paid-to-surf, autosurf, and click-exchange programs, or any deceptive software.</p>\n</blockquote>\n\n<p>Refreshing your advertisements is a violation of the letter of the rule against generating impressions.  With that said, I think any reasonable person would agree that refreshing advertisements in an AJAX app <em>in response to user behavior</em> (e.g. in response to a click) isn't a violation of the <em>spirit</em> of the rule.</p>\n\n<p>For example, imagine rewriting your entire app to stop using AJAX.  That's clearly a worse experience for your users (it's slower, the page flashes on every click, the page can't dynamically update in the background), but, by a technicality, it's not a violation of the AdSense Program Policies.</p>\n\n<p>Clearly Google <em>meant</em> to prohibit automatically replacing the advertisements every five seconds (creating a \"slideshow\" of advertisements).  Google also meant to prohibit making your site look more attractive to advertisers by appearing to have more visits than you actually have.  I'm sure they didn't <em>intend</em> to prevent you from designing a high-performance AJAX website... but unfortunately sometimes rules have unintended consequences.</p>\n\n<p>Of course, as you originally pointed out, you CAN still refresh your advertisements if you embed them in an iframe and modify its location.  (<a href=\"http://www.jguru.com/forums/view.jsp?EID=1305379\">Here's how to use iframes in an AJAX application to refresh AdSense</a>.)</p>\n\n<p>You rejected iframes in your initial question, perhaps because you knew that using iframes would violate Google's policies...  but if you insist on breaking the rules, you might as well break them all the way!  ;-)</p>\n\n<p>Ultimately, I think you'll find that generating impressions this way isn't worth the risk: you'll \"refresh\" the ads only to find that Google is just showing you the exact same ads as before.</p>\n",
                    "is_accepted": true,
                    "score": 44
                },
                {
                    "body": "<p>Just include the ads in the pages you are loading via ajax.  There can be nothing wrong with loading the ads from a file via ajax on a per page basis.  </p>\n\n<p>if I load Read.inc which has some content and an ad\nClick something on the page and it takes you to Make.inc which has content an an ad.</p>\n\n<p>Whats wrong with that? That's organic.  One load with the ad as part of the content.</p>\n\n<p>It's the same as clicking a link.</p>\n\n<p>I haven't actually tried this yet, but it certainly seems logical.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know I'm a year and a half late to the party, but... It's possible that the problem with the ads is that they are using <code>document.write</code> (Ad servers are notorious for this, but I don't know if AdSense uses it or not.)</p>\n\n<p>If that's the case, I have a library that can help: <a href=\"http://github.com/iamnoah/writeCapture\" rel=\"nofollow\">writeCapture.js</a>. Example:</p>\n\n<pre><code>$('#ads').writeCapture().html('&lt;script src=\"whatever-your-adsense-code-is\"&gt; &lt;/script&gt;');\n</code></pre>\n\n<p>That's using jQuery, but there is also a standalone version.</p>\n\n<p>As for whether it's a TOS violation... Gmail changes ads dynamically, so it can't be that bad. As long as the content is changing too, I would think it was OK.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The new Google DFP 'tags' allow specifically 'ad refreshing for AJAX'</p>\n\n<blockquote>\n  <p>refresh</p>\n  \n  <p>pubService.refresh(slots)\n  Refreshes the specified array of slots on the page with new ads.</p>\n  \n  <p>Parameters:</p>\n  \n  <p>array slots - Optional array of slots to refresh. If not supplied, all ad slots are refreshed.\n  Example:</p>\n  \n  <p>var slot1 = googletag.defineUnit(\"/1234567/leaderboard\", [728, 90], \"div-1\").addService(googletag.pubads());</p>\n  \n  <p>var slot2 = googletag.defineUnit(\"/1234567/skyscraper\", [160, 600], \"div-2\").addService(googletag.pubads());</p>\n  \n  <p>// The call to refresh fetches a new ad for each slot</p>\n  \n  <p>googletag.pubads().refresh([slot1, slot2]);\n  <a href=\"http://support.google.com/dfp_sb/bin/answer.py?hl=en&amp;answer=2372721&amp;expand=pubservice_details#refresh\">http://support.google.com/dfp_sb/bin/answer.py?hl=en&amp;answer=2372721&amp;expand=pubservice_details#refresh</a></p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Whoever comes across this question again, here is an answer to this, from the <a href=\"https://support.google.com/dfp_sb/answer/3058726?hl=en&amp;ref_topic=4409240\" rel=\"nofollow\">google help center</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I have a <code>&lt;div&gt;</code> that holds a google ad. My website is mostly AJAX and there is no need for a browser refresh. That means my ads will not refresh either, which isn't ideal, a user staring at one ad all day. </p>\n\n<p>So I wanted a way to refresh a particular <code>&lt;div&gt;</code> on a page. I found many solutions but they didn't work. For example, using JQuery's html function:</p>\n\n<pre><code>$(\"#ads\").html(\"google ad script here\");\n</code></pre>\n\n<p>This managed to refresh the whole page no idea how. I can also make an AJAX request to a HTML page that contains the Google ad but I am guessing it will have the same effect as the above attempt.</p>\n\n<p>I do not want to use iFrames.</p>\n\n<p>Is there any other option open to me? My pea brain can not think of anymore. :)</p>\n\n<h2>EDIT:</h2>\n\n<p>It is allowed since I will be initiating the refresh only when a user clicks a link.</p>\n\n<p>A prime example is Yahoo Mail - their new AJAX mailbox uses this same method, when a user clicks a link then a new ad is shown.</p>\n",
            "last_activity_date": 1399014976,
            "question_id": 435391,
            "score": 31,
            "tags": [
                "javascript",
                "ajax",
                "html",
                "refresh",
                "google-adwords"
            ],
            "title": "Refresh a Div that has a Google ad inside it"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>You can't clear the cache with javascript.\nA common way is to append the revision number or last updated timestamp to the file, like this:</p>\n\n<blockquote>\n  <p>myscript.123.js</p>\n</blockquote>\n\n<p>or</p>\n\n<blockquote>\n  <p>myscript.js?updated=1234567890</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 68
                },
                {
                    "body": "<p>Try changing the JavaScript file's src? From this:</p>\n\n<pre><code>&lt;script language=\"JavaScript\" src=\"js/myscript.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>To this:</p>\n\n<pre><code>&lt;script language=\"JavaScript\" src=\"js/myscript.js?n=1\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>This method should force your browser to load a new copy of the JS file.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I tend to version my framework then apply the version number to script and style paths</p>\n\n<pre><code>&lt;cfset fw.version = '001' /&gt;\n&lt;script src=\"/scripts/#fw.version#/foo.js\"/&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can also force the code to be reloaded every hour, like this, in PHP :</p>\n\n<pre><code>&lt;?php\necho '&lt;script language=\"JavaScript\" src=\"js/myscript.js?token='.date('YmdH').'\"&gt;';\n?&gt;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"js/myscript.js?v=&lt;?php echo date('YmdHis'); ?&gt;\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's a snippet of what I'm using for my latest project.</p>\n\n<p>From the controller:</p>\n\n<pre><code>if ( IS_DEV ) {\n    $this-&gt;view-&gt;cacheBust = microtime(true);\n} else {\n    $this-&gt;view-&gt;cacheBust = file_exists($versionFile) \n    \t// The version file exists, encode it\n    \t? urlencode( file_get_contents($versionFile) )\n    \t// Use today's year and week number to still have caching and busting \n    \t: date(\"YW\");\n}\n</code></pre>\n\n<p>From the view:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"/javascript/somefile.js?v=&lt;?= $this-&gt;cacheBust; ?&gt;\"&gt;&lt;/script&gt;\n&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/css/layout.css?v=&lt;?= $this-&gt;cacheBust; ?&gt;\"&gt;\n</code></pre>\n\n<p>Our publishing process generates a file with the revision number of the current build.  This works by URL encoding that file and using that as a cache buster.  As a fail-over, if that file doesn't exist, the year and week number are used so that caching still works, and it will be refreshed at least once a week.</p>\n\n<p>Also, this provides cache busting for every page load while in the development environment so that developers don't have to worry with clearing the cache for any resources (javascript, css, ajax calls, etc).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can call <a href=\"http://msdn.microsoft.com/en-us/library/ms536691%28VS.85%29.aspx\">window.location.reload(true)</a> to reload the current page.  It will ignore any cached items and retrieve new copies of the page, css, images, JavaScript, etc from the server.  This doesn't clear the whole cache, but has the effect of clearing the cache for the page you are on.</p>\n\n<p>However, your best strategy is to version the path or filename as mentioned in various other answers.  In addition, see <a href=\"http://www.stevesouders.com/blog/2008/08/23/revving-filenames-dont-use-querystring/\">Revving Filenames: don\u2019t use querystring</a> for reasons not to use <code>?v=n</code> as your versioning scheme.</p>\n",
                    "is_accepted": false,
                    "score": 73
                },
                {
                    "body": "<p>put this at the end of your template :</p>\n\n<pre><code>var scripts =  document.getElementsByTagName('script');\nvar torefreshs = ['myscript.js', 'myscript2.js'] ; // list of js to be refresh\nvar key = 1; // change this key every time you want force a refresh\nfor(var i=0;i&lt;scripts.length;i++){ \n   for(var j=0;j&lt;torefreshs;j++){ \n      if(scripts[i].src &amp;&amp; (scripts[i].src.indexOf(torefreshs[j]) &gt; -1)){\n        new_src = scripts[i].src.replace(torefreshs[j],torefreshs[j] + 'k=' + key );\n        scripts[i].src = new_src; // change src in order to refresh js\n      } \n   }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>or you can just read js file by server with file_get_contets and then put in echo in the header the js contents</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Other than caching every hour, or every week, you may cache according to file data.</p>\n\n<p>Example (in PHP):</p>\n\n<pre><code>&lt;script src=\"js/my_script.js?v=&lt;?=md5_file('js/my_script.js')?\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>or even:</p>\n\n<pre><code>&lt;script src=\"js/my_script.js?v=&lt;?=filemtime('js/my_script.js');?&gt;\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I had some troubles with the code suggested by yboussard.  The inner j loop didn't work.  Here is the modified code that I use with success.</p>\n\n<pre><code>function reloadScripts(toRefreshList/* list of js to be refresh */, key /* change this key every time you want force a refresh */) {\n    var scripts = document.getElementsByTagName('script');\n    for(var i = 0; i &lt; scripts.length; i++) {\n        var aScript = scripts[i];\n        for(var j = 0; j &lt; toRefreshList.length; j++) {\n            var toRefresh = toRefreshList[j];\n            if(aScript.src &amp;&amp; (aScript.src.indexOf(toRefresh) &gt; -1)) {\n                new_src = aScript.src.replace(toRefresh, toRefresh + '?k=' + key);\n                // console.log('Force refresh on cached script files. From: ' + aScript.src + ' to ' + new_src)\n                aScript.src = new_src;\n            }\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are using php can do:</p>\n\n<blockquote>\n  <p><code>&lt;script src=\"js/myscript.js?rev=&lt;?php echo time();?&gt;\" type=\"text/javascript\"&gt;&lt;/script&gt;</code></p>\n</blockquote>\n\n<p>Excuse me for my english, i learn this.</p>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<p>How do I clear a browsers cache with JavaScript?</p>\n\n<p>We deployed the latest JavaScript code but we are unable to get the latest JavaScript code.</p>\n",
            "last_activity_date": 1399043503,
            "question_id": 1011605,
            "score": 47,
            "tags": [
                "javascript",
                "caching"
            ],
            "title": "Clear the cache in JavaScript"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Q1: Multiple consecutive javascript statements separated by a comma take the value of the last statement.  So:</p>\n\n<p><code>(1, eval)</code> takes the value of the last one which is a function reference to the <code>eval()</code> function.  It apparently does it this way to make the <code>eval()</code> call into an indirect eval call that will be evaluated in the global scope in ES5.  Details explained <a href=\"http://perfectionkills.com/global-eval-what-are-the-options/\" rel=\"nofollow\">here</a>.</p>\n\n<p>Q2: There must be some environment that doesn't define a global <code>this</code>, but does define <code>eval('this')</code>.  That's the only reason I can think of for that.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>To Q1: </p>\n\n<p>I think this is a good example of comma operator in JS. I like the explanation for comma operator in this article: <a href=\"http://javascriptweblog.wordpress.com/2011/04/04/the-javascript-comma-operator/\">http://javascriptweblog.wordpress.com/2011/04/04/the-javascript-comma-operator/</a></p>\n\n<p>The comma operator evaluates both of its operands (from left to right) and returns the value of the second operand.</p>\n\n<p>To Q2:</p>\n\n<p><code>(1, eval)('this')</code> is considered as indirect eval call, which in ES5 does execute code globally. So the result will be the global the context.</p>\n\n<p>See <a href=\"http://perfectionkills.com/global-eval-what-are-the-options/#evaling_in_global_scope\">http://perfectionkills.com/global-eval-what-are-the-options/#evaling_in_global_scope</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>The difference between <code>(1,eval)</code> and plain old <code>eval</code> is that the former is a <em>value</em> and the latter is an lvalue.  It would be more obvious if it were some other identifier:</p>\n\n<pre><code>var x;\nx = 1;\n(1, x) = 1; //  syntax error, of course!\n</code></pre>\n\n<p>That is <code>(1,eval)</code> is an expression that yields <code>eval</code> (just as say, <code>(true &amp;&amp; eval)</code> or <code>(0 ? 0 : eval)</code> would), but it's not a reference to <code>eval</code>.</p>\n\n<p>Why do you care?</p>\n\n<p>Well, the Ecma spec considers a <em>reference</em> to <code>eval</code> to be a \"direct eval call\", but an expression that merely yields <code>eval</code> to be an indirect one -- and indirect eval calls are guaranteed to execute in global scope.</p>\n\n<p>Things I still don't know:</p>\n\n<ol>\n<li>Under what circumstance does a direct eval call <em>not</em> execute in global scope?</li>\n<li>Under what circumstance can the <code>this</code> of a function at global scope <em>not</em> yield the global object?</li>\n</ol>\n\n<p>Some more information can be gleaned <a href=\"http://perfectionkills.com/global-eval-what-are-the-options/\">here</a>.</p>\n\n<p><strong>EDIT</strong> </p>\n\n<p>Apparently, the answer to my first question is, \"almost always\".  A direct <code>eval</code> executes from the <em>current</em> scope.  Consider the following code:</p>\n\n<pre><code>var x = 'outer';\n(function() {\n  var x = 'inner';\n  eval('console.log(\"direct call: \" + x)'); \n  (1,eval)('console.log(\"indirect call: \" + x)'); \n})();\n</code></pre>\n\n<p>Not surprisingly (heh-heh), this prints out:</p>\n\n<pre><code>direct call: inner\nindirect call: outer\n</code></pre>\n\n<p><strong>EDIT</strong></p>\n\n<p>After more experimentation, I'm going to provisionally say that <code>this</code> cannot be set to <code>null</code> or <code>undefined</code>.  It can be set to other falsy values (0, '', NaN, false), but only <em>very</em> deliberately.</p>\n\n<p>I'm going to say your source is suffering from a mild and reversible cranio-rectal inversion and might want to consider spending a week programming in Haskell.</p>\n",
                    "is_accepted": true,
                    "score": 50
                },
                {
                    "body": "<p>The fragment,</p>\n\n<pre><code>var global = (function () {  \n    return this || (1, eval)('this');  \n}());  \n</code></pre>\n\n<p>will correctly evaluate to the global object even in strict mode. In non-strict mode the value of <code>this</code> is the global object but in strict mode it is <code>undefined</code>. The expression <code>(1, eval)('this')</code> will always be the global object. The reason for this involves the rules around indirect verses direct <code>eval</code>. Direct calls to <code>eval</code> has the scope of the caller and the string <code>this</code> would evaluate to the value of <code>this</code> in the closure. Indirect <code>eval</code>s evaluate in global scope as if they were executed inside a function in the global scope. Since that function is not itself a strict-mode function the global object is passed in as <code>this</code> and then the expression <code>'this'</code> evaluates to the global object. The expression <code>(1, eval)</code> is just a fancy way to force the <code>eval</code> to be indirect and return the global object.</p>\n\n<p>A1: <code>(1, eval)('this')</code> is not the same as <code>eval('this')</code> because of the special rules around indirect verse direct calls to <code>eval</code>.</p>\n\n<p>A2: The original works in strict mode, the modified versions do not.</p>\n",
                    "is_accepted": false,
                    "score": 21
                }
            ],
            "body": "<p>I start to read <a href=\"https://github.com/shichuan/javascript-patterns/\">JavaScript Pattern</a>, some <a href=\"https://github.com/shichuan/javascript-patterns/blob/master/general-patterns/access-to-global-object.html\">codes</a> confused me.</p>\n\n<pre><code>var global = (function () {\n    return this || (1, eval)('this');\n}());\n</code></pre>\n\n<p>Here are my questions:</p>\n\n<p>Q1: </p>\n\n<blockquote>\n  <p>(1, eval) === eval?</p>\n</blockquote>\n\n<p>Why it works? How? </p>\n\n<p>Q2: Why not just</p>\n\n<pre><code>var global = (function () {\n    return this || eval('this');\n}());\n</code></pre>\n\n<p>or</p>\n\n<pre><code> var global = (function () {\n    return this;\n}());\n</code></pre>\n\n<p>Could anyone tell me? Thank you.</p>\n",
            "last_activity_date": 1417602118,
            "question_id": 9107240,
            "score": 37,
            "tags": [
                "javascript",
                "eval"
            ],
            "title": "(1,eval)(&#39;this&#39;) vs eval(&#39;this&#39;) in JavaScript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>You could do something like this:</p>\n\n<pre><code>var a = (function() {\n    var original_a = a;\n\n    if (condition) {\n        return function() {\n            new_code();\n            original_a();\n        }\n    }\n    else {\n        return function() {\n            original_a();\n            other_new_code();\n        }\n    }\n})();\n</code></pre>\n\n<p>Declaring <code>original_a</code> inside an anonymous function keeps it from cluttering the global namespace, but it's available in the inner functions.</p>\n\n<p>Like Nermaster mentioned in the comments, be sure to include the <code>()</code> at the end. You want to call the outer function and store the <em>result</em> (one of the two inner functions) in <code>a</code>, not store the outer function itself in <code>a</code>.</p>\n",
                    "is_accepted": true,
                    "score": 128
                },
                {
                    "body": "<p>The <a href=\"http://docs.jquery.com/Types#Proxy_Pattern\">Proxy pattern</a> might help you:</p>\n\n<pre><code>(function() {\n  // log all calls to setArray\n  var proxied = jQuery.fn.setArray;\n  jQuery.fn.setArray = function() {\n    console.log( this, arguments );\n    return proxied.apply( this, arguments );\n  };\n})();\n</code></pre>\n\n<blockquote>\n  <p>The above wraps its code in a function to hide the \"proxied\"-variable. It saves jQuery's setArray-method in a closure and overwrites it. The proxy then logs all calls to the method and delegates the call to the original. Using apply(this, arguments) guarantees that the caller won't be able to notice the difference between the original and the proxied method.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>Thanks guys the proxy pattern really helped.....Actually I wanted to call a global function foo.. \nIn certain pages i need do to some checks. So I did the following.</p>\n\n<pre><code>//Saving the original func\n\nvar org_foo = window.foo;\n\n//Assigning proxy fucnc\n\nwindow.foo = function(args){\n\n   //Performing checks\n\n   if(checkCondition(args)){\n\n     //Calling original funcs\n\n     org_foo(args);\n   }\n};\n</code></pre>\n\n<p>Thnx this really helped me out</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>You can override a function using a construct like:</p>\n\n<blockquote>\n  <p>function override(f, g) {\n      return function() {\n          return g(f);\n      } }</p>\n</blockquote>\n\n<p>For example:</p>\n\n<blockquote>\n  <p>a = override(a,\n      function(original_a) {</p>\n\n<pre><code>     if (condition) { new_code(); original_a(); }\n     else { original_a(); other_new_code(); }\n});\n</code></pre>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Passing arbitrary arguments:</p>\n\n<pre><code>a = override(a, function(original_a) {\n    if (condition) { new_code(); original_a.apply(this, arguments) ; }\n    else { original_a.apply(this, arguments); other_new_code(); }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The examples above don't correctly apply <code>this</code> or pass <code>arguments</code> correctly to the function override. Underscore _.wrap() wraps existing functions, applies <code>this</code> and passes <code>arguments</code> correctly. See: <a href=\"http://underscorejs.org/#wrap\" rel=\"nofollow\">http://underscorejs.org/#wrap</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>(The answer to this, if there is one, is probably out there already, but I lack the proper terminology.)</p>\n\n<p>I have a function, <code>a()</code>, that I want to override, but also have the original <code>a()</code> be performed in an order depending on the context. For example, sometimes when I'm generating a page I'll want to override like this:</p>\n\n<pre><code>function a()\n{\n  new_code();\n  original_a();\n}\n</code></pre>\n\n<p>and sometimes like this:</p>\n\n<pre><code>function a()\n{\n  original_a();\n  other_new_code();\n}\n</code></pre>\n\n<p>How do I get that <code>original_a()</code> from within the over-riding <code>a()</code>? Is it even possible?</p>\n\n<p>(Please don't suggest alternatives to over-riding in this way, I know of many. I'm asking about this way specifically.)</p>\n",
            "last_activity_date": 1425656667,
            "question_id": 296667,
            "score": 99,
            "tags": [
                "javascript",
                "override",
                "user-defined-functions"
            ],
            "title": "Overriding a JavaScript function while referencing the original"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I have only used javascript a little.  I am not sure if this will help but it looks very similar to what you are talking about and may give some insight:</p>\n\n<p><a href=\"http://www.dustindiaz.com/javascript-function-declaration-ambiguity/\" rel=\"nofollow\">http://www.dustindiaz.com/javascript-function-declaration-ambiguity/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Some languages have the requirement that identifiers have to be defined before use. A reason for this is that the compiler uses a single pass on the sourcecode. </p>\n\n<p>But if there are multiple passes (or some checks are postponed) you can perfectly live without that requirement.\nIn this case, the code is probably first read (and interpreted) and then the links are set. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The body of the function \"internalFoo\" needs to go somewhere at parsing time, so when the code is read (a.k.a parsing) by the JS interpreter, the data structure for the function is created and the name is assigned.</p>\n\n<p>Only later, then the code is run, JavaScript actually tries to find out if \"internalFoo\" exists and what it is and whether it can be called, etc.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The browser reads your html from beginning to end, and can execute it as it is read and parsed into executable chunks (variable declarations, function definitions, etc.) But at any point can only use what's been defined in the html before that point.</p>\n\n<p>This is different from other programming contexts that process (compile) all your source code, link it together with any libraries you need, and construct an executable module, at which point execution begins.</p>\n\n<p>You can define functions that refer to items (variables, other functions, etc.) that are defined further along, but you can't execute those functions until all the pieces are available.</p>\n\n<p>As you become familiar with javascript, you will become intimately aware of your need to write things in  the proper sequence.</p>\n\n<p>Revision: To confirm the accepted answer (above), use Firebug to step though the script section of a web page. You'll see it skip from function to function, visiting only the first line, before it actually executes any code.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>The <code>function</code> statement is magic and causes its identifier to be bound before anything in its code-block* is executed. This differs from the <code>function</code> expression which is evaluated in normal top-down order, so if you changed the example to say:</p>\n\n<pre><code>internalFoo= function() { return true; };\n</code></pre>\n\n<p>it'd stop working. The function statement is syntactically quite separate from the function expression, even though they look almost identical and can be ambiguous in some cases.</p>\n\n<p>This is documented in the ECMAScript standard, section 10.1.3. Unfortunately ECMA-262 is not a very readable document even by standards-standards!</p>\n\n<p>*: the containing function or <code>&lt;script&gt;</code>-element.</p>\n",
                    "is_accepted": true,
                    "score": 91
                },
                {
                    "body": "<p>For the same reason the following will always put <code>foo</code> in the global namespace:</p>\n\n<pre><code>if (test condition) {\n    var foo;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<p>This code always works, and across browsers:</p>\n\n<pre><code>function fooCheck() {\n  alert(internalFoo());\n\n  return internalFoo();\n\n  function internalFoo() { return true; }\n}\nfooCheck();\n</code></pre>\n\n<p>I could not find a single reference to why it should work, though.\nI first saw this in John Resig's presentation note, but it was only mentioned. There's no explanation there or anywhere for that matter.</p>\n\n<p>Could someone please enlighten me?</p>\n",
            "last_activity_date": 1421117269,
            "question_id": 261599,
            "score": 66,
            "tags": [
                "javascript",
                "function"
            ],
            "title": "Why can I use a function before it&#39;s defined in Javascript?"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<pre><code>window.frames['frameNameOrIndex'].location.reload();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>document.getElementById('some_frame_id').contentWindow.location.reload();\n</code></pre>\n\n<p>be careful, in Firefox, <code>window.frames[]</code> cannot be indexed by id, but by name or index</p>\n",
                    "is_accepted": true,
                    "score": 74
                },
                {
                    "body": "<p>If you want it to reload at set intervals, you can also just add a meta tag like this:</p>\n\n<pre><code>&lt;meta http-equiv=\"refresh\" content=\"60\" /&gt;\n</code></pre>\n\n<p>where the number is how many seconds before it refreshes itself.</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>In IE8 using .Net, setting the <code>iframe.src</code> for the first time is ok,\nbut setting the <code>iframe.src</code> for the second time is not raising the <code>page_load</code> of the iframed page.\nTo solve it i used <code>iframe.contentDocument.location.href = \"NewUrl.htm\"</code>.</p>\n\n<p>Discover it when used jQuery thickBox and tried to reopen same page in the thickbox iframe.\nThen it just showed the earlier page that was opened.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Because of the <a href=\"https://developer.mozilla.org/En/Same_origin_policy_for_JavaScript\" rel=\"nofollow\">same origin policy</a>, this won't work when modifying an iframe pointing to a different domain.  If you can target newer browsers, consider using <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\" rel=\"nofollow\">HTML5's Cross-document messaging</a>.  You view the browsers that support this feature here: <a href=\"http://caniuse.com/#feat=x-doc-messaging\" rel=\"nofollow\">http://caniuse.com/#feat=x-doc-messaging</a>.</p>\n\n<p>If you can't use HTML5 functionality, then you can follow the tricks outlined here: <a href=\"http://softwareas.com/cross-domain-communication-with-iframes\" rel=\"nofollow\">http://softwareas.com/cross-domain-communication-with-iframes</a>.  That blog entry also does a good job of defining the problem.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>document.getElementById('iframeid').src = document.getElementById('iframeid').src\n</code></pre>\n\n<p>It will reload the <code>iframe</code>, even across domains!\nTested with IE7/8, Firefox and Chrome.</p>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>If using jQuery, this seems to work:</p>\n\n<pre><code>$('#your_iframe').attr('src', $('#your_iframe').attr('src'));\n</code></pre>\n\n<p>I hope it's not too ugly for stackoverflow.</p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>Use reload for IE and set src for other browsers. (reload does not work on FF)\ntested on IE 7,8,9 and Firefox</p>\n\n<pre><code>if(navigator.appName == \"Microsoft Internet Explorer\"){\n    window.document.getElementById('iframeId').contentWindow.location.reload(true);\n}else {\n    window.document.getElementById('iframeId').src = window.document.getElementById('iframeId').src;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\n  top.frames['DetailFrame'].location = top.frames['DetailFrame'].location;\n&lt;/script&gt; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I've just come up against this in chrome and the only thing that worked was removing and replacing the iframe. Example:</p>\n\n<pre><code>$(\".iframe_wrapper\").find(\"iframe\").remove();\nvar iframe = $('&lt;iframe src=\"' + src + '\" frameborder=\"0\"&gt;&lt;/iframe&gt;');\n$.find(\".iframe_wrapper\").append(iframe);\n</code></pre>\n\n<p>Pretty simple, not covered in the other answers.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A refinement on yajra's post ... I like the thought, but hate the idea of browser detection.</p>\n\n<p>I rather take ppk's view of using object detection instead of browser detection, \n(<a href=\"http://www.quirksmode.org/js/support.html\" rel=\"nofollow\">http://www.quirksmode.org/js/support.html</a>),\nbecause then you're actually testing the capabilities of the browser and acting accordingly, rather than what you think the browser is capable of at that time.  Also doesn't require so much ugly browser ID string parsing, and doesn't exclude perfectly capable browsers of which you know nothing about.</p>\n\n<p>So, instead of looking at navigator.AppName, why not do something like this, actually testing for the elements you use?  (You could use try {} blocks if you want to get even fancier, but this worked for me.)</p>\n\n<pre><code>function reload_message_frame() {\n    var frame_id = 'live_message_frame';\n    if(window.document.getElementById(frame_id).location ) {  \n        window.document.getElementById(frame_id).location.reload(true);\n    } else if (window.document.getElementById(frame_id).contentWindow.location ) {\n        window.document.getElementById(frame_id).contentWindow.location.reload(true);\n    } else if (window.document.getElementById(frame_id).src){\n        window.document.getElementById(frame_id).src = window.document.getElementById(frame_id).src;\n    } else {\n        // fail condition, respond as appropriate, or do nothing\n        alert(\"Sorry, unable to reload that frame!\");\n    }\n}\n</code></pre>\n\n<p>This way, you can go try as many different permutations as you like or is necessary,  without causing javascript errors, and do something sensible if all else fails. It's a little more work to test for your objects before using them, but, IMO, makes for better and more failsafe code.</p>\n\n<p>Worked for me in IE8, Firefox (15.0.1), Chrome (21.0.1180.89 m), and Opera (12.0.2) on Windows.</p>\n\n<p>Maybe I could do even better by actually testing for the reload function, but that's enough for me right now. :)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>SOLVED! I register to stockoverflow just to share to you the only solution (at least in ASP.NET/IE/FF/Chrome) that works! The idea is to replace innerHTML value of a div by its current innerHTML value.</p>\n\n<p>Here is the HTML snippet:</p>\n\n<pre><code>&lt;div class=\"content-2\" id=\"divGranite\"&gt;\n&lt;h2&gt;Granite Purchase&lt;/h2&gt;\n&lt;IFRAME  runat=\"server\" id=\"frameGranite\" src=\"Jobs-granite.aspx\" width=\"820px\" height=\"300px\" frameborder=\"0\" seamless  &gt;&lt;/IFRAME&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And my Javascript code:</p>\n\n<pre><code>function refreshGranite() {           \n   var iframe = document.getElementById('divGranite')\n   iframe.innerHTML = iframe.innerHTML;\n}\n</code></pre>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>If all of the above doesn't work for you:</p>\n\n<pre><code>window.location.reload();\n</code></pre>\n\n<p>This for some reason refreshed my iframe instead of the whole script. Maybe because it is placed in the frame itself, while all those getElemntById solutions work when you try to refresh a frame from another frame?</p>\n\n<p>Or I don't understand this fully and talk gibberish, anyways this worked for me like a charm :)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>for new url </p>\n\n<pre><code>location.assign(\"http:google.com\");\n</code></pre>\n\n<p>The assign() method loads a new document.</p>\n\n<p>reload</p>\n\n<pre><code>location.reload();\n</code></pre>\n\n<p>The reload() method is used to reload the current document.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Have you considered appending to the url a meaningless query string parameter?</p>\n\n<pre><code>&lt;iframe src=\"myBaseURL.com/something/\" /&gt;\n\n&lt;script&gt;\nvar i = document.getElementsById(\"iframe\")[0],\n    src = i.src,\n    number = 1;\n\n//For an update\ni.src = src + \"?ignoreMe=\" + number;\nnumber++;\n&lt;/script&gt;\n</code></pre>\n\n<p>It won't be seen &amp; if you are aware of the parameter being safe then it should be fine.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you tried all of the other suggestions, and couldn't get any of them to work (like I couldn't), here's something you can try that may be useful.</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;a class=\"refresh-this-frame\" rel=\"#iframe-id-0\"&gt;Refresh&lt;/a&gt;\n&lt;iframe src=\"\" id=\"iframe-id-0\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p><strong>JS</strong></p>\n\n<pre><code>$('.refresh-this-frame').click(function() {\n    var thisIframe = $(this).attr('rel');\n    var currentState = $(thisIframe).attr('src');\n    function removeSrc() {\n        $(thisIframe).attr('src', '');\n    }\n    setTimeout (removeSrc, 100);\n    function replaceSrc() {\n        $(thisIframe).attr('src', currentState);\n    }\n    setTimeout (replaceSrc, 200);\n});\n</code></pre>\n\n<hr>\n\n<p>I initially set out to try and save some time with RWD and cross-browser testing. I wanted to create a quick page that housed a bunch of iframes, organized into groups that I would show/hide at will. Logically you'd want to be able to easily and quickly refresh any given frame.</p>\n\n<p>I should note that the project I am working on currently, the one in use in this test-bed, is a one-page site with indexed locations (e.g. index.html#home). That may have had something to do with why I couldn't get any of the other solutions to refresh my particular frame.</p>\n\n<p>Having said that, I know it's not the cleanest thing in the world, but it works for my purposes. Hope this helps someone. Now if only I could figure out how to keep the iframe from scrolling the parent page each time there's animation inside iframe...</p>\n\n<p><strong>EDIT:</strong>\nI realized that this doesn't \"refresh\" the iframe like I'd hoped it would. It will reload the iframe's initial source though. Still can't figure out why I couldn't get any of the other options to work..</p>\n\n<p><strong>UPDATE:</strong>\nThe reason I couldn't get any of the other methods to work is because I was testing them in Chrome, and Chrome won't allow you to access an iframe's content (Explanation: <a href=\"http://stackoverflow.com/questions/10415759/is-it-likely-that-future-releases-of-chrome-support-contentwindow-contentdocumen/15684469#15684469\">Is it likely that future releases of Chrome support contentWindow/contentDocument when iFrame loads a local html file from local html file?</a>) if it doesn't originate from the same location (so far as I understand it). Upon further testing, I can't access contentWindow in FF either.</p>\n\n<p><strong>AMENDED JS</strong></p>\n\n<pre><code>$('.refresh-this-frame').click(function() {\n    var targetID = $(this).attr('rel');\n    var targetSrc = $(targetID).attr('src');\n    var cleanID = targetID.replace(\"#\",\"\");     \n    var chromeTest = ( navigator.userAgent.match(/Chrome/g) ? true : false );\n    var FFTest = ( navigator.userAgent.match(/Firefox/g) ? true : false );      \n    if (chromeTest == true) {\n        function removeSrc() {\n            $(targetID).attr('src', '');\n        }\n        setTimeout (removeSrc, 100);\n        function replaceSrc() {\n            $(targetID).attr('src', targetSrc);\n        }\n        setTimeout (replaceSrc, 200);\n    }\n    if (FFTest == true) {\n        function removeSrc() {\n            $(targetID).attr('src', '');\n        }\n        setTimeout (removeSrc, 100);\n        function replaceSrc() {\n            $(targetID).attr('src', targetSrc);\n        }\n        setTimeout (replaceSrc, 200);\n    }       \n    if (chromeTest == false &amp;&amp; FFTest == false) {\n        var targetLoc = (document.getElementById(cleanID).contentWindow.location).toString();\n        function removeSrc() {\n            $(targetID).attr('src', '');\n        }\n        setTimeout (removeSrc, 100);\n        function replaceSrc2() {\n            $(targetID).attr('src', targetLoc);\n        }\n        setTimeout (replaceSrc2, 200);\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you using Jquery then there is one line code.</p>\n\n<pre><code>$('#iframeID',window.parent.document).attr('src',$('#iframeID',window.parent.document).attr('src'));\n</code></pre>\n\n<p>and if you are working with same parent then</p>\n\n<pre><code>$('#iframeID',parent.document).attr('src',$('#iframeID',parent.document).attr('src'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I would like to reload an <code>iframe</code> using JavaScript. The best way I found until now was set the iframe <code>src</code> attribute to itself, but this isn't very clean. Any ideas?</p>\n",
            "last_activity_date": 1422376454,
            "question_id": 86428,
            "score": 87,
            "tags": [
                "javascript",
                "iframe"
            ],
            "title": "What&#39;s the best way to reload / refresh an iframe using JavaScript?"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>Long as you learn the <a href=\"http://www.learn-javascript-tutorial.com/\">BASICS in Javascript</a>; HTML document traversing, event handling, etc... you should have no problem learning jquery. </p>\n\n<p>Then from learning the basics you will understand how <strong>Jquery</strong> is to help you do the things that javascript can do, <strong>but with less work</strong>.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<blockquote>\n  <p>Sometimes I find myself struggling\n  because I feel I don't know Javascript\n  as well as I should?</p>\n</blockquote>\n\n<p>I think you answered your own question.</p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>An emphatic <strong>YES</strong>. It won't take as long to learn as you fear and the rewards will be more than worth it.</p>\n",
                    "is_accepted": true,
                    "score": 76
                },
                {
                    "body": "<p>When I started my switch from VBScript to JavaScript I was immediately enthralled with Jquery.  After a short while I started to really understand how JavaScript and Jquery interacted with each other and I became a little confused and frustrated.  My issue was with the desire to use the simplicity of Jquery but I felt like I was cheating myself by not learning JavaScript first.</p>\n\n<p>It turned out that I learned both at the same time.  As I wrote JQuery routines I found the need to learn JavaScript in order to understand why things worked the way they did and to help make certain Jquery routines work correctly.</p>\n\n<p>I am still learning JavaScript and Jquery but I am much less concerned about becoming a master of JavaScript as I know my understanding will grow as it needs to.  It definitely helps to have some basic understanding of JavaScript but I would say you should focus on learning how to accomplish specific tasks and not on learning JavaScript before JQuery...  </p>\n\n<p>My $0.02 worth.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>To some degree, but don't get hung up on object oriented programming like in the java world (in javascript it's prototyping anyway). It would help in the long run to have a good understanding of closures/anonymous function and how the special variable \"this\" is used (particularly with regards to events such as click) and how functions like \"apply\" work. I'd also make sure that you really understood CSS selectors as they are a central feature of jQuery and pretty much every other JS framework out there.</p>\n\n<p>You're also going to need to be familiar with how to use the full functionality of firebug.</p>\n\n<p>I'd also assume you have a basic understanding or knowledge of how the DOM works. </p>\n\n<p>That's the start of tinkering in Javascript.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As I see it, jQuery is nothing but a framework to make your life simpler. jQuery itself is written in javascript. So it helps to learn javascript. </p>\n\n<p>Mind you, you need not be a master but should be able to make the necessary changes /work arounds, when what you can do with jQuery alone is not sufficient. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Of course, it goes without saying. How can you use jQuery if you don't learn JavaScript first? After all, jQuery is nothing but a library for JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'll go against the grain and say that, while ideally you would become proficient in JavaScript <strong>before</strong> learning jQuery, you can probably make great progress on both fronts by jumping in and coding using the library.</p>\n\n<p>One of jQuery's strengths is that it makes it easier to do certain things in the browser. You can get a lot of real work done by cutting and pasting and adapting other people's code, so why not start doing that? As you go, when you encounter an idiom you don't quite understand, dig around and find out what it means or how it works.</p>\n\n<p>Over time, you will become a master of both JavaScript and jQuery.</p>\n\n<p>If you have any kind of programming background, a good book to read to get you up to speed quickly on JavaScript is Douglas Crockford's, <em>JavaScript: The Good Parts.</em></p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>The answer to your question is a definitive yes. jQuery, Prototype and the rest serve to overcome cross-browser headaches and ease AJAX, UI behaviours, DOM operations etc. You'll end up with some pretty bad code if you are just copy/pasting snippets or have no real understanding of Javascript.</p>\n\n<p>As a litmus test, you should be able to follow everything that is said in this <a href=\"https://developer.mozilla.org/en/A%5Fre-introduction%5Fto%5FJavaScript\">wonderful re-introduction to Javascript</a>. It's a bare minimum for writing good code and may require some more Googling on your part. Only then should you read Willison's equally good <a href=\"http://simonwillison.net/2007/Aug/15/jquery/\">introduction to jQuery</a>.</p>\n\n<p>That should provide you a good start to build upon. And then if you feel up to it, you can start digesting Crockford (start with <a href=\"http://developer.yahoo.com/yui/theater/\">Douglas Crockford \u2014 JavaScript: The Good Parts</a>).</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Call me old-fashioned, but I think it is best to learn the basics of one tool before moving on to its advanced cousin -- much like being competent with a handsaw before moving on to a circular saw.</p>\n\n<p>If you are struggling, you've answered your own question. I feel you'll be better equipped to make good use of JQuery once you are comfortable with JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The value proposition for jQuery (or any other framework) doesn't only come from what it does with javascript. It also builds on the DOM, HTML, and a number of language-agnostic patterns. And you don't need to understand it all in depth to find frameworks useful. Of course, you'll be better off if you know all the pieces, but we all need to start from something less.</p>\n\n<p>I learned jQuery and javascript simultaneously, and it worked quite well for me that way.</p>\n\n<p>I think the question isn't so much which to learn first, but more to the point, you need to expect to become increasingly familiar with all the pieces and how they work together.</p>\n\n<p>To me it's somewhat (not entirely) the same question as what you need to know before starting with WebForms. Sure it's better if you're already comfortable with C# (and the same DOM and html), but it's legitimate to use WebForms as a vehicle for your education. Same thing can be said for frameworks.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Just enough to debug your code. Otherwise, you will never be able to figure out what's not working.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Suppose you should know the following about Javascript:</p>\n\n<ol>\n<li><p>How to calculate the X and Y element offset for the absolute/relative positioned DIV for browsers IE6-IE8, FireFox, Opera, Safari (each of the browser has different model for this particular case).</p></li>\n<li><p>What is closure and how to create it.</p></li>\n<li><p>How to create onLoad event in the browsers listed above.</p></li>\n<li><p>Have an example of the HTML/Javascript code where you have pure HTML code like </p></li>\n</ol>\n\n<p>&lt;a href=\"\" rel=\"remove\">Remove&lt;/a></p>\n\n<p>and javascript code that add special handlers in automatic mode for A tag using \"rel\" attribute.</p>\n\n<p>After you get acquainted with this you may use jQuery library that hide the complexity of this :)</p>\n\n<p>Regards,\nPavel</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Learning JS would make life easier for coding JQuery but I don't see why you should necessarily learn it first. You'll just have to learn it eventually.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yes.  </p>\n\n<p>You obviously don't need to learn <em>everything</em> about JS. But at least learn the basics, and try to learn some best practices.</p>\n\n<p>For me the trickiest part about Javascript is all the different implementations of it in the different browsers.  But there are certain things you can do to help yourself avoid some of those problems.  For example, it's usually preferred to use document.getElementById() to access elements in the DOM since it essentially works the same way in all modern browsers.  Also, it's almost always best to use feature detection rather than browser detection.  Little things like that go a long way in avoiding problems in specific browsers later on.</p>\n\n<p>Fortunately JQuery was written pretty well for cross-browser compatibility, but there may be times when you don't want to use it directly and you may have to rely on your JS skills.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There are really two seperate aspects to JavaScript within the Browser. First, the JavaScript Language, and second the HTML DOM that allows you to manipulate the page using the JavaScript Language.</p>\n\n<p>That said, then YES you should spend time learning the JavaScript Language. I recommend picking up a copy of <a href=\"http://rads.stackoverflow.com/amzn/click/0596517742\" rel=\"nofollow\">\"JavaScript: The Good Parts\" by Douglas Crockford</a>.</p>\n\n<p>Now as to the second part, the HTML DOM. You really don't need to focus too much on learning the ins and outs of the HTML DOM if you are going to use a framework like jQuery. Just do things the \"jQuery way\" and then pick up as much HTML DOM as is necessary along the way.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I think learning events the document object model, and JavaScript forms programming is enough to get started in jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>My first thought was that It's always good to learn something new and Javascript is becoming ubiquitous (now is on the <a href=\"http://nodejs.org\" rel=\"nofollow\"><strong>server side</strong></a> too ).</p>\n\n<p>It's seems that you have still not decided the best answer for you and AFAIK this question was posted before March 21 ... I see plenty of time to read at least <a href=\"http://mdn.beonex.com/en/A_re-introduction_to_JavaScript\" rel=\"nofollow\"><strong>this</strong></a> that was written by a very talented guy.</p>\n\n<p>If you study javascript you will never come to SO asking question like: </p>\n\n<blockquote>\n  <p>What the keyword <strong>this</strong> mean in the contest of my snippet of code?</p>\n</blockquote>\n\n<p>But if you always are in a hurry, without having time to improve your code and If you never have to build jQuery plugins go without Javascript.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yes it a good idea because jQuery provides you with shortcuts for some methods and effects. By learning JavaScript you get the complete idea about how jQuery is working. It will help you to solve bugs and issues in future, when you will be working on a project.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>Is it a good idea to learn JavaScript before learning a JavaScript framework library such as jQuery, Prototype, etc.?</p>\n\n<p>Sometimes I find myself struggling because I feel I don't know JavaScript as well as I should.</p>\n",
            "last_activity_date": 1347986488,
            "question_id": 668642,
            "score": 66,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Is it a good idea to learn JavaScript before learning jQuery?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<h1>Please see <a href=\"http://stackoverflow.com/a/17106702/575527\">this answer</a> for a more complete set of cases</h1>\n\n<hr>\n\n<hr>\n\n<hr>\n\n<p>Well, here are a few differences I know of:</p>\n\n<ul>\n<li><p>An empty string <code>\"\"</code> evaluates to a <code>0</code>, while <code>parseInt</code> evaluates it to <code>NaN</code>. IMO, a blank string should be a <code>NaN</code>.</p>\n\n<pre><code>+'' === 0;              //true\nisNaN(parseInt('',10)); //true\n</code></pre></li>\n<li><p>The unary <code>+</code> acts more like <code>parseFloat</code> since it also accepts decimals. </p>\n\n<p><code>parseInt</code> on the other hand stops parsing when it sees a non-numerical character, like the period that is intended to be a decimal point <code>.</code>.</p>\n\n<pre><code>+'2.3' === 2.3;           //true\nparseInt('2.3',10) === 2; //true\n</code></pre></li>\n<li><p><code>parseInt</code> and <code>parseFloat</code> parses and builds the string <em>left to right</em>. If they see an invalid character, it returns what has been parsed (if any) as a number, and <code>NaN</code> if none was parsed as a number. </p>\n\n<p>The unary <code>+</code> on the other hand will return <code>NaN</code> if the entire string is non-convertible to a number.</p>\n\n<pre><code>parseInt('2a',10) === 2; //true\nparseFloat('2a') === 2;  //true\nisNan(+'2a');            //true\n</code></pre></li>\n<li><p>As seen in the comment of <a href=\"http://stackoverflow.com/users/246342\">@Alex K.</a>, <code>parseInt</code> and <code>parseFloat</code> will parse by character. This means hex and exponent notations will fail since the <code>x</code> and <code>e</code> are treated as non-numerical components (at least on base10).</p>\n\n<p>The unary <code>+</code> will convert them properly though.</p>\n\n<pre><code>parseInt('2e3',10) === 2;  //true. This is supposed to be 2000\n+'2e3' === 2000;           //true. This one's correct.\n\nparseInt(\"0xf\", 10) === 0; //true. This is supposed to be 15\n+'0xf' === 15;             //true. This one's correct.\n</code></pre></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 58
                },
                {
                    "body": "<p>The ultimate string-to-number conversion table:</p>\n\n<pre>\n\n                               x |        parseInt(x) |      parseFloat(x) |          Number(x) |                 +x |         ~~x |      x>>>0\n                           '123' |                123 |                123 |                123 |                123 |         123 |        123\n                          '-123' |               -123 |               -123 |               -123 |               -123 |        -123 | 4294967173\n                        '123.45' |                123 |             123.45 |             123.45 |             123.45 |         123 |        123\n                       '-123.45' |               -123 |            -123.45 |            -123.45 |            -123.45 |        -123 | 4294967173\n                          '12e5' |                 12 |            1200000 |            1200000 |            1200000 |     1200000 |    1200000\n                           '012' |                 12 |                 12 |                 12 |                 12 |          12 |         12\n                        '0xBABE' |              47806 |                  0 |              47806 |              47806 |       47806 |      47806\n                    '0xFFFFFFFF' |         4294967295 |                  0 |         4294967295 |         4294967295 |          -1 | 4294967295\n            '123456789012345678' | 123456789012345680 | 123456789012345680 | 123456789012345680 | 123456789012345680 | -1506741424 | 2788225872\n                              '' |                NaN |                NaN |                  0 |                  0 |           0 |          0\n                        '123foo' |                123 |                123 |                NaN |                NaN |           0 |          0\n                     '123.45foo' |                123 |             123.45 |                NaN |                NaN |           0 |          0\n                      '  123   ' |                123 |                123 |                123 |                123 |         123 |        123\n                           'foo' |                NaN |                NaN |                NaN |                NaN |           0 |          0\n                            null |                NaN |                NaN |                  0 |                  0 |           0 |          0\n                    window.undef |                NaN |                NaN |                NaN |                NaN |           0 |          0\n                            true |                NaN |                NaN |                  1 |                  1 |           1 |          1\n                           false |                NaN |                NaN |                  0 |                  0 |           0 |          0\n                              {} |                NaN |                NaN |                NaN |                NaN |           0 |          0\n{valueOf:function(){return 125}} |                NaN |                NaN |                125 |                125 |         125 |        125\n                             NaN |                NaN |                NaN |                NaN |                NaN |           0 |          0\n</pre>\n\n<pre><code>...\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/EpUBN/6/\" rel=\"nofollow\">http://jsfiddle.net/EpUBN/6/</a></p>\n",
                    "is_accepted": false,
                    "score": 61
                },
                {
                    "body": "<p>The table in thg435's answer I believe is comprehensive, however we can summarize with the following patterns:</p>\n\n<ul>\n<li>Unary plus does not treat all falsy values the same, but they all come out falsy.</li>\n<li>Unary plus sends <code>true</code> to 1, but <code>\"true\"</code> to <code>NaN</code>.</li>\n<li>On the other hand, <code>parseInt</code> is more liberal for strings that are not pure digits.  <code>parseInt('123abc') === 123</code>, whereas <code>+</code> reports <code>NaN</code>.</li>\n<li><code>Number</code> will accept valid decimal numbers, whereas <code>parseInt</code> merely drops everything past the decimal. Thus <code>parseInt</code> mimics C behavior, but is perhaps not ideal for evaluating user input.</li>\n<li>Both trim whitespace in strings.</li>\n<li><code>parseInt</code>, being a badly designed <em>parser</em>, accepts octal and hexadecimal input. Unary plus only takes hexademical.</li>\n</ul>\n\n<p>Falsy values convert to <code>Number</code> following what would make sense in C:  <code>null</code> and <code>false</code> are both zero.  <code>\"\"</code> going to 0 doesn't quite follow this convention but makes enough sense to me.</p>\n\n<p>Therefore I think if you are validating user input, unary plus has correct behavior for everything except it accepts decimals (but in my real life cases I'm more interested in catching email input instead of userId, value omitted entirely, etc.), whereas parseInt is too liberal.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Consider <a href=\"http://jsperf.com/parseint-vs-unary-operator\" rel=\"nofollow\">performance</a> too. I was suprised that <code>parseInt</code> beats unary plus on iOS :) This is helpful for web apps with heavy CPU consumption only. As a rule-of-thumb I'd suggest JS opt-guys to consider any JS operator over another one from the mobile performance point of view nowadays. </p>\n\n<p>So, go <strong>mobile-first</strong> ;)</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Be carefull, parseInt is faster than + unary operator in Node.JS,\nit's false that + or |0 are faster, them are faster only for NaN elements.</p>\n\n<p>Check this out:</p>\n\n<pre><code>var arg=process.argv[2];\n\nrpt=20000;\nmrc=1000;\n\na=[];\nb=1024*1024*1024*1024;\nfor (var i=0;i&lt;rpt;i++)\n a[i]=Math.floor(Math.random()*b)+' ';\n\nt0=Date.now();\nif ((arg==1)||(arg===undefined))\n for (var j=0;j&lt;mrc;j++) for (var i=0;i&lt;rpt;i++) {\n  c=a[i]-0;\n }\nt1=Date.now();\nif ((arg==2)||(arg===undefined)) {\n for (var j=0;j&lt;mrc;j++) for (var i=0;i&lt;rpt;i++) {\n  d=a[i]|0;\n }\n}\nt2=Date.now();\nif ((arg==3)||(arg===undefined)) {\n for (var j=0;j&lt;mrc;j++) for (var i=0;i&lt;rpt;i++) {\n  e=parseInt(a[i]);\n }\n}\nt3=Date.now();\n if ((arg==3)||(arg===undefined)) {\n for (var j=0;j&lt;mrc;j++) for (var i=0;i&lt;rpt;i++) {\n  f=+a[i];\n }\n}\nt4=Date.now();\n\nconsole.log(a[i-1],c,d,e,f);\nconsole.log('Eseguiti: '+rpt*mrc+' cicli');\nconsole.log('parseInt '+(t3-t2));\nconsole.log('|0 '+(t2-t1));\nconsole.log('-0 '+(t1-t0));\nconsole.log('+ '+(t4-t3));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>what are the differences between this line:</p>\n\n<pre><code>var a = parseInt(\"1\", 10); // a === 1\n</code></pre>\n\n<p>and this line</p>\n\n<pre><code>var a = +\"1\"; // a === 1\n</code></pre>\n\n<p>this <a href=\"http://jsperf.com/parseint-vs-unary-operator\">jsperf test</a> shows that the unary operator is much faster in the current chrome version, assuming it is for node.js!?</p>\n\n<p>if i try to convert strings which are not numbers both return NaN:</p>\n\n<pre><code>var b = parseInt(\"test\" 10); // b === NaN\nvar b = +\"test\"; // b === NaN\n</code></pre>\n\n<p>so when should i prefer using parseInt over the unary plus (especially in node.js)???</p>\n\n<p>edit: and whats the difference to the double tilde operator ~~?</p>\n",
            "last_activity_date": 1426099386,
            "question_id": 17106681,
            "score": 35,
            "tags": [
                "javascript",
                "node.js"
            ],
            "title": "parseInt vs unary plus - when to use which"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>No, it is not, but it's fairly easy to write your own generator, or better yet use an existing one. Check out: <a href=\"http://stackoverflow.com/questions/424292/how-to-create-my-own-javascript-random-number-generator-that-i-can-also-set-the-s\">this related question</a>.</p>\n\n<p>Also, see David Bau's blog for <a href=\"http://davidbau.com/archives/2010/01/30/random_seeds_coded_hints_and_quintillions.html#more\">more information on seeding</a>.</p>\n",
                    "is_accepted": true,
                    "score": 79
                },
                {
                    "body": "<p>No, but here's a simple pseudorandom generator I adapted from <a href=\"http://en.wikipedia.org/wiki/Random_number_generation\">Wikipedia</a>:</p>\n\n<pre><code>var m_w = 123456789;\nvar m_z = 987654321;\nvar mask = 0xffffffff;\n\n// Takes any integer\nfunction seed(i) {\n    m_w = i;\n}\n\n// Returns number between 0 (inclusive) and 1.0 (exclusive),\n// just like Math.random().\nfunction random()\n{\n    m_z = (36969 * (m_z &amp; 65535) + (m_z &gt;&gt; 16)) &amp; mask;\n    m_w = (18000 * (m_w &amp; 65535) + (m_w &gt;&gt; 16)) &amp; mask;\n    var result = ((m_z &lt;&lt; 16) + m_w) &amp; mask;\n    result /= 4294967296;\n    return result + 0.5;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>My other answer represents a more traditional algorithm, but I found Dave Scotese's comment to <a href=\"http://stackoverflow.com/questions/521295/javascript-random-seeds/521323#521323\">this answer</a> to be a more eloquent one.  Unfortunately, it's pretty slow due to string manipulation.</p>\n\n<p>Here's a version that is about 20 times faster and a bit more precise as well.</p>\n\n<pre><code>var seed = 1;\nfunction random() {\n    var x = Math.sin(seed++) * 10000;\n    return x - Math.floor(x);\n}\n</code></pre>\n\n<p>You can set <code>seed</code> to be any number, just avoid zero (or any multiple of Math.PI).</p>\n\n<p>The elegance of this solution, in my opinion, comes from the lack of any \"magic\" numbers (besides 10000, which represents about the minimum amount of digits you must throw away to avoid odd patterns - see results with values <a href=\"http://cl.ly/image/1n2e2V0f4533\">10</a>, <a href=\"http://cl.ly/image/211d1s1Z410e\">100</a>, <a href=\"http://cl.ly/image/2Q0a2G0q0h2q\">1000</a>).  Brevity is also nice.</p>\n\n<p>It's a bit slower than Math.random() (by a factor of 2 or 3), but I believe it's about as fast as any other solution written in JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>Here is a pretty good seeded number generator. It returns floating point numbers between -1.0 and 1.0. </p>\n\n<pre><code>function seed(x) {\n    x = (x&lt;&lt;13) ^ x;\n    return ( 1.0 - ( (x * (x * x * 15731 + 789221) + 1376312589) &amp; 0x7fffffff) / 1073741824.0);\n}  \n</code></pre>\n\n<p>In example we populate an array with random numbers between 0 and 256</p>\n\n<pre><code>var p = [];\n\nfor (var i = 0; i &lt; 256; i++) {\n    p[i] = Math.floor(~~seed(i) * 256);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Antti Syk\u00e4ri's algorithm is nice and short. I initially made a variation that replaced Javascript's Math.random when you call Math.seed(s), but then Jason commented that returning the function would be better:</p>\n\n<pre><code>Math.seed = function(s) {\n    return function() {\n        s = Math.sin(s) * 10000; return s - Math.floor(s);\n    };\n};\n\n// usage:\nvar random1 = Math.seed(42);\nvar random2 = Math.seed(random1());\nMath.random = Math.seed(random2());\n</code></pre>\n\n<p>This gives you another functionality that Javascript doesn't have: multiple independent random generators. That is especially important if you want to have multiple repeatable simulations running at the same time.</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>Is it possible to seed the random number generator (Math.random) in Javascript?</p>\n",
            "last_activity_date": 1403182706,
            "question_id": 521295,
            "score": 130,
            "tags": [
                "javascript",
                "random"
            ],
            "title": "Javascript Random Seeds"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<pre><code>document.elementFromPoint(x, y);\n</code></pre>\n\n<p><a href=\"http://dev.w3.org/csswg/cssom-view/#dom-document-elementfrompoint\">http://dev.w3.org/csswg/cssom-view/#dom-document-elementfrompoint</a></p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/ms536417%28VS.85%29.aspx\">http://msdn.microsoft.com/en-us/library/ms536417%28VS.85%29.aspx</a></p>\n\n<p><a href=\"https://developer.mozilla.org/en/DOM/document.elementFromPoint\">https://developer.mozilla.org/en/DOM/document.elementFromPoint</a></p>\n",
                    "is_accepted": true,
                    "score": 122
                },
                {
                    "body": "<p>You can use the native JavaScript <code>elementFromPoint(x, y)</code> method, that returns the element at coordinates x,y in the viewport.</p>\n\n<p>See the <a href=\"http://dev.w3.org/csswg/cssom-view/#dom-document-elementfrompoint\">elementFromPoint w3c draft</a></p>\n\n<p>And, a code sample:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;elementFromPoint example&lt;/title&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n\nfunction changeColor(newColor)\n{\n elem = document.elementFromPoint(2, 2);\n elem.style.color = newColor;\n}\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n&lt;p id=\"para1\"&gt;Some text here&lt;/p&gt;\n&lt;button onclick=\"changeColor('blue');\"&gt;blue&lt;/button&gt;\n&lt;button onclick=\"changeColor('red');\"&gt;red&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>You can use <code>setInterval()</code> to continuously check the element's hover event but it's not recommended, try to use <code>.hover(...)</code> and css instead to enhance the application performance.</p>\n",
                    "is_accepted": false,
                    "score": 17
                }
            ],
            "body": "<p>Using Javascript how can I identify the element at a given position? Basically I'm looking to write a function that takes two input parameters (the x and y coordinates) and returns the html element at the position on the screen represented by the parameters.</p>\n",
            "last_activity_date": 1413820813,
            "question_id": 1259585,
            "score": 65,
            "tags": [
                "javascript",
                "html",
                "dom"
            ],
            "title": "Get element at specified position - JavaScript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>As is often true with questions like these, Quirksmode has <a href=\"http://www.quirksmode.org/js/events%5Fmouse.html#mouseenter\" rel=\"nofollow\">the best answer</a>.</p>\n\n<p><strike>I would imagine that, because one of jQuery's goals is to make things browser agnostic, that using either event name will trigger the same behavior.</strike> Edit: thanks to other posts, I now see this is not the case</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Mouseenter and mouseleave <strong>do not</strong> react to event bubbling, while mouseover and mouseout <strong>do</strong>.</p>\n\n<p>Here's an <a href=\"http://www.quirksmode.org/js/events%5Fmouse.html\">article</a> that describes the behavior.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Explains it pretty well <a href=\"http://blog.stchur.com/2007/03/15/mouseenter-and-mouseleave-events-for-firefox-and-other-non-ie-browsers/\" rel=\"nofollow\">here</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You can try it out <a href=\"http://api.jquery.com/mouseover/\">here</a> on the jQuery doc page. It's a nice little, interactive demo that makes it very clear and you can actually see for yourself.</p>\n\n<p>In short, you'll notice that a mouse over event occurs on an element when you are over it - coming from either its child OR parent element, but a mouse enter event only occurs when the mouse moves from the parent element to the element.</p>\n",
                    "is_accepted": true,
                    "score": 62
                },
                {
                    "body": "<pre><code>$(document).ready(function() {\n$(\"#outer_mouseover\").bind\n(\"Mouse Over Mouse Out\",function(event){\nconsole.log(event.type,\" :: \",this.id);})\n$(\"#outer_mouseenter\").bind\n(\"Mouse enter Mouse leave\",function(event){\nconsole.log(event.type,\" :: \",this.id);})\n });\n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Only Chrome let you suggest a name to use when clicking a link with dynamically generated content. However, you can generate the content when the mouse cursor is over the link and put it as DATAURI in a standard static href. This enables the \"Save link as..\" option in right-click menu.</p>\n\n<pre><code>function download_content(a, side) \n{\n    a.innerHTML = \"preparing content..\";\n\n    var txt = \"call a function to generate content\";\n    var datauri = \"data:plain/text;charset=UTF-8,\" + encodeURIComponent(txt);\n    a.setAttribute('download', \"chrome_let_you_suggest_a_name.txt\");\n    a.setAttribute('href', datauri);\n\n    a.innerHTML = \"content ready.\";\n}\ndocument.getElementById('my_a_link').addEventListener('mouseover', function() { download_content(this); });\n\n&lt;a id=\"my_a_link\" href=\"#\"&gt;save document&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have always used the mouseover event, but while reading the jquery documentation I found mouseenter. They seem to function exactly the same. Is there a difference between the two, and if so when should I use them? (Also applies for mouseout vs mouseleave)</p>\n",
            "last_activity_date": 1408226370,
            "question_id": 1104344,
            "score": 71,
            "tags": [
                "javascript",
                "jquery",
                "events",
                "javascript-events"
            ],
            "title": "What is the difference between the mouseover and mouseenter events?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>var var1=42;\nvar var2;\n\nalert(var2 = var1); //show result of assignment expression is assigned value\nalert(var2); // show assignment did occur.\n</code></pre>\n\n<p>Note the single '=' in the first alert.  This will show that the result of an assignment expression is the assigned value, and the 2nd alert will show you that assignment did occur.</p>\n\n<p>It follows logically that assignment must have chained from right to left.  However, since this is all atomic to the javascript (there's no threading) a particular engine may choose to actually optimize it a little differently.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Assignment in javascript works from right to left. <code>var var1 = var2 = var3 = 1;</code>. </p>\n\n<p>If the value of any of these variables is <code>1</code> after this statement, then logically it must have started from the right, otherwise the value or <code>var1</code> and <code>var2</code> would be undefined.</p>\n\n<p>Although it will not compile, you can think of it as equivalent to <code>var (var1 = (var2 = (var3 = 1)));</code> where the inner-most set of parenthesis is evaluated first.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Actually,</p>\n\n<pre><code>var var1 = 1, var2 = 1, var3 = 1;\n</code></pre>\n\n<p>is <em>not</em> equivalent to:</p>\n\n<pre><code>var var1 = var2 = var3 = 1;\n</code></pre>\n\n<p>The difference is in scoping:</p>\n\n<pre><code>function good() {\n  var var1 = 1, var2 = 1, var3 = 1;\n}\n\nfunction bad() {\n  var var1 = var2 = var3 = 1;\n}\n\ngood();\nalert(window.var2); // undefined\n\nbad();\nalert(window.var2); // 1. Aggh!\n</code></pre>\n\n<p>Actually this shows that assignment are right associative. The <code>bad</code> example is equivalent to:</p>\n\n<pre><code>var var1 = (window.var2 = (window.var3 = 1));\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 160
                }
            ],
            "body": "<pre><code>var var1 = 1,\n    var2 = 1,\n    var3 = 1;\n</code></pre>\n\n<p>This is equivalent to this:</p>\n\n<pre><code>var var1 = var2 = var3 = 1;\n</code></pre>\n\n<p>I'm fairly certain this is the order the variables are defined: var3, var2, var1, which would be equivalent to this:</p>\n\n<pre><code>var var3 = 1, var2 = var3, var1 = var2;\n</code></pre>\n\n<p>Is there any way to confirm this in JavaScript?  Using some profiler possibly?</p>\n",
            "last_activity_date": 1383696701,
            "question_id": 1758576,
            "score": 57,
            "tags": [
                "javascript",
                "variables",
                "variable-assignment"
            ],
            "title": "Multiple left-hand assignment with JavaScript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<pre><code>^\\s*([0-9a-zA-Z]*)\\s*$\n</code></pre>\n\n<p>or, if you want a minimum of one character:</p>\n\n<pre><code>^\\s*([0-9a-zA-Z]+)\\s*$\n</code></pre>\n\n<p>Square brackets indicate a set of characters.  ^ is start of input.  $ is end of input (or newline, depending on your options).  \\s is whitespace.</p>\n\n<p>The whitespace before and after is optional.</p>\n\n<p>The parentheses are the grouping operator to allow you to extract the information you want.</p>\n\n<p>EDIT: removed my erroneous use of the \\w character set.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>/^[a-z0-9]+$/i\n\n^         start of string\n[a-z0-9]  a or b or c or ... z or 0 or 1 or ... 9\n+         one or more times (change to * to allow empty string\n$         end of string\n\n/i        case-insensitive\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 139
                },
                {
                    "body": "<p>Use the character class. The following is equilavent to a \"^[a-zA-Z0-9]+$\":</p>\n\n<pre><code>^\\w+$\n</code></pre>\n\n<p>Explanation:</p>\n\n<ul>\n<li>^ start</li>\n<li>\\w any work character (A-Z, a-z, 0-9).</li>\n<li>$ end</li>\n</ul>\n\n<p>Edit: \\w matches one additional character, the underscore.   </p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>If you wanted to return a replaced result, then this would work:</p>\n\n<pre><code>var a = 'Test123*** TEST';\nvar b = a.replace(/[^a-z0-9]/gi,'');\nconsole.log(b);\n</code></pre>\n\n<p>This would return:</p>\n\n<pre><code>Test123TEST\n</code></pre>\n\n<p>Note that the gi is necessary because it means global (not just on the first match), and case-insensitive, which is why I have a-z instead of a-zA-Z. And the ^ inside the brackets means \"anything not in these brackets\".</p>\n\n<p>Use console.log() if you have a Javascript console you can test with, such as CTRL+SHIFT+I with Chrome or with Firebug in FF. Otherwise, use alert() to show it to the screen.</p>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<pre><code>/^([a-zA-Z0-9 _-]+)$/\n</code></pre>\n\n<p>the above regex allows spaces in side a  string and restrict special characters.It Only allows \na-z, A-Z, 0-9, Space, Underscore and dash.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Even better than <code>Gayan Dissanayake</code> pointer out.</p>\n\n<pre><code>/^[-\\w\\s]+$/\n</code></pre>\n\n<p>Now <code>^[a-zA-Z0-9]+$</code> can be represented as <code>^\\w+$</code></p>\n\n<blockquote>\n  <p>You may want to use <strong>\\s</strong> instead of space. Note that <strong>\\s</strong> takes care of whitespace and not only one space character.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to find a reg ex that only allows alphanumeric. So far, everyone I try only works if the string is alphanumeric, meaning contains both a letter and a number. I just want one what would allow either and not require both.</p>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1426183517,
            "question_id": 388996,
            "score": 55,
            "tags": [
                "javascript",
                "regex"
            ],
            "title": "RegEx for Javascript to allow only alphanumeric"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>To get a MapCanvasProjection you could derive a class from <a href=\"http://code.google.com/apis/maps/documentation/v3/reference.html#OverlayView\">OverlayView</a> and call the getProjection() method which returns a <a href=\"http://code.google.com/apis/maps/documentation/v3/reference.html#MapCanvasProjection\">MapCanvasProjection</a> type</p>\n\n<p>onAdd(), draw() and onRemove() must be implemented to derive from OverlayView.</p>\n\n<pre><code>function MyOverlay(options) {\n    this.setValues(options);\n\n    var div = this.div_= document.createElement('div');\n\n    div.className = \"overlay\";\n};\n\n// MyOverlay is derived from google.maps.OverlayView\nMyOverlay.prototype = new google.maps.OverlayView;\n\nMyOverlay.prototype.onAdd = function() {\n\n    var pane = this.getPanes().overlayLayer;\n    pane.appendChild(this.div_);\n\n}\n\nMyOverlay.prototype.onRemove = function() {\n    this.div_.parentNode.removeChild(this.div_);\n}\n\nMyOverlay.prototype.draw = function() {\n    var projection = this.getProjection();\n    var position = projection.fromLatLngToDivPixel(this.getMap().getCenter());\n\n    var div = this.div_;\n    div.style.left = position.x + 'px';\n    div.style.top = position.y + 'px';\n    div.style.display = 'block';\n};\n</code></pre>\n\n<p>then when you're creating your map</p>\n\n<pre><code>var OverLayMap = new MyOverlay( { map: map } );\n</code></pre>\n\n<p><strong>For V2</strong>\nyou should be able to call fromLatLngToDivPixel from your GMap2 instance</p>\n\n<pre><code>var centerPoint = map.fromLatLngToDivPixel(map.getCenter());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>var map;\n// Create your map\nMyOverlay.prototype = new google.maps.OverlayView();\nMyOverlay.prototype.onAdd = function() { }\nMyOverlay.prototype.onRemove = function() { }\nMyOverlay.prototype.draw = function() { }\nfunction MyOverlay(map) { this.setMap(map); }\nvar overlay = new MyOverlay(map);\nvar projection = overlay.getProjection();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I wasn't satisfied with the answers here. So I did some experiments and found the \"simplest\" working solution, which is close to Ralph's answer, but hopefully more understandable. (I wish Google makes this feature more accessible!)</p>\n\n<p>First you declare a subclass of <code>OverlayView</code> somewhere like so:</p>\n\n<pre><code>function CanvasProjectionOverlay() {}\nCanvasProjectionOverlay.prototype = new google.maps.OverlayView();\nCanvasProjectionOverlay.prototype.constructor = CanvasProjectionOverlay;\nCanvasProjectionOverlay.prototype.onAdd = function(){};\nCanvasProjectionOverlay.prototype.draw = function(){};\nCanvasProjectionOverlay.prototype.onRemove = function(){};\n</code></pre>\n\n<p>Then <em>somewhere else</em> in your code where you instantiate the map, you also instantiate this OverlayView and set its map, like so:</p>\n\n<pre><code>var map = new google.maps.Map(document.getElementById('google-map'), mapOptions);\n\n// Add canvas projection overlay so we can use the LatLng to pixel converter\nvar canvasProjectionOverlay = new CanvasProjectionOverlay();\ncanvasProjectionOverlay.setMap(map);\n</code></pre>\n\n<p>Then, whenever you need to use <code>fromLatLngToContainerPixel</code>, you just do this:</p>\n\n<pre><code>canvasProjectionOverlay.getProjection().fromLatLngToContainerPixel(myLatLng);\n</code></pre>\n\n<p>Note that because the MapCanvasProjection object will only be available once <code>draw()</code> is called, which is sometime before the map's <code>idle</code>, I suggest creating a boolean \"mapInitialized\" flag, set it to true on the first map <code>idle</code> callback. And then do what you need to do only after that.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Look at <a href=\"http://qfox.nl/notes/116\">http://qfox.nl/notes/116</a></p>\n\n<pre><code>overlay = new google.maps.OverlayView();\noverlay.draw = function() {};\noverlay.setMap(map);\nvar point = overlay.getProjection().fromLatLngToDivPixel(latLng); \n</code></pre>\n\n<p>Ugly indeed. Much easier in v2 - another flaw of google api v3!</p>\n",
                    "is_accepted": true,
                    "score": 19
                },
                {
                    "body": "<p>I think the easiest way is to ignore Google's desire to make our life harder by removing and hiding useful functions instead of adding new ones, and just to write your own methods that do the same thing.</p>\n\n<p>Here's a version of a function somebody posted somewhere else (I can't find it right now), that worked for me:</p>\n\n<pre><code>fromLatLngToPixel: function (position) {\n  var scale = Math.pow(2, Map.getZoom());\n  var proj = Map.getProjection();\n  var bounds = Map.getBounds();\n\n  var nw = proj.fromLatLngToPoint(\n    new google.maps.LatLng(\n      bounds.getNorthEast().lat(),\n      bounds.getSouthWest().lng()\n    ));\n  var point = proj.fromLatLngToPoint(position);\n\n  return new google.maps.Point(\n    Math.floor((point.x - nw.x) * scale),\n    Math.floor((point.y - nw.y) * scale));\n},\n</code></pre>\n\n<p>Now you can call it any time and any where you want. I especially needed it for custom context menus, and it does it's job perfectly.</p>\n\n<p><strong>EDIT</strong>: I also wrote a reverse function, <strong>fromPixelToLatLng</strong> that does exactly the opposite. It is simply based on the first one, with some math applied:</p>\n\n<pre><code>fromPixelToLatLng: function (pixel) {\n  var scale = Math.pow(2, Map.getZoom());\n  var proj = Map.getProjection();\n  var bounds = Map.getBounds();\n\n  var nw = proj.fromLatLngToPoint(\n    new google.maps.LatLng(\n      bounds.getNorthEast().lat(),\n      bounds.getSouthWest().lng()\n    ));\n  var point = new google.maps.Point();\n\n  point.x = pixel.x / scale + nw.x;\n  point.y = pixel.y / scale + nw.y;\n\n  return proj.fromPointToLatLng(point);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                }
            ],
            "body": "<p>I know that method exists and is documented, but I don't know how to get an MapCanvasProjection object.</p>\n",
            "last_activity_date": 1345379017,
            "question_id": 1538681,
            "score": 23,
            "tags": [
                "javascript",
                "google-maps",
                "google-maps-api-3",
                "projection"
            ],
            "title": "How to call fromLatLngToDivPixel in Google Maps API V3?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Either add an event listener, or have the image announce itself with onload. Then figure out the dimensions from there.</p>\n\n<pre><code>&lt;img id=\"photo\"\n     onload='loaded(this.id)'\n     src=\"a_really_big_file.jpg\"\n     alt=\"this is some alt text\"\n     title=\"this is some title text\" /&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<p>Try something like:</p>\n\n<pre><code>$(\"#photo\").load(function() {\n    alert(\"Hello from Image\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You want to do what Allain said, however be aware that sometimes the image loads before dom ready, which means your load handler won't fire. The best way is to do as Allain says, but set the src of the image with javascript after attaching the load hander. This way you can guarantee that it fires.</p>\n\n<p>In terms of accessibility, will your site still work for people without javascript? You may want to give the img tag the correct src, attach you dom ready handler to run your js: clear the image src (give it a fixed with and height with css to prevent the page flickering), then set your img load handler, then reset the src to the correct file. This way you cover all bases :)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Any comments on this one?</p>\n\n<p>...</p>\n\n<pre><code>doShow = function(){\n  if($('#img_id').attr('complete')){\n    alert('Image is loaded!');\n  } else {\n    window.setTimeout('doShow()',100);\n  }\n};\n\n$('#img_id').attr('src','image.jpg');\n\ndoShow();\n</code></pre>\n\n<p>...</p>\n\n<p>Seems like works everywhere...</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The right answer, is to use <a href=\"http://github.com/peol/jquery.imgloaded/raw/master/ahpi.imgload.js\">event.special.load</a></p>\n\n<blockquote>\n  <p>It is possible that the load event will not be triggered if the image is loaded from the browser cache. To account for this possibility, we can use a special load event that fires immediately if the image is ready. event.special.load is currently available as a plugin.</p>\n</blockquote>\n\n<p>Per the docs on <a href=\"http://api.jquery.com/load-event/\">.load()</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Using the <a href=\"http://api.jquery.com/data/\" rel=\"nofollow\">jquery data store</a> you can define a 'loaded' state.</p>\n\n<pre><code>&lt;img id=\"myimage\" onload=\"$(this).data('loaded', 'loaded');\" src=\"lolcats.jpg\" /&gt;\n</code></pre>\n\n<p>Then elsewhere you can do:</p>\n\n<pre><code>if ($('#myimage').data('loaded')) {\n    // loaded, so do stuff\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I just created a jQuery function to load an image using <a href=\"http://api.jquery.com/category/deferred-object/\" rel=\"nofollow\">jQuerys Deferred Object</a> which makes it very easy to react on load/error event:</p>\n\n<pre><code>$.fn.extend({\n    loadImg: function(url, timeout) {\n        // init deferred object\n        var defer = $.Deferred(),\n            $img = this,\n            img = $img.get(0),\n            timer = null;\n\n        // define load and error events BEFORE setting the src\n        // otherwise IE might fire the event before listening to it\n        $img.load(function(e) {\n            var that = this;\n            // defer this check in order to let IE catch the right image size\n            window.setTimeout(function() {\n                // make sure the width and height are &gt; 0\n                ((that.width &gt; 0 &amp;&amp; that.height &gt; 0) ? \n                    defer.resolveWith : \n                    defer.rejectWith)($img);\n            }, 1);\n        }).error(function(e) {\n            defer.rejectWith($img);\n        });\n\n        // start loading the image\n        img.src = url;\n\n        // check if it's already in the cache\n        if (img.complete) {\n            defer.resolveWith($img);\n        } else if (0 !== timeout) {\n            // add a timeout, by default 15 seconds\n            timer = window.setTimeout(function() {\n                defer.rejectWith($img);\n            }, timeout || 15000);\n        }\n\n        // return the promise of the deferred object\n        return defer.promise().always(function() {\n            // stop the timeout timer\n            window.clearTimeout(timer);\n            timer = null;\n            // unbind the load and error event\n            this.off(\"load error\");\n        });\n    }\n});\n</code></pre>\n\n<p><strong>Usage:</strong></p>\n\n<pre><code>var image = $('&lt;img /&gt;').loadImg('http://www.google.com/intl/en_com/images/srpr/logo3w.png')\n.done(function() {\n    alert('image loaded');\n    $('body').append(this);\n}).fail(function(){\n    alert('image failed');\n});\n</code></pre>\n\n<p>See it working at: <a href=\"http://jsfiddle.net/roberkules/AdWZj/\" rel=\"nofollow\">http://jsfiddle.net/roberkules/AdWZj/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This function checks if an image is loaded based on having measurable dimensions. This technique is useful if your script is executing after some of the images have already been loaded.</p>\n\n<pre><code>imageLoaded = function(node) {\n    var w = 'undefined' != typeof node.clientWidth ? node.clientWidth : node.offsetWidth;\n    var h = 'undefined' != typeof node.clientHeight ? node.clientHeight : node.offsetHeight;\n    return w+h &gt; 0 ? true : false;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There's a jQuery plugin called \"imagesLoaded\" that provides a cross-browser compatible method to check if an element's image(s) have been loaded.</p>\n\n<p>Site: <a href=\"https://github.com/desandro/imagesloaded/\" rel=\"nofollow\">https://github.com/desandro/imagesloaded/</a></p>\n\n<p>Usage for a container that has many images inside:</p>\n\n<pre><code>$('container').imagesLoaded(function(){\n console.log(\"I loaded!\");\n})\n</code></pre>\n\n<p>The plugin is great:</p>\n\n<ol>\n<li>works for checking a container with many images inside</li>\n<li>works for check an img to see if it has loaded</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As per one of the recent comments to your original question</p>\n\n<pre><code>$(function() {\n\n  $(window).resize(adjust_photo_size);\n  adjust_photo_size();\n\n  function adjust_photo_size()  {\n    if (!$(\"#photo\").get(0).complete) {\n       $(\"#photo\").load(function() {\n          adjust_photo_size();\n       });\n    } else {\n      ... \n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found this worked for me</p>\n\n<pre><code>document.querySelector(\"img\").addEventListener(\"load\", function() { alert('onload!'); });\n</code></pre>\n\n<p>Credit goes totaly to Frank Schwieterman, who commented on accepted answer. I had to put this here, it's too valuable...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>We developed a page where it loaded a number of images and then performed other functions only after the image was loaded. It was a busy site that generated a lot of traffic. It seems that the following simple script worked on practically all browsers:</p>\n\n<pre><code>$(elem).onload = function() {\n    doSomething();\n}\n</code></pre>\n\n<p><strong>BUT THIS IS A POTENTIAL ISSUE FOR IE9!</strong></p>\n\n<p>The ONLY browser we had reported issues on is IE9. Are we not surprised? It seems that the best way to solve the issue there is to not assign a src to the image until AFTER the onload function has been defined, like so:</p>\n\n<pre><code>$(elem).onload = function() {\n    doSomething();\n}\n$(elem).attr('src','theimage.png');\n</code></pre>\n\n<p>It seems that IE 9 will sometimes not throw the <code>onload</code> event for whatever reason. Other solutions on this page (such as the one from Evan Carroll, for example) still did not work.   Logically, that checked if the load state was already successful and triggered the function and if it wasn't, then set the onload handler, but even when you do that we demonstrated in testing that the image could load between those two lines of js thereby appearing not loaded to the first line and then loading before the onload handler is set.</p>\n\n<p>We found that the best way to get what you want is to not define the image's src until you have set the <code>onload</code> event trigger.</p>\n\n<p>We only just recently stopped supporting IE8 so I can't speak for versions prior to IE9, otherwise, out of all the other browsers that were used on the site -- IE10 and 11 as well as Firefox, Chrome, Opera, Safari and whatever mobile browser people were using -- setting the <code>src</code> before assigning the <code>onload</code> handler was not even an issue.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm writing some Javascript to resize the large image to fit into the user's browser window.  (I don't control the size of the source images unfortunately.)</p>\n\n<p>So something like this would be in the HTML:</p>\n\n<pre><code>&lt;img id=\"photo\"\n     src=\"a_really_big_file.jpg\"\n     alt=\"this is some alt text\"\n     title=\"this is some title text\" /&gt;\n</code></pre>\n\n<p><strong>Is there a way for me to determine if the <code>src</code> image in an <code>img</code> tag has been downloaded?</strong></p>\n\n<p>I need this because I'm running into a problem if <code>$(document).ready()</code> is executed before the browser has loaded the image.  <code>$(\"#photo\").width()</code> and <code>$(\"#photo\").height()</code> will return the size of the placeholder (the alt text).  In my case this is something like 134 x 20.</p>\n\n<p>Right now I'm just checking if the photo's height is less than 150, and assuming that if so it is just alt text.  But this is quite a hack, and it would break if a photo is less than 150 pixels tall (not likely in my particular case), or if the alt text is more than 150 pixels tall (could possibly happen on a small browser window).</p>\n\n<p><hr /></p>\n\n<p><strong>Edit:</strong> For anyone wanting to see the code:</p>\n\n<pre><code>$(function()\n{\n  var REAL_WIDTH = $(\"#photo\").width();\n  var REAL_HEIGHT = $(\"#photo\").height();\n\n  $(window).resize(adjust_photo_size);\n  adjust_photo_size();\n\n  function adjust_photo_size()\n  {\n    if(REAL_HEIGHT &lt; 150)\n    {\n      REAL_WIDTH = $(\"#photo\").width();\n      REAL_HEIGHT = $(\"#photo\").height();\n      if(REAL_HEIGHT &lt; 150)\n      {\n        //image not loaded.. try again in a quarter-second\n        setTimeout(adjust_photo_size, 250);\n        return;\n      }\n    }\n\n    var new_width = . . . ;\n    var new_height = . . . ;\n\n    $(\"#photo\").width(Math.round(new_width));\n    $(\"#photo\").height(Math.round(new_height));\n  }\n\n});\n</code></pre>\n\n<p><hr /></p>\n\n<p><strong>Update</strong>: Thanks for the suggestions.  There is a risk of the event not being fired if I set a callback for the <code>$(\"#photo\").load</code> event, so I have defined an onLoad event directly on the image tag.  For the record, here is the code I ended up going with:</p>\n\n<pre><code>&lt;img id=\"photo\"\n     onload=\"photoLoaded();\"\n     src=\"a_really_big_file.jpg\"\n     alt=\"this is some alt text\"\n     title=\"this is some title text\" /&gt;\n</code></pre>\n\n<p>Then in Javascript:</p>\n\n<pre><code>//This must be outside $() because it may get called first\nvar isPhotoLoaded = false;\nfunction photoLoaded()\n{\n  isPhotoLoaded = true;\n}\n\n$(function()\n{\n  //Hides scrollbars, so we can resize properly.  Set with JS instead of\n  //  CSS so that page doesn't break with JS disabled.\n  $(\"body\").css(\"overflow\", \"hidden\");\n\n  var REAL_WIDTH = -1;\n  var REAL_HEIGHT = -1;\n\n  $(window).resize(adjust_photo_size);\n  adjust_photo_size();\n\n  function adjust_photo_size()\n  {\n    if(!isPhotoLoaded)\n    {\n      //image not loaded.. try again in a quarter-second\n      setTimeout(adjust_photo_size, 250);\n      return;\n    }\n    else if(REAL_WIDTH &lt; 0)\n    {\n      //first time in this function since photo loaded\n      REAL_WIDTH = $(\"#photo\").width();\n      REAL_HEIGHT = $(\"#photo\").height();\n    }\n\n    var new_width = . . . ;\n    var new_height = . . . ;\n\n    $(\"#photo\").width(Math.round(new_width));\n    $(\"#photo\").height(Math.round(new_height));\n  }\n\n});\n</code></pre>\n",
            "last_activity_date": 1417635245,
            "question_id": 263359,
            "score": 57,
            "tags": [
                "javascript",
                "jquery",
                "image"
            ],
            "title": "How can I determine if an image has loaded, using Javascript/jQuery?"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>Yes, with <a href=\"http://www.adobe.com/products/air/\">Adobe AIR</a>. Adobe AIR lets you make desktop applications with Javascript, Flex, or Flash.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>There's <a href=\"http://widgets.yahoo.com/tools/\" rel=\"nofollow\">Yahoo's Konfabulator</a> for the windows desktop.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There is <a href=\"http://developer.mozilla.org/en/XULRunner\">XULRunner</a>, which let's you build GUI apps like Firefox using JavaScript and XUL. It has a lot of extension to JavaScript though, using XPCOM. They also offer <a href=\"http://developer.mozilla.org/en/Prism\">Prism</a> which let's you build web apps that work offline, sort of like AIR. Yahoo uses it for their <a href=\"http://www.zimbra.com/\">Zimbra</a> email desktop client.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p><a href=\"http://gears.google.com\" rel=\"nofollow\">Google Gears</a>. There's also Mozilla's <a href=\"http://www.mozilla.org/projects/xul/\" rel=\"nofollow\">XUL</a>, but it's too bit complicated, IMHO (albeit extremely powerful).</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There's <a href=\"http://www.mozilla.org/js/spidermonkey/\" rel=\"nofollow\">SpiderMonkey</a>, a JavaScript engine written in C and <a href=\"http://www.mozilla.org/rhino/\" rel=\"nofollow\">Rhino</a>, an implementation of JavaScript in Java.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Script# has extensions for Vista Gadgets. </p>\n\n<p><a href=\"http://projects.nikhilk.net/ScriptSharp/\" rel=\"nofollow\">http://projects.nikhilk.net/ScriptSharp/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can make a desktop application using XML and javascript (and/or VBS) using the Windows Script host.</p>\n\n<p>The trick is to save your XML file with a <code>.hta</code> extension. <a href=\"http://msdn.microsoft.com/en-us/library/ms536496.aspx\">See this reference</a>.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>There's <a href=\"http://www.appcelerator.com/\" rel=\"nofollow\">Titanium Developer</a> which is similar to Adobe AIR (html+css+javascript), but does not require a framework to be pre-installed.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Here are some JSOS (Javascript Operating Systems), sort-of still need a browser.</p>\n\n<p><a href=\"http://fractalbrain.net/\" rel=\"nofollow\">http://fractalbrain.net/</a> /* The Best. */</p>\n\n<p><a href=\"http://cometdesktop.com/\" rel=\"nofollow\">http://cometdesktop.com/</a> /* Alright. */</p>\n\n<p><a href=\"http://skylightproject.com/\" rel=\"nofollow\">http://skylightproject.com/</a> /* Worst */</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Another option I didn't see mentioned is for Cocoa (Mac OS X, iPhone OS) applications you can use a web view (embedded WebKit) as the application UI.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://cappuccino.org/\" rel=\"nofollow\">http://cappuccino.org/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>JavaScript Web Desktop:</p>\n\n<p><a href=\"http://www.supremesearch3000.bravehost.com/Desktop%20Search%20Engine.htm\" rel=\"nofollow\">http://www.supremesearch3000.bravehost.com/Desktop%20Search%20Engine.htm</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can try <a href=\"http://javalikescript.free.fr/\" rel=\"nofollow\">JavaLikeScript</a>, it does not provide the same native/root objects that a web browser but it has network and user interface features.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Windows 8 allows for Windows Store Apps to be written in HTML5/JavaScript.</p>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>\"<a href=\"https://github.com/rogerwang/node-webkit\">node-webkit</a> is an app runtime based on Chromium and node.js. You can write native apps in HTML and Javascript with node-webkit. It also lets you call Node.js modules directly from the DOM...\"</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Try <a href=\"http://appjs.com/\" rel=\"nofollow\">AppJS</a>, It is an SDK on top of NodeJS and Chromium Embedded Framework. You can build desktop apps easily with the web technologies.</p>\n\n<ul>\n<li>Webpage: <a href=\"http://appjs.com\" rel=\"nofollow\">http://appjs.com</a></li>\n<li>Github: <a href=\"https://github.com/appjs\" rel=\"nofollow\">https://github.com/appjs</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Google has a new interesting technology going on. It's in a quite early stage but works good already. It's called Packaged Apps and is using Chrome as a runtime and works on both Pc and Mac. Have a look at <a href=\"http://developer.chrome.com/apps/about_apps.html\" rel=\"nofollow\">http://developer.chrome.com/apps/about_apps.html</a> </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Looks like there are 3 types of html5-desktop app</p>\n\n<p>SDK</p>\n\n<ul>\n<li><a href=\"https://qt-project.org/\">https://qt-project.org/</a></li>\n<li><a href=\"http://awesomium.com\">http://awesomium.com</a></li>\n<li><a href=\"http://berkelium.org\">http://berkelium.org</a></li>\n<li><a href=\"http://www.appcelerator.com/platform\">http://www.appcelerator.com/platform</a></li>\n</ul>\n\n<p>Browser runtime</p>\n\n<ul>\n<li><a href=\"http://developer.mozilla.org/en-US/docs/XULRunner\">http://developer.mozilla.org/en-US/docs/XULRunner</a></li>\n<li><a href=\"http://developer.chrome.com/apps/about_apps.html\">http://developer.chrome.com/apps/about_apps.html</a></li>\n</ul>\n\n<p>Node.js based</p>\n\n<ul>\n<li><a href=\"http://appjs.com/\">http://appjs.com/</a></li>\n<li><a href=\"https://github.com/maccman/bowline\">https://github.com/maccman/bowline</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I answered with node-webkit above, but I recently saw a presentation on <a href=\"https://www.trueinteractions.com/tint2/docs/\" rel=\"nofollow\"><strong>Tint2</strong></a>.  It seems to address security concerns with node-webkit and looks promising.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I know there's JScript.NET, but it isn't the same as the JavaScript we know from the web.</p>\n\n<p>Does anyone know if there are any JavaScript based platforms/compilers for desktop development? Most specifically Windows desktop development.</p>\n",
            "last_activity_date": 1425072470,
            "question_id": 109399,
            "score": 56,
            "tags": [
                "javascript",
                "windows",
                "desktop",
                "platform"
            ],
            "title": "Can you do Desktop Development using JavaScript?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>That's just your browser being clever. They're both objects but DOMElements are <em>special</em> objects. jQuery just wraps DOMElements in a Javascript object.</p>\n\n<p>If you want to get more debug info I recommend you look at debugging tools like Firebug for Firefox and Chrome's built-in inspector (very similar to Firebug).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<blockquote>\n  <p>I would like to understand relationship between jQuery object and DOM element</p>\n</blockquote>\n\n<p>A jQuery object is an array-like object that contains DOM element(s). A jQuery object can contain multiple DOM elements depending on the selector you use.</p>\n\n<blockquote>\n  <p>Also what methods can operate on jQuery object vs DOM element? Can a single jQuery object represent multiple DOM elements ?</p>\n</blockquote>\n\n<p>jQuery functions (a full list is on the website) operate on jQuery objects and not on DOM elements. You can access the DOM elements inside a jQuery function using <code>.get()</code> or accessing the element at the desired index directly:</p>\n\n<pre><code>$(\"selector\")[0] // Accesses the first DOM element in this jQuery object\n$(\"selector\").get(0) // Equivalent to the code above\n$(\"selector\").get() // Retrieve a true array of DOM elements matched by this selector\n</code></pre>\n\n<p>In other words, the following should get you the same result:</p>\n\n<pre><code>&lt;div id=\"foo\"&gt;&lt;/div&gt;\n\nalert($(\"#foo\")[0]);\nalert($(\"#foo\").get(0));\nalert(document.getElementById(\"foo\"));\n</code></pre>\n\n<p>For more information on the jQuery object, <a href=\"http://api.jquery.com/Types/#jQuery\">see the documentation</a>. Also check out the documentation for <a href=\"http://api.jquery.com/get\"><code>.get()</code></a></p>\n",
                    "is_accepted": true,
                    "score": 65
                },
                {
                    "body": "<p>Most jQuery member <code>Functions</code> do not have a return value but rather return the current <code>jQuery Object</code> or another <code>jQuery Object</code>.</p>\n\n<hr>\n\n<p>So, </p>\n\n<pre><code>console.log(\"(!!) jquery &gt;&gt; \" + $(\"#id\") ) ; \n</code></pre>\n\n<p>will return <code>[object Object]</code>, i.e. a <code>jQuery Object</code> which maintains the collection which is the result of evaluating the selector <code>String</code> (<code>\"#id\"</code>) against the <code>Document</code>,</p>\n\n<p>while ,</p>\n\n<pre><code>console.log(\"(!!) getElementById &gt;&gt; \" + document.getElementById(\"id\") ) ;\n</code></pre>\n\n<p>will return <code>[object HTMLDivElement]</code> (or in fact <code>[object Object]</code> in IE) because/if the return value is a <code>div</code> <code>Element</code>.</p>\n\n<hr>\n\n<blockquote>\n  <p>Also what methods can operate on jQuery object vs DOM element? (1) Can a single jQuery object represent multiple DOM elements ? (2)</p>\n</blockquote>\n\n<p>(1) There is a host of member <code>Function</code>s in jQuery that pertain to DOM <code>Object</code>s. The best thing to do imo is search the jQuery API documentation for a relevant <code>Function</code> once you have a specific task (such as selecting <code>Node</code>s or manipulating them).</p>\n\n<ul>\n<li><a href=\"http://docs.jquery.com/Main_Page\" rel=\"nofollow\">jQuery documentation</a></li>\n</ul>\n\n<p>(2) Yes, a single <code>jQuery Object</code> may maintain a list of multiple DOM <code>Element</code>s. There are multiple <code>Functions</code> (such as <code>jQuery.find</code> or <code>jQuery.each</code>) that build upon this automatic caching behaviour.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>When you use jQuery to obtain an DOM element, the jQuery object returns contains a reference to the element. When you use a native function like <code>getElementById</code>, you get the reference to the element directly, not contained within a jQuery object.</p>\n\n<p>A jQuery object is an array-like object that can contain multiple DOM elements:</p>\n\n<pre><code>var jQueryCollection = $(\"div\"); //Contains all div elements in DOM\n</code></pre>\n\n<p>The above line could be performed without jQuery:</p>\n\n<pre><code>var normalCollection = document.getElementsByTagName(\"div\");\n</code></pre>\n\n<p>In fact, that's exactly what jQuery will do internally when you pass in a simple selector like <code>div</code>. You can access the actual elements within a jQuery collection using the <code>get</code> method:</p>\n\n<pre><code>var div1 = jQueryCollection.get(0); //Gets the first element in the collection\n</code></pre>\n\n<p>When you have an element, or set of elements, inside a jQuery object, you can use any of the methods available in the jQuery API, whereas when you have the raw element you can only use native JavaScript methods.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I just barely started playing with jQuery this last month, and I had a similar question running around in my mind.  All the answers you have received so far are valid and on the dot, but a very precise answer may be this:</p>\n\n<p>Let's say you are in a function, and to refer to the calling element, you can either use <code>this</code>, or <code>$(this)</code>; but what is the difference?  Turns out, when you use <code>$(this)</code>, you are wrapping <code>this</code> inside a jQuery object.  The benefit is that once an object is a jQuery object, you can use all the jQuery functions on it.</p>\n\n<p>It's pretty powerful, since you can even wrap a string representation of elements, <code>var s = '&lt;div&gt;hello &lt;a href='#'&gt;world&lt;/a&gt;&lt;/div&gt;&lt;span&gt;!&lt;/span&gt;'</code>, inside a jQuery object just by literally wrapping it in $(): <code>$(s)</code>.  Now you can manipulate all those elements with jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I would like to understand relationship between jQuery object and DOM element..</p>\n\n<p>When jQuery returns an element it shows up as <code>[object Object]</code> in an alert. \nWhen <code>getElementByID</code> returns an element it shows up as <code>[object HTMLDivElement]</code>. What does that mean exactly? I mean are both of them objects with a difference ?</p>\n\n<p>Also what methods can operate on jQuery object vs DOM element? Can a single jQuery object represent multiple DOM elements ?</p>\n",
            "last_activity_date": 1361071190,
            "question_id": 6974582,
            "score": 43,
            "tags": [
                "javascript",
                "dom",
                "jquery"
            ],
            "title": "jQuery object and DOM element"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>I know you can <a href=\"http://web.tampabay.rr.com/bmerkey/examples/locked-column-csv.html\" rel=\"nofollow\">do it for MSIE</a> and <a href=\"http://www.whirlywiryweb.com/q/dhtmlgems.asp\" rel=\"nofollow\">this limited example</a> seems to work for firefox (not sure how extensible the technique is).</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>The first column has a scrollbar on the cell right below the headers</p>\n\n<pre><code>&lt;table&gt;\n    &lt;thead&gt;\n    \t&lt;th&gt; Header 1&lt;/th&gt;\n    \t&lt;th&gt; Header 2&lt;/th&gt;\n    \t&lt;th&gt; Header 3&lt;/th&gt;\n    &lt;/thead&gt;\n    &lt;tbody&gt;\n    \t&lt;tr&gt;\n    \t\t&lt;td&gt;\n    \t\t\t&lt;div style=\"width: 50; height:30; overflow-y: scroll\"&gt; \n    \t\t\t\tTklasdjf alksjf asjdfk jsadfl kajsdl fjasdk fljsaldk \n    \t\t\t\tfjlksa djflkasjdflkjsadlkf jsakldjfasdjfklasjdflkjasdlkfjaslkdfjasdf\n    \t\t\t&lt;/div&gt;\n    \t\t&lt;/td&gt;\n    \t\t&lt;td&gt;\n    \t\t\tHello world\n    \t\t&lt;/td&gt;\n    \t\t&lt;td&gt; Hello world2\n    \t&lt;/tr&gt;\n    &lt;/tbody&gt;\n&lt;/table&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>If what you want is to have the headers stay put while the data in the table scrolls vertically, you should implement a &lt;tbody> styled with \"overflow-y: auto\" like this:</p>\n\n<pre><code>&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;\n      &lt;th&gt;Header1&lt;/th&gt;\n       . . . \n    &lt;/tr&gt;\n   &lt;/thead&gt;\n   &lt;tbody style=\"height: 300px; overflow-y: auto\"&gt; \n     &lt;tr&gt;\n       . . .\n     &lt;/tr&gt;\n     . . .\n   &lt;/tbody&gt;\n &lt;/table&gt;\n</code></pre>\n\n<p>If the &lt;tbody> content grows taller than the desired height, it will start scrolling. However, the headers will stay fixed at the top regardless of the scroll position.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"http://developer.yahoo.com/yui/datatable/\" rel=\"nofollow\">YUI DataTable</a></p>\n\n<p>I don't know if YUI DT has this feature but I won't be surprised if it does.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You might be looking for <a href=\"http://www.massless.org/%5Ftests/grid1/?s=1&amp;r=40&amp;c=40\" rel=\"nofollow\"><strong>this</strong></a>. </p>\n\n<p>It has some known issues though.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Working example of <a href=\"http://fixed-header-using-jquery.blogspot.com/2009/05/scrollable-table-with-fixed-header-and.html\" rel=\"nofollow\">link posted by pranav</a>:</p>\n\n<p><a href=\"http://jsbin.com/nolanole/1/edit?html,js,output\" rel=\"nofollow\">http://jsbin.com/nolanole/1/edit?html,js,output</a></p>\n\n<p>FYI: Tested in IE 6, 7, &amp; 8 (compatibility mode on or off), FF 3 &amp; 3.5, Chrome 2.  Not screen-reader-friendly (headers aren't part of content table).</p>\n\n<p>EDIT 5/5/14: moved example to jsBin.  This is old, but amazingly still works in current Chrome, IE, and Firefox (though IE and Firefox might require some adjustments to row heights).</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>I see this, although an old question, is a pretty good place to plug my own script:</p>\n\n<p><a href=\"http://code.google.com/p/js-scroll-table-header/\" rel=\"nofollow\">http://code.google.com/p/js-scroll-table-header/</a></p>\n\n<p>It just works with no configuration and is really easy to setup.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is a good jquery plugin, working in all browsers !</p>\n\n<p>You have a fixed header table without fixing his width...</p>\n\n<p>Check it : <a href=\"http://www.tablefixedheader.com\" rel=\"nofollow\">http://www.tablefixedheader.com/</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>In this answer there is also the best answer I found to your question: </p>\n\n<p><a href=\"http://stackoverflow.com/questions/673153/html-table-with-fixed-headers/673162#673162\">http://stackoverflow.com/questions/673153/html-table-with-fixed-headers/673162#673162</a></p>\n\n<p><strong>and based on pure CSS</strong>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have created something which has fixed header, fixed footer, fixed left column and also fixed right column. This only works fine in IE. As most of the users are still using IE this can be helpful. Please find the code here in <a href=\"http://s7u.blogspot.com/2008/07/dear-friends-i-want-to-discuss-about.html\" rel=\"nofollow\">Scrollable Table</a>. Please let me your suggestions.</p>\n\n<p>Meanwhile I am working to fix columns in other browser. I will keep you posted. :-)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;script&gt;\n   $(document).ready(function () {\n   $(\"#GridHeader table\").html($('#&lt;%= GridView1.ClientID %&gt;').html());\n   $(\"#GridHeader table tbody .rows\").remove();\n   $('#&lt;%= GridView1.ClientID %&gt; tr:first th').hide();\n});\n&lt;/script&gt;\n\n&lt;div id=\"GridHeader\"&gt;\n    &lt;table&gt;&lt;/table&gt;\n&lt;/div&gt;\n\n&lt;div style=\"overflow: auto; height:400px;\"&gt;\n    &lt;asp:GridView ID=\"GridView1\" runat=\"server\" /&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Not quite perfect, but it got me closer than some of the top answers here.</p>\n\n<p>Two different tables, one with the header, and the other, wrapped with a div with the content</p>\n\n<pre><code>&lt;table&gt;\n  &lt;thead&gt;\n    &lt;tr&gt;&lt;th&gt;Stuff&lt;/th&gt;&lt;th&gt;Second Stuff&lt;/th&gt;&lt;/tr&gt;\n  &lt;/thead&gt;\n&lt;/table&gt;\n&lt;div style=\"height: 600px; overflow: auto;\"&gt;\n  &lt;table&gt;\n    &lt;tbody&gt;\n      //Table\n    &lt;/tbody&gt;\n  &lt;/table&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The <strong><a href=\"http://datatables.net/index\" rel=\"nofollow\">jQuery DataTables plug-in</a></strong> is one excellent way to achieve excel-like fixed column(s) and headers.   </p>\n\n<p>Note the examples section of the site and the \"extras\".<br>\n<a href=\"http://datatables.net/examples/\" rel=\"nofollow\">http://datatables.net/examples/</a><br>\n<a href=\"http://datatables.net/extras/\" rel=\"nofollow\">http://datatables.net/extras/</a></p>\n\n<p>The \"Extras\" section has tools for fixed columns and fixed headers. </p>\n\n<p><strong>Fixed Columns</strong><br>\n<a href=\"http://datatables.net/extras/fixedcolumns/\" rel=\"nofollow\">http://datatables.net/extras/fixedcolumns/</a><br>\n(I believe the example on this page is the one most appropriate for your question.)</p>\n\n<p><strong>Fixed Header</strong><br>\n<a href=\"http://datatables.net/extras/fixedheader/\" rel=\"nofollow\">http://datatables.net/extras/fixedheader/</a><br>\n(Includes an example with a full page spreadsheet style layout: <a href=\"http://datatables.net/release-datatables/extras/FixedHeader/top_bottom_left_right.html\" rel=\"nofollow\">http://datatables.net/release-datatables/extras/FixedHeader/top_bottom_left_right.html</a>)</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there a CSS/JavaScript technique to display a long HTML table such that the column headers stay fixed on-screen and the first coloumn stay fixed and scroll with the data.</p>\n\n<p>I want to be able to scroll through the contents of the table, but to always be able to see the column headers at the top and the first column on the left.</p>\n\n<p>If there is a jQuery plugin that would be great! If it helps the only browser I care about is Firefox.</p>\n",
            "last_activity_date": 1399305957,
            "question_id": 684211,
            "score": 42,
            "tags": [
                "javascript",
                "html",
                "css",
                "html-table"
            ],
            "title": "HTML table with fixed headers and a fixed column?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Specifications:  </p>\n\n<ul>\n<li><a href=\"http://dev.w3.org/html5/websockets/\">W3C - The Web Sockets API</a></li>\n</ul>\n\n<p>Articles:</p>\n\n<ul>\n<li><a href=\"http://svwebbuilder.wordpress.com/2008/10/20/html5-websocket-and-webjneering/\">HTML5 WebSocket and WebJneering</a></li>\n<li><a href=\"http://www.jroller.com/tedgoddard/entry/websocket%5Fis%5Fneither%5Fweb%5Fnor\">WebSocket is neither Web nor Socket</a></li>\n<li><a href=\"http://markmaunder.com/2009/web-sockets-protocol/\">What the Web Sockets Protocol means for web startups</a></li>\n</ul>\n\n<p>Tutorial:<br>\n<em>None found so far</em></p>\n\n<p>Libraries:  </p>\n\n<ul>\n<li>Check this SO post <a href=\"http://stackoverflow.com/questions/1530023/html5-websocket-need-server\">html5 websocket\nneed server?</a>, it links to\n<a href=\"http://www.kaazing.com/download\">http://www.kaazing.com/download</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 35
                },
                {
                    "body": "<blockquote>\n  <p>How to Use Sockets in JavaScript/HTML?</p>\n</blockquote>\n\n<p>There is no facility to use general-purpose sockets in JS or HTML. It would be a security disaster, for one.</p>\n\n<p>There is WebSocket in HTML5. The client side is fairly trivial:</p>\n\n<pre><code>socket= new WebSocket('ws://www.example.com:8000/somesocket');\nsocket.onopen= function() {\n    socket.send('hello');\n};\nsocket.onmessage= function(s) {\n    alert('got reply '+s);\n};\n</code></pre>\n\n<p>You will need a specialised socket application on the server-side to take the connections and do something with them; it is not something you would normally be doing from a web server's scripting interface. However it is a <a href=\"http://tools.ietf.org/html/draft-hixie-thewebsocketprotocol\">relatively simple protocol</a>; my noddy Python SocketServer-based endpoint was only a couple of pages of code.</p>\n\n<p>In any case, it doesn't really exist, yet. Neither the JavaScript-side spec nor the network transport spec are nailed down, and no browsers support it.</p>\n\n<p>You can, however, use Flash where available to provide your script with a fallback until WebSocket is widely available. Gimite's <a href=\"http://github.com/gimite/web-socket-js\">web-socket-js</a> is one free example of such. However you are subject to the same limitations as Flash Sockets then, namely that your server has to be able to spit out a cross-domain policy on request to the socket port, and you will often have difficulties with proxies/firewalls. (Flash sockets are made directly; for someone without direct public IP access who can only get out of the network through an HTTP proxy, they won't work.)</p>\n\n<p>Unless you really need low-latency two-way communication, you are better off sticking with <code>XMLHttpRequest</code> for now.</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>I think it is important to mention, now that this question is over 1 year old, that <a href=\"http://socket.io/\">Socket.IO</a> has since come out and seems to be the primary way to work with sockets in the browser now; it is also compatible with <a href=\"http://nodejs.org/\">Node.js</a> as far as I know.</p>\n",
                    "is_accepted": false,
                    "score": 33
                }
            ],
            "body": "<p>How to Use Sockets in JavaScript\\HTML?</p>\n\n<p>May be using some cool HTML5?</p>\n\n<p>Libraries?\nTutorials?\nBlog Articles?</p>\n",
            "last_activity_date": 1395104820,
            "question_id": 1736382,
            "score": 41,
            "tags": [
                "javascript",
                "html",
                "html5",
                "websocket"
            ],
            "title": "How to Use Sockets in JavaScript\\HTML?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>You may need to explain your question a little more.</p>\n\n<p>When you say \"redirect\", to most people that suggests changing the location of the HTML page:</p>\n\n<pre><code>window.location = url;\n</code></pre>\n\n<p>When you say \"redirect to function\" - it doesn't really make sense. You can call a function or you can redirect to another page. You can even redirect and have a function called when the new page loads.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>redirect to function?<br>\nif you are talking about redirecting to a certain url and execute a certain function you   should:<br>\nredirect with get variables, parse the request query string and switch case over the get   variable.<br>\nbut your question is hard to understand, please provide more details.  </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can't redirect to a function. What you can do is pass some flag on the URL when redirecting, then check that flag in the server side code and if raised, execute the function.</p>\n\n<p>For example:</p>\n\n<pre><code>document.location = \"MyPage.php?action=DoThis\";\n</code></pre>\n\n<p>Then in your PHP code check for \"action\" in the query string and if equal to \"DoThis\" execute whatever function you need.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>To redirect to another page, you can use:</p>\n\n<pre><code>window.location = \"http://www.yoururl.com\";\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 354
                }
            ],
            "body": "<p>Is it possible to redirect from one page to a function in controller ?</p>\n\n<p><strong>Edit</strong></p>\n\n<p>If you are looking to do a <strong>simple javascript redirect</strong>, then some of these answers may be helpful to you.</p>\n",
            "last_activity_date": 1424188512,
            "question_id": 4744751,
            "score": 147,
            "tags": [
                "javascript",
                "redirect"
            ],
            "title": "How do I redirect with Javascript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>This message displays when Internet Explorer reaches the maximum number of synchronous instructions for a piece of JavaScript.  The default maximum is 5,000,000 instructions, you can increase this number on a single machine by <a href=\"http://support.microsoft.com/default.aspx?scid=kb;en-us;175500\">editing the registry</a>.</p>\n\n<blockquote>\n  <p><em>Internet Explorer now tracks the total number of executed script statements and resets the value each time that a new script execution is started, such as from a timeout or from an event handler, for the current page with the script engine. Internet Explorer displays a \"long-running script\" dialog box when that value is over a threshold amount.</em></p>\n</blockquote>\n\n<p>The only way to solve the problem for all users that might be viewing your page is to break up the number of iterations your loop performs using timers, or refactor your code so that it doesn't need to process as many instructions.</p>\n\n<p>Breaking up a loop with timers is relatively straightforward:</p>\n\n<pre><code>var i=0;\n(function () {\n    for (; i &lt; 6000000; i++) {\n        /*\n            Normal processing here\n        */\n\n        // Every 100,000 iterations, take a break\n        if ( i &gt; 0 &amp;&amp; i % 100000 == 0) {\n            // Manually increment `i` because we break\n            i++;\n            // Set a timer for the next iteration \n            window.setTimeout(arguments.callee);\n            break;\n        }\n    }\n})();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 59
                },
                {
                    "body": "<p>The unresponsive script dialog box shows when some javascript thread takes too long too complete.  Editing the registry could work, but you would have to do it on all client machines.  You could use a \"recursive closure\" as follows to alleviate the problem.  It's just a coding structure in which allows you to take a long running for loop and change it into something that does some work, and keeps track where it left off, yielding to the browser, then continuing where it left off until we are done.</p>\n\n<p><strong>Figure 1, Add this Utility Class RepeatingOperation to your javascript file.  You will not need to change this code:</strong></p>\n\n<pre><code>RepeatingOperation = function(op, yieldEveryIteration) {\n\n  //keeps count of how many times we have run heavytask() \n  //before we need to temporally check back with the browser.\n  var count = 0;   \n\n  this.step = function() {\n\n    //Each time we run heavytask(), increment the count. When count\n    //is bigger than the yieldEveryIteration limit, pass control back \n    //to browser and instruct the browser to immediately call op() so\n    //we can pick up where we left off.  Repeat until we are done.\n    if (++count &gt;= yieldEveryIteration) {\n      count = 0;\n\n      //pass control back to the browser, and in 1 millisecond, \n      //have the browser call the op() function.  \n      setTimeout(function() { op(); }, 1, [])\n\n      //The following return statement halts this thread, it gives \n      //the browser a sigh of relief, your long-running javascript\n      //loop has ended (even though technically we havn't yet).\n      //The browser decides there is no need to alarm the user of\n      //an unresponsive javascript process.\n      return;\n      }\n    op();\n  };\n};\n</code></pre>\n\n<p><strong>Figure 2, The following code represents your code that is causing the 'stop running this script' dialog because it takes so long to complete:</strong></p>\n\n<pre><code>process10000HeavyTasks = function() {\n  var len = 10000;  \n  for (var i = len - 1; i &gt;= 0; i--) {\n    heavytask();   //heavytask() can be run about 20  times before\n                   //an 'unresponsive script' dialog appears.\n                   //If heavytask() is run more than 20 times in one\n                   //javascript thread, the browser informs the user that\n                   //an unresponsive script needs to be dealt with.  \n\n                   //This is where we need to terminate this long running\n                   //thread, instruct the browser not to panic on an unresponsive\n                   //script, and tell it to call us right back to pick up\n                   //where we left off.\n  }\n}\n</code></pre>\n\n<p><strong>Figure 3.  The following code is the fix for the problematic code in Figure 2.  Notice the for loop is replaced with a recursive closure which passes control back to the browser every 10 iterations of heavytask()</strong></p>\n\n<pre><code>process10000HeavyTasks = function() {\n\n  var global_i = 10000; //initialize your 'for loop stepper' (i) here.\n\n  var repeater = new this.RepeatingOperation(function() {\n\n    heavytask();\n\n    if (--global_i &gt;= 0){     //Your for loop conditional goes here.\n      repeater.step();        //while we still have items to process,\n                              //run the next iteration of the loop.\n    }\n    else {\n       alert(\"we are done\");  //when this line runs, the for loop is complete.\n    }\n  }, 10);                   //10 means process 10 heavytask(), then\n                            //yield back to the browser, and have the\n                            //browser call us right back.\n\n  repeater.step();          //this command kicks off the recursive closure.\n\n};\n</code></pre>\n\n<p>Adapted from this source:</p>\n\n<p><a href=\"http://www.picnet.com.au/blogs/Guido/post/2010/03/04/How-to-prevent-Stop-running-this-script-message-in-browsers\">http://www.picnet.com.au/blogs/Guido/post/2010/03/04/How-to-prevent-Stop-running-this-script-message-in-browsers</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I can't comment on the previous answers since I haven't tried them.  However I know the following strategy works for me.  It is a bit less elegant but gets the job done.  It also doesn't require breaking code into chunks like some other approaches seem to do.  In my case, that was not an option, because my code had recursive calls to the logic that was being looped; i.e., there was no practical way to just hop out of the loop, then be able to resume in some way by using global vars to preserve current state since those globals could be changed by references to them in a subsequent recursed call.  So I needed a straight-forward way that would not offer a chance for the code to compromise the data state integrity.</p>\n\n<p>Assuming the \"stop script?\" dialog is coming up during a for() loop executuion after a number of iterations (in my case, about 8-10), and messing with the registry is no option, here was the fix (for me, anyway):</p>\n\n<pre><code>var anarray = [];\nvar array_member = null;\nvar counter = 0; // Could also be initialized to the max desired value you want, if\n                 // planning on counting downward.\n\nfunction func_a()\n{\n // some code\n // optionally, set 'counter' to some desired value.\n ...\n anarray = { populate array with objects to be processed that would have been\n             processed by a for() }\n // 'anarry' is going to be reduced in size iteratively.  Therefore, if you need\n //  to maintain an orig. copy of it, create one, something like 'anarraycopy'.\n //  If you need only a shallow copy, use 'anarraycopy = anarray.slice(0);'\n //  A deep copy, depending on what kind of objects you have in the array, may be\n //  necessary.  The strategy for a deep copy will vary and is not discussed here.\n //  If you need merely to record the array's orig. size, set a local or\n //  global var equal to 'anarray.length;', depending on your needs.\n // - or -\n // plan to use 'counter' as if it was 'i' in a for(), as in\n // for(i=0; i &lt; x; i++ {...}\n\n   ...\n\n   // Using 50 for example only.  Could be 100, etc. Good practice is to pick something\n   // other than 0 due to Javascript engine processing; a 0 value is all but useless\n   // since it takes time for Javascript to do anything. 50 seems to be good value to\n   // use. It could be though that what value to use does  depend on how much time it\n   // takes the code in func_c() to execute, so some profiling and knowing what the \n   // most likely deployed user base is going to be using might help. At the same \n   // time, this may make no difference.  Not entirely sure myself.  Also, \n   // using \"'func_b()'\" instead of just \"func_b()\" is critical.  I've found that the\n   // callback will not occur unless you have the function in single-quotes.\n\n   setTimeout('func_b()', 50);\n\n  //  No more code after this.  function func_a() is now done.  It's important not to\n  //  put any more code in after this point since setTimeout() does not act like\n  //  Thread.sleep() in Java.  Processing just continues, and that is the problem\n  //  you're trying to get around.\n\n} // func_a()\n\n\nfunction func_b()\n{\n if( anarray.length == 0 )\n {\n   // possibly do something here, relevant to your purposes\n   return;\n }\n//  -or- \nif( counter == x ) // 'x' is some value you want to go to.  It'll likely either\n                   // be 0 (when counting down) or the max desired value you\n                   // have for x if counting upward.\n{\n  // possibly do something here, relevant to your purposes\n  return;\n}\n\narray_member = anarray[0];\nanarray.splice(0,1); // Reduces 'anarray' by one member, the one at anarray[0].\n                     // The one that was at anarray[1] is now at\n                     // anarray[0] so will be used at the next iteration of func_b().\n\nfunc_c();\n\nsetTimeout('func_b()', 50);\n\n} // func_b()\n\n\nfunction func_c()\n{\n  counter++; // If not using 'anarray'.  Possibly you would use\n             // 'counter--' if you set 'counter' to the highest value\n             // desired and are working your way backwards.\n\n  // Here is where you have the code that would have been executed\n  // in the for() loop.  Breaking out of it or doing a 'continue'\n  // equivalent can be done with using 'return;' or canceling \n  // processing entirely can be done by setting a global var\n  // to indicate the process is cancelled, then doing a 'return;', as in\n  // 'bCancelOut = true; return;'.  Then in func_b() you would be evaluating\n  // bCancelOut at the top to see if it was true.  If so, you'd just exit from\n  // func_b() with a 'return;'\n\n} // func_c()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a JavaScript function that contains a for loop that iterates so many times.<br>\nAfter calling this function, the IE browser displays this message:  </p>\n\n<blockquote>\n  <p>Stop running this script?<br>\n  A script on this page is causing your web browser to run slowly.\n   If it continues to run, your computer might become unresponsive.  </p>\n</blockquote>\n\n<p>How can I fix this?<br>\nis there anyway I can disable this message from IE?</p>\n",
            "last_activity_date": 1422893136,
            "question_id": 4460263,
            "score": 34,
            "tags": [
                "javascript",
                "internet-explorer"
            ],
            "title": "Disabling the long-running-script message in Internet Explorer"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>I don't know how to get this to work, but if you want to load JavaScript in dynamically, I know that loading a JavaScript with jQuery will run the script, or just loading JavaScript with any AJAX functions and eval() it should work.</p>\n",
                    "is_accepted": false,
                    "score": -9
                },
                {
                    "body": "<p>There is no error event for the script tag. You can tell when it is successful, and assume that it has not loaded after a timeout:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" onload=\"loaded=1\" src=\"....js\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>To check if the javascript in <code>nonexistant.js</code> returned no error you have to add a variable inside <code>http://fail.org/nonexistant.js</code> like <code>var isExecuted = true;</code> and then check if it exists when the script tag is loaded.</p>\n\n<p>However if you only want to check that the <code>nonexistant.js</code> returned without a 404 (meaning it exists), you can try with a <code>isLoaded</code> variable ...</p>\n\n<pre><code>var isExecuted = false;\nvar isLoaded = false;\nscript_tag.onload = script_tag.onreadystatechange = function() {\n    if(!this.readyState ||\n        this.readyState == \"loaded\" || this.readyState == \"complete\") {\n        // script successfully loaded\n        isLoaded = true;\n\n        if(isExecuted) // no error\n    }\n}\n</code></pre>\n\n<p>This will cover both cases.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The reason it doesn't work in Safari is because you're using attribute syntax. This will work fine though:</p>\n\n<pre><code>script_tag.addEventListener('error', function(){/*...*/}, true);\n</code></pre>\n\n<p>...except in IE.</p>\n\n<p>If you want to check the script executed successfully, just set a variable using that script and check for it being set in the outer code.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It was proposed to set a timeout and then assume load failure after a timeout.</p>\n\n<pre><code>setTimeout(fireCustomOnerror, 4000);\n</code></pre>\n\n<p>The problem with that approach is that the assumption is based on chance. After your timeout expires, the request is still pending. The request for the pending script may load, even after the programmer assumed that load won't happen.</p>\n\n<p>If the request could be canceled, then the program could wait for a period, then cancel the request. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Well, the only way I can think of doing everything you want is pretty ugly. First perform an AJAX call to retrieve the Javascript file contents. When this completes you can check the status code to decide if this was successful or not. Then take the responseText from the xhr object and wrap it in a try/catch, dynamically create a script tag, and for IE you can set the text property of the script tag to the JS text, in all other browsers you should be able to append a text node with the contents to script tag. If there's any code that expects a script tag to actually contain the src location of the file, this won't work, but it should be fine for most situations. Ugly, but will work. You can take a look at my quick and dirty example here: <a href=\"http://pastie.org/829775\" rel=\"nofollow\">http://pastie.org/829775</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you only care about html5 browsers you can use error event (since this is only for error handling, it should be ok to only support this on next gen browsers for KISS IMHO).</p>\n\n<p>From the spec:</p>\n\n<blockquote>\n  <p>If the src attribute's value is the\n  empty string or if it could not be\n  resolved, then the user agent must\n  queue a task to fire a simple event\n  named <em>error</em> at the element, and\n  abort these steps.</p>\n</blockquote>\n\n<p>~</p>\n\n<blockquote>\n  <p>If the load resulted in an error (for\n  example a DNS error, or an HTTP 404\n  error) Executing the script block must\n  just consist of firing a simple event\n  named error at the element.</p>\n</blockquote>\n\n<p>This means you don't have to do any error prone polling and can combine it with async and defer attribute to make sure the script is not blocking page rendering:</p>\n\n<blockquote>\n  <p>The defer attribute may be specified\n  even if the async attribute is\n  specified, to cause legacy Web\n  browsers that only support defer (and\n  not async) to fall back to the defer\n  behavior instead of the synchronous\n  blocking behavior that is the default.</p>\n</blockquote>\n\n<p>More on <a href=\"http://www.w3.org/TR/html5/scripting-1.html#script\">http://www.w3.org/TR/html5/scripting-1.html#script</a></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I know this is an old thread but I got a nice solution to you (I think). It's copied from an class of mine, that handles all AJAX stuff.</p>\n\n<p>When the script cannot be loaded, it set an error handler but when the error handler is not supported, it falls back to a timer that checks for errors for 15 seconds.</p>\n\n<pre><code>    function jsLoader()\n    {\n    var o = this;\n\n    o.timer = function(t,i,d,f,fend,b) // simple unstopable repeat timer, when t=-1 means endless, when function f() returns true it can be stopped\n    {\n      if( t == -1 || t &gt; 0 )\n       { setTimeout( function() { b=(f())?1:0; o.timer( (b)?0:(t&gt;0)?--t:t, i+((d)?d:0), d, f, fend,b ); }, (b||i&lt;0)?0.1:i ); }\n      else if( typeof fend == 'function' )\n            { setTimeout( fend, 1 ); }\n    };\n\no.addEvent = function( el, eventName, eventFunc )\n{\n if( typeof el != 'object' )\n { return false; }\n\n if( el.addEventListener )\n {\n   el.addEventListener ( eventName, eventFunc,false);\n   return true;\n }\n\n if( el.attachEvent )\n {\n  el.attachEvent(\"on\"+eventName, eventFunc );\n  return true;\n }\n\n return false;\n};\n    };\n\n    o.require = function( s, delay, baSync, fCallback, fErr ) // add script to dom\n    {\n     var oo = document.createElement('script'),\n     oHead = document.getElementsByTagName('head')[0];\n     if( !oHead )\n      { return false; }\n\n     setTimeout( function() {\n     var f = (typeof fCallback == 'function')?fCallback:function(){};\n     fErr = (typeof fErr == 'function')?fErr:function(){alert('require: Cannot load resource -'+s);},\n     fe = function(){ if(!oo.__es){oo.__es=true; oo.id='failed'; fErr(oo);}};\n     oo.onload = function() {oo.id='loaded'; f(oo); };\n     oo.type = 'text/javascript';\n     oo.async = (typeof baSync == 'boolean')?baSync:false;\n     oo.charset='utf-8';\n     o.__es = false;\n     o.addEvent( oo, 'error', fe ); // when supported\n     // when error event is not supported fall back to timer\n     o.timer( 15, 1000, 0, function() {return (oo.id == 'loaded');}, function(){ if(oo.id != 'loaded'){fe();}});\n     oo.src = s;\n     setTimeout( function() { try{ oHead.appendChild(oo);}catch(e){fe();}},1); \n     }, (typeof delay == 'number')?delay:1 );  \n     return true;\n    };\n\n    }\n\n    $(document).ready( function()\n    {\n     var ol = new jsLoader();\n     ol.require('myscript.js',800,true, function() {alert('loaded');},function() {alert('NOT loaded');});   \n\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>This trick worked for me, although I admit that this is probably not the best way to solve this problem. Instead of trying this, you should see why the javascripts aren't loading. Try keeping a local copy of the script in your server, etc. or check with the third party vendor from where you are trying to download the script.</p>\n\n<p>Anyways, so here's the workaround:\n1) Initialize a variable to false\n2) Set it to true when the javascript loads (using the onload attribute)\n3) check if the variable is true or false once the HTML body has loaded</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;script&gt;\n      var scriptLoaded = false;\n\n      function checkScriptLoaded() {\n        if (scriptLoaded) {\n          // do something here\n        } else {\n          // do something else here!\n        }\n      }\n    &lt;/script&gt;\n    &lt;script src=\"http://some-external-script.js\" onload=\"scriptLoaded=true;\" /&gt;\n  &lt;/head&gt;\n  &lt;body onload=\"checkScriptLoaded()\"&gt;\n    &lt;p&gt;My Test Page!&lt;/p&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I hope this doesn't get downvoted, because in special circumstances it is the most reliable way to solve the problem. Any time the server allows you to get a Javascript resource using CORS (<a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Cross-origin_resource_sharing</a>), you have a rich array of options to do so.</p>\n\n<p>Using XMLHttpRequest to fetch resources will work across all modern browsers, including IE. Since you are looking to load Javascript, you have Javascript available to you in the first place. You can track the progress using the readyState (<a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest#The_onreadystatechange_event_listener\" rel=\"nofollow\">http://en.wikipedia.org/wiki/XMLHttpRequest#The_onreadystatechange_event_listener</a>). Finally, once you receive the content of the file, you can execute it with eval ( ). Yes, I said eval -- because security-wise it is no different from loading the script normally. In fact, a similar technique is suggested by John Resig to have nicer  tags (<a href=\"http://ejohn.org/blog/degrading-script-tags/\" rel=\"nofollow\">http://ejohn.org/blog/degrading-script-tags/</a>).</p>\n\n<p>This method also lets you separate the loading from the eval, and execute functions before and after the eval happens. It becomes very useful when loading scripts in parallel but evaluating them one after the other -- something browsers can do easily when you place the  tags in HTML, but don't let you by adding scripts at run-time with Javascript.</p>\n\n<p>CORS is also preferable to JSONP for loading scripts (<a href=\"http://en.wikipedia.org/wiki/XMLHttpRequest#Cross-domain_requests\" rel=\"nofollow\">http://en.wikipedia.org/wiki/XMLHttpRequest#Cross-domain_requests</a>). However, if you are developing your own third-party widgets to be embedded in other sites, you should actually load the Javascript files from your own domain in your own iframe (again, using AJAX)</p>\n\n<p>In short:</p>\n\n<ol>\n<li><p>Try to see if you can load the resource using AJAX</p></li>\n<li><p>Use eval after it has successfully loaded</p></li>\n</ol>\n\n<p>To improve it:</p>\n\n<ol>\n<li><p>Check out the cache-control headers being sent</p></li>\n<li><p>Look into otherwise caching the content in localStorage, if you need to</p></li>\n<li><p>Check out Resig's \"degrading javascript\" for cleaner code</p></li>\n<li><p>Check out require.js</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The script from Erwinus works great, but isn't very clearly coded. I took the liberty to clean it up and decipher what it was doing. I've made these changes:</p>\n\n<ul>\n<li>Meaningful variable names</li>\n<li>Use of <code>prototype</code>.</li>\n<li><code>require()</code> uses an argument variable</li>\n<li>No <code>alert()</code> messages are returned by default</li>\n<li>Fixed some syntax errors and scope issues I was getting</li>\n</ul>\n\n<p>Thanks again to Erwinus, the functionality itself is spot on.</p>\n\n<pre><code>function ScriptLoader() {\n}\n\nScriptLoader.prototype = {\n\n    timer: function (times, // number of times to try\n                     delay, // delay per try\n                     delayMore, // extra delay per try (additional to delay)\n                     test, // called each try, timer stops if this returns true\n                     failure, // called on failure\n                     result // used internally, shouldn't be passed\n            ) {\n        var me = this;\n        if (times == -1 || times &gt; 0) {\n            setTimeout(function () {\n                result = (test()) ? 1 : 0;\n                me.timer((result) ? 0 : (times &gt; 0) ? --times : times, delay + ((delayMore) ? delayMore : 0), delayMore, test, failure, result);\n            }, (result || delay &lt; 0) ? 0.1 : delay);\n        } else if (typeof failure == 'function') {\n            setTimeout(failure, 1);\n        }\n    },\n\n    addEvent: function (el, eventName, eventFunc) {\n        if (typeof el != 'object') {\n            return false;\n        }\n\n        if (el.addEventListener) {\n            el.addEventListener(eventName, eventFunc, false);\n            return true;\n        }\n\n        if (el.attachEvent) {\n            el.attachEvent(\"on\" + eventName, eventFunc);\n            return true;\n        }\n\n        return false;\n    },\n\n    // add script to dom\n    require: function (url, args) {\n        var me = this;\n        args = args || {};\n\n        var scriptTag = document.createElement('script');\n        var headTag = document.getElementsByTagName('head')[0];\n        if (!headTag) {\n            return false;\n        }\n\n        setTimeout(function () {\n            var f = (typeof args.success == 'function') ? args.success : function () {\n            };\n            args.failure = (typeof args.failure == 'function') ? args.failure : function () {\n            };\n            var fail = function () {\n                if (!scriptTag.__es) {\n                    scriptTag.__es = true;\n                    scriptTag.id = 'failed';\n                    args.failure(scriptTag);\n                }\n            };\n            scriptTag.onload = function () {\n                scriptTag.id = 'loaded';\n                f(scriptTag);\n            };\n            scriptTag.type = 'text/javascript';\n            scriptTag.async = (typeof args.async == 'boolean') ? args.async : false;\n            scriptTag.charset = 'utf-8';\n            me.__es = false;\n            me.addEvent(scriptTag, 'error', fail); // when supported\n            // when error event is not supported fall back to timer\n            me.timer(15, 1000, 0, function () {\n                return (scriptTag.id == 'loaded');\n            }, function () {\n                if (scriptTag.id != 'loaded') {\n                    fail();\n                }\n            });\n            scriptTag.src = url;\n            setTimeout(function () {\n                try {\n                    headTag.appendChild(scriptTag);\n                } catch (e) {\n                    fail();\n                }\n            }, 1);\n        }, (typeof args.delay == 'number') ? args.delay : 1);\n        return true;\n    }\n};\n\n$(document).ready(function () {\n    var loader = new ScriptLoader();\n    loader.require('resources/templates.js', {\n        async: true, success: function () {\n            alert('loaded');\n        }, failure: function () {\n            alert('NOT loaded');\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Here is another JQuery-based solution without any timers:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction loadScript(url, onsuccess, onerror) {\n$.get(url)\n    .done(function() {\n        // File/url exists\n        console.log(\"JS Loader: file exists, executing $.getScript \"+url)\n        $.getScript(url, function() {\n            if (onsuccess) {\n                console.log(\"JS Loader: Ok, loaded. Calling onsuccess() for \" + url);\n                onsuccess();\n                console.log(\"JS Loader: done with onsuccess() for \" + url);\n            } else {\n                console.log(\"JS Loader: Ok, loaded, no onsuccess() callback \" + url)\n            }\n        });\n    }).fail(function() {\n            // File/url does not exist\n            if (onerror) {\n                console.error(\"JS Loader: probably 404 not found. Not calling $.getScript. Calling onerror() for \" + url);\n                onerror();\n                console.error(\"JS Loader: done with onerror() for \" + url);\n            } else {\n                console.error(\"JS Loader: probably 404 not found. Not calling $.getScript. No onerror() callback \" + url);\n            }\n    });\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Thanks to:\n<a href=\"http://stackoverflow.com/a/14691735/1243926\">http://stackoverflow.com/a/14691735/1243926</a></p>\n\n<p>Sample usage (original sample from <a href=\"http://api.jquery.com/jQuery.getScript/\" rel=\"nofollow\">JQuery getScript documentation</a>):</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\"&gt;\n  &lt;title&gt;jQuery.getScript demo&lt;/title&gt;\n  &lt;style&gt;\n  .block {\n     background-color: blue;\n     width: 150px;\n     height: 70px;\n     margin: 10px;\n  }\n  &lt;/style&gt;\n  &lt;script src=\"http://code.jquery.com/jquery-1.9.1.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;button id=\"go\"&gt;&amp;raquo; Run&lt;/button&gt;\n&lt;div class=\"block\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n\n\nfunction loadScript(url, onsuccess, onerror) {\n$.get(url)\n    .done(function() {\n        // File/url exists\n        console.log(\"JS Loader: file exists, executing $.getScript \"+url)\n        $.getScript(url, function() {\n            if (onsuccess) {\n                console.log(\"JS Loader: Ok, loaded. Calling onsuccess() for \" + url);\n                onsuccess();\n                console.log(\"JS Loader: done with onsuccess() for \" + url);\n            } else {\n                console.log(\"JS Loader: Ok, loaded, no onsuccess() callback \" + url)\n            }\n        });\n    }).fail(function() {\n            // File/url does not exist\n            if (onerror) {\n                console.error(\"JS Loader: probably 404 not found. Not calling $.getScript. Calling onerror() for \" + url);\n                onerror();\n                console.error(\"JS Loader: done with onerror() for \" + url);\n            } else {\n                console.error(\"JS Loader: probably 404 not found. Not calling $.getScript. No onerror() callback \" + url);\n            }\n    });\n}\n\n\nloadScript(\"https://raw.github.com/jquery/jquery-color/master/jquery.color.js\", function() {\n  console.log(\"loaded jquery-color\");\n  $( \"#go\" ).click(function() {\n    $( \".block\" )\n      .animate({\n        backgroundColor: \"rgb(255, 180, 180)\"\n      }, 1000 )\n      .delay( 500 )\n      .animate({\n        backgroundColor: \"olive\"\n      }, 1000 )\n      .delay( 500 )\n      .animate({\n        backgroundColor: \"#00f\"\n      }, 1000 );\n  });\n}, function() { console.error(\"Cannot load jquery-color\"); });\n\n\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I'm dynamically adding <code>&lt;script&gt;</code> tags to a page's <code>&lt;head&gt;</code>, and I'd like to be able to tell whether the loading failed in some way -- a 404, a script error in the loaded script, whatever.</p>\n\n<p>In Firefox, this works:</p>\n\n<pre><code>var script_tag = document.createElement('script');\nscript_tag.setAttribute('type', 'text/javascript');\nscript_tag.setAttribute('src', 'http://fail.org/nonexistant.js');\nscript_tag.onerror = function() { alert(\"Loading failed!\"); }\ndocument.getElementsByTagName('head')[0].appendChild(script_tag);\n</code></pre>\n\n<p>However, this doesn't work in IE or Safari.</p>\n\n<p>Does anyone know of a way to make this work in browsers other than Firefox?</p>\n\n<p>(I don't think a solution that requires placing special code within the .js files is a good one. It's inelegant and inflexible.)</p>\n",
            "last_activity_date": 1381721043,
            "question_id": 538745,
            "score": 56,
            "tags": [
                "javascript",
                "onerror",
                "script-tag"
            ],
            "title": "How to tell if a &lt;script&gt; tag failed to load"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt\" rel=\"nofollow\">MDN docs for parseInt</a>\n<br />\n<a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseFloat\" rel=\"nofollow\">MDN docs for parseFloat</a></p>\n\n<p>In parseInt radix is specified as ten so that we are in base 10. In nonstrict javascript a number prepended with <code>0</code> is treated as octal. This would obviously cause problems!</p>\n\n<pre><code>parseInt(num1, 10) + parseInt(num2, 10) //base10\nparseFloat(num1) + parseFloat(num2)\n</code></pre>\n\n<p>Also see ChaosPandion's answer for a useful shortcut using a <a href=\"http://xkr.us/articles/javascript/unary-add/\" rel=\"nofollow\">unary operator</a>. I have set up a fiddle to show the different behaviors.</p>\n\n<p><a href=\"http://jsfiddle.net/EtX6G/\" rel=\"nofollow\">http://jsfiddle.net/EtX6G/</a></p>\n\n<pre><code>var ten = '10';\nvar zero_ten = '010';\nvar one = '1';\nvar body = document.getElementsByTagName('body')[0];\n\nAppend(parseInt(ten) + parseInt(one));\nAppend(parseInt(zero_ten) + parseInt(one));\nAppend(+ten + +one);\nAppend(+zero_ten + +one);\n\nfunction Append(text) {\n    body.appendChild(document.createTextNode(text));\n    body.appendChild(document.createElement('br'));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>convert the strings to numbers first with <code>parseFloat(string)</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I would use the unary plus operator to convert them to numbers first.   </p>\n\n<pre><code>+num1 + +num2;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 88
                },
                {
                    "body": "<p>You can use <code>parseInt</code> to parse a string to a number. To be on the safe side of things, always pass <code>10</code> as the second argument to parse in base 10.</p>\n\n<pre><code>num1 = parseInt(num1, 10);\nnum2 = parseInt(num2, 10);\nalert(num1 + num2);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Use the <code>parseFloat</code> method to parse the strings into floating point numbers:</p>\n\n<pre><code>parseFloat(num1) + parseFloat(num2)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>try</p>\n\n<pre><code>var x = parseFloat(num1) + parseFloat(num2) ;\n</code></pre>\n\n<p>or, depending on your needs:</p>\n\n<pre><code>var x = parseInt(num1) + parseInt(num2) ;\n</code></pre>\n\n<p><a href=\"http://www.javascripter.net/faq/convert2.htm\" rel=\"nofollow\">http://www.javascripter.net/faq/convert2.htm</a></p>\n\n<p>You might want to pick up the book <a href=\"http://shop.oreilly.com/product/9780596517748.do\" rel=\"nofollow\">Javascript: The Good Parts</a>, by Douglas Crockford. Javascript has a rather sizeable colleciton of gotchas! This book goes a long way towards clarifying them. See also</p>\n\n<ul>\n<li><a href=\"http://www.crockford.com/\" rel=\"nofollow\">http://www.crockford.com/</a></li>\n<li><a href=\"http://javascript.crockford.com/\" rel=\"nofollow\">http://javascript.crockford.com/</a></li>\n</ul>\n\n<p>and Mr. Crockford's excellent essay, <a href=\"http://javascript.crockford.com/javascript.html\" rel=\"nofollow\">Javascript: The World's Most Misunderstood Programming Language</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I would recommend to use the unary plus operator, to force an eventual string to be treated as number, inside parenthesis to make the code more readable like the following:</p>\n\n<pre><code>(+varname)\n</code></pre>\n\n<p>So, in your case it's:</p>\n\n<pre><code>var num1 = '20',\n    num2 = '30.5';\n\nvar sum = (+num1) + (+num2);\n\n// Just to test it\nconsole.log( sum ); // 50.5\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>var result = Number(num1) + Number(num2);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Try this if you are looking for simple Javascript code and want to use two input box and add numbers from the two value. Here's the code.</p>\n\n<pre><code>    Enter the first number: &lt;input type=\"text\" id=\"num1\" /&gt;&lt;br /&gt;\n    Enter the seccond number: &lt;input type=\"text\" id=\"num2\" /&gt;&lt;br /&gt;\n    &lt;input type=\"button\" onclick=\"call()\" value=\"Add\"/&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n    function call(){\n    var q=parseInt(document.getElementById(\"num1\").value);\n    var w=parseInt(document.getElementById(\"num2\").value);\n    var result=q+w;\n    }\n    &lt;/script&gt;\n</code></pre>\n\n<p>for more details please visit <a href=\"http://informativejavascript.blogspot.nl/2012/12/javascript-basics.html\" rel=\"nofollow\">http://informativejavascript.blogspot.nl/2012/12/javascript-basics.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Make sure that you round your final answer to less than 16 decimal places for floats as java script is buggy.</p>\n\n<p>For example\n5 - 7.6 = -2.5999999999999996</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use this to add numbers:</p>\n\n<pre><code>var x = +num1 + +num2;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I've always just subtracted zero.</p>\n\n<pre><code>num1-0 + num2-0;\n</code></pre>\n\n<p>Granted that the unary operator method is one less character, but not everyone knows what a unary operator is or how to google to find out when they don't know what it's called.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I use this in my project.I use + sign to treat string as a number (in with_interesst variable)</p>\n\n<pre><code>&lt;script&gt;\nfunction computeLoan(){\nvar amount = document.getElementById('amount').value;\nvar interest_rate = document.getElementById('interest_rate').value;\nvar days = document.getElementById('days').value;\nvar interest = (amount * (interest_rate * .01)) / days;\nvar payment = ((amount / days) + interest).toFixed(2);\nvar with_interest = (amount * (interest_rate * .01));\nvar with_interesst = (+amount * (interest_rate * .01)) + (+amount);\npayment = payment.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\ndocument.getElementById('payment').innerHTML = \"Target Daily = PHP\"+payment;\ndocument.getElementById('with_interesst').innerHTML = \"Amount w/Interest =   PHP\"+with_interesst;\n}\n&lt;/script&gt;\n\n&lt;div name=\"printchatbox\" id=\"printchatbox\"&gt;\n &lt;form id=\"Calculate\" class=\"form-horizontal\"&gt;\n   &lt;h2&gt;You Can Use This Calculator Before Submit &lt;/h2&gt;\n   &lt;p&gt;Loan Amount: PHP&lt;input id=\"amount\" type=\"number\" min=\"1\" max=\"1000000\"  onchange=\"computeLoan()\"&gt;&lt;/p&gt;\n   &lt;p&gt;Interest Rate: &lt;input id=\"interest_rate\" type=\"number\" min=\"0\" max=\"100\" value=\"10\" step=\".1\" onchange=\"computeLoan()\"&gt;%&lt;/p&gt;\n    &lt;p&gt;Term&lt;select id=\"days\" type=\"number\" min=\"1\" max=\"72\" step=\".1\" onchange=\"computeLoan()\"&gt;\n    &lt;option value=\"40\"&gt;40 Days&lt;/option&gt;\n    &lt;option value=\"50\"&gt;50 Days&lt;/option&gt;\n    &lt;option value=\"60\"&gt;60 Days&lt;/option&gt;\n    &lt;option value=\"70\"&gt;70 Days&lt;/option&gt;\n    &lt;option value=\"80\"&gt;80 Days&lt;/option&gt;\n    &lt;option value=\"90\"&gt;90 Days&lt;/option&gt;\n    &lt;option value=\"100\"&gt;100 Days&lt;/option&gt;\n    &lt;option value=\"120\"&gt;120 Days&lt;/option&gt;\n    &lt;/select&gt;\n    &lt;/p&gt;                        \n   &lt;h2 id=\"payment\"&gt;&lt;/h2&gt;\n   &lt;h2 id =\"with_interesst\"&gt;&lt;/h2&gt;\n &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Hope it helps</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You may use like this:</p>\n\n<pre><code>var num1 = '20',\n    num2 = '30.5';\n\nalert((num1*1) + (num2*1)); //result 50.5\n</code></pre>\n\n<p>When apply *1 in num1, convert string a number.</p>\n\n<p>if num1 contains a letter or a comma, returns NaN multiplying by 1 </p>\n\n<p>if num1 is null, num1 returns 0</p>\n\n<p>kind regards!!!</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have two strings which contain only numbers:</p>\n\n<pre><code>var num1 = '20',\n    num2 = '30.5';\n</code></pre>\n\n<p>I would have expected that I could add them together, but they are being concatenated instead:</p>\n\n<pre><code>num1 + num2; // = '2030.5'\n</code></pre>\n\n<p>How can I force these strings to be treated as numbers?</p>\n",
            "last_activity_date": 1414499417,
            "question_id": 8976627,
            "score": 47,
            "tags": [
                "javascript"
            ],
            "title": "How to add two strings as if they were numbers?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>You should call <a href=\"http://api.jquery.com/jQuery.getScript\"><code>jQuery.getScript</code></a>, which does exactly what you're looking for.</p>\n\n<p><strong>EDIT</strong>: Here is the relevant source code from jQuery:</p>\n\n<pre><code>var head = document.getElementsByTagName(\"head\")[0] || document.documentElement;\nvar script = document.createElement(\"script\");\nif ( s.scriptCharset ) {\n    script.charset = s.scriptCharset;\n}\nscript.src = s.url;\n\n// Handle Script loading\n    var done = false;\n\n// Attach handlers for all browsers\nscript.onload = script.onreadystatechange = function() {\n    if ( !done &amp;&amp; (!this.readyState ||\n            this.readyState === \"loaded\" || this.readyState === \"complete\") ) {\n        done = true;\n        jQuery.handleSuccess( s, xhr, status, data );\n        jQuery.handleComplete( s, xhr, status, data );\n\n        // Handle memory leak in IE\n        script.onload = script.onreadystatechange = null;\n        if ( head &amp;&amp; script.parentNode ) {\n            head.removeChild( script );\n        }\n    }\n};\n\n// Use insertBefore instead of appendChild  to circumvent an IE6 bug.\n// This arises when a base node is used (#2709 and #4378).\nhead.insertBefore( script, head.firstChild );\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 59
                },
                {
                    "body": "<p>I also had issues with script.onload = runFunction; in IE8.</p>\n\n<p>I tried jQuery.getScript and it worked perfectly for my needs. The only downside is having to wait for jQuery to be loaded before adding in the script. </p>\n\n<p>However, since my callback functions utilize jQuery very heavily anyway I find this an extremely acceptable and very minor downside since it creates a very easy to use, cross-browser solution.</p>\n\n<p><strong>Update:</strong></p>\n\n<p>Here is a way of doing it without using jQuery:</p>\n\n<p>(a modified solution from: <a href=\"http://stackoverflow.com/a/13031185/1339954\">http://stackoverflow.com/a/13031185/1339954</a>)</p>\n\n<pre><code>var url = 'http://ajax.googleapis.com/ajax/libs/swfobject/2.2/swfobject.js';\nvar headID = document.getElementsByTagName(\"head\")[0];\nvar script = document.createElement('script');\nscript.type='text/javascript';\nscript.src=url;\n\n//for nonIE browsers\nscript.onload=function(){\n        addVideo();\n    }\n\n //for IE Browsers\n ieLoadBugFix(script, function(){\n     addVideo();}\n );\n\nfunction ieLoadBugFix(scriptElement, callback){\n        if (scriptElement.readyState=='loaded' || scriptElement.readyState=='completed') {\n             callback();\n         }else {\n             setTimeout(function() {ieLoadBugFix(scriptElement, callback); }, 100);\n         }\n\n\n }\n\nheadID.appendChild(script);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>I've been using <a href=\"http://jsfiddle.net/yzbvy/1/\">this function</a> to attach onload handler to a script tag, it seems to be the recommended way over the internet.<br>\nYet, it doesn't work in internet explorer, if page is loaded already (tested in ie 8). You can see that it works in normal browsers (fires alert when script is loaded).</p>\n\n<p>Am I missing something?<br>\nThank you</p>\n",
            "last_activity_date": 1390126812,
            "question_id": 4845762,
            "score": 26,
            "tags": [
                "javascript",
                "internet-explorer",
                "onload"
            ],
            "title": "&#39;onload&#39; handler for &#39;script&#39; tag in internet explorer"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Have a look at this page: <a href=\"http://www.rishida.net/tools/conversion/\" rel=\"nofollow\">http://www.rishida.net/tools/conversion/</a></p>\n\n<p>Paste you code into the top text box (remove the double slashes first).</p>\n\n<p>The code is open source: <a href=\"http://www.rishida.net/tools/conversion/conversionfunctions.js\" rel=\"nofollow\">http://www.rishida.net/tools/conversion/conversionfunctions.js</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is a unicode, escaped string. First the string was escaped, then encoded with unicode. To convert back to normal: </p>\n\n<pre><code>var x = \"http\\\\u00253A\\\\u00252F\\\\u00252Fexample.com\";\nvar r = /\\\\u([\\d\\w]{4})/gi;\nx = x.replace(r, function (match, grp) {\n    return String.fromCharCode(parseInt(grp, 16)); } );\nx = unescape(x);\nconsole.log(x);\n</code></pre>\n\n<p>To explain: I use a regular expression to look for <code>\\u00253A</code>. However, since I need only a part of this string for my replace operation, I use parentheses to isolate the part I'm going to reuse, <code>253A</code>. This isolated part is called a group.</p>\n\n<p>The <code>gi</code> part at the end of the expression denotes it should match all instances in the string, not just the first one, and that the matching should be case insensitive. This might look unnecessary given the example, but it adds versatility.</p>\n\n<p>Now, to convert from one string to the next, I need to execute some steps on each group of each match, and I can't do that by simply transforming the string. Helpfully, the String.replace operation can accept a function, which will be executed for each match. The return of that function will replace the match itself in the string. </p>\n\n<p>I use the second parameter this function accepts, which is the group I need to use, and transform it to the equivalent utf-8 sequence, then use the built - in <code>unescape</code> function to decode the string to its proper form.</p>\n",
                    "is_accepted": true,
                    "score": 38
                },
                {
                    "body": "<pre><code>unescape(JSON.parse('\"http\\\\u00253A\\\\u00252F\\\\u00252Fexample.com\"'));\n&gt; 'http://example.com'\n</code></pre>\n\n<p>You can offload all the work to <code>JSON.parse</code></p>\n",
                    "is_accepted": false,
                    "score": 23
                }
            ],
            "body": "<p>I'm not sure what this is called so I'm having trouble searching for it. How can I decode a string with unicode from <code>http\\u00253A\\u00252F\\u00252Fexample.com</code> to <code>http://example.com</code> with JavaScript? I tried <code>unescape</code>, <code>decodeURI</code>, and <code>decodeURIComponent</code> so I guess the only thing left is string replace.</p>\n\n<p>EDIT: The string is not typed, but rather a substring from another piece of code. So to solve the problem you have to start with something like this:</p>\n\n<pre><code>var s = 'http\\\\u00253A\\\\u00252F\\\\u00252Fexample.com';\n</code></pre>\n\n<p>I hope that shows why unescape() doesn't work.</p>\n",
            "last_activity_date": 1355880877,
            "question_id": 7885096,
            "score": 23,
            "tags": [
                "javascript",
                "decode",
                "urldecode"
            ],
            "title": "How do I decode a string with escaped unicode?"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Generate <strong>permutation</strong> of 100 numbers and then choose serially.</p>\n\n<p>Use <a href=\"http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\" rel=\"nofollow\"><strong>Knuth Shuffle(aka the Fisher-Yates shuffle) Algorithm</strong></a>.</p>\n\n<p><strong>JavaScript:</strong></p>\n\n<pre><code>  function fisherYates ( myArray,stop_count ) {\n  var i = myArray.length;\n  if ( i == 0 ) return false;\n  int c = 0;\n  while ( --i ) {\n     var j = Math.floor( Math.random() * ( i + 1 ) );\n     var tempi = myArray[i];\n     var tempj = myArray[j];\n     myArray[i] = tempj;\n     myArray[j] = tempi;\n\n     // Edited thanks to Frerich Raabe\n     c++;\n     if(c == stop_count)return;\n\n   }\n}\n</code></pre>\n\n<p><a href=\"http://sedition.com/perl/javascript-fy.html\" rel=\"nofollow\">CODE COPIED FROM LINK.</a></p>\n\n<p><strong>EDIT</strong>:</p>\n\n<p>Improved code:</p>\n\n<pre><code>function fisherYates(myArray,nb_picks)\n{\n    for (i = myArray.length-1; i &gt; 1  ; i--)\n    {\n        var r = Math.floor(Math.random()*i);\n        var t = myArray[i];\n        myArray[i] = myArray[r];\n        myArray[r] = t;\n    }\n\n    return myArray.slice(0,nb_picks);\n}\n</code></pre>\n\n<p>Potential problem:</p>\n\n<p>Suppose we have array of 100 numbers {e.g. [1,2,3...100]} and we stop swapping after 8 swaps;\nthen most of the times array will look like {1,2,3,76,5,6,7,8,...numbers here will be shuffled ...10}.</p>\n\n<p>Because every number will be swapped with probability 1/100 so \nprob. of swapping first 8 numbers is 8/100 whereas prob. of swapping other 92 is 92/100.</p>\n\n<p>But if we run algorithm for full array then we are sure (almost)every entry is swapped.</p>\n\n<p>Otherwise we face a question : which 8 numbers to choose?</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<ol>\n<li>Populate an array with the numbers 1 through 100.</li>\n<li>Use <a href=\"http://snippets.dzone.com/posts/show/849\">this JavaScript code</a> to shuffle it.</li>\n<li>Take the first 8 elements of the resulting array.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Same permutation algorithm as The Machine Charmer, but with a prototyped implementation. Better suited to large number of picks. Uses <a href=\"https://developer.mozilla.org/en/New_in_JavaScript_1.7#Destructuring_assignment\" rel=\"nofollow\">js 1.7 destructuring assignment</a> if available.</p>\n\n<pre><code>// swaps elements at index i and j in array this\n// swapping is easy on js 1.7 (feature detection)\nArray.prototype.swap = (function () {\n    var i=0, j=1;\n    try { [i,j]=[j,i]; }\n    catch (e) {}\n    if(i) {\n        return function(i,j) {\n            [this[i],this[j]] = [this[j],this[i]];\n            return this;\n        }\n    } else {\n        return function(i,j) {\n            var temp = this[i];\n            this[i] = this[j];\n            this[j] = temp;\n            return this;\n        }\n    }\n})();\n\n\n// shuffles array this\nArray.prototype.shuffle = function() {\n    for(var i=this.length; i&gt;1; i--) {\n        this.swap(i-1, Math.floor(i*Math.random()));\n    }\n    return this;\n}\n\n// returns n unique random numbers between min and max\nfunction pick(n, min, max) {\n    var a = [], i = max;\n    while(i &gt;= min) a.push(i--);\n    return a.shuffle().slice(0,n);\n}\n\npick(8,1,100);\n</code></pre>\n\n<p>Edit:\nAn other proposition, better suited to small number of picks, based on belugabob's answer. To guarantee uniqueness, we remove the picked numbers from the array.</p>\n\n<pre><code>// removes n random elements from array this\n// and returns them\nArray.prototype.pick = function(n) {\n    if(!n || !this.length) return [];\n    var i = Math.floor(this.length*Math.random());\n    return this.splice(i,1).concat(this.pick(n-1));\n}\n\n// returns n unique random numbers between min and max\nfunction pick(n, min, max) {\n    var a = [], i = max;\n    while(i &gt;= min) a.push(i--);\n    return a.pick(n);\n}\n\npick(8,1,100);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I would do this:</p>\n\n<pre><code>function randomInt(min, max) {\n    return Math.round(min + Math.random()*(max-min));\n}\nvar index = {}, numbers = [];\nfor (var i=0; i&lt;8; ++i) {\n    var number;\n    do {\n        number = randomInt(1, 100);\n    } while (index.hasOwnProperty(\"_\"+number));\n    index[\"_\"+number] = true;\n    numbers.push(number);\n}\ndelete index;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>How about using <a href=\"http://alicebobandmallory.com/articles/2010/03/05/javascript-hash-table-keys\" rel=\"nofollow\">object properties as a hash table</a>? This way your best scenario is to only randomize 8 times. It would only be effective if you want a small part of the range of numbers. It's also much less memory intensive than Fisher-Yates because you don't have to allocate space for an array.</p>\n\n<pre><code>var ht={}, i=rands=8;\nwhile ( i&gt;0 || keys(ht).length&lt;rands) ht[Math.ceil(Math.random()*100)]=i--;\nalert(keys(ht));\n</code></pre>\n\n<p>I then found out that <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/keys\" rel=\"nofollow\">Object.keys(obj)</a> is an ECMAScript 5 feature so the above is pretty much useless on the internets right now. Fear not, because I made it ECMAScript 3 compatible by adding a keys function like this.</p>\n\n<pre><code>if (typeof keys == \"undefined\") \n{ \n  var keys = function(obj) \n  {\n    props=[];\n    for (k in ht) if (ht.hasOwnProperty(k)) props.push(k);\n    return props;\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To avoid any long and unreliable shuffles, I'd do the following...</p>\n\n<ol>\n<li>Generate an array that contains the number between 1 and 100, in order.</li>\n<li>Generate a random number between 1 and 100</li>\n<li>Look up the number at this index in the array and store in your results</li>\n<li>Remove the elemnt from the array, making it one shorter</li>\n<li>Repeat from step 2, but use 99 as the upper limit of the random number</li>\n<li>Repeat from step 2, but use 98 as the upper limit of the random number</li>\n<li>Repeat from step 2, but use 97 as the upper limit of the random number</li>\n<li>Repeat from step 2, but use 96 as the upper limit of the random number</li>\n<li>Repeat from step 2, but use 95 as the upper limit of the random number</li>\n<li>Repeat from step 2, but use 94 as the upper limit of the random number</li>\n<li>Repeat from step 2, but use 93 as the upper limit of the random number</li>\n</ol>\n\n<p>Voila - no repeated numbers.</p>\n\n<p>I may post some actual code later, if anybody is interested.</p>\n\n<p>Edit: It's probably the competitive streak in me but, having seen the post by @Alsciende, I couldn't resist posting the code that I promised.</p>\n\n<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;8 unique random number between 1 and 100&lt;/title&gt;\n&lt;script type=\"text/javascript\" language=\"Javascript\"&gt;\n    function pick(n, min, max){\n        var values = [], i = max;\n        while(i &gt;= min) values.push(i--);\n        var results = [];\n        var maxIndex = max;\n        for(i=1; i &lt;= n; i++){\n            maxIndex--;\n            var index = Math.floor(maxIndex * Math.random());\n            results.push(values[index]);\n            values[index] = values[maxIndex];\n        }\n        return results;\n    }\n    function go(){\n        var running = true;\n        do{\n            if(!confirm(pick(8, 1, 100).sort(function(a,b){return a - b;}))){\n                running = false;\n            }\n        }while(running)\n    }\n&lt;/script&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;h1&gt;8 unique random number between 1 and 100&lt;/h1&gt;\n    &lt;p&gt;&lt;button onclick=\"go()\"&gt;Click me&lt;/button&gt; to start generating numbers.&lt;/p&gt;\n    &lt;p&gt;When the numbers appear, click OK to generate another set, or Cancel to stop.&lt;/p&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Shuffling the numbers from 1 to 100 is the right basic strategy, but if you need only 8 shuffled numbers, there's no need to shuffle all 100 numbers.</p>\n\n<p>I don't know Javascript very well, but I believe it's easy to create an array of 100 nulls quickly.  Then, for 8 rounds, you swap the n'th element of the array (n starting at 0) with a randomly selected element from n+1 through 99.  Of course, any elements not populated yet mean that the element would really have been the original index plus 1, so that's trivial to factor in.  When you're done with the 8 rounds, the first 8 elements of your array will have your 8 shuffled numbers.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = []\r\nwhile(arr.length &lt; 8){\r\n  var randomnumber=Math.ceil(Math.random()*100)\r\n  var found=false;\r\n  for(var i=0;i&lt;arr.length;i++){\r\n\tif(arr[i]==randomnumber){found=true;break}\r\n  }\r\n  if(!found)arr[arr.length]=randomnumber;\r\n}\r\ndocument.write(arr);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<pre><code>var arr = [];\nwhile(arr.length &lt; 8){\n  var randomnumber=Math.ceil(Math.random()*(100 - arr.length)), i;\n  for(i=0; i &lt; arr.length; i++) {\n    if(arr[i] &lt;= randomnumber) randomnumber++;\n    else break;\n  }\n  arr.splice(i, 0, randomnumber);\n}\u200b\n</code></pre>\n\n<p>In spite of what you might think, incrementing 'randomnumber' doesn't skew any probabilities - it is mathematically equivalent to removing the previous selections from the array.</p>\n\n<p>It's faster than shuffling an array of 100 values, and does not involve 'repicking'.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var bombout=0;\nvar checkArr=[];\nvar arr=[];\nwhile(arr.length &lt; 8 &amp;&amp; bombout&lt;100){\n  bombout++;\n  var randomNumber=Math.ceil(Math.random()*100);\n  if(typeof checkArr[randomNumber] == \"undefined\"){\n    checkArr[randomNumber]=1;\n    arr.push(randomNumber);\n  }\n}\u200b\n\n// untested - hence bombout\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>if you need more unique you must generate a array(1..100).</p>\n\n<pre><code>var arr=[];\nfunction generateRandoms(){\nfor(var i=1;i&lt;=100;i++) arr.push(i);\n}\nfunction extractUniqueRandom()\n{\n   if (arr.length==0) generateRandoms();\n   var randIndex=Math.floor(arr.length*Math.random());\n   var result=arr[randIndex];\n   arr.splice(randIndex,1);\n   return result;\n\n}\nfunction extractUniqueRandomArray(n)\n{\n   var resultArr=[];\n   for(var i=0;i&lt;n;i++) resultArr.push(extractUniqueRandom());\n   return resultArr;\n}\n</code></pre>\n\n<p>above code is  faster:<br/>\nextractUniqueRandomArray(50)=>\n[2, 79, 38, 59, 63, 42, 52, 22, 78, 50, 39, 77, 1, 88, 40, 23, 48, 84, 91, 49, 4, 54, 93, 36, 100, 82, 62, 41, 89, 12, 24, 31, 86, 92, 64, 75, 70, 61, 67, 98, 76, 80, 56, 90, 83, 44, 43, 47, 7, 53]</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>for arrays with holes like this <code>[,2,,4,,6,7,,]</code>\nbecause my problem was to fill these holes. So I modified it as per my need :)</p>\n\n<p>the following modified solution worked for me :)</p>\n\n<pre><code>var arr = [,2,,4,,6,7,,]; //example\nwhile(arr.length &lt; 9){\n  var randomnumber=Math.floor(Math.random()*9+1);\n  var found=false;\n  for(var i=0;i&lt;arr.length;i++){\n    if(arr[i]==randomnumber){found=true;break;}\n  }\n\n  if(!found)\n    for(k=0;k&lt;9;k++)\n    {if(!arr[k]) //if it's empty  !!MODIFICATION\n      {arr[k]=randomnumber; break;}}\n}\n\nalert(arr); //outputs on the screen\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Adding another better version of same code (accepted answer) with JavaScript 1.6 indexOf function. Do not need to loop thru whole array every time you are checking the duplicate.</p>\n\n<pre><code>var arr = []\nwhile(arr.length &lt; 8){\n  var randomnumber=Math.ceil(Math.random()*100)\n  var found=false;\n    if(arr.indexOf(randomnumber) &gt; -1){found=true;}\n  if(!found)arr[arr.length]=randomnumber;\n}\n</code></pre>\n\n<p>Older version of Javascript can still use the version at top</p>\n\n<p>PS: Tried suggesting an update to the wiki but it was rejected. I still think it may be useful for others.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is my personal solution :</p>\n\n<pre><code>&lt;script&gt;\n\nvar i, k;\nvar numbers = new Array();\nk = Math.floor((Math.random()*8));\nnumbers[0]=k;\n    for (var j=1;j&lt;8;j++){\n        k = Math.floor((Math.random()*8));\ni=0;\nwhile (i &lt; numbers.length){\nif (numbers[i] == k){\n    k = Math.floor((Math.random()*8));\n    i=0;\n}else {i++;}\n}\nnumbers[j]=k;\n    }\n    for (var j=0;j&lt;8;j++){\nalert (numbers[j]);\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>It randomly generates 8 unique array values (between 0 and 7), then displays them using an alert box.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The best earlier answer is the answer by <code>sje397</code>. You will get as good random numbers as you can get, as quick as possible.</p>\n\n<p>My solution is very similar to his solution. However, sometimes you want the random numbers in random order, and that is why I decided to post an answer. In addition, I provide a general function.</p>\n\n<pre><code>function selectKOutOfN(k, n) {\n  if (k&gt;n) throw \"k&gt;n\";\n  var selection = [];\n  var sorted = [];\n  for (var i = 0; i &lt; k; i++) {\n    var rand = Math.floor(Math.random()*(n - i));\n    for (var j = 0; j &lt; i; j++) {\n      if (sorted[j]&lt;=rand)\n        rand++;\n      else\n        break;\n    }\n    selection.push(rand);\n    sorted.splice(j, 0, rand);\n  }\n  return selection;\n}\n\nalert(selectKOutOfN(8, 100));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The above techniques are good if you want to avoid a library, but depending if you would be alright with a library, I would suggest checking out <a href=\"http://chancejs.com\" rel=\"nofollow\">Chance</a> for generating random stuff in JavaScript.</p>\n\n<p>Specifically to solve your question, using Chance it's as easy as:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// One line!\r\nvar uniques = chance.unique(chance.natural, 8, {min: 1, max: 100});\r\n\r\n// Print it out to the document for this snippet so we can see it in action\r\ndocument.write(JSON.stringify(uniques));</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"http://chancejs.com/chance.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><em>Disclaimer, as the author of Chance, I am a bit biased ;)</em></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function getUniqueRandomNos() {\n    var indexedArrayOfRandomNo = [];\n    for (var i = 0; i &lt; 100; i++) {\n        var randNo = Math.random();\n        indexedArrayOfRandomNo.push([i, randNo]);\n    }\n    indexedArrayOfRandomNo.sort(function (arr1, arr2) {\n        return arr1[1] - arr2[1]\n    });\n    var uniqueRandNoArray = [];\n    for (i = 0; i &lt; 8; i++) {\n        uniqueRandNoArray.push(indexedArrayOfRandomNo[i][0]);\n    }\n    return uniqueRandNoArray;\n}\n</code></pre>\n\n<p>I think this method is different from methods given in most of the answers, so I thought I might add an answer here (though the question was asked 4 years ago). \n<p> We generate 100 random numbers, and tag each of them with numbers from 1 to 100. Then we sort these tagged random numbers, and the tags get shuffled randomly. Alternatively, as needed in this question, one could do away with just finding top 8 of the tagged random numbers. Finding top 8 items is cheaper than sorting the whole array.\n<p> One must note here, that the sorting algorithm influences this algorithm. If the sorting algorithm used is stable, there is slight bias in favor of smaller numbers. Ideally, we would want the sorting algorithm to be unstable and not even biased towards stability (or instability) to produce an answer with perfectly uniform probability distribution.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Hey guys, i have trouble generating unique random numbers using js. Can someone lend me a hand?</p>\n",
            "last_activity_date": 1424442246,
            "question_id": 2380019,
            "score": 21,
            "tags": [
                "javascript",
                "random",
                "integer",
                "numbers"
            ],
            "title": "Generate 8 unique random numbers between 1 and 100"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>I finally got it on my own after some reading. Kind of hard when you know nothing about javascript and when the doc is quite thin on the subject.<br>\nHere is my solution, hope this will help others :  </p>\n\n<p>With an HTML page containing 2 buttons at the end like that :  </p>\n\n<pre><code>&lt;div&gt;\n     &lt;button type=\"button\" id=\"ok\" style=\"font-weight: 700; margin-right: 20px;\" onclick=\"validClick();\"&gt;J'accepte&lt;/button&gt;\n     &lt;button type=\"button\" id=\"no\" onclick=\"refuseClick();\"&gt;Je refuse&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>I send the event of the click to the javascript at the top of my HTML page :  </p>\n\n<pre><code>&lt;script language=\"javascript\"&gt;\n\n   function validClick()\n   {\n      valid.performClick();\n      document.getElementById(\"ok\").value = \"J'accepte\";\n   }\n   function refuseClick()\n   {\n      refuse.performClick();\n      document.getElementById(\"no\").value = \"Je refuse\";\n   }\n\n&lt;/script&gt;\n</code></pre>\n\n<p><code>valid</code> and <code>refuse</code> are 2 java objects that I passed through the javascript interface to use their methods. So in java, I created 2 buttons (not really displayed in the Activity, only here for their methods and are sort of shadows of the HTML buttons :</p>\n\n<pre><code>valid = new Button(ctx);\nvalid.setOnClickListener(this);\nrefuse = new Button(ctx);\nrefuse.setOnClickListener(this);\n</code></pre>\n\n<p>Then I added javascript to my <code>WebView</code> :  </p>\n\n<pre><code>// Enablejavascript\nWebSettings ws = wv.getSettings();\nws.setJavaScriptEnabled(true);\n// Add the interface to record javascript events\nwv.addJavascriptInterface(valid, \"valid\");\nwv.addJavascriptInterface(refuse, \"refuse\");\n</code></pre>\n\n<p>And finally, handle the click events in the onClick method :  </p>\n\n<pre><code>@Override\npublic void onClick(View v) {\n    if (v.equals(valid)) {\n        //do Something\n    } else if (v.equals(refuse)) {\n        //do Something else }\n}\n</code></pre>\n\n<p>Hope this will help some people</p>\n",
                    "is_accepted": true,
                    "score": 26
                },
                {
                    "body": "<p>Here's a simpler solution.  On the Java side, create a listener for each button.  It doesn't need to be any particular class, since the method will be looked up using reflection:</p>\n\n<pre><code>WebSettings ws = wv.getSettings();\nws.setJavaScriptEnabled(true);\nwv.addJavascriptInterface(new Object()\n{\n  public void performClick()\n  {\n    // Deal with a click on the OK button\n  }\n}, \"ok\");\n</code></pre>\n\n<p>Then in the HTML, call it directly from the button tag:</p>\n\n<pre><code>&lt;button type=\"button\" onclick=\"ok.performClick();\"&gt;OK&lt;/button&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>In case you also want to retrieve button value.</p>\n\n<p>Java:</p>\n\n<pre><code>WebSettings ws = wv.getSettings();\nws.setJavaScriptEnabled(true);\nwv.addJavascriptInterface(new Object()\n{\n   @JavascriptInterface           // For API 17+\n   public void performClick(String strl)\n   {\n      stringVariable = strl;\n      Toast.makeText (YourActivity.this, stringVariable, Toast.LENGTH_SHORT).show();\n   }\n}, \"ok\");\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;button type=\"button\" value=\"someValue\" onclick=\"ok.performClick(this.value);\"&gt;OK&lt;/button&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I'm not highly familiar with javascript but I think this is the best way to accomplish my purpose. If not, please correct me.  </p>\n\n<p>I have a licence text 2 buttons at the end. All of this is written in HTML in a <code>WebView</code> because there are some links in the licence. Now, I want that when the user clicks the \"ok\" button in the <code>WebView</code>, this triggers some javascript or listener that I can grab in Java to fire an <code>Intent</code> to go forward in the application. (The cancel button would do the opposite, but if I know how to do one, I can do the other. ;) )</p>\n\n<p>Does this rings any bell to someone?\nAny explanation or sample code is welcome.</p>\n",
            "last_activity_date": 1399960288,
            "question_id": 4065312,
            "score": 15,
            "tags": [
                "javascript",
                "android",
                "click",
                "webview"
            ],
            "title": "Detect click on HTML button through javascript in Android WebView"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Use a framework like JQuery to do things like:</p>\n\n<pre><code>function toggleStatus() {\n    if ($('#toggleElement').is(':checked')) {\n        $('#idOfTheDIV :input').attr('disabled', true);\n    } else {\n        $('#idOfTheDIV :input').removeAttr('disabled');\n    }   \n}\n</code></pre>\n\n<p><a href=\"http://techchorus.net/disable-and-enable-input-elements-div-block-using-jquery\">Disable And Enable Input Elements In A Div Block Using jQuery</a> should help you!</p>\n\n<p>As of jQuery 1.6, you should use <code>.prop</code> instead of <code>.attr</code> for disabling. </p>\n",
                    "is_accepted": true,
                    "score": 86
                },
                {
                    "body": "<p>The disabled attribute is not part of the W3C spec for <a href=\"http://www.w3.org/TR/REC-html40/struct/global.html\">DIV elements</a>, only for <a href=\"http://www.w3.org/TR/html401/interact/forms.html#adef-disabled\">form elements</a>.</p>\n\n<p>The jQuery approach suggested by Martin is the only foolproof way you're going to accomplish this.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I just wanted to mention <a href=\"http://stackoverflow.com/questions/625109/jquery-script-load-timing/625126#625126\">this extension method for enabling and disabling elements</a>.  I think it's a much cleaner way than adding and removing attributes directly.</p>\n\n<p>Then you simply do:</p>\n\n<pre><code>$(\"div *\").disable();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>Another way, in jQuery, would be to get the inner height, inner width and positioning of the containing DIV, and simply overlay another DIV, transparent, over the top the same size. This will work on all elements inside that container, instead of only the inputs.</p>\n\n<p>Remember though, with JS disabled, you'll still be able to use the DIVs inputs/content. The same goes with the above answers too.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I thought I'd chip in a couple of notes.</p>\n\n<ol>\n<li>&lt; div > can be disabled in IE8/9. I assume this is \"incorrect\", and it threw me off</li>\n<li>Don't use .removeProp(), as it has a permanent effect on the element. Use .prop(\"disabled\", false) instead</li>\n<li>$(\"#myDiv\").filter(\"input,textarea,select,button\").prop(\"disabled\", true) is more explicit and will catch some form elements you would miss with :input</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I would use an improved version of Cletus' function: </p>\n\n<pre><code> $.fn.disable = function() {\n    return this.each(function() {          \n      if (typeof this.disabled != \"undefined\") {\n        $(this).data('jquery.disabled', this.disabled);\n\n        this.disabled = true;\n      }\n    });\n};\n\n$.fn.enable = function() {\n    return this.each(function() {\n      if (typeof this.disabled != \"undefined\") {\n        this.disabled = $(this).data('jquery.disabled');\n      }\n    });\n};\n</code></pre>\n\n<p>Which stores the original 'disabled' property of the element.</p>\n\n<pre><code>$('#myDiv *').disable();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>HTML input controls can be disabled using 'disabled' attribute as you know. Once 'disabled' attribute for an input control is set, event handlers associated with such control are not invoked.</p>\n\n<p>You have to simulate above behavior for HTML elements that don't support 'disabled' attribute like div, if you wish.</p>\n\n<p>If you have a div, and you want to support click or a key event on that div, then you have to do two things:\n1) When you want to disable the div, set its disabled attribute as usual (just to comply with the convention)\n2) In your div's click and/or key handlers, check if disabled attribute is set on the div. If it is, then just disregard the click or key event (e.g. just return immediately). If disabled attribute is not set, then do your div's click and/or key event logic.</p>\n\n<p>Above steps are browser independent as well.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Browsers tested: IE 9, Chrome, Firefox and jquery-1.7.1.min.js</p>\n\n<pre><code>    $(document).ready(function () {\n        $('#chkDisableEnableElements').change(function () {\n            if ($('#chkDisableEnableElements').is(':checked')) {\n                enableElements($('#divDifferentElements').children());\n            }\n            else {\n                disableElements($('#divDifferentElements').children());\n            }\n        });\n    });\n\n    function disableElements(el) {\n        for (var i = 0; i &lt; el.length; i++) {\n            el[i].disabled = true;\n\n            disableElements(el[i].children);\n        }\n    }\n\n    function enableElements(el) {\n        for (var i = 0; i &lt; el.length; i++) {\n            el[i].disabled = false;\n\n            enableElements(el[i].children);\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>similar to cletu's solution, but i got an error using that solution, this is the workaround:</p>\n\n<pre><code>$('div *').prop('disabled',true);\n// or\n$('#the_div_id *').prop('disabled',true);\n</code></pre>\n\n<p>works fine on me</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>$(\"#yourdivid textarea, #yourdivid input, #yourdivid select\").attr('disabled',true);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Many of the above answers only work on form elements. A simple way to disable any DIV including its contents is to just disable mouse interaction. For example:</p>\n\n<pre><code>$(\"#mydiv\").addClass(\"disabledbutton\");\n</code></pre>\n\n<p>css</p>\n\n<pre><code>.disabledbutton {\n    pointer-events: none;\n    opacity: 0.4;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>This css only/noscript solution adds an overlay above a fieldset (or a div or any other element), preventing interaction:</p>\n\n<pre><code>fieldset { position: relative; }\nfieldset[disabled]::after { content: ''; display: inline-block; position: absolute; top: 0; left: 0; right: 0; bottom: 0; pointer-events: all; background: rgba(128,128,128,0.2); }\n</code></pre>\n\n<p>If you want an invisible i.e. transparent overlay, set the background to e.g. rgba(128,128,128,0), as it won't work without a background.\nThe above works for IE9+. The following much simpler css will work on IE11+</p>\n\n<pre><code>[disabled] { pointer-events: none; }\n</code></pre>\n\n<p>Chrome </p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I was under the assumption that if I disabled a div, all content got disabled too.</p>\n\n<p>However, the content is grayed but I can still interact with it.</p>\n\n<p>Is there a way to do that? (disable a div and get all content disabled also)</p>\n",
            "last_activity_date": 1410267618,
            "question_id": 639815,
            "score": 67,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "How to disable all div content"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>You can chain the commands, eg:</p>\n\n<pre><code>$(this).$(\"a\").css(\"display\", \"none\");\n</code></pre>\n\n<p>This would hide all links which are descendants of the element clicked on.</p>\n\n<p>But why would you want to add an event of type 'click' on EVERY element of your html-page?</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Are you trying to get the name of the current tag that was clicked?</p>\n\n<p>If so, do this..</p>\n\n<pre><code>$(\"*\").click(function(){\n    alert($(this)[0].nodeName);\n});\n</code></pre>\n\n<p>You can't really get the \"selector\", the \"selector\" in your case is <code>*</code>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>How about:</p>\n\n<pre><code>var selector = \"*\"\n$(selector).click(function() {\n    alert(selector);\n});\n</code></pre>\n\n<p>I don't believe jQuery store the selector text that was used. After all, how would that work if you did something like this:</p>\n\n<pre><code>$(\"div\").find(\"a\").click(function() {\n    // what would expect the 'selector' to be here?\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h2> ::WARNING:: <br /> .selector has been deprecated as of version 1.7, removed as of 1.9 </h2>\n\n<p>The jQuery object has a selector property I saw when digging in its code yesterday. Don't know if it's defined in the docs are how reliable it is (for future proofing). But it works!</p>\n\n<pre><code>$('*').selector // returns *\n</code></pre>\n\n<p><strong>Edit</strong>: If you were to find the selector inside the event, that information should ideally be part of the event itself and not the element because an element could have multiple click events assigned through various selectors. A solution would be to use a wrapper to around <code>bind()</code>, <code>click()</code> etc. to add events instead of adding it directly.</p>\n\n<pre><code>jQuery.fn.addEvent = function(type, handler) {\n    this.bind(type, {'selector': this.selector}, handler);\n};\n</code></pre>\n\n<p>The selector is being passed as an object's property named <code>selector</code>. Access it as <code>event.data.selector</code>.</p>\n\n<p>Let's try it on some markup (<a href=\"http://jsfiddle.net/DFh7z/\" rel=\"nofollow\">http://jsfiddle.net/DFh7z/</a>):</p>\n\n<pre><code>&lt;p class='info'&gt;some text and &lt;a&gt;a link&lt;/a&gt;&lt;/p&gt;\u200b\n\n$('p a').addEvent('click', function(event) {\n    alert(event.data.selector); // p a\n});\n</code></pre>\n\n<hr />\n\n<p><strong>Disclaimer</strong>: Remember that just as with <code>live()</code> events, the selector property may be invalid if DOM traversal methods are used.</p>\n\n<pre><code>&lt;div&gt;&lt;a&gt;a link&lt;/a&gt;&lt;/div&gt;\n</code></pre>\n\n<p>The code below will NOT work, as <code>live</code> relies on the selector property\nwhich in this case is <code>a.parent()</code> - an invalid selector.</p>\n\n<pre><code>$('a').parent().live(function() { alert('something'); });\n</code></pre>\n\n<p>Our <code>addEvent</code> method will fire, but you too will see the wrong selector - <code>a.parent()</code>.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>Ok, so in a comment above the question asker <code>Fidilip</code> said that what he/she's really after is to get the path to the current element.</p>\n\n<p>Here's a script that will \"climb\" the DOM ancestor tree and then build fairly specific selector including any <code>id</code> or <code>class</code> attributes on the item clicked.</p>\n\n<p><strong>See it working on jsFiddle: <a href=\"http://jsfiddle.net/Jkj2n/56/\">http://jsfiddle.net/Jkj2n/56/</a></strong></p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    $(function() {\n      $(\"*\").click(function() {\n        var selector = $(this).parents()\n                    .map(function() { return this.tagName; })\n                    .get().reverse().join(\" \");\n\n        if (selector) { \n          selector += \" \"+ $(this)[0].nodeName;\n        }\n\n        var id = $(this).attr(\"id\");\n        if (id) { \n          selector += \"#\"+ id;\n        }\n\n        var classNames = $(this).attr(\"class\");\n        if (classNames) {\n          selector += \".\" + $.trim(classNames).replace(/\\s/gi, \".\");\n        }\n\n        alert(selector);\n        return false;\n      });\n    });\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;&lt;span&gt;I love&lt;/span&gt; jQuery&lt;/h1&gt;\n&lt;div&gt;\n  &lt;p&gt;It's the &lt;strong&gt;BEST THING&lt;/strong&gt; ever&lt;/p&gt;\n  &lt;button id=\"myButton\"&gt;Button test&lt;/button&gt;\n&lt;/div&gt;\n&lt;ul&gt;\n  &lt;li&gt;Item one\n    &lt;ul&gt;\n      &lt;li id=\"sub2\" &gt;Sub one&lt;/li&gt;\n      &lt;li id=\"sub2\" class=\"subitem otherclass\"&gt;Sub two&lt;/li&gt;\n    &lt;/ul&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>For example, if you were to click the 2nd list nested list item in the HTML below, you would get the following result:</p>\n\n<p><code>HTML BODY UL LI UL LI#sub2.subitem.otherclass</code></p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p><a href=\"http://www.selectorgadget.com/\" rel=\"nofollow\">http://www.selectorgadget.com/</a> is a bookmarklet designed explicitly for this use case.</p>\n\n<p>That said, I agree with most other people in that you should just learn CSS selectors yourself, trying to generate them with code is not sustainable. :)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Did you try this ?  </p>\n\n<pre><code> $(\"*\").click(function(){\n    $(this).attr(\"id\"); \n });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I added some fixes to @jessegavin's fix.</p>\n\n<p>This will return right away if there is an ID on the element. I also added a name attribute check and a nth-child selector in case a element has no id, class, or name.</p>\n\n<p>The name might need scoping in case there a multiple forms on the page and have similar inputs, but I didn't handle that yet.</p>\n\n<pre><code>function getSelector(el){\n    var $el = $(el);\n\n    var id = $el.attr(\"id\");\n    if (id) { //\"should\" only be one of these if theres an ID\n        return \"#\"+ id;\n    }\n\n    var selector = $el.parents()\n                .map(function() { return this.tagName; })\n                .get().reverse().join(\" \");\n\n    if (selector) {\n        selector += \" \"+ $el[0].nodeName;\n    }\n\n    var classNames = $el.attr(\"class\");\n    if (classNames) {\n        selector += \".\" + $.trim(classNames).replace(/\\s/gi, \".\");\n    }\n\n    var name = $el.attr('name');\n    if (name) {\n        selector += \"[name='\" + name + \"']\";\n    }\n    if (!name){\n        var index = $el.index();\n        if (index) {\n            index = index + 1;\n            selector += \":nth-child(\" + index + \")\";\n        }\n    }\n    return selector;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In collaboration with @drzaus we've come up with the following jQuery plugin.</p>\n\n<h1>jQuery.getSelector</h1>\n\n<pre><code>!(function ($, undefined) {\n    /// adapted http://jsfiddle.net/drzaus/Hgjfh/5/\n\n    var get_selector = function (element) {\n        var pieces = [];\n\n        for (; element &amp;&amp; element.tagName !== undefined; element = element.parentNode) {\n            if (element.className) {\n                var classes = element.className.split(' ');\n                for (var i in classes) {\n                    if (classes.hasOwnProperty(i) &amp;&amp; classes[i]) {\n                        pieces.unshift(classes[i]);\n                        pieces.unshift('.');\n                    }\n                }\n            }\n            if (element.id &amp;&amp; !/\\s/.test(element.id)) {\n                pieces.unshift(element.id);\n                pieces.unshift('#');\n            }\n            pieces.unshift(element.tagName);\n            pieces.unshift(' &gt; ');\n        }\n\n        return pieces.slice(1).join('');\n    };\n\n    $.fn.getSelector = function (only_one) {\n        if (true === only_one) {\n            return get_selector(this[0]);\n        } else {\n            return $.map(this, function (el) {\n                return get_selector(el);\n            });\n        }\n    };\n\n})(window.jQuery);\n</code></pre>\n\n<h2>Minified Javascript</h2>\n\n<pre><code>// http://stackoverflow.com/questions/2420970/how-can-i-get-selector-from-jquery-object/15623322#15623322\n!function(e,t){var n=function(e){var n=[];for(;e&amp;&amp;e.tagName!==t;e=e.parentNode){if(e.className){var r=e.className.split(\" \");for(var i in r){if(r.hasOwnProperty(i)&amp;&amp;r[i]){n.unshift(r[i]);n.unshift(\".\")}}}if(e.id&amp;&amp;!/\\s/.test(e.id)){n.unshift(e.id);n.unshift(\"#\")}n.unshift(e.tagName);n.unshift(\" &gt; \")}return n.slice(1).join(\"\")};e.fn.getSelector=function(t){if(true===t){return n(this[0])}else{return e.map(this,function(e){return n(e)})}}}(window.jQuery)\n</code></pre>\n\n<h2>Usage and Gotchas</h2>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;...&lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"sidebar\"&gt;\n            &lt;ul&gt;\n                &lt;li&gt;\n                    &lt;a href=\"/\" id=\"home\"&gt;Home&lt;/a&gt;\n                &lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n        &lt;div id=\"main\"&gt;\n            &lt;h1 id=\"title\"&gt;Welcome&lt;/h1&gt;\n        &lt;/div&gt;\n\n        &lt;script type=\"text/javascript\"&gt;\n\n            // Simple use case\n            $('#main').getSelector();           // =&gt; 'HTML &gt; BODY &gt; DIV#main'\n\n            // If there are multiple matches then an array will be returned\n            $('body &gt; div').getSelector();      // =&gt; ['HTML &gt; BODY &gt; DIV#main', 'HTML &gt; BODY &gt; DIV#sidebar']\n\n            // Passing true to the method will cause it to return the selector for the first match\n            $('body &gt; div').getSelector(true);  // =&gt; 'HTML &gt; BODY &gt; DIV#main'\n\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h2>Fiddle w/ QUnit tests</h2>\n\n<p><a href=\"http://jsfiddle.net/CALY5/5/\">http://jsfiddle.net/CALY5/5/</a></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Javascript code for the same, in case any one needs, as i needed it. This just the translation only of the above selected answer.</p>\n\n<pre><code>    &lt;script type=\"text/javascript\"&gt;\n\nfunction getAllParents(element){\n    var a = element;\n    var els = [];\n    while (a &amp;&amp; a.nodeName != \"#document\") {\n        els.unshift(a.nodeName);\n        a = a.parentNode;\n    }\n    return els.join(\" \");\n}\n\nfunction getJquerySelector(element){\n\n    var selector = getAllParents(element);\n    /* if(selector){\n        selector += \" \" + element.nodeName;\n    } */\n    var id = element.getAttribute(\"id\");\n    if(id){\n        selector += \"#\" + id;\n    }\n    var classNames = element.getAttribute(\"class\");\n    if(classNames){\n        selector += \".\" + classNames.replace(/^\\s+|\\s+$/g, '').replace(/\\s/gi, \".\");\n    }\n    console.log(selector);\n    alert(selector);\n    return selector;\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I've released a jQuery plugin: <a href=\"https://github.com/ngs/jquery-selectorator\" rel=\"nofollow\">jQuery Selectorator</a>, you can get selector like this.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$(\"*\").on(\"click\", function(){\n  alert($(this).getSelector().join(\"\\n\"));\n  return false;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<pre><code> $(\"*\").click(function(){\n    $(this); // how can i get selector from $(this) ?\n });\n</code></pre>\n\n<p>Is there easy way to <strong>get selector from $(this)</strong> or something like that? There is a way, how to select element by selector, but <strong>how about getting selector from element</strong>?</p>\n\n<p>Thanx for any help =)</p>\n",
            "last_activity_date": 1412275071,
            "question_id": 2420970,
            "score": 55,
            "tags": [
                "javascript",
                "jquery",
                "jquery-selectors",
                "tree-traversal"
            ],
            "title": "How can i get selector from jQuery object"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<pre><code>function formatAMPM(date) {\n  var hours = date.getHours();\n  var minutes = date.getMinutes();\n  var ampm = hours &gt;= 12 ? 'pm' : 'am';\n  hours = hours % 12;\n  hours = hours ? hours : 12; // the hour '0' should be '12'\n  minutes = minutes &lt; 10 ? '0'+minutes : minutes;\n  var strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 119
                },
                {
                    "body": "<p>Check out <a href=\"http://www.datejs.com/\">Datejs</a>. Their built in formatters can do this: <a href=\"http://code.google.com/p/datejs/wiki/APIDocumentation#toString\">http://code.google.com/p/datejs/wiki/APIDocumentation#toString</a></p>\n\n<p>It's a really handy library, especially if you are planning on doing other things with date objects.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can also consider using something like <a href=\"http://www.datejs.com/\" rel=\"nofollow\">date.js</a>:<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;html&gt;\r\n&lt;script type=\"text/javascript\" src=\"http://www.datejs.com/build/date.js\"&gt;&lt;/script&gt;\r\n\r\n&lt;script&gt;\r\n   (function ()\r\n   {\r\n      document.write(new Date().toString(\"hh:mm tt\"));\r\n   })();\r\n&lt;/script&gt;\r\n&lt;/html&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Here's a way using regex:</p>\n\n<pre><code>new Date('7/10/2013 20:12:34').toLocaleTimeString().replace(/([\\d]+:[\\d]{2})(:[\\d]{2})(.*)/, \"$1$3\")\n\"8:12 PM\"\nnew Date('7/10/2013 01:12:34').toLocaleTimeString().replace(/([\\d]+:[\\d]{2})(:[\\d]{2})(.*)/, \"$1$3\")\n\"1:12 AM\"\n</code></pre>\n\n<p>This creates 3 matching groups:</p>\n\n<ul>\n<li><code>([\\d]+:[\\d]{2})</code> - Hour:Minute</li>\n<li><code>(:[\\d]{2})</code> - Seconds</li>\n<li><code>(.*)</code> - the space and period (Period is the official name for AM/PM)</li>\n</ul>\n\n<p>Then it displays the 1st and 3rd groups.</p>\n\n<p><strong>WARNING: toLocaleTimeString() may behave differently based on region / location.</strong></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Short RegExp for en-US:</p>\n\n<pre><code>var d = new Date();\nd = d.toLocaleTimeString().replace(/:\\d+ /, ' '); // current time, e.g. \"1:54 PM\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is another way that is simple, and very effective:</p>\n\n<p></p>\n\n<pre><code>        var d = new Date();\n\n        var weekday = new Array(7);\n        weekday[0] = \"Sunday\";\n        weekday[1] = \"Monday\";\n        weekday[2] = \"Tuesday\";\n        weekday[3] = \"Wednesday\";\n        weekday[4] = \"Thursday\";\n        weekday[5] = \"Friday\";\n        weekday[6] = \"Saturday\";\n\n        var month = new Array(11);\n        month[0] = \"January\";\n        month[1] = \"February\";\n        month[2] = \"March\";\n        month[3] = \"April\";\n        month[4] = \"May\";\n        month[5] = \"June\";\n        month[6] = \"July\";\n        month[7] = \"August\";\n        month[8] = \"September\";\n        month[9] = \"October\";\n        month[10] = \"November\";\n        month[11] = \"December\";\n\n        var t = d.toLocaleTimeString().replace(/:\\d+ /, ' ');\n\n        document.write(weekday[d.getDay()] + ',' + \" \" + month[d.getMonth()] + \" \" + d.getDate() + ',' + \" \" + d.getFullYear() + '&lt;br&gt;' + d.toLocaleTimeString());\n\n    &lt;/script&gt;&lt;/div&gt;&lt;!-- #time --&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you don't need to print the am/pm, I found the following nice and concise: </p>\n\n<pre><code>var now = new Date();\nvar hours = now.getHours() % 12 || 12;  // 12h instead of 24h, with 12 instead of 0. \n</code></pre>\n\n<p>This is based off @bbrame's answer. </p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Or just simply do the following code:</p>\n\n<pre><code>    &lt;script&gt;\n        time = function() {\n            var today = new Date();\n            var h = today.getHours();\n            var m = today.getMinutes();\n            var s = today.getSeconds();\n            m = checkTime(m);\n            s = checkTime(s);\n            document.getElementById('txt_clock').innerHTML = h + \":\" + m + \":\" + s;     \n            var t = setTimeout(function(){time()}, 0);\n        }\n\n        time2 = function() {\n            var today = new Date();\n            var h = today.getHours();\n            var m = today.getMinutes();\n            var s = today.getSeconds();\n            m = checkTime(m);\n            s = checkTime(s);\n            if (h&gt;12) {\n                document.getElementById('txt_clock_stan').innerHTML = h-12 + \":\" + m + \":\" + s;\n            }               \n            var t = setTimeout(function(){time2()}, 0);\n        }\n\n        time3 = function() {\n            var today = new Date();\n            var h = today.getHours();\n            var m = today.getMinutes();\n            var s = today.getSeconds();\n            if (h&gt;12) {\n                document.getElementById('hour_line').style.width = h-12 + 'em'; \n            }\n            document.getElementById('minute_line').style.width = m + 'em';  \n            document.getElementById('second_line').style.width = s + 'em';  \n            var t = setTimeout(function(){time3()}, 0);\n        }\n\n        checkTime = function(i) {\n            if (i&lt;10) {i = \"0\" + i};  // add zero in front of numbers &lt; 10\n            return i;\n        }           \n    &lt;/script&gt;\n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can get am the current time or passed date time to AM PM format through following function.</p>\n\n<p><a href=\"http://allinworld99.blogspot.in/2014/07/get-am-pm-from-datetime-javascript.html\" rel=\"nofollow\"><strong>Live Output with Example</strong></a></p>\n\n<pre><code>  function getval() {\n        var currentTime = new Date()\n        var hours = currentTime.getHours()\n        var minutes = currentTime.getMinutes()\n\n        if (minutes &lt; 10)\n            minutes = \"0\" + minutes;\n\n        var suffix = \"AM\";\n        if (hours &gt;= 12) {\n            suffix = \"PM\";\n            hours = hours - 12;\n        }\n        if (hours == 0) {\n            hours = 12;\n        }\n        var current_time = hours + \":\" + minutes + \" \" + suffix;\n        show_message(\"Current Your System Time is : \" + current_time);\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do you display a javascript datetime object in the 12 hour format (AM/PM)? </p>\n",
            "last_activity_date": 1417601190,
            "question_id": 8888491,
            "score": 53,
            "tags": [
                "javascript",
                "datetime",
                "date",
                "time",
                "format"
            ],
            "title": "How do you display javascript datetime in 12 hour AM/PM format?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>XMLHttpRequest, i.e. AJAX, without the XML.</p>\n\n<p>The precise manner you do this is dependent on what JavaScript framework you're using, but if we disregard interoperability issues, your code will look something like:</p>\n\n<pre>var client = new XMLHttpRequest();\nclient.open('GET', '/foo.txt');\nclient.onreadystatechange = function() {\n  alert(client.responseText);\n}\nclient.send();</pre>\n\n<p>Normally speaking, though, XMLHttpRequest isn't available on all platforms, so some fudgery is done. Once again, your best bet is to use an AJAX framework like jQuery.</p>\n\n<p>One extra consideration: this will only work as long as foo.txt is on the same domain. If it's on a different domain, same-origin security policies will prevent you from reading the result.</p>\n",
                    "is_accepted": true,
                    "score": 38
                },
                {
                    "body": "<p>If your input was structured as XML, you could use the <code>importXML</code> function. (More info <a href=\"http://www.quirksmode.org/dom/importxml.html\" rel=\"nofollow\">here at quirksmode</a>).</p>\n\n<p>If it isn't XML, and there isn't an equivalent function for importing plain text, then you could open it in a hidden iframe and then read the contents from there.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>here is how I did it in jquery:</p>\n\n<pre><code>jQuery.get('http://localhost/foo.txt', function(data) {\n    alert(data);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 50
                },
                {
                    "body": "<p>One thing to keep in mind is that Javascript runs on the client, and not on the server. You  can't really \"load a file\" from the server in Javascript. What happens is that Javascript sends a request to the server, and the server sends back the contents of the requested file. How does Javascript receive the contents? That's what the callback function is for. In Edward's case, that is</p>\n\n<pre><code>    client.onreadystatechange = function() {\n</code></pre>\n\n<p>and in danb's case, it is</p>\n\n<pre><code> function(data) {\n</code></pre>\n\n<p>This function is called whenever the data happen to arrive. The jQuery version implicitly uses Ajax, it just makes the coding easier by encapsulating that code in the library.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a text file in the root of my web app <em><a href=\"http://localhost/foo.txt\">http://localhost/foo.txt</a></em> and I'd like to load it into a variable in javascript.. in groovy I would do this:</p>\n\n<pre><code>def fileContents = 'http://localhost/foo.txt'.toURL().text;\nprintln fileContents;\n</code></pre>\n\n<p>How can I get a similar result in javascript?</p>\n",
            "last_activity_date": 1387671180,
            "question_id": 196498,
            "score": 34,
            "tags": [
                "javascript"
            ],
            "title": "How do I load the contents of a text file into a javascript variable?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>I have just done this same thing with a div, I am sure you can adapt it for an iFrame.</p>\n\n<p>Have a look at <a href=\"http://www.guruonline.tv/ViewSet.aspx?VideoSetId=368&amp;QuestionId=3707\" rel=\"nofollow\">this</a>, you will see the div scroll down, view the source and look at line 680 onwards</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use the <code>scrollTop</code> property of the frame's content to set the content's vertical scroll-offset to a specific number of pixels (like 100):</p>\n\n<pre><code>&lt;iframe src=\"foo.html\" onload=\"this.contentWindow.document.documentElement.scrollTop=100\"&gt;&lt;/iframe&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use the <code>onload</code> event to detect when the iframe has finished loading, and there you can use the <a href=\"https://developer.mozilla.org/en/DOM/window.scrollTo\">scrollTo</a> function on the contentWindow of the iframe, to scroll to a defined position of pixels, from left and top (x, y):</p>\n\n<pre><code>var myIframe = document.getElementById('iframe');\nmyIframe.onload = function () {\n    myIframe.contentWindow.scrollTo(xcoord,ycoord);\n}\n</code></pre>\n\n<p>You can check a working example <a href=\"http://jsbin.com/ipujo/edit\">here</a>.</p>\n\n<p><strong>Note:</strong> This will work if both pages reside on the same domain.</p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>A jQuery solution:</p>\n\n<pre><code>$(\"#frame1\").ready( function() {\n\n  $(\"#frame1\").contents().scrollTop( $(\"#frame1\").contents().scrollTop() + 10 );\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Inspired by Nelsons comment I  made this.</p>\n\n<p>Workaround for javascript Same origin policy with regards to using .ScrollTo( ) on document originating on an external domain.</p>\n\n<p>Very simple work around for this involves a creating a dummy html page that hosts the external website within it, then calling .ScrollTo(x,y) on that page once it's loaded. Then the only thing you need to do is have a frame or an iframe bring up this website.</p>\n\n<p>There are a lot of other ways to do it, this is by far the most simplified way to do it.</p>\n\n<p>*note the height must be large to accomodate the scroll bars maximum value.</p>\n\n<p>--home.htm</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Home&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;frameset rows=\"*,170\"&gt;\n&lt;frame src=body.htm noresize=yes frameborder=0 marginheight=0 marginwidth=0 scrolling=no&gt;\n&lt;frame src=\"weather.htm\" noresize=yes frameborder=0 marginheight=0 marginwidth=0 scrolling=no&gt;\n&lt;/frameset&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>--weather.htm</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Weather&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body onLoad=\"window.scrollTo(0,170)\"&gt;\n\n&lt;iframe id=\"iframe\" src=\"http://forecast.weather.gov/MapClick.php?CityName=Las+Vegas&amp;state=NV&amp;site=VEF&amp;textField1=36.175&amp;textField2=-115.136&amp;e=0\" height=1000 width=100% frameborder=0 marginheight=0 marginwidth=0 scrolling=no&gt;\n&lt;/iframe&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Or, you can set a margin-top on the iframe...a bit of a hack but works in FF so far. </p>\n\n<pre><code>#frame {\nmargin-top:200px;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var $iframe = document.getElementByID('myIfreme');\nvar childDocument = iframe.contentDocument ? iframe.contentDocument : iframe.contentWindow.document;\n childDocument.documentElement.scrollTop = 0;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I dynamically load an iframe with javascript. After it's loaded, how can I make it scroll down a specific number of pixels (ie. after the page in the iframe has loaded, how can I make the iframe scroll by itself to the a specified region of the page?)</p>\n",
            "last_activity_date": 1383869472,
            "question_id": 1192228,
            "score": 25,
            "tags": [
                "javascript",
                "iframe",
                "scroll"
            ],
            "title": "Scrolling an iframe with javascript?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Have you looked into <code>onkeyup</code>?</p>\n\n<p><a href=\"http://www.w3schools.com/jsref/event_onkeyup.asp\" rel=\"nofollow\">http://www.w3schools.com/jsref/event_onkeyup.asp</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Make it easy on yourself and use a jQuery plugin like jquery.maxlength. Tutorial at <a href=\"http://www.anon-design.se/demo/maxlength-with-jquery\" rel=\"nofollow\">http://www.anon-design.se/demo/maxlength-with-jquery</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You will need to use <code>onkeyup</code> <em>and</em> <code>onchange</code> for this.  The onchange will prevent context-menu pasting, and the onkeyup will fire for every keystroke.</p>\n\n<p>See my answer on <a href=\"http://stackoverflow.com/questions/1125482/how-to-impose-maxlength-on-textarea-in-html-javascript/1125521#1125521\">How to impose maxlength on textArea</a> for a code sample.</p>\n",
                    "is_accepted": true,
                    "score": 48
                },
                {
                    "body": "<p>The best thing that you can do is to set a function to be called on a given amount of time and this function to check the contents of your textarea.</p>\n\n<pre><code>self.setInterval('checkTextAreaValue()', 50);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>I know this isn't exactly your question but I thought this might be useful.\nFor certain applications it is nice to have the change function fire not every single time a key is pressed.  This can be achieved with something like this:</p>\n\n<pre><code>var text = document.createElement('textarea');\ntext.rows = 10;\ntext.cols = 40;\ndocument.body.appendChild(text);\n\ntext.onkeyup = function(){\nvar callcount = 0;\n    var action = function(){\n        alert('changed');\n    }\n    var delayAction = function(action, time){\n        var expectcallcount = callcount;\n        var delay = function(){\n            if(callcount == expectcallcount){\n                action();\n            }\n        }\n        setTimeout(delay, time);\n    }\n    return function(eventtrigger){\n        ++callcount;\n        delayAction(action, 1200);\n    }\n}();\n</code></pre>\n\n<p>This works by testing if a more recent event has fired within a certain delay period.  Good luck!</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>For Google-Chrome, oninput will be sufficient (Tested on Windows 7 with Version 22.0.1229.94 m).<br />\nFor IE 9, oninput will catch everything except cut via contextmenu and backspace.<br />\nFor IE 8, onpropertychange is required to catch pasting in addition to oninput.<br />\nFor IE 9 + 8, onkeyup is required to catch backspace.<br />\nFor IE 9 + 8, onmousemove is the only way I found to catch cutting via contextmenu<br /></p>\n\n<p>Not tested on Firefox.</p>\n\n<pre><code>    var isIE = /*@cc_on!@*/false; // Note: This line breaks closure compiler...\n\n    function SuperDuperFunction() {\n        // DoSomething\n    }\n\n\n    function SuperDuperFunctionBecauseMicrosoftMakesIEsuckIntentionally() {\n        if(isIE) // For Chrome, oninput works as expected\n            SuperDuperFunction();\n    }\n\n&lt;textarea id=\"taSource\" class=\"taSplitted\" rows=\"4\" cols=\"50\" oninput=\"SuperDuperFunction();\" onpropertychange=\"SuperDuperFunctionBecauseMicrosoftMakesIEsuckIntentionally();\" onmousemove=\"SuperDuperFunctionBecauseMicrosoftMakesIEsuckIntentionally();\" onkeyup=\"SuperDuperFunctionBecauseMicrosoftMakesIEsuckIntentionally();\"  &gt;\nTest\n&lt;/textarea&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>It's 2012, the post-PC era is here, and we still have to struggle with something as basic as this. This ought to be <em>very simple</em>.</p>\n\n<p>Until such time as that dream is fulfilled, here's the best way to do this, cross-browser: <strong>use a combination of the <a href=\"http://help.dottoro.com/ljhxklln.php\" rel=\"nofollow\"><code>input</code></a> and <a href=\"http://help.dottoro.com/ljufknus.php\" rel=\"nofollow\"><code>onpropertychange</code></a> events</strong>, like so:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var area = container.querySelector('textarea');\nif (area.addEventListener) {\n  area.addEventListener('input', function() {\n    // event handling code for sane browsers\n  }, false);\n} else if (area.attachEvent) {\n  area.attachEvent('onpropertychange', function() {\n    // IE-specific event handling code\n  });\n}\n</code></pre>\n\n<p><strong>The <code>input</code> event takes care of <a href=\"http://help.dottoro.com/ljhxklln.php\" rel=\"nofollow\">IE9+, FF, Chrome, Opera and Safari</a>, and <code>onpropertychange</code> takes care of <a href=\"http://help.dottoro.com/ljufknus.php\" rel=\"nofollow\">IE8</a> (it also works with IE6 and 7, but there are some bugs).</strong></p>\n\n<p>The advantage of using <code>input</code> and <code>onpropertychange</code> is that they don't fire unnecessarily (like when pressing the <code>Ctrl</code> or <code>Shift</code> keys); so <strong>if you wish to run a relatively expensive operation when the textarea contents change, this is the way to go</strong>.</p>\n\n<p>Now IE, as always, does a half-assed job of supporting this: neither <code>input</code> nor <code>onpropertychange</code> fires in IE when characters are <em>deleted</em> from the textarea. So if you need to handle deletion of characters in IE, use <code>keypress</code> (as opposed to using <code>keyup</code> / <code>keydown</code>, because they fire only once even if the user presses and holds a key down).</p>\n\n<p>Source: <a href=\"http://www.alistapart.com/articles/expanding-text-areas-made-elegant/\" rel=\"nofollow\">http://www.alistapart.com/articles/expanding-text-areas-made-elegant/</a></p>\n\n<p><strong>EDIT:</strong> It seems even the above solution is not perfect, as rightly pointed out in the comments: the presence of the <code>addEventListener</code> property on the textarea does <em>not</em> imply you're working with a sane browser; similarly the presence of the <code>attachEvent</code> property does <em>not</em> imply IE. If you want your code to be really air-tight, you should consider changing that. See <a href=\"http://stackoverflow.com/questions/2823733/textarea-onchange-detection/14029861?noredirect=1#comment19596202_14029861\">Tim Down's comment</a> for pointers.</p>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<p>I know this question was specific to JavaScript, however, there seems to be no good, clean way to ALWAYS detect when a textarea changes in all current browsers. I've learned jquery has taken care of it for us. It even handles contextual menu changes to text areas. The same syntax is used regardless of input type.</p>\n\n<pre><code>    $('div.lawyerList').on('change','textarea',function(){\n      // Change occurred so count chars...\n    });\n</code></pre>\n\n<p>or</p>\n\n<pre><code>    $('textarea').on('change',function(){\n      // Change occurred so count chars...\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>How do I detect change event on textarea using javascript?<br>\nI'm trying to detect how many characters left is available as you type.</p>\n\n<p>I tried using the onchange event, but that seems to only kick in when focus is out.</p>\n",
            "last_activity_date": 1424084884,
            "question_id": 2823733,
            "score": 53,
            "tags": [
                "javascript"
            ],
            "title": "Textarea onchange detection"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>I don't know, and I am actually interested in the answer to this, but my guess is that without the parentheses the data in <code>data_from_the_wire</code> would be interpreted as a closure.  Maybe the parentheses force evaluation and so the associative array is 'returned'.</p>\n\n<p>This is the kind of guessing that leads to downvotes though =).</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>Douglas Crockford mentions a syntax ambiguity on his <a href=\"http://www.json.org/js.html\" rel=\"nofollow\">JSON</a> site but that didn't really help me. </p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I'm not sure of the reason but I parse JSON by using <a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\">the JSON class</a> from <a href=\"http://www.json.org/js.html\">json.org</a>. It's much safer than using eval.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><code>eval</code> accepts a sequence of Javascript statements. The Javascript parser\ninterprets the \u2018{\u2019 token, occuring within a statement as the start of a block and not the start of an object literal.</p>\n\n<p>When you enclose your literal into parentheses like this: <code>({ data_from_the_wire })</code>\nyou are switching the Javascript parser into expression parsing mode. The token \u2018{\u2019 inside an expression means the start of an object literal declaration and <strong>not</strong> a block, and thus Javascript accepts it as an object literal.</p>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p>Putting the parentheses around <code>data_from_the_wire</code> is effectively equivalent to</p>\n\n<pre><code>stuff = eval('return ' + data_from_the_wire + ';');\n</code></pre>\n\n<p>If you were to eval without the parentheses, then the code would be evaluated, and if you did have any named functions inside it those would be defined, but not returned.</p>\n\n<p>Take as an example the ability to call a function just as it han been created:</p>\n\n<pre><code>(function() { alert('whoot'); })()\n</code></pre>\n\n<p>Will call the function that has just been defined.  The following, however, does not work:</p>\n\n<pre><code>function() { alert('whoot'); }()\n</code></pre>\n\n<p>So we see that the parentheses effectively turn then code into an expression that returns, rather than just code to run.</p>\n",
                    "is_accepted": true,
                    "score": 32
                },
                {
                    "body": "<p>This happens because without round braces JavaScript tries to interpret <code>{\"text\": ...</code> as <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FGuide:Loop%5FStatements:label%5FStatement\" rel=\"nofollow\">a label</a> and fails. Try it in console and you'll get \"invalid label\" error.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It depends on the value of <code>data_from_the_wire</code>, actually. In most cases your syntax is ok, but a line that begins with <code>{</code> is parsed as a label, and yours is invalid. If you surround it with parenthesis, it prevents the parser from misinterpreting your expression.</p>\n\n<p>Just a parsing problem, really. With strings, numbers or functions, you wouldn't have that problem.</p>\n\n<p>One solution is to always eval instructions and not expressions. You can write</p>\n\n<pre><code>eval('var stuff = {\"text\": \"hello\"}');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In JavaScript, curly brackets are used to create block statements:</p>\n\n<pre><code>{\nvar foo = \"bar\";\nvar blah = \"baz\";\ndoSomething();\n}\n</code></pre>\n\n<p>The above lines can be put inside a string and <code>eval</code>uated without problem. Now consider this:</p>\n\n<pre><code>{\n\"foo\": \"bar\",\n\"blah\": \"baz\"\n}\n</code></pre>\n\n<p>The curly brackets cause the JavaScript engine to think it is a group expression, hence the syntax error around the <code>:</code> character. Quote from <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Object_literals\">MDN...JavaScript Guide...Object Literals</a>:</p>\n\n<blockquote>\n  <p>You should not use an object literal at the beginning of a statement.\n  This will lead to an error or not behave as you expect, because the {\n  will be interpreted as the beginning of a block.</p>\n</blockquote>\n\n<p>The workaround of wrapping the object literal inside <code>()</code> works by telling the engine to treat its contents as an expression, not as a block statement. So this does not work:</p>\n\n<pre><code>({\nvar foo = \"bar\";\nvar blah = \"baz\";\ndoSomething(evil);\n})\n// parse error\n</code></pre>\n\n<p>But this does:</p>\n\n<pre><code>({\n\"foo\": \"bar\",\n\"blah\": \"baz\"\n})\n// returns object\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>I've learned (the hard way) that I need to add parentheses around JSON data, like this:</p>\n\n<pre><code>stuff = eval('(' + data_from_the_wire + ')');\n// where data_from_the_wire was, for example {\"text\": \"hello\"}\n</code></pre>\n\n<p>(In Firefox 3, at least).</p>\n\n<p>What's the reason behind this? I hate writing code without understanding what\u00b4s behind the hood.</p>\n",
            "last_activity_date": 1418729190,
            "question_id": 964397,
            "score": 27,
            "tags": [
                "javascript",
                "json",
                "eval"
            ],
            "title": "Why does JavaScript&#39;s eval need parentheses to eval JSON data?"
        }
    ]
}
