{
    "items": [
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p><code>$(document).on('click', '#selector', function() { /* do stuff */ });</code></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>.on() is for jQuery version 1.7 and above.  If you have an older version, use this:</p>\n\n<pre><code>$(\"#SomeId\").live(\"click\",function(){\n    //do stuff;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>$('#parent').on('click', '#child', function() {\n    // Code\n});\n</code></pre>\n\n<p>From the <a href=\"http://api.jquery.com/on/\"><code>$.on()</code></a> documentation:</p>\n\n<blockquote>\n  <p>Event handlers are bound only to the currently selected elements; they\n  must exist on the page at the time your code makes the call to <code>.on()</code>.</p>\n</blockquote>\n\n<p>Your <code>#child</code> element doesn't exist when you call <code>$.on()</code> on it, so the event isn't bound (unlike <code>$.live()</code>). <code>#parent</code>, however, <em>does</em> exist, so binding the event to that is fine.</p>\n\n<p>The second argument in my code above acts as a 'filter' to only trigger if the event bubbled up to <code>#parent</code> from <code>#child</code>.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>If you want the click handler to work for an element that gets loaded dynamically, then you set the event handler on a parent object (that does not get loaded dynamically) and give it a selector that matches your dynamic object like this:</p>\n\n<pre><code>$('#parent').on(\"click\", \"#child\", function() {});\n</code></pre>\n\n<p>The event handler will be attached to the <code>#parent</code> object and anytime a click event bubbles up to it that originated on <code>#child</code>, it will fire your click handler.  This is called delegated event handling (the event handling is delegated to a parent object).</p>\n\n<p>It's done this way because you can attach the event to the <code>#parent</code> object even when the <code>#child</code> object does not exist yet, but when it later exists and gets clicked on, the click event will bubble up to the <code>#parent</code> object, it will see that it originated on <code>#child</code> and there is an event handler for a click on <code>#child</code> and fire your event.</p>\n",
                    "is_accepted": true,
                    "score": 377
                },
                {
                    "body": "<p>The equivalent of .live() in 1.7 looks like this:</p>\n\n<pre><code>$(document).on('click', '#child', function() ...); \n</code></pre>\n\n<p>Basically, watch the document for click events and filter them for #child.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I used 'live' in my project but one of my friend suggested that i should use 'on' instead of live.\nAnd when i tried to use that i experienced a problem like you had.</p>\n\n<p>On my pages i create buttons table rows and many dom stuff dynamically. but when i use on the magic disappeared.</p>\n\n<p>The other solutions like use it like a child just calls your functions every time on  every click.\nBut i find a way to make it happen again and here is the solution.</p>\n\n<p>Write your code as:</p>\n\n<pre><code>function caller(){\n    $('.ObjectYouWntToCall').on(\"click\", function() {...magic...});\n}\n</code></pre>\n\n<p>Call caller(); after you create your object in the page like this.</p>\n\n<pre><code>$('&lt;dom class=\"ObjectYouWntToCall\"&gt;bla... bla...&lt;dom&gt;').appendTo(\"#whereeveryouwant\");\ncaller();\n</code></pre>\n\n<p>By this way your function is called when it is supposed to not every click on the page.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know it's a little late for an answer, but I've created a polyfill for the .live() method. I've tested it in jQuery 1.11, and it seems to work pretty well. I know that we're supposed to implement the .on() method wherever possible, but in big projects, where it's not possible to convert all .live() calls to the equivalent .on() calls for whatever reason, the following might work:</p>\n\n<pre><code>if(jQuery &amp;&amp; !jQuery.fn.live) {\n    jQuery.fn.live = function(evt, func) {\n        $('body').on(evt, this.selector, func);\n    }\n}\n</code></pre>\n\n<p>Just include it after you load jQuery and before you call live().</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am using jQuery v.1.7.1 where the .live() method is apparently deprecated. </p>\n\n<p>The problem I am having is that when dynamically loading html into an element using:</p>\n\n<pre><code>$('#parent').load(\"http://...\"); \n</code></pre>\n\n<p>If I try and add a click event afterwards it does not register the event using either of these methods:</p>\n\n<pre><code>$('#parent').click(function() ...); \n</code></pre>\n\n<p>or</p>\n\n<pre><code>// according to documentation this should be used instead of .live()\n$('#child').on('click', function() ...); \n</code></pre>\n\n<p>What is the correct way to achieve this functionality? It only seems to work with .live() for me, but I shouldn't be using that method. Note that #child is a dynamically loaded element. </p>\n\n<p>Thanks. </p>\n",
            "last_activity_date": 1399478565,
            "question_id": 8752321,
            "score": 122,
            "tags": [
                "javascript",
                "jquery",
                "events",
                "dom",
                "handler"
            ],
            "title": "jQuery .live() vs .on() method for adding a click event after loading dynamic html"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>The <a href=\"http://api.jquery.com/on/\"><code>on</code> documentation</a> states (in bold ;)):</p>\n\n<blockquote>\n  <p>Event handlers are bound only to the currently selected elements; they must exist on the page at the time your code makes the call to <code>.on()</code>. </p>\n</blockquote>\n\n<p>Equivalent to <code>.live()</code> would be something like</p>\n\n<pre><code>$(document.body).on('change', 'select[name^=\"income_type_\"]', function() {\n    alert($(this).val());\n});\n</code></pre>\n\n<p>Although it is better if you bind the event handler as close as possible to the elements, that is, to an element being closer in the hierarchy.</p>\n\n<p><strong>Update:</strong> While answering another question, I found out that this is also mentioned in the <a href=\"http://api.jquery.com/live/\"><code>.live</code> documentation</a>:</p>\n\n<blockquote>\n  <p>Rewriting the <code>.live()</code> method in terms of its successors is straightforward; these are templates for equivalent calls for all three event attachment methods:</p>\n\n<pre><code>$(selector).live(events, data, handler);                // jQuery 1.3+\n$(document).delegate(selector, events, data, handler);  // jQuery 1.4.3+\n$(document).on(events, selector, data, handler);        // jQuery 1.7+\n</code></pre>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 182
                },
                {
                    "body": "<p>Just found a better solution which doesn't involve editing third party code:</p>\n\n<p><a href=\"https://github.com/jquery/jquery-migrate/#readme\">https://github.com/jquery/jquery-migrate/#readme</a></p>\n\n<p>Install the jQuery Migrate NuGet package in Visual Studio to make all the versioning issues go away. Next time Microsoft update their unobtrusive AJAX and validation modules perhaps try it without the migrate script again to see if they resolved the issue.</p>\n\n<p>As jQuery Migrate is maintained by the jQuery Foundation I think this is not only the best approach for third party libraries and also to get warning messages for your own libraries detailing how to update them.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>In addition to the selected answer,</p>\n\n<p>Port <code>jQuery.live</code> to jQuery 1.9+ while you wait for your application to migrate. Add this to your JavaScript file.</p>\n\n<pre><code>// Borrowed from jQuery 1.8.3's source code\njQuery.fn.extend({\n  live: function( types, data, fn ) {\n          if( window.console &amp;&amp; console.warn ) {\n           console.warn( \"jQuery.live is deprecated. Use jQuery.on instead.\" );\n          }\n\n          jQuery( this.context ).on( types, this.selector, data, fn );\n          return this;\n        }\n});\n</code></pre>\n\n<p>Or, you can use <a href=\"https://github.com/jquery/jquery-migrate\">https://github.com/jquery/jquery-migrate</a> </p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>In addition to the selected answers,<br /></p>\n\n<p>If you use <strong>Visual Studio</strong>, you can use the <strong>Regex Replace</strong>.<br />\nIn Edit > Find and Replace > Replace in Files<br />\nOr Ctrl + Shift + H <br /></p>\n\n<p>In Find and Replace pop-up, set these fields<br /></p>\n\n<p><strong>Find what:</strong> <code>\\$\\((.*)\\)\\.live\\((.*),</code><br />\n<strong>Replace with:</strong> <code>$(document.body).on($2,$1,</code><br />\nIn find options check \"Use Regular Expressions\"<br /></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>My application has dynamically added Dropdowns. The user can add as many as they need to. </p>\n\n<p>I was traditionally using jQuery's <code>live()</code> method to detect when one of these Dropdowns was <code>change()</code>ed:</p>\n\n<pre><code>$('select[name^=\"income_type_\"]').live('change', function() {\n    alert($(this).val());\n});\n</code></pre>\n\n<p>As of jQuery 1.7, I've updated this to:</p>\n\n<pre><code>$('select[name^=\"income_type_\"]').on('change', function() {\n    alert($(this).val());\n});\n</code></pre>\n\n<p>Looking at the Docs, that should be perfectly valid (right?) - but the event handler never fires. Of course, I've confirmed jQuery 1.7 is loaded and running, etc. There are no errors in the error log.</p>\n\n<p>What am I doing wrong? Thanks!</p>\n",
            "last_activity_date": 1421821484,
            "question_id": 8021436,
            "score": 146,
            "tags": [
                "javascript",
                "jquery",
                "jquery-live",
                "jquery-1.7"
            ],
            "title": "Turning live() into on() in jQuery"
        },
        {
            "answer_count": 29,
            "answers": [
                {
                    "body": "<pre><code>if (somevariable == undefined) {\n  alert('the variable is not defined!');\n}\n</code></pre>\n\n<p>You can also make it into a function, as shown <a href=\"http://verens.com/archives/2005/07/25/isset-for-javascript/\" rel=\"nofollow\">here</a>:</p>\n\n<pre><code>function isset(varname){\n  return(typeof(window[varname]) != 'undefined');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -10
                },
                {
                    "body": "<p>In JavaScript there is <strong>null</strong> and there is <strong>undefined</strong>.  They have different meanings.</p>\n\n<ul>\n<li><strong>undefined</strong> means that the variable value has not been defined; it is not known what the value is.</li>\n<li><strong>null</strong> means that the variable value is defined and set to null (has no value).</li>\n</ul>\n\n<p>Marijn Haverbeke states, in his free, online book \"<a href=\"http://eloquentjavascript.net/\">Eloquent JavaScript</a>\" (emphasis mine):</p>\n\n<blockquote>\n  <p>There is also a similar value, null, whose meaning is 'this value is defined, but it does not have a value'. The difference in meaning between undefined and null is mostly academic, and usually not very interesting. <strong>In practical programs, it is often necessary to check whether something 'has a value'. In these cases, the expression something == undefined may be used, because, even though they are not exactly the same value, null == undefined will produce true.</strong></p>\n</blockquote>\n\n<p>So, I guess the best way to check if something was undefined would be:</p>\n\n<pre><code>if (something == undefined)\n</code></pre>\n\n<p>Hope this helps!</p>\n\n<p><strong>Edit:</strong> In response to your edit, object properties should work the same way.</p>\n\n<pre><code>var person = {\n    name: \"John\",\n    age: 28,\n    sex: \"male\"\n};\n\nalert(person.name); // \"John\"\nalert(person.fakeVariable); // undefined\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>The solution is incorrect. In JavaScript,</p>\n\n<pre><code>null == undefined\n</code></pre>\n\n<p>will return true, because they both are \"casted\" to a boolean and are false. The correct way would be to check</p>\n\n<pre><code>if (something === undefined)\n</code></pre>\n\n<p>which is the identity operator...</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use:</p>\n\n<pre><code>if (typeof something === \"undefined\") {\n    alert(\"something is undefined\");\n}\n</code></pre>\n\n<p>If an object variable which have some properties you can use same thing like this:</p>\n\n<pre><code>if (typeof my_obj.someproperties === \"undefined\"){\n    console.log('the property is not available...'); // print into console\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1344
                },
                {
                    "body": "<pre><code>function isUnset(inp) {\n  return (typeof inp === 'undefined')\n}\n</code></pre>\n\n<p>Returns false if variable is set, and true if is undefined.</p>\n\n<p>Then use:</p>\n\n<pre><code>if (isUnset(var)) {\n  // initialize variable here\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>if ( typeof( something ) == \"undefined\") \n</code></pre>\n\n<p>This worked for me while the others didn't.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>I believe there are a number of incorrect answers to this topic. Contrary to common belief, \"undefined\" is NOT a keyword in JavaScript and can in fact have a value assigned to it.</p>\n\n<pre><code>// Degenerate code. DO NOT USE.\nvar undefined = false;  // Shockingly, this is completely legal!\nif (myVar === undefined) {\n    alert(\"You have been misled. Run away!\");\n}\n</code></pre>\n\n<p>Additionally, <code>myVar === undefined</code> will raise an error in the situation where myVar is undeclared.</p>\n\n<p>The most robust way to perform this test is:</p>\n\n<pre><code>if (typeof myVar === \"undefined\")\n</code></pre>\n\n<p>This will always return the correct result, and even handles the situation where <code>myVar</code> is not declared.</p>\n",
                    "is_accepted": false,
                    "score": 519
                },
                {
                    "body": "<p>I'm not sure where the origin of using <code>===</code> with <code>typeof</code> came from, and as a convention I see it used in many libraries, but the typeof operator returns a string literal, and we know that up front, so why would you also want to type check it too?</p>\n\n<pre><code>typeof x;                      // some string literal \"string\", \"object\", \"undefined\"\nif (typeof x === \"string\") {   // === is redundant because we already know typeof returns a string literal\nif (typeof x == \"string\") {    // sufficient\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>The issue boils down to three cases:</p>\n\n<ol>\n<li>The object has the property and its value is not <code>undefined</code>.</li>\n<li>The object has the property and its value is <code>undefined</code>.</li>\n<li>The object does not have the property.</li>\n</ol>\n\n<p>This tells us something I consider important:</p>\n\n<p><strong>There is a difference between an undefined member and a defined member with an undefined value.</strong></p>\n\n<p>But unhappily <code>typeof obj.foo</code> does not tell us which of the three cases we have. However we can combine this with <code>\"foo\" in obj</code> to distinguish the cases.</p>\n\n<pre><code>                               |  typeof obj.x === 'undefined' | !(\"x\" in obj)\n1.                     { x:1 } |  false                        | false\n2.    { x : (function(){})() } |  true                         | false\n3.                          {} |  true                         | true\n</code></pre>\n\n<p>Its worth noting that these tests are the same for <code>null</code> entries too</p>\n\n<pre><code>                               |  typeof obj.x === 'undefined' | !(\"x\" in obj)\n                    { x:null } |  false                        | false\n</code></pre>\n\n<p>I'd argue that in some cases it makes more sense (and is clearer) to check whether the property is there, than checking whether it is undefined, and the only case where this check will be different is case 2, the rare case of an actual entry in the object with an undefined value.</p>\n\n<p>For example: I've just been refactoring a bunch of code that had a bunch of checks whether an object had a given property.</p>\n\n<pre><code>if( typeof blob.x != 'undefined' ) {  fn(blob.x); }\n</code></pre>\n\n<p>Which was clearer when written without a check for undefined.</p>\n\n<pre><code>if( \"x\" in blob ) { fn(blob.x); }\n</code></pre>\n\n<p>But as has been mentioned these are not exactly the same (but are more than good enough for my needs). </p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>If you do</p>\n\n<pre><code>if (myvar == undefined )\n{ \n    alert('var does not exists or is not initialized');\n}\n</code></pre>\n\n<p>it will fail when the variable <code>myvar</code> does not exists, because myvar is not defined, so the script is broken and the test has no effect.</p>\n\n<p>Because the window object has a global scope (default object) outside a function, a declaration will be 'attached' to the window object.</p>\n\n<p>For example:</p>\n\n<pre><code>var myvar = 'test';\n</code></pre>\n\n<p>The global variable <em>myvar</em> is the same as <em>window.myvar</em> or <em>window['myvar']</em></p>\n\n<p>To avoid errors to test when a global variable exists, you better use:</p>\n\n<pre><code>if(window.myvar == undefined )\n{ \n    alert('var does not exists or is not initialized');\n}\n</code></pre>\n\n<p>The question if a variable really exists doesn't matter, its value is incorrect. Otherwise, it is silly to initialize variables with undefined, and it is better use the value false to initialize. When you know that all variables that you declare are initialized with false, you can simply check its type or rely on <code>!window.myvar</code> to check if it has a proper/valid value. So even when the variable is not defined then <code>!window.myvar</code> is the same for <code>myvar = undefined</code> or <code>myvar = false</code> or <code>myvar = 0</code>.</p>\n\n<p>When you expect a specific type, test the type of the variable. To speed up testing a condition you better do:</p>\n\n<pre><code>if( !window.myvar || typeof window.myvar != 'string' )\n{\n    alert('var does not exists or is not type of string');\n}\n</code></pre>\n\n<p>When the first and simple condition is true, the interpreter skips the next tests. </p>\n\n<p>It is always better to use the instance/object of the variable to check if it got a valid value. It is more stable and is a better way of programming.  </p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can get an array all undefined with path using the following code.</p>\n\n<pre><code> function getAllUndefined(object) {\n\n        function convertPath(arr, key) {\n            var path = \"\";\n            for (var i = 1; i &lt; arr.length; i++) {\n\n                path += arr[i] + \"-&gt;\";\n            }\n            path += key;\n            return path;\n        }\n\n\n        var stack = [];\n        var saveUndefined= [];\n        function getUndefiend(obj, key) {\n\n            var t = typeof obj;\n            switch (t) {\n                case \"object\":\n                    if (t === null) {\n                        return false;\n                    }\n                    break;\n                case \"string\":\n                case \"number\":\n                case \"boolean\":\n                case \"null\":\n                    return false;\n                default:\n                    return true;\n            }\n            stack.push(key);\n            for (k in obj) {\n                if (obj.hasOwnProperty(k)) {\n                    v = getUndefiend(obj[k], k);\n                    if (v) {\n                        saveUndefined.push(convertPath(stack, k));\n                    }\n                }\n            }\n            stack.pop();\n\n        }\n\n        getUndefiend({\n            \"\": object\n        }, \"\");\n        return saveUndefined;\n    }\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/anoop26667/9XbEK/\" rel=\"nofollow\">jsFiddle</a> link</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><code>Object.hasOwnProperty(o, 'propertyname');</code></p>\n\n<p>This doesn't look up through the prototype chain, however.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>I didn't see (hope I didn't miss it) anyone checking the object before the property. So, this is the shortest and most effective (though not necessarily the most clear):</p>\n\n<pre><code>if (obj &amp;&amp; obj.prop) {\n  // Do something;\n}\n</code></pre>\n\n<p>If the obj or obj.prop is undefined, null, or \"falsy\", the if statement will not execute the code block. This is <em>usually</em> the desired behavior in most code block statements (in JavaScript).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Crossposting my <a href=\"http://stackoverflow.com/a/14305002/1037948\">answer</a> from related question <a href=\"http://stackoverflow.com/questions/3390396/how-to-check-for-undefined-in-javascript/\">How to check for &quot;undefined&quot; in JavaScript?</a></p>\n\n<p><em>Specific to this question, see test cases with <code>someObject.&lt;whatever&gt;</code>.</em></p>\n\n<hr>\n\n<p>Some scenarios illustrating the results of the various answers:\n<a href=\"http://jsfiddle.net/drzaus/UVjM4/\">http://jsfiddle.net/drzaus/UVjM4/</a></p>\n\n<p><em>(Note that the use of <code>var</code> for <code>in</code> tests make a difference when in a scoped wrapper)</em></p>\n\n<p>Code for reference:</p>\n\n<pre><code>(function(undefined) {\n    var definedButNotInitialized;\n    definedAndInitialized = 3;\n    someObject = {\n        firstProp: \"1\"\n        , secondProp: false\n        // , undefinedProp not defined\n    }\n    // var notDefined;\n\n    var tests = [\n        'definedButNotInitialized in window',\n        'definedAndInitialized in window',\n        'someObject.firstProp in window',\n        'someObject.secondProp in window',\n        'someObject.undefinedProp in window',\n        'notDefined in window',\n\n        '\"definedButNotInitialized\" in window',\n        '\"definedAndInitialized\" in window',\n        '\"someObject.firstProp\" in window',\n        '\"someObject.secondProp\" in window',\n        '\"someObject.undefinedProp\" in window',\n        '\"notDefined\" in window',\n\n        'typeof definedButNotInitialized == \"undefined\"',\n        'typeof definedButNotInitialized === typeof undefined',\n        'definedButNotInitialized === undefined',\n        '! definedButNotInitialized',\n        '!! definedButNotInitialized',\n\n        'typeof definedAndInitialized == \"undefined\"',\n        'typeof definedAndInitialized === typeof undefined',\n        'definedAndInitialized === undefined',\n        '! definedAndInitialized',\n        '!! definedAndInitialized',\n\n        'typeof someObject.firstProp == \"undefined\"',\n        'typeof someObject.firstProp === typeof undefined',\n        'someObject.firstProp === undefined',\n        '! someObject.firstProp',\n        '!! someObject.firstProp',\n\n        'typeof someObject.secondProp == \"undefined\"',\n        'typeof someObject.secondProp === typeof undefined',\n        'someObject.secondProp === undefined',\n        '! someObject.secondProp',\n        '!! someObject.secondProp',\n\n        'typeof someObject.undefinedProp == \"undefined\"',\n        'typeof someObject.undefinedProp === typeof undefined',\n        'someObject.undefinedProp === undefined',\n        '! someObject.undefinedProp',\n        '!! someObject.undefinedProp',\n\n        'typeof notDefined == \"undefined\"',\n        'typeof notDefined === typeof undefined',\n        'notDefined === undefined',\n        '! notDefined',\n        '!! notDefined'\n    ];\n\n    var output = document.getElementById('results');\n    var result = '';\n    for(var t in tests) {\n        if( !tests.hasOwnProperty(t) ) continue; // bleh\n\n        try {\n            result = eval(tests[t]);\n        } catch(ex) {\n            result = 'Exception--' + ex;\n        }\n        console.log(tests[t], result);\n        output.innerHTML += \"\\n\" + tests[t] + \": \" + result;\n    }\n})();\n</code></pre>\n\n<p>And results:</p>\n\n<pre><code>definedButNotInitialized in window: true\ndefinedAndInitialized in window: false\nsomeObject.firstProp in window: false\nsomeObject.secondProp in window: false\nsomeObject.undefinedProp in window: true\nnotDefined in window: Exception--ReferenceError: notDefined is not defined\n\"definedButNotInitialized\" in window: false\n\"definedAndInitialized\" in window: true\n\"someObject.firstProp\" in window: false\n\"someObject.secondProp\" in window: false\n\"someObject.undefinedProp\" in window: false\n\"notDefined\" in window: false\ntypeof definedButNotInitialized == \"undefined\": true\ntypeof definedButNotInitialized === typeof undefined: true\ndefinedButNotInitialized === undefined: true\n! definedButNotInitialized: true\n!! definedButNotInitialized: false\ntypeof definedAndInitialized == \"undefined\": false\ntypeof definedAndInitialized === typeof undefined: false\ndefinedAndInitialized === undefined: false\n! definedAndInitialized: false\n!! definedAndInitialized: true\ntypeof someObject.firstProp == \"undefined\": false\ntypeof someObject.firstProp === typeof undefined: false\nsomeObject.firstProp === undefined: false\n! someObject.firstProp: false\n!! someObject.firstProp: true\ntypeof someObject.secondProp == \"undefined\": false\ntypeof someObject.secondProp === typeof undefined: false\nsomeObject.secondProp === undefined: false\n! someObject.secondProp: true\n!! someObject.secondProp: false\ntypeof someObject.undefinedProp == \"undefined\": true\ntypeof someObject.undefinedProp === typeof undefined: true\nsomeObject.undefinedProp === undefined: true\n! someObject.undefinedProp: true\n!! someObject.undefinedProp: false\ntypeof notDefined == \"undefined\": true\ntypeof notDefined === typeof undefined: true\nnotDefined === undefined: Exception--ReferenceError: notDefined is not defined\n! notDefined: Exception--ReferenceError: notDefined is not defined\n!! notDefined: Exception--ReferenceError: notDefined is not defined\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>What does this mean: <strong>\"undefined object property\"</strong>?</p>\n\n<p>Actually it can mean two quite different things! First, it can mean <em>the property that has never been defined</em> in the object and, second, it can mean the <em>property that has an undefined value</em>. Let's look at this code:</p>\n\n<pre><code>var o = { a: undefined }\n</code></pre>\n\n<p>Is <code>o.a</code> undefined? Yes! Its value is undefined. Is <code>o.b</code> undefined? Sure! There is no property 'b' at all! OK, see now how different approaches behave in both situations:</p>\n\n<pre><code>typeof o.a == 'undefined' // true\ntypeof o.b == 'undefined' // true\no.a === undefined // true\no.b === undefined // true\n'a' in o // true\n'b' in o // false\n</code></pre>\n\n<p>We can clearly see that <code>typeof obj.prop == 'undefined'</code> and <code>obj.prop === undefined</code> are equivalent, and they do not distinguish those different situations. And <code>'prop' in obj</code> can detect the situation when a property hasn't been defined at all and doesn't pay attention to the property value which may be undefined.</p>\n\n<h2>So what to do?</h2>\n\n<p>1) You want to know if a property is undefined by either the first or second meaning (the most typical situation).</p>\n\n<pre><code>typeof obj.prop == 'undefined' // IMHO, see \"final fight\" below\n</code></pre>\n\n<p>2) You want to just know if object has some property and don't care about its value.</p>\n\n<pre><code>'prop' in obj\n</code></pre>\n\n<h2>Notes:</h2>\n\n<ul>\n<li>You can't check an object and its property at the same time. For example, this <code>x.a === undefined</code> or this <code>typeof x.a == 'undefined'</code> raises <code>ReferenceError: x is not defined</code> if x is not defined.</li>\n<li>Variable <code>undefined</code> is a global variable (so actually it is <code>window.undefined</code> in browsers). It has been supported since ECMAScript 1st Edition and since ECMAScript 5 it is <strong>read only</strong>. So in modern browsers it can't be <em>redefined to true</em> as many authors love to frighten us with, but this is still a true for older browsers.</li>\n</ul>\n\n<h2>Final fight: <code>obj.prop === undefined</code> vs <code>typeof obj.prop == 'undefined'</code></h2>\n\n<p>Pluses of <code>obj.prop === undefined</code>:</p>\n\n<ul>\n<li>It's a bit shorter and looks a bit prettier</li>\n<li>The JavaScript engine will give you an error if you have misspelled <code>undefined</code></li>\n</ul>\n\n<p>Minuses of <code>obj.prop === undefined</code>:</p>\n\n<ul>\n<li><code>undefined</code> can be overridden in old browsers</li>\n</ul>\n\n<p>Pluses of <code>typeof obj.prop == 'undefined'</code>:</p>\n\n<ul>\n<li>It is really universal! It works in new and old browsers.</li>\n</ul>\n\n<p>Minuses of <code>typeof obj.prop == 'undefined'</code>:</p>\n\n<ul>\n<li><code>'undefned'</code> (<em>misspelled</em>) here is just a string constant, so the JavaScript engine can't help you if you have misspelled it like I just did.</li>\n</ul>\n\n<h2>Update (for server-side JavaScript):</h2>\n\n<p>Node.js supports the global variable <code>undefined</code> as <code>global.undefined</code> (it can also be used without the 'global' prefix). I don't know about other implementations of server-side JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>Here is my situation:</p>\n\n<p>I am using the result of a REST call.\nThe result should be parsed from JSON to a JavaScript object.</p>\n\n<p>There is one error I need to defend.\nIf the args to the rest call were incorrect as far as the user specifying the args wrong, the rest call comes back basically empty.</p>\n\n<p>While using this post to help me defend against this, I tried this.</p>\n\n<pre><code>if( typeof restResult.data[0] === \"undefined\" ) { throw  \"Some error\"; }\n</code></pre>\n\n<p>For my situation, if restResult.data[0] === \"object\", then I can safely start inspecting the rest of the members.  If undefined then throw the error as above.</p>\n\n<p>What I am saying is that for my situation, all the suggestions above in this post did not work.  I'm not saying I'm right and everyone is wrong.  I am not a JavaScript master at all, but hopefully this will help someone.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In the article <em><a href=\"http://flippinawesome.org/2013/12/09/exploring-the-abyss-of-null-and-undefined-in-javascript/\" rel=\"nofollow\">Exploring the Abyss of Null and Undefined in JavaScript </a></em> I read that frameworks like <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"nofollow\">Underscore.js</a> use this function:</p>\n\n<pre><code>function isUndefined(obj){\n    return obj === void 0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Compare with <code>void 0</code>, for terseness.</p>\n\n<pre><code>if (foo !== void 0)\n</code></pre>\n\n<p>It's not as verbose as <code>if (typeof foo !== 'undefined')</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h2>'<em>if (window.x) { }</em>' is error safe</h2>\n\n<p>Most likely you want <code>if (window.x)</code>. This check is safe even if x hasn't been declared (<code>var x;</code>) - browser doesn't throw an error. </p>\n\n<h2>Example: I want to know if my browser supports History API</h2>\n\n<pre><code>if (window.history) {\n    history.call_some_function();\n}\n</code></pre>\n\n<h2>How this works:</h2>\n\n<p><strong>window</strong> is an object which holds all global variables as its members, and it is legal to try to access a non-existing member. If <strong>x</strong> hasn't been declared or hasn't been set then <code>window.x</code> returns <strong>undefined</strong>. <strong>undefined</strong> leads to <strong>false</strong> when <strong>if()</strong> evaluates it.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Many of the existing answers are misleading at best.</p>\n\n<p><em>Never</em> use <code>typeof x === \"undefined\"</code>.  (Or <code>== \"undefined\"</code> for that matter.) As with all \u201cnever\u201ds, there are a few exceptional cases, but the majority of the time? If you don\u2019t know whether a real variable is defined in your current scope, you are doing something wrong. The <code>typeof</code> check is really useful if you want to introduce a ton of potential for error by making a typo.</p>\n\n<p>Of course, this potential already exists in the case of object properties, which appears to be the topic of this question. Let\u2019s just ignore the <code>typeof</code> check, then, because it\u2019ll do more harm than good, and it\u2019s a pain to read. You\u2019re intuitively checking a value, not a type.</p>\n\n<pre><code>var hasFoo = obj.foo !== undefined;\n</code></pre>\n\n<p>The \u201cdefault value\u201d of a property on an object is <code>undefined</code>. <code>undefined</code> can also be set as the value on a property. This is the check you will want some of the time.</p>\n\n<pre><code>var hasFoo = 'foo' in obj;\n</code></pre>\n\n<p>This will check for the existence of the <code>foo</code> property somewhere along <code>obj</code>\u2019s prototype chain, regardless of value (including <code>undefined</code>).</p>\n\n<pre><code>var hasFoo = obj.hasOwnProperty('foo');\n</code></pre>\n\n<p>This will check for the existence of the <code>foo</code> property at the end of <code>obj</code>\u2019s prototype chain, i.e. for properties directly on <code>obj</code>.</p>\n\n<pre><code>var hasFoo = Object.prototype.hasOwnProperty.call(obj, 'foo');\n</code></pre>\n\n<p>This is the same as above, but will use the canonical <code>hasOwnProperty</code> in case <code>obj</code> also has a property named <code>hasOwnProperty</code> for some reason. In practice, if somebody overrode <code>hasOwnProperty</code>, they\u2019d probably be a jerk in a bunch of other places and redefine <code>undefined</code> in scope, or alter <code>Object</code> or <code>Object.prototype</code> or <code>Object.prototype.hasOwnProperty.call</code>.</p>\n\n<pre><code>var hasFoo = obj.foo != undefined;\n</code></pre>\n\n<p>This one also checks for <code>null</code>. To make that clearer, I\u2019d recommend using <code>!= null</code> instead.</p>\n\n<pre><code>var hasFoo = Boolean(obj.foo); // or !!obj.foo\n</code></pre>\n\n<p>This checks for the other falsy values (I hope that\u2019s obvious) \u2013 <code>0</code>, <code>NaN</code>, <code>false</code>, and the empty string. Certainly practically useful for checking for function support:</p>\n\n<pre><code>if (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = \u2026;\n}\n</code></pre>\n\n<p>To sum up: don\u2019t use <code>typeof</code> to check for <code>undefined</code> values. It is prone to error. If you make a typo in the <code>\"undefined\"</code> part, you will get the wrong answer. If you make a typo in the testing variable (if you are testing a variable \u2013 which you shouldn\u2019t be, ever, use the global object to do that kind of feature test), you will get the wrong answer.</p>\n\n<p>If you are paranoid about <code>undefined</code> being redefined, here\u2019s why you shouldn\u2019t be:</p>\n\n<ul>\n<li><p><code>undefined</code> is read-only in modern browsers. If you\u2019re developing in strict mode as you should be, attempting to assign to it will throw an error. (Even if you don\u2019t develop in strict mode, though, it won\u2019t change.) It\u2019s also a non-configurable property. You <em>will</em> have to worry if you go \u201csafe mode\u201d by passing <code>undefined</code> into your IIFE. Never do that, for the reason outlined in this bullet point, and for the fact that\u2026</p></li>\n<li><p>Anybody who is redefining <code>undefined</code> is either an idiot or joking or something, and either wants to or deserves to have broken code. (In the \u201cdeserves to\u201d case, note that their code is <em>already</em> quite broken.)</p></li>\n</ul>\n\n<p>Still paranoid? Compare against <code>void 0</code>. <code>void</code> <em>is</em> a keyword in JavaScript, and it always has been, and it will always give you a canonical <code>undefined</code>.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<pre><code>\"propertyName\" in obj //-&gt; true | false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Also same things can be written shorter:</p>\n\n<pre><code>if (!variable){\n    //do it if variable is Undefined\n}\n</code></pre>\n\n<p>or </p>\n\n<pre><code>if (variable){\n    //do it if variable is Defined\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>All the answers are incomplete. This is the right way of knowing that there is a property 'defined as undefined' :</p>\n\n<pre><code>var hasUndefinedProperty = function hasUndefinedProperty(obj, prop){\n  return ((prop in obj) &amp;&amp; (typeof obj[prop] == 'undefined')) ;\n} ;\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>var a = { b : 1, e : null } ;\na.c = a.d ;\n\nhasUndefinedProperty(a, 'b') ; // false : b is defined as 1\nhasUndefinedProperty(a, 'c') ; // true : c is defined as undefined\nhasUndefinedProperty(a, 'd') ; // false : d is undefined\nhasUndefinedProperty(a, 'e') ; // false : e is defined as null\n\n// And now...\ndelete a.c ;\nhasUndefinedProperty(a, 'c') ; // false : c is undefined\n</code></pre>\n\n<p>Too bad that this been the right answer is buried in wrong answers >_&lt;</p>\n\n<p>So, for anyone who pass by, I will give you undefineds for free!!</p>\n\n<pre><code>var undefined ; undefined ; // undefined\n({}).a ;                    // undefined\n[].a ;                      // undefined\n''.a ;                      // undefined\n(function(){}()) ;          // undefined\nvoid(0) ;                   // undefined\neval() ;                    // undefined\n1..a ;                      // undefined\n/a/.a ;                     // undefined\n(true).a ;                  // undefined\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Going through the comments, for those who want to check both is it undefined or its value is null:</p>\n\n<pre><code>//Just in JavaScript\nvar s; // Undefined\nif (typeof s == \"undefined\" || s === null){\n    alert('either it is undefined or value is null')\n}\n</code></pre>\n\n<p>If you are using jQuery Library then <code>jQuery.isEmptyObject()</code> will suffice for both cases,</p>\n\n<pre><code>var s; // Undefined\njQuery.isEmptyObject(s); // Will return true;\n\ns = null; // Defined as null\njQuery.isEmptyObject(s); // Will return true;\n\n//Usage\nif (jQuery.isEmptyObject(s)) {\n    alert('Either variable:s is undefined or its value is null');\n} else {\n     alert('variable:s has value ' + s);\n}\n\ns = 'something'; // Defined with some value\njQuery.isEmptyObject(s); // Will return false;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I would like to show you something I'm using in order to protect the <code>undefined</code> variable:</p>\n\n<pre><code>Object.defineProperty(window, 'undefined', {});\n</code></pre>\n\n<p>This forbids anyone to change the <code>window.undefined</code> value therefore destroying the code based on that variable. If using <code>\"use strict\"</code>, anything trying to change its value will end in error, otherwise it would be silently ignored.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you are using Angular: </p>\n\n<pre><code>angular.isUndefined(obj)\nangular.isUndefined(obj.prop)\n</code></pre>\n\n<p>Underscore.js:</p>\n\n<pre><code>_.isUndefined(obj) \n_.isUndefined(obj.prop) \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>if simple typeof is not working try this one it will help:</p>\n\n<pre><code>if(jQuery.type(variable) === \"undefined\") {// do something}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Reading through this, I'm amazed I didn't see this. I have found multiple algorithms that would work for this.</p>\n\n<h1>Never Defined</h1>\n\n<p>If the value of an object was never defined, this will prevent from returning <code>true</code> if it is defined as <code>null</code> or <code>undefined</code>. This is helpful if you want true to be returned for values set as <code>undefined</code></p>\n\n<pre><code>if(obj.prop === void 0) console.log(\"The value has never been defined\");\n</code></pre>\n\n<h1>Defined as undefined Or never Defined</h1>\n\n<p>If you want it to result as <code>true</code> for values defined with the value of <code>undefined</code>, or never defined, you can simply use <code>=== undefined</code></p>\n\n<pre><code>if(obj.prop === undefined) console.log(\"The value is defined as undefined, or never defined\");\n</code></pre>\n\n<h1>Defined as a falsy value, undefined,null, or never defined.</h1>\n\n<p>Commonly, people have asked me for an algorithm to figure out if a value is either falsy, <code>undefined</code>, or <code>null</code>. The following works.</p>\n\n<pre><code>if(obj.prop == false || obj.prop === null || obj.prop === undefined) {\n    console.log(\"The value is falsy, null, or undefined\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use <code>if (this.variable)</code> to test if it is defined. Simple <code>if (variable)</code>, <a href=\"http://stackoverflow.com/a/12589152/4550451\">recommended above</a>, fails for me. It turns out that it works only when variable is a field of some object, <code>obj.someField</code> to check if it is defined in the dictionary. But we can use <code>this</code> or <code>window</code> as the dictionary object since any variable is a field in current window, as I understand it. Therefore here is a test</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>if (this.abc) alert(\"defined\"); else alert(\"undefined\");\r\n\r\nabc = \"abc\";\r\nif (this.abc) alert(\"defined\"); else alert(\"undefined\");</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>It first detects that variable <code>abc</code> is undefined and it is defined after initialization.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What's the best way of checking if an object property in JavaScript is undefined?</p>\n",
            "last_activity_date": 1425657480,
            "question_id": 27509,
            "score": 1268,
            "tags": [
                "javascript",
                "object",
                "undefined"
            ],
            "title": "Detecting an undefined object property"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>The rationale behind not using the new keyword, is simple:</p>\n\n<p>By not using it at all, you avoid the pitfall that comes with accidentally omitting it.  The construction pattern that YUI uses, is an example of how you can avoid the new keyword altogether\"</p>\n\n<pre><code>var foo = function () {\n    var pub= { };\n    return pub;\n}\nvar bar = foo();\n</code></pre>\n\n<p>Alternatively you could so this:</p>\n\n<pre><code>function foo() { }\nvar bar = new foo();\n</code></pre>\n\n<p>But by doing so you run risk of someone forgetting to use the <strong>new</strong> keyword, and the <strong>this</strong> operator being all fubar.  AFAIK there is no advantage to doing this (other than you are used to it).</p>\n\n<p>At The End Of The Day: <strong>It's about being defensive.</strong>  Can you use the new statement? Yes.  Does it make your code more dangerous? Yes.</p>\n\n<p>If you have ever written C++, it's akin to setting pointers to NULL after you delete them.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>I have just read some parts of his Crockfords book \"Javascript: The Good Parts\". I get the feeling that he considers everything that ever has bitten him as harmful:</p>\n\n<p>About switch fall through:</p>\n\n<blockquote>\n  <p>I never allow switch cases to fall\n  through to the next case. I once found\n  a bug in my code caused by an\n  unintended fall through immediately\n  after having made a vigorous speech\n  about why fall through was sometimes\n  useful. (page 97, ISBN\n  978-0-596-51774-8)</p>\n</blockquote>\n\n<p>About ++ and -- </p>\n\n<blockquote>\n  <p>The ++ (increment) and -- (decrement)\n  operators have been known to\n  contribute to bad code by encouraging\n  exessive trickiness. They are second\n  only to faulty architecture in\n  enabling viruses and other security\n  menaces. (page 122)</p>\n</blockquote>\n\n<p>About new:</p>\n\n<blockquote>\n  <p>If you forget to include the <em>new</em>\n  prefix when calling a constructor\n  function, then <em>this</em> will not be\n  bound to the new object. Sadly, <em>this</em>\n  will be bound to the global object, so\n  instead of augmenting your new object,\n  you will be clobbering global\n  variables. That is really bad. There\n  is no compile warning, and there is no\n  runtime warning. (page 49)</p>\n</blockquote>\n\n<p>There are more, but I hope you get the picture.</p>\n\n<p>My answer to your question: <strong>No, it's not harmful.</strong> but if you forget to use it when you should you could have some problems. If you are developing in a good environment you notice that.</p>\n\n<p><strong>Update</strong></p>\n\n<p>About a year after this answer was written the 5th edition of ECMAScript was released, with support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/Strict_mode\">strict mode</a>. In strict mode, <code>this</code> is no longer bound to the global object but to <code>undefined</code>.</p>\n",
                    "is_accepted": false,
                    "score": 134
                },
                {
                    "body": "<p>I think \"new\" adds clarity to the code. And clarity is worth everything. Good to know there are pitfalls, but avoiding them by avoiding clarity doesn't seem like the way for me.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Javascript being dynamic language there a zillion ways to mess up where another language would stop you.</p>\n\n<p>Avoiding a fundamental language feature such as <code>new</code> on the basis that you might mess up is a bit like removing your shiny new shoes before walking through a minefield just in case you might get your shoes muddy.</p>\n\n<p>I use a convention where function names begin with a lower case letter and 'functions' that are actually class definitions begin with a upper case letter.  The result is a really quite compelling visual clue that the 'syntax' is wrong:-</p>\n\n<pre><code>var o = MyClass();  // this is clearly wrong.\n</code></pre>\n\n<p>On top of this good naming habits help.  After all functions do things and therefore there should be a verb in its name whereas classes represent objects and are nouns and adjectives with no verb.</p>\n\n<pre><code>var o = chair() // Executing chair is daft.\nvar o = createChair() // makes sense.\n</code></pre>\n\n<p>Its interesting how SO's syntax colouring has interpretted the code above.</p>\n",
                    "is_accepted": false,
                    "score": 78
                },
                {
                    "body": "<p>I agree with pez and some here.</p>\n\n<p>It seems obvious to me that \"new\" is self descriptive object creation, where the YUI pattern Greg Dean describes is <em>completely obscured</em>. </p>\n\n<p>The possibility someone could write <code>var bar = foo;</code> or <code>var bar = baz();</code> where baz isn't an object creating method seems <em>far</em> more dangerous.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Crockford has done a lot to popularize good JavaScript techniques. His opinionated stance on key elements of the language have sparked many useful discussions. That said, there are far too many people that take each proclamation of \"bad\" or \"harmful\" as gospel, refusing to look beyond one man's opinion. It can be a bit frustrating at times.</p>\n\n<p>Use of the functionality provided by the <code>new</code> keyword has several advantages over building each object from scratch:</p>\n\n<ol>\n<li><a href=\"http://stackoverflow.com/questions/186244/what-does-it-mean-that-javascript-is-a-prototype-based-language\">Prototype inheritance</a>. While often looked at with a mix of suspicion and derision by those accustom to class-based OO languages, JavaScript's native inheritance technique is a simple and surprisingly effective means of code re-use. And the new keyword is the canonical (and only available cross-platform) means of using it.</li>\n<li>Performance. This is a side-effect of #1: if I want to add 10 methods to every object I create, I <em>could</em> just write a creation function that manually assigns each method to each new object... Or, I could assign them to the creation function's <code>prototype</code> and use <code>new</code> to stamp out new objects. Not only is this faster (no code needed for each and every method on the prototype), it avoids ballooning each object with separate properties for each method. On slower machines (or especially, slower JS interpreters) when many objects being created this can mean a significant savings in time and memory.</li>\n</ol>\n\n<p>And yes, <code>new</code> has one crucial disadvantage, ably described by other answers: if you forget to use it, your code will break without warning. Fortunately, that disadvantage is easily mitigated - simply add a bit of code to the function itself:</p>\n\n<pre><code>function foo()\n{\n   // if user accidentally omits the new keyword, this will \n   // silently correct the problem...\n   if ( !(this instanceof foo) )\n      return new foo();\n\n   // constructor logic follows...\n}\n</code></pre>\n\n<p>Now you can have the advantages of <code>new</code> without having to worry about problems caused by accidentally misuse. You could even add an assertion to the check if the thought of broken code silently working bothers you. Or, as <a href=\"http://stackoverflow.com/users/36866/some\">some</a> commented, use the check to introduce a runtime exception:</p>\n\n<pre><code>if ( !(this instanceof arguments.callee) ) \n   throw new Error(\"Constructor called as a function\");\n</code></pre>\n\n<p>(Note that this snippet is able to avoid hard-coding the constructor function name, as unlike the previous example it has no need to actually instantiate the object - therefore, it can be copied into each target function without modification.)</p>\n\n<p>John Resig goes into detail on this technique in his <a href=\"http://ejohn.org/blog/simple-class-instantiation/\">Simple \"Class\" Instantiation</a> post, as well as including a means of building this behavior into your \"classes\" by default. Definitely worth a read... as is his upcoming book, <a href=\"http://www.manning.com/resig/\">Secrets of the JavaScript Ninja</a>, which finds hidden gold in this and many other \"harmful\" features of the JavaScript language (the <strong>chapter</strong> on <code>with</code> is especially enlightening for those of us who initially dismissed this much-maligned feature as a gimmick).</p>\n",
                    "is_accepted": true,
                    "score": 451
                },
                {
                    "body": "<p>Another case <strong>for</strong> new is what I call <a href=\"http://old.robowiki.net/cgi-bin/robowiki?PoohCoding\">Pooh Coding</a>. Winnie the Pooh follows his tummy. I say go <strong>with</strong> the language you are using, not <strong>against</strong> it.</p>\n\n<p>Chances are that the maintainers of the language will optimize the language for the idioms they try to encourage. If they put a new keyword into the language they probably think it makes sense to be clear when creating a new instance.</p>\n\n<p>Code written following the language's intentions will increase in efficiency with each release. And code avoiding the key constructs of the language will suffer with time.</p>\n\n<p>EDIT: And this goes well beyond performance. I can't count the times I've heard (or said) \"why the hell did they do <strong>that</strong>?\" when finding strange looking code. It often turns out that at the time when the code was written there was some \"good\" reason for it. Following the Tao of the language is your best insurance for not having your code ridiculed some years from now.</p>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>I am newbie to Javascript so maybe I am just not too experienced in providing a good view point to this. Yet I want to share my view on this \"new\" thing.</p>\n\n<p>I have come from the C# world where using the keyword \"new\" is so natural that it is the factory design pattern that looks weird to me.</p>\n\n<p>When I first code in Javascript, I don't realize that there is the \"new\" keyword and code like the one in YUI pattern and it doesn't take me long to run into disaster. I lose track of what a particular line is supposed to be doing when looking back the code I've written. More chaotic is that my mind can't really transit between object instances boundaries when I am \"dry-running\" the code.</p>\n\n<p>Then, I found the \"new\" keyword which to me, it \"separate\" things. With the new keyword, it creates things. Without the new keyword, I know I won't confuse it with creating things unless the function I am invoking gives me strong clues of that. </p>\n\n<p>For instance, with <code>var bar=foo();</code> I have no clues as what bar could possibly be.... Is it a return value or is it a newly created object? But with <code>var bar = new foo();</code> I know for sure bar is an object.</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>I think new is evil, not because if you forget to use it by mistake it might cause problems but because it screws up the inheritance chain, making the language tougher to understand.</p>\n\n<p>JavaScript is prototype-based object-oriented. Hence every object MUST be created from another object like so <code>var newObj=Object.create(oldObj)</code>. Here <em>oldObj</em> is called the prototype of <em>newObj</em> (hence \"prototype-based\"). This implies that if a property is not found in <em>newObj</em> then it will be searched in <em>oldObj</em>.  <em>newObj</em> by default will thus be an empty object but due to its prototype chain it appears to have all the values of <em>oldObj</em>.</p>\n\n<p>On the other hand if you do <code>var newObj=new oldObj()</code>, the prototype of <em>newObj</em> is <em>oldObj.prototype</em>, which is unnecessarily difficult to understand.</p>\n\n<p>The trick is to use </p>\n\n<pre><code>Object.create=function(proto){\n  var F = function(){};\n  F.prototype = proto;\n  var instance = new F();\n  return instance;\n};\n</code></pre>\n\n<p>It is inside this function and only here that new should be used. After this simply use the <em>Object.create()</em> method. The method resolves the prototype problem.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h3>Case 1: <code>new</code> isn't required and should be avoided</h3>\n\n<pre><code>var str = new String('asd');  // type: object\nvar str = String('asd');      // type: string\n\nvar num = new Number(12);     // type: object\nvar num = Number(12);         // type: number\n</code></pre>\n\n<h3>Case 2: <code>new</code> is required, otherwise you'll get an error</h3>\n\n<pre><code>new Date().getFullYear();     // correct, returns the current year, i.e. 2010\nDate().getFullYear();         // invalid, returns an error\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Here is the briefest summary I could make of the two strongest arguments for and against using the <code>new</code> operator: </p>\n\n<h3>Argument against <code>new</code></h3>\n\n<ol>\n<li>Functions designed to be\ninstantiated as objects using the\n<code>new</code> operator can have disastrous\neffects if they are incorrectly\ninvoked as normal functions.  A\nfunction's code in such a case will\nbe executed in the scope where the\nfunction is called, instead of in\nthe scope of a local object as\nintended.  This can cause global\nvariables and properties to get\noverwritten with disastrous\nconsequences.</li>\n<li>Finally, writing <code>function Func()</code>,\nand then calling <code>Func.prototype</code>\nand adding stuff to it so that you\ncan call <code>new Func()</code> to construct\nyour object seems ugly to some\nprogrammers, who would rather use\nanother style of object inheritance\nfor architectural and stylistic\nreasons.</li>\n</ol>\n\n<p>For more on this argument check out Douglas Crockford's great and concise book Javascript: The Good Parts.  In fact check it out anyway.</p>\n\n<h3>Argument in favor of <code>new</code></h3>\n\n<ol>\n<li>Using the <code>new</code> operator along with\nprototypal assignment is fast.</li>\n<li>That stuff about accidentally\nrunning a constructor function's\ncode in the global namespace can\neasily be prevented if you always\ninclude a bit of code in your\nconstructor functions to check to\nsee if they are being called\ncorrectly, and, in the cases where\nthey aren't, handling the call\nappropriately as desired.</li>\n</ol>\n\n<p>See <a href=\"http://ejohn.org/blog/simple-class-instantiation/\">John Resig's post</a> for a simple explanation of this technique, and for a generally deeper explanation of the inheritance model he advocates. </p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I wrote a post on how to mitigate the problem of calling a constructor without the new keyword.<br>\nIt's mostly didactic, but it shows how you can create constructors that work with or without <code>new</code> and doesn't require you to add <a href=\"http://en.wikipedia.org/wiki/Boilerplate_code\" rel=\"nofollow\">boilerplate code</a> to test <code>this</code> in every constructor. </p>\n\n<p><a href=\"http://js-bits.blogspot.com/2010/08/constructors-without-using-new.html\" rel=\"nofollow\">http://js-bits.blogspot.com/2010/08/constructors-without-using-new.html</a></p>\n\n<p>Here's the gist of the technique:</p>\n\n<pre><code>/**\n * Wraps the passed in constructor so it works with\n * or without the new keyword\n * @param {Function} realCtor The constructor function.\n *    Note that this is going to be wrapped\n *    and should not be used directly \n */\nfunction ctor(realCtor){\n  // This is going to be the actual constructor\n  return function wrapperCtor(){\n    var obj; // object that will be created\n    if (this instanceof wrapperCtor) {\n      // Called with new\n      obj = this;\n    } else {\n      // Called without new. Create an empty object of the\n      // correct type without running that constructor\n      surrogateCtor.prototype = wrapperCtor.prototype;\n      obj = new surrogateCtor();\n    }\n    // Call the real constructor function\n    realCtor.apply(obj, arguments);\n    return obj;\n  }\n\n  function surrogateCtor() {}\n}\n</code></pre>\n\n<p>Here's how to use it:</p>\n\n<pre><code>// Create our point constructor\nPoint = ctor(function(x,y){\n  this.x = x;\n  this.y = y;\n});\n\n// This is good\nvar pt = new Point(20,30);\n// This is OK also\nvar pt2 = Point(20,30);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                }
            ],
            "body": "<p>In another <a href=\"http://stackoverflow.com/questions/377716/javascript-automatic-gettersetters-john-resig-book\">question</a>, a user pointed out that the <code>new</code> keyword was dangerous to use and proposed a solution to object creation that did not use <code>new</code>. I didn't believe that was true, mostly because I've used Prototype, Scriptaculous and other excellent JavaScript libraries, and everyone of them used the <code>new</code> keyword.</p>\n\n<p>In spite of that, yesterday I was watching Douglas Crockford's talk at YUI theater and he said the exactly same thing, that he didn't use the <code>new</code> keyword anymore in his code (<a href=\"http://www.youtube.com/watch?v=ya4UHuXNygM&amp;t=50m23s\" rel=\"nofollow\">Crockford on JavaScript - Act III: Function the Ultimate - 50:23 minutes</a>).</p>\n\n<p>Is it 'bad' to use the <code>new</code> keyword? What are the advantages and disadvantages of using it?</p>\n",
            "last_activity_date": 1423039967,
            "question_id": 383402,
            "score": 401,
            "tags": [
                "javascript"
            ],
            "title": "Is JavaScript&#39;s &quot;new&quot; keyword considered harmful?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>No jQuery needed...  <strong><a href=\"http://jsfiddle.net/KBYvL/1/\">Working Example</a></strong></p>\n\n<pre><code>var arr2 = arr1.slice()\n</code></pre>\n\n<p>This copys the array from the starting position <code>0</code> through the end of the array.</p>\n\n<p>It is important to note that it will work as expected for primitive types (string, number, etc.), and to also explain the expected behavior for reference types...</p>\n\n<p>If you have an array of Reference types, say of type <code>Object</code>.  The array <strong>will</strong> be copied, but both of the arrays will contain references to the same <code>Object</code>'s.  So in this case it would seem like the array is copied by reference even though the array <strong>is actually copied.</strong></p>\n",
                    "is_accepted": false,
                    "score": 80
                },
                {
                    "body": "<p>Use this:</p>\n\n<p><code>var newArray = oldArray.slice();</code></p>\n\n<p>Basically, the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice\">slice()</a> operation clones the array and returns the reference to the new array.  Also note that:</p>\n\n<ul>\n<li>For object references (and not the actual object), slice copies object references into the new array. Both the original and new array refer to the same object. If a referenced object changes, the changes are visible to both the new and original arrays.</li>\n<li>For strings and numbers, slice copies strings and numbers into the new array. Changes to the string or number in one array does not affect the other array. </li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 609
                },
                {
                    "body": "<p>if you want to make a new copy of an object or array, you must explicitly copy the properties of the object or the elements of the array, for example:</p>\n\n<pre><code>var arr1 = ['a','b','c'];\nvar arr2 = [];\n\nfor (var i=0; i &lt; arr1.length; i++) {\n   arr2[i] = arr1[i];\n}\n</code></pre>\n\n<p>You can search for more information in google about immutable primitive values and mutalbe object references.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have used this in the past:</p>\n\n<pre><code>var array2 = [].concat(array1);\n</code></pre>\n\n<p>I feel this is just as good as using slice but more readable, so I'm not sure why it hasn't been suggested. Maybe I'm missing a downside?</p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>The above mentioned methods work well when working with simple data types like number or string, but when the array contains other objects these methods fail. When we try to pass any object from one array to another it is passed as a reference not the object.</p>\n\n<p>Add following code in your js file:</p>\n\n<pre><code>Object.prototype.clone = function() {\n  var newObj = (this instanceof Array) ? [] : {};\n  for (i in this) {\n    if (i == 'clone') continue;\n    if (this[i] &amp;&amp; typeof this[i] == \"object\") {\n      newObj[i] = this[i].clone();\n    } else newObj[i] = this[i]\n  } return newObj;\n};\n</code></pre>\n\n<p>and simply use </p>\n\n<pre><code>var arr1 = ['val_1','val_2','val_3'];\nvar arr2 = arr1.clone()\n</code></pre>\n\n<p>It will work.  </p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Here's a variant:</p>\n\n<pre><code>var arr1=['a', 'b', 'c'];\nvar arr2=eval(arr1.toSource());\narr2.push('d');\nconsole.log('arr1: '+arr1+'\\narr2: '+arr2);\n/*\n *  arr1: a,b,c\n *  arr2: a,b,c,d\n */\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Adding to the solution of <strong>array.slice();</strong> be aware that if you have <strong>multidimensional array</strong> sub-arrays will be copied by references.\nWhat you can do is to loop and slice() each sub-array individually  </p>\n\n<pre><code>var arr = [[1,1,1],[2,2,2],[3,3,3]];\nvar arr2 = arr.slice();\n\narr2[0][1] = 55;\nconsole.log(arr2[0][1]);\nconsole.log(arr[0][1]);\n\nfunction arrCpy(arrSrc, arrDis){\n for(elm in arrSrc){\n  arrDis.push(arrSrc[elm].slice());\n}\n}\n\nvar arr3=[];\narrCpy(arr,arr3);\n\narr3[1][1] = 77;\n\nconsole.log(arr3[1][1]);\nconsole.log(arr[1][1]);\n</code></pre>\n\n<p>same things goes to array of objects, they will be copied by reference, you have to copy them manually</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This is how i've done it after trying many approaches :</p>\n\n<pre><code>var newArray = JSON.parse(JSON.stringify(orgArray));\n</code></pre>\n\n<p>this will create a new deep copy not related to the first one (not a shallow copy).</p>\n\n<p>also this obviously will not clone events and functions, but the good thing you can do it in one line and it can be used for any king of object (arrays, strings, numbers, objects ...)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Javascript provides several different types of arrays (at least 5 types).</p>\n\n<pre><code>var type1 = ['a', 'b']; // Array of Strings\nvar type2 = [1, 2]; // Array of Numbers\nvar type3 = [['a'], ['b']]; // Array of Arrays\nvar type4 = [{a: 'a'} , {b: 'b'}]; // Array of Object-Literals\nvar type5 = [{a: function () {}}, {b: function () {}}]; // Array of Objects\n</code></pre>\n\n<p>Depending on the array-type, various techniques (like .splice, .concat, JSON, $.extend, etc.) can be used to deep-copy an array.</p>\n\n<pre><code>myArray.splice(0);\nmyArray.concat();\nJSON.parse(JSON.stringify(myArray));\n$.extend(true, [], myArray); // jQuery\n_.extend(); // underscore\n_.cloneDeep(); // lo-dash\n</code></pre>\n\n<p>However, most techniques won't deep-copy all array-types. </p>\n\n<p><strong>Deep-copy support for various techniques (by array-type)</strong>\n<img src=\"http://i.stack.imgur.com/r1XjZ.png\" alt=\"Deep-copy technique by array-type\">  </p>\n\n<ul>\n<li>Splice and Concat can be used to deep copy an Array of Strings, and an Array of Numbers; where Splice has better performance than Concat. <a href=\"http://jsperf.com/duplicate-array-slice-vs-concat/3\">http://jsperf.com/duplicate-array-slice-vs-concat/3</a> </li>\n<li>JSON.parse(JSON.stringify()) can be used to deep copy an Array of Strings, an Array of Numbers, an Array of Arrays, and an Array of Object Literals - but not an Array of Prototype Objects.  </li>\n<li>jQuery $.extend() can be used to deep-copy any array-type. Other libraries like underscore and lo-dash offer similar deep-copy functions, however they provide slower performance as well. More surprisingly, $.extend also has better performance than JSON.parse(JSON.stringify()) <a href=\"http://jsperf.com/js-deep-copy/2\">http://jsperf.com/js-deep-copy/2</a>,  </li>\n</ul>\n\n<h2>Deep-copy any array-type (without 3rd party library):</h2>\n\n<p>And for those developers that shy away from 3rd party libraries (like jQuery), the following custom function can be used instead. It has faster performance than $.extend, and deep-copies all array-types.</p>\n\n<pre><code>function copy(o) {\n   var out, v, key;\n   out = Array.isArray(o) ? [] : {};\n   for (key in o) {\n       v = o[key];\n       out[key] = (typeof v === \"object\") ? copy(v) : v;\n   }\n   return out;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>In my particular case I needed to ensure the array remained intact so this worked for me:</p>\n\n<pre><code>// Empty array\narr1.length = 0;\n// Add items from source array to target array\nfor (var i = 0, i &lt; arr2.length; i++) {\n    arr1.push(arr2[i]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Make copy of multidimensional array/object:</p>\n\n<pre><code>function deepCopy(obj) {\n   if (Object.prototype.toString.call(obj) === '[object Array]') {\n      var out = [], i = 0, len = obj.length;\n      for ( ; i &lt; len; i++ ) {\n         out[i] = arguments.callee(obj[i]);\n      }\n      return out;\n   }\n   if (typeof obj === 'object') {\n      var out = {}, i;\n      for ( i in obj ) {\n         out[i] = arguments.callee(obj[i]);\n      }\n      return out;\n   }\n   return obj;\n}\n</code></pre>\n\n<p>Thanks to James Padolsey for this function.</p>\n\n<p>Source: <a href=\"http://james.padolsey.com/javascript/deep-copying-of-objects-and-arrays/\" rel=\"nofollow\">http://james.padolsey.com/javascript/deep-copying-of-objects-and-arrays/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There's the newly introduced <code>Array.from</code>, but unfortunately, as of the time of this writing it's only supported on recent Firefox versions (32 and higher). It can be simply used as follows:</p>\n\n<pre><code>var arr1 = [1, 2, 3];\nconsole.log(Array.from(arr1)); // Logs: [1, 2, 3]\n</code></pre>\n\n<p>Reference: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from</a></p>\n\n<p>Or <code>Array.prototype.map</code> may be used with an identity function:</p>\n\n<pre><code>function identity(param)\n{\n    return param;\n}\n\nvar arr1 = [1, 2, 3],\n    clone = arr1.map(identity);\n</code></pre>\n\n<p>Reference: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>When copying an array in javascript to another array:</p>\n\n<pre><code>var arr1 = ['a','b','c'];\nvar arr2 = arr1;\narr2.push('d');  //now, arr1 = ['a','b','c','d']\n</code></pre>\n\n<p>I realized that <code>arr2</code> refers to the same array as <code>arr1</code>, rather than a new, independent array. How can I copy the array to get two independent arrays? Using jQuery would be great.</p>\n",
            "last_activity_date": 1420831274,
            "question_id": 7486085,
            "score": 333,
            "tags": [
                "javascript",
                "arrays"
            ],
            "title": "Copying array by value in javascript"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p><a href=\"http://jquery.com/\" rel=\"nofollow\">jQuery's</a> <a href=\"http://docs.jquery.com/Events/ready#fn\" rel=\"nofollow\">ready</a> event was created for just this sort of issue.  You may want to dig into the implementation to see what is going on under the covers.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Bill, I dare answer your question, however I am not 100% sure with my guesses. I think other then IE browsers when taking user to a page in history will not only load the page and its resources from cache but they will also restore the entire DOM (read session) state for it. IE doesn't do DOM restoration (or at lease did not do) and thus the onload event looks to be necessary for proper page re-initialization there.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I can confirm ckramer that jQuery's ready event works in IE and FireFox.  Here's a sample:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Test Page&lt;/title&gt;\n    &lt;script src=\"http://code.jquery.com/jquery-latest.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n            $(document).ready(function () {\n               var d = new Date();\n               $('#test').html( \"Hi at \" + d.toString() );\n            });\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"test\"&gt;&lt;/div&gt;\n    &lt;div&gt;\n        &lt;a href=\"http://www.google.com\"&gt;Go!&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>OK, I tried this and it works in Firefox 3, Safari 3.1.1, and IE7 but <strong>not</strong> in Opera 9.52.<br />\nIf you use the example shown below (based on palehorse's example), you get an alert box pop-up when the page first loads.  But if you then go to another URL, and then hit the Back button to go back to this page, you don't get an alert box pop-up in Opera (but you do in the other browsers).</p>\n\n<p>Anyway, I think this is close enough for now.  Thanks everyone!</p>\n\n<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;\n&lt;title&gt;Untitled Document&lt;/title&gt;\n&lt;meta http-equiv=\"expires\" content=\"0\"&gt;\n&lt;script src=\"jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n$(document).ready( \n                    function(){\n                      alert('test');\n                    }\n                 );\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;h1&gt;Test of the page load event and the Back button using jQuery&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>OK, here is a final solution based on ckramer's initial solution and palehorse's example that works in all of the browsers, including Opera.  If you set history.navigationMode to 'compatible' then jQuery's ready function will fire on Back button operations in Opera as well as the other major browsers.</p>\n\n<p>This page has <a href=\"http://web.archive.org/web/20080213182127/http://www.opera.com/support/search/view/827/\" rel=\"nofollow\">more information</a>.</p>\n\n<p>Example:</p>\n\n<pre><code>history.navigationMode = 'compatible';\n$(document).ready(function(){\n  alert('test');\n});\n</code></pre>\n\n<p>I tested this in Opera 9.5, IE7, FF3 and Safari and it works in all of them.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Guys, I found that JQuery has only one effect: the page is reloaded when the back button is pressed. This has nothing to do with \"<strong>ready</strong>\".</p>\n\n<p>How does this work? Well, JQuery adds an <strong>onunload</strong> event listener.</p>\n\n<pre><code>// http://code.jquery.com/jquery-latest.js\njQuery(window).bind(\"unload\", function() { // ...\n</code></pre>\n\n<p>By default, it does nothing. But somehow this seems to trigger a reload in Safari, Opera and Mozilla -- no matter what the event handler contains.</p>\n\n<p>[<em>edit(Nickolay)</em>: here's why it works that way: <a href=\"http://webkit.org/blog/516/webkit-page-cache-ii-the-unload-event/\">webkit.org</a>, <a href=\"https://developer.mozilla.org/En/Using_Firefox_1.5_caching\">developer.mozilla.org</a>. Please read those articles (or my summary in a separate answer below) and consider whether you <em>really</em> need to do this and make your page load slower for your users.]</p>\n\n<p>Can't believe it? Try this:</p>\n\n<pre><code>&lt;body onunload=\"\"&gt;&lt;!-- This does the trick --&gt;\n&lt;script type=\"text/javascript\"&gt;\n    alert('first load / reload');\n    window.onload = function(){alert('onload')};\n&lt;/script&gt;\n&lt;a href=\"http://stackoverflow.com\"&gt;click me, then press the back button&lt;/a&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>You will see similar results when using JQuery.</p>\n\n<p>You may want to compare to this one without <strong>onunload</strong></p>\n\n<pre><code>&lt;body&gt;&lt;!-- Will not reload on back button --&gt;\n&lt;script type=\"text/javascript\"&gt;\n    alert('first load / reload');\n    window.onload = function(){alert('onload')};\n&lt;/script&gt;\n&lt;a href=\"http://stackoverflow.com\"&gt;click me, then press the back button&lt;/a&gt;\n&lt;/body&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 91
                },
                {
                    "body": "<p>If I remember rightly, then adding an unload() event means that page cannot be cached (in forward/backward cache) - because it's state changes/may change when user navigates away. So - it is not safe to restore the last-second state of the page when returning to it by navigating through history object.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The modern browsers (Firefox, Safari/Chrome, and Opera) all support the special \"back/forward\" cache (I'll call it bfcache, which is a term invented by Mozilla), involved when the user navigates Back. Unlike the regular (HTTP) cache, it captures the complete state of the page (including the state of JS, DOM). This allows it to re-load the page quicker and exactly as the user left it.</p>\n\n<p>The <code>load</code> event is not supposed to fire when the page is loaded from this bfcache. For example, if you created your UI in the \"load\" handler, and the \"load\" event was fired once on the initial load, and the second time when the page was re-loaded from the bfcache, the page would end up with duplicate UI elements.</p>\n\n<p>This is also why adding the \"unload\" handler stops the page from being stored in the bfcache (thus making it slower to navigate back to) -- the unload handler could perform clean-up tasks, which could leave the page in unworkable state.</p>\n\n<p>For pages that need to know when they're being navigated away/back to, Firefox 1.5+ and the version of Safari with the fix for <a href=\"https://bugs.webkit.org/show_bug.cgi?id=28758\">bug 28758</a> support special events called \"pageshow\" and \"pagehide\".</p>\n\n<p>References: <a href=\"http://webkit.org/blog/516/webkit-page-cache-ii-the-unload-event/\">http://webkit.org/blog/516/webkit-page-cache-ii-the-unload-event/</a> and <a href=\"https://developer.mozilla.org/En/Using_Firefox_1.5_caching\">https://developer.mozilla.org/En/Using_Firefox_1.5_caching</a>.</p>\n",
                    "is_accepted": false,
                    "score": 60
                },
                {
                    "body": "<p>I ran into a problem that my js was not executing when the user had clicked back or forward. I first set out to stop the browser from caching, but this didn't seem to be the problem. My javascript was set to execute after all of the libraries etc. were loaded. I checked these with the readyStateChange event.</p>\n\n<p>After some testing I found out that the readyState of an element in a page where back has been clicked is not 'loaded' but 'complete'. Adding <code>|| element.readyState == 'complete'</code> to my conditional statement solved my problems.</p>\n\n<p>Just thought I'd share my findings, hopefully they will help someone else.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>I tried the solution from Bill using $(document).ready...  but at first it did not work. I discovered that if the script is placed after the html section, it will not work. If it is the head section it will work but only in IE. The script does not work in Firefox.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>for the people who don't want to use the whole jquery library i extracted the implementation in separate code. It's only 0,4 KB big.</p>\n\n<p>You can find the code, together with a german tutorial in this wiki: <a href=\"http://web.archive.org/web/20130417092220/http://www.easy-coding.de/wiki/html-ajax-und-co/onload-event-cross-browser-kompatibler-domcontentloaded.html\" rel=\"nofollow\">http://www.easy-coding.de/wiki/html-ajax-und-co/onload-event-cross-browser-kompatibler-domcontentloaded.html</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I thought this would be for \"onunload\", not page load, since aren't we talking about firing an event when hitting \"Back\"?  $document.ready() is for events desired on page load, no matter how you get to that page (i.e. redirect, opening the browser to the URL directly, etc.), not when clicking \"Back\", unless you're talking about what to fire on the previous page when it loads again.  And I'm not sure the page isn't getting cached as I've found that Javascripts still are, even when $document.ready() is included in them.  We've had to hit Ctrl+F5 when editing our scripts that have this event whenever we revise them and we want test the results in our pages.</p>\n\n<pre><code>$(window).unload(function(){ alert('do unload stuff here'); }); \n</code></pre>\n\n<p>is what you'd want for an onunload event when hitting \"Back\" and unloading the current page, and would also fire when a user closes the browser window.  This sounded more like what was desired, even if I'm outnumbered with the $document.ready() responses.  Basically the difference is between an event firing on the current page while it's closing or on the one that loads when clicking \"Back\" as it's loading.  Tested in IE 7 fine, can't speak for the other browsers as they aren't allowed where we are.  But this might be another option.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Unload event is not working fine on IE 9. I tried it with load event (onload()), it is working fine on <strong>IE 9</strong> and <strong>FF5</strong>.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>&lt;%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n    pageEncoding=\"ISO-8859-1\"%&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"&gt;\n&lt;title&gt;Insert title here&lt;/title&gt;\n&lt;script type=\"text/javascript\" src=\"jquery.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n    jQuery(window).bind(\"load\", function() {\n        $(\"[name=customerName]\").val('');\n    });\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;body.jsp&lt;/h1&gt;\n    &lt;form action=\"success.jsp\"&gt;\n        &lt;div id=\"myDiv\"&gt;\n\n        Your Full Name: &lt;input name=\"yourName\" id=\"fullName\"\n            value=\"Your Full Name\" /&gt;&lt;br&gt; &lt;br&gt; &lt;input type=\"submit\"&gt;&lt;br&gt;\n\n        &lt;/div&gt;\n\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I couldn't get the above examples to work. I simply wanted to trigger a refresh of certain modified div areas when coming back to the page via the back button. The trick I used was to set a hidden input field (called a \"dirty bit\") to 1 as soon as the div areas changed from the original. The hidden input field actually retains its value when I click back, so onload I can check for this bit. If it's set, I refresh the page (or just refresh the divs). On the original load, however, the bit is not set, so I don't waste time loading the page twice.</p>\n\n<pre><code>&lt;input type='hidden' id='dirty'&gt;\n\n&lt;script&gt;\n$(document).ready(function() {\n  if ($('#dirty').val()) {\n    // ... reload the page or specific divs only\n  }\n  // when something modifies a div that needs to be refreshed, set dirty=1\n  $('#dirty').val('1');\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>And it would trigger properly whenever I clicked the back button.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>For all major browsers (except IE), the JavaScript onload event doesn't fire when the page loads as a result of a Back button operation - it only fires when the page is first loaded.</p>\n\n<p>Can someone point me at some sample cross-browser code (Firefox, Opera, Safari, IE ...) that solves this problem?  I'm familiar with Firefox's pageshow event but unfortunately neither Opera or Safari implement this.</p>\n",
            "last_activity_date": 1420443939,
            "question_id": 158319,
            "score": 137,
            "tags": [
                "javascript"
            ],
            "title": "Cross-browser onload event and the Back button"
        },
        {
            "answer_count": 29,
            "answers": [
                {
                    "body": "<p>Depends on what you mean by equality. And therefore it is up to you, as the developer of the classes, to define their equality.</p>\n\n<p>There's one case used sometimes, where two instances are considered 'equal' if they point to the same location in memory, but that is not always what you want. For instance, if I have a Person class, I might want to consider two Person objects 'equal' if they have the same Last Name, First Name, and Social Security Number (even if they point to different locations in memory).</p>\n\n<p>On the other hand, we can't simply say that two objects are equal if the value of each of their members is the same, since, sometimes, you don't want that. In other words, for each class, it's up to the class developer to define what members make up the objects 'identity' and develop a proper equality operator (be it via overloading the == operator or an Equals method).</p>\n\n<p>Saying that two objects are equal if they have the same hash is one way out. However you then have to wonder how the hash is calculated for each instance. Going back to the Person example above, we could use this system if the hash was calculated by looking at the values of the First Name, Last Name, and Social Security Number fields. On top of that, we are then relying on the quality of the hashing method (that's a huge topic on its own, but suffice it to say that not all hashes are created equal, and bad hashing methods can lead to <em>more</em> collisions, which in this case would return false matches).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Are you trying to test if two objects are the equal? ie: their properties are equal?</p>\n\n<p>If this is the case, you'll probably have noticed this situation:</p>\n\n<pre><code>var a = { foo : \"bar\" };\nvar b = { foo : \"bar\" };\nalert (a == b ? \"Equal\" : \"Not equal\");\n// \"Not equal\"\n</code></pre>\n\n<p>you might have to do something like this:</p>\n\n<pre><code>function objectEquals(obj1, obj2) {\n    for (var i in obj1) {\n        if (obj1.hasOwnProperty(i)) {\n            if (!obj2.hasOwnProperty(i)) return false;\n            if (obj1[i] != obj2[i]) return false;\n        }\n    }\n    for (var i in obj2) {\n        if (obj2.hasOwnProperty(i)) {\n            if (!obj1.hasOwnProperty(i)) return false;\n            if (obj1[i] != obj2[i]) return false;\n        }\n    }\n    return true;\n}\n</code></pre>\n\n<p>Obviously that function could do with quite a bit of optimisation, and the ability to do deep checking (to handle nested objects: <code>var a = { foo : { fu : \"bar\" } }</code>) but you get the idea.</p>\n\n<p>As FOR <a href=\"#201249\">pointed out</a>, you might have to adapt this for your own purposes, eg: different classes may have different definitions of \"equal\". If you're just working with plain objects, the above may suffice, otherwise a custom <code>MyClass.equals()</code> function may be the way to go.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>If you are using a JSON library, you can encode each object as JSON, then compare the resulting strings for equality.</p>\n\n<pre><code>var obj1={test:\"value\"};\nvar obj2={test:\"value2\"};\n\nalert(JSON.encode(obj1)===JSON.encode(obj2));\n</code></pre>\n\n<p><strong>NOTE: While this answer will work in many cases, as several people have pointed out in the comments it's problematic for a variety of reasons. In pretty much all cases you'll want to find a more robust solution.</strong></p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p><strong>The short answer</strong></p>\n\n<p>The simple answer is: No, there is no generic means to determine that an object is equal to another in the sense you mean. The exception is when you are strictly thinking of an object being typeless.</p>\n\n<p><strong>The long answer</strong></p>\n\n<p>The concept is that of an Equals method that compares two different instances of an object to indicate whether they are equal at a value level. However, it is up to the specific type to define how an <code>Equals</code> method should be implemented. An iterative comparison of attributes that have primitive values may not be enough, there may well be attributes which are not to be considered part of the object value. For example,</p>\n\n<pre><code> function MyClass(a, b)\n {\n     var c;\n     this.getCLazy = function() {\n         if (c === undefined) c = a * b // imagine * is really expensive\n         return c;\n     }\n  }\n</code></pre>\n\n<p>In this above case, <code>c</code> is not really important to determine whether any two instances of MyClass are equal, only <code>a</code> and <code>b</code> are important. In some cases <code>c</code> might vary between instances and yet not be significant during comparison. </p>\n\n<p>Note this issue applies when members may themselves also be instances of a type and these each would all be required to have a means of determining equality.</p>\n\n<p>Further complicating things is that in JavaScript the distinction between data and method is blurred.</p>\n\n<p>An object may reference a method that is to be called as an event handler, and this would likely not be considered part of its 'value state'. Whereas another object may well be assigned a function that performs an important calculation and thereby makes this instance different from others simply because it references a different function.</p>\n\n<p>What about an object that has one of its existing prototype methods overridden by another function? Could it still be considered equal to another instance that it otherwise identical? That question can only be answered in each specific case for each type.</p>\n\n<p>As stated earlier, the exception would be a strictly typeless object. In which case the only sensible choice is an iterative and recursive comparison of each member. Even then one has to ask what is the 'value' of a function?</p>\n",
                    "is_accepted": true,
                    "score": 57
                },
                {
                    "body": "<p>I'd advise against hashing or serialization (as the JSON solution suggest).  If you need to test if two objects are equal, then you need to define what equals means.  It could be that all data members in both objects match, or it could be that must the memory locations match (meaning both variables reference the same object in memory), or may be that only one data member in each object must match.</p>\n\n<p>Recently I developed an object whose constructor creates a new id (starting from 1 and incrementing by 1) each time an instance is created.  This object has an isEqual function that compares that id value with the id value of another object and returns true if they match.</p>\n\n<p>In that case I defined \"equal\" as meaning the the id values match.  Given that each instance has a unique id this could be used to enforce the idea that matching objects also occupy the same memory location.  Although that is not necessary.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The default equality operator in JavaScript for Objects yields true when they refer to the same location in memory.</p>\n\n<pre><code>var x = {};\nvar y = {};\nvar z = x;\n\nx === y; // =&gt; false\nx === z; // =&gt; true\n</code></pre>\n\n<p>If you require a different equality operator you'll need to add an <code>equals(other)</code> method, or something like it to your classes and the specifics of your problem domain will determine what exactly that means.</p>\n\n<p>Here's a playing card example:</p>\n\n<pre><code>function Card(rank, suit) {\n  this.rank = rank;\n  this.suit = suit;\n  this.equals = function(other) {\n     return other.rank == this.rank &amp;&amp; other.suit == this.suit;\n  };\n}\n\nvar queenOfClubs = new Card(12, \"C\");\nvar kingOfSpades = new Card(13, \"S\");\n\nqueenOfClubs.equals(kingOfSpades); // =&gt; false\nkingOfSpades.equals(new Card(13, \"S\")); // =&gt; true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 91
                },
                {
                    "body": "<p>I need to mock jQuery POST requests, so the equality that matters to me is that both objects have the same set of properties (none missing in either object), and that each property value is \"equal\" (according to this definition).  I don't care about the objects having mismatching methods.</p>\n\n<p>Here's what I'll be using, it should be good enough for <em>my specific</em> requirements:</p>\n\n<pre><code>function PostRequest() {\n    for (var i = 0; i &lt; arguments.length; i += 2) {\n        this[arguments[i]] = arguments[i+1];\n    }\n\n    var compare = function(u, v) {\n        if (typeof(u) != typeof(v)) {\n            return false;\n        }\n\n        var allkeys = {};\n        for (var i in u) {\n            allkeys[i] = 1;\n        }\n        for (var i in v) {\n            allkeys[i] = 1;\n        }\n        for (var i in allkeys) {\n            if (u.hasOwnProperty(i) != v.hasOwnProperty(i)) {\n                if ((u.hasOwnProperty(i) &amp;&amp; typeof(u[i]) == 'function') ||\n                    (v.hasOwnProperty(i) &amp;&amp; typeof(v[i]) == 'function')) {\n                    continue;\n                } else {\n                    return false;\n                }\n            }\n            if (typeof(u[i]) != typeof(v[i])) {\n                return false;\n            }\n            if (typeof(u[i]) == 'object') {\n                if (!compare(u[i], v[i])) {\n                    return false;\n                }\n            } else {\n                if (u[i] !== v[i]) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    };\n\n    this.equals = function(o) {\n        return compare(this, o);\n    };\n\n    return this;\n}\n</code></pre>\n\n<p>Use like so:</p>\n\n<pre><code>foo = new PostRequest('text', 'hello', 'html', '&lt;p&gt;hello&lt;/p&gt;');\nfoo.equals({ html: '&lt;p&gt;hello&lt;/p&gt;', text: 'hello' });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Needing a more generic object comparison function than had been posted, I cooked up the following. Critique appreciated...</p>\n\n<pre><code>Object.prototype.equals = function(iObj) {\n  if (this.constructor !== iObj.constructor)\n    return false;\n  var aMemberCount = 0;\n  for (var a in this) {\n    if (!this.hasOwnProperty(a))\n      continue;\n    if (typeof this[a] === 'object' &amp;&amp; typeof iObj[a] === 'object' ? !this[a].equals(iObj[a]) : this[a] !== iObj[a])\n      return false;\n    ++aMemberCount;\n  }\n  for (var a in iObj)\n    if (iObj.hasOwnProperty(a))\n      --aMemberCount;\n  return aMemberCount ? false : true;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Why reinvent the wheel? Give <a href=\"http://lodash.com/docs#isEqual\">Lodash</a> a try. It has a number of must-have functions such as <a href=\"http://lodash.com/docs#isEqual\">isEqual()</a>.</p>\n\n<pre><code>_.isEqual(object, other);\n</code></pre>\n\n<p>It will brute force check each key value - just like the other examples on this page - using <a href=\"http://en.wikipedia.org/wiki/ECMAScript#Versions\">ECMAScript&nbsp;5</a> and native optimizations if they're available in the browser.</p>\n\n<p>Note: Previously this answer recommended <a href=\"http://documentcloud.github.com/underscore\">Underscore.js</a>, but <a href=\"http://lodash.com\">lodash</a> has done a better job of getting bugs fixed and addressing issues with consistency.</p>\n",
                    "is_accepted": false,
                    "score": 172
                },
                {
                    "body": "<p>It's useful to consider two objects equal if they have all the same values for all properties and recursively for all nested objects and arrays.  I also consider the following two objects equal:</p>\n\n<pre><code>var a = {p1: 1};\nvar b = {p1: 1, p2: undefined};\n</code></pre>\n\n<p>Similarly, arrays can have \"missing\" elements and undefined elements.  I would treat those the same as well:</p>\n\n<pre><code>var c = [1, 2];\nvar d = [1, 2, undefined];\n</code></pre>\n\n<p>A function that implements this definition of equality:</p>\n\n<pre><code>function isEqual(a, b) {\n    if (a === b) {\n        return true;\n    }\n\n    if (generalType(a) != generalType(b)) {\n        return false;\n    }\n\n    if (a == b) {\n        return true;\n    }\n\n    if (typeof a != 'object') {\n        return false;\n    }\n\n    // null != {}\n    if (a instanceof Object != b instanceof Object) {\n        return false;\n    }\n\n    if (a instanceof Date || b instanceof Date) {\n        if (a instanceof Date != b instanceof Date ||\n            a.getTime() != b.getTime()) {\n            return false;\n        }\n    }\n\n    var allKeys = [].concat(keys(a), keys(b));\n    uniqueArray(allKeys);\n\n    for (var i = 0; i &lt; allKeys.length; i++) {\n        var prop = allKeys[i];\n        if (!isEqual(a[prop], b[prop])) {\n            return false;\n        }\n    }\n    return true;\n}\n</code></pre>\n\n<p><a href=\"http://code.google.com/p/pageforest/source/browse/appengine/static/src/js/base.js\" rel=\"nofollow\">Source code</a> (including the helper functions, generalType and uniqueArray):\n<a href=\"http://code.google.com/p/pageforest/source/browse/appengine/static/src/js/tests/test-base.js\" rel=\"nofollow\">Unit Test</a> and <a href=\"http://pageforest.googlecode.com/hg/appengine/static/src/js/tests/test-runner.html#base\" rel=\"nofollow\">Test Runner here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you have a deep copy function handy, you can use the following trick to <em>still</em> use <code>JSON.stringify</code> while matching the order of properties:</p>\n\n<pre><code>function equals(obj1, obj2) {\n    function _equals(obj1, obj2) {\n        return JSON.stringify(obj1)\n            === JSON.stringify($.extend(true, {}, obj1, obj2));\n    }\n    return _equals(obj1, obj2) &amp;&amp; _equals(obj2, obj1);\n}\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/CU3vb/3/\">http://jsfiddle.net/CU3vb/3/</a></p>\n\n<p>Rationale:</p>\n\n<p>Since the properties of <code>obj1</code> are copied to the clone one by one, their order in the clone will be preserved. And when the properties of <code>obj2</code> are copied to the clone, since properties already existing in <code>obj1</code> will simply be overwritten, their orders in the clone will be preserved.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I've written a small library that runs on Node.js and the browser called compare.js. It offers the usual comparison operators, such as ==, !=, >, >=, &lt;, &lt;= and identity on all data types of JavaScript.</p>\n\n<p>E.g., you can use</p>\n\n<pre><code>cmp.eq(obj1, obj2);\n</code></pre>\n\n<p>and this will check for equality (using a deep-equal approach). Otherwise, if you do</p>\n\n<pre><code>cmp.id(obj1, obj2);\n</code></pre>\n\n<p>it will compare by reference, hence check for identity.\nYou can also use &lt; and > on objects, which mean subset and superset.</p>\n\n<p>compare.js is covered by nearly 700 unit tests, hence it should hopefully not have too many bugs ;-).</p>\n\n<p>You can find it on <a href=\"https://github.com/goloroden/compare.js\" rel=\"nofollow\">https://github.com/goloroden/compare.js</a> for free, it is open-sourced under the MIT license.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A quick \"hack\" to tell if two objects are similar, is to use their toString() methods. If you're checking objects A and B, make sure A and B have meaningful toString() methods and check that the strings they return are the same.</p>\n\n<p>This isn't a panacea, but it can be useful sometimes in the right situations.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function isEqual(obj1, obj2){\n    type1 = typeof(obj1);\n    type2 = typeof(obj2);\n    if(type1===type2){\n        switch (type1){\n            case \"object\": return JSON.stringify(obj1)===JSON.stringify(obj2);\n            case \"function\": return eval(obj1).toString()===eval(obj2).toString();\n            default: return obj1==obj2;\n        }\n    }\n    return false;\n}//have not tried but should work.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is my version. It is using new <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"nofollow\">Object.keys</a> feature that is introduced in ES5 and ideas/tests from <a href=\"http://stackoverflow.com/a/3849480/1414809\">+</a>, <a href=\"http://stackoverflow.com/a/6713782/1414809\">+</a> and <a href=\"http://stackoverflow.com/a/5522917/1414809\">+</a>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function objectEquals(x, y) {\r\n    'use strict';\r\n\r\n    if (x === null || x === undefined || y === null || y === undefined) { return x === y; }\r\n    // after this just checking type of one would be enough\r\n    if (x.constructor !== y.constructor) { return false; }\r\n    // if they are functions, they should exactly refer to same one (because of closures)\r\n    if (x instanceof Function) { return x === y; }\r\n    // if they are regexps, they should exactly refer to same one (it is hard to better equality check on current ES)\r\n    if (x instanceof RegExp) { return x === y; }\r\n    if (x === y || x.valueOf() === y.valueOf()) { return true; }\r\n    if (Array.isArray(x) &amp;&amp; x.length !== y.length) { return false; }\r\n\r\n    // if they are dates, they must had equal valueOf\r\n    if (x instanceof Date) { return false; }\r\n\r\n    // if they are strictly equal, they both need to be object at least\r\n    if (!(x instanceof Object)) { return false; }\r\n    if (!(y instanceof Object)) { return false; }\r\n\r\n    // recursive object equality check\r\n    var p = Object.keys(x);\r\n    return Object.keys(y).every(function (i) { return p.indexOf(i) !== -1; }) &amp;&amp;\r\n        p.every(function (i) { return objectEquals(x[i], y[i]); });\r\n}\r\n\r\n\r\n///////////////////////////////////////////////////////////////\r\n/// The borrowed tests, run them by clicking \"Run code snippet\"\r\n///////////////////////////////////////////////////////////////\r\nvar printResult = function (x) {\r\n    if (x) { document.write('&lt;div style=\"color: green;\"&gt;Passed&lt;/div&gt;'); }\r\n    else { document.write('&lt;div style=\"color: red;\"&gt;Failed&lt;/div&gt;'); }\r\n};\r\nvar assert = { isTrue: function (x) { printResult(x); }, isFalse: function (x) { printResult(!x); } }\r\nassert.isTrue(objectEquals(null,null));\r\nassert.isFalse(objectEquals(null,undefined));\r\nassert.isFalse(objectEquals(/abc/, /abc/));\r\nassert.isFalse(objectEquals(/abc/, /123/));\r\nvar r = /abc/;\r\nassert.isTrue(objectEquals(r, r));\r\n\r\nassert.isTrue(objectEquals(\"hi\",\"hi\"));\r\nassert.isTrue(objectEquals(5,5));\r\nassert.isFalse(objectEquals(5,10));\r\n\r\nassert.isTrue(objectEquals([],[]));\r\nassert.isTrue(objectEquals([1,2],[1,2]));\r\nassert.isFalse(objectEquals([1,2],[2,1]));\r\nassert.isFalse(objectEquals([1,2],[1,2,3]));\r\n\r\nassert.isTrue(objectEquals({},{}));\r\nassert.isTrue(objectEquals({a:1,b:2},{a:1,b:2}));\r\nassert.isTrue(objectEquals({a:1,b:2},{b:2,a:1}));\r\nassert.isFalse(objectEquals({a:1,b:2},{a:1,b:3}));\r\n\r\nassert.isTrue(objectEquals({1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:26}},{1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:26}}));\r\nassert.isFalse(objectEquals({1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:26}},{1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:27}}));\r\n\r\nObject.prototype.equals = function (obj) { return objectEquals(this, obj); };\r\nvar assertFalse = assert.isFalse,\r\n    assertTrue = assert.isTrue;\r\n\r\nassertFalse({}.equals(null));\r\nassertFalse({}.equals(undefined));\r\n\r\nassertTrue(\"hi\".equals(\"hi\"));\r\nassertTrue(new Number(5).equals(5));\r\nassertFalse(new Number(5).equals(10));\r\nassertFalse(new Number(1).equals(\"1\"));\r\n\r\nassertTrue([].equals([]));\r\nassertTrue([1,2].equals([1,2]));\r\nassertFalse([1,2].equals([2,1]));\r\nassertFalse([1,2].equals([1,2,3]));\r\nassertTrue(new Date(\"2011-03-31\").equals(new Date(\"2011-03-31\")));\r\nassertFalse(new Date(\"2011-03-31\").equals(new Date(\"1970-01-01\")));\r\n\r\nassertTrue({}.equals({}));\r\nassertTrue({a:1,b:2}.equals({a:1,b:2}));\r\nassertTrue({a:1,b:2}.equals({b:2,a:1}));\r\nassertFalse({a:1,b:2}.equals({a:1,b:3}));\r\n\r\nassertTrue({1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:26}}.equals({1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:26}}));\r\nassertFalse({1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:26}}.equals({1:{name:\"mhc\",age:28}, 2:{name:\"arb\",age:27}}));\r\n\r\nvar a = {a: 'text', b:[0,1]};\r\nvar b = {a: 'text', b:[0,1]};\r\nvar c = {a: 'text', b: 0};\r\nvar d = {a: 'text', b: false};\r\nvar e = {a: 'text', b:[1,0]};\r\nvar i = {\r\n    a: 'text',\r\n    c: {\r\n        b: [1, 0]\r\n    }\r\n};\r\nvar j = {\r\n    a: 'text',\r\n    c: {\r\n        b: [1, 0]\r\n    }\r\n};\r\nvar k = {a: 'text', b: null};\r\nvar l = {a: 'text', b: undefined};\r\n\r\nassertTrue(a.equals(b));\r\nassertFalse(a.equals(c));\r\nassertFalse(c.equals(d));\r\nassertFalse(a.equals(e));\r\nassertTrue(i.equals(j));\r\nassertFalse(d.equals(k));\r\nassertFalse(k.equals(l));\r\n\r\n// from comments on stackoverflow post\r\nassert.isFalse(objectEquals([1, 2, undefined], [1, 2]));\r\nassert.isFalse(objectEquals([1, 2, 3], { 0: 1, 1: 2, 2: 3 }));\r\nassert.isFalse(objectEquals(new Date(1234), 1234));\r\n\r\n// no two different function is equal really, they capture their context variables\r\n// so even if they have same toString(), they won't have same functionality\r\nvar func = function (x) { return true; };\r\nvar func2 = function (x) { return true; };\r\nassert.isTrue(objectEquals(func, func));\r\nassert.isFalse(objectEquals(func, func2));\r\nassert.isTrue(objectEquals({ a: { b: func } }, { a: { b: func } }));\r\nassert.isFalse(objectEquals({ a: { b: func } }, { a: { b: func2 } }));</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Here's a pretty clean <a href=\"http://en.wikipedia.org/wiki/CoffeeScript\" rel=\"nofollow\">CoffeeScript</a> version of how you could do this:</p>\n\n<pre><code>Object::equals = (other) -&gt;\n  typeOf = Object::toString\n\n  return false if typeOf.call(this) isnt typeOf.call(other)\n  return `this == other` unless typeOf.call(other) is '[object Object]' or\n                                typeOf.call(other) is '[object Array]'\n\n  (return false unless this[key].equals other[key]) for key, value of this\n  (return false if typeof this[key] is 'undefined') for key of other\n\n  true\n</code></pre>\n\n<p>Here are the tests:</p>\n\n<pre><code>  describe \"equals\", -&gt;\n\n    it \"should consider two numbers to be equal\", -&gt;\n      assert 5.equals(5)\n\n    it \"should consider two empty objects to be equal\", -&gt;\n      assert {}.equals({})\n\n    it \"should consider two objects with one key to be equal\", -&gt;\n      assert {a: \"banana\"}.equals {a: \"banana\"}\n\n    it \"should consider two objects with keys in different orders to be equal\", -&gt;\n      assert {a: \"banana\", kendall: \"garrus\"}.equals {kendall: \"garrus\", a: \"banana\"}\n\n    it \"should consider two objects with nested objects to be equal\", -&gt;\n      assert {a: {fruit: \"banana\"}}.equals {a: {fruit: \"banana\"}}\n\n    it \"should consider two objects with nested objects that are jumbled to be equal\", -&gt;\n      assert {a: {a: \"banana\", kendall: \"garrus\"}}.equals {a: {kendall: \"garrus\", a: \"banana\"}}\n\n    it \"should consider two objects with arrays as values to be equal\", -&gt;\n      assert {a: [\"apple\", \"banana\"]}.equals {a: [\"apple\", \"banana\"]}\n\n\n\n    it \"should not consider an object to be equal to null\", -&gt;\n      assert !({a: \"banana\"}.equals null)\n\n    it \"should not consider two objects with different keys to be equal\", -&gt;\n      assert !({a: \"banana\"}.equals {})\n\n    it \"should not consider two objects with different values to be equal\", -&gt;\n      assert !({a: \"banana\"}.equals {a: \"grapefruit\"})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Some of the following solutions have problems with performance, functionality and style... They are not thought through enough, and some of them fail for different cases. I tried to address this problem in my own solution, and I would really much appreciate your feedback:</p>\n\n<p><a href=\"http://stamat.wordpress.com/javascript-object-comparison/\" rel=\"nofollow\">http://stamat.wordpress.com/javascript-object-comparison/</a></p>\n\n<pre><code>//Returns the object's class, Array, Date, RegExp, Object are of interest to us\nvar getClass = function(val) {\n    return Object.prototype.toString.call(val)\n        .match(/^\\[object\\s(.*)\\]$/)[1];\n};\n\n//Defines the type of the value, extended typeof\nvar whatis = function(val) {\n\n    if (val === undefined)\n        return 'undefined';\n    if (val === null)\n        return 'null';\n\n    var type = typeof val;\n\n    if (type === 'object')\n        type = getClass(val).toLowerCase();\n\n    if (type === 'number') {\n        if (val.toString().indexOf('.') &gt; 0)\n            return 'float';\n        else\n        return 'integer';\n    }\n\n    return type;\n   };\n\nvar compareObjects = function(a, b) {\n    if (a === b)\n        return true;\n    for (var i in a) {\n        if (b.hasOwnProperty(i)) {\n            if (!equal(a[i],b[i])) return false;\n        } else {\n            return false;\n        }\n    }\n\n    for (var i in b) {\n        if (!a.hasOwnProperty(i)) {\n            return false;\n        }\n    }\n    return true;\n};\n\nvar compareArrays = function(a, b) {\n    if (a === b)\n        return true;\n    if (a.length !== b.length)\n        return false;\n    for (var i = 0; i &lt; a.length; i++){\n        if(!equal(a[i], b[i])) return false;\n    };\n    return true;\n};\n\nvar _equal = {};\n_equal.array = compareArrays;\n_equal.object = compareObjects;\n_equal.date = function(a, b) {\n    return a.getTime() === b.getTime();\n};\n_equal.regexp = function(a, b) {\n    return a.toString() === b.toString();\n};\n//  uncoment to support function as string compare\n//  _equal.fucntion =  _equal.regexp;\n\n\n\n/*\n * Are two values equal, deep compare for objects and arrays.\n * @param a {any}\n * @param b {any}\n * @return {boolean} Are equal?\n */\nvar equal = function(a, b) {\n    if (a !== b) {\n        var atype = whatis(a), btype = whatis(b);\n\n        if (atype === btype)\n            return _equal.hasOwnProperty(atype) ? _equal[atype](a, b) : a==b;\n\n        return false;\n    }\n\n    return true;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm making the following assumptions with this function:</p>\n\n<ol>\n<li>You control the objects you are comparing and you only have primitive values (ie. not nested objects, functions, etc.).</li>\n<li>Your browser has support for <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\" rel=\"nofollow\">Object.keys</a>.</li>\n</ol>\n\n<p>This should be treated as a demonstration of a simple strategy.</p>\n\n<pre><code>/**\n * Checks the equality of two objects that contain primitive values. (ie. no nested objects, functions, etc.)\n * @param {Object} object1\n * @param {Object} object2\n * @param {Boolean} [order_matters] Affects the return value of unordered objects. (ex. {a:1, b:2} and {b:2, a:1}).\n * @returns {Boolean}\n */\nfunction isEqual( object1, object2, order_matters ) {\n    var keys1 = Object.keys(object1),\n        keys2 = Object.keys(object2),\n        i, key;\n\n    // Test 1: Same number of elements\n    if( keys1.length != keys2.length ) {\n        return false;\n    }\n\n    // If order doesn't matter isEqual({a:2, b:1}, {b:1, a:2}) should return true.\n    // keys1 = Object.keys({a:2, b:1}) = [\"a\",\"b\"];\n    // keys2 = Object.keys({b:1, a:2}) = [\"b\",\"a\"];\n    // This is why we are sorting keys1 and keys2.\n    if( !order_matters ) {\n        keys1.sort();\n        keys2.sort();\n    }\n\n    // Test 2: Same keys\n    for( i = 0; i &lt; keys1.length; i++ ) {\n        if( keys1[i] != keys2[i] ) {\n            return false;\n        }\n    }\n\n    // Test 3: Values\n    for( i = 0; i &lt; keys1.length; i++ ) {\n        key = keys1[i];\n        if( object1[key] != object2[key] ) {\n            return false;\n        }\n    }\n\n    return true;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are working in <a href=\"http://docs.angularjs.org\">AngularJS</a>, the <code>angular.equals</code> function will determine if two objects are equal. In <a href=\"http://emberjs.com/api/\">Ember.js</a> use <code>isEqual</code>.</p>\n\n<ul>\n<li><code>angular.equals</code> - See the <a href=\"http://docs.angularjs.org/api/angular.equals\">docs</a> or <a href=\"https://github.com/angular/angular.js/blob/6c59e770084912d2345e7f83f983092a2d305ae3/src/Angular.js#L670\">source</a> for more on this method. It does a deep compare on arrays too.</li>\n<li>Ember.js <code>isEqual</code> - See the <a href=\"http://emberjs.com/api/#method_isEqual\">docs</a> or <a href=\"https://github.com/emberjs/ember.js/blob/master/packages/ember-runtime/lib/core.js\">source</a> for more on this method. It does not do a deep compare on arrays.</li>\n</ul>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var purple = [{\"purple\": \"drank\"}];\r\nvar drank = [{\"purple\": \"drank\"}];\r\n\r\nif(angular.equals(purple, drank)) {\r\n    alert('got dat');\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.2.23/angular.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>For comparing keys for simple key/value pairs object instances, I use:</p>\n\n<pre><code>function compareKeys(r1, r2) {\n    var nloops = 0, score = 0;\n    for(k1 in r1) {\n        for(k2 in r2) {\n            nloops++;\n            if(k1 == k2)\n                score++; \n        }\n    }\n    return nloops == (score * score);\n};\n</code></pre>\n\n<p>Once keys are compared, a simple additional <code>for..in</code> loop is enough.</p>\n\n<p>Complexity is O(N*N) with N is the number of keys. </p>\n\n<p>I hope/guess objects I define won't hold more than 1000 properties... </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is an addition for all the above, not a replacement. If you need to fast shallow-compare objects without need to check extra recursive cases. Here is a shot.</p>\n\n<p>This compares for: 1) Equality of number of own properties, 2) Equality of key names, 3) if bCompareValues == true, Equality of corresponding property values and their types (triple equality)</p>\n\n<pre><code>var shallowCompareObjects = function(o1, o2, bCompareValues) {\n    var s, \n        n1 = 0,\n        n2 = 0,\n        b  = true;\n\n    for (s in o1) { n1 ++; }\n    for (s in o2) { \n        if (!o1.hasOwnProperty(s)) {\n            b = false;\n            break;\n        }\n        if (bCompareValues &amp;&amp; o1[s] !== o2[s]) {\n            b = false;\n            break;\n        }\n        n2 ++;\n    }\n    return b &amp;&amp; n1 == n2;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Object equality check:<code>JSON.stringify(array1.sort()) === JSON.stringify(array2.sort())</code></p>\n\n<p>The above test also works with arrays of objects in which case use a sort function as documented in <a href=\"http://www.w3schools.com/jsref/jsref_sort.asp\" rel=\"nofollow\">http://www.w3schools.com/jsref/jsref_sort.asp</a></p>\n\n<p>Might suffice for small arrays with flat JSON schemas.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are comparing JSON objects you can use <a href=\"https://github.com/mirek/node-rus-diff\" rel=\"nofollow\">https://github.com/mirek/node-rus-diff</a></p>\n\n<pre><code>npm install rus-diff\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>a = {foo:{bar:1}}\nb = {foo:{bar:1}}\nc = {foo:{bar:2}}\n\nvar rusDiff = require('rus-diff').rusDiff\n\nconsole.log(rusDiff(a, b)) // -&gt; false, meaning a and b are equal\nconsole.log(rusDiff(a, c)) // -&gt; { '$set': { 'foo.bar': 2 } }\n</code></pre>\n\n<p>If two objects are different, a MongoDB compatible <code>{$rename:{...}, $unset:{...}, $set:{...}}</code> like object is returned.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is a very basic approach to checking an object's \"value equality\".</p>\n\n<pre><code>var john = {\n    occupation: \"Web Developer\",\n    age: 25\n};\n\nvar bobby = {\n    occupation: \"Web Developer\",\n    age: 25\n};\n\nfunction isEquivalent(a, b) {\n    // Create arrays of property names\n\n    var aProps = Object.getOwnPropertyNames(a);\n    var bProps = Object.getOwnPropertyNames(b);\n\n    // If number of properties is different, objects are not equivalent\n\n    if (aProps.length != bProps.length) {\n        return false;\n    }\n\n    for (var i = 0; i &lt; aProps.length; i++) {\n        var propName = aProps[i];\n\n        // If values of same property are not equal, objects are not equivalent\n        if (a[propName] !== b[propName]) {\n           return false;\n        }\n    }\n\n    // If we made it this far, objects are considered equivalent\n    return true;\n}\n\n// Outputs: true\nconsole.log(isEquivalent(john, bobby));\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/SUDHARSHAN_R/6beqR/\" rel=\"nofollow\">Demo - JSFiddle</a></p>\n\n<p>As you can see, to check the objects' \"value equality\" we essentially have to iterate over every property in the objects to see whether they are equal. And while this simple implementation works for our example, there are a lot of cases that it doesn't handle. For instance:</p>\n\n<ul>\n<li>What if one of the property values is itself an object?</li>\n<li>What if one of the property values is NaN (the only value in\nJavaScript that is not equal to itself?)</li>\n<li>What if a has a property with value undefined, while b doesn't have\nthis property (which thus evaluates to undefined?)</li>\n</ul>\n\n<p>For a robust method of checking objects' \"value equality\" it is better to rely on a well-tested library that covers the various edge cases like <a href=\"http://underscorejs.org/#isEqual\" rel=\"nofollow\">Underscore</a>. </p>\n\n<pre><code>var john = {\n    occupation: \"Web Developer\",\n    age: 25\n};\n\nvar bobby = {\n    occupation: \"Web Developer\",\n    age: 25\n};\n\n// Outputs: true\nconsole.log(_.isEqual(john, bobby));\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/SUDHARSHAN_R/RFYMh/\" rel=\"nofollow\">Demo - JSFiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In Node.js, you can use its native <code>require(\"assert\").deepEqual</code>. More info: \n<a href=\"http://nodejs.org/api/assert.html\" rel=\"nofollow\">http://nodejs.org/api/assert.html</a></p>\n\n<p>For example:</p>\n\n<pre><code>var assert = require(\"assert\");\nassert.deepEqual({a:1, b:2}, {a:1, b:3}); // will throw AssertionError\n</code></pre>\n\n<p>Another example that returns <code>true</code> / <code>false</code> instead of returning errors:</p>\n\n<pre><code>var assert = require(\"assert\");\n\nfunction deepEqual(a, b) {\n    try {\n      assert.deepEqual(a, b);\n    } catch (error) {\n      if (error.name === \"AssertionError\") {\n        return false;\n      }\n      throw error;\n    }\n    return true;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Sure, while we're at it I'll throw in my own reinvention of the wheel (I'm proud of the number of spokes and materials used):\n</p>\n\n<pre><code>////////////////////////////////////////////////////////////////////////////////\n\nvar equals = function ( objectA, objectB ) {\n    var result = false,\n        keysA,\n        keysB;\n\n    // Check if they are pointing at the same variable. If they are, no need to test further.\n    if ( objectA === objectB ) {\n        return true;\n    }\n\n    // Check if they are the same type. If they are not, no need to test further.\n    if ( typeof objectA !== typeof objectB ) {\n        return false;\n    }\n\n    // Check what kind of variables they are to see what sort of comparison we should make.\n    if ( typeof objectA === \"object\" ) {\n        // Check if they have the same constructor, so that we are comparing apples with apples.\n        if ( objectA.constructor === objectA.constructor ) {\n            // If we are working with Arrays...\n            if ( objectA instanceof Array ) {\n                // Check the arrays are the same length. If not, they cannot be the same.\n                if ( objectA.length === objectB.length ) {\n                    // Compare each element. They must be identical. If not, the comparison stops immediately and returns false.\n                    return objectA.every(\n                        function ( element, i ) {\n                            return equals( element, objectB[ i ] );\n                        }\n                    );\n                }\n                // They are not the same length, and so are not identical.\n                else {\n                    return false;\n                }\n            }\n            // If we are working with RegExps...\n            else if ( objectA instanceof RegExp ) {\n                // Return the results of a string comparison of the expression.\n                return ( objectA.toString() === objectB.toString() );\n            }\n            // Else we are working with other types of objects...\n            else {\n                // Get the keys as arrays from both objects. This uses Object.keys, so no old browsers here.\n                keysA = Object.keys( objectA );\n\n                keysB = Object.keys( objectB );\n\n                // Check the key arrays are the same length. If not, they cannot be the same.\n                if ( keysA.length === keysB.length ) {\n                    // Compare each property. They must be identical. If not, the comparison stops immediately and returns false.\n                    return keysA.every(\n                        function ( element ) {\n                            return equals( objectA[ element ], objectB[ element ] );\n                        }\n                    );\n                }\n                // They do not have the same number of keys, and so are not identical.\n                else {\n                    return false;\n                }\n            }\n        }\n        // They don't have the same constructor.\n        else {\n            return false;\n        }\n    }\n    // If they are both functions, let us do a string comparison.\n    else if ( typeof objectA === \"function\" ) {\n        return ( objectA.toString() === objectB.toString() );\n    }\n    // If a simple variable type, compare directly without coercion.\n    else {\n        return ( objectA === objectB );\n    }\n\n    // Return a default if nothing has already been returned.\n    return result;\n};\n\n////////////////////////////////////////////////////////////////////////////////\n</code></pre>\n\n<p>It returns false as quickly as possible, but of course for a large object where the difference is deeply nested it could be less effective. In my own scenario, good handling of nested arrays is important.</p>\n\n<p>Hope it helps someone needing this kind of 'wheel'.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A simple solution to this issue that many people don't realize is to sort the JSON strings (per character). This is also usually faster than the other solutions mentioned here:</p>\n\n<pre><code>function areEqual(obj1, obj2) {\n    var a = JSON.stringify(obj1), b = JSON.stringify(obj2);\n    if (!a) a = '';\n    if (!b) b = '';\n    return (a.split('').sort().join('') == b.split('').sort().join(''));\n}\n</code></pre>\n\n<p>Another useful thing about this method is you can filter comparisons by passing a \"replacer\" function to the JSON.stringify functions (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Example_of_using_replacer_parameter\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify#Example_of_using_replacer_parameter</a>). The following will only compare all objects keys that are named \"derp\":</p>\n\n<pre><code>function areEqual(obj1, obj2, filter) {\n    var a = JSON.stringify(obj1, filter), b = JSON.stringify(obj2, filter);\n    if (!a) a = '';\n    if (!b) b = '';\n    return (a.split('').sort().join('') == b.split('').sort().join(''));\n}\nvar equal = areEqual(obj1, obj2, function(key, value) {\n    return (key === 'derp') ? value : undefined;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I know this is a bit old, but I would like to add a solution that I came up with for this problem.\nI had an object  and I wanted to know when its data changed. \"something similar to Object.observe\" and what I did was:</p>\n\n<pre><code>function checkObjects(obj,obj2){\n   var values = [];\n   var keys = [];\n   keys = Object.keys(obj);\n   keys.forEach(function(key){\n      values.push(key);\n   });\n   var values2 = [];\n   var keys2 = [];\n   keys2 = Object.keys(obj2);\n   keys2.forEach(function(key){\n      values2.push(key);\n   });\n   return (values == values2 &amp;&amp; keys == keys2)\n}\n</code></pre>\n\n<p>This here can be duplicated and create an other set of arrays to compare the values and keys.\nIt is very simple because they are now arrays and will return false if objects have different sizes.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Yeah, another answer...</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>Object.prototype.equals = function (object) {\r\n    if (this.constructor !== object.constructor) return false;\r\n    if (Object.keys(this).length !== Object.keys(object).length) return false;\r\n    var obk;\r\n    for (obk in object) {\r\n        if (!this[obk] || this[obk] !== object[obk])\r\n            return false;\r\n    }\r\n    return true;\r\n}\r\n\r\nvar aaa = JSON.parse('{\"name\":\"mike\",\"tel\":\"1324356584\"}');\r\nvar bbb = JSON.parse('{\"tel\":\"1324356584\",\"name\":\"mike\"}');\r\nvar ccc = JSON.parse('{\"name\":\"mike\",\"tel\":\"584\"}');\r\nvar ddd = JSON.parse('{\"name\":\"mike\",\"tel\":\"1324356584\", \"work\":\"nope\"}');\r\n\r\n$(\"#ab\").text(aaa.equals(bbb));\r\n$(\"#ba\").text(bbb.equals(aaa));\r\n$(\"#bc\").text(bbb.equals(ccc));\r\n$(\"#ad\").text(aaa.equals(ddd));</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;\r\naaa equals bbb? &lt;span id=\"ab\"&gt;&lt;/span&gt; &lt;br/&gt;\r\nbbb equals aaa? &lt;span id=\"ba\"&gt;&lt;/span&gt; &lt;br/&gt;\r\nbbb equals ccc? &lt;span id=\"bc\"&gt;&lt;/span&gt; &lt;br/&gt;\r\naaa equals ddd? &lt;span id=\"ad\"&gt;&lt;/span&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>A strict equality operator will tell you if two object <strong>types</strong> are equal. However, is there a way to tell if two objects are equal, <strong>much like the hash code</strong> value in Java?</p>\n\n<p>Stack Overflow question <em><a href=\"http://stackoverflow.com/questions/194846\">Is there any kind of hashCode function in JavaScript?</a></em> is similar to this question, but requires a more academic answer. The scenario above demonstrates why it would be necessary to have one, and I'm wondering if there is any <strong>equivalent solution</strong>.</p>\n",
            "last_activity_date": 1426153799,
            "question_id": 201183,
            "score": 167,
            "tags": [
                "javascript",
                "object",
                "equals",
                "hashcode"
            ],
            "title": "How to determine equality for two JavaScript objects?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p><a href=\"http://javascript.about.com/library/blxhtml.htm\" rel=\"nofollow\">When you want it to validate</a> (in XML/XHTML - thanks, <a href=\"http://stackoverflow.com/users/6436/loren-segal\">Loren Segal</a>).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>When you are going for strict XHTML compliance, you need the CDATA so less than and ampersands are not flagged as invalid characters.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>A CDATA section is required if you need your document to parse as XML (e.g. when an XHTML page is interpreted as XML) <em>and you want to be able to write literal <code>i&lt;10</code> and <code>a &amp;&amp; b</code> instead of <code>i&amp;lt;10</code> and <code>a &amp;amp;&amp;amp; b</code></em>, as XHTML will parse the JavaScript code as parsed character data as opposed to character data by default.  This is not an issue with scripts that are stored in external source files, but for any inline JavaScript in XHTML you will <em>probably</em> want to use a CDATA section.</p>\n\n<p>Note that many XHTML pages were never intended to be parsed as XML in which case this will not be an issue.</p>\n\n<p>For a good writeup on the subject, see <a href=\"http://javascript.about.com/library/blxhtml.htm\">http://javascript.about.com/library/blxhtml.htm</a></p>\n",
                    "is_accepted": true,
                    "score": 380
                },
                {
                    "body": "<p>Do <em>not</em> use CDATA in HTML4 but you <em>should</em> use CDATA in XHTML and <em>must</em> use CDATA in XML if you have unescaped symbols like &lt; and >.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>When browsers treat the markup as XML:</p>\n\n<pre><code>&lt;script&gt;\n&lt;![CDATA[\n    ...code...\n]]&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>When browsers treat the markup as HTML:</p>\n\n<pre><code>&lt;script&gt;\n    ...code...\n&lt;/script&gt;\n</code></pre>\n\n<p>When browsers treat the markup as HTML and you want your XHTML 1.0 markup (for example) to validate.</p>\n\n<pre><code>&lt;script&gt;\n//&lt;![CDATA[\n    ...code...\n//]]&gt;\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 140
                },
                {
                    "body": "<h2>HTML</h2>\n\n<p>An HTML parser will treat everything between <code>&lt;script&gt;</code> and <code>&lt;/script&gt;</code> as part of the script. <strike>Some implementations don't even need a correct closing tag; they stop script interpretation at \"<code>&lt;/</code>\", which is correct according to the <a href=\"http://www.w3.org/TR/html401/appendix/notes.html#notes-specifying-data\">specs</a></strike>. [update]In HTML5, and with current browsers, that is not the case anymore.[/update]</p>\n\n<p>So, in HTML, this is <em>not</em> possible:</p>\n\n<pre><code>&lt;script&gt;\nvar x = '&lt;/script&gt;';\nalert(x)\n&lt;/script&gt;\n</code></pre>\n\n<p>A <code>CDATA</code> section has <strong>no effect at all</strong>. That's why you need to write</p>\n\n<pre><code>var x = '&lt;' + '/script&gt;'; // or\nvar x = '&lt;\\/script&gt;';\n</code></pre>\n\n<p>or similar.</p>\n\n<p>This also applies to XHTML files served as <code>text/html</code>. (Since IE does not support XML content types, this is mostly true.)</p>\n\n<h2>XML</h2>\n\n<p>In XML, different rules apply. Note that (non IE) browsers only use an XML parser if the XHMTL document is served with an XML content type.</p>\n\n<p>To the XML parser, a <code>script</code> tag is no better than any other tag. Particularly, a script node may contain non-text child nodes, triggered by \"<code>&lt;</code>\"; and a \"<code>&amp;</code>\" sign denotes a character entity.</p>\n\n<p>So, in XHTML, this is <em>not</em> possible:</p>\n\n<pre><code>&lt;script&gt;\nif (a&lt;b &amp;&amp; c&lt;d) {\n    alert('Hooray');\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>To work around this, you can wrap the whole script in a <code>CDATA</code> section. This tells the parser: 'In this section, <strong>don't treat \"<code>&lt;</code>\" and \"<code>&amp;</code>\" as control characters</strong>.' To prevent the JavaScript engine from interpreting the \"<code>&lt;![CDATA[</code>\" and \"<code>]]&gt;</code>\" marks, you can wrap them in comments.</p>\n\n<p>If your script does not contain any \"<code>&lt;</code>\" or \"<code>&amp;</code>\", you don't need a <code>CDATA</code> section anyway.</p>\n",
                    "is_accepted": false,
                    "score": 95
                },
                {
                    "body": "<p>to avoid xml errors during xhtml validation.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>That way older browser don't parse the Javascript code and the page doesn't break.</p>\n\n<p>Backwards compatability. Gotta love it.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>CDATA tells the browser to display the text as is and not to render it as an HTML.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>It's an X(HT)ML thing. When you use symbols like <code>&lt;</code> and <code>&gt;</code> within the JavaScript, e.g. for comparing two integers, this would have to be parsed like XML, thus they would mark as a beginning or end of a tag.</p>\n\n<p>The CDATA means that the following lines (everything up unto the <code>]]&gt;</code> is not XML and thus should not be parsed that way.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>CDATA indicates that the contents within are not XML.</p>\n\n<p>Here is an explanation on <a href=\"http://en.wikipedia.org/wiki/CDATA\" rel=\"nofollow\">wikipedia</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><strong>It to ensure that XHTML validation works correctly when you have JavaScript embedded in your page, rather than externally referenced.</strong></p>\n\n<p>XHTML requires that your page strictly conform to XML markup requirements. Since JavaScript may contain characters with special meaning, you must wrap it in CDATA to ensure that validation does not flag it as malformed.</p>\n\n<blockquote>\n  <blockquote>\n    <p>With HTML pages on the web you can just include the required JavaScript between  and  tags. When you validate the HTML on your web page the JavaScript content is considered to be CDATA (character data) that is therefore ignored by the validator. The same is not true if you follow the more recent XHTML standards in setting up your web page. With XHTML the code between the script tags is considered to be PCDATA (parsed character data) which is therefore processed by the validator.</p>\n    \n    <p>Because of this, you can't just include JavaScript between the script tags on your page without 'breaking' your web page (at least as far as the validator is concerned). </p>\n  </blockquote>\n</blockquote>\n\n<p>You can learn <a href=\"http://en.wikipedia.org/wiki/CDATA\" rel=\"nofollow\">more about CDATA here</a>, and <a href=\"http://en.wikipedia.org/wiki/XHTML\" rel=\"nofollow\">more about XHTML here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Basically it is to allow to write a document that is both XHTML and HTML. The problem is that within XHTML, the XML parser will interpret the &amp;,&lt;,> characters in the <em>script</em> tag and cause XML parsing error. So, you can write your JavaScript with entities, e.g.:</p>\n\n<pre><code>if (a &amp;gt; b) alert('hello world');\n</code></pre>\n\n<p>But this is impractical. The bigger problem is that if you read the page in HTML, the tag <em>script</em> is considered CDATA 'by default', and such JavaScript will not run. Therefore, if you want the same page to be OK both using XHTML and HTML parsers, you need to enclose the <em>script</em> tag in CDATA element in XHTML, but NOT to enclose it in HTML.</p>\n\n<p>This trick marks the start of a CDATA element as a JavaScript comment; in HTML the JavaScript parser ignores the CDATA tag (it's a comment). In XHTML, the XML parser (which is run before the JavaScript) detects it and treats the rest until end of CDATA as CDATA.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>CDATA is necessary in any XML dialect, because text within an XML node is treated as a child element before being evaluated as JavaScript. This is also the reason why <a href=\"http://stackoverflow.com/questions/8019216/1113772/9881897#9881897\">JSLint complains</a> about the <code>&lt;</code> character in regexes.</p>\n\n<p><strong>References</strong></p>\n\n<ul>\n<li><a href=\"http://www.ibm.com/developerworks/java/library/x-decxmlui/\" rel=\"nofollow\">Creating a declarative XML UI language</a></li>\n<li><a href=\"http://xul.sourceforge.net/talk/mtd-may-2004/slides.html\" rel=\"nofollow\">The Future of the Web: Rich Clients, Rich Browsers, Rich Portals</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>CDATA indicates that the contents within are not XML.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>Are CDATA tags ever necessary in script tags and if so when?</p>\n\n<p>In other words, when and where is this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n//&lt;![CDATA[\n...code...\n//]]&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>preferable to this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n...code...\n&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1417335263,
            "question_id": 66837,
            "score": 541,
            "tags": [
                "javascript",
                "html",
                "xhtml",
                "cdata"
            ],
            "title": "When is a CDATA section necessary within a script tag?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>A decent implementation can be found at <a href=\"http://code.google.com/p/reallysimplehistory/\" rel=\"nofollow\">http://code.google.com/p/reallysimplehistory/</a>.\nThe only (but also) problem and bug it has is: in Internet Explorer modifying the location hash manually will reset the entire history stack (this is a browser issue and it cannot be solved).</p>\n\n<p>Note, Internet Explorer 8 does have support for the \"hashchange\" event, and since it is becoming part of HTML5 you may expect other browsers to catch up.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The only way to really do this (and is how the 'reallysimplehistory' does this), is by setting an interval that keeps checking the current hash, and comparing it against what it was before, we do this and let subscribers subscribe to a changed event that we fire if the hash changes.. its not perfect but browsers really don't support this event natively.</p>\n\n<hr>\n\n<p>Update to keep this answer fresh:</p>\n\n<p>If you are using jQuery (which today should be somewhat foundational for most) then a nice solution is to use the abstraction that jQuery gives you by using its events system to listen to hashchange events on the window object.</p>\n\n<pre><code>$(window).on('hashchange', function() {\n  //.. work ..\n});\n</code></pre>\n\n<p>The nice thing here is you can write code that doesn't need to even worry about hashchange support, however you DO need to do some magic, in form of a somewhat lesser known jQuery feature <a href=\"http://benalman.com/news/2010/03/jquery-special-events/\">jQuery special events</a>.</p>\n\n<p>With this feature you essentially get to run some setup code for any event, the first time somebody attempts to use the event in any way (such as binding to the event).</p>\n\n<p>In this setup code you can check for native browser support and if the browser doesn't natively implement this, you can setup a single timer to poll for changes, and trigger the jQuery event.</p>\n\n<p>This completely unbinds your code from needing to understand this support problem, the implementation of a special event of this kind is trivial (to get a simple 98% working version), but why do that <a href=\"http://benalman.com/projects/jquery-hashchange-plugin/\">when somebody else has already</a>.</p>\n",
                    "is_accepted": true,
                    "score": 424
                },
                {
                    "body": "<p>Here's <a href=\"http://stackoverflow.com/questions/629765/enabling-back-fwd-key-events-for-an-ajax-application/629817#629817\">an implementation</a> of <a href=\"#680865\" rel=\"nofollow\">meandmycode's suggestion</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>HTML5 <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html#history-traversal\">specifies a <code>hashchange</code> event</a>.  This event is now <a href=\"http://caniuse.com/hashchange\">supported by all modern browsers</a>. Support was added in the following browser versions:</p>\n\n<ul>\n<li>Internet Explorer 8</li>\n<li>Firefox 3.6</li>\n<li>Chrome 5</li>\n<li>Safari 5</li>\n<li>Opera 10.6</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 141
                },
                {
                    "body": "<p>There are a lot of tricks to deal with History and window.location.hash in IE browsers:</p>\n\n<ul>\n<li><p>As original question said, if you go from page a.html#b to a.html#c, and then hit the back button, the browser doesn't know that page has changed. Let me say it with an example: window.location.href will be 'a.html#c', no matter if you are in a.html#b or a.html#c.</p></li>\n<li><p>Actually, a.html#b and a.html#c are stored in history <em>only</em> if elements '&lt;a name=\"#b\"&gt;' and '&lt;a name=\"#c\"&gt;' exists previously in the page.</p></li>\n<li><p>However, if you put an iframe inside a page, navigate from a.html#b to a.html#c in that iframe and then hit the back button, iframe.contentWindow.document.location.href changes as expected.</p></li>\n<li><p>If you use 'document.domain=<em>something</em>' in your code, then you can't access to iframe.contentWindow.document.open()' (and many History Managers does that)</p></li>\n</ul>\n\n<p>I know this isn't a real response, but maybe IE-History notes are useful to somebody.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I used a jQuery plugin, <a href=\"http://jstalkies.blogspot.com/2009/10/history-utility.html\" rel=\"nofollow\">HUtil</a>, and wrote a <a href=\"http://en.wikipedia.org/wiki/Yahoo!_UI_Library\" rel=\"nofollow\">YUI</a> History like interface on top of it.</p>\n\n<p>Check it out once. If you need help I can help.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Firefox has had an onhashchange event since 3.6. See <em><a href=\"https://developer.mozilla.org/en/DOM/window.onhashchange\">window.onhashchange</a></em>.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Another great implementation is <a href=\"http://www.balupton.com/projects/jquery-history\" rel=\"nofollow\">jQuery History</a> which will use the native onhashchange event if it is supported by the browser, if not it will use an iframe or interval appropriately for the browser to ensure all the expected functionality is successfully emulated. It also provides a nice interface to bind to certain states.</p>\n\n<p>Another project worth noting as well is <a href=\"http://www.balupton.com/projects/jquery-ajaxy\" rel=\"nofollow\">jQuery Ajaxy</a> which is pretty much an extension for jQuery History to add ajax to the mix. As when you start using ajax with hashes it get's <a href=\"http://stackoverflow.com/questions/3205900/how-to-show-ajax-requests-in-url/3276206#3276206\">quite complicated</a>!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Ben Alman has a great jQuery plugin for dealing with this: <a href=\"http://benalman.com/projects/jquery-hashchange-plugin/\">http://benalman.com/projects/jquery-hashchange-plugin/</a></p>\n\n<p>If you're not using jQuery it may be an interesting reference to dissect. </p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You could easily implement an observer (the \"watch\" method) on the \"hash\" property of \"window.location\" object.</p>\n\n<p>Firefox has its <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/watch\">own implementation for watching changes of object</a>, but if you use some other implementation (such as <em><a href=\"http://stackoverflow.com/questions/1269633/watch-for-object-properties-changes-in-javascript\">Watch for object properties changes in JavaScript</a></em>) - for other browsers, that will do the trick.</p>\n\n<p>The code will look like this:</p>\n\n<pre><code>window.location.watch(\n    'hash',\n    function(id,oldVal,newVal){\n        console.log(\"the window's hash value has changed from \"+oldval+\" to \"+newVal);\n    }\n);\n</code></pre>\n\n<p>Then you can test it:</p>\n\n<pre><code>var myHashLink = \"home\";\nwindow.location = window.location + \"#\" + myHashLink;\n</code></pre>\n\n<p>And of course that will trigger your observer function.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>var page_url = 'http://www.yoursite.com/'; // full path leading up to hash;\nvar current_url_w_hash = page_url + window.location.hash; // now you might have something like: http://www.yoursite.com/#123\n\nfunction TrackHash() {\n    if (document.location != page_url + current_url_w_hash) {\n        window.location = document.location;\n    }\n    return false;\n}\nvar RunTabs = setInterval(TrackHash, 200);\n</code></pre>\n\n<p>That's it... now, anytime you hit your back or forward buttons, the page will reload as per the new hash value.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Note that in case of Internet&nbsp;Explorer&nbsp;7 and Internet&nbsp;Explorer&nbsp;9 the <code>if</code> statment will give true (for \"onhashchange\" in windows), but the <code>window.onhashchange</code> will never fire, so it's better to store hash and check it after every 100 millisecond whether it's changed or not for all versions of Internet&nbsp;Explorer.</p>\n\n<pre><code>    if ((\"onhashchange\" in window) &amp;&amp; !($.browser.msie)) {\n         window.onhashchange = function () {\n              alert(window.location.hash);\n         }\n         // Or $(window).bind( 'hashchange',function(e) {\n         //       alert(window.location.hash);\n         //   });\n    }\n    else {\n        var prevHash = window.location.hash;\n        window.setInterval(function () {\n           if (window.location.hash != prevHash) {\n              prevHash = window.location.hash;\n              alert(window.location.hash);\n           }\n        }, 100);\n    }\n</code></pre>\n\n<p>EDIT -\nSince jQuery 1.9, <code>$.browser.msie</code> is not supported. Source: <a href=\"http://api.jquery.com/jquery.browser/\" rel=\"nofollow\">http://api.jquery.com/jquery.browser/</a></p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>I've been using path.js for my client side routing. I've found it to be quite succinct and lightweight (it's also been published to NPM too), and makes use of hash based navigation.</p>\n\n<p><a href=\"https://www.npmjs.com/package/pathjs\" rel=\"nofollow\" title=\"path.js npm\">path.js NPM</a></p>\n\n<p><a href=\"https://github.com/mtrpcic/pathjs\" rel=\"nofollow\" title=\"path.js GitHub\">path.js GitHub</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am using Ajax and hash for navigation. Is there a way to check if the <code>window.location.hash</code> changed like this?</p>\n\n<p><a href=\"http://example.com/blah\">http://example.com/blah</a><strong>#123</strong> to <a href=\"http://example.com/blah\">http://example.com/blah</a><strong>#456</strong></p>\n\n<p>It works if I check it when the document loads.\nBut if I have #hash based navigation it doesn't work when I press the back button on the browser (so I jump from blah#456 to blah#123). It shows inside the address box, but I can't catch it with JavaScript.</p>\n",
            "last_activity_date": 1420237391,
            "question_id": 680785,
            "score": 338,
            "tags": [
                "javascript",
                "ajax",
                "javascript-events",
                "fragment-identifier",
                "hashchange"
            ],
            "title": "On - window.location.hash - change?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>There is no definitive answer to this, as each browser has its own configuration for this, and this configuration may be changed. If you search on the internet you can find ways to change this limit (usually they're branded as \"performance enhancement methods.\") It might be worth advising your users to do so if it is required by your website.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<ol>\n<li>Yes, wildcard domain will work for you.</li>\n<li>Not aware of any limits on connections. Limits if any will be browser specific.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Max Number of default simultaneous persistent connections per server/proxy:</p>\n\n<pre><code>Firefox 2:  2\nFirefox 3+: 6\nOpera 9.26: 4\nOpera 12:   6\nSafari 3:   4\nSafari 5:   6\nIE 7:       2\nIE 8:       6\nIE 10:      8\nChrome:     6\n</code></pre>\n\n<p>The limit is per-server/proxy, so your wildcard scheme will work.</p>\n\n<p>FYI: this is specifically related to HTTP 1.1; other protocols have separate concerns and limitations (i.e., SPDY, TLS, HTTP 2).</p>\n",
                    "is_accepted": false,
                    "score": 173
                },
                {
                    "body": "<p>The 2 concurrent requests is an intentional part of the design of many browsers. There is a standard out there that \"good http clients\" adhere to on purpose. Check out <a href=\"http://www.ietf.org/rfc/rfc2616.txt\" rel=\"nofollow\">this RFC</a> to see why.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Doing testing on a page I saw this behavior:</p>\n\n<pre><code>Safari 4: 6  \nChrome 6: 7  \nFF 4: 6\n</code></pre>\n\n<p>Edit: Seems that firefox 4 should be able to do 15 connections but that's not the behavior I observed.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Firefox stores that number in this setting (you find it in <code>about:config</code>): <code>network.http.max-connections-per-server</code></p>\n\n<p>For the max connections, Firefox stores that in this setting: <code>network.http.max-connections</code></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Note that increasing a browser's max connections per server to an excessive number (as some sites suggest) can and does lock other users out of small sites with hosting plans that limit the total simultaneous connections on the server.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Various browsers have various limits for maximum connections per host name; you can find the exact numbers at <a href=\"http://www.browserscope.org/?category=network\">http://www.browserscope.org/?category=network</a>\nand here is an interesting article about connection limitations from web performance expert Steve Souders <a href=\"http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/\">http://www.stevesouders.com/blog/2008/03/20/roundup-on-parallel-connections/</a></p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<pre><code>IE 6 and 7:      2\nIE 8:            6\nIE 9:            6\nIE 10:           8\nIE 11:           8\nFirefox 2:       2\nFirefox 3:       6\nFirefox 4 to 17: 6\nOpera 9.63:      4\nOpera 10:        8\nOpera 11 and 12: 6\nChrome 1 and 2:  6\nChrome 3:        4\nChrome 4 to 23:  6\nSafari 3 and 4:  4\n</code></pre>\n\n<p>source: <a href=\"http://p2p.wrox.com/book-professional-website-performance-optimizing-front-end-back-end-705/\" rel=\"nofollow\">http://p2p.wrox.com/book-professional-website-performance-optimizing-front-end-back-end-705/</a></p>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>Looking at <code>about:config</code> on Firefox 33 on GNU/Linux (Ubuntu), and searching <code>connections</code> I found:</p>\n\n<blockquote>\n  <p>network.http.max-connections: 256</p>\n</blockquote>\n\n<p>That is likely to answer the part <em>is there any limit to the number of active connections per browser, across all domain</em></p>\n\n<blockquote>\n  <p>network.http.max-persistent-connections-per-proxy: 32</p>\n  \n  <p>network.http.max-persistent-connections-per-server: 6 </p>\n</blockquote>\n\n<p><em>skipped two properties...</em></p>\n\n<blockquote>\n  <p>network.websocket.max-connections: 200 </p>\n</blockquote>\n\n<p>(interesting, seems like they are not limited per server but have a default value lower than global http connections)</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am creating some suspended connections to an http server (comet, reverse ajax, etc). It works ok, but I see the browser only allows two suspended connections to a given domain simultaneously. So if a user is looking at my web app in Tab1 of their browser, then also tries loading it in Tab2, they've used up the two allowed connections to my site.</p>\n\n<p>I think I can do some wildcard domain thing, where I have my http server resolve any address to my site like:</p>\n\n<pre><code>*.mysite.com/webapp  -&gt; 123.456.789.1 (the actual ip of my server)\n</code></pre>\n\n<p>so:</p>\n\n<pre><code>a.mysite.com/webapp\nb.mysite.com/webapp\nc.mysite.com/webapp\n</code></pre>\n\n<p>all still point to (www.mysite.com/webapp) but the browser considers them different domains, so I don't run into the 2 connection limit. Is this true?</p>\n\n<p>Even if that <em>is</em> true - is there any limit to the number of active connections per browser, across all domains? Say I use the scheme above - does firefox for example only allow 24 parallel connections at any given time? Something like:</p>\n\n<pre><code>1) a.mysite.com/webapp\n2) www.download.com/hugefile.zip\n3) b.mysite.com/webapp\n4) c.mysite.com/webapp\n...\n24) x.mysite.com/webapp\n25) // Error - all 24 possible connections currently in use!\n</code></pre>\n\n<p>I just picked 24 connections/firefox as an example.</p>\n\n<p>Thanks</p>\n",
            "last_activity_date": 1423157404,
            "question_id": 985431,
            "score": 154,
            "tags": [
                "javascript",
                "html",
                "http",
                "web-applications",
                "persistent-connection"
            ],
            "title": "Max parallel http connections in a browser?"
        },
        {
            "answer_count": 22,
            "answers": [
                {
                    "body": "<p>New solution ( which uses <code>Array.prototype.indexOf</code> and <code>Array.prototype.concat</code> ):</p>\n\n<pre><code>Array.prototype.uniqueMerge = function( a ) {\n    for ( var nonDuplicates = [], i = 0, l = a.length; i&lt;l; ++i ) {\n        if ( this.indexOf( a[i] ) === -1 ) {\n            nonDuplicates.push( a[i] );\n        }\n    }\n    return this.concat( nonDuplicates )\n};\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&gt;&gt;&gt; ['Vijendra', 'Singh'].uniqueMerge(['Singh', 'Shakya'])\n[\"Vijendra\", \"Singh\", \"Shakya\"]\n</code></pre>\n\n<p>Array.prototype.indexOf ( for internet explorer ):</p>\n\n<pre><code>Array.prototype.indexOf = Array.prototype.indexOf || function(elt)\n  {\n    var len = this.length &gt;&gt;&gt; 0;\n\n    var from = Number(arguments[1]) || 0;\n    from = (from &lt; 0) ? Math.ceil(from): Math.floor(from); \n    if (from &lt; 0)from += len;\n\n    for (; from &lt; len; from++)\n    {\n      if (from in this &amp;&amp; this[from] === elt)return from;\n    }\n    return -1;\n  };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To just merge the arrays (without removing duplicates) use <code>Array.concat</code>:</p>\n\n<pre><code>var array1 = [\"Vijendra\",\"Singh\"];\nvar array2 = [\"Singh\", \"Shakya\"];\n\nvar array3 = array1.concat(array2); // Merges both arrays\n// [ 'Vijendra', 'Singh', 'Singh', 'Shakya' ]\n</code></pre>\n\n<p>Since there is no 'built in' way to remove duplicate (<a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\">ECMA-262</a> actually has <code>Array.forEach</code> which would be great for this..), so we do it manually:</p>\n\n<pre><code>Array.prototype.unique = function() {\n    var a = this.concat();\n    for(var i=0; i&lt;a.length; ++i) {\n        for(var j=i+1; j&lt;a.length; ++j) {\n            if(a[i] === a[j])\n                a.splice(j--, 1);\n        }\n    }\n\n    return a;\n};\n</code></pre>\n\n<p>Then, to use it:</p>\n\n<pre><code>var array1 = [\"Vijendra\",\"Singh\"];\nvar array2 = [\"Singh\", \"Shakya\"];\n// Merges both arrays and gets unique items\nvar array3 = array1.concat(array2).unique(); \n</code></pre>\n\n<p>This will also preserve the order of the arrays (i.e, no sorting needed).</p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>Since many people are annoyed about prototype augmentation of <code>Array.prototype</code> and <code>for in</code> loops, here is a less invasive way to use it:</p>\n\n<pre><code>function arrayUnique(array) {\n    var a = array.concat();\n    for(var i=0; i&lt;a.length; ++i) {\n        for(var j=i+1; j&lt;a.length; ++j) {\n            if(a[i] === a[j])\n                a.splice(j--, 1);\n        }\n    }\n\n    return a;\n};\n\nvar array1 = [\"Vijendra\",\"Singh\"];\nvar array2 = [\"Singh\", \"Shakya\"];\n    // Merges both arrays and gets unique items\nvar array3 = arrayUnique(array1.concat(array2));\n</code></pre>\n\n<p>For those who are fortunate enough to work with progressive browsers where ES5 is available, you can use <code>Object.defineProperty</code>:</p>\n\n<pre><code>Object.defineProperty(Array.prototype, 'unique' {\n    enumerable: false,\n    configurable: false,\n    writable: false,\n    value: function() {\n        var a = this.concat();\n        for(var i=0; i&lt;a.length; ++i) {\n            for(var j=i+1; j&lt;a.length; ++j) {\n                if(a[i] === a[j])\n                    a.splice(j--, 1);\n            }\n        }\n\n        return a;\n    }\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 624
                },
                {
                    "body": "<pre><code>//Array.indexOf was introduced in javascript 1.6 (ECMA-262) \n//We need to implement it explicitly for other browsers, \nif (!Array.prototype.indexOf)\n{\n  Array.prototype.indexOf = function(elt, from)\n  {\n    var len = this.length &gt;&gt;&gt; 0;\n\n    for (; from &lt; len; from++)\n    {\n      if (from in this &amp;&amp;\n          this[from] === elt)\n        return from;\n    }\n    return -1;\n  };\n}\n//now, on to the problem\n\nvar array1 = [\"Vijendra\",\"Singh\"];\nvar array2 = [\"Singh\", \"Shakya\"];\n\nvar merged = array1.concat(array2);\nvar t;\nfor(i = 0; i &lt; merged.length; i++)\n  if((t = merged.indexOf(i + 1, merged[i])) != -1)\n  {\n    merged.splice(t, 1);\n    i--;//in case of multiple occurrences\n  }\n</code></pre>\n\n<p>Implementation of <code>indexOf</code> method for other browsers is taken from <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Global%5FObjects/Array/indexOf\">MDC</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Why don't you use an object?  It looks like you're trying to model a set.  This wont preserve the order, however.</p>\n\n<pre><code>var set1 = {\"Vijendra\":true, \"Singh\":true}\nvar set2 = {\"Singh\":true,  \"Shakya\":true}\n\n// Merge second object into first\nfunction merge(set1, set2){\n  for (var key in set2){\n    if (set2.hasOwnProperty(key))\n      set1[key] = set2[key]\n  }\n  return set1\n}\n\nmerge(set1, set2)\n\n// Create set from array\nfunction setify(array){\n  var result = {}\n  for (var item in array){\n    if (array.hasOwnProperty(item))\n      result[array[item]] = true\n  }\n  return result\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>Array.prototype.merge = function(/* variable number of arrays */){\n    for(var i = 0; i &lt; arguments.length; i++){\n        var array = arguments[i];\n        for(var j = 0; j &lt; array.length; j++){\n            if(this.indexOf(array[j]) === -1) {\n                this.push(array[j]);\n            }\n        }\n    }\n    return this;\n};\n</code></pre>\n\n<p>A much better array merge function. </p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>In Dojo 1.6+</p>\n\n<pre><code>var unique = []; \nvar array1 = [\"Vijendra\",\"Singh\"];\nvar array2 = [\"Singh\", \"Shakya\"];\nvar array3 = array1.concat(array2); // Merged both arrays\n\ndojo.forEach(array3, function(item) {\n    if (dojo.indexOf(unique, item) &gt; -1) return;\n    unique.push(item); \n});\n</code></pre>\n\n<p><strong>Update</strong></p>\n\n<p>See working code.</p>\n\n<p><a href=\"http://jsfiddle.net/UAxJa/1/\" rel=\"nofollow\">http://jsfiddle.net/UAxJa/1/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Time flies when you're having fun. With Underscore or Lo-Dash you can do:</p>\n\n<pre><code>_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);\n=&gt; [1, 2, 3, 101, 10]\n</code></pre>\n\n<p><a href=\"http://documentcloud.github.com/underscore/#union\">http://documentcloud.github.com/underscore/#union</a></p>\n\n<p><a href=\"http://lodash.com/docs#union\">http://lodash.com/docs#union</a></p>\n",
                    "is_accepted": false,
                    "score": 211
                },
                {
                    "body": "<p>Just throwing in my two cents.</p>\n\n<pre><code>function mergeStringArrays(a, b){\n    var hash = {};\n    var ret = [];\n\n    for(var i=0; i &lt; a.length; i++){\n        var e = a[i];\n        if (!hash[e]){\n            hash[e] = true;\n            ret.push(e);\n        }\n    }\n\n    for(var i=0; i &lt; b.length; i++){\n        var e = b[i];\n        if (!hash[e]){\n            hash[e] = true;\n            ret.push(e);\n        }\n    }\n\n    return ret;\n}\n</code></pre>\n\n<p>This is a method I use a lot, it uses an object as a hashlookup table to do the duplicate checking. Assuming that the hash is O(1), then this runs in O(n) where n is a.length + b.length. I honestly have no idea how the browser does the hash, but it performs well on many thousands of data points.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Take two arrays a and b</p>\n\n<pre><code>var a = ['a','b','c'];\n\nvar b = ['d','e','f'];\nvar c = a.concat(b); \n\n\n//c is now an an array with: ['a','b','c','d','e','f']\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here is my solution <a href=\"https://gist.github.com/4692150\" rel=\"nofollow\">https://gist.github.com/4692150</a> with deep equals and easy to use result:</p>\n\n<pre><code>function merge_arrays(arr1,arr2)\n{\n   ... \n   return {first:firstPart,common:commonString,second:secondPart,full:finalString}; \n}\n\nconsole.log(merge_arrays(\n[\n[1,\"10:55\"] ,\n[2,\"10:55\"] ,\n[3,\"10:55\"]\n],[\n[3,\"10:55\"] ,\n[4,\"10:55\"] ,\n[5,\"10:55\"]\n]).second);\n\nresult:\n[\n[4,\"10:55\"] ,\n[5,\"10:55\"]\n]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>Array.prototype.add = function(b){\n    var a = this.concat();                // clone current object\n    if(!b.push || !b.length) return a;    // if b is not an array, or empty, then return a unchanged\n    if(!a.length) return b.concat();      // if original is empty, return b\n\n    // go through all the elements of b\n    for(var i = 0; i &lt; b.length; i++){\n        // if b's value is not in a, then add it\n        if(a.indexOf(b[i]) == -1) a.push(b[i]);\n    }\n    return a;\n}\n\n// Example:\nconsole.log([1,2,3].add([3, 4, 5])); // will output [1, 2, 3, 4, 5]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Um ya all good ideas, thanks!</p>\n\n<pre><code>Array.prototype.merge = function (arr) {\n    var key;\n    for(key in arr) this[key] = arr[key];\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Just wrote before for the same reason (works with any amount of arrays):</p>\n\n<pre><code>/**\n * Returns with the union of the given arrays.\n *\n * @param Any amount of arrays to be united.\n * @returns {array} The union array.\n */\nfunction uniteArrays()\n{\n    var union = [];\n    for (var argumentIndex = 0; argumentIndex &lt; arguments.length; argumentIndex++)\n    {\n        eachArgument = arguments[argumentIndex];\n        if (typeof eachArgument !== 'array')\n        {\n            eachArray = eachArgument;\n            for (var index = 0; index &lt; eachArray.length; index++)\n            {\n                eachValue = eachArray[index];\n                if (arrayHasValue(union, eachValue) == false)\n                union.push(eachValue);\n            }\n        }\n    }\n\n    return union;\n}    \n\nfunction arrayHasValue(array, value)\n{ return array.indexOf(value) != -1; }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Merge an unlimited number of arrays or non-arrays and keep it unique:</p>\n\n<pre><code>function flatMerge() {\n    return Array.prototype.reduce.call(arguments, function (result, current) {\n        if (!(current instanceof Array)) {\n            if (result.indexOf(current) === -1) {\n                result.push(current);\n            }\n        } else {\n            current.forEach(function (value) {\n                console.log(value);\n                if (result.indexOf(value) === -1) {\n                    result.push(value);\n                }\n            });\n        }\n        return result;\n    }, []);\n}\n\nflatMerge([1,2,3], 4, 4, [3, 2, 1, 5], [7, 6, 8, 9], 5, [4], 2, [3, 2, 5]);\n// [1, 2, 3, 4, 5, 7, 6, 8, 9]\n\nflatMerge([1,2,3], [3, 2, 1, 5], [7, 6, 8, 9]);\n// [1, 2, 3, 5, 7, 6, 8, 9]\n\nflatMerge(1, 3, 5, 7);\n// [1, 3, 5, 7]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>First concatenate the two arrays, next filter out only the unique items.</p>\n\n<pre><code>var a = [1, 2, 3], b = [101, 2, 1, 10];\nvar c = a.concat(b);\nvar d = c.filter(function (item, pos) {return c.indexOf(item) == pos});\n\n// d is [1,2,3,101,10]\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/simo/98622/\" rel=\"nofollow\">http://jsfiddle.net/simo/98622/</a></p>\n\n<h3>Edit</h3>\n\n<p>As suggested by @Dmitry (see the second comment below) a more performance wise solution would be to filter out the unique items in <code>b</code> before concatenating with <code>a</code></p>\n\n<pre><code>var a = [1, 2, 3], b = [101, 2, 1, 10];\nvar c = a.concat(b.filter(function (item) {\n    return a.indexOf(item) &lt; 0;\n}));\n\n// d is [1,2,3,101,10]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>This is the function I use when I need to merge, (or return the union of) two arrays.</p>\n\n<pre><code>var union = function (a, b) {\n  for (var i = 0; i &lt; b.length; i++)\n    if (a.indexOf(b[i]) === -1)\n      a.push(b[i]);\n  return a;\n};\n\nvar a = [1, 2, 3, 'a', 'b', 'c'];\nvar b = [2, 3, 4, 'b', 'c', 'd'];\n\na = union(a, b);\n//&gt; [1, 2, 3, \"a\", \"b\", \"c\", 4, \"d\"]\n\nvar array1 = [\"Vijendra\", \"Singh\"];\nvar array2 = [\"Singh\", \"Shakya\"];\n\nvar array3 = union(array1, array2);\n//&gt; [\"Vijendra\", \"Singh\", \"Shakya\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function set(a, b) {\n  return a.concat(b).filter(function(x,i,c) { return c.indexOf(x) == i; });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is about the most effective one, in terms of computation time. Also keeps initial order of elements.\nFirst filter all duplicates from second array, then concat what is left to the first one.</p>\n\n<pre><code>var a = [1,2,3];\nvar b = [5,4,3];\nvar c = a.concat(b.filter(function(i){\n    return a.indexOf(i) == -1;\n}));\nconsole.log(c); // [1, 2, 3, 5, 4]\n</code></pre>\n\n<p><em>Edit</em></p>\n\n<p>Here is slightly improved(faster) version of it, with a downside, that arrays must not miss values</p>\n\n<pre><code>var i, c = a.slice(), ci = c.length;\nfor(i = 0; i &lt; b.length; i++){\n    if(c.indexOf(b[i]) == -1) c[ci++] = b[i];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a slightly different take on the loop. With some of the optimizations in the latest version of chrome, it is the fastest method for resolving the union of the two arrays (Chrome 38.0.2111).</p>\n\n<p><a href=\"http://jsperf.com/merge-two-arrays-keeping-only-unique-values\">http://jsperf.com/merge-two-arrays-keeping-only-unique-values</a></p>\n\n<pre><code>var array1 = [\"Vijendra\", \"Singh\"];\nvar array2 = [\"Singh\", \"Shakya\"];\nvar array3 = [];\n\nvar arr = array1.concat(array2),\n  len = arr.length;\n\nwhile (len--) {\n  var itm = arr[len];\n  if (array3.indexOf(itm) === -1) {\n    array3.unshift(itm);\n  }\n}\n</code></pre>\n\n<p>while loop: ~589k ops/s</p>\n\n<p>filter: ~445k ops/s</p>\n\n<p>lodash: 308k ops/s</p>\n\n<p>for loops: 225k ops/s</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>This is simple and can be done in one line with jquery</p>\n\n<pre><code>var arr1 = ['Vijendra', 'Singh'], arr2 =['Singh', 'Shakya'];\n\n$.unique(arr1.concat(arr2))//one line\n\n[\"Vijendra\", \"Singh\", \"Shakya\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>es6 solution using <a href=\"http://kangax.github.io/compat-table/es6/#spread_%28...%29_operator\" rel=\"nofollow\">spread operator</a> and array generics.<br>\nCurrently only works with Firefox, and possibly IE Technical Preview.</p>\n\n<pre><code>// Input: [ [1, 2, 3], [101, 2, 1, 10], [2, 1] ]\n// Output: [1, 2, 3, 101, 10]\nfunction mergeDedupe( arr )\n{\n  return [ ...new Set( Array.concat( ...arr ) ) ];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Just steer clear of nested loops (O(n^2)), and <code>.indexOf()</code> (+O(n)).</p>\n\n<pre><code>function merge(a, b) {\n    var hash = {}, i;\n    for (i=0; i&lt;a.length; i++) {\n        hash[a[i]]=true;\n    } \n    for (i=0; i&lt;b.length; i++) {\n        hash[b[i]]=true;\n    } \n    return Object.keys(hash);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have two JavaScript arrays:</p>\n\n<pre><code>var array1 = [\"Vijendra\",\"Singh\"];\nvar array2 = [\"Singh\", \"Shakya\"];\n</code></pre>\n\n<p>I want the output to be:</p>\n\n<pre><code>var array3 = [\"Vijendra\",\"Singh\",\"Shakya\"];\n</code></pre>\n\n<p>The output array should have repeated words removed.</p>\n\n<p>How do I merge two arrays in JavaScript so that I get only the unique items from each array in the same order they were inserted into the original arrays?</p>\n",
            "last_activity_date": 1425335145,
            "question_id": 1584370,
            "score": 408,
            "tags": [
                "javascript",
                "merge"
            ],
            "title": "How to merge two arrays in Javascript and de-duplicate items"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>This is as close as you can get to full screen in JavaScript:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    window.onload = maxWindow;\n\n    function maxWindow() {\n        window.moveTo(0, 0);\n\n\n        if (document.all) {\n            top.window.resizeTo(screen.availWidth, screen.availHeight);\n        }\n\n        else if (document.layers || document.getElementById) {\n            if (top.window.outerHeight &lt; screen.availHeight || top.window.outerWidth &lt; screen.availWidth) {\n                top.window.outerHeight = screen.availHeight;\n                top.window.outerWidth = screen.availWidth;\n            }\n        }\n    }\n\n&lt;/script&gt; \n</code></pre>\n",
                    "is_accepted": true,
                    "score": 30
                },
                {
                    "body": "<p>Luckily for unsuspecting web users this cannot be done with just javascript. You would need to write browser specific plugins, if they didn't already exist, and then somehow get people to download them. The closest you can get is a maximized window with no tool or navigation bars but users will still be able to see the url.</p>\n\n<p><code>\nwindow.open('<a href=\"http://www.web-page.com\" rel=\"nofollow\">http://www.web-page.com</a>', 'title' , 'type=fullWindow, fullscreen, scrollbars=yes');\">\n</code></p>\n\n<p>This is generally considered bad practice though as it removes a lot of browser functionality from the user.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This may support    </p>\n\n<pre><code>&lt;%@ Page Language=\"C#\" AutoEventWireup=\"true\" CodeFile=\"Default5.aspx.cs\" Inherits=\"PRODUCTION_Default5\" %&gt;\n\n    &lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n\n    &lt;html xmlns=\"http://www.w3.org/1999/xhtml\" &gt;\n    &lt;head runat=\"server\"&gt;\n        &lt;title&gt;Untitled Page&lt;/title&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            function max()\n            {\n               window.open(\"\", \"_self\", \"fullscreen=yes, scrollbars=auto\"); \n            }\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body onload=\"max()\"&gt;\n        &lt;form id=\"form1\" runat=\"server\"&gt;\n        &lt;div&gt;\n        This is Test Page\n        &lt;/div&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I've used this...</p>\n\n<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script language=\"JavaScript\"&gt;\nfunction fullScreen(theURL) {\nwindow.open(theURL, '', 'fullscreen=yes, scrollbars=auto');\n}\n// End --&gt;\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;h1 style=\"text-align: center;\"&gt;\nOpen In Full Screen\n&lt;/h1&gt;&lt;div style=\"text-align: center;\"&gt;&lt;br&gt;\n&lt;a href=\"javascript:void(0);\" onclick=\"fullScreen('http://google.com');\"&gt;\nOpen Full Screen Window\n&lt;/a&gt;\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>In newer browsers such as Chrome 15, Firefox 10, Safari 5.1, IE 10 this is possible. It's also possible for older IE's via ActiveX depending on their browser settings. Here's how to do it:</p>\n\n<pre><code>function requestFullScreen(element) {\n    // Supports most browsers and their versions.\n    var requestMethod = element.requestFullScreen || element.webkitRequestFullScreen || element.mozRequestFullScreen || element.msRequestFullscreen;\n\n    if (requestMethod) { // Native full screen.\n        requestMethod.call(element);\n    } else if (typeof window.ActiveXObject !== \"undefined\") { // Older IE.\n        var wscript = new ActiveXObject(\"WScript.Shell\");\n        if (wscript !== null) {\n            wscript.SendKeys(\"{F11}\");\n        }\n    }\n}\n\nvar elem = document.body; // Make the body go full screen.\nrequestFullScreen(elem);\n</code></pre>\n\n<p>The user obviously needs to accept this fullscreen request first.</p>\n\n<p>Read more: <a href=\"https://developer.mozilla.org/en/DOM/Using_full-screen_mode\">https://developer.mozilla.org/en/DOM/Using_full-screen_mode</a></p>\n",
                    "is_accepted": false,
                    "score": 150
                },
                {
                    "body": "<p>This code also includes how to enable full screen for Internet Explorer 9, and probably older versions,\n as well as very recent versions of Google Chrome. The accepted answer may also be used for other browsers.</p>\n\n<pre><code>var el = document.documentElement\n    , rfs = // for newer Webkit and Firefox\n           el.requestFullScreen\n        || el.webkitRequestFullScreen\n        || el.mozRequestFullScreen\n        || el.msRequestFullscreen\n;\nif(typeof rfs!=\"undefined\" &amp;&amp; rfs){\n  rfs.call(el);\n} else if(typeof window.ActiveXObject!=\"undefined\"){\n  // for Internet Explorer\n  var wscript = new ActiveXObject(\"WScript.Shell\");\n  if (wscript!=null) {\n     wscript.SendKeys(\"{F11}\");\n  }\n}\n</code></pre>\n\n<p>Sources:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/7836204/chrome-fullscreen-api\">Chrome Fullscreen API</a> (note, however, that \n<code>requestFullScreen</code> \"only works during\" \"[m]ost UIEvents and MouseEvents, such as click and keydown, etc.\", \"so it cannot be used maliciously\".)</li>\n<li><a href=\"http://stackoverflow.com/questions/7495373/how-to-make-browser-full-screen-using-f11-key-event-through-JavaScript\">How to make browser full screen using F11 key event through JavaScript</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 50
                },
                {
                    "body": "<p>Try this script</p>\n\n<pre><code>&lt;script language=\"JavaScript\"&gt;\nfunction fullScreen(theURL) {\nwindow.open(theURL, '', 'fullscreen=yes, scrollbars=auto' );\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>For calling from script use this code,</p>\n\n<pre><code>window.fullScreen('fullscreen.jsp');\n</code></pre>\n\n<p>or with hyperlink use this</p>\n\n<pre><code>&lt;a href=\"javascript:void(0);\" onclick=\"fullScreen('fullscreen.jsp');\"&gt; \nOpen in Full Screen Window&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In Firefox 10, you can make the current page go fullscreen (real fullscreen with no window chrome) using this javascript:</p>\n\n<pre><code>window.fullScreen = true;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A Q&amp;D way to go full screen, if you are in a \"kiosk\" situation, is to feed an F11 to the browser window after it's up and running. This is not pretty starting up and the user might be able to poke a touch screen at the top and get a semi-full-screen view, but feeding the F11 might do in a pinch or just to get started on a project.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a complete solution to get in and out of full screen mode (aka cancel, exit, escape)</p>\n\n<pre><code>        function cancelFullScreen(el) {\n            var requestMethod = el.cancelFullScreen||el.webkitCancelFullScreen||el.mozCancelFullScreen||el.exitFullscreen;\n            if (requestMethod) { // cancel full screen.\n                requestMethod.call(el);\n            } else if (typeof window.ActiveXObject !== \"undefined\") { // Older IE.\n                var wscript = new ActiveXObject(\"WScript.Shell\");\n                if (wscript !== null) {\n                    wscript.SendKeys(\"{F11}\");\n                }\n            }\n        }\n\n        function requestFullScreen(el) {\n            // Supports most browsers and their versions.\n            var requestMethod = el.requestFullScreen || el.webkitRequestFullScreen || el.mozRequestFullScreen || el.msRequestFullscreen;\n\n            if (requestMethod) { // Native full screen.\n                requestMethod.call(el);\n            } else if (typeof window.ActiveXObject !== \"undefined\") { // Older IE.\n                var wscript = new ActiveXObject(\"WScript.Shell\");\n                if (wscript !== null) {\n                    wscript.SendKeys(\"{F11}\");\n                }\n            }\n            return false\n        }\n\n        function toggleFull() {\n            var elem = document.body; // Make the body go full screen.\n            var isInFullScreen = (document.fullScreenElement &amp;&amp; document.fullScreenElement !== null) ||  (document.mozFullScreen || document.webkitIsFullScreen);\n\n            if (isInFullScreen) {\n                cancelFullScreen(document);\n            } else {\n                requestFullScreen(elem);\n            }\n            return false;\n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You can use <a href=\"https://developer.mozilla.org/en-US/docs/DOM/Using_fullscreen_mode\" rel=\"nofollow\">The fullscreen API</a>\nYou can see <a href=\"https://developer.mozilla.org/samples/domref/fullscreen.html\" rel=\"nofollow\">an example here</a></p>\n\n<blockquote>\n  <p>The fullscreen API provides an easy way for web content to be\n  presented using the user's entire screen. This article provides\n  information about using this API.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Simple example from: <a href=\"http://www.longtailvideo.com/blog/26517/using-the-browsers-new-html5-fullscreen-capabilities/\" rel=\"nofollow\">http://www.longtailvideo.com/blog/26517/using-the-browsers-new-html5-fullscreen-capabilities/</a></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n  function goFullscreen(id) {\n    // Get the element that we want to take into fullscreen mode\n    var element = document.getElementById(id);\n\n    // These function will not exist in the browsers that don't support fullscreen mode yet, \n    // so we'll have to check to see if they're available before calling them.\n\n    if (element.mozRequestFullScreen) {\n      // This is how to go into fullscren mode in Firefox\n      // Note the \"moz\" prefix, which is short for Mozilla.\n      element.mozRequestFullScreen();\n    } else if (element.webkitRequestFullScreen) {\n      // This is how to go into fullscreen mode in Chrome and Safari\n      // Both of those browsers are based on the Webkit project, hence the same prefix.\n      element.webkitRequestFullScreen();\n   }\n   // Hooray, now we're in fullscreen mode!\n  }\n&lt;/script&gt;\n\n&lt;img class=\"video_player\" src=\"image.jpg\" id=\"player\"&gt;&lt;/img&gt;\n&lt;button onclick=\"goFullscreen('player'); return false\"&gt;Click Me To Go Fullscreen! (For real)&lt;/button&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<blockquote>\n  <p><strong>The new html5 technology \u2013</strong> fullscreen API gives us an easy way to\n  present a web page content in full-screen mode. We are about to give\n  you detailed information about the fullscreen mode. Just try to\n  imagine about all possible advantages which you can get using this\n  technology \u2013 full-screen photo albums, videos, and even games.</p>\n</blockquote>\n\n<p>But before we describe this new technology, I have to note that this technology is experimental, and <strong><em>supported by all major Browsers</em></strong>.</p>\n\n<p><strong>You can find the full tutorial here :</strong> <a href=\"http://www.css-jquery-design.com/2013/11/javascript-jquery-fullscreen-browser-window-html5-technology/\" rel=\"nofollow\">http://www.css-jquery-design.com/2013/11/javascript-jquery-fullscreen-browser-window-html5-technology/</a></p>\n\n<p><strong>Here is working Demo :</strong> <a href=\"http://demo.web3designs.com/javascript-jquery-fullscreen-browser-window-html5-technology.htm\" rel=\"nofollow\">http://demo.web3designs.com/javascript-jquery-fullscreen-browser-window-html5-technology.htm</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How can I make full screen in JavaScript that works in IE, Firefox and Opera. \nWhen I mean full screen I mean one that takes all of your screen </p>\n",
            "last_activity_date": 1424278401,
            "question_id": 1125084,
            "score": 135,
            "tags": [
                "javascript",
                "fullscreen"
            ],
            "title": "How to make in Javascript full screen windows (stretching all over the screen)"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I think is for prevent the browser's HTML parser from interpreting the &lt;script&gt;, and mainly the  &lt;/script&gt; as the closing tag of the actual script, however I don't think that using document.write is a excellent idea for evaluating script blocks, why don't use the DOM...</p>\n\n<pre><code>var newScript = document.createElement(\"script\");\n...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p><code>&lt;/script&gt;</code> has to be broken up because otherwise it would end the enclosing <code>&lt;script&gt;&lt;/script&gt;</code> block too early. Really it should be split between the <code>&lt;</code> and the <code>/</code>, because a script block is supposed (according to SGML) to be <a href=\"http://www.w3.org/TR/html4/types.html#type-cdata\">terminated by any end-tag open (ETAGO) sequence (i.e. <code>&lt;/</code>)</a>:</p>\n\n<blockquote>\n  <p>Although the STYLE and SCRIPT elements use CDATA for their data model, for these elements, CDATA must be handled differently by user agents. Markup and entities must be treated as raw text and passed to the application as is. The first occurrence of the character sequence \"<code>&lt;/</code>\" (end-tag open delimiter) is treated as terminating the end of the element's content. In valid documents, this would be the end tag for the element.</p>\n</blockquote>\n\n<p>However in practice browsers only end parsing a CDATA script block on an actual <code>&lt;/script&gt;</code> close-tag.</p>\n\n<p>In XHTML there is no such special handling for script blocks, so any <code>&lt;</code> (or <code>&amp;</code>) character inside them must be <code>&amp;escaped;</code> like in any other element. However then browsers that are parsing XHTML as old-school HTML will get confused. There are workarounds involving CDATA blocks, but it's easiest simply to avoid using these characters unescaped. A better way of writing a script element from script that works on either type of parser would be:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    document.write('\\x3Cscript type=\"text/javascript\" src=\"foo.js\"&gt;\\x3C/script&gt;');\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 224
                },
                {
                    "body": "<p>I would say it is to avoid a bug of some browsers which shouldn't stop the script section on a tag in a JS string...</p>\n\n<p>Personally, should I use such code, I would prefer to write something like '&lt;\\x2Fscript>' (for example) instead of '&lt;/'+'script>', at least it avoids an operation... And it looks cooler, less like a bad hack... :-P</p>\n\n<p>[EDIT 2012-08] OK, according to the accepted answer, it is not a bug, it is following the spec, although one can say the bug is in the spec... That, as well as other points like no -- in HTML comments, is annoying.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Here's another variation I've used when wanting to generate a script tag inline (so it executes immediately) without needing any form of escapes:</p>\n\n<pre><code>&lt;script&gt;\n    var script = document.createElement('script');\n    script.src = '/path/to/script.js';\n    document.write(script.outerHTML);\n&lt;/script&gt;\n</code></pre>\n\n<p>(Note: contrary to most examples on the net, I'm not setting <code>type=\"text/javascript\"</code> on neither the enclosing tag, nor the generated one: there is no browser not having that as the default, and so it is redundant, but will not hurt either, if you disagree).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The solution Bobince posted works perfectly for me. I wanted to offer an alternative method as well for future visitors:</p>\n\n<pre><code>if (typeof(jQuery) == 'undefined') {\n    (function() {\n        var sct = document.createElement('script');\n        sct.src = ('https:' == document.location.protocol ? 'https' : 'http') +\n          '://ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js';\n        sct.type = 'text/javascript';\n        sct.async = 'true';\n        var domel = document.getElementsByTagName('script')[0];\n        domel.parentNode.insertBefore(sct, domel);\n    })();\n}\n</code></pre>\n\n<p>In this example, I've included a conditional load for jQuery to demonstrate use case. Hope that's useful for someone!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The <code>&lt;/script&gt;</code> inside the Javascript string litteral is interpreted by the HTML parser as a closing tag, causing unexpected behaviour (<a href=\"http://jsfiddle.net/8axv2quv/\" rel=\"nofollow\">see example on JSFiddle</a>).</p>\n\n<p>To avoid this, you can place your javascript between comments (this style of coding was common practice, back when Javascript was poorly supported among browsers). This would work (<a href=\"http://jsfiddle.net/aqgng3o4/1/\" rel=\"nofollow\">see example in JSFiddle</a>):</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    &lt;!--\n    if (jQuery === undefined) {\n        document.write('&lt;script type=\"text/javascript\" src=\"http://z-ecx.images-amazon.com/images/G/01/javascripts/lib/jquery/jquery-1.2.6.pack._V265113567_.js\"&gt;&lt;/script&gt;');\n    }\n    // --&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>...but to be honest, using <code>document.write</code> is not something I would consider best practice. Why not manipulating the DOM directly?</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    &lt;!--\n    if (jQuery === undefined) {\n        var script = document.createElement('script');\n        script.setAttribute('type', 'text/javascript');\n        script.setAttribute('src', 'http://z-ecx.images-amazon.com/images/G/01/javascripts/lib/jquery/jquery-1.2.6.pack._V265113567_.js');\n        document.body.append(script);\n    }\n    // --&gt;\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Why do some sites (or advertisers that give clients javascript code) employ a technique of splitting the <code>&lt;script&gt;</code> and/or <code>&lt;/script&gt;</code> tags up within <code>document.write()</code> calls?</p>\n\n<p>I noticed that Amazon does this as well, for example:</p>\n\n<pre><code>&lt;script type='text/javascript'&gt;\n  if (typeof window['jQuery'] == 'undefined') document.write('&lt;scr'+'ipt type=\"text/javascript\" src=\"http://z-ecx.images-amazon.com/images/G/01/javascripts/lib/jquery/jquery-1.2.6.pack._V265113567_.js\"&gt;&lt;/sc'+'ript&gt;');\n&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1416909855,
            "question_id": 236073,
            "score": 131,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "Why split the &lt;script&gt; tag when writing it with document.write()?"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>HTML elements on most browsers will have:-</p>\n\n<pre><code>offsetLeft\noffsetTop\n</code></pre>\n\n<p>These specifiy the position of the element relative its nearest parent that has layout.  This parent can often be accessed bif the offsetParent property.</p>\n\n<p>IE and FF3 have</p>\n\n<pre><code>clientLeft\nclientTop\n</code></pre>\n\n<p>These properties are less common, they specify an elements position with its parents client area (padded area is part of the client area but border and margin is not).</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You might be better served by using a JavaScript framework, that has functions to return such information (and so much more!) in a browser-independant fashion. Here are a few:</p>\n\n<ul>\n<li><a href=\"http://www.prototypejs.org/\">Prototype</a></li>\n<li><a href=\"http://jquery.com/\">jQuery</a></li>\n<li><a href=\"http://mootools.net/\">MooTools</a></li>\n<li><a href=\"http://developer.yahoo.com/yui/\">YUI (yahoo)</a></li>\n</ul>\n\n<p>With these frameworks, you could do something like:\n<code>$('id-of-img').top</code>\nto get the y-pixel coordinate of the image.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>The libraries go to some lengths to get accurate offsets for an element.<br>\nhere's a simple function that does the job in every circumstances that I've tried.</p>\n\n<p>EDIT: see Adams's comment </p>\n\n<pre><code>function getOffset( el ) {\n    var _x = 0;\n    var _y = 0;\n    while( el &amp;&amp; !isNaN( el.offsetLeft ) &amp;&amp; !isNaN( el.offsetTop ) ) {\n        _x += el.offsetLeft - el.scrollLeft;\n        _y += el.offsetTop - el.scrollTop;\n        el = el.offsetParent;\n    }\n    return { top: _y, left: _x };\n}\nvar x = getOffset( document.getElementById('yourElId') ).left; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 146
                },
                {
                    "body": "<p>if using jQuery, the <a href=\"http://plugins.jquery.com/project/dimensions\" rel=\"nofollow\">dimensions plugin</a> is excellent and allows you specify exactly what you want.</p>\n\n<p>e.g.</p>\n\n<p>Relative position, absolute position, absolute position without padding, with padding...</p>\n\n<p>It goes on, let's just say there is a lot you can do with it.</p>\n\n<p>Plus the bonus of using jQuery is it's lightweight file size and easy use, you won't go back to JavaScript without it afterwards.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If page includes - at least- any \"DIV\", the function given by meouw throws the \"Y\" value beyond current page limits. In order to find the exact position, you need to handle both \"offsetParent\"s and \"parentNode\"s.</p>\n\n<p>Try the code given below (it is checked for FF2):</p>\n\n<pre><code>\nfunction findPos(obj) {\n var obj2 = obj;\n var curtop = 0;\n var curleft = 0;\n if (document.getElementById || document.all) {\n  do  {\n   curleft += obj.offsetLeft-obj.scrollLeft;\n   curtop += obj.offsetTop-obj.scrollTop;\n   obj = obj.offsetParent;\n   obj2 = obj2.parentNode;\n   while (obj2!=obj) {\n    curleft -= obj2.scrollLeft;\n    curtop -= obj2.scrollTop;\n    obj2 = obj2.parentNode;\n   }\n  } while (obj.offsetParent)\n } else if (document.layers) {\n  curtop += obj.y;\n  curleft += obj.x;\n }\n return [curtop, curleft];\n}   // end of findPos()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>jQuery <a href=\"http://api.jquery.com/offset/\">.offset()</a> does this</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This is the best code I've managed to create (works in iframes as well, unlike jQuery's offset()). Seems webkit has a bit of a different behavior.</p>\n\n<p>Based on meouw's comment:</p>\n\n<pre><code>function getOffset( el ) {\n    var _x = 0;\n    var _y = 0;\n    while( el &amp;&amp; !isNaN( el.offsetLeft ) &amp;&amp; !isNaN( el.offsetTop ) ) {\n        _x += el.offsetLeft - el.scrollLeft;\n        _y += el.offsetTop - el.scrollTop;\n        // chrome/safari\n        if ($.browser.webkit) {\n            el = el.parentNode;\n        } else {\n            // firefox/IE\n            el = el.offsetParent;\n        }\n    }\n    return { top: _y, left: _x };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can add two properties to the <code>Element.prototype</code> to get top/left of any element.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>window.Object.defineProperty( Element.prototype, 'documentOffsetTop', {\n    get: function () { \n        return this.offsetTop + ( this.offsetParent ? this.offsetParent.documentOffsetTop : 0 );\n    }\n} );\n\nwindow.Object.defineProperty( Element.prototype, 'documentOffsetLeft', {\n    get: function () { \n        return this.offsetLeft + ( this.offsetParent ? this.offsetParent.documentOffsetLeft : 0 );\n    }\n} );\n</code></pre>\n\n<p>Here's a demo comparing the results to jQuery's <code>offset().top</code> and <code>.left</code>: <a href=\"http://jsfiddle.net/ThinkingStiff/3G7EZ/\">http://jsfiddle.net/ThinkingStiff/3G7EZ/</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>The correct approach is to use <a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.getBoundingClientRect\"><code>element.getBoundingClientRect()</code></a>:</p>\n\n<pre><code>var rect = element.<a href=\"https://developer.mozilla.org/en-US/docs/DOM/element.getBoundingClientRect\">getBoundingClientRect</a>();\nconsole.log(rect.top, rect.right, rect.bottom, rect.left);</code></pre>\n\n<p>Internet Explorer has supported this since as long as you are likely to care about and it was finally standardized in <a href=\"http://www.w3.org/TR/cssom-view/#the-getclientrects-and-getboundingclientrect-methods\">CSSOM Views</a>.\u2002All other browsers adopted it <a href=\"http://www.quirksmode.org/dom/w3c_cssom.html#t21\">a long time ago</a>.</p>\n\n<p>Some browsers also return height and width properties, though this is non-standard.  If you're worried about older browser compatibility, check this answer's revisions for an optimised degrading implementation.</p>\n\n<p>The values returned by <code>element.getBoundingClientRect()</code> are relative to the viewport.  If you need it relative to another element, simply subtract one rectangle from the other:</p>\n\n<pre><code>var bodyRect = document.body.getBoundingClientRect(),\n    elemRect = element.getBoundingClientRect(),\n    offset   = elemRect.top - bodyRect.top;\n\nalert('Element is ' + offset + ' vertical pixels from &lt;body&gt;');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 398
                },
                {
                    "body": "<p>If you are using jQuery, this could be a simple solution:</p>\n\n<pre><code>&lt;script&gt;\n  var el = $(\"#element\");\n  var position = el.position();\n  console.log( \"left: \" + position.left + \", top: \" + position.top );\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>To retrieve the position relative to the page efficiently, and without using a recursive function: (includes IE also)</p>\n\n<pre><code>var element = document.getElementById('elementId'); //replace elementId with your element's Id.\nvar rect = element.getBoundingClientRect();\nvar elementLeft,elementTop; //x and y\nvar scrollTop = document.documentElement.scrollTop?\n                document.documentElement.scrollTop:document.body.scrollTop;\nvar scrollLeft = document.documentElement.scrollLeft?                   \n                 document.documentElement.scrollLeft:document.body.scrollLeft;\nelementTop = rect.top+scrollTop;\nelementLeft = rect.left+scrollLeft;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Just thought I'd throw this out there as well. <br/>\nI haven't been able to test it in older browsers, but it works in the latest of the top 3.  :)</p>\n\n<pre><code>Element.prototype.getOffsetTop = function() {\n    return ( this.parentElement )? this.offsetTop + this.parentElement.getOffsetTop(): this.offsetTop;\n};\nElement.prototype.getOffsetLeft = function() {\n    return ( this.parentElement )? this.offsetLeft + this.parentElement.getOffsetLeft(): this.offsetTop;\n};\nElement.prototype.getOffset = function() {\n    return {'left':this.getOffsetLeft(),'top':this.getOffsetTop()};\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I successfully used Andy E's solution to position a bootstrap 2 modal depending on what link in a table row a user clicks on. The page is a Tapestry 5 page and javascript below is imported in the java page class.</p>\n\n<p>javascript:</p>\n\n<pre><code>function setLinkPosition(clientId){\nvar bodyRect = document.body.getBoundingClientRect(),\nelemRect = clientId.getBoundingClientRect(),\noffset   = elemRect.top - bodyRect.top;\noffset   = offset + 20;\n$('#serviceLineModal').css(\"top\", offset);\n</code></pre>\n\n<p>}</p>\n\n<p>My modal code:</p>\n\n<pre><code>&lt;div id=\"serviceLineModal\" class=\"modal hide fade add-absolute-position\" data-backdrop=\"static\" \n tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\" aria-hidden=\"true\" style=\"top:50%;\"&gt;\n&lt;div class=\"modal-header\"&gt;\n    &lt;button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-hidden=\"true\"&gt;x&lt;/button&gt;\n    &lt;h3 id=\"myModalLabel\"&gt;Modal header&lt;/h3&gt;\n&lt;/div&gt;\n\n&lt;div class=\"modal-body\"&gt;\n    &lt;t:zone t:id=\"modalZone\" id=\"modalZone\"&gt;\n        &lt;p&gt;You selected service line number: ${serviceLineNumberSelected}&lt;/p&gt;\n    &lt;/t:zone&gt;\n&lt;/div&gt;\n\n&lt;div class=\"modal-footer\"&gt;\n    &lt;button class=\"btn\" data-dismiss=\"modal\" aria-hidden=\"true\"&gt;Close&lt;/button&gt;\n    &lt;!-- &lt;button class=\"btn btn-primary\"&gt;Save changes&lt;/button&gt; --&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p></p>\n\n<p>The link in the loop:</p>\n\n<pre><code>&lt;t:loop source=\"servicesToDisplay\" value=\"service\" encoder=\"encoder\"&gt;\n&lt;tr style=\"border-right: 1px solid black;\"&gt;       \n    &lt;td style=\"white-space:nowrap;\" class=\"add-padding-left-and-right no-border\"&gt; \n        &lt;a t:type=\"eventLink\" t:event=\"serviceLineNumberSelected\" t:context=\"service.serviceLineNumber\" \n            t:zone=\"pageZone\" t:clientId=\"modalLink${service.serviceLineNumber}\"\n            onmouseover=\"setLinkPosition(this);\"&gt;\n            &lt;i class=\"icon-chevron-down\"&gt;&lt;/i&gt; &lt;!-- ${service.serviceLineNumber} --&gt;\n        &lt;/a&gt;\n    &lt;/td&gt;\n</code></pre>\n\n<p>And the java code in the page class:</p>\n\n<pre><code>void onServiceLineNumberSelected(String number){\n    checkForNullSession();\n    serviceLineNumberSelected = number;\n    addOpenServiceLineDialogCommand();\n    ajaxResponseRenderer.addRender(modalZone);\n}\n\nprotected void addOpenServiceLineDialogCommand() {\n    ajaxResponseRenderer.addCallback(new JavaScriptCallback() {\n        @Override\n        public void run(JavaScriptSupport javascriptSupport) {\n            javascriptSupport.addScript(\"$('#serviceLineModal').modal('show');\");\n        }\n    });\n}\n</code></pre>\n\n<p>Hope this helps someone, this post helped out.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The cleanest approach I have found is a simplified version of the technique used by jQuery's <code>offset</code>.  Similar to some of the other answers it starts with <code>getBoundingClientRect</code>; it then uses the <code>window</code> and the <code>documentElement</code> to adjust for scroll position as well as things like the margin on the <code>body</code> (often the default).  </p>\n\n<pre><code>var rect = el.getBoundingClientRect();\nvar docEl = document.documentElement;\n\nvar rectTop = rect.top + window.pageYOffset - docEl.clientTop;\nvar rectLeft = rect.left + window.pageXOffset - docEl.clientLeft;\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var els = document.getElementsByTagName(\"div\");\r\nvar docEl = document.documentElement;\r\n\r\nfor (var i = 0; i &lt; els.length; i++) {\r\n\r\n  var rect = els[i].getBoundingClientRect();\r\n\r\n  var rectTop = rect.top + window.pageYOffset - docEl.clientTop;\r\n  var rectLeft = rect.left + window.pageXOffset - docEl.clientLeft;\r\n\r\n  els[i].innerHTML = \"&lt;b&gt;\" + rectLeft + \", \" + rectTop + \"&lt;/b&gt;\";\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div {\r\n  width: 100px;\r\n  height: 100px;\r\n  background-color: red;\r\n  border: 1px solid black;\r\n}\r\n#rel {\r\n  position: relative;\r\n  left: 10px;\r\n  top: 10px;\r\n}\r\n#abs {\r\n  position: absolute;\r\n  top: 250px;\r\n  left: 250px;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"rel\"&gt;&lt;/div&gt;\r\n&lt;div id=\"abs\"&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Since different browsers are rendering border, padding, margin and etc in different way. I wrote a little function to retrieve top and left positions of specific element in every root element that you want in precise dimension: </p>\n\n<pre><code>function getTop(root, offset) {\n    var rootRect = root.getBoundingClientRect();\n    var offsetRect = offset.getBoundingClientRect();\n    return offsetRect.top - rootRect.top;\n}\n</code></pre>\n\n<p>For retrieve left position you must return: </p>\n\n<pre><code>    return offsetRect.left - rootRect.left;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This worked for me (modified from selected answer):</p>\n\n<pre><code>function getOffset(el) {\n  el = el.getBoundingClientRect();\n  return {\n    left: el.left + window.scrollX,\n    top: el.top + window.scrollY\n  }\n}\n</code></pre>\n\n<p>Using this we can call</p>\n\n<pre><code>getOffset(element).left\n</code></pre>\n\n<p>or</p>\n\n<pre><code>getOffset(element).top\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I want to know how to get the X and Y position of HTML elements such as <code>img</code> and <code>div</code> in JavaScript.</p>\n",
            "last_activity_date": 1425568060,
            "question_id": 442404,
            "score": 300,
            "tags": [
                "javascript",
                "html",
                "css",
                "dom",
                "position"
            ],
            "title": "Retrieve the position (X,Y) of an HTML element"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>The first parentheses are for, if you will, order of operations. The 'result' of the set of parentheses surrounding the function definition is the function itself which, indeed, the second set of parentheses executes. As to why it's useful, I'm not enough of a Javascript wizard to have any idea. :P</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It is a self-executing anonymous function. The first set of brackets contain the expressions to be executed, and the second set of brackets executes those expressions.</p>\n\n<p>It is a useful construct when trying to hide variables from the parent namespace. All the code within the function is contained in the private scope of the function, meaning it can't be accessed at all from outside the function, making it truly private.</p>\n\n<p>See:</p>\n\n<p><a href=\"http://en.wikipedia.org/wiki/Closure_%28computer_science%29\">http://en.wikipedia.org/wiki/Closure_%28computer_science%29</a></p>\n\n<p><a href=\"http://peter.michaux.ca/articles/javascript-namespacing\">http://peter.michaux.ca/articles/javascript-namespacing</a></p>\n",
                    "is_accepted": false,
                    "score": 109
                },
                {
                    "body": "<p>Andy Hume pretty much <a href=\"http://stackoverflow.com/questions/440739/what-do-parentheses-surrounding-a-javascript-objectfunctionclass-declaration#440772\">gave</a> the answer, I just want to add a few more details.</p>\n\n<p>With this construct you are creating an anonymous function with its own evaluation environment or closure, and then you immediately evaluate it. The nice thing about this is that you can access the variables declared before the anonymous function, and you can use <strong>local variables</strong> inside this function without accidentally overwriting an existing variable.</p>\n\n<p>The use of the <em>var</em> keyword is very important, because in JavaScript every variable is global by default, but with the keyword you create a new, <em>lexically scoped</em> variable, that is, it is visible by the code <strong>between the two braces</strong>. In your example, you are essentially creating short aliases to the objects in the YUI library, but it has more powerful uses.</p>\n\n<p>I don't want to leave you without a code example, so I'll put here a simple example to illustrate a closure:</p>\n\n<pre><code>var add_gen = function(n) {\n  return function(x) {\n    return n + x;\n  };\n};\nvar add2 = add_gen(2);\nadd2(3); // result is 5\n</code></pre>\n\n<p>What is going on here? In the function *add_gen* you are creating an another function which will simply add the number <em>n</em> to its argument. The trick is that in the variables defined in the function parameter list act as lexically scoped variables, like the ones defined with <em>var</em>.</p>\n\n<p>The returned function is <strong>defined between the braces</strong> of the *add_gen* function so it will have access to the value of <em>n</em> even after add_gen function has finished executing, that is why you will get 5 when executing the last line of the example.</p>\n\n<p>With the help of function parameters being lexically scoped, you can work around the \"problems\" arising from using loop variables in anonymous functions. Take a simple example:</p>\n\n<pre><code>for(var i=0; i&lt;5; i++) {\n  setTimeout(function(){alert(i)}, 10);\n}\n</code></pre>\n\n<p>The \"expected\" result could be the numbers from zero to four, but you get four instances of fives instead. This happens because the anonymous function in setTimeout and the for loop are using the <strong>very same</strong> <em>i</em> variable, so by the time the functions get evaluated, <em>i</em> will be 5.</p>\n\n<p>You can get the naively expected result by using the technique in your question and the fact, that function parameters are lexically scoped. (I've used this approach in an <a href=\"http://stackoverflow.com/questions/400989/iterating-through-an-array-while-performing-a-request-for-each-entry#401042\">other answer</a>)</p>\n\n<pre><code>for(var i=0; i&lt;5; i++) {\n  setTimeout(\n     (function(j) {\n       return function(){alert(j)};\n     })(i), 10);\n}\n</code></pre>\n\n<p>With the immediate evaluation of the outer function you are creating a completely independent variable named <em>j</em> in each iteration, and the current value of <em>i</em> will be <strong>copied</strong> in to this variable, so you will get the result what was naively expected from the first try.</p>\n\n<p>I suggest you to try to understand the excellent tutorial at <a href=\"http://ejohn.org/apps/learn/\">http://ejohn.org/apps/learn/</a> to understand closures better, that is where I learnt very-very much.</p>\n",
                    "is_accepted": false,
                    "score": 86
                },
                {
                    "body": "<blockquote>\n  <p>...but what about the previous round parenteses surrounding all the function declaration?</p>\n</blockquote>\n\n<p>Specifically, it makes JavaScript interpret the 'function() {...}' construct as an inline anonymous function expression. If you omitted the brackets:</p>\n\n<pre><code>function() {\n    alert('hello');\n}();\n</code></pre>\n\n<p>You'd get a syntax error, because the JS parser would see the 'function' keyword and assume you're starting a function <em>statement</em> of the form:</p>\n\n<pre><code>function doSomething() {\n}\n</code></pre>\n\n<p>...and you can't have a function statement without a function name.</p>\n\n<p>function expressions and function statements are two different constructs which are handled in very different ways. Unfortunately the syntax is almost identical, so it's not just confusing to the programmer, even the parser has difficulty telling which you mean!</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>See <a href=\"http://stackoverflow.com/questions/3720283/what-is-this-practice-called-in-javascript\">this question</a>.  The first set of parenthesis aren't necessary if you use a function name, but a nameless function requires this construct and the parenthesis serve for coders to realize that they've viewing a self-invoking function when browsing the code (see one blogger's <a href=\"http://peter.michaux.ca/articles/an-important-pair-of-parens\" rel=\"nofollow\">best-practices recommendation</a>).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>few consideration on the subject:</p>\n\n<ul>\n<li><p>the parenthesis :</p>\n\n<p>The browser (engine/parser) associates the keyword function with       </p>\n\n<pre><code>[optional name]([optional parameters]){...code...} \n</code></pre>\n\n<p>so in an expression like function(){}() the last parenthesis  make no  sense.</p>\n\n<p>Now think at </p>\n\n<pre><code> name=function(){} ; name() !? \n</code></pre></li>\n</ul>\n\n<p>Yes the first pair o parenthesis force the anonymous function to turn into variable (stored expression) and second launches evaluation/execution<br>\nso <strong>(</strong> function(){} <strong>)()</strong> makes sense</p>\n\n<ul>\n<li>the utility: ?</li>\n</ul>\n\n<p>1 for executing some code on load and isolate the used variables from the rest of the page especially when name conflicts are possible ;</p>\n\n<p>2 replace eval(\"string\") with </p>\n\n<pre><code> (new Function(\"string\"))()\n</code></pre>\n\n<p>3 wrap long code for   \" <strong>=?:</strong>  \" operator like:</p>\n\n<pre><code> result = exp_to_test ? (function(){... long_code ...})() : (function(){...})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Juts to follow up on what Andy Hume and others have said:</p>\n\n<p>The '()' surrounding the anonymous function is the 'grouping operator' as defined in section 11.1.6 of the ECMA spec: <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\">http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf</a>. </p>\n\n<p>Taken verbatim from the docs:  </p>\n\n<p>11.1.6 The Grouping Operator</p>\n\n<p>The production <i>PrimaryExpression</i> : ( <i>Expression</i> ) is evaluated as follows:</p>\n\n<ol>\n<li>Return the result of evaluating <i>Expression</i>. This may be of type Reference.</li>\n</ol>\n\n<p>In this context the function is treated as an expression.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I'm new to both JavaScript and <a href=\"http://developer.yahoo.com/yui/\">YUI</a>. In YUI library examples, you can find many uses of this construct:</p>\n\n<pre><code>(function() {\n    var Dom = YAHOO.util.Dom,\n    Event = YAHOO.util.Event,\n    layout = null,\n        ...\n})();\n</code></pre>\n\n<p>I think last couple of parentheses are to execute the function just after the declaration.</p>\n\n<p>... But what about the previous set of parentheses surrounding the function declaration?</p>\n\n<p>I think it is a matter of scope, that's to hide inside variables to outside functions and possibly global objects. Is it? More generally, what are the mechanics of those parentheses?</p>\n",
            "last_activity_date": 1374763054,
            "question_id": 440739,
            "score": 155,
            "tags": [
                "javascript",
                "syntax"
            ],
            "title": "What do parentheses surrounding a JavaScript object/function/class declaration mean?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<pre><code>$(\"#element\").live('click', function(e) {\n  if( (!$.browser.msie &amp;&amp; e.button == 0) || ($.browser.msie &amp;&amp; e.button == 1) ) {\n       alert(\"Left Button\");\n    }\n    else if(e.button == 2){\n       alert(\"Right Button\");\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>You can easily tell which mouse button was pressed by checking the <code>which</code> property of the event object on mouse events:</p>\n\n<pre><code>/*\n  1 = Left   mouse button\n  2 = Centre mouse button\n  3 = Right  mouse button\n*/\n\n$([selector]).mousedown(function(e) {\n    if (e.which === 3) {\n        /* Right mouse button was clicked! */\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 60
                },
                {
                    "body": "<p>It seems to me that a slight adaptation of TheVillageIdiot's answer would be cleaner:</p>\n\n<pre><code>$('#element').bind('click', function(e) {\n  if (e.button == 2) {\n    alert(\"Right click\");\n  }\n  else {\n    alert(\"Some other click\");\n  }\n}\n</code></pre>\n\n<p>EDIT: JQuery provides an <code>e.which</code> attribute, returning 1, 2, 3 for left, middle, and right click respectively. So you could also use <code>if (e.which == 3) { alert(\"right click\"); }</code></p>\n\n<p>See also: answers to <a href=\"http://stackoverflow.com/questions/1795734/triggering-onclick-event-using-middle-click\">\"Triggering onclick event using middle click\"</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>As of jQuery version 1.1.3, <code>event.which</code> normalizes <code>event.keyCode</code> and <code>event.charCode</code> so you don't have to worry about browser compatibility issues. <a href=\"http://api.jquery.com/event.which/\">Documentation on <code>event.which</code></a></p>\n\n<p><code>event.which</code> will give 1, 2 or 3 for left, middle and right mouse buttons respectively so:</p>\n\n<pre><code>$('#element').mousedown(function(event) {\n    switch (event.which) {\n        case 1:\n            alert('Left Mouse button pressed.');\n            break;\n        case 2:\n            alert('Middle Mouse button pressed.');\n            break;\n        case 3:\n            alert('Right Mouse button pressed.');\n            break;\n        default:\n            alert('You have a strange Mouse!');\n    }\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 595
                },
                {
                    "body": "<p><strong>Edit</strong>: I changed it to work for dynamically added elements using <code>.on()</code> in jQuery 1.7 or above:</p>\n\n<pre><code>$(document).on(\"contextmenu\", \".element\", function(e){\n   alert('Context Menu event has fired!');\n   return false;\n});\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/Kn9s7/5\">jsfiddle.net/Kn9s7/5</a></p>\n\n<p>[Start of original post] This is what worked for me:</p>\n\n<pre><code>$('.element').bind(\"contextmenu\",function(e){\n   alert('Context Menu event has fired!');\n   return false;\n}); \n</code></pre>\n\n<p>In case you are into multiple solutions ^^</p>\n\n<p><strong>Edit</strong>: Tim Down brings up a good point that it's not always going to be a <code>right-click</code> that fires the <code>contextmenu</code> event, but also when the context menu key is pressed (which is arguably a replacement for a <code>right-click</code>)</p>\n",
                    "is_accepted": false,
                    "score": 193
                },
                {
                    "body": "<p>You can also <code>bind</code> to <code>contextmenu</code> and <code>return false</code>:</p>\n\n<pre><code>$('selector').bind('contextmenu', function(e){\n    e.preventDefault();\n    //code\n    return false;\n});\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/maniator/WS9S2/\">http://jsfiddle.net/maniator/WS9S2/</a></p>\n\n<p>Or you can make a quick plugin that does the same:</p>\n\n<pre><code>(function( $ ) {\n  $.fn.rightClick = function(method) {\n\n    $(this).bind('contextmenu rightclick', function(e){\n        e.preventDefault();\n        method();\n        return false;\n    });\n\n  };\n})( jQuery );\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/maniator/WS9S2/2/\">http://jsfiddle.net/maniator/WS9S2/2/</a></p>\n\n<hr>\n\n<p>Using <a href=\"http://api.jquery.com/on/\"><code>.on(...)</code></a> jQuery >= 1.7:</p>\n\n<pre><code>$(document).on(\"contextmenu\", \"selector\", function(e){\n    e.preventDefault();\n    //code\n    return false;\n});  //does not have to use `document`, it could be any container element.\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/maniator/WS9S2/283/\">http://jsfiddle.net/maniator/WS9S2/283/</a> </p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<pre><code>$.event.special.rightclick = {\n    bindType: \"contextmenu\",\n    delegateType: \"contextmenu\"\n};\n\n$(document).on(\"rightclick\", \"div\", function() {\n    console.log(\"hello\");\n    return false;\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/SRX3y/8/\">http://jsfiddle.net/SRX3y/8/</a></p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>There are a lot of very good answers, but I just want to touch on one major difference between IE9 and IE &lt; 9 when using <code>event.button</code>.</p>\n\n<p>According to the old Microsoft specification for <code>event.button</code> the codes differ from the ones used by W3C. W3C considers only 3 cases: </p>\n\n<ol>\n<li>Left mouse button is clicked - <code>event.button === 1</code></li>\n<li>Right mouse button is clicked - <code>event.button === 3</code></li>\n<li>Middle mouse button is clicked - <code>event.button === 2</code></li>\n</ol>\n\n<p>In older Internet Explorers however Microsoft are flipping a bit for the pressed button and there are 8 cases:</p>\n\n<ol>\n<li>No button is clicked - <code>event.button === 0</code> or 000</li>\n<li>Left button is clicked - <code>event.button === 1</code> or 001</li>\n<li>Right button is clicked - <code>event.button === 2</code> or 010</li>\n<li>Left and right buttons are clicked - <code>event.button === 3</code> or 011</li>\n<li>Middle button is clicked - <code>event.button === 4</code> or 100</li>\n<li>Middle and left buttons are clicked - <code>event.button === 5</code> or 101</li>\n<li>Middle and right buttons are clicked - <code>event.button === 6</code> or 110</li>\n<li>All 3 buttons are clicked - <code>event.button === 7</code> or 111</li>\n</ol>\n\n<p>Despite the fact that this is theoretically how it should work, no Internet Explorer has ever supported the cases of two or three buttons simultaneously pressed. I am mentioning it because the W3C standard cannot even theoretically support this.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>$(document).ready(function () {\n    var resizing = false;\n    var frame = $(\"#frame\");\n    var origHeightFrame = frame.height();\n    var origwidthFrame = frame.width();\n    var origPosYGrip = $(\"#frame-grip\").offset().top;\n    var origPosXGrip = $(\"#frame-grip\").offset().left;\n    var gripHeight = $(\"#frame-grip\").height();\n    var gripWidth = $(\"#frame-grip\").width();\n\n    $(\"#frame-grip\").mouseup(function (e) {\n        resizing = false;\n    });\n\n    $(\"#frame-grip\").mousedown(function (e) {\n        resizing = true;\n    });\n    document.onmousemove = getMousepoints;\n    var mousex = 0, mousey = 0, scrollTop = 0, scrollLeft = 0;\n    function getMousepoints() {\n        if (resizing) {\n            var MouseBtnClick = event.which;\n            if (MouseBtnClick == 1) {\n                scrollTop = document.documentElement ? document.documentElement.scrollTop : document.body.scrollTop;\n                scrollLeft = document.documentElement ? document.documentElement.scrollLeft : document.body.scrollLeft;\n                mousex = event.clientX + scrollLeft;\n                mousey = event.clientY + scrollTop;\n\n                frame.height(mousey);\n                frame.width(mousex);\n            }\n            else {\n                resizing = false;\n            }\n        }\n        return true;\n\n    }\n\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><code>event.which === 1</code> ensures it's a left-click (when using jQuery).</p>\n\n<p>But you should also think about modifier keys: <kbd>ctrl</kbd><kbd>cmd</kbd><kbd>shift</kbd><kbd>alt</kbd></p>\n\n<p>If you're only interested in catching simple, unmodified left-clicks, you can do something like this:</p>\n\n<pre><code>var isSimpleClick = function (event) {\n  return !(\n    event.which !== 1 || // not a left click\n    event.metaKey ||     // \"open link in new tab\" (mac)\n    event.ctrlKey ||     // \"open link in new tab\" (windows/linux)\n    event.shiftKey ||    // \"open link in new window\"\n    event.altKey         // \"save link as\"\n  );\n};\n\n$('a').on('click', function (event) {\n  if (isSimpleClick(event)) {\n    event.preventDefault();\n    // do something...\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>    $.event.special.rightclick = {\n     bindType: \"contextmenu\",\n        delegateType: \"contextmenu\"\n      };\n\n   $(document).on(\"rightclick\", \"div\", function() {\n   console.log(\"hello\");\n    return false;\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do you obtain the clicked mouse button using jQuery?</p>\n\n<pre><code>$('div').bind('click', function(){\n    alert('clicked');\n});\n</code></pre>\n\n<p>this is triggered by both right and left click, what is the way of being able to catch right mouse click? I'd be happy if something like below exists:</p>\n\n<pre><code>$('div').bind('rightclick', function(){ \n    alert('right mouse button is pressed');\n});\n</code></pre>\n",
            "last_activity_date": 1418864257,
            "question_id": 1206203,
            "score": 366,
            "tags": [
                "javascript",
                "jquery",
                "javascript-events",
                "right-click"
            ],
            "title": "How to distinguish between left and right mouse click with jQuery"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>You can set the width directly using <a href=\"http://api.jquery.com/width/\"><code>.width()</code></a> like this:</p>\n\n<pre><code>$(\"#elem\").width(100);\n</code></pre>\n\n<p><strong>Updated for comments:</strong>\nYou have this option as well, but it'll replace all css on the element, so not sure it's any more viable:</p>\n\n<pre><code>$('#elem').css('cssText', 'width: 100px !important');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>The problem is caused by jQuery not understanding the <code>!important</code> attribute, and as such fails to apply the rule.</p>\n\n<p>You might be able to work around that problem, and apply the rule by referring to it, via <code>addClass()</code>:</p>\n\n<pre><code>.importantRule { width: 100px !important; }\n\n$('#elem').addClass('importantRule');\n</code></pre>\n\n<p>Or by using <code>attr()</code>:</p>\n\n<pre><code>$('#elem').attr('style', 'width: 100px !important');\n</code></pre>\n\n<p>The latter approach would unset any previously set in-line style rules, though. So use with care.</p>\n\n<p>Of course, there's a good argument that @Nick Craver's method is easier/wiser.</p>\n\n<p>The above, <code>attr()</code> approach modified slightly to preserve the original <code>style</code> string/properties:</p>\n\n<pre><code>$('#elem').attr('style', function(i,s) { return s + 'width: 100px !important;' });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 259
                },
                {
                    "body": "<p>I would assume you tried it without adding important?<br>\ninline css (which is how js adds styling) overrides stylesheet css.\nI'm pretty sure that's the case even when the stylesheet css rule has !important.</p>\n\n<p>Another question (maybe a stupid question but must be asked.):  is the element you are trying to work on, is it display:block; or display:inline-block;  ?</p>\n\n<p>not knowing your expertise in CSS..   inline elements don't always behave as you would expect.  </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If it is not so relevant and since you're dealing with one element which is <code>#elem</code>, you can change its id to something else and style it as you wish...</p>\n\n<pre><code>$('#elem').attr('id','cheaterId');\n</code></pre>\n\n<p>and in your css:</p>\n\n<pre><code>#cheaterId { width: 100px;}\n</code></pre>\n\n<p>hope this helps,\nSinan.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I think I've found a real solution. I've made it into a new function:</p>\n\n<p><code>jQuery.style(name, value, priority);</code></p>\n\n<p>You can use it to get values with <code>.style('name')</code> just like <code>.css('name')</code>, get the CSSStyleDeclaration with <code>.style()</code>, and also set values - with the ability to specify the priority as 'important'. See <a href=\"https://developer.mozilla.org/en/DOM/CSSStyleDeclaration\">https://developer.mozilla.org/en/DOM/CSSStyleDeclaration</a>.</p>\n\n<h2>Demo</h2>\n\n<pre><code>var div = $('someDiv');\nconsole.log(div.style('color'));\ndiv.style('color', 'red');\nconsole.log(div.style('color'));\ndiv.style('color', 'blue', 'important');\nconsole.log(div.style('color'));\nconsole.log(div.style().getPropertyPriority('color'));\n</code></pre>\n\n<p>Here's the output:</p>\n\n<pre><code>null\nred\nblue\nimportant\n</code></pre>\n\n<h2>The Function</h2>\n\n<pre><code>(function($) {    \n  if ($.fn.style) {\n    return;\n  }\n\n  // Escape regex chars with \\\n  var escape = function(text) {\n    return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, \"\\\\$&amp;\");\n  };\n\n  // For those who need them (&lt; IE 9), add support for CSS functions\n  var isStyleFuncSupported = !!CSSStyleDeclaration.prototype.getPropertyValue;\n  if (!isStyleFuncSupported) {\n    CSSStyleDeclaration.prototype.getPropertyValue = function(a) {\n      return this.getAttribute(a);\n    };\n    CSSStyleDeclaration.prototype.setProperty = function(styleName, value, priority) {\n      this.setAttribute(styleName, value);\n      var priority = typeof priority != 'undefined' ? priority : '';\n      if (priority != '') {\n        // Add priority manually\n        var rule = new RegExp(escape(styleName) + '\\\\s*:\\\\s*' + escape(value) +\n            '(\\\\s*;)?', 'gmi');\n        this.cssText =\n            this.cssText.replace(rule, styleName + ': ' + value + ' !' + priority + ';');\n      }\n    };\n    CSSStyleDeclaration.prototype.removeProperty = function(a) {\n      return this.removeAttribute(a);\n    };\n    CSSStyleDeclaration.prototype.getPropertyPriority = function(styleName) {\n      var rule = new RegExp(escape(styleName) + '\\\\s*:\\\\s*[^\\\\s]*\\\\s*!important(\\\\s*;)?',\n          'gmi');\n      return rule.test(this.cssText) ? 'important' : '';\n    }\n  }\n\n  // The style function\n  $.fn.style = function(styleName, value, priority) {\n    // DOM node\n    var node = this.get(0);\n    // Ensure we have a DOM node\n    if (typeof node == 'undefined') {\n      return this;\n    }\n    // CSSStyleDeclaration\n    var style = this.get(0).style;\n    // Getter/Setter\n    if (typeof styleName != 'undefined') {\n      if (typeof value != 'undefined') {\n        // Set style property\n        priority = typeof priority != 'undefined' ? priority : '';\n        style.setProperty(styleName, value, priority);\n        return this;\n      } else {\n        // Get style property\n        return style.getPropertyValue(styleName);\n      }\n    } else {\n      // Get CSSStyleDeclaration\n      return style;\n    }\n  };\n})(jQuery);\n</code></pre>\n\n<p>See <a href=\"https://developer.mozilla.org/en/DOM/CSSStyleDeclaration\">https://developer.mozilla.org/en/DOM/CSSStyleDeclaration</a> for examples of how to read and set the CSS values. My issue was that I had already set <code>!important</code> for the width in my CSS to avoid conflicts with other theme CSS, but any changes I made to the width in jQuery would be unaffected since they would be added to the style attribute.</p>\n\n<h2>Compatibility</h2>\n\n<p>For setting with the priority using the <code>setProperty</code> function, <a href=\"http://help.dottoro.com/ljdpsdnb.php\">http://help.dottoro.com/ljdpsdnb.php</a> says there is support for IE 9+ and all other browsers. I have tried with IE 8 and it has failed, which is why I built support for it in my functions (see above). It will work on all other browsers using setProperty, but it will need my custom code to work in &lt; IE 9.</p>\n",
                    "is_accepted": true,
                    "score": 125
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/a/2655976/578288\">David Thomas\u2019s answer</a> describes a way to use <code>$('#elem').attr('style', \u2026)</code>, but warns that using it will delete previously-set styles in the <code>style</code> attribute. Here is a way of using <code>attr()</code> without that problem:</p>\n\n\n\n<pre class=\"lang-js prettyprint-override\"><code>var $elem = $('#elem');\n$elem.attr('style', $elem.attr('style') + '; ' + 'width: 100px !important');\n</code></pre>\n\n<p>As a function:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function addStyleAttribute($element, styleAttribute) {\n    $element.attr('style', $element.attr('style') + '; ' + styleAttribute);\n}\n</code></pre>\n\n\n\n<pre class=\"lang-js prettyprint-override\"><code>addStyleAttribute($('#elem'), 'width: 100px !important');\n</code></pre>\n\n<p>Here is a <a href=\"http://jsbin.com/atulek/4/edit\">JS Bin demo</a>.</p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>This solution doesn't override any previous style, it just apply the one you need:</p>\n\n<pre><code>var heightStyle = \"height: 500px !important\";\nif ($(\"foo\").attr('style')) {\n  $(\"foo\").attr('style', heightStyle + $(\"foo\").attr('style').replace(/^height: [-,!,0-9,a-z, A-Z, ]*;/,''));\nelse {\n  $(\"foo\").attr('style', heightStyle);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>We need first remove previous style. I remove using a regular.\nI send you a example for change color,...</p>\n\n<pre><code>var SetCssColorImportant = function (jDom, color) {\n       var style = jDom.attr('style');\n       style = style.replace(/color: .* !important;/g, '');\n       jDom.css('cssText', 'color: ' + color + ' !important;' + style); }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Kinda late but here is what I did after encountering this problem...\n<br></p>\n\n<pre><code>var origStyleContent = jQuery('#logo-example').attr('style');\njQuery('#logo-example').attr('style',origStyleContent+';width:150px !important');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>An alternative way to append style in head</p>\n\n<pre><code>$('head').append('&lt;style&gt; #elm{width:150px !important} &lt;/style&gt;');\n</code></pre>\n\n<p>this appends style after all your css files so it will have higher priority than other css files and will be applied</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It may or may not be appropriate for your situation but you can use CSS selectors for a lot of these type of situations. </p>\n\n<p>If, for example you wanted of the 3rd and 6th instances of .cssText to have a different width you could write:</p>\n\n<pre><code>.cssText:nth-of-type(3), .cssText:nth-of-type(6) {width:100px !important;}\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>.container:nth-of-type(3).cssText, .container:nth-of-type(6).cssText {width:100px !important;}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Why not just doing like this:</p>\n\n<pre><code>$(\"#elem\").get(0).style.width= \"100px!important\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>var elem = $(\"#elem\");\nelem[0].style.removeAttribute('width');\nelem[0].style.setProperty('width', '100px', 'important');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>There's no need to go to the complexity of @AramKocharyan's answer, nor the need to insert any style tags dynamically.</p>\n\n<p>Just overwrite style, <strong><em>but</em></strong> you don't have to parse anything, why would you?</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>//accepts the hyphenated versions (i.e. not 'cssFloat')\naddStyle(element, property, value, important) {\n    //remove previously defined property\n    if (element.style.setProperty)\n        element.style.setProperty(property, '');\n    else\n        element.style.setAttribute(property, '');\n\n    //insert the new style with all the old rules\n    element.setAttribute('style', element.style.cssText +\n        property + ':' + value + ((important) ? ' !important' : '') + ';');\n}\n</code></pre>\n\n<p><sub>\nCan't use <code>removeProperty()</code> because it wont remove <code>!important</code> rules in Chrome.<br/>\nCan't use <code>element.style[property] = ''</code> because it only accepts camelCase in FireFox.\n</sub></p>\n\n<p>You could probably make this shorter with jQuery, but this vanilla function will run on modern browsers, IE8 etc</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Another easy method to solve this issue adding the style attribute:</p>\n\n<pre><code>$('.selector').attr('style', 'width:500px !important');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>I also discovered that certain elements or add-on's (like Bootstrap) have some special class cases where they do not play well with <code>!important</code> or other work-arounds like <code>.addClass/.removeClass</code>, and thus you have to to toggle them on/off. </p>\n\n<p>For example, if you use something like <code>&lt;table class=\"table-hover\"&gt;</code>the only way to successfully modify elements like colors of rows is to toggle the <code>table-hover</code> class on/off, like this</p>\n\n<p><code>$(your_element).closest(\"table\").toggleClass(\"table-hover\");</code> </p>\n\n<p>Hopefully this work-around will be helpful to someone! :)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>After reading other answers and experimenting, this is what works for me:</p>\n\n<pre><code>$(\".selector\")[0].style.setProperty( 'style', 'value', 'important' );\n</code></pre>\n\n<p>This doesn't work in IE 8 and under, though.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can do this:</p>\n\n<pre><code>$(\"#elem\").css(\"cssText\", \"width: 100px !important;\");\n</code></pre>\n\n<p>Using \"cssText\" as the property name and whatever you want added to the css as it's value.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Instead of using the <code>css()</code> function try the <code>addClass()</code> function:</p>\n\n<pre><code>  &lt;script&gt;\n  $(document).ready(function() {\n    $(\"#example\").addClass(\"exampleClass\");\n  });\n  &lt;/script&gt;\n\n  &lt;style&gt;\n  .exampleClass{\n    width:100% !important;\n    height:100% !important;\n  }\n  &lt;/style&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am having trouble applying a style that is <code>!important</code>. I\u2019ve tried:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$(\"#elem\").css(\"width\", \"100px !important\");\n</code></pre>\n\n<p>This does <strong>nothing</strong>; no width style whatsoever is applied. Is there a jQuery-ish way of applying such a style without having to overwrite <code>cssText</code> (which would mean I\u2019d need to parse it first, etc.)?</p>\n\n<p><strong>Edit</strong>: I should add that I have a stylesheet with an <code>!important</code> style that I am trying to override with an <code>!important</code> style inline, so using <code>.width()</code> and the like does not work since it gets overridden by my external <code>!important</code> style.</p>\n\n<p>Also, the value that will override the previous value <strong>is computed</strong>, so I cannot simply create another external style.</p>\n",
            "last_activity_date": 1425174395,
            "question_id": 2655925,
            "score": 244,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "css"
            ],
            "title": "How to apply !important using .css()?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>You can't do that : as the call is asynchronous, the get_data function can't return the result of the ajax call.</p>\n\n<p>What you should do is provide a callback to the get_data function and handle the result in the callback.</p>\n\n<pre><code>function get_data(data, destination, callback) \n         {\n\n            if (lock_get == 0)\n            {\n                lock_get = 1;\n                $.ajax({\n                    type: \"POST\",\n                    url: destination,\n                    async: true,\n                    data: data,\n                    success: function(data) \n                    {\n                        lock_get = 0;\n                        if (data &amp;&amp; callback)\n                        {\n                            callback(data);\n                        }\n                    }\n                });\n            }\n         };\n</code></pre>\n\n<p>And call it like that :</p>\n\n<pre><code>get_data(data, destination, function(test){\n   notice(test);\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 8
                }
            ],
            "body": "<p>As my framework grows i decided to split it into files, instead of leaving it in the main design file. However by doing that the return of a function doesn't return any value.</p>\n\n<p>data isn't empty - if i alert the values in the js file they are there!</p>\n\n<p>The functions:</p>\n\n<p>1st the function in .js file (is included before the execution)</p>\n\n<pre><code>             var lock_get = 0;\n             function get_data(data, destination) \n             {\n\n                if (lock_get == 0)\n                {\n                    lock_get = 1;\n                    $.ajax({\n                        type: \"POST\",\n                        url: destination,\n                        async: true,\n                        data: data,\n                        success: function(data) \n                        {\n                            lock_get = 0;\n                            if (data)\n                            {\n                                return data;\n                            }\n                        }\n                    });\n                }\n             };\n</code></pre>\n\n<p>So and here is the execution part:</p>\n\n<pre><code>    var test = get_data(data, destination);\n    notice(test);\n</code></pre>\n\n<p>and test is empty... I already tried different ways for writing but I guess i missunderstood the possibilities of js?</p>\n",
            "last_activity_date": 1355926320,
            "question_id": 12475269,
            "score": 3,
            "tags": [
                "javascript",
                "jquery",
                "ajax"
            ],
            "title": "Variable doesn&#39;t get returned from AJAX function"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p><a href=\"http://www.jsviz.org\" rel=\"nofollow\">JsVIS</a> was pretty nice, but slow with larger graphs, and has been abandoned since 2007.</p>\n\n<p><a href=\"https://github.com/prefuse/Prefuse\" rel=\"nofollow\">prefuse</a> is a set of software tools for creating rich interactive data visualizations in Java. <a href=\"https://github.com/prefuse/Flare\" rel=\"nofollow\">flare</a>  is an ActionScript library for creating visualizations that run in the Adobe Flash Player, abandoned since 2012.</p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>I've just put together what you may be looking for: <a href=\"http://www.graphdracula.net\">http://www.graphdracula.net</a></p>\n\n<p>It's JavaScript with directed graph layouting, SVG and you can even drag the nodes around. Still needs some tweaking, but is totally usable. You create nodes and edges easily with JavaScript code like this:</p>\n\n<pre><code>var g = new Graph();\ng.addEdge(\"strawberry\", \"cherry\");\ng.addEdge(\"cherry\", \"apple\");\ng.addEdge(\"id34\", \"cherry\");\n</code></pre>\n\n<p>I used the previously mentioned Raphael JS library (the graffle example) plus some code for a force based graph layout algorithm I found on the net (everything open source, MIT license). If you have any remarks or need a certain feature, I may implement it, just ask!</p>\n\n<hr>\n\n<p>You may want to have a look at other projects, too! Below are two meta-comparisons:</p>\n\n<ul>\n<li><p><a href=\"http://socialcompare.com/en/comparison/javascript-graphs-and-charts-libraries\">SocialCompare</a> has an extensive list of libraries, and the \"Node / edge graph\" line will filter for graph visualization ones.</p></li>\n<li><p>DataVisualization.ch has evaluated many libraries, including node/graph ones. Unfortunately there's no direct link so you'll have to filter for \"graph\":<a href=\"http://selection.datavisualization.ch/\"><img src=\"http://i.stack.imgur.com/o4lwD.jpg\" alt=\"Selection DataVisualization.ch\"></a></p></li>\n</ul>\n\n<p>Here's a list of similar projects (some have been already mentioned here):</p>\n\n<h3>Pure JavaScript Libraries</h3>\n\n<ul>\n<li><p><a href=\"http://visjs.org/#gallery\">vis.js</a> supports many types of network/edge graphs, plus timelines and 2D/3D charts. Auto-layout, auto-clustering, springy physics engine, mobile-friendly, keyboard navigation, hierarchical layout, animation etc. <a href=\"https://github.com/almende/vis\">MIT licensed</a> and developed by a Dutch firm specializing in research on self-organizing networks.</p></li>\n<li><p><a href=\"http://cytoscape.github.io/cytoscape.js/\">Cytoscape.js</a> - interactive graph analysis and visualization with mobile support, following jQuery conventions. Funded via NIH grants and developed by by <a href=\"http://stackoverflow.com/users/947225/maxkfranz\">@maxkfranz</a> (see <a href=\"http://stackoverflow.com/a/10319429/1269037\">his answer below</a>) with help from several universities and other organizations.</p></li>\n<li><p><a href=\"http://thejit.org/demos.html\">The JavaScript InfoVis Toolkit</a> - Jit, an interactive, multi-purpose graph drawing and layout framework. See for example the <a href=\"http://philogb.github.io/jit/static/v20/Docs/files/Visualizations/Hypertree-js.html\">Hyperbolic Tree</a>. Built by Twitter dataviz architect <a href=\"http://www.sencha.com/conference/session/sencha-charting-visualization\">Nicolas Garcia Belmonte</a> and <a href=\"http://philogb.github.io/infovis/\">bought by Sencha</a> in 2010.</p></li>\n<li><p><a href=\"http://d3js.org/\">D3.js</a> Powerful multi-purpose JS visualization library, the successor of Protovis. See the <a href=\"http://bl.ocks.org/mbostock/4062045\">force-directed graph</a> example, and other graph examples in the <a href=\"https://github.com/mbostock/d3/wiki/Gallery\">gallery</a>.</p></li>\n<li><p><a href=\"http://sigmajs.org/\">sigma.js</a> Lightweight but powerful library for drawing graphs</p></li>\n<li><p><a href=\"http://jsplumbtoolkit.com/\">jsPlumb</a> jQuery plug-in for creating interactive connected graphs</p></li>\n<li><p><a href=\"https://github.com/cpettitt/dagre\">dagre</a> Graph layout for JavaScript</p></li>\n<li><p><a href=\"http://getspringy.com/\">Springy</a> - a force-directed graph layout algorithm</p></li>\n<li><p><a href=\"http://processingjs.org/\">Processing.js</a> Javascript port of the Processing library by John Resig</p></li>\n<li><p><a href=\"http://js-graph-it.sourceforge.net/\">JS Graph It</a> - drag'n'drop boxes connected by straight lines. Minimal auto-layout of the lines.</p></li>\n<li><p><a href=\"http://raphaeljs.com/graffle.html\">RaphaelJS's Graffle</a> - interactive graph example of a generic multi-purpose vector drawing library. RaphaelJS can't layout nodes automatically; you'll need another library for that.</p></li>\n<li><p><a href=\"http://www.jointjs.com/demos\">JointJS Core</a> - David Durman's MPL-licensed open source diagramming library. It can be used to create either static diagrams or fully interactive diagramming tools and application builders. Works in browsers supporting SVG. Layout algorithms not-included in the core package</p></li>\n</ul>\n\n<h3>Commercial libraries</h3>\n\n<ul>\n<li><p><a href=\"http://gojs.net/latest/index.html\">GoJS</a> Interactive graph drawing and layout library</p></li>\n<li><p><a href=\"http://www.yworks.com/yfileshtml\">yFiles for HTML</a> Commercial graph drawing and layout library</p></li>\n<li><p><a href=\"https://www.jgraph.com/mxgraph.html\">mxGraph</a> Commercial HTML 5 diagramming library with support for older browsers</p></li>\n<li><p><a href=\"http://keylines.com/\">KeyLines</a> Commercial JS network visualization toolkit</p></li>\n<li><p><a href=\"http://datavisualizationsoftwarelab.com/\">data visualization software lab</a> Commercial multi-purpose visualization library</p></li>\n</ul>\n\n<h3>Abandoned libraries</h3>\n\n<ul>\n<li><p><a href=\"http://cytoscapeweb.cytoscape.org/\">Cytoscape Web</a> Embeddable JS Network viewer (no new features planned; succeeded by Cytoscape.js)</p></li>\n<li><p><a href=\"http://code.google.com/p/canviz/\">Canviz</a> JS <strong>renderer</strong> for Graphviz graphs. <a href=\"https://code.google.com/p/canviz/source/list\">Abandoned</a> in Sep 2013.</p></li>\n<li><p><a href=\"http://arborjs.org/\">arbor.js</a> Sophisticated graphing with nice physics and eye-candy. Abandoned in May 2012. Several <a href=\"https://github.com/samizdatco/arbor/issues/56#issuecomment-62842532\">semi-maintained</a> forks exist.</p></li>\n<li><p><a href=\"http://github.com/jackrusher/jssvggraph\">jssvggraph</a> \"The simplest possible force directed graph layout algorithm implemented as a Javascript library that uses SVG objects\". Abandoned in 2012.</p></li>\n<li><p><a href=\"https://code.google.com/p/jsdot/\">jsdot</a> Client side graph drawing application. <a href=\"https://code.google.com/p/jsdot/source/list\">Abandoned in 2011</a>.</p></li>\n<li><p><a href=\"http://vis.stanford.edu/protovis/ex/force.html\">Protovis</a> Graphical Toolkit for Visualization (JavaScript). Replaced by d3.</p></li>\n<li><p><a href=\"http://labs.unwieldy.net/moowheel/\">Moo Wheel</a> Interactive JS representation for connections and relations (2008)</p></li>\n<li><p><a href=\"http://www.jsviz.org/\">JSViz</a> 2007-era graph visualization script</p></li>\n</ul>\n\n<h3>Non-Javascript Libraries</h3>\n\n<ul>\n<li><p><a href=\"http://www.graphviz.org/\">Graphviz</a> Sophisticated graph visualization language</p></li>\n<li><p><a href=\"http://flare.prefuse.org/\">Flare</a> Beautiful and powerful Flash based graph drawing</p></li>\n<li><p><a href=\"http://nodebox.net/code/index.php/Graph\">NodeBox</a> Python Graph Visualization</p></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 502
                },
                {
                    "body": "<p>As guruz mentioned, the JIT has several lovely graph/tree layouts, including quite appealing RGraph and HyperTree visualizations.  I'd post a link, but as a n00b I'm restricted to one link per answer.</p>\n\n<p>Also, I've just put up a super simple SVG-based <a href=\"http://github.com/jackrusher/jssvggraph\">implementation at github</a> (no dependencies, ~125 LOC) that should work well enough for small graphs displayed in modern browsers.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><em>Disclaimer: I'm a developer of Cytoscape.js</em></p>\n\n<p>Cytoscape.js is a HTML5 graph visualisation library.  The API is sophisticated and follows jQuery conventions, including </p>\n\n<ul>\n<li>selectors for querying and filtering (<code>cy.elements(\"node[weight &gt;= 50].someClass\")</code> does much as you would expect),</li>\n<li>chaining (e.g. <code>cy.nodes().unselect().trigger(\"mycustomevent\")</code>),</li>\n<li>jQuery-like functions for binding to events,</li>\n<li>elements as collections (like jQuery has collections of HTMLDomElements),</li>\n<li>extensibility (can add custom layouts, UI, core &amp; collection functions, and so on),</li>\n<li>and more.</li>\n</ul>\n\n<p>If you're thinking about building a serious webapp with graphs, you should at least consider Cytoscape.js.  It's free and open-source:</p>\n\n<p><a href=\"http://cytoscape.github.io/cytoscape.js/\">http://cytoscape.github.io/cytoscape.js/</a></p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>In a commercial scenario, a serious contestant for sure is <a href=\"http://www.yworks.com/yfileshtml\" rel=\"nofollow\">yFiles for HTML</a>:</p>\n\n<p>It offers:</p>\n\n<ul>\n<li>Easy <em>import</em> of custom data (<a href=\"http://live.yworks.com/yfiles-for-html/1.2/demos/databinding/demo.yfiles.binding.interactivegraphsource/index.html\" rel=\"nofollow\">this interactive online demo</a> seems to pretty much do exactly what the OP was looking for)</li>\n<li>Interactive editing for creating and manipulating the diagrams through user gestures (see the more complete <a href=\"http://live.yworks.com/yfiles-for-html/1.2/demos/layout/demo.yfiles.layout.layoutstyles/index.html\" rel=\"nofollow\">demo editor</a></li>\n<li>A huge <a href=\"http://docs.yworks.com/yfileshtml/index.html\" rel=\"nofollow\">API</a> for customizing each and every aspect of the library </li>\n<li>Support for <em>grouping</em> and <em>nesting</em> (both interactive, as well as through the layout algorithms)</li>\n<li>Does not depend on a specfic UI toolkit but supports <em>integration</em> into almost any Javascript existing toolkit (see the <a href=\"http://live.yworks.com/yfiles-for-html/\" rel=\"nofollow\">\"toolkit\" demos</a>)</li>\n<li>Automatic layout (various styles, like \"hierarchic\", \"organic\", \"orthogonal\", \"tree\", \"circular\", and more)</li>\n<li>Automatic sophisticated edge routing (orthogonal and organic edge routing with obstacle avoidance)</li>\n<li>Incremental and partial layout (adding and removing elements and only slightly or not at all changing the rest of the diagram)</li>\n<li>Support for grouping and nesting (both interactive, as well as through the layout algorithms)</li>\n<li>Uses HTML 5 technologies like SVG and Canvas and modern Javascript leveraging properties and other more recent JS features (but for the same reason will not run in IE versions 8 and lower).</li>\n<li>Uses a modular API that can be loaded on-demand using AMD loaders</li>\n</ul>\n\n<p>Here is a sample rendering that shows most of the requested features:</p>\n\n<p><img src=\"http://i.stack.imgur.com/9RrCz.png\" alt=\"Screenshot of a sample rendering created by the BPMN demo.\"></p>\n\n<p>Full disclosure: I work for yWorks, but on Stackoverflow I do not represent my employer.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I have a data structure that represents a directed graph, and I want to render that dynamically on an HTML page.  These graphs will usually be just a few nodes, maybe ten at the very upper end, so my guess is that performance isn't going to be a big deal. Ideally, I'd like to be able to hook it in with jQuery so that users can tweak the layout manually by dragging the nodes around.</p>\n\n<p>Note: I'm not looking for a charting library.</p>\n\n<blockquote>\n  <p>This question exists because it has historical significance, but <strong>it is not considered a good, on-topic question for this site</strong>, so please do not use it as evidence that you can ask similar questions here. This question and its answers are frozen and cannot be changed. More info: <a href=\"http://stackoverflow.com/help\">help center</a>.</p>\n</blockquote>\n",
            "last_activity_date": 1422553426,
            "question_id": 7034,
            "score": 528,
            "tags": [
                "javascript",
                "jquery",
                "data-structures",
                "graph-layout"
            ],
            "title": "Graph visualization library in JavaScript"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>K. Scott Allen has <a href=\"http://odetocode.com/blogs/scott/archive/2007/07/04/function-apply-and-function-call-in-javascript.aspx\">a nice writeup</a> on the matter.</p>\n\n<p>Basically, they differ on how they handle function arguments.  </p>\n\n<blockquote>\n  <p>The apply() method is identical to call(), except apply() requires an array as the second parameter. The array represents the arguments for the target method.\"</p>\n</blockquote>\n\n<p>So:</p>\n\n<pre><code>// assuming you have f\nfunction f(message) { ... }\nf.call(receiver, \"test\");\nf.apply(receiver, [\"test\"]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 122
                },
                {
                    "body": "<p>The difference is that <code>apply</code> lets you invoke the function with arguments as an array; <code>call</code> requires the parameters be listed explicitly. A useful mnemonic is \"A for array and C for comma.\"</p>\n\n<p>See <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply\">here</a> and <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call\">here</a>.</p>\n\n<p>Pseudo syntax:</p>\n\n<p><code>theFunction.apply(valueForThis, arrayOfArgs)</code></p>\n\n<p><code>theFunction.call(valueForThis, arg1, arg2, ...)</code></p>\n\n<p>Sample code:</p>\n\n<pre><code>function theFunction(name, profession) {\n    alert(\"My name is \" + name + \" and I am a \" + profession + \".\");\n}\ntheFunction(\"John\", \"fireman\");\ntheFunction.apply(undefined, [\"Susan\", \"school teacher\"]);\ntheFunction.call(undefined, \"Claude\", \"mathematician\");\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1583
                },
                {
                    "body": "<p>To answer the part about when to use each function, use <code>apply</code> if you don't know the number of arguments you will be passing, or if they are already in an array or array-like object (like the <code>arguments</code> object to forward your own arguments. Use <code>call</code> otherwise, since there's no need to wrap the arguments in an array.</p>\n\n<pre><code>f.call(thisObject, a, b, c); // Fixed number of arguments\n\nf.apply(thisObject, arguments); // Forward this function's arguments\n\nvar args = [];\nwhile (...) {\n    args.push(some_value());\n}\nf.apply(thisObject, args); // Unknown number of arguments\n</code></pre>\n\n<p>When I'm not passing any arguments (like your example), I prefer <code>call</code> since I'm <em>calling</em> the function. <code>apply</code> would imply you are <em>applying</em> the function to the (non-existent) arguments.</p>\n\n<p>There shouldn't be any performance differences, except maybe if you use <code>apply</code> and wrap the arguments in an array (e.g. <code>f.apply(thisObject, [a, b, c])</code> instead of <code>f.call(thisObject, a, b, c)</code>). I haven't tested it, so there could be differences, but it would be very browser specific. It's likely that <code>call</code> is faster if you don't already have the arguments in an array and <code>apply</code> is faster if you do.</p>\n",
                    "is_accepted": false,
                    "score": 96
                },
                {
                    "body": "<p>While this is an old topic, I just wanted to point out that .call is slightly faster than .apply. I can't tell you exactly why.</p>\n\n<p>See jsPerf, <a href=\"http://jsperf.com/test-call-vs-apply/3\">http://jsperf.com/test-call-vs-apply/3</a></p>\n\n<hr>\n\n<p>[<code>UPDATE!</code>]</p>\n\n<p>Douglas Crockford mentions briefly the difference between the two, which may help explain the performance difference... <a href=\"http://youtu.be/ya4UHuXNygM?t=15m52s\">http://youtu.be/ya4UHuXNygM?t=15m52s</a></p>\n\n<p>Apply takes an array of arguments, while Call takes zero or more individual parameters! Ah hah!</p>\n\n<p><code>.apply(this, [...])</code></p>\n\n<p><code>.call(this, param1, param2, param3, param4...)</code></p>\n",
                    "is_accepted": false,
                    "score": 62
                },
                {
                    "body": "<p>I'd like to show an example, where the 'valueForThis' argument is used:</p>\n\n<pre><code>Array.prototype.push = function(element) {\n   /*\n   Native code*, that uses 'this'       \n   this.put(element);\n   */\n}\nvar array = [];\narray.push(1);\narray.push.apply(array,[2,3]);\nArray.prototype.push.apply(array,[4,5]);\narray.push.call(array,6,7);\nArray.prototype.push.call(array,8,9);\n//[1, 2, 3, 4, 5, 6, 7, 8, 9] \n</code></pre>\n\n<p>*<em>details: <a href=\"http://es5.github.io/#x15.4.4.7\" rel=\"nofollow\">http://es5.github.io/#x15.4.4.7</a></em></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here's a good mnemonic.  <b>A</b>pply uses <b>A</b>rrays and <b>A</b>lways takes one or two Arguments.  When you use <b>C</b>all you have to <b>C</b>ount the number of arguments.</p>\n",
                    "is_accepted": false,
                    "score": 52
                },
                {
                    "body": "<p>We can differentiate call and apply methods as below</p>\n\n<p>CALL : A function with argument provide individually.\nIf you know the arguments to be passed or there are no argument to pass you can use call.</p>\n\n<p>APPLY : Call a function with argument provided as an array. You can use apply if you don't know how many argument are going to pass to the function.</p>\n\n<p>There is a advantage of using apply over call, we don't need to change the number of argument only we can change a array that is passed.</p>\n\n<p>There is not big difference in performance. But we can say call is bit faster as compare to apply because an array need to evaluate in apply method.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Follows an extract from <a href=\"http://rads.stackoverflow.com/amzn/click/1449381871\">Closure: The Definitive Guide by Michael Bolin</a>. It might look a bit lengthy, but it's saturated with a lot of insight. From \"Appendix B. Frequently Misunderstood JavaScript Concepts\":</p>\n\n<hr>\n\n<h1>What <code>this</code> Refers to When a Function is Called</h1>\n\n<p>When calling a function of the form <code>foo.bar.baz()</code>, the object <code>foo.bar</code> is referred to as the receiver. When the function is called, it is the receiver that is used as the value for <code>this</code>:</p>\n\n<pre><code>var obj = {};\nobj.value = 10;\n/** @param {...number} additionalValues */\nobj.addValues = function(additionalValues) {\n  for (var i = 0; i &lt; arguments.length; i++) {\n    this.value += arguments[i];\n  }\n  return this.value;\n};\n// Evaluates to 30 because obj is used as the value for 'this' when\n// obj.addValues() is called, so obj.value becomes 10 + 20.\nobj.addValues(20);\n</code></pre>\n\n<p>If there is no explicit receiver when a function is called, then the global object becomes the receiver. As explained in \"goog.global\" on page 47, window is the global object when JavaScript is executed in a web browser. This leads to some surprising behavior:</p>\n\n<pre><code>var f = obj.addValues;\n// Evaluates to NaN because window is used as the value for 'this' when\n// f() is called. Because and window.value is undefined, adding a number to\n// it results in NaN.\nf(20);\n// This also has the unintentional side effect of adding a value to window:\nalert(window.value); // Alerts NaN\n</code></pre>\n\n<p>Even though <code>obj.addValues</code> and <code>f</code> refer to the same function, they behave differently when called because the value of the receiver is different in each call. For this reason, when calling a function that refers to <code>this</code>, it is important to ensure that <code>this</code> will have the correct value when it is called. To be clear, if <code>this</code> were not referenced in the function body, then the behavior of <code>f(20)</code> and <code>obj.addValues(20)</code> would be the same.</p>\n\n<p>Because functions are first-class objects in JavaScript, they can have their own methods. All functions have the methods <code>call()</code> and <code>apply()</code> which make it possible to redefine the receiver (i.e., the object that <code>this</code> refers to) when calling the function. The method signatures are as follows:</p>\n\n<pre><code>/**\n* @param {*=} receiver to substitute for 'this'\n* @param {...} parameters to use as arguments to the function\n*/\nFunction.prototype.call;\n/**\n* @param {*=} receiver to substitute for 'this'\n* @param {Array} parameters to use as arguments to the function\n*/\nFunction.prototype.apply;\n</code></pre>\n\n<p>Note that the only difference between <code>call()</code> and <code>apply()</code> is that <code>call()</code> receives the function parameters as individual arguments, whereas <code>apply()</code> receives them as a single array:</p>\n\n<pre><code>// When f is called with obj as its receiver, it behaves the same as calling\n// obj.addValues(). Both of the following increase obj.value by 60:\nf.call(obj, 10, 20, 30);\nf.apply(obj, [10, 20, 30]);\n</code></pre>\n\n<p>The following calls are equivalent, as <code>f</code> and <code>obj.addValues</code> refer to the same function:</p>\n\n<pre><code>obj.addValues.call(obj, 10, 20, 30);\nobj.addValues.apply(obj, [10, 20, 30]);\n</code></pre>\n\n<p>However, since neither <code>call()</code> nor <code>apply()</code> uses the value of its own receiver to substitute for the receiver argument when it is unspecified, the following will not work:</p>\n\n<pre><code>// Both statements evaluate to NaN\nobj.addValues.call(undefined, 10, 20, 30);\nobj.addValues.apply(undefined, [10, 20, 30]);\n</code></pre>\n\n<p>The value of <code>this</code> can never be <code>null</code> or <code>undefined</code> when a function is called. When <code>null</code> or <code>undefined</code> is supplied as the receiver to <code>call()</code> or <code>apply()</code>, the global object is used as the value for receiver instead. Therefore, the previous code has the same undesirable side effect of adding a property named <code>value</code> to the global object.</p>\n\n<p>It may be helpful to think of a function as having no knowledge of the variable to which it is assigned. This helps reinforce the idea that the value of this will be bound when the function is called rather than when it is defined.</p>\n\n<hr>\n\n<p>End of extract.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>Here's a small-ish post, I wrote on this:</p>\n\n<p><a href=\"http://sizeableidea.com/call-versus-apply-javascript/\" rel=\"nofollow\">http://sizeableidea.com/call-versus-apply-javascript/</a></p>\n\n<pre><code>var obj1 = { which : \"obj1\" },\nobj2 = { which : \"obj2\" };\n\nfunction execute(arg1, arg2){\n    console.log(this.which, arg1, arg2);\n}\n\n//using call\nexecute.call(obj1, \"dan\", \"stanhope\");\n//output: obj1 dan stanhope\n\n//using apply\nexecute.apply(obj2, [\"dan\", \"stanhope\"]);\n//output: obj2 dan stanhope\n\n//using old school\nexecute(\"dan\", \"stanhope\");\n//output: undefined \"dan\" \"stanhope\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Call() takes comma-separated arguments, ex: </p>\n\n<p><code>.call(scope, arg1, arg2, arg3)</code> </p>\n\n<p>and apply() takes an array of arguments, ex: </p>\n\n<p><code>.apply(scope, [arg1, arg2, arg3])</code> </p>\n\n<p>here are few more usage examples: \n<a href=\"http://blog.i-evaluation.com/2012/08/15/javascript-call-and-apply/\">http://blog.i-evaluation.com/2012/08/15/javascript-call-and-apply/</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>It is useful at times for one object to borrow the function of another object, meaning that the borrowing object simply executes the lent function as if it were its own.  </p>\n\n<p><strong>A small code example:</strong></p>\n\n<pre><code>var friend = {\n    car: false,\n    lendCar: function ( canLend ){\n      this.car = canLend;\n }\n\n}; \n\nvar me = {\n    car: false,\n    gotCar: function(){\n      return this.car === true;\n  }\n};\n\nconsole.log(me.gotCar()); // false\n\nfriend.lendCar.call(me, true); \n\nconsole.log(me.gotCar()); // true\n\nfriend.lendCar.apply(me, [false]);\n\nconsole.log(me.gotCar()); // false\n</code></pre>\n\n<p>These methods are very useful for giving objects temporary functionality.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Fundamental difference is that <code>call()</code> accepts an <strong><em>argument list</em></strong>, while <code>apply()</code> accepts a <strong><em>single array of arguments</em></strong>.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Even though <code>call</code> and <code>apply</code> achive the same thing, I think there is atleast one place where you cannot use <code>call</code> but can only use <code>apply</code>. That is when you want to support inheritance and want to call the constructor.</p>\n\n<p>Here is a function allows you to create classes which also supports creating classes by extending other classes.</p>\n\n<pre><code>function makeClass( properties ) {\n    var ctor = properties['constructor'] || function(){}\n    var Super = properties['extends'];\n    var Class = function () {\n                 // Here 'call' cannot work, only 'apply' can!!!\n                 if(Super)\n                    Super.apply(this,arguments);  \n                 ctor.apply(this,arguments);\n                }\n     if(Super){\n        Class.prototype = Object.create( Super.prototype );\n        Class.prototype.constructor = Class;\n     }\n     Object.keys(properties).forEach( function(prop) {\n           if(prop!=='constructor' &amp;&amp; prop!=='extends')\n            Class.prototype[prop] = properties[prop];\n     });\n   return Class; \n}\n\n//Usage\nvar Car = makeClass({\n             constructor: function(name){\n                         this.name=name;\n                        },\n             yourName: function() {\n                     return this.name;\n                   }\n          });\n//We have a Car class now\n var carInstance=new Car('Fiat');\ncarInstance.youName();// ReturnsFiat\n\nvar SuperCar = makeClass({\n               constructor: function(ignore,power){\n                     this.power=power;\n                  },\n               extends:Car,\n               yourPower: function() {\n                    return this.power;\n                  }\n              });\n//We have a SuperCar class now, which is subclass of Car\nvar superCar=new SuperCar('BMW xy',2.6);\nsuperCar.yourName();//Returns BMW xy\nsuperCar.yourPower();// Returns 2.6\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What is the difference between using call and apply to invoke a function?</p>\n\n<pre><code>var func = function(){\n  alert('hello!');\n};\n</code></pre>\n\n<p><code>func.apply();</code></p>\n\n<p>vs</p>\n\n<pre><code>func.call();\n</code></pre>\n\n<p>Are there performance differences between the two methods? When is it best to use call over apply and vice versa?</p>\n",
            "last_activity_date": 1424873332,
            "question_id": 1986896,
            "score": 1335,
            "tags": [
                "javascript",
                "performance",
                "function",
                "dynamic"
            ],
            "title": "What is the difference between call and apply?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Because delete only removes the object from the element in the array, the length of the array won't change. Splice removes the object and shortens the array.</p>\n\n<p>The following code will display \"a\", \"b\", \"undefined\", \"d\"</p>\n\n<pre><code>myArray = ['a', 'b', 'c', 'd']; delete myArray[2];\n\nfor (var count = 0; count &lt; myArray.length; count++) {\n    alert(myArray[count]);\n}\n</code></pre>\n\n<p>Whereas this will display \"a\", \"b\", \"d\"</p>\n\n<pre><code>myArray = ['a', 'b', 'c', 'd']; myArray.splice(2,1);\n\nfor (var count = 0; count &lt; myArray.length; count++) {\n    alert(myArray[count]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 70
                },
                {
                    "body": "<p>Delete in this case will only set the element as undefined:</p>\n\n<pre><code>&gt; myArray = ['a', 'b', 'c', 'd']\n  [\"a\", \"b\", \"c\", \"d\"]\n&gt; delete myArray[0]\n  true\n&gt; myArray\n  [undefined, \"b\", \"c\", \"d\"]\n</code></pre>\n\n<p>Splice actually removes the element from the array:</p>\n\n<pre><code>&gt; myArray = ['a', 'b', 'c', 'd']\n  [\"a\", \"b\", \"c\", \"d\"]\n&gt; myArray.splice(0, 2)\n  [\"a\", \"b\"]\n&gt; myArray\n  [\"c\", \"d\"]\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 926
                },
                {
                    "body": "<p>From <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Special_Operators/delete_Operator\"> Core JavaScript 1.5 Reference > Operators > Special Operators > delete Operator</a> :</p>\n\n<blockquote>\n  <p>When you delete an array element, the\n  array length is not affected. For\n  example, if you delete a[3], a[4] is\n  still a[4] and a[3] is undefined. This\n  holds even if you delete the last\n  element of the array (delete\n  a[a.length-1]).</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><code>splice</code> will work with numeric indices.</p>\n\n<p>whereas <code>delete</code> can be used against other kind of indices..</p>\n\n<p>example:</p>\n\n<pre><code>delete myArray['text1'];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<h1>Array.remove() Method</h1>\n\n<p><strong>John Resig</strong>, creator of jQuery created a very handy <code>Array.remove</code> method that I always use it in my projects.</p>\n\n<pre><code>// Array Remove - By John Resig (MIT Licensed)\nArray.prototype.remove = function(from, to) {\n  var rest = this.slice((to || from) + 1 || this.length);\n  this.length = from &lt; 0 ? this.length + from : from;\n  return this.push.apply(this, rest);\n};\n</code></pre>\n\n<p>and here's some examples of how it could be used:</p>\n\n<pre><code>// Remove the second item from the array\narray.remove(1);\n// Remove the second-to-last item from the array\narray.remove(-2);\n// Remove the second and third items from the array\narray.remove(1,2);\n// Remove the last and second-to-last items from the array\narray.remove(-2,-1);\n</code></pre>\n\n<p><a href=\"http://ejohn.org/blog/javascript-array-remove/\">John's website</a></p>\n",
                    "is_accepted": false,
                    "score": 242
                },
                {
                    "body": "<p>I stumbled onto this question while trying to understand how to remove every occurrence of an element from an Array. <a href=\"http://jsfiddle.net/y5NbD/5/\">Here's a comparison</a> of <code>splice</code> and <code>delete</code> for removing every <code>'c'</code> from the <code>items</code> Array.</p>\n\n<pre><code>var items = ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd'];\n\nwhile (items.indexOf('c') !== -1) {\n  items.splice(items.indexOf('c'), 1);\n}\n\nconsole.log(items); // [\"a\", \"b\", \"d\", \"a\", \"b\", \"d\"]\n\nitems = ['a', 'b', 'c', 'd', 'a', 'b', 'c', 'd'];\n\nwhile (items.indexOf('c') !== -1) {\n  delete items[items.indexOf('c')];\n}\n\nconsole.log(items); // [\"a\", \"b\", undefined, \"d\", \"a\", \"b\", undefined, \"d\"]\n\u200b\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>If you want to iterate a large array and selectively delete elements, it would be expensive to call splice() for every delete because splice() would have to re-index subsequent elements every time. Because arrays are associative in Javascript, it would be more efficient to delete the individual elements then re-index the array afterwards. </p>\n\n<p>You can do it by building a new array. e.g</p>\n\n<pre><code>function reindexArray( array )\n{\n       var result = [];\n        for( var key in array )\n                result.push( array[key] );\n        return result;\n};\n</code></pre>\n\n<p>But I don't think you can modify the key values in the original array, which would be more efficient - it looks like you might have to create a new array.</p>\n\n<p>Note that you don't need to check for the \"undefined\" entries as they don't actually exist and the for loop doesn't return them. It's an artifact of the array printing that displays them as undefined. They don't appear to exist in memory.</p>\n\n<p>It would be nice if you could use something like slice() which would be quicker, but it does not re-index. Anyone know of a better way?</p>\n\n<hr>\n\n<p>Actually, you can probably do it in place as follows which is probably more efficient, performance-wise:</p>\n\n<pre><code>reindexArray : function( array )\n{\n    var index = 0;                          // The index where the element should be\n    for( var key in array )                 // Iterate the array\n    {\n        if( parseInt( key ) !== index )     // If the element is out of sequence\n            array[index] = array[key];      // Move it to the correct, earlier position in the array\n        ++index;                            // Update the index\n    }\n\n    array.splice( index );  // Remove any remaining elements (These will be duplicates of earlier items)\n},\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>It's probably also worth mentioning that splice only works on arrays. (Object properties can't be relied on to follow a consistent order.)</p>\n\n<p>To remove the key-value pair from an object, delete is actually what you want: </p>\n\n<pre><code>delete myObj.propName;     // , or:\ndelete myObj[\"propName\"];  // Equivalent.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>you can use something like this</p>\n\n<pre><code>var my_array = [1,2,3,4,5,6];\ndelete my_array[4];\nconsole.log(my_array.filter(function(a){return typeof a !== 'undefined';}));\n</code></pre>\n\n<p>Should display [1, 2, 3, 4, 6]</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function deleteFromArray(array, indexToDelete){\n  var remain = new Array();\n  for(var i in array){\n    if(array[i] == indexToDelete){\n      continue;\n    }\n    remain.push(array[i]);\n  }\n  return remain;\n}\n\nmyArray = ['a', 'b', 'c', 'd'];\ndeleteFromArray(myArray , 0);\n</code></pre>\n\n<p>// result : myArray = ['b', 'c', 'd'];</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>delete</strong> acts like a non real world situation, it just <em>removes</em> the item, but the array length stays the same:</p>\n\n<p>example from node terminal:</p>\n\n<pre><code>&gt; var arr = [\"a\",\"b\",\"c\",\"d\"];\n&gt; delete arr[2]\ntrue\n&gt; arr\n[ 'a', 'b', , 'd', 'e' ]\n</code></pre>\n\n<p>Here is a function to remove an item of an array by index, using <strong>slice()</strong>, it takes the arr as the first arg, and the index of the member you want to delete as the second argument. As you can see, it actually deletes the member of the array, and will reduce the array length by 1</p>\n\n<pre><code>function(arr,arrIndex){\n    return arr.slice(0,arrIndex).concat(arr.slice(arrIndex + 1));\n}\n</code></pre>\n\n<p>What the function above does is take all the members up to the index, and all the members after the index , and concatenates them together, and returns the result.</p>\n\n<p>Here is an example using the function above as a node module, seeing the terminal will be useful:</p>\n\n<pre><code>&gt; var arr = [\"a\",\"b\",\"c\",\"d\"]\n&gt; arr\n[ 'a', 'b', 'c', 'd' ]\n&gt; arr.length\n4 \n&gt; var arrayRemoveIndex = require(\"./lib/array_remove_index\");\n&gt; var newArray = arrayRemoveIndex(arr,arr.indexOf('c'))\n&gt; newArray\n[ 'a', 'b', 'd' ] // c ya later\n&gt; newArray.length\n3\n</code></pre>\n\n<p>please note that this will not work one array with dupes in it, because indexOf(\"c\") will just get the first occurance, and only splice out and remove the first \"c\" it finds.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This works perfectly </p>\n\n<pre><code>    var delrow = window.event.srcElement;\n    while ((delrow = delrow.parentElement) &amp;&amp; delrow.tagName != \"TR\");\n    delrow.parentElement.removeChild(delrow);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>IndexOf</code> accepts also a reference type. Suppose the following scenario:</p>\n\n<pre><code>var arr = [{item: 1}, {item: 2}, {item: 3}];\n\nvar found = find(2, 3); //pseudo code: will return [{item: 2}, {item:3}]\n\nvar l = found.length;\nwhile(l--) {\n  var index = arr.indexOf(found[l])\n  arr.splice(index, 1);\n}\n\nconsole.log(arr.length); //1\n</code></pre>\n\n<p>Differently:</p>\n\n<pre><code>var item2 = findUnique(2); //will return {item: 2}\nvar l = arr.length;\nvar found = false;\n  while(!found &amp;&amp; l--) {\n  found = arr[l] === item2;\n}\n\nconsole.log(l, arr[l]);// l is index, arr[l] is the item you look for\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What is the difference between using <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/delete\">the <code>delete</code> operator</a> on the array element as opposed to using <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice\">the <code>Array.splice</code> method</a>? For example: </p>\n\n<pre><code>myArray = ['a', 'b', 'c', 'd'];\n\ndelete myArray[1];\n//  or\nmyArray.splice (1, 1);\n</code></pre>\n\n<p>Why even have the splice method if I can delete array elements like I can with objects?</p>\n",
            "last_activity_date": 1420978918,
            "question_id": 500606,
            "score": 641,
            "tags": [
                "javascript",
                "arrays",
                "array-splice",
                "delete-operator"
            ],
            "title": "JavaScript Array Delete Elements"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Yes you only need $() when you're using jQuery. If you want jQuery's help to do DOM things just keep this in mind.</p>\n\n<pre><code>$(this)[0] === this\n</code></pre>\n\n<p>Basically every time you get a set of elements back jQuery turns it into an array. If you know you only have one result, it's going to be in the first element.</p>\n\n<pre><code>$(\"#myDiv\")[0] === document.getElementById(\"myDiv\");\n</code></pre>\n\n<p>And so on...</p>\n",
                    "is_accepted": true,
                    "score": 250
                },
                {
                    "body": "<p>Yeah, by using $(this), you enabled jquery functionalities for the object. Just 'this', it only has generic javascript functionalities.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Yes, you need <code>$(this)</code> for jQuery functions, but when you want to access basic javascript methods of the element that don't use jQuery, you can just use <code>this</code>.</p>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p><code>$()</code> is the jQuery constructor function.</p>\n\n<p><code>this</code> is a reference to the DOM element of invocation.</p>\n\n<p>so basically, in <code>$(this)</code>, you are just passing the <code>this</code> in <code>$()</code> as a parameter so that you could call jQuery methods and functions.</p>\n",
                    "is_accepted": false,
                    "score": 201
                },
                {
                    "body": "<p>When using <code>jQuery</code>, it is advised to use <code>$(this)</code> usually. But if you know (you should learn and know) the difference, sometimes it is more convenient and quicker to use just <code>this</code>. For instance:</p>\n\n<pre><code>$(\".myCheckboxes\").change(function(){ \n    if(this.checked) \n       alert(\"checked\"); \n});\n</code></pre>\n\n<p>is easier and purer than</p>\n\n<pre><code>$(\".myCheckboxes\").change(function(){ \n      if($(this).is(\":checked\")) \n         alert(\"checked\"); \n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p><strong>this</strong> reference a javascript object and <strong>$(this)</strong> used to encapsulate with jQuery. </p>\n\n<p><strong>Example =></strong>  </p>\n\n<pre><code>// Getting Name and modify css property of dom object through jQuery\nvar name = $(this).attr('name');\n$(this).css('background-color','white')\n\n// Getting form object and its data and work on..\nthis = document.getElementsByName(\"new_photo\")[0]\nformData = new FormData(this)\n\n// Calling blur method on find input field with help of both as below\n$(this).find('input[type=text]')[0].blur()\n\n//Above is equivalent to\nthis = $(this).find('input[type=text]')[0]\nthis.blur()\n\n//Find value of a text field with id \"index-number\"\nthis = document.getElementById(\"index-number\");\nthis.value\n\nor \n\nthis = $('#index-number');\n$(this).val(); // Equivalent to $('#index-number').val()\n$(this).css('color','#000000')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><em><code>this</code> is the element, <code>$(this)</code> is the jQuery object constructed with that element</em></p>\n\n<pre><code>$(\".class\").each(function(){\n //the iterations current html element \n //the classic JavaScript API is exposed here (such as .innerHTML and .appendChild)\n var HTMLElement = this;\n\n //the current HTML element is passed to the jQuery constructor\n //the jQuery API is exposed here (such as .html() and .append())\n var jQueryObject = $(this);\n});\n</code></pre>\n\n<p>A deeper look</p>\n\n<p><strong><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" rel=\"nofollow\"><code>this</code><sup>MDN</sup></a></strong> is contained in an execution context</em></p>\n\n<p>The scope refers to the current <strong><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-10.3\" rel=\"nofollow\">Execution Context<sup>ECMA</sup></a></strong>. In order to understand <code>this</code>, it is important to understand the way execution contexts operate in JavaScript. </p>\n\n<p><em>execution contexts bind this</em></p>\n\n<p>When control enters an execution context (code is being executed in that scope) the environment for variables are setup (Lexical and Variable Environments - essentially this sets up an area for variables to enter which were already accessible, and an area for local variables to be stored), and the binding of <code>this</code> occurs.</p>\n\n<p><em>jQuery binds this</em></p>\n\n<p>Execution contexts form a logical stack. The result is that contexts deeper in the stack have access to previous variables, but their bindings may have been altered. <strong>Every time jQuery calls a callback function, it alters the this binding</strong> by using <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"nofollow\"><code>apply</code><sup>MDN</sup></a></strong>.</p>\n\n<pre><code>callback.apply( obj[ i ] )//where obj[i] is the current element\n</code></pre>\n\n<p>The result of calling <code>apply</code> is that <strong>inside of jQuery callback functions, <code>this</code> refers to the current element</strong> being used by the callback function. </p>\n\n<p>For example, in <code>.each</code>, the callback function commonly used allows for <code>.each(function(index,element){/*scope*/})</code>. In that scope, <code>this == element</code> is true. </p>\n\n<p>jQuery callbacks use the apply function to bind the function being called with the current element. This element comes from the jQuery object's element array. Each jQuery object constructed contains an array of elements which match the <strong><a href=\"http://api.jquery.com/category/selectors/\" rel=\"nofollow\">selector<sup>jQuery API</sup></a></strong> that was used to instantiate the jQuery object. </p>\n\n<p><code>$(selector)</code> calls the jQuery function (remember that <code>$</code> is a reference to <code>jQuery</code>, code: <code>window.jQuery = window.$ = jQuery;</code>). Internally, the jQuery function instantiates a function object. So while it may not be immediately obvious, using <code>$()</code> internally uses <code>new jQuery()</code>. Part of the construction of this jQuery object is to find all matches of the selector. The constructor will also accept html strings <em>and elements</em>. <strong>When you pass <code>this</code> to the jQuery constructor, you are passing the current element for a jQuery object to be constructed with</strong>. The jQuery object then contains an array-like structure of the DOM elements matching the selector (or just the single element in the case of <code>this</code>). </p>\n\n<p>Once the jQuery object is constructed, the jQuery API is now exposed. When a jQuery api function is called, it will internally iterate over this array-like structure. For each item in the array, it calls the callback function for the api, binding the callback's <code>this</code> to the current element. This call can be seen in the code snippet above where <code>obj</code> is the array-like structure, and <code>i</code> is the iterator used for the position in the array of the current element.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am currently working through this tutorial: <a href=\"http://docs.jquery.com/Tutorials%3aGetting_Started_with_jQuery\">Getting Started with jQuery</a></p>\n\n<p>For the two examples below:</p>\n\n<pre><code>$(\"#orderedlist\").find(\"li\").each(function(i) {\n  $(this).append(\" BAM! \" + i);\n});\n\n\n$(\"#reset\").click(function() {\n  $(\"form\").each(function() {\n    this.reset();\n  });\n});\n</code></pre>\n\n<p>Notice in the first example, we use <code>$(this)</code> to append some text inside of each li element. In the second example we use \"this\" directly when resetting the form.</p>\n\n<p><code>$(this)</code> seems to be used a lot more often than <code>this</code>.</p>\n\n<p>My guess is in the first example, <code>$()</code> is converting each <code>li</code> element into a jQuery object which understands the <code>append()</code> function whereas in the second example <code>reset()</code> can be called directly on the form.</p>\n\n<p>Basically we need <code>$()</code> for special jQuery-only functions.</p>\n\n<p>Is this correct?</p>\n",
            "last_activity_date": 1423611138,
            "question_id": 1051782,
            "score": 232,
            "tags": [
                "javascript",
                "jquery",
                "this"
            ],
            "title": "jQuery $(this) vs this"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Something like this:</p>\n\n<pre><code>var mylist = $('#myUL');\nvar listitems = mylist.children('li').get();\nlistitems.sort(function(a, b) {\n   return $(a).text().toUpperCase().localeCompare($(b).text().toUpperCase());\n})\n$.each(listitems, function(idx, itm) { mylist.append(itm); });\n</code></pre>\n\n<p>From this page: <a href=\"http://www.onemoretake.com/2009/02/25/sorting-elements-with-jquery/\">http://www.onemoretake.com/2009/02/25/sorting-elements-with-jquery/</a></p>\n\n<p>Above code will sort your unordered list with id 'myUL'. </p>\n\n<p>OR you can use a plugin like TinySort. <a href=\"https://github.com/Sjeiti/TinySort\">https://github.com/Sjeiti/TinySort</a></p>\n",
                    "is_accepted": false,
                    "score": 243
                },
                {
                    "body": "<p>You do <em>not</em> need jQuery to do this...</p>\n\n<pre><code>function sortUnorderedList(ul, sortDescending) {\n  if(typeof ul == \"string\")\n    ul = document.getElementById(ul);\n\n  // Idiot-proof, remove if you want\n  if(!ul) {\n    alert(\"The UL object is null!\");\n    return;\n  }\n\n  // Get the list items and setup an array for sorting\n  var lis = ul.getElementsByTagName(\"LI\");\n  var vals = [];\n\n  // Populate the array\n  for(var i = 0, l = lis.length; i &lt; l; i++)\n    vals.push(lis[i].innerHTML);\n\n  // Sort it\n  vals.sort();\n\n  // Sometimes you gotta DESC\n  if(sortDescending)\n    vals.reverse();\n\n  // Change the list on the page\n  for(var i = 0, l = lis.length; i &lt; l; i++)\n    lis[i].innerHTML = vals[i];\n}\n</code></pre>\n\n<p>Easy to use...</p>\n\n<pre><code>sortUnorderedList(\"ID_OF_LIST\");\n</code></pre>\n\n<p><strong><a href=\"http://jsfiddle.net/stodolaj/De8Ku/\">Live Demo &rarr;</a></strong></p>\n",
                    "is_accepted": true,
                    "score": 76
                },
                {
                    "body": "<pre><code>$(\".list li\").sort(asc_sort).appendTo('.list');\n//$(\"#debug\").text(\"Output:\");\n// accending sort\nfunction asc_sort(a, b){\n    return ($(b).text()) &lt; ($(a).text()) ? 1 : -1;    \n}\n\n// decending sort\nfunction dec_sort(a, b){\n    return ($(b).text()) &gt; ($(a).text()) ? 1 : -1;    \n}\n</code></pre>\n\n<p>live demo : <a href=\"http://jsbin.com/eculis/876/edit\">http://jsbin.com/eculis/876/edit</a></p>\n",
                    "is_accepted": false,
                    "score": 56
                },
                {
                    "body": "<p>To make this work work with all browsers including Chrome you need to make the callback function of sort() return -1,0 or 1. </p>\n\n<p>see <a href=\"http://inderpreetsingh.com/2010/12/01/chromes-javascript-sort-array-function-is-different-yet-proper/\">http://inderpreetsingh.com/2010/12/01/chromes-javascript-sort-array-function-is-different-yet-proper/</a></p>\n\n<pre><code>function sortUL(selector) {\n    $(selector).children(\"li\").sort(function(a, b) {\n        var upA = $(a).text().toUpperCase();\n        var upB = $(b).text().toUpperCase();\n        return (upA &lt; upB) ? -1 : (upA &gt; upB) ? 1 : 0;\n    }).appendTo(selector);\n}\nsortUL(\"ul.mylist\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>I was looking to do this myself, and I wasnt satisfied with any of the answers provided simply because, I believe, they are quadratic time, and I need to do this on lists hundreds of items long.</p>\n\n<p>I ended up extending jquery, and my solution <em>uses</em> jquery, but could easily be modified to use straight javascript.</p>\n\n<p>I only access each item twice, and perform one linearithmic sort, so this should, I think, work out to be a lot faster on large datasets, though I freely confess I could be mistaken there:</p>\n\n<pre><code>sortList: function() {\n   if (!this.is(\"ul\") || !this.length)\n      return\n   else {\n      var getData = function(ul) {\n         var lis     = ul.find('li'),\n             liData  = {\n               liTexts : []\n            }; \n\n         for(var i = 0; i&lt;lis.length; i++){\n             var key              = $(lis[i]).text().trim().toLowerCase().replace(/\\s/g, \"\"),\n             attrs                = lis[i].attributes;\n             liData[key]          = {},\n             liData[key]['attrs'] = {},\n             liData[key]['html']  = $(lis[i]).html();\n\n             liData.liTexts.push(key);\n\n             for (var j = 0; j &lt; attrs.length; j++) {\n                liData[key]['attrs'][attrs[j].nodeName] = attrs[j].nodeValue;\n             }\n          }\n\n          return liData;\n       },\n\n       processData = function (obj){\n          var sortedTexts = obj.liTexts.sort(),\n              htmlStr     = '';\n\n          for(var i = 0; i &lt; sortedTexts.length; i++){\n             var attrsStr   = '',\n                 attributes = obj[sortedTexts[i]].attrs;\n\n             for(attr in attributes){\n                var str = attr + \"=\\'\" + attributes[attr] + \"\\' \";\n                attrsStr += str;\n             }\n\n             htmlStr += \"&lt;li \"+ attrsStr + \"&gt;\" + obj[sortedTexts[i]].html+\"&lt;/li&gt;\";\n          }\n\n          return htmlStr;\n\n       };\n\n       this.html(processData(getData(this)));\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>@SolutionYogi's answer works like a charm, but it seems that using $.each is less straightforward and efficient than directly appending listitems :</p>\n\n<pre><code>var mylist = $('#list');\nvar listitems = mylist.children('li').get();\n\nlistitems.sort(function(a, b) {\n   return $(a).text().toUpperCase().localeCompare($(b).text().toUpperCase());\n})\n\nmylist.empty().append(listitems);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/De8Ku/2567/\" rel=\"nofollow\">Fiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I'm a bit out of my depth here and I'm hoping this is actually possible.</p>\n\n<p>I'd like to be able to call a function that would sort all the items in my list alphabetically.</p>\n\n<p>I've been looking through the jQuery UI for sorting but that doesn't seem to be it. Any thoughts?</p>\n",
            "last_activity_date": 1407844114,
            "question_id": 1134976,
            "score": 154,
            "tags": [
                "javascript",
                "jquery",
                "dom",
                "sorting"
            ],
            "title": "How may I sort a list alphabetically using jQuery?"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>Use a combination of <code>filter</code> and <code>indexOf</code>.</p>\n\n<pre><code>array1.filter(function(n) {\n    return array2.indexOf(n) != -1\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 135
                },
                {
                    "body": "<ol>\n<li>Sort it</li>\n<li>check one by one from the index 0, create new array from that.</li>\n</ol>\n\n<p>Something like this, Not tested well though.</p>\n\n<pre><code>function intersection(x,y){\n x.sort();y.sort();\n var i=j=0;ret=[];\n while(i&lt;x.length &amp;&amp; j&lt;y.length){\n  if(x[i]&lt;y[j])i++;\n  else if(y[j]&lt;x[i])j++;\n  else {\n   ret.push(x[i]);\n   i++,j++;\n  }\n }\n return ret;\n}\n\nalert(intersection([1,2,3], [2,3,4,5]));\n</code></pre>\n\n<p>PS:The algorithm only intended for Numbers and Normal Strings, intersection of arbitary object arrays may not work. </p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>destructive seems simplest, especially if we can assume the input is sorted</p>\n\n<pre>\n/* destructively finds the intersection of \n * two arrays in a simple fashion.  \n *\n * PARAMS\n *  a - first array, must already be sorted\n *  b - second array, must already be sorted\n *\n * NOTES\n *  State of input arrays is undefined when\n *  the function returns.  They should be \n *  (prolly) be dumped.\n *\n *  Should have O(n) operations, where n is \n *    n = MIN(a.length, b.length)\n */\nfunction intersection_destructive(a, b)\n{\n  var result = new Array();\n  while( a.length &gt; 0 && b.length &gt; 0 )\n  {  \n     if      (a[0] &lt; b[0] ){ a.shift(); }\n     else if (a[0] &gt; b[0] ){ b.shift(); }\n     else /* they're equal */\n     {\n       result.push(a.shift());\n       b.shift();\n     }\n  }\n\n  return result;\n}\n</pre>\n\n<p>Non-destructive has to be a hair more complicated, since we've got to track indices</p>\n\n<pre>\n/* finds the intersection of \n * two arrays in a simple fashion.  \n *\n * PARAMS\n *  a - first array, must already be sorted\n *  b - second array, must already be sorted\n *\n * NOTES\n *\n *  Should have O(n) operations, where n is \n *    n = MIN(a.length(), b.length())\n */\nfunction intersect_safe(a, b)\n{\n  var ai=0, bi=0;\n  var result = new Array();\n\n  while( ai &lt; a.length && bi &lt; b.length )\n  {\n     if      (a[ai] &lt; b[bi] ){ ai++; }\n     else if (a[ai] &gt; b[bi] ){ bi++; }\n     else /* they're equal */\n     {\n       result.push(a[ai]);\n       ai++;\n       bi++;\n     }\n  }\n\n  return result;\n}\n</pre>\n",
                    "is_accepted": true,
                    "score": 73
                },
                {
                    "body": "<p>How about just using associative arrays?</p>\n\n<pre><code>function intersect(a, b) {\n    var d1 = {};\n    var d2 = {};\n    var results = [];\n    for (var i = 0; i &lt; a.length; i++) {\n        d1[a[i]] = true;\n    }\n    for (var j = 0; j &lt; b.length; j++) {\n        d2[b[j]] = true;\n    }\n    for (var k in d1) {\n        if (d2[k]) \n            results.push(k);\n    }\n    return results;\n}\n</code></pre>\n\n<p>edit:</p>\n\n<pre><code>// new version\nfunction intersect(a, b) {\n    var d = {};\n    var results = [];\n    for (var i = 0; i &lt; b.length; i++) {\n        d[b[i]] = true;\n    }\n    for (var j = 0; j &lt; a.length; j++) {\n        if (d[a[j]]) \n            results.push(a[j]);\n    }\n    return results;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>\"filter\" and \"indexOf\" aren't supported on Array in IE. How about this:</p>\n\n<pre><code>var array1 = [1, 2, 3];\nvar array2 = [2, 3, 4, 5];\n\nvar intersection = [];\nfor (i in array1) {\n    for (j in array2) {\n        if (array1[i] == array2[j]) intersection.push(array1[i]);\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>For arrays containing only strings or numbers you can do something with sorting, as per some of the other answers. For the general case of arrays of arbitrary objects I don't think you can avoid doing it the long way. The following will give you the intersection of any number of arrays provided as parameters to <code>arrayIntersection</code>:</p>\n\n<pre><code>var arrayContains = Array.prototype.indexOf ?\n    function(arr, val) {\n        return arr.indexOf(val) &gt; -1;\n    } :\n    function(arr, val) {\n        var i = arr.length;\n        while (i--) {\n            if (arr[i] === val) {\n                return true;\n            }\n        }\n        return false;\n    };\n\nfunction arrayIntersection() {\n    var val, arrayCount, firstArray, i, j, intersection = [], missing;\n    var arrays = Array.prototype.slice.call(arguments); // Convert arguments into a real array\n\n    // Search for common values\n    firstArr = arrays.pop();\n    if (firstArr) {\n        j = firstArr.length;\n        arrayCount = arrays.length;\n        while (j--) {\n            val = firstArr[j];\n            missing = false;\n\n            // Check val is present in each remaining array \n            i = arrayCount;\n            while (!missing &amp;&amp; i--) {\n                if ( !arrayContains(arrays[i], val) ) {\n                    missing = true;\n                }\n            }\n            if (!missing) {\n                intersection.push(val);\n            }\n        }\n    }\n    return intersection;\n}\n\narrayIntersection( [1, 2, 3, \"a\"], [1, \"a\", 2], [\"a\", 1] ); // Gives [1, \"a\"];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here's a very naive implementation I'm using. It's non-destructive and also makes sure not to duplicate entires.</p>\n\n<pre><code>Array.prototype.contains = function(elem) {\n    return(this.indexOf(elem) &gt; -1);\n};\n\nArray.prototype.intersect = function( array ) {\n    // this is naive--could use some optimization\n    var result = [];\n    for ( var i = 0; i &lt; this.length; i++ ) {\n        if ( array.contains(this[i]) &amp;&amp; !result.contains(this[i]) )\n            result.push( this[i] );\n    }\n    return result;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The <a href=\"http://documentcloud.github.com/underscore/\" rel=\"nofollow\">underscore.js</a> library has a nice intersection function.   </p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The performance of @atk's implementation for sorted arrays of primitives can be improved by using .pop rather than .shift.</p>\n\n<pre><code>function intersect(array1, array2) {\n   var result = [];\n   // Don't destroy the original arrays\n   var a = array1.slice(0);\n   var b = array2.slice(0);\n   var aLast = a.length - 1;\n   var bLast = b.length - 1;\n   while (aLast &gt;= 0 &amp;&amp; bLast &gt;= 0) {\n      if (a[aLast] &gt; b[bLast] ) {\n         a.pop();\n         aLast--;\n      } else if (a[aLast] &lt; b[bLast] ){\n         b.pop();\n         bLast--;\n      } else /* they're equal */ {\n         result.push(a.pop());\n         b.pop();\n         aLast--;\n         bLast--;\n      }\n   }\n   return result;\n}\n</code></pre>\n\n<p>I created a benchmark using jsPerf: <a href=\"http://bit.ly/P9FrZK\">http://bit.ly/P9FrZK</a>.  It's about three times faster to use .pop.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><a href=\"http://jsfiddle.net/neoswf/aXzWw/\"><strong>I have made a JsFiddle</strong></a> Banchmark test page for all the methods here, including the  <a href=\"http://underscorejs.org/#intersection\">_underscore intersection</a> function.\n<em>(higher is better)</em></p>\n\n<p><img src=\"http://i.stack.imgur.com/YC8cF.png\" alt=\"enter image description here\"></p>\n\n<p>Till now <strong>intersect_safe gave the best results</strong>. YOU &amp; Underscore the worst. </p>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<pre><code>function intersection(A,B){\nvar result = new Array();\nfor (i=0; i&lt;A.length; i++) {\n    for (j=0; j&lt;B.length; j++) {\n        if (A[i] == B[j] &amp;&amp; $.inArray(A[i],result) == -1) {\n            result.push(A[i]);\n        }\n    }\n}\nreturn result;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>intersection of N arrays in coffeescript</p>\n\n<pre><code>getIntersection: (arrays) -&gt;\n    if not arrays.length\n        return []\n    a1 = arrays[0]\n    for a2 in arrays.slice(1)\n        a = (val for val in a1 when val in a2)\n        a1 = a\n    return a1.unique()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'll contribute with what has been working out best for me:</p>\n\n<pre><code>if (!Array.prototype.intersect){\nArray.prototype.intersect = function (arr1) {\n\n    var r = [], o = {}, l = this.length, i, v;\n    for (i = 0; i &lt; l; i++) {\n        o[this[i]] = true;\n    }\n    l = arr1.length;\n    for (i = 0; i &lt; l; i++) {\n        v = arr1[i];\n        if (v in o) {\n            r.push(v);\n        }\n    }\n    return r;\n};\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I wish to add here this method also </p>\n\n<pre><code>var a = [1,2,3];\nvar b = [2,3,4,5];\nvar c = $(b).not($(b).not(a));\nalert(c);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>not about efficiency, but easy to follow, here is an example of unions and intersections of sets, it handles arrays of sets and sets of sets.</p>\n\n<p><a href=\"http://jsfiddle.net/zhulien/NF68T/\" rel=\"nofollow\">http://jsfiddle.net/zhulien/NF68T/</a></p>\n\n<pre><code>// process array [element, element...], if allow abort ignore the result\nfunction processArray(arr_a, cb_a, blnAllowAbort_a)\n{\n    var arrResult = [];\n    var blnAborted = false;\n    var intI = 0;\n\n    while ((intI &lt; arr_a.length) &amp;&amp; (blnAborted === false))\n    {\n        if (blnAllowAbort_a)\n        {\n            blnAborted = cb_a(arr_a[intI]);\n        }\n        else\n        {\n            arrResult[intI] = cb_a(arr_a[intI]);\n        }\n        intI++;\n    }\n\n    return arrResult;\n}\n\n// process array of operations [operation,arguments...]\nfunction processOperations(arrOperations_a)\n{\n    var arrResult = [];\n    var fnOperationE;\n\n    for(var intI = 0, intR = 0; intI &lt; arrOperations_a.length; intI+=2, intR++) \n    {\n        var fnOperation = arrOperations_a[intI+0];\n        var fnArgs = arrOperations_a[intI+1];\n        if (fnArgs === undefined)\n        {\n            arrResult[intR] = fnOperation();\n        }\n        else\n        {\n            arrResult[intR] = fnOperation(fnArgs);\n        }\n    }\n\n    return arrResult;\n}\n\n// return whether an element exists in an array\nfunction find(arr_a, varElement_a)\n{\n    var blnResult = false;\n\n    processArray(arr_a, function(varToMatch_a)\n    {\n        var blnAbort = false;\n\n        if (varToMatch_a === varElement_a)\n        {\n            blnResult = true;\n            blnAbort = true;\n        }\n\n        return blnAbort;\n    }, true);\n\n    return blnResult;\n}\n\n// return the union of all sets\nfunction union(arr_a)\n{\n    var arrResult = [];\n    var intI = 0;\n\n    processArray(arr_a, function(arrSet_a)\n    {\n        processArray(arrSet_a, function(varElement_a)\n        {\n            // if the element doesn't exist in our result\n            if (find(arrResult, varElement_a) === false)\n            {\n                // add it\n                arrResult[intI] = varElement_a;\n                intI++;\n            }\n        });\n    });\n\n    return arrResult;\n}\n\n// return the intersection of all sets\nfunction intersection(arr_a)\n{\n    var arrResult = [];\n    var intI = 0;\n\n    // for each set\n    processArray(arr_a, function(arrSet_a)\n    {\n        // every number is a candidate\n        processArray(arrSet_a, function(varCandidate_a)\n        {\n            var blnCandidate = true;\n\n            // for each set\n            processArray(arr_a, function(arrSet_a)\n            {\n                // check that the candidate exists\n                var blnFoundPart = find(arrSet_a, varCandidate_a);\n\n                // if the candidate does not exist\n                if (blnFoundPart === false)\n                {\n                    // no longer a candidate\n                    blnCandidate = false;\n                }\n            });\n\n            if (blnCandidate)\n            {\n                // if the candidate doesn't exist in our result\n                if (find(arrResult, varCandidate_a) === false)\n                {\n                    // add it\n                    arrResult[intI] = varCandidate_a;\n                    intI++;\n                }\n            }\n        });\n    });\n\n    return arrResult;\n}\n\nvar strOutput = ''\n\nvar arrSet1 = [1,2,3];\nvar arrSet2 = [2,5,6];\nvar arrSet3 = [7,8,9,2];\n\n// return the union of the sets\nstrOutput = union([arrSet1, arrSet2, arrSet3]);\nalert(strOutput);\n\n// return the intersection of 3 sets\nstrOutput = intersection([arrSet1, arrSet2, arrSet3]);\nalert(strOutput);\n\n// of 3 sets of sets, which set is the intersecting set\nstrOutput = processOperations([intersection,[[arrSet1, arrSet2], [arrSet2], [arrSet2, arrSet3]]]);\nalert(strOutput);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>\"indexOf\" for IE 9.0, chrome, firefox, opera, </p>\n\n<pre><code>    function intersection(a,b){\n     var rs = [], x = a.length;\n     while (x--) b.indexOf(a[x])!=-1 &amp;&amp; rs.push(a[x]);\n     return rs.sort();\n    }\n\nintersection([1,2,3], [2,3,4,5]);\n//Result:  [2,3]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is underscore.js implementation:</p>\n\n<pre><code>_.intersection = function(array) {\n  if (array == null) return [];\n  var result = [];\n  var argsLength = arguments.length;\n  for (var i = 0, length = array.length; i &lt; length; i++) {\n    var item = array[i];\n    if (_.contains(result, item)) continue;\n    for (var j = 1; j &lt; argsLength; j++) {\n      if (!_.contains(arguments[j], item)) break;\n    }\n    if (j === argsLength) result.push(item);\n  }\n  return result;\n};\n</code></pre>\n\n<p>Source: <a href=\"http://underscorejs.org/docs/underscore.html\" rel=\"nofollow\">http://underscorejs.org/docs/underscore.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Another indexed approach able to process any number of arrays at once:</p>\n\n<pre><code>// Calculate intersection of multiple array or object values.\nfunction intersect (arrList) {\n    var arrLength = Object.keys(arrList).length;\n        // (Also accepts regular objects as input)\n    var index = {};\n    for (var i in arrList) {\n        for (var j in arrList[i]) {\n            var v = arrList[i][j];\n            if (index[v] === undefined) index[v] = 0;\n            index[v]++;\n        };\n    };\n    var retv = [];\n    for (var i in index) {\n        if (index[i] == arrLength) retv.push(i);\n    };\n    return retv;\n};\n</code></pre>\n\n<p>It works only for values that can be evaluated as strings and you should pass them as an array like:</p>\n\n<pre><code>intersect ([arr1, arr2, arr3...]);\n</code></pre>\n\n<p>...but it transparently accepts objects as parameter or as any of the elements to be intersected (always returning array of common values). Examples:</p>\n\n<pre><code>intersect ({foo: [1, 2, 3, 4], bar: {a: 2, j:4}}); // [2, 4]\nintersect ([{x: \"hello\", y: \"world\"}, [\"hello\", \"user\"]]); // [\"hello\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What's the simplest, library-free code for implementing array intersections in javascript? I want to write</p>\n\n<pre><code>intersection([1,2,3], [2,3,4,5])\n</code></pre>\n\n<p>and get</p>\n\n<pre><code>[2, 3]\n</code></pre>\n",
            "last_activity_date": 1425473484,
            "question_id": 1885557,
            "score": 100,
            "tags": [
                "javascript",
                "data-structures",
                "intersection"
            ],
            "title": "Simplest code for array intersection in javascript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Consider that page : </p>\n\n<p><a href=\"http://jsfiddle.net/bNvhH/\" rel=\"nofollow\">http://jsfiddle.net/bNvhH/</a></p>\n\n<p>I use both direct and delegate event handler. When we create another span.green element and we click on it, the delegated event handler is triggered whereas the direct event handler is not.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The first way, <code>$(\"div#target span.green\").on()</code>, binds a click handler directly to the span(s) that match the selector at the moment that code is executed. This means if other spans are added later (or have their class changed to match) they have missed out and will not have a click handler. It also means if you later remove the \"green\" class from one of the spans its click handler will continue to run - jQuery doesn't keep track of how the handler was assigned and check to see if the selector still matches.</p>\n\n<p>The second way, <code>$(\"div#target\").on()</code>, binds a click handler to the div(s) that match (again, this is against those that match at that moment), but when a click occurs somewhere in the div the handler function will only be run if the click occurred not just in the div but in a child element matching the selector in the second parameter to <code>.on()</code>, \"span.green\". Done this way it doesn't matter when those child spans were created, clicking upon them will still run the handler.</p>\n\n<p>So for a page that isn't dynamically adding or changing its contents you won't notice a difference between the two methods. If you are dynamically adding extra child elements the second syntax means you don't have to worry about assigning click handlers to them because you've already done it once on the parent.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><strong>Case 1 (direct):</strong></p>\n\n<pre><code>$(\"div#target span.green\").on(\"click\", function() {...});\n</code></pre>\n\n<p>== Hey! I want every span.green inside div#target to listen up: when you get clicked on, do X.</p>\n\n<p><strong>Case 2 (delegated):</strong></p>\n\n<pre><code>$(\"div#target\").on(\"click\", \"span.green\", function() {...});\n</code></pre>\n\n<p>== Hey, div#target! When any of your child elements which are \"span.green\" get clicked, do X with them.</p>\n\n<p><strong>Summary</strong></p>\n\n<p>In case 1, each of those spans has been individually given instructions. If new spans get created, they won't have heard the instruction and won't respond to clicks. Each span is <strong>directly responsible</strong> for its own events.</p>\n\n<p>In case 2, only the container has been given the instruction; it is responsible for noticing clicks <em>on behalf of</em> its child elements. The work of catching events has been <strong>delegated</strong>.</p>\n",
                    "is_accepted": true,
                    "score": 177
                },
                {
                    "body": "<p>The explanation of N3dst4 is perfect. Based on this, we can assume that all child elements are inside body, therefore we need use only this:</p>\n\n<pre><code>$('body').on('click', '.element', function(){\n    alert('It works!')\n});\n</code></pre>\n\n<p>It works with direct or delegate event.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I was recently making some research on the same topic and after reading a lot of explanations about the same thing from different sources, I found this one to be the best one to understand it clearly:\n<a href=\"http://www.elijahmanor.com/differences-between-jquery-bind-vs-live-vs-delegate-vs-on/\" rel=\"nofollow\">http://www.elijahmanor.com/differences-between-jquery-bind-vs-live-vs-delegate-vs-on/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am trying to understand this particular difference between the <em>direct</em> and <em>delegated</em> event handlers using the <a href=\"http://api.jquery.com/on/\">jQuery <em>.on()</em> method</a>. Specifically, the last sentence in this paragraph:</p>\n\n<blockquote>\n  <p>When a <code>selector</code> is provided, the event handler is referred to as <em>delegated</em>. The handler is not called when the event occurs directly on the bound element, but only for descendants (inner elements) that match the selector. jQuery bubbles the event from the event target up to the element where the handler is attached (i.e., innermost to outermost element) and runs the handler for any elements along that path matching the selector.</p>\n</blockquote>\n\n<p>What does it mean by \"runs the handler for any elements\"? I made a <a href=\"http://labs.siku-siku.com/jquery/on/\">test page</a> to experiment with the concept. But both following constructs lead to the same behavior:</p>\n\n<pre><code>$(\"div#target span.green\").on(\"click\", function() {\n   alert($(this).attr(\"class\") + \" is clicked\");\n});\n</code></pre>\n\n<p>or,</p>\n\n<pre><code>$(\"div#target\").on(\"click\", \"span.green\", function() {\n   alert($(this).attr(\"class\") + \" is clicked\");\n});\n</code></pre>\n\n<p>Maybe someone could refer to a different example to clarify this point? Thanks.</p>\n",
            "last_activity_date": 1422464274,
            "question_id": 8110934,
            "score": 64,
            "tags": [
                "javascript",
                "jquery",
                "event-bubbling"
            ],
            "title": "Direct vs. Delegated - jQuery .on()"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>PHP is evaluated at the server; javascript is evaluated at the client/browser, thus you can't call a PHP function from javascript <em>directly</em>. But you can issue an HTTP request to the server that will activate a PHP function, with AJAX.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The only way to execute PHP from JS is AJAX.\nYou can send data to server (for eg, GET /ajax.php?do=someFunction)\nthen in ajax.php you write:</p>\n\n<pre><code>function someFunction() {\n    echo 'Answer';\n}\n\nif ($_GET['do'] === \"someFunction\") {\n    someFunction();\n}\n</code></pre>\n\n<p>and then, catch the answer with JS (i'm using jQuery for making AJAX requests)</p>\n\n<p>Probably you'll need some format of answer. See JSON or XML, but JSON is easy to use with JavaScript. In PHP you can use function json_encode($array); which gets array as argument.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This is, in essence, what <a href=\"https://developer.mozilla.org/en/ajax\">AJAX</a> is <strong>for</strong>. Your page loads, and you add an event to an element. When the user causes the event to be triggered, say by clicking something, your Javascript uses the <a href=\"https://developer.mozilla.org/en/XMLHttpRequest\">XMLHttpRequest object</a> to send a request to a server.</p>\n\n<p>After the server responds (presumably with output), another Javascript function/event gives you a place to work with that output, including simply sticking it into the page like any other piece of HTML.</p>\n\n<p>You can do it \"by hand\" with plain Javascript , or you can use jQuery. Depending on the size of your project and particular situation, it may be more simple to just use plain Javascript .</p>\n\n<h1>Plain Javascript</h1>\n\n<p>In this very basic example, we send a request to <code>myAjax.php</code> when the user clicks a link. The server will generate some content, in this case \"hello world!\". We will put into the HTML element with the id <code>output</code>.</p>\n\n<p><strong>The javascript</strong></p>\n\n<pre><code>// handles the click event for link 1, sends the query\nfunction getOutput() {\n  getRequest(\n      'myAjax.php', // URL for the PHP file\n       drawOutput,  // handle successful request\n       drawError    // handle error\n  );\n  return false;\n}  \n// handles drawing an error message\nfunction drawError() {\n    var container = document.getElementById('output');\n    container.innerHTML = 'Bummer: there was an error!';\n}\n// handles the response, adds the html\nfunction drawOutput(responseText) {\n    var container = document.getElementById('output');\n    container.innerHTML = responseText;\n}\n// helper function for cross-browser request object\nfunction getRequest(url, success, error) {\n    var req = false;\n    try{\n        // most browsers\n        req = new XMLHttpRequest();\n    } catch (e){\n        // IE\n        try{\n            req = new ActiveXObject(\"Msxml2.XMLHTTP\");\n        } catch(e) {\n            // try an older version\n            try{\n                req = new ActiveXObject(\"Microsoft.XMLHTTP\");\n            } catch(e) {\n                return false;\n            }\n        }\n    }\n    if (!req) return false;\n    if (typeof success != 'function') success = function () {};\n    if (typeof error!= 'function') error = function () {};\n    req.onreadystatechange = function(){\n        if(req.readyState == 4) {\n            return req.status === 200 ? \n                success(req.responseText) : error(req.status);\n        }\n    }\n    req.open(\"GET\", url, true);\n    req.send(null);\n    return req;\n}\n</code></pre>\n\n<p><strong>The HTML</strong> </p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"return getOutput();\"&gt; test &lt;/a&gt;\n&lt;div id=\"output\"&gt;waiting for action&lt;/div&gt;\n</code></pre>\n\n<p><strong>The PHP</strong></p>\n\n<pre><code>// file myAjax.php\n&lt;?php\n  echo 'hello world!';\n?&gt;\n</code></pre>\n\n<p><strong>Try it out: <a href=\"http://jsfiddle.net/GRMule/m8CTk/\">http://jsfiddle.net/GRMule/m8CTk/</a></strong></p>\n\n<p>.</p>\n\n<h1>With a javascript library (jQuery et al)</h1>\n\n<p>Arguably, that is a lot of Javascript code. You can shorten that up by tightening the blocks or using more terse logic operators, of course, but there's still a lot going on there. If you plan on doing a lot of this type of thing on your project, you might be better off with a javascript library.</p>\n\n<p>Using the same HTML and PHP from above, this is your entire script (with jQuery included on the page). I've tightened up the code a little to be more consistent with jQuery's general style, but you get the idea:</p>\n\n<pre><code>// handles the click event, sends the query\nvar function getOutput() {\n   $.ajax({\n      url:'myAjax.php',\n      complete: function (response) {\n          $('#output').html(response.responseText);\n      },\n      error: function () {\n          $('#output').html('Bummer: there was an error!');\n      }\n  });\n  return false;\n}\n</code></pre>\n\n<p><strong>Try it out: <a href=\"http://jsfiddle.net/GRMule/WQXXT/\">http://jsfiddle.net/GRMule/WQXXT/</a></strong></p>\n\n<p>Don't rush out for jQuery just yet: adding any library is still adding hundreds or thousands of lines of code to your project just as surely as if you had written them. Inside the jQuery library file, you'll find similar code to that in the first example, plus a <strong>whole lot more</strong>. That may be a good thing, it may not. Plan, and consider your project's current size and future possibility for expansion and the target environment or platform.</p>\n\n<p>If this is all you need to do, write the plain javascript once and you're done.</p>\n\n<p><strong>Documentation</strong></p>\n\n<ul>\n<li><em>AJAX</em> on MDN - <a href=\"https://developer.mozilla.org/en/ajax\">https://developer.mozilla.org/en/ajax</a></li>\n<li><code>XMLHttpRequest</code> on MDN - <a href=\"https://developer.mozilla.org/en/XMLHttpRequest\">https://developer.mozilla.org/en/XMLHttpRequest</a></li>\n<li><code>XMLHttpRequest</code> on MSDN - <a href=\"http://msdn.microsoft.com/en-us/library/ie/ms535874%28v=vs.85%29.aspx\">http://msdn.microsoft.com/en-us/library/ie/ms535874%28v=vs.85%29.aspx</a></li>\n<li>jQuery - <a href=\"http://jquery.com/download/\">http://jquery.com/download/</a></li>\n<li><code>jQuery.ajax</code> - <a href=\"http://api.jquery.com/jQuery.ajax/\">http://api.jquery.com/jQuery.ajax/</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 57
                },
                {
                    "body": "<p>I recently published a jQuery plugin which allows you to make PHP function calls in various ways: <a href=\"https://github.com/Xaxis/jqueryphp\" rel=\"nofollow\">https://github.com/Xaxis/jqueryphp</a></p>\n\n<p>Simple example usage:</p>\n\n<pre><code>// Both .end() and .data() return data to variables\nvar strLenA = P.strlen('some string').end();\nvar strLenB = P.strlen('another string').end();\nvar totalStrLen = strLenA + strLenB;\nconsole.log( totalStrLen ); // 25\n\n// .data Returns data in an array\nvar data1 = P.crypt(\"Some Crypt String\").data();\nconsole.log( data1 ); // [\"$1$Tk1b01rk$shTKSqDslatUSRV3WdlnI/\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<p>Is there a way I can run a php function through a js function?</p>\n\n<p>something like this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction test(){\ndocument.getElementById(\"php_code\").innerHTML=\"&lt;?php \nquery(\"hello\");       ?&gt;\";    \n}\n&lt;/script&gt;\n\n&lt;a href=\"#\" style=\"display:block; color:#000033; font-family:Tahoma; font-size:12px;\"     \nonclick=\"test(); return false;\"&gt; test &lt;/a&gt;\n&lt;span id=\"php_code\"&gt; &lt;/span&gt;\n</code></pre>\n\n<p>I basically want to run the php function <code>query(\"hello\")</code>, when I click on the href called \"Test\" which would call the php function.</p>\n",
            "last_activity_date": 1422105979,
            "question_id": 7165395,
            "score": 28,
            "tags": [
                "php",
                "javascript",
                "html",
                "ajax"
            ],
            "title": "Call php function from javascript"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Drop the semicolon after the function definition.</p>\n\n<pre><code>(function (msg){alert(msg)})\n('SO');\n</code></pre>\n\n<p>Above should work.</p>\n\n<p>DEMO Page: <a href=\"http://jsbin.com/ujazi\">http://jsbin.com/ujazi</a></p>\n\n<p>Code: <a href=\"http://jsbin.com/ujazi/edit\">http://jsbin.com/ujazi/edit</a></p>\n\n<p>I have discussed this kind of pattern in this post:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/1122690/jquery-and-questions/1122740#1122740\">jQuery and $ questions</a></p>\n\n<p><strong>EDIT:</strong></p>\n\n<p>If you look at <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf\">ECMA script specification</a>, there are 3 ways you can define a function. (Page 98, Section 13 Function Definition)</p>\n\n<h2>1. Using Function constructor</h2>\n\n<pre><code>var sum = new Function('a','b', 'return a + b;');\nalert(sum(10, 20)); //alerts 30\n</code></pre>\n\n<h2>2. Using Function declaration.</h2>\n\n<pre><code>function sum(a, b)\n{\n    return a + b;\n}\n\nalert(sum(10, 10)); //Alerts 20;\n</code></pre>\n\n<h2>3. Function Expression</h2>\n\n<pre><code>var sum = function(a, b) { return a + b; }\n\nalert(sum(5, 5)); // alerts 10\n</code></pre>\n\n<p>So you may ask, what's the difference between declaration and expression? </p>\n\n<p>From ECMA Script specification:</p>\n\n<blockquote>\n  <p>FunctionDeclaration :\n      function Identifier ( FormalParameterListopt ){ FunctionBody\n  }</p>\n  \n  <p>FunctionExpression :\n      function Identifieropt ( FormalParameterListopt ){ FunctionBody\n  }</p>\n</blockquote>\n\n<p>If you notice, 'identifier' is <strong>optional</strong> for function expression. And when you don't give an identifier, you create an anonymous function. It doesn't mean that you can't specify an identifier.</p>\n\n<p>This means following is valid.</p>\n\n<pre><code>var sum = function mySum(a, b) { return a + b; }\n</code></pre>\n\n<p>Important point to note is that you can use 'mySum' only inside the mySum function body, not outside. See following example:</p>\n\n<pre><code>var test1 = function test2() { alert(typeof test2); }\n\nalert(typeof(test2)); //alerts 'undefined', surprise! \n\ntest1(); //alerts 'function' because test2 is a function.\n</code></pre>\n\n<p><a href=\"http://jsbin.com/esupa\">Live Demo</a></p>\n\n<p>Compare this to</p>\n\n<pre><code> function test1() { alert(typeof test1) };\n\n alert(typeof test1); //alerts 'function'\n\n test1(); //alerts 'function'\n</code></pre>\n\n<hr>\n\n<p>Armed with this knowledge, let's try to analyze your code.</p>\n\n<p>When you have code like, </p>\n\n<pre><code>    function(msg) { alert(msg); }\n</code></pre>\n\n<p>You created a function expression. And you can execute this function expression by wrapping it inside parenthesis.</p>\n\n<pre><code>    (function(msg) { alert(msg); })('SO'); //alerts SO.\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 301
                },
                {
                    "body": "<p>It's called a self-invoked function.  </p>\n\n<p>What you are doing when you call <code>(function(){})</code> is returning a function object.  When you append <code>()</code> to it, it is invoked and anything in the body is executed.  The <code>;</code> denotes the end of the statement, that's why the 2nd invocation fails.</p>\n\n<p>There's a good article about the pattern <a href=\"http://teaching.cs.uml.edu/~heines/91.461/resources/SlideSharePresentations/JavaScriptPatterns-SelfInvocation.pdf\">here</a>. I'm sure there are others.</p>\n",
                    "is_accepted": false,
                    "score": 98
                },
                {
                    "body": "<p>It's just how Javascript works.  You can declare a named function:</p>\n\n<pre><code>function foo(msg){\n   alert(msg);\n}\n</code></pre>\n\n<p>And call it:</p>\n\n<pre><code>foo(\"Hi!\");\n</code></pre>\n\n<p>Or, you can declare an anonymous function:</p>\n\n<pre><code>var foo = function (msg) {\n    alert(msg);\n}\n</code></pre>\n\n<p>And call that:</p>\n\n<pre><code>foo(\"Hi!\");\n</code></pre>\n\n<p>Or, you can just never bind the function to a name:</p>\n\n<pre><code>(function(msg){\n   alert(msg);\n })(\"Hi!\");\n</code></pre>\n\n<p>Functions can also return functions:</p>\n\n<pre><code>function make_foo() {\n    return function(msg){ alert(msg) };\n}\n\n(make_foo())(\"Hi!\");\n</code></pre>\n\n<p>It's worth nothing that any variables defined with \"var\" in the body of <code>make_foo</code> will be closed over by each function returned by <code>make_foo</code>.  This is a closure, and it means that the any change made to the value by one function will be visible by another.  </p>\n\n<p>This lets you encapsulate information, if you desire:</p>\n\n<pre><code>function make_greeter(msg){\n    return function() { alert(msg) };\n}\n\nvar hello = make_greeter(\"Hello!\");\n\nhello();\n</code></pre>\n\n<p>It's just how nearly every programming language but Java works.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>The code you show,</p>\n\n<pre><code>(function (msg){alert(msg)});\n('SO');\n</code></pre>\n\n<p>consist of <em>two</em> statements. The first is an expression which yields a function object (which will then be garbage collected because it is not saved). The second is an expression which yields a string. To apply the function to the string, you either need to pass the string as an argument to the function when it is created (which you also show above), or you will need to actually store the function in a variable, so that you can apply it at a later time, at your leisure. Like so:</p>\n\n<pre><code>var f = (function (msg){alert(msg)});\nf('SO');\n</code></pre>\n\n<p>Note that by storing an anonymous function (a lambda function) in a variable, your are effectively giving it a name. Hence you may just as well define a regular function:</p>\n\n<pre><code>function f(msg) {alert(msg)};\nf('SO');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>An anonymous function is not a function with the name \"\". It is simply a function without a name.</p>\n\n<p>Like any other value in Javascript, a function does not need a name to be created. Though it is far more useful to actually bind it to a name just like any other value.</p>\n\n<p>But like any other value, you sometimes want to use it without binding it to a name, that's the self-invoking pattern.</p>\n\n<p>Here is a function and a number, not bound, they do nothing and can never be used:</p>\n\n<pre><code>function(){ alert(\"plop\"); }\n2;\n</code></pre>\n\n<p>So we have to store them in a variable to be able to use them, just like any other value:</p>\n\n<pre><code>var f = function(){ alert(\"plop\"); }\nvar n = 2;\n</code></pre>\n\n<p>You can also use a syntatic sugar to bind the function to a variable:</p>\n\n<pre><code>function f(){ alert(\"plop\"); }\nvar n = 2;\n</code></pre>\n\n<p>But if naming them is not required and would lead to more confusion and less readability, you could just use them right away.</p>\n\n<pre><code>(function(){ alert(\"plop\"); })(); // will display \"plop\"\nalert(2 + 3); // will display 5\n</code></pre>\n\n<p>Here, my function and my numbers are not bound to a variable but still can be used.</p>\n\n<p>Said like this, it looks like self-invoking function have no real value. But you have to keep in mind that Javascript scope delimiter is the function and not the block ({}).</p>\n\n<p>So a self-invoking function actually has the same meaning as a C++, C# or Java block. Which means that variable created inside will not \"leak\" outside the scope. This is very useful in Javascript in order not to pollute the global scope.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>This answer is not strictly related to the question, but you might be interested to find out that this kind of syntax feature is not particular to functions. For example, we can always do something like this:</p>\n\n<pre><code>alert(\n    {foo: \"I am foo\", bar: \"I am bar\"}.foo\n); // alerts \"I am foo\"\n</code></pre>\n\n<p>Related to functions. As they are objects, which inherit from Function.prototype, we can do things like:</p>\n\n<pre><code>Function.prototype.foo = function () {\n    return function () {\n        alert(\"foo\");\n    };\n};\n\nvar bar = (function () {}).foo();\n\nbar(); // alerts foo\n</code></pre>\n\n<p>And you know, we don't even have to surround functions with parenthesis in order to execute them. Anyway, as long as we try to assign the result to a variable.</p>\n\n<pre><code>var x = function () {} (); // this function is executed but does nothing\n\nfunction () {} (); // syntax error\n</code></pre>\n\n<p>One other thing you may do with functions, as soon as you declare them, is to invoke the <code>new</code> operator over them and obtain an object. The following are equivalent:</p>\n\n<pre><code>var obj = new function () {\n    this.foo = \"bar\";\n};\n\nvar obj = {\n    foo : \"bar\"\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>One thing I found confusing is that the \"()\" are grouping operators. </p>\n\n<p>Here is your basic declared function. </p>\n\n<p>Ex. 1:</p>\n\n<pre><code>var message = 'SO';\n\nfunction foo(msg) {\n    alert(msg);\n}\n\nfoo(message);\n</code></pre>\n\n<p>Functions are objects, and can be grouped. So let's throw parens around the function. </p>\n\n<p>Ex. 2:</p>\n\n<pre><code>var message = 'SO';\n\nfunction foo(msg) {  //declares foo\n    alert(msg);\n}\n\n(foo)(message);     // calls foo\n</code></pre>\n\n<p>Now instead of declaring and right-away calling the same function, we can use basic substitution to declare it as we call it. </p>\n\n<p>Ex. 3.</p>\n\n<pre><code>var message = 'SO';\n\n(function foo(msg) {\n    alert(msg);\n})(message);          // declares &amp; calls foo\n</code></pre>\n\n<p>Finally, we don't have a need for that extra foo because we're not using the name to call it! Functions can be anonymous. </p>\n\n<p>Ex. 4.</p>\n\n<pre><code>var message = 'SO';\n\n(function (msg) {   // remove unnecessary reference to foo\n    alert(msg);\n})(message);\n</code></pre>\n\n<p>To answer your question, refer back to Example 2. Your first line declares some nameless function and groups it, but does not call it. The second line groups a string. Both do nothing. (Vincent's first example.)</p>\n\n<pre><code>(function (msg){alert(msg)});  \n('SO');                       // nothing.\n\n(foo); \n(msg); //Still nothing.\n</code></pre>\n\n<p>But </p>\n\n<pre><code>(foo)\n(msg); //works\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 74
                },
                {
                    "body": "<p>There is one more property JavaScript function has. If you want to call same anonymous function recursively.</p>\n\n<pre><code>(function forInternalOnly(){\n\n  //you can use forInternalOnly to call this anonymous function\n  /// forInternalOnly can be used inside function only, like\n  var result = forInternalOnly();\n})();\n\n//this will not work\nforInternalOnly();// no such a method exist\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In summary of the previous comments:</p>\n\n<pre><code>function() {\n  alert(\"hello\");\n}();\n</code></pre>\n\n<p>when not assigned to a variable, yields a syntax error.  The code is parsed as a function statement (or definition), which renders the closing parentheses syntactically incorrect.  Adding parentheses around the function portion tells the interpreter (and programmer) that this is a function expression (or invocation), as in</p>\n\n<pre><code>(function() {\n  alert(\"hello\");\n})();\n</code></pre>\n\n<p>This is a self-invoking function, meaning it is created anonymously and runs immediately because the invocation happens in the same line where it is declared.  This self-invoking function is indicated with the familiar syntax to call a no-argument function, plus added parentheses around the name of the function: <code>(myFunction)();</code>.</p>\n\n<p>There is <a href=\"http://stackoverflow.com/questions/440739/what-do-parentheses-surrounding-a-javascript-object-function-class-declaration-m\">a good SO discussion JavaScript function syntax</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Anonymous functions are meant to be one-shot deal where you define a function on the fly so that it generates an output from you from an input that you are providing. Except that you did not provide the input. Instead, you wrote something on the second line ('SO'); - an independent statement that has nothing to do with the function. What did you expect? :)</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>this maybe a little late however my understanding of the asker's question is such that</p>\n\n<p>how does this magic work:</p>\n\n<pre><code>(function(){}) ('input')   // utilised in his example\n</code></pre>\n\n<p>I maybe wrong however the usual practice that people are familiar with is</p>\n\n<pre><code>(function(){}('input') ) \n</code></pre>\n\n<p>the reason is such that javascript parentheses aka (), can't contain statements and when the parser\nencounters the function keyword, it knows to parse it as a function expression and not a function declaration. </p>\n\n<p>source: <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\" rel=\"nofollow\">http://benalman.com/news/2010/11/immediately-invoked-function-expression/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Another point of view </p>\n\n<p>First, you can declare an anonymous function:</p>\n\n<pre><code>var foo = function(msg){\n alert(msg);\n}\n</code></pre>\n\n<p>Then you call it:</p>\n\n<pre><code>foo ('Few');\n</code></pre>\n\n<p>Because <strong>foo = function(msg){alert(msg);}</strong> so you can replace <strong>foo</strong> as:</p>\n\n<pre><code>function(msg){\n alert(msg);\n} ('Few');\n</code></pre>\n\n<p>But you should wrap your entire anonymous function inside pair of braces to avoid syntax error of declaring function when parsing. Then we have,</p>\n\n<pre><code>(function(msg){\n alert(msg);\n}) ('Few');\n</code></pre>\n\n<p>By this way, It's easy understand for me.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>It is a self-executing anonymous function. The first set of brackets contain the expressions to be executed, and the second set of brackets executes those expressions.</p>\n\n<pre><code>(function () {\n    return ( 10 + 20 );\n})();\n</code></pre>\n\n<p>Peter Michaux discusses the difference in <a href=\"http://peter.michaux.ca/articles/an-important-pair-of-parens\" rel=\"nofollow\">An Important Pair of Parentheses</a>.</p>\n\n<p>It is a useful construct when trying to hide variables from the parent namespace. All the code within the function is contained in the private scope of the function, meaning it can't be accessed at all from outside the function, making it truly private.</p>\n\n<p>See:</p>\n\n<ol>\n<li><a href=\"http://en.wikipedia.org/wiki/Closure_%28computer_science%29\" rel=\"nofollow\">Closure (computer science)</a></li>\n<li><a href=\"http://peter.michaux.ca/articles/javascript-namespacing\" rel=\"nofollow\">JavaScript Namespacing</a></li>\n<li><a href=\"http://peter.michaux.ca/articles/an-important-pair-of-parens\" rel=\"nofollow\">Important Pair of Javascript Parentheses</a></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The simple reason why it doesn't work is not because of the <code>;</code> indicating the end of the anonymous function, it is because without the <code>()</code> on the end of a function call, it is not a function call i.e</p>\n\n<pre><code>function help() {return true;}\n</code></pre>\n\n<p>if you call <code>result = help();</code> this is a call to a function and will return true</p>\n\n<p>if you call <code>result = help;</code> this is not a call, it is an assignment where help is treated like data to be assigned to result.</p>\n\n<p>what you did was declare/instantiate an anonymous function by adding the semicolon</p>\n\n<pre><code>(function (msg){/*code here*/});\n</code></pre>\n\n<p>and then tried to call it in another statement by using just parentheses... obviously because the function has no name but this will not work</p>\n\n<pre><code>('SO');\n</code></pre>\n\n<p>the interpreter sees the parentheses on the second line as a new instruction/statement thus it does not work, even if you did it like this</p>\n\n<pre><code>(function (msg){/*code here*/});('SO');\n</code></pre>\n\n<p>it still doesn't work, but it works when you remove the semi colon because the interpreter ignores white spaces and carriages and sees the complete code as one statement.</p>\n\n<pre><code>(function (msg){/*code here*/})        // this space is ignored by the interpreter\n('SO');\n</code></pre>\n\n<p>Conclusion: a function call is not a function call without the <code>()</code> on the end unless under specific conditions such as being invoked by another function i.e. onload='help' would execute the help function even though the parentheses were not included, i believe setTimeout and setInterval also allow this type of function call too, and i also believe that the interpreter adds the parentheses behind the scenes anyhow which brings us back to \"a function call is not a function call without the parentheses\".</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>When you did:</p>\n\n<pre><code>(function (msg){alert(msg)});\n('SO');\n</code></pre>\n\n<p>You ended the function before <code>('SO')</code> because of the semicolon. If you just write:</p>\n\n<pre><code>(function (msg){alert(msg)})\n('SO');\n</code></pre>\n\n<p>It will work.</p>\n\n<p>Working example: <a href=\"http://jsfiddle.net/oliverni/dbVjg/\" rel=\"nofollow\">http://jsfiddle.net/oliverni/dbVjg/</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>(function (msg){alert(msg)})\n('SO');</p>\n\n<p>This is a common method of using an anonymous function as a closure which many javascript frameworks use.</p>\n\n<p>this function called automatically, when code is compiled.</p>\n\n<p>If place ; at first line, compiler treated as two different lines. so can't get same results as above.</p>\n\n<p>this can also write as</p>\n\n<p>(function (msg){alert(msg)}('SO'));</p>\n\n<p>more details look into it: <a href=\"http://en.wikibooks.org/wiki/JavaScript/Anonymous_Functions\" rel=\"nofollow\">http://en.wikibooks.org/wiki/JavaScript/Anonymous_Functions</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>Anonymous Functions</strong></p>\n\n<p>In JavaScript, it's ok to have pieces of data lying around your program. Imagine you have the following in your code </p>\n\n<pre><code>&gt;&gt;&gt; \"test\"; [1,2,3]; undefined; null; 1;\n</code></pre>\n\n<p>This code may look a little odd, because it doesn't actually do anything, but the code is valid and is not going to cause an error. You can say that this code contains anonymous data\u2014anonymous because the data pieces are not assigned to any variable and therefore don't have a name.\nAs you now know, functions are like any other variable so they can also be used without being assigned a name:</p>\n\n<pre><code>&gt;&gt;&gt; function(a){return a;}\n</code></pre>\n\n<p>Now, these anonymous pieces of data scattered around your code are not really useful, except if they happen to be functions. In this case, there can be two elegant uses for them:</p>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p>1.You can pass an anonymous function as a parameter to another function. The receiving function can do something useful with the function that you pass.</p>\n      \n      <p>2.You can define an anonymous function and execute it right away.</p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm reading some posts about closures and see this stuff all over the places, but there is no explanation how does it works - just every time I'm told to use it...:</p>\n\n<pre><code>// Create a new anonymous function, to use as a wrapper\n(function(){\n    // The variable that would, normally, be global\n    var msg = \"Thanks for visiting!\";\n\n    // Binding a new function to a global object\n    window.onunload = function(){\n        // Which uses the 'hidden' variable\n        alert( msg );\n    };\n// Close off the anonymous function and execute it\n})();\n</code></pre>\n\n<p>Ok I see that we will create new anonymous function and then execute it. So after that this simple code should work (and it does):</p>\n\n<pre><code>(function (msg){alert(msg)})('SO');\n</code></pre>\n\n<p>My question is what kind of magic come to place here? I thought that when I wrote:</p>\n\n<pre><code>(function (msg){alert(msg)})\n</code></pre>\n\n<p>then new unnamed function will be created like function \"\"(msg) ...</p>\n\n<p>but then why this does not work?</p>\n\n<pre><code>(function (msg){alert(msg)});\n('SO');\n</code></pre>\n\n<p>Why it need to be in the same line?</p>\n\n<p>Could please point me the the some post or give me the explanation?</p>\n",
            "last_activity_date": 1416952967,
            "question_id": 1140089,
            "score": 271,
            "tags": [
                "javascript",
                "anonymous-function",
                "iife"
            ],
            "title": "Why do you need to invoke an anonymous function on the same line?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<h2>Function using the DetectMobileBrowsers.com Method</h2>\n\n<p>So I went back to this question and decided to answer more inclined towards a method using the <a href=\"http://detectmobilebrowsers.com\">http://detectmobilebrowsers.com</a> function.</p>\n\n<p>Here's a function using their script ( pulled straight from their site ) and returning a true or false value.</p>\n\n<pre><code>window.mobilecheck = function() {\n  var check = false;\n  (function(a,b){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4)))check = true})(navigator.userAgent||navigator.vendor||window.opera);\n  return check;\n}\n</code></pre>\n\n<p>Hopefully everyone else who wishes to use the <a href=\"http://detectmobilebrowsers.com\">http://detectmobilebrowsers.com</a> method in this manner can benefit from this too. </p>\n\n<hr>\n\n<h2>The Original Answer</h2>\n\n<p>You can do this by simply running through a list of devices and checking if the useragent matches anything like so:</p>\n\n<pre><code>function detectmob() { \n if( navigator.userAgent.match(/Android/i)\n || navigator.userAgent.match(/webOS/i)\n || navigator.userAgent.match(/iPhone/i)\n || navigator.userAgent.match(/iPad/i)\n || navigator.userAgent.match(/iPod/i)\n || navigator.userAgent.match(/BlackBerry/i)\n || navigator.userAgent.match(/Windows Phone/i)\n ){\n    return true;\n  }\n else {\n    return false;\n  }\n}\n</code></pre>\n\n<p>However since you believe that this method is unreliable, You could assume that any device that had a resolution of 800x600 or less was a mobile device too, narrowing your target even more (although these days many mobile devices have much greater resolutions than this)</p>\n\n<p>i.e </p>\n\n<pre><code>function detectmob() {\n   if(window.innerWidth &lt;= 800 &amp;&amp; window.innerHeight &lt;= 600) {\n     return true;\n   } else {\n     return false;\n   }\n}\n</code></pre>\n\n<p><strong>Reference:</strong> </p>\n\n<ul>\n<li><a href=\"http://www.quirksmode.org/js/detect.html\">Detecting Browser and Devices with javascript</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 266
                },
                {
                    "body": "<p>Here is a userAgent solution that is more efficent than match...</p>\n\n<pre><code>function _isMobile(){\n    // if we want a more complete list use this: http://detectmobilebrowsers.com/\n    // str.test() is more efficent than str.match()\n    // remember str.test is case sensitive\n    var isMobile = (/iphone|ipod|android|ie|blackberry|fennec/).test\n         (navigator.userAgent.toLowerCase());\n    return isMobile;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var isMobile = {\n    Android: function() {\n        return navigator.userAgent.match(/Android/i);\n    },\n    BlackBerry: function() {\n        return navigator.userAgent.match(/BlackBerry/i);\n    },\n    iOS: function() {\n        return navigator.userAgent.match(/iPhone|iPad|iPod/i);\n    },\n    Opera: function() {\n        return navigator.userAgent.match(/Opera Mini/i);\n    },\n    Windows: function() {\n        return navigator.userAgent.match(/IEMobile/i) || navigator.userAgent.match(/WPDesktop/i);\n    },\n    any: function() {\n        return (isMobile.Android() || isMobile.BlackBerry() || isMobile.iOS() || isMobile.Opera() || isMobile.Windows());\n    }\n};\n</code></pre>\n\n<p>How to use</p>\n\n<pre><code>if( isMobile.any() ) alert('Mobile');\n</code></pre>\n\n<p>To check to see if the user is on a specific mobile device:</p>\n\n<pre><code>if( isMobile.iOS() ) alert('iOS');\n</code></pre>\n\n<p>Ref: <a href=\"http://www.abeautifulsite.net/blog/2011/11/detecting-mobile-devices-with-javascript\">http://www.abeautifulsite.net/blog/2011/11/detecting-mobile-devices-with-javascript</a></p>\n\n<p>Enhanced version on github : <a href=\"https://github.com/smali-kazmi/detect-mobile-browser\">https://github.com/smali-kazmi/detect-mobile-browser</a></p>\n",
                    "is_accepted": false,
                    "score": 42
                },
                {
                    "body": "<p>How about:</p>\n\n<pre><code> if(typeof window.orientation !== 'undefined'){...}\n</code></pre>\n\n<p>...since smartphones usually support this property and desktop browsers don't.</p>\n",
                    "is_accepted": false,
                    "score": 99
                },
                {
                    "body": "<p>Feature detection is much better than trying to figure out which device you are on and very hard to keep up with new devices coming out all the time, a library like <a href=\"http://modernizr.com/\" rel=\"nofollow\">Modernizr</a> lets you know if a particular feature is available or not.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>To add an extra layer of control I use the HTML5 storage to detect if it is using mobile storage or desktop storage. If the browser does not support storage I have an array of mobile browser names and I compare the user agent with the browsers in the array.</p>\n\n<p>It is pretty simple. Here is the function:</p>\n\n<pre><code>// Used to detect whether the users browser is an mobile browser\nfunction isMobile() {\n    ///&lt;summary&gt;Detecting whether the browser is a mobile browser or desktop browser&lt;/summary&gt;\n    ///&lt;returns&gt;A boolean value indicating whether the browser is a mobile browser or not&lt;/returns&gt;\n\n    if (sessionStorage.desktop) // desktop storage \n        return false;\n    else if (localStorage.mobile) // mobile storage\n        return true;\n\n    // alternative\n    var mobile = ['iphone','ipad','android','blackberry','nokia','opera mini','windows mobile','windows phone','iemobile']; \n    for (var i in mobile) if (navigator.userAgent.toLowerCase().indexOf(mobile[i].toLowerCase()) &gt; 0) return true;\n\n    // nothing found.. assume desktop\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The best must be :</p>\n\n<pre><code>var isMobile = (/Mobile/i.test(navigator.userAgent));\n</code></pre>\n\n<p>But like like Yoav Barnea says...</p>\n\n<pre><code>// Seem legit\nvar isMobile = ('DeviceOrientationEvent' in window || 'orientation' in window);\n// But with my Chrome on windows, DeviceOrientationEvent == fct()\nif (/Windows NT|Macintosh|Mac OS X|Linux/i.test(navigator.userAgent)) isMobile = false;\n// My android have \"linux\" too\nif (/Mobile/i.test(navigator.userAgent)) isMobile = true;\n</code></pre>\n\n<p>After this 3 tests, i hope var isMobile is... ok</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is he full function </p>\n\n<pre><code>function isMobile(){\n    return (/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|android|ipad|playbook|silk/i.test(navigator.userAgent||navigator.vendor||window.opera)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test((navigator.userAgent||navigator.vendor||window.opera).substr(0,4)))\n}\n\njQuery.noConflict();\njQuery(document).ready(function(){\n    if(isMobile()) alert(\"Mobile\"); else alert(\"Not Mobile\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I'm looking for a function which return boolean value if user has mobile browser or not.</p>\n\n<p>I know that I can use <code>navigator.userAgent</code> and write that function by using regex, but user-agents are too various for different platforms. I doubt that match all possible devices would be easy, and I think this problem has been solved before many times so there should be some kind of complete solution for such task.</p>\n\n<p>I was looking at <a href=\"http://detectmobilebrowsers.com\">this site</a>, but sadly the script is so cryptic that I have no idea how to use it for my purpose, which is to create a function which return true / false.</p>\n",
            "last_activity_date": 1424388237,
            "question_id": 11381673,
            "score": 145,
            "tags": [
                "javascript",
                "platform-detection"
            ],
            "title": "Detecting a mobile browser"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>You can access capturing groups like this:</p>\n\n<pre><code>var myString = \"something format_abc\";\nvar myRegexp = /(?:^|\\s)format_(.*?)(?:\\s|$)/g;\nvar match = myRegexp.exec(myString);\nalert(match[1]);  // abc\n</code></pre>\n\n<p>And if there are multiple matches you can iterate over them:</p>\n\n<pre><code>match = myRegexp.exec(myString);\nwhile (match != null) {\n    // matched text: match[0]\n    // match start: match.index\n    // capturing group n: match[n]\n    match = myRegexp.exec(myString);\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 504
                },
                {
                    "body": "<p>Using your code:</p>\n\n<pre><code>console.log(arr[1]);  // prints: abc\nconsole.log(arr[0]);  // prints:  format_abc\n</code></pre>\n\n<p>Edit: Safari 3, if it matters.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>var myString = \"something format_abc\";\nvar arr = myString.match(/\\bformat_(.*?)\\b/);\nconsole.log(arr[0] + \" \" + arr[1]);\n</code></pre>\n\n<p>The \\b isn't exactly the same thing (works on \"--format_foo/\", doesn't work on \"format_a_b\") though... But I wanted to show an alternative to your expression, which is fine. Of course, the match call is the important thing.</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>Your code works for me (FF3 on Mac) even if I agree with <a href=\"http://stackoverflow.com/users/15459/philho\">PhiLo</a> that the regex should probably be:</p>\n\n<pre><code>/\\bformat_(.*?)\\b/\n</code></pre>\n\n<p>(But, of course, I'm not sure because I don't know the context of the regex.)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Your syntax probably isn't the best to keep. FF/Gecko defines RegExp as an extension of Function.<br />\n(FF2 went as far as <code>typeof(/pattern/) == 'function'</code>)</p>\n\n<p>It seems this is specific to FF -- IE, Opera, and Chrome all throw exceptions for it.</p>\n\n<p>Instead, use either method previously mentioned by others: <code>RegExp#exec</code> or <code>String#match</code>.<br />\nThey offer the same results:</p>\n\n<pre><code>var regex = /(?:^|\\s)format_(.*?)(?:\\s|$)/;\nvar input = \"something format_abc\";\n\nregex(input);        //=&gt; [\" format_abc\", \"abc\"]\nregex.exec(input);   //=&gt; [\" format_abc\", \"abc\"]\ninput.match(regex);  //=&gt; [\" format_abc\", \"abc\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Here\u2019s a method you can use to get the <em>n</em>\u200bth capturing group for each match:</p>\n\n<pre><code>function getMatches(string, regex, index) {\n    index || (index = 1); // default to the first capturing group\n    var matches = [];\n    var match;\n    while (match = regex.exec(string)) {\n        matches.push(match[index]);\n    }\n    return matches;\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>var myString = 'something format_abc something format_def something format_ghi';\nvar myRegEx = /(?:^|\\s)format_(.*?)(?:\\s|$)/g;\n\n// Get an array containing the first capturing group for every match\nvar matches = getMatches(myString, myRegEx, 1);\n// matches \u2192 ['abc', 'def', 'ghi']\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>A one liner that is practical only if you have a single pair of parenthesis:</p>\n\n<pre><code>while ( ( match = myRegex.exec( myStr ) ) &amp;&amp; matches.push( match[1] ) ) {};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In regards to the multi-match parentheses examples above, I was looking for an answer here after not getting what I wanted from:</p>\n\n<pre><code>var matches = mystring.match(/(?:neededToMatchButNotWantedInResult)(matchWanted)/igm);\n</code></pre>\n\n<p>After looking at the slightly convoluted function calls with while and .push() above, it dawned on me that the problem can be solved very elegantly with mystring.replace() instead (the replacing is NOT the point, and isn't even done, the CLEAN, built-in recursive function call option for the second parameter is!):</p>\n\n<pre><code>var yourstring = 'something format_abc something format_def something format_ghi';\n\nvar matches = [];\nyourstring.replace(/format_([^\\s]+)/igm, function(m, p1){ matches.push(p1); } );\n</code></pre>\n\n<p>After this, I don't think I'm ever going to use .match() for hardly anything ever again.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I want to match a portion of a string using a <a href=\"http://en.wikipedia.org/wiki/Regular_expression\">regular expression</a> and then access that parenthesized substring:</p>\n\n<pre><code>var myString = \"something format_abc\"; // I want \"abc\"\n\nvar arr = /(?:^|\\s)format_(.*?)(?:\\s|$)/.exec(myString);\n\nconsole.log(arr);     // Prints: [\" format_abc\", \"abc\"] .. so far so good.\nconsole.log(arr[1]);  // Prints: undefined  (???)\nconsole.log(arr[0]);  // Prints: format_undefined (!!!)\n</code></pre>\n\n<p>What am I doing wrong?</p>\n\n<hr>\n\n<p>I've discovered that there was nothing wrong with the regular expression code above: the actual string which I was testing against was this:</p>\n\n<pre><code>\"date format_%A\"\n</code></pre>\n\n<p>Reporting that \"%A\" is undefined seems a very strange behaviour, but it is not directly related to this question, so I've opened a new one, <em><a href=\"http://stackoverflow.com/questions/432826/why-is-a-matched-substring-returning-undefined-in-javascript\">Why is a matched substring returning \"undefined\" in JavaScript?</a></em>.</p>\n\n<hr>\n\n<p>The issue was that <code>console.log</code> takes its parameters like a <code>printf</code> statement, and since the string I was logging (<code>\"%A\"</code>) had a special value, it was trying to find the value of the next parameter.</p>\n",
            "last_activity_date": 1405572812,
            "question_id": 432493,
            "score": 387,
            "tags": [
                "javascript",
                "regex"
            ],
            "title": "How do you access the matched groups in a JavaScript regular expression?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><code>{ thetop : 10 }</code> is a valid object literal.  The code will create an object with a property named <code>thetop</code> that has a value of 10.  Both the following are the same:</p>\n\n<pre><code>obj = { thetop : 10 };\nobj = { \"thetop\" : 10 };\n</code></pre>\n\n<p>In ES5 and earlier, you cannot use a variable as a property name inside an object literal.  Your only option is to do the following:</p>\n\n<pre><code>var thetop = \"top\";\n\n// create the object literal\nvar aniArgs = {};\n\n// Assign the variable property name with a value of 10\naniArgs[thetop] = 10; \n\n// Pass the resulting object to the animate method\n&lt;something&gt;.stop().animate(\n    aniArgs, 10  \n);  \n</code></pre>\n\n<p>ES6 <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-object-initializer\" rel=\"nofollow\">defines</a> <em>ComputedPropertyName</em> as part of the grammar for object literals, which allows you to write the code like this:</p>\n\n<pre><code>var thetop = \"top\",\n    obj = { [thetop]: 10 };\n\nconsole.log(obj.top); // -&gt; 10\n</code></pre>\n\n<p>You can test drive this new syntax in recent versions of Firefox and the current Internet Explorer Technical Preview.</p>\n",
                    "is_accepted": true,
                    "score": 64
                },
                {
                    "body": "<p>I have used the following to add a property with a \"dynamic\" name to an object:</p>\n\n<pre><code>var key = 'top';\n$('#myElement').animate(\n   (function(o) { o[key]=10; return o;})({left: 20, width: 100}),\n   10\n);\n</code></pre>\n\n<p><code>key</code> is the name of the new property. </p>\n\n<p>The object of properties passed to <code>animate</code> will be <code>{left: 20, width: 100, top: 10}</code></p>\n\n<p>This is just using the required <code>[]</code> notation as recommended by the other answers, but with fewer lines of code!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>What can be used as key</strong>:</p>\n\n<ul>\n<li><code>IdentifierName</code></li>\n<li><code>StringLiteral</code></li>\n<li><code>NumericLiteral</code></li>\n</ul>\n\n<p>Spec: <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.5\" rel=\"nofollow\">http://www.ecma-international.org/ecma-262/5.1/#sec-11.1.5</a></p>\n\n<p>Therefore, as others said, no variables.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Why does the following work?</p>\n\n<pre><code>&lt;something&gt;.stop().animate(\n    { 'top' : 10 }, 10\n);\n</code></pre>\n\n<p>Whereas this doesn't work:</p>\n\n<pre><code>var thetop = 'top';\n&lt;something&gt;.stop().animate(\n    { thetop : 10 }, 10\n);\n</code></pre>\n\n<p>To make it even clearer: At the moment I'm not able to pass a CSS property to the animate function as a variable.</p>\n",
            "last_activity_date": 1425659837,
            "question_id": 2274242,
            "score": 29,
            "tags": [
                "javascript",
                "variables",
                "properties",
                "object-literal"
            ],
            "title": "Using a variable for a key in a JavaScript object literal"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>If you are ok to use jQuery 1.3.1:</p>\n\n<pre><code>function simulateKeyPress(character) {\n  jQuery.event.trigger({ type : 'keypress', which : character.charCodeAt(0) });\n}\n\n$(function() {\n  $('body').keypress(function(e) {\n    alert(e.which);\n  });\n\n  simulateKeyPress(\"e\");\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>You can use <code>dispatchEvent()</code>:</p>\n\n<pre><code>function simulateKeyPress() {\n  var evt = document.createEvent(\"KeyboardEvent\");\n  evt.initKeyEvent (\"keypress\", true, true, window,\n                    0, 0, 0, 0,\n                    0, \"e\".charCodeAt(0)) \n  var canceled = !body.dispatchEvent(evt);\n  if(canceled) {\n    // A handler called preventDefault\n    alert(\"canceled\");\n  } else {\n    // None of the handlers called preventDefault\n    alert(\"not canceled\");\n  }\n}\n</code></pre>\n\n<p>I didn't test this, but it's adapted from the code on <a href=\"https://developer.mozilla.org/en/DOM/element.dispatchEvent\" rel=\"nofollow\">dispatchEvent()'s documentation</a>.  You'll probably want to read through that, and also the docs for createEvent() and initKeyEvent().</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You should be using some JS lib with support for wrapping DOM Event Model. From withing there, you can fire and test your handlers.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Building on the answer from alex2k8,  here's a revised version that works in all browsers that jQuery supports (the problem was in missing arguments to jQuery.event.trigger, which is easy to forget when using that internal function).</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// jQuery plugin. Called on a jQuery object, not directly.\njQuery.fn.simulateKeyPress = function (character) {\n  // Internally calls jQuery.event.trigger\n  // with arguments (Event, data, elem). That last arguments is very important!\n  jQuery(this).trigger({ type: 'keypress', which: character.charCodeAt(0) });\n};\n\njQuery(document).ready(function ($) {\n  // Bind event handler\n  $('body').keypress(function (e) {\n    alert(String.fromCharCode(e.which));\n    console.log(e);\n  });\n  // Simulate the key press\n  $('body').simulateKeyPress('x');\n});\n</code></pre>\n\n<p>You could even push this further and let it not only simulate the event but actually insert the character (if it is an input element), however there are many cross-browser gotcha's when trying to do that. Better use a more elaborate plugin like <a href=\"http://bililite.com/blog/2008/08/20/the-fnsendkeys-plugin/\" rel=\"nofollow\">SendKeys</a>.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>A non-jquery version that works in both webkit and gecko:</p>\n\n<pre><code>var keyboardEvent = document.createEvent(\"KeyboardEvent\");\nvar initMethod = typeof keyboardEvent.initKeyboardEvent !== 'undefined' ? \"initKeyboardEvent\" : \"initKeyEvent\";\n\n\nkeyboardEvent[initMethod](\n                   \"keydown\", // event type : keydown, keyup, keypress\n                    true, // bubbles\n                    true, // cancelable\n                    window, // viewArg: should be window\n                    false, // ctrlKeyArg\n                    false, // altKeyArg\n                    false, // shiftKeyArg\n                    false, // metaKeyArg\n                    40, // keyCodeArg : unsigned long the virtual key code, else 0\n                    0 // charCodeArgs : unsigned long the Unicode character associated with the depressed key, else 0\n);\ndocument.dispatchEvent(keyboardEvent);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<p>yes, u just need the correct attributes in there, see how i did the enter key, i used chrome to see exactly whats going on\n<a href=\"http://bresleveloper.blogspot.co.il/2013/03/jsjq-simulate-enter-event.html\" rel=\"nofollow\">http://bresleveloper.blogspot.co.il/2013/03/jsjq-simulate-enter-event.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This approach support cross-browser changing the value of <strong>key code</strong>.\n<a href=\"http://bresleveloper.blogspot.co.il/2013/03/jsjq-simulate-enter-event.html\" rel=\"nofollow\">Source</a></p>\n\n<pre><code>var $textBox = $(\"#myTextBox\");\n\nvar press = jQuery.Event(\"keypress\");\npress.altGraphKey = false;\npress.altKey = false;\npress.bubbles = true;\npress.cancelBubble = false;\npress.cancelable = true;\npress.charCode = 13;\npress.clipboardData = undefined;\npress.ctrlKey = false;\npress.currentTarget = $textBox[0];\npress.defaultPrevented = false;\npress.detail = 0;\npress.eventPhase = 2;\npress.keyCode = 13;\npress.keyIdentifier = \"\";\npress.keyLocation = 0;\npress.layerX = 0;\npress.layerY = 0;\npress.metaKey = false;\npress.pageX = 0;\npress.pageY = 0;\npress.returnValue = true;\npress.shiftKey = false;\npress.srcElement = $textBox[0];\npress.target = $textBox[0];\npress.type = \"keypress\";\npress.view = Window;\npress.which = 13;\n\n$textBox.trigger(press);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can create and dispatch keyboard events, and they will trigger appropriate registered event handlers, however they <strong>will not produce any text</strong>, if dispatched to input element for example.</p>\n\n<p>To fully simulate text input you need to produce a sequence of keyboard events plus explicitly set the text of input element. The sequence of events depends on how thoroughly you want to simulate text input.</p>\n\n<p>The simplest form would be:</p>\n\n<pre><code>$('input').val('123');\n$('input').change();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>What you can do is programmatically trigger <em>keyevent listeners</em> by firing <em>keyevents</em>. It makes sense to allow this from a sandboxed security-perspective. Using this ability, you can then apply a typical <a href=\"http://en.wikipedia.org/wiki/Observer_pattern\">observer-pattern</a>. You could call this method \"simulating\".</p>\n\n<p><strong>But as of recently, there is no [DOM] way to actually trigger keyevents leaving the browser-sandbox.</strong> And all major browser vendors will adhere to that security concept.</p>\n\n<p>As for plugins such as Adobe Flash - which are based on the NPAPI-, and permit bypassing the sandbox: these are <a href=\"http://blog.chromium.org/2013/09/saying-goodbye-to-our-old-friend-npapi.html\">phasing-out</a> ; <a href=\"http://blog.mozilla.org/futurereleases/2013/09/24/plugin-activation-in-firefox/\">Firefox</a>.</p>\n\n<p><strong>Detailed Explanation:</strong></p>\n\n<p>You cannot and you must not for security reasons (as Pekka already pointed out). You will always require a user interaction in between. Additionally imagine the chance of the browser vendors getting sued by users, as various programmatic keyboard events will have led to spoofing attacks.</p>\n\n<p>See this <a href=\"http://goo.gl/ghyhA0\">post</a> for alternatives and more details. There is always the flash based copy-and-paste. Here is an elegant  <a href=\"http://www.colorzilla.com/gradient-editor/\">example</a>. At the same time it is a testimony why the web is moving away from plugin vendors.</p>\n\n<p>There is a similar security mindset applied in case of the <a href=\"http://goo.gl/JiYNEE\">opt-in CORS policy</a> to access remote content programmatically.</p>\n\n<p>The answer is:<br>\n<strong>There is no way to programmatically trigger input keys in the sandboxed browser environment under normal circumstances</strong>. </p>\n\n<p><strong>Bottomline:</strong> I am not saying it will not be possible in the future, under special browser-modes and/or privileges towards the end-goal of gaming, or similar user-experiences. However prior to entering such modes, the user will be asked for permissions and risks, similar to the <a href=\"https://www.google.at/search?client=opera&amp;q=w3c%20fullscreen%20api%20permission\">Fullscreen API model</a>. </p>\n\n<p><strong>Useful:</strong> In the context of KeyCodes, <a href=\"http://www.lsauer.com/2011/08/javascript-keymap-keycodes-in-json.html\">this</a> tool and keycode mapping will come in handy.</p>\n\n<p><em>Disclosure:</em> The answer is based on the answer <a href=\"http://stackoverflow.com/questions/8668192/programmatically-triggering-ctrls/19882728#19882728\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>For those interested, you can, in-fact recreate keyboard input events reliably.  In order to change text in input area (move cursors, or the page via an input character) you have to follow the DOM event model closely: <a href=\"http://www.w3.org/TR/DOM-Level-3-Events/#h4_events-inputevents\" rel=\"nofollow\">http://www.w3.org/TR/DOM-Level-3-Events/#h4_events-inputevents</a> </p>\n\n<p>The model should do:</p>\n\n<ul>\n<li>focus (dispatched on the DOM with the target set)</li>\n</ul>\n\n<p>Then for each character:</p>\n\n<ul>\n<li>keydown (dispatched on the DOM)</li>\n<li>beforeinput (dispatched at the target if its a textarea or input)</li>\n<li>keypress (dispatched on the DOM)</li>\n<li>input (dispatched at the target if its a textarea or input)</li>\n<li>change (dispatched at the target if its a select)</li>\n<li>keyup (dispatched on the DOM)</li>\n</ul>\n\n<p>Then, optionally for most:</p>\n\n<ul>\n<li>blur (dispatched on the DOM with the target set)</li>\n</ul>\n\n<p>This actually changes the text in the page via javascript (without modifying value statements) and sets off any javascript listeners/handlers appropriately.  If you mess up the sequence javascript will not fire in the appropriate order, the text in the input box will not change, the selections will not change or the cursor will not move to the next space in the text area.</p>\n\n<p>Unfortunately the code was written for an employer under an NDA so I cannot share it, but it is definitely possible but you must recreate the entire key input \"stack\" for each element in the correct order.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's a library that really helps: <a href=\"https://cdn.rawgit.com/ccampbell/mousetrap/2e5c2a8adbe80a89050aaf4e02c45f02f1cc12d4/tests/libs/key-event.js\" rel=\"nofollow\">https://cdn.rawgit.com/ccampbell/mousetrap/2e5c2a8adbe80a89050aaf4e02c45f02f1cc12d4/tests/libs/key-event.js</a></p>\n\n<p>I don't know from where did it came from, but it is helpful. It adds a <code>.simulate()</code> method to <code>window.KeyEvent</code>, so you use it simply with <code>KeyEvent.simulate(0, 13)</code> for simulating an <code>enter</code> or <code>KeyEvent.simulate(81, 81)</code> for a <code>'Q'</code>.</p>\n\n<p>I got it at <a href=\"https://github.com/ccampbell/mousetrap/tree/master/tests\" rel=\"nofollow\">https://github.com/ccampbell/mousetrap/tree/master/tests</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is it possible to simulate key press events programatically in JavaScript?</p>\n",
            "last_activity_date": 1410391128,
            "question_id": 596481,
            "score": 87,
            "tags": [
                "javascript",
                "javascript-events"
            ],
            "title": "Simulate JavaScript Key Events"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>If you are using JQuery then put the javascript wherever you find it best and use <code>$(document).ready()</code> to ensure that things are loaded properly before executing any functions.</p>\n\n<p>On a side note: I like all my script tags in the <code>&lt;head&gt;</code> section as that seems to be the cleanest place.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Just before the closing body tag, as stated on</p>\n\n<p><a href=\"http://developer.yahoo.com/performance/rules.html#js_bottom\">http://developer.yahoo.com/performance/rules.html#js_bottom</a></p>\n\n<blockquote>\n  <p>Put Scripts at the Bottom</p>\n  \n  <p>The problem caused by scripts is that they block parallel downloads. The HTTP/1.1 specification suggests that browsers download no more than two components in parallel per hostname. If you serve your images from multiple hostnames, you can get more than two downloads to occur in parallel. While a script is downloading, however, the browser won't start any other downloads, even on different hostnames. </p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 172
                },
                {
                    "body": "<p>The conventional (and widely accepted) answer is \"at the bottom\", because then the entire DOM will have been loaded before anything can start executing.</p>\n\n<p>There are dissenters, for various reasons, starting with the available practice to intentionally begin execution with a page onload event.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><del>XHTML Won't Validate if the script is anywhere other than within the head element.</del> turns out it can be everywhere.</p>\n\n<p>You can defer the execution with something like jQuery so it doesn't matter where it's placed (except for a small performance hit during parsing).</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Depending on the script and its usage the best possible (in terms of page load and rendering time) may be to not use a conventional &lt;script&gt;-tag per se, but to dynamically trigger the loading of the script asynchronously.</p>\n\n<p>There are some different techniques, but the most straight forward is to use document.createElement(\"script\") when the window.onload event is triggered. Then the script is loaded first when the page itself has rendered, thus not impacting the time the user has to wait for the page to appear.</p>\n\n<p>This naturally requires that the script itself is not needed for the rendering of the page.</p>\n\n<p>For more information, see the post <a href=\"http://www.stevesouders.com/blog/2008/12/27/coupling-async-scripts/\" rel=\"nofollow\">Coupling async scripts</a> by Steve Souders (creator of YSlow but now at Google).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The standard advice, promoted by the Yahoo! Exceptional Performance team, is to put the <code>&lt;script&gt;</code> tags at the end of the document body so they don't block rendering of the page.</p>\n\n<p>But there are some newer approaches that offer better performance, I'm duplicating <a href=\"http://stackoverflow.com/questions/435228/does-google-analytics-have-peformance-overhead#435295\">another answer</a> here:</p>\n\n<p><hr /></p>\n\n<p>There are some <a href=\"http://stevesouders.com/docs/googleio-20080529.ppt\">great slides</a> by Steve Souders (client-side performance expert) about:</p>\n\n<ul>\n<li>Different techniques to load external JavaScript files in parallel</li>\n<li>their effect on loading time and page rendering</li>\n<li>what kind of \"in progress\" indicators the browser displays (e.g. 'loading' in the status bar, hourglass mouse cursor).</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>It makes more sense to me to include the script  after the HTML. Because most of the time I need the Dom to load before I execute my script. I could put it in the head tag but I don't like all the Document loading listener overhead. I want my code to be short and sweet and easy to read.  </p>\n\n<p>I've heard old versions of safari was quarky when adding your script outside of the head tag but I say who cares. I don't know anybody using that old crap do you.</p>\n\n<p>Good question by the way. </p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Depends, if you are loading a script that's necessary to style your page / using actions in your page (like click of a button) then you better place it on the top. If your styling is 100% CSS and you have all fallback options for the button actions then you can place it in the bottom.</p>\n\n<p>Or best thing (if that's not a concern) is you can make a modal loading box, place your javascript at the bottom of your page and make it disappear when the last line of your script gets loaded. This way you can avoid users using actions in your page before the scripts are loaded. And also avoid the improper styling.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can place where you want the scripts and one is not better than another practice.</p>\n\n<p>the situation is as follows:</p>\n\n<p>The page load linearly, \"top-down\", so if you put the script in the head ensures that it starts to load before everything, now, if you put it inside the body mixed with the code can cause page loads a unsightly manner.</p>\n\n<p>identify good practice does not depend on where.</p>\n\n<p>to support you, I will mention the following:</p>\n\n<p>you can place:</p>\n\n<p> and the page will load linearly</p>\n\n<p> page is loaded asynchronously with other content</p>\n\n<p> the content of the page will load before and after completion of loading the scripts are loaded</p>\n\n<p>good practice here would be, when will implement each?</p>\n\n<p>I hope I've been helpful, anything just answer me this issue.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Since a lot of duplicate questions link here, I'd like to post an answer that isn't 5 years old.</p>\n\n<p>Here's what happens when a browser loads a website:</p>\n\n<ol>\n<li>Fetch the HTML page (e.g. index.html)</li>\n<li>Begin parsing the HTML</li>\n<li>The parser encounters a <code>&lt;script&gt;</code> tag referencing an external script file.</li>\n<li>The browser requests the script file. Meanwhile, the parser blocks and stops parsing the other HTML on your page.</li>\n<li>After some time the script is downloaded and subsequently executed.</li>\n<li>The parser continues parsing the rest of the HTML document.</li>\n</ol>\n\n<p>Step 4 causes a bad user experience. Your website basically stops loading until you've downloaded all scripts. If there's one thing that users hate it's waiting for a website to load.</p>\n\n<h2>Why does this even happen?</h2>\n\n<p>Any script can insert its own HTML via <code>document.write()</code> or other DOM manipulations. This implies that the parser has to wait until the script has been downloaded &amp; executed before it can safely parse the rest of the document. After all, the script <em>could</em> have inserted its own HTML in the document.</p>\n\n<p>However, most javascript developers no longer manipulate the DOM <em>while</em> the document is loading. Instead, they wait until the document has been loaded before modifying it. For example:</p>\n\n<pre><code>&lt;!-- index.html --&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My Page&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"my-script.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;div id=\"user-greeting\"&gt;Welcome back, user&lt;/div&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Javascript:</p>\n\n<pre><code>// my-script.js\ndocument.addEventListener(\"DOMContentLoaded\", function() { \n    // this function runs when the DOM is ready, i.e. when the document has been parsed\n    document.getElementById(\"user-greeting\").textContent = \"Welcome back, Bart\";\n});\n</code></pre>\n\n<p>Because your browser does not know my-script.js isn't going to modify the document until it has been downloaded &amp; executed, the parser stops parsing.</p>\n\n<h2>Antiquated recommendation</h2>\n\n<p>The old approach to solve this problem was to put <code>&lt;script&gt;</code> tags at the bottom of your <code>&lt;body&gt;</code>, because this ensures the parser isn't blocked until the very end. </p>\n\n<p>This approach has its own problem: the browser cannot start downloading the scripts until the entire document is parsed. For larger websites with large scripts &amp; stylesheets, being able to download the script as soon as possible is very important for performance. If your website doesn't load within 2 seconds, people will go to another website.</p>\n\n<p>In an optimal solution, the browser would start downloading your scripts as soon as possible, while at the same time parsing the rest of your document.</p>\n\n<h2>The modern approach</h2>\n\n<p>Today, browsers support the <code>async</code> and <code>defer</code> attributes on scripts. These attributes tell the browser it's safe to continue parsing while the scripts are being downloaded.</p>\n\n<h3>async</h3>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"path/to/script1.js\" async&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"path/to/script2.js\" async&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Scripts with the async attribute are executed asynchronously. This means the script is executed as soon as it's downloaded, without blocking the browser in the meantime.<br>\nThis implies that it's possible script 2 is downloaded &amp; executed before script 1.  </p>\n\n<p>According to <a href=\"http://caniuse.com/#search=async\">http://caniuse.com/#search=async</a>, 80% of all browsers support this.</p>\n\n<h3>defer</h3>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"path/to/script1.js\" defer&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"path/to/script2.js\" defer&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Scripts with the defer attribute are executed in order (i.e. first script 1, then script 2). Like the async attribute, this does not block the browser.</p>\n\n<p>Unlike async scripts, defer scripts are only executed after the entire document has been loaded.</p>\n\n<p>According to <a href=\"http://caniuse.com/#search=defer\">http://caniuse.com/#search=defer</a>, 80% of all browsers support this. 88% support it at least partially.</p>\n\n<p>An important note on browser compatibility: in some circumstances IE &lt;= 9 may execute deferred scripts out of order. If you need to support those browsers, please read <a href=\"https://github.com/h5bp/lazyweb-requests/issues/42\">this</a> first!</p>\n\n<h1>Conclusion</h1>\n\n<p>The current state-of-the-art is to put scripts in the <code>&lt;head&gt;</code> tag and use the <code>async</code> or <code>defer</code> attributes. This allows your scripts to be downloaded asap without blocking your browser.</p>\n\n<p>The good thing is that your website should still load correctly on the 20% of browsers that do not support these attributes, while speeding up the other 80%.</p>\n",
                    "is_accepted": true,
                    "score": 300
                },
                {
                    "body": "<p>Non-blocking script tags can be placed just about anywhere:</p>\n\n<pre><code>&lt;script src=\"script.js\" async&gt;&lt;/script&gt;\n&lt;script src=\"script.js\" defer&gt;&lt;/script&gt;\n&lt;script src=\"script.js\" async defer&gt;&lt;/script&gt;\n</code></pre>\n\n<ul>\n<li><a href=\"http://www.w3.org/TR/html5/scripting-1.html#attr-script-async\" rel=\"nofollow\"><strong><code>async</code></strong></a> script will be executed asynchronously as soon as it is available</li>\n<li><a href=\"http://www.w3.org/TR/html5/scripting-1.html#attr-script-defer\" rel=\"nofollow\"><strong><code>defer</code></strong></a> script is executed when the document has finished parsing</li>\n<li><strong><code>async defer</code></strong> script falls back to the defer behavior if async is not supported</li>\n</ul>\n\n<p>Such scripts will be executed asynchronously/after document ready, which means you cannot do this:</p>\n\n<pre><code>&lt;script src=\"jquery.js\" async&gt;&lt;/script&gt;\n&lt;script&gt;jQuery(something);&lt;/script&gt;\n&lt;!--\n  * might throw \"jQuery is not defined\" error\n  * defer will not work either\n--&gt;\n</code></pre>\n\n<p>Or this:</p>\n\n<pre><code>&lt;script src=\"document.write(something).js\" async&gt;&lt;/script&gt;\n&lt;!--\n  * might issue \"cannot write into document from an asynchronous script\" warning\n  * defer will not work either\n--&gt;\n</code></pre>\n\n<p>Or this:</p>\n\n<pre><code>&lt;script src=\"jquery.js\" async&gt;&lt;/script&gt;\n&lt;script src=\"jQuery(something).js\" async&gt;&lt;/script&gt;\n&lt;!--\n  * might throw \"jQuery is not defined\" error (no guarantee which script runs first)\n  * defer will work in sane browsers\n--&gt;\n</code></pre>\n\n<p>Or this:</p>\n\n<pre><code>&lt;script src=\"document.getElementById(header).js\" async&gt;&lt;/script&gt;\n&lt;div id=\"header\"&gt;&lt;/div&gt;\n&lt;!--\n  * might not locate #header (script could fire before parser looks at the next line)\n  * defer will work in sane browsers\n--&gt;\n</code></pre>\n\n<p>Having said that, asynchronous scripts offer these advantages:</p>\n\n<ul>\n<li><strong>Parallel download of resources</strong>:<br>\nBrowser can download stylesheets, images and other scripts in parallel without waiting for a script to download and execute.</li>\n<li><strong>Source order independence</strong>:<br>\nYou can place the scripts inside head or body without worrying about blocking (useful if you are using a CMS). Execution order still matters though.</li>\n</ul>\n\n<p>It is possible to circumvent the execution order issues by using external scripts that support callbacks. Many third party JavaScript APIs now support non-blocking execution. Here is an example of <a href=\"http://salman-w.blogspot.com/2014/05/google-maps-asynchronous-loading.html\" rel=\"nofollow\">loading the Google Maps API asynchronously</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>When embedding JavaScript in an HTML document, where is the best place to put the <code>&lt;script&gt;</code> tags and included JavaScript? I seem to recall that you are not supposed to place these in the <code>&lt;head&gt;</code> section, but placing at the beginning of the <code>&lt;body&gt;</code> section is bad, too, since the JavaScript will have to be parsed before the page is rendered completely (or something like that). This seems to leave the <em>end</em> of the <code>&lt;body&gt;</code> section as a logical place for <code>&lt;script&gt;</code> tags.</p>\n\n<p>So, where <em>is</em> the best place to put the <code>&lt;script&gt;</code> tags?</p>\n\n<p>(This question references <a href=\"http://stackoverflow.com/questions/436154/why-does-the-call-to-this-jquery-function-fail-in-firefox\">this question</a>, in which it was suggested that JavaScript function calls should be moved from <code>&lt;a&gt;</code> tags to <code>&lt;script&gt;</code> tags. I'm specifically using JQuery, but more general answers are also appropriate.)</p>\n",
            "last_activity_date": 1423229852,
            "question_id": 436411,
            "score": 326,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "Where is the best place to put &lt;script&gt; tags in HTML markup?"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>First that comes to mind is the pastehandler of google's closure lib\n<a href=\"http://closure-library.googlecode.com/svn/trunk/closure/goog/demos/pastehandler.html\" rel=\"nofollow\">http://closure-library.googlecode.com/svn/trunk/closure/goog/demos/pastehandler.html</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>The situation has changed since writing this answer: now that Firefox has added support in version 22, all major browsers now support accessing the clipboard data in a paste event. See <a href=\"http://stackoverflow.com/a/6804718/96100\">Nico Burns's answer</a> for an example.</strong></p>\n\n<p>In the past this was not generally possible in a cross-browser way. The ideal would be to be able to get the pasted content via the <code>paste</code> event, <a href=\"http://codebits.glennjones.net/editing/getclipboarddata.htm\">which is possible in recent browsers</a> but not in some older browsers (in particular, Firefox &lt; 22).</p>\n\n<p>When you need to support older browsers, what you can do is quite involved and a bit of a hack that will work in Firefox 2+, IE 5.5+ and WebKit browsers such as Safari or Chrome. Recent versions of both TinyMCE and CKEditor use this technique:</p>\n\n<ol>\n<li>Detect a ctrl-v / shift-ins event using a keypress event handler</li>\n<li>In that handler, save the current user selection, add a textarea element off-screen (say at left -1000px) to the document, turn <code>designMode</code> off and call <code>focus()</code> on the textarea, thus moving the caret and effectively redirecting the paste</li>\n<li>Set a very brief timer (say 1 millisecond) in the event handler to call another function that stores the textarea value, removes the textarea from the document, turns <code>designMode</code> back on, restores the user selection and pastes the text in.</li>\n</ol>\n\n<p>Note that this will only work for keyboard paste events and not pastes from the context or edit menus. By the time the paste event fires, it's too late to redirect the caret into the textarea (in some browsers, at least).</p>\n\n<p>In the unlikely event that you need to support Firefox 2, note that you'll need to place the textarea in the parent document rather than the WYSIWYG editor iframe's document in that browser.</p>\n",
                    "is_accepted": true,
                    "score": 75
                },
                {
                    "body": "<h1>Solution</h1>\n\n<p>Tested in IE6+, FF 3.5+, recent-ish versions of Opera, Chrome, Safari.</p>\n\n<h2>HTML</h2>\n\n<p>Create a <code>div</code> tag as follows:</p>\n\n<pre><code>&lt;div id='div' contenteditable='true' onpaste='handlepaste(this, event)'&gt;Paste&lt;/div&gt;\n</code></pre>\n\n<h2>JavsScript</h2>\n\n<p>Use the following JavaScript code:</p>\n\n<pre><code>function handlepaste (elem, e) {\n    var savedcontent = elem.innerHTML;\n    if (e &amp;&amp; e.clipboardData &amp;&amp; e.clipboardData.getData) {// Webkit - get data from clipboard, put into editdiv, cleanup, then cancel event\n        if (/text\\/html/.test(e.clipboardData.types)) {\n            elem.innerHTML = e.clipboardData.getData('text/html');\n        }\n        else if (/text\\/plain/.test(e.clipboardData.types)) {\n            elem.innerHTML = e.clipboardData.getData('text/plain');\n        }\n        else {\n            elem.innerHTML = \"\";\n        }\n        waitforpastedata(elem, savedcontent);\n        if (e.preventDefault) {\n                e.stopPropagation();\n                e.preventDefault();\n        }\n        return false;\n    }\n    else {// Everything else - empty editdiv and allow browser to paste content into it, then cleanup\n        elem.innerHTML = \"\";\n        waitforpastedata(elem, savedcontent);\n        return true;\n    }\n}\n\nfunction waitforpastedata (elem, savedcontent) {\n    if (elem.childNodes &amp;&amp; elem.childNodes.length &gt; 0) {\n        processpaste(elem, savedcontent);\n    }\n    else {\n        that = {\n            e: elem,\n            s: savedcontent\n        }\n        that.callself = function () {\n            waitforpastedata(that.e, that.s)\n        }\n        setTimeout(that.callself,20);\n    }\n}\n\nfunction processpaste (elem, savedcontent) {\n    pasteddata = elem.innerHTML;\n    //^^Alternatively loop through dom (elem.childNodes or elem.getElementsByTagName) here\n\n    elem.innerHTML = savedcontent;\n\n    // Do whatever with gathered data;\n    alert(pasteddata);\n}\n</code></pre>\n\n<h1>Explanation</h1>\n\n<p>The <code>onpaste</code> event has the <code>handlepaste</code> function attached to it, and passed two arguments: <code>this</code> (i.e. a reference to the element that the event is attached to) and <code>event</code> which is the event object.</p>\n\n<hr>\n\n<p>The <code>handlepaste</code> function:</p>\n\n<p>The first line simply saves the content of the editable div to a variable so it can be restored again at the end.</p>\n\n<p>The <code>if</code> checks whether the browser is an webkit browser (chrome or safari), and if it is it sets contents of the editable div to the data being pasted. It then cancels the event to prevent webkit pasting anything twice. This is because webkit is awkward, and won't paste anything if you simply clear the div.</p>\n\n<p>If it is not a webkit browser then it simply clears the editable div.</p>\n\n<p>It then calls the <code>waitforpastedata</code> function</p>\n\n<hr>\n\n<p>The <code>waitforpastedata</code> function:</p>\n\n<p>This is necessary because the pasted data doesn't appear straight away, so if you just called <code>processpaste</code> straight away then it wouldn't have any data to process.</p>\n\n<p>What it does is check if the editable div has any content, if it does then calls <code>processpaste</code>, otherwise it sets a timer to call itself and check again in 20 milliseconds.</p>\n\n<hr>\n\n<p>The <code>processpaste</code> function:</p>\n\n<p>This function saved the innerHTML of the editable div (which is now the pasted data) to a variable, restores the innerHTML of the editable div back to its original value, and the alert the pasted data. Obviously in a real usage scenario you would probably want to something other than just alert data, you can do whatever you like with it from here.</p>\n\n<p>You will probably also want to run the pasted data through some kind of data sanitising process. This can be done either while it is still in the editable div, or on the extracted string.</p>\n\n<hr>\n\n<p>In a real sitution you would probably want to save the selection before, and restore it afterwards (<a href=\"http://stackoverflow.com/questions/1181700/set-cursor-position-on-contenteditable-div/3323835#3323835\">Set cursor position on contentEditable &lt;div&gt;</a>). You could then insert the pasted data at the position the cursor was in when the user initiated the paste action.</p>\n\n<p>P.S. The combination of this code, IE &lt;= 8 and <a href=\"http://jsfiddle.net\">jsfiddle</a> doesn't seem to work, but it does work in ie &lt;= 8 in a non-jsfiddle environment.</p>\n",
                    "is_accepted": false,
                    "score": 127
                },
                {
                    "body": "<p>This worked for me :</p>\n\n<pre><code>function onPasteMe(currentData, maxLen) {\n    // validate max length of pasted text\n    var totalCharacterCount = window.clipboardData.getData('Text').length;\n}\n\n&lt;input type=\"text\" onPaste=\"return onPasteMe(this, 50);\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've written a little proof of concept for Tim Downs proposal here with off-screen textarea. And here goes the code:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js\"&gt;&lt;/script&gt; \n&lt;script language=\"JavaScript\"&gt;\n $(document).ready(function()\n{\n\nvar ctrlDown = false;\nvar ctrlKey = 17, vKey = 86, cKey = 67;\n\n$(document).keydown(function(e)\n{\n    if (e.keyCode == ctrlKey) ctrlDown = true;\n}).keyup(function(e)\n{\n    if (e.keyCode == ctrlKey) ctrlDown = false;\n});\n\n$(\".capture-paste\").keydown(function(e)\n{\n    if (ctrlDown &amp;&amp; (e.keyCode == vKey || e.keyCode == cKey)){\n        $(\"#area\").css(\"display\",\"block\");\n        $(\"#area\").focus();         \n    }\n});\n\n$(\".capture-paste\").keyup(function(e)\n{\n    if (ctrlDown &amp;&amp; (e.keyCode == vKey || e.keyCode == cKey)){                      \n        $(\"#area\").blur();\n        //do your sanitation check or whatever stuff here\n        $(\"#paste-output\").text($(\"#area\").val());\n        $(\"#area\").val(\"\");\n        $(\"#area\").css(\"display\",\"none\");\n    }\n});\n\n});\n&lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body class=\"capture-paste\"&gt;\n\n&lt;div id=\"paste-output\"&gt;&lt;/div&gt;\n\n\n    &lt;div&gt;\n    &lt;textarea id=\"area\" style=\"display: none; position: absolute; left: -99em;\"&gt;&lt;/textarea&gt;\n    &lt;/div&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Just copy and paste the whole code into one html file and try to paste (using ctrl-v) text from clipboard anywhere on the document. </p>\n\n<p>I've tested it in IE9 and new versions of Firefox, Chrome and Opera. Works quite well. Also it's good that one can use whatever key combination he prefers to triger this functionality. Of course don't forget to include jQuery sources.</p>\n\n<p>Feel free to use this code and if you come with some improvements or problems please post them back. Also note that I'm no Javascript developer so I may have missed something (=>do your own testign).</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>This one does not use any setTimeout().</p>\n\n<p>I have used <a href=\"http://www.greywyvern.com/?post=282\">this</a> great article to achieve cross browser support.</p>\n\n<pre><code>$(document).on(\"focus\",\"input[type=text],textarea\",function(e){\n    var t = e.target;\n    if(!$(t).data(\"EventListenerSet\")){\n        //get length of field before paste\n        var keyup = function(){\n            $(this).data(\"lastLength\",$(this).val().length);\n        };\n        $(t).data(\"lastLength\", $(t).val().length);\n        //catch paste event\n        var paste = function(){\n            $(this).data(\"paste\",1);//Opera 11.11+  \n        };\n        //process modified data, if paste occured\n        var func = function(){\n            if($(this).data(\"paste\")){\n                alert(this.value.substr($(this).data(\"lastLength\")));\n                $(this).data(\"paste\",0);\n                this.value = this.value.substr(0,$(this).data(\"lastLength\"));\n                $(t).data(\"lastLength\", $(t).val().length);             \n            }\n        };\n\n\n\n        if(window.addEventListener) {\n        t.addEventListener('keyup', keyup, false);\n        t.addEventListener('paste', paste, false);\n        t.addEventListener('input', func, false);    \n        } else{//IE\n        t.attachEvent('onkeyup', function() {keyup.call(t);});\n        t.attachEvent('onpaste', function() {paste.call(t);});\n        t.attachEvent('onpropertychange', function() {func.call(t);});  \n        }\n        $(t).data(\"EventListenerSet\",1);\n    }\n});\n</code></pre>\n\n<p>This code is extended with selection handle before paste:\n<a href=\"http://jsbin.com/igaxax/14\">demo</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>For <strong>cleaning the pasted text</strong> and <strong>replacing the currently selected text with the pasted text</strong> the matter is pretty trivial:</p>\n\n<pre><code>&lt;div id='div' contenteditable='true' onpaste='handlepaste(this, event)'&gt;Paste&lt;/div&gt;\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>function handlepaste(el, e) {\n  document.execCommand('insertText', false, e.clipboardData.getData('text/plain'));\n  e.preventDefault();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Simple version :</strong> (jQuery)</p>\n\n<pre><code>$('[contenteditable]').on('paste',function(e) {\n    e.preventDefault();\n    var text = (e.originalEvent || e).clipboardData.getData('text/plain') || prompt('Paste something..');\n    window.document.execCommand('insertText', false, text);\n});\n</code></pre>\n\n<p>or </p>\n\n<pre><code>$(document).on('paste','[contenteditable]',function(e) {\n    e.preventDefault();\n    var text = (e.originalEvent || e).clipboardData.getData('text/plain') || prompt('Paste something..');\n    window.document.execCommand('insertText', false, text);\n});\n</code></pre>\n\n<p><strong>Using</strong> <code>clipboardData</code> with <code>prompt</code> fallback when browser doesn't support.</p>\n\n<p><strong>Demo :</strong> <a href=\"http://jsbin.com/napuvihata/1/edit?js,output\">http://jsbin.com/napuvihata/1/edit?js,output</a></p>\n\n<p><em>Firefox, Chrome, Safari, Opera tested.</em></p>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<p>You can do this in this way:</p>\n\n<p>use this jQuery plugin for pre &amp; post paste events:</p>\n\n<pre><code>$.fn.pasteEvents = function( delay ) {\n    if (delay == undefined) delay = 20;\n    return $(this).each(function() {\n        var $el = $(this);\n        $el.on(\"paste\", function() {\n            $el.trigger(\"prepaste\");\n            setTimeout(function() { $el.trigger(\"postpaste\"); }, delay);\n        });\n    });\n};\n</code></pre>\n\n<p>Now you can use this plugin;:</p>\n\n<pre><code>$('#txt').on(\"prepaste\", function() { \n\n    $(this).find(\"*\").each(function(){\n\n        var tmp=new Date.getTime();\n        $(this).data(\"uid\",tmp);\n    });\n\n\n}).pasteEvents();\n\n$('#txt').on(\"postpaste\", function() { \n\n\n  $(this).find(\"*\").each(function(){\n\n     if(!$(this).data(\"uid\")){\n        $(this).removeClass();\n          $(this).removeAttr(\"style id\");\n      }\n    });\n}).pasteEvents();\n</code></pre>\n\n<p><strong>Explaination</strong></p>\n\n<p>First set a uid for all existing elements as data attribute.</p>\n\n<p>Then compare all nodes POST PASTE event. So by comparing you can identify the newly inserted one because they will have a uid, then just remove style/class/id attribute from newly created elements, so that you can keep your older formatting.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Based on <strong>l2aelba</strong> anwser. This was tested on FF, Safari, Chrome, IE (8,9,10 and 11)</p>\n\n<pre><code>    $(\"#editText\").on(\"paste\", function (e) {\n        e.preventDefault();\n\n        var text;\n        var clp = (e.originalEvent || e).clipboardData;\n        if (clp === undefined || clp === null) {\n            text = window.clipboardData.getData(\"text\") || \"\";\n            if (text !== \"\") {\n                if (window.getSelection) {\n                    var newNode = document.createElement(\"span\");\n                    newNode.innerHTML = text;\n                    window.getSelection().getRangeAt(0).insertNode(newNode);\n                } else {\n                    document.selection.createRange().pasteHTML(text);\n                }\n            }\n        } else {\n            text = clp.getData('text/plain') || \"\";\n            if (text !== \"\") {\n                document.execCommand('insertText', false, text);\n            }\n        }\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Solution that works for me is adding event listener to paste event if you are pasting to a text input.\nSince paste event happens before text in input changes, inside my on paste handler I create a deferred function inside which I check for changes in my input box that happened on paste:</p>\n\n<pre><code>onPaste: function() {\n    var oThis = this;\n    setTimeout(function() { // Defer until onPaste() is done\n        console.log('paste', oThis.input.value);\n        // Manipulate pasted input\n    }, 1);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>$('#dom').on('paste',function (e){\n    setTimeout(function(){\n        console.log(e.currentTarget.value);\n    },0);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This should work on all browsers that support the onpaste event and the mutation observer.</p>\n\n<p>This solution goes a step beyond getting the text only, it actually allows you to edit the pasted content before it get pasted into an element.</p>\n\n<p>It works by using contenteditable, onpaste event (supported by all major browsers) en mutation observers (supported by Chrome, Firefox and IE11+)</p>\n\n<p><strong>step 1</strong></p>\n\n<p>Create a HTML-element with contenteditable</p>\n\n<pre><code>&lt;div contenteditable=\"true\" id=\"target_paste_element\"&gt;&lt;/div&gt;\n</code></pre>\n\n<p><strong>step 2</strong></p>\n\n<p>In your Javascript code add the following event</p>\n\n<pre><code>document.getElementById(\"target_paste_element\").addEventListener(\"paste\", pasteEventVerifierEditor.bind(window, pasteCallBack), false);\n</code></pre>\n\n<p>We need to bind pasteCallBack, since the mutation observer will be called asynchronously.</p>\n\n<p><strong>step 3</strong></p>\n\n<p>Add the following function to your code</p>\n\n<pre><code>function pasteEventVerifierEditor(callback, e)\n{\n   //is fired on a paste event. \n    //pastes content into another contenteditable div, mutation observer observes this, content get pasted, dom tree is copied and can be referenced through call back.\n    //create temp div\n    //save the caret position.\n    savedCaret = saveSelection(document.getElementById(\"target_paste_element\"));\n\n    var tempDiv = document.createElement(\"div\");\n    tempDiv.id = \"id_tempDiv_paste_editor\";\n    //tempDiv.style.display = \"none\";\n    document.body.appendChild(tempDiv);\n    tempDiv.contentEditable = \"true\";\n\n    tempDiv.focus();\n\n    //we have to wait for the change to occur.\n    //attach a mutation observer\n    if (window['MutationObserver'])\n    {\n        //this is new functionality\n        //observer is present in firefox/chrome and IE11\n        // select the target node\n        // create an observer instance\n        tempDiv.observer = new MutationObserver(pasteMutationObserver.bind(window, callback));\n        // configuration of the observer:\n        var config = { attributes: false, childList: true, characterData: true, subtree: true };\n\n        // pass in the target node, as well as the observer options\n        tempDiv.observer.observe(tempDiv, config);\n\n    }   \n\n}\n\n\n\nfunction pasteMutationObserver(callback)\n{\n\n    document.getElementById(\"id_tempDiv_paste_editor\").observer.disconnect();\n    delete document.getElementById(\"id_tempDiv_paste_editor\").observer;\n\n    if (callback)\n    {\n        //return the copied dom tree to the supplied callback.\n        //copy to avoid closures.\n        callback.apply(document.getElementById(\"id_tempDiv_paste_editor\").cloneNode(true));\n    }\n    document.body.removeChild(document.getElementById(\"id_tempDiv_paste_editor\"));\n\n}\n\nfunction pasteCallBack()\n{\n    //paste the content into the element.\n    restoreSelection(document.getElementById(\"target_paste_element\"), savedCaret);\n    delete savedCaret;\n\n    pasteHtmlAtCaret(this.innerHTML, false, true);\n}   \n\n\nsaveSelection = function(containerEl) {\nif (containerEl == document.activeElement)\n{\n    var range = window.getSelection().getRangeAt(0);\n    var preSelectionRange = range.cloneRange();\n    preSelectionRange.selectNodeContents(containerEl);\n    preSelectionRange.setEnd(range.startContainer, range.startOffset);\n    var start = preSelectionRange.toString().length;\n\n    return {\n        start: start,\n        end: start + range.toString().length\n    };\n}\n};\n\nrestoreSelection = function(containerEl, savedSel) {\n    containerEl.focus();\n    var charIndex = 0, range = document.createRange();\n    range.setStart(containerEl, 0);\n    range.collapse(true);\n    var nodeStack = [containerEl], node, foundStart = false, stop = false;\n\n    while (!stop &amp;&amp; (node = nodeStack.pop())) {\n        if (node.nodeType == 3) {\n            var nextCharIndex = charIndex + node.length;\n            if (!foundStart &amp;&amp; savedSel.start &gt;= charIndex &amp;&amp; savedSel.start &lt;= nextCharIndex) {\n                range.setStart(node, savedSel.start - charIndex);\n                foundStart = true;\n            }\n            if (foundStart &amp;&amp; savedSel.end &gt;= charIndex &amp;&amp; savedSel.end &lt;= nextCharIndex) {\n                range.setEnd(node, savedSel.end - charIndex);\n                stop = true;\n            }\n            charIndex = nextCharIndex;\n        } else {\n            var i = node.childNodes.length;\n            while (i--) {\n                nodeStack.push(node.childNodes[i]);\n            }\n        }\n    }\n\n    var sel = window.getSelection();\n    sel.removeAllRanges();\n    sel.addRange(range);\n}\n\nfunction pasteHtmlAtCaret(html, returnInNode, selectPastedContent) {\n//function written by Tim Down\n\nvar sel, range;\nif (window.getSelection) {\n    // IE9 and non-IE\n    sel = window.getSelection();\n    if (sel.getRangeAt &amp;&amp; sel.rangeCount) {\n        range = sel.getRangeAt(0);\n        range.deleteContents();\n\n        // Range.createContextualFragment() would be useful here but is\n        // only relatively recently standardized and is not supported in\n        // some browsers (IE9, for one)\n        var el = document.createElement(\"div\");\n        el.innerHTML = html;\n        var frag = document.createDocumentFragment(), node, lastNode;\n        while ( (node = el.firstChild) ) {\n            lastNode = frag.appendChild(node);\n        }\n        var firstNode = frag.firstChild;\n        range.insertNode(frag);\n\n        // Preserve the selection\n        if (lastNode) {\n            range = range.cloneRange();\n            if (returnInNode)\n            {\n                range.setStart(lastNode, 0); //this part is edited, set caret inside pasted node.\n            }\n            else\n            {\n                range.setStartAfter(lastNode); \n            }\n            if (selectPastedContent) {\n                range.setStartBefore(firstNode);\n            } else {\n                range.collapse(true);\n            }\n            sel.removeAllRanges();\n            sel.addRange(range);\n        }\n    }\n} else if ( (sel = document.selection) &amp;&amp; sel.type != \"Control\") {\n    // IE &lt; 9\n    var originalRange = sel.createRange();\n    originalRange.collapse(true);\n    sel.createRange().pasteHTML(html);\n    if (selectPastedContent) {\n        range = sel.createRange();\n        range.setEndPoint(\"StartToStart\", originalRange);\n        range.select();\n    }\n}\n</code></pre>\n\n<p>}</p>\n\n<p>What the code does:</p>\n\n<ol>\n<li>Somebody fires the paste event by using ctrl-v, contextmenu or other means</li>\n<li>In the paste event a new element with contenteditable is created (an element with contenteditable has elevated privileges)</li>\n<li>The caret position of the target element is saved.</li>\n<li>The focus is set to the new element</li>\n<li>The content gets pasted into the new element and is rendered in the DOM.</li>\n<li>The mutation observer catches this (it registers all changes to the dom tree and content). Then fires the mutation event.</li>\n<li>The dom of the pasted content gets cloned into a variable and returned to the callback. The temporary element is destroyed.</li>\n<li>The callback receives the cloned DOM. The caret is restored. You can edit this before you append it to your target. element. In this example I'm using Tim Downs functions for saving/restoring the caret and pasting HTML into the element.</li>\n</ol>\n\n<p>Many thanks to <a href=\"http://stackoverflow.com/users/96100/tim-down\">Tim Down</a>\nSee this post for the answer:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/8500400/get-the-pasted-content-on-document-on-paste-event/27495692#27495692\">Get the pasted content on document on paste event</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just let the browser paste as usual in its content editable div and then after the paste swap any span elements used for custom text styles with the text itself.  This seems to work okay in internet explorer and the other browsers I tried...</p>\n\n<pre><code>$('[contenteditable]').on('paste', function (e) {\n    setTimeout(function () {\n        $(e.target).children('span').each(function () {\n            $(this).replaceWith($(this).text());\n        });\n    }, 0);\n});\n</code></pre>\n\n<p>This solution assumes that you are running <strong>jQuery</strong> and that <strong>you don't want text formatting in any of your content editable divs</strong>.  </p>\n\n<p>The plus side is that it's super simple.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This solution is replace the html tag, it's simple and cross-browser; check this jsfiddle: <a href=\"http://jsfiddle.net/tomwan/cbp1u2cx/1/\" rel=\"nofollow\">http://jsfiddle.net/tomwan/cbp1u2cx/1/</a>, core code:</p>\n\n<pre><code>var $plainText = $(\"#plainText\");\nvar $linkOnly = $(\"#linkOnly\");\nvar $html = $(\"#html\");\n\n$plainText.on('paste', function (e) {\n    window.setTimeout(function () {\n        $plainText.html(removeAllTags(replaceStyleAttr($plainText.html())));\n    }, 0);\n});\n\n$linkOnly.on('paste', function (e) {\n    window.setTimeout(function () {\n        $linkOnly.html(removeTagsExcludeA(replaceStyleAttr($linkOnly.html())));\n    }, 0);\n});\n\nfunction replaceStyleAttr (str) {\n    return str.replace(/(&lt;[\\w\\W]*?)(style)([\\w\\W]*?&gt;)/g, function (a, b, c, d) {\n        return b + 'style_replace' + d;\n    });\n}\n\nfunction removeTagsExcludeA (str) {\n    return str.replace(/&lt;\\/?((?!a)(\\w+))\\s*[\\w\\W]*?&gt;/g, '');\n}\n\nfunction removeAllTags (str) {\n    return str.replace(/&lt;\\/?(\\w+)\\s*[\\w\\W]*?&gt;/g, '');\n}\n</code></pre>\n\n<p>notice: you should do some work about xss filter on the back side because this solution cannot filter strings like '&lt;&lt;>>'</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong><a href=\"http://jsbin.com/lakude/3/edit\" rel=\"nofollow\">http://jsbin.com/lakude/3/edit</a></strong></p>\n\n<p>Tested on Chrome / FF / IE11</p>\n\n<pre><code>function onPaste(e){\n  var content;\n\n  e.preventDefault();\n\n  if( e.originalEvent.clipboardData ){\n    content = (e.originalEvent || e).clipboardData.getData('text/plain');\n    document.execCommand('insertText', false, content);\n  }\n  else if( window.clipboardData ){\n    content = window.clipboardData.getData('Text');\n    if (window.getSelection)\n      window.getSelection().getRangeAt(0).insertNode( document.createTextNode(content) );\n  }\n}\n\n\n// jQuery general purpose, unoptimized, delegated listener\n$(document).on('paste', '[contenteditable]', onPaste); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How can a web application detect a paste event and retrieve the data to be pasted?</p>\n\n<p>I would like to remove HTML content before the text is pasted into a rich text editor.</p>\n\n<p>Cleaning the text after being pasted afterwards works, but the problem is that all previous formatting is lost. For example, I can write a sentence in the editor and make it bold, but when I paste new text, all formatting is lost. I want to clean just the text that is pasted, and leave any previous formatting untouched.</p>\n\n<p>Ideally, the solution should work across all modern browsers (e.g., MSIE, Gecko, Chrome, and Safari).</p>\n\n<p>Note that MSIE has <code>clipboardData.getData()</code>, but I could not find similar functionality for other browsers.</p>\n",
            "last_activity_date": 1424020578,
            "question_id": 2176861,
            "score": 125,
            "tags": [
                "javascript",
                "cross-browser",
                "clipboard"
            ],
            "title": "JavaScript get clipboard data on paste event (Cross browser)"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>You can use data URIs.  Browser support varies; see <a href=\"http://en.wikipedia.org/wiki/Data_URI_scheme#Web_browser_support\">Wikipedia</a>.  Example:</p>\n\n<pre><code>&lt;a href=\"data:application/octet-stream;charset=utf-16le;base64,//5mAG8AbwAgAGIAYQByAAoA\"&gt;text file&lt;/a&gt;\n</code></pre>\n\n<p>The octet-stream is to force a download prompt.  Otherwise, it will probably open in the browser.</p>\n\n<p>For CSV, try:</p>\n\n<pre><code>&lt;a href=\"data:application/octet-stream,field1%2Cfield2%0Afoo%2Cbar%0Agoo%2Cgai%0A\"&gt;CSV Octet&lt;/a&gt;z\n</code></pre>\n\n<p>Try the <a href=\"http://jsfiddle.net/VBJ9h/319/\">jsFiddle demo</a>.</p>\n",
                    "is_accepted": true,
                    "score": 165
                },
                {
                    "body": "<p>It actually IS possible - use Flash.</p>\n\n<p>You can either generate the content with JS and then initialize some flash vars or just do everything within a flash movie.</p>\n\n<p>Please take a look at <a href=\"http://www.mikechambers.com/blog/2008/08/20/reading-and-writing-local-files-in-flash-player-10/\" rel=\"nofollow\">this</a> for some important remarks.</p>\n",
                    "is_accepted": false,
                    "score": -9
                },
                {
                    "body": "<p>If the file contains text data, a technique I use is to put the text into a textarea element and have the user select it (click in textarea then ctrl-A) then copy followed by a paste to a text editor.</p>\n",
                    "is_accepted": false,
                    "score": -11
                },
                {
                    "body": "<p>You can even do one better than just URI's - using Chrome you are also able to suggest the name the file will take, as explained in <a href=\"http://domainrange.blogspot.co.uk/2013/04/prompting-user-to-download-data-uri-and.html\" rel=\"nofollow\">this blog post about naming a download when using URIs</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm happily using <a href=\"https://github.com/eligrey/FileSaver.js\">FileSaver.js</a>. Its compatibility is pretty good (IE10+ and everything else), and it's very simple to use:</p>\n\n<pre><code>var blob = new Blob([\"some text\"], {\n    type: \"text/plain;charset=utf-8;\",\n});\nsaveAs(blob, \"thing.txt\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>Simple solution for HTML5 ready browsers...</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function download(filename, text) {\r\n  var pom = document.createElement('a');\r\n  pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\r\n  pom.setAttribute('download', filename);\r\n  pom.click();\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>form * {\r\n  display: block;\r\n  margin: 10px;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;form onsubmit=\"download(this['name'].value, this['text'].value)\"&gt;\r\n  &lt;input type=\"text\" name=\"name\" value=\"test.txt\"&gt;\r\n  &lt;textarea name=\"text\"&gt;&lt;/textarea&gt;\r\n  &lt;input type=\"submit\" value=\"Download\"&gt;\r\n&lt;/form&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><strong>Usage</strong></p>\n\n<pre><code>download('test.txt', 'Hello world!');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 101
                },
                {
                    "body": "<p>Solution that work on IE10:\n(I needed a csv file, but it's enough to change type and filename to txt)</p>\n\n<pre><code>var csvContent=data; //here we load our csv data \nvar blob = new Blob([csvContent],{\n    type: \"text/csv;charset=utf-8;\"\n});\n\nnavigator.msSaveBlob(blob, \"filename.csv\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>All of the above example works just fine in chrome and IE, But fails in Firefox.\nPlease do consider to append anchor to body and remove it after click.</p>\n\n<pre><code>var a = window.document.createElement('a');\na.href = window.URL.createObjectURL(new Blob(['Test,Text'], {type: 'text/csv'}));\na.download = 'test.csv';\n\n// Append anchor to body.\ndocument.body.appendChild(a)\na.click();\n\n// Remove anchor from body\ndocument.body.removeChild(a)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>The following method works in IE11+, Firefox 25+ and Chrome 30+:</p>\n\n<pre><code>&lt;a id=\"export\" class=\"myButton\" download=\"\" href=\"#\"&gt;export&lt;/a&gt;\n&lt;script&gt;\n    function createDownloadLink(anchorSelector, str, fileName){\n        if(window.navigator.msSaveOrOpenBlob) {\n            var fileData = [str];\n            blobObject = new Blob(fileData);\n            $(anchorSelector).click(function(){\n                window.navigator.msSaveOrOpenBlob(blobObject, fileName);\n            });\n        } else {\n            var url = \"data:text/plain;charset=utf-8,\" + encodeURIComponent(str);\n            $(anchorSelector).attr(\"download\", fileName);               \n            $(anchorSelector).attr(\"href\", url);\n        }\n    }\n\n    $(function () {\n        var str = \"hi,file\";\n        createDownloadLink(\"#export\",str,\"file.txt\");\n    });\n\n&lt;/script&gt;\n</code></pre>\n\n<p>See this in Action: <a href=\"http://jsfiddle.net/Kg7eA/\">http://jsfiddle.net/Kg7eA/</a></p>\n\n<p>Firefox and Chrome support data URI for navigation, which allows us to create files by navigating to a data URI, while IE doesn't support it for security purposes. </p>\n\n<p>On the other hand, IE has API for saving a blob, which can be used to create and download files.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>As of April 2014, FileSytem APIs may not be standardized in W3C. Anyone looking at the solution with blob should thread with caution, I guess.</p>\n\n<p><a href=\"http://www.html5rocks.com/en/tutorials/file/filesystem/\" rel=\"nofollow\">HTML5 rocks heads up</a></p>\n\n<p><a href=\"http://lists.w3.org/Archives/Public/public-webapps/2014AprJun/0010.html\" rel=\"nofollow\">W3C Mailing List on FileSytem API</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you just want to covert a string to be available for download you can try something like this in angularjs using jquery.</p>\n\n<pre><code>$('a.download').attr('href', 'data:application/csv;charset=utf-8,'+$scope.data);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there any way I can create a text file on the client side and prompt the user to download it, without any interaction with the server?\nI know I can't write directly to their machine (security and all), but can I create and prompt them to save it?</p>\n",
            "last_activity_date": 1422840320,
            "question_id": 3665115,
            "score": 265,
            "tags": [
                "javascript",
                "file",
                "web-applications",
                "client-side"
            ],
            "title": "Create a file in memory for user to download, not through server"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<p>I like this:</p>\n\n<pre><code>var yourNamespace = {\n\n    foo: function() {\n    },\n\n    bar: function() {\n    }\n};\n\n...\n\nyourNamespace.foo();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 440
                },
                {
                    "body": "<p>I use this approach:-</p>\n\n<pre><code>var myNamespace = {}\nmyNamespace._construct = function()\n{\n    var staticVariable = \"This is available to all functions created here\"\n\n    function MyClass()\n    {\n       //Depending on the class may build all the class here\n       this.publicMethod = function()\n       {\n          //Do stuff\n       }\n    }\n    //Alternatively may use prototype\n    MyClass.prototype.altPublicMethod = function()\n    {\n        //Do stuff\n    }\n\n    function privateStuff()\n    {\n    }\n\n    function publicStuff()\n    {\n       //code that may call other public and private functions\n    }\n\n    //List of things to place publically\n    this.publicStuff = publicStuff\n    this.MyClass = MyClass\n}\nmyNamespace._construct()\n\n//The following may or may not be in another file\nmyNamespace.subName = {}\nmyNamespace.subName._construct = function()\n{\n   //build namespace\n}\nmyNamespace.subName._construct()\n</code></pre>\n\n<p>External code can then:-</p>\n\n<pre><code>var myClass = new myNamespace.MyClass();\nvar myOtherClass = new myNamepace.subName.SomeOtherClass();\nmyNamespace.subName.publicOtherStuff(someParameter);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>Another way to do it, which I consider it to be a little bit less restrictive than the object literal form, is this:</p>\n\n<pre><code>var ns = new function() {\n\n    var internalFunction = function() {\n\n    };\n\n    this.publicFunction = function() {\n\n    };\n};\n</code></pre>\n\n<p>The above is pretty much like <a href=\"http://yuiblog.com/blog/2007/06/12/module-pattern/\">the module pattern</a> and <a href=\"http://snook.ca/archives/javascript/no-love-for-module-pattern\">whether you like it or not</a>, it allows you to expose all your functions as public, while avoiding the rigid structure of an object literal.</p>\n",
                    "is_accepted": false,
                    "score": 274
                },
                {
                    "body": "<p><a href=\"http://github.com/smith/namespacedotjs\" rel=\"nofollow\">http://github.com/smith/namespacedotjs</a></p>\n\n<p>You gotta check that out!! :D</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>After porting several of my libraries to different projects, and having to constantly be changing the top level (statically named) namespace, I've switched to using this small (open source) helper function for defining namespaces.</p>\n\n<pre><code>global_namespace.Define('startpad.base', function(ns) {\n    var Other = ns.Import('startpad.other');\n    ....\n});\n</code></pre>\n\n<p>Description of the benefits are at my <a href=\"http://blog.pageforest.com/javascript-namespaces\">blog post</a>.  You can grab the <a href=\"http://g02me.googlecode.com/svn/trunk/app/scripts/namespace.js\">source code here</a>.</p>\n\n<p>One of the benefits I really like is isolation between modules with respect to load order.  You can refer to an external module BEFORE it is loaded.  And the object reference you get will be filled in when the code is available.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<blockquote>\n  <p>Is there a more elegant or succinct way of doing this?</p>\n</blockquote>\n\n<p>yes it is:</p>\n\n<pre><code>var your_namespace = your_namespace || {};\n</code></pre>\n\n<p>then you can have </p>\n\n<pre><code>var your_namespace = your_namespace || {};\nyour_namespace.Foo = {toAlert:'test'};\nyour_namespace.Bar = function(arg) \n{\n    alert(arg);\n};\nwith(your_namespace)\n{\n   Bar(Foo.toAlert);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 91
                },
                {
                    "body": "<p>I created <a href=\"http://jweir.github.com/namespace/\">namespace</a> which is inspired by Erlang's modules.  It is a very functional approach, but that is is how I write my js these days.</p>\n\n<p>It gives a closure a global namespace and exposes a defined set functions within that closure.</p>\n\n<pre><code>(function(){\n\n  namespace(\"images\", previous, next);\n  // ^^ this creates or finds a root object, images, and binds the two functions to it.\n  // It works even though those functions are not yet defined.\n\n  function previous(){ ... }\n\n  function next(){ ... }\n\n  function find(){ ... } // a private function\n\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>This is a follow-up to user106826's link to Namespace.js. It seems the project moved to github. The new link is now:</p>\n\n<p><a href=\"http://github.com/smith/namespacedotjs\">http://github.com/smith/namespacedotjs</a></p>\n\n<p>I have been using this simple js helper for my tiny project and so far it seems to be light yet versatile enough to handle namespacing <em>and</em> loading modules/classes. It would be great if it would allow me to import a package into a namespace of my choice, not just the global namespace... sigh, but that's besides the point.</p>\n\n<p>It allows you to declare the namespace then define objects/modules in that namespace:</p>\n\n<pre><code>Namespace('my.awesome.package'); \nmy.awesome.package.WildClass = {};\n</code></pre>\n\n<p>Another option is to declare the namespace and it's contents at once:</p>\n\n<pre><code>Namespace('my.awesome.package', {\n    SuperDuperClass: {\n        saveTheDay: function() {\n            alert('You are welcome.');\n        }\n    }\n});\n</code></pre>\n\n<p>For more usage examples, look at the example.js file in the source: <a href=\"http://github.com/smith/namespacedotjs/blob/master/example/sandbox.js\">http://github.com/smith/namespacedotjs/blob/master/example/sandbox.js</a></p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>Because you may write different files of javascript and later combine or not combine them in an application each needs to be able to recover or construct the namespace object without damaging the work of other files...</p>\n\n<p>One file might intend to use the namespace namespace.namespace1</p>\n\n<pre><code>namespace = window.namespace || {};\nnamespace.namespace1 = namespace.namespace1 || {};\n\nnamespace.namespace1.doSomeThing = function(){}\n</code></pre>\n\n<p>Another file might want to use the namespace namespace.namespace2</p>\n\n<pre><code>namespace = window.namespace || {};\nnamespace.namespace2 = namespace.namespace2 || {};\n\nnamespace.namespace2.doSomeThing = function(){}\n</code></pre>\n\n<p>These two files can live together or apart without colliding.</p>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>I've written another namespacing library that works a bit more like packages / units do in other languages. It allows you to create a package of Javascript code and the reference that package from other code:</p>\n\n<p><em>hello.js</em>\n<code><pre>\nPackage(\"hello\", [], function() {\n  function greeting() {\n    alert(\"Hello World!\");\n  }\n  // expose function greeting to other packages\n  Export(\"greeting\", greeting);\n});\n</pre></code></p>\n\n<p><em>example.js</em>\n<code><pre>\nPackage(\"example\", [\"hello\"], function(greeting) {\n  // greeting is available here\n  greeting();  // Alerts: \"Hello World!\"\n});\n</pre></code></p>\n\n<p>Only the second file needs to be included in the page its dependencies (hello.js in this example) will automatically be loaded and the objects exported from those dependencies will be used to populate the arguments of the callback function.</p>\n\n<p>You can find the related project here:\n<a href=\"http://packagesinjavascript.wordpress.com/\" rel=\"nofollow\">Packages JS</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If using a Makefile you can do this.</p>\n\n<pre><code>// prelude.hjs\nbilly = new (\n    function moduleWrapper () {\n    const exports = this;\n\n// postlude.hjs\nreturn exports;\n})();\n\n// someinternalfile.js\nfunction bob () { console.log('hi'); }\nexports.bob = bob;\n\n// clientfile.js\nbilly.bob();\n</code></pre>\n\n<p>I prefer to use a Makefile anyway once I get to about 1000 lines because I can effectively comment out large swaths of code by removing a single line in the makefile. It makes it easy to fiddle with stuff. Also, with this technique the namespace only appears once in the prelude so it's easy to change and you don't have to keep repeating it inside the library code.</p>\n\n<p>A shell script for live development in the browser when using a makefile:</p>\n\n<pre><code>while (true); do make; sleep 1; done\n</code></pre>\n\n<p>Add this as a make task 'go' and you can 'make go' to keep your build updated as you code.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>YUI has a <a href=\"http://developer.yahoo.com/yui/yahoo/#namespace\" rel=\"nofollow\">YUI.namespace</a> function to do this</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use the approach found on the Enterprise jQuery site, <a href=\"http://appendto.com/2010/10/how-good-c-habits-can-encourage-bad-javascript-habits-part-1/\">here</a> </p>\n\n<p>Here is their example showing how to declare private &amp; public properties and functions.  Everything is done as a self-executing anonymous function.</p>\n\n<pre><code>(function( skillet, $, undefined ) {\n    //Private Property\n    var isHot = true;\n\n    //Public Property\n    skillet.ingredient = \"Bacon Strips\";\n\n    //Public Method\n    skillet.fry = function() {\n        var oliveOil;\n\n        addItem( \"\\t\\n Butter \\n\\t\" );\n        addItem( oliveOil );\n        console.log( \"Frying \" + skillet.ingredient );\n    };\n\n    //Private Method\n    function addItem( item ) {\n        if ( item !== undefined ) {\n            console.log( \"Adding \" + $.trim(item) );\n        }\n    }    \n}( window.skillet = window.skillet || {}, jQuery ));\n</code></pre>\n\n<p>So if you want to access one of the public members you would just go skillet.fry() or skillet.ingredients</p>\n\n<p>What's really cool is that you can now extend the namespace using the exact same syntax.</p>\n\n<pre><code>//Adding New Functionality to the Skillet\n(function( skillet, $, undefined ) {\n    //Private Property\n    var amountOfGrease = \"1 Cup\";\n\n    //Public Method\n    skillet.toString = function() {\n        console.log( skillet.quantity + \" \" + \n                     skillet.ingredient + \" &amp; \" + \n                     amountOfGrease + \" of Grease\" );\n        console.log( isHot ? \"Hot\" : \"Cold\" );\n    };    \n}( window.skillet = window.skillet || {}, jQuery ));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 675
                },
                {
                    "body": "<p>I normally build it in a closure:</p>\n\n<pre><code>var MYNS = MYNS || {};\n\nMYNS.subns = (function() {\n\n    function privateMethod() {\n        // Do private stuff, or build internal.\n        return \"Message\";\n    }\n\n    return {\n        someProperty: 'prop value',\n        publicMethod: function() {\n            return privateMethod() + \" stuff\";\n        }\n    };\n})();\n</code></pre>\n\n<p>My style over the years has had a subtle change since writing this, I now find myself writing the closure like this:</p>\n\n<pre><code>var MYNS = MYNS || {};\n\nMYNS.subns = (function() {\n    var internalState = \"Message\";\n\n    var privateMethod = function() {\n        // Do private stuff, or build internal.\n        return internalState;\n    };\n    var publicMethod = function() {\n        return privateMethod() + \" stuff\";\n    };\n\n    return {\n        someProperty: 'prop value',\n        publicMethod: publicMethod\n    };\n})();\n</code></pre>\n\n<p>I find this way the public API and implementation are easier to understand, think of the return statement as being a public interface to the implementation.</p>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>Here's how Stoyan Stefanov does it in his JavaScript Patterns book which I to be found very good. (Also shows how he does comments that allows for auto generated API documentation, and how to add a method to a custom object's prototype):</p>\n\n<pre><code>/**\n* My js app\n*\n* @module myapp\n*/\n\n/** @namespace Namespace for MYAPP classes and functions. */\nvar MYAPP = MYAPP || {};\n\n/**\n* A maths utility\n* @namespace MYAPP\n* @class math_stuff\n*/\nMYAPP.math_stuff = {\n\n    /**\n    * Sums 2 numbers\n    *\n    * @method sum\n    * @param {Number} a First number\n    * @param {Number} b Second number\n    * @return {Number} Sum of the inputs\n    */\n    sum: function (a, b) {\n        return a + b;\n    },\n\n    /**\n    * Multiplies 2 numbers\n    *\n    * @method multi\n    * @param {Number} a First number\n    * @param {Number} b Second number\n    * @return {Number} The inputs multiplied\n    */\n    multi: function (a, b) {\n        return a * b;\n    }\n};\n\n/**\n* Constructs Person objects\n* @class Person\n* @constructor\n* @namespace MYAPP\n* @param {String} First name\n* @param {String} Last name\n*/\nMYAPP.Person = function (first, last) {\n\n    /**\n    * First name of the Person\n    * @property first_name\n    * @type String\n    */\n    this.first_name = first;\n\n    /**\n    * Last name of the Person\n    * @property last_name\n    * @type String\n    */\n    this.last_name = last;\n};\n\n/**\n* Return Person's full name\n*\n* @method getName\n* @return {String} First name + last name\n*/\nMYAPP.Person.prototype.getName = function () {\n    return this.first_name + ' ' + this.last_name;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>You can declare a simple function to providing namespaces.</p>\n\n<pre><code>function namespace(namespace) {\n    var object = this, tokens = namespace.split(\".\"), token;\n\n    while (tokens.length &gt; 0) {\n        token = tokens.shift();\n\n        if (typeof object[token] === \"undefined\") {\n            object[token] = {};\n        }\n\n        object = object[token];\n    }\n\n    return object;\n}\n\n// Usage example\nnamespace(\"foo.bar\").baz = \"I'm a value!\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>If anyone find this interesting, </p>\n\n<pre><code>var namespace = {};\nnamespace.module1 = (function(){\n\n    var self = {};\n    self.initialized = false;\n\n    self.init = function(){\n        setTimeout(self.onTimeout, 1000)\n    };\n\n    self.onTimeout = function(){\n        alert('onTimeout')\n        self.initialized = true;\n    };\n\n    self.init(); /* if it need to auto-initialize, */\n    /* you can also call 'namespace.module1.init();' from outside the module */\n    return self;\n\n})()\n</code></pre>\n\n<p>You can optionally declare a <code>local</code> variable same like <code>self</code> and assign <code>local.onTimeout</code> if you want it to be private.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>I like Jaco Pretorius' solution but wanted to make the \"this\" keyword a bit more useful by pointing it to the module/namespace object.\nMy version of skillet:</p>\n\n<pre><code>(function ($, undefined) {\n\n    console.log(this);\n\n}).call(window.myNamespace = window.myNamespace || {}, jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use the following syntax for the namespace.</p>\n\n<pre><code>var MYNamespace = MYNamespace|| {};\n\n MYNamespace.MyFirstClass = function (val) {\n        this.value = val;\n        this.getValue = function(){\n                          return this.value;\n                       };\n    }\n\nvar myFirstInstance = new MYNamespace.MyFirstClass(46);\nalert(myFirstInstance.getValue());\n</code></pre>\n\n<p>jsfiddle: <a href=\"http://jsfiddle.net/rpaul/4dngxwb3/1/\" rel=\"nofollow\">http://jsfiddle.net/rpaul/4dngxwb3/1/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How do I create a namespace in JavaScript so that my objects and functions aren't overwritten by other same-named objects and functions? I've used the following:</p>\n\n<pre><code>if (Foo == null || typeof(Foo) != \"object\") { var Foo = new Object();}\n</code></pre>\n\n<p>Is there a more elegant or succinct way of doing this?</p>\n",
            "last_activity_date": 1423089903,
            "question_id": 881515,
            "score": 541,
            "tags": [
                "javascript",
                "namespaces",
                "javascript-namespaces"
            ],
            "title": "How do I declare a namespace in JavaScript?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p><a href=\"http://best-practice-software-engineering.ifs.tuwien.ac.at/patterns/delegation.html\" rel=\"nofollow\">Delegation</a> is a technique where an object expresses certain behavior to the outside but in reality delegates responsibility for implementing that behaviour to an associated object. This sounds at first very similar to the proxy pattern, but it serves a much different purpose. Delegation is an abstraction mechanism which centralizes object (method) behavior.</p>\n\n<p>Generally spoken: use delegation as alternative to inheritance. Inheritance is a good strategy, when a close relationship exist in between parent and child object, however, inheritance couples objects very closely. Often, delegation is the more flexible way to express a relationship between classes.</p>\n\n<p>This pattern is also known as \"proxy chains\". Several other design patterns use delegation - the State, Strategy and Visitor Patterns depend on it.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A delegate in C# is similar to a function pointer in C or C++. Using a delegate allows the programmer to encapsulate a reference to a method inside a delegate object. The delegate object can then be passed to code which can call the referenced method, without having to know at compile time which method will be invoked. </p>\n\n<p>See this link  --> <a href=\"http://www.akadia.com/services/dotnet%5Fdelegates%5Fand%5Fevents.html\" rel=\"nofollow\">http://www.akadia.com/services/dotnet%5Fdelegates%5Fand%5Fevents.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>dom event delegation</strong> is something different from the computer science definition.</p>\n\n<p>It refers to handling bubbling events from many elements, like table cells, from a parent object, like the table. It can keep the code simpler, especially when adding or removing elements, and saves some memory.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>DOM event delegation is a mechanism of responding to ui-events via a single common parent rather than each child, through the magic of event \"bubbling\" (aka event propagation).</p>\n\n<p>When an event is triggered on an element, <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-bubbling\">the following occurs</a>:</p>\n\n<blockquote>\n  <p>The event is dispatched to its target\n  <code>EventTarget</code> and any event listeners\n  found there are triggered. <em>Bubbling</em>\n  events will then trigger any\n  additional event listeners found by\n  following the <code>EventTarget</code>'s parent\n  chain <em>upward</em>, checking for any event\n  listeners registered on each\n  successive EventTarget. This upward\n  propagation will continue up to and\n  including the <code>Document</code>.</p>\n</blockquote>\n\n<p>Event bubbling provides the foundation for event delegation in browsers. Now you can bind an event handler to a single parent element, and that handler will get executed whenever the event occurs <em>on any of its child nodes</em> (and any of their children in turn). <strong>This is event delegation.</strong> Here's an example of it in practice:</p>\n\n<pre><code>&lt;ul onclick=\"alert(event.type + '!')\"&gt;\n    &lt;li&gt;One&lt;/li&gt;\n    &lt;li&gt;Two&lt;/li&gt;\n    &lt;li&gt;Three&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>With that example if you were to click on any of the child <code>&lt;li&gt;</code> nodes, you would see an alert of <code>\"click!\"</code>, even though there is no click handler bound to the <code>&lt;li&gt;</code> you clicked on. If we bound <code>onclick=\"...\"</code> to each <code>&lt;li&gt;</code> you would get the same effect.</p>\n\n<p><strong>So what's the benefit?</strong></p>\n\n<p>Imagine you now have a need to dynamically add new <code>&lt;li&gt;</code> items to the above list via DOM manipulation:</p>\n\n<pre><code>var newLi = document.createElement('li');\nnewLi.innerHTML = 'Four';\nmyUL.appendChild(newLi);\n</code></pre>\n\n<p><em>Without</em> using event delegation you would have to \"rebind\" the <code>\"onclick\"</code> event handler to the new <code>&lt;li&gt;</code> element, in order for it to act the same way as its siblings. <em>With</em> event delegation you don't need to do anything. Just add the new <code>&lt;li&gt;</code> to the list and you're done.</p>\n\n<p>This is absolutely fantastic for web apps with event handlers bound to many elements, where new elements are dynamically created and/or removed in the DOM. With event delegation the number of event bindings can be drastically decreased by moving them to a common parent element, and code that dynamically creates new elements on the fly can be decoupled from the logic of binding their event handlers.</p>\n\n<p>Another benefit to event delegation is that the total memory footprint used by event listeners goes down (since the number of event bindings go down). It may not make much of a difference to small pages that unload often (i.e. user's navigate to different pages often). But for long-lived applications it can be significant. There are some really difficult-to-track-down situations when elements removed from the DOM still claim memory (i.e. they leak), and often this leaked memory is tied to an event binding. With event delegation you're free to destroy child elements without risk of forgetting to \"unbind\" their event listeners (since the listener is on the ancestor). These types of memory leaks can then be contained (if not eliminated, which is freaking hard to do sometimes. IE I'm looking at you).</p>\n\n<p>Here are some better concrete code examples of event delegation:</p>\n\n<ul>\n<li><a href=\"http://davidwalsh.name/event-delegate\">How JavaScript Event Delegation Works</a></li>\n<li><a href=\"http://icant.co.uk/sandbox/eventdelegation/\">Event Delegation versus Event Handling</a></li>\n<li><a href=\"http://api.jquery.com/delegate/\">jQuery.delegate</a> is event delegation + selector specification</li>\n<li><a href=\"http://api.jquery.com/on/#direct-and-delegated-events\">jQuery.on</a> uses event delegation when passed a selector as the 2nd parameter</li>\n<li><a href=\"http://web.archive.org/web/20090420170842/http://usabletype.com/weblog/event-delegation-without-javascript-library/\">Event delegation without a JavaScript library</a></li>\n<li><a href=\"http://lists.evolt.org/archive/Week-of-Mon-20090209/127339.html\">Closures vs Event delegation</a>: takes a look at the pros of <em>not</em> converting code to use event delegation</li>\n<li>Interesting approach PPK uncovered for <a href=\"http://www.quirksmode.org/blog/archives/2008/04/delegating_the.html\">delegating the <code>focus</code> and <code>blur</code> events</a> (which do <em>not</em> bubble)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 63
                },
                {
                    "body": "<h3>The delegation concept</h3>\n\n<p>If there are many elements inside one parent, and you want to handle events on them of them - don\u2019t bind handlers to each element.\nInstead, bind the single handler to their parent, and get the child from event.target.\nThis site provides useful info about how to implement event delegation.\n<a href=\"http://javascript.info/tutorial/event-delegation\" rel=\"nofollow\">http://javascript.info/tutorial/event-delegation</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Can anyone please explain event delegation in JavaScript and how is it useful?</p>\n",
            "last_activity_date": 1404237700,
            "question_id": 1687296,
            "score": 30,
            "tags": [
                "javascript",
                "javascript-events",
                "event-handling",
                "event-delegation"
            ],
            "title": "What is DOM Event delegation?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>If I get you correctly, you want to know when a tab/window is effectively closed. Well, AFAIK the only way in <code>Javascript</code> to detect that kind of stuffs are <code>onunload</code> &amp; <code>onbeforeunload</code> events.</p>\n\n<p>Unfortunately (or fortunately?), those events are also fired when you leave a site over a <code>link</code> or your browsers back button. So this is the best answer I can give, I don't think you can natively detect a pure <code>close</code> in Javascript. Correct me if I'm wrong here.</p>\n",
                    "is_accepted": true,
                    "score": 48
                },
                {
                    "body": "<pre><code>&lt;body onbeforeunload=\"ConfirmClose()\" onunload=\"HandleOnClose()\"&gt;\n\nvar myclose = false;\n\nfunction ConfirmClose()\n{\n    if (event.clientY &lt; 0)\n    {\n        event.returnValue = 'You have closed the browser. Do you want to logout from your application?';\n        setTimeout('myclose=false',10);\n        myclose=true;\n    }\n}\n\nfunction HandleOnClose()\n{\n    if (myclose==true) \n    {\n        //the url of your logout page which invalidate session on logout \n        location.replace('/contextpath/j_spring_security_logout') ;\n    }   \n}\n</code></pre>\n\n<p>//This is working in IE7, if you are closing tab or browser with only one tab</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>$(window).unload( function () { alert(\"Bye now!\"); } );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>window.onbeforeunload = function() {\n  console.log('event');\n  return false; //here also can be string, that will be shown to the user\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>From <a href=\"https://developer.mozilla.org/en-US/docs/Web/Reference/Events/beforeunload?redirectlocale=en-US&amp;redirectslug=DOM/Mozilla_event_reference/beforeunload\">Firefox Documentation</a>  </p>\n\n<p>For some reasons, Webkit-based browsers don't follow the spec for the dialog box. An almost cross-working example would be close from the below example.</p>\n\n<pre><code>window.addEventListener(\"beforeunload\", function (e) {\n  var confirmationMessage = \"\\o/\";\n\n  (e || window.event).returnValue = confirmationMessage; //Gecko + IE\n  return confirmationMessage;                            //Webkit, Safari, Chrome\n});\n</code></pre>\n\n<p>This example for handling all browsers.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>try this,\nI am sure this will work for you.</p>\n\n<pre><code> &lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.2/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script type='text/javascript'&gt;\n\n\n    $(function() {\n\n        try{\n\n            opera.setOverrideHistoryNavigationMode('compatible');\n            history.navigationMode = 'compatible';\n        }catch(e){}\n\n\n        function ReturnMessage()\n        {\n            return \"wait\";\n        }\n\n\n\n        function UnBindWindow()\n        {\n            $(window).unbind('beforeunload', ReturnMessage);\n        }\n\n\n\n\n        $(window).bind('beforeunload',ReturnMessage );\n\n    });\n    &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Simple Solution</p>\n\n<pre><code>window.onbeforeunload = function () {\n    return \"Do you really want to close?\";\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Sorry, I was not able to add a comment to one of existing answers, but in case you wanted to implement a kind of warning dialog,  I just wanted to mention that any event handler function has an argument -  event.  In your case you can call event.preventDefault() to disallow leaving  the page automatically, then issue your own dialog.  I consider this a way better option than using standard ugly and insecure alert(). I personally implemented my own set of dialog boxes based on kendoWindow object (Telerik's Kendo UI,  which is almost fully open-sourced,  except of kendoGrid and kendoEditor). You can also use dialog boxes from jQuery UI. Please note though,  that such things are asynchronous,  and you will need to bind a handler to onclick event of every button,  but this is all quite easy to implement. </p>\n\n<p>However,  I do agree that the lack of the real close event is terrible: if you,  for instance, want to reset your session state at the back-end only on case of the real close,  it's a problem.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>any cross browser javascript/jquery to detect if browser is closing tab or closed browser ? and should not activate event when go to other link?  </p>\n",
            "last_activity_date": 1405735865,
            "question_id": 3888902,
            "score": 45,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "javascript detect browser close tab/close browser"
        },
        {
            "answer_count": 32,
            "answers": [
                {
                    "body": "<p>You could sort the array and then run through it and then see if the next (or previous) index is the same as the current. Assuming your sort algorithm is good, this should be less than O(n<sup>2</sup>):</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [9, 9, 111, 2, 3, 4, 4, 5, 7];\r\nvar sorted_arr = arr.sort(); // You can define the comparing function here. \r\n                             // JS by default uses a crappy string compare.\r\nvar results = [];\r\nfor (var i = 0; i &lt; arr.length - 1; i++) {\r\n    if (sorted_arr[i + 1] == sorted_arr[i]) {\r\n        results.push(sorted_arr[i]);\r\n    }\r\n}\r\n\r\nalert(results);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": true,
                    "score": 92
                },
                {
                    "body": "<p>The Prototype library has a <a href=\"http://www.prototypejs.org/api/array/uniq\" rel=\"nofollow\">uniq</a> function, which returns the array without the dupes. That's only half of the work though. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can add this function, or tweak it and add it to Javascript's Array prototype:  </p>\n\n<pre><code>Array.prototype.unique = function () {\n    var r = new Array();\n    o:for(var i = 0, n = this.length; i &lt; n; i++)\n    {\n    \tfor(var x = 0, y = r.length; x &lt; y; x++)\n    \t{\n    \t\tif(r[x]==this[i])\n    \t\t{\n                alert('this is a DUPE!');\n    \t\t\tcontinue o;\n    \t\t}\n    \t}\n    \tr[r.length] = this[i];\n    }\n    return r;\n}\n\nvar arr = [1,2,2,3,3,4,5,6,2,3,7,8,5,9];\nvar unique = arr.unique();\nalert(unique);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>If you want to elimate the duplicates, try this great solution:</p>\n\n<pre><code>function eliminateDuplicates(arr) {\n  var i,\n      len=arr.length,\n      out=[],\n      obj={};\n\n  for (i=0;i&lt;len;i++) {\n    obj[arr[i]]=0;\n  }\n  for (i in obj) {\n    out.push(i);\n  }\n  return out;\n}\n</code></pre>\n\n<p>Its one of the greatest code snippets for JavaScript i've seen. The original is published here:\n<a href=\"http://dreaminginjavascript.wordpress.com/2008/08/22/eliminating-duplicates/\">http://dreaminginjavascript.wordpress.com/2008/08/22/eliminating-duplicates/</a></p>\n",
                    "is_accepted": false,
                    "score": 131
                },
                {
                    "body": "<p>This should get you what you want, Just the duplicates.</p>\n\n<pre><code>function find_duplicates(arr) {\n  var len=arr.length,\n      out=[],\n      counts={};\n\n  for (var i=0;i&lt;len;i++) {\n    var item = arr[i];\n    counts[item] = counts[item] &gt;= 1 ? counts[item] + 1 : 1;\n  }\n\n  for (var item in counts) {\n    if(counts[item] &gt; 1)\n      out.push(item);\n  }\n\n  return out;\n}\n\nfind_duplicates(['one',2,3,4,4,4,5,6,7,7,7,'pig','one']); // -&gt; ['one',4,7] in no particular order.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Just to add some theory to the above. </p>\n\n<p>Finding duplicates has a lower bound of O(n*log(n) in the comparison model.  SO theoretically, you cannot do any better than first sorting then going through the\nlist sequentially removing any duplicates you find.</p>\n\n<p>If you want to find the duplicates in linear (O(n))  <em>expected</em> time, you could\nhash each element of the list; if there is a collision, remove/label it as a duplicate,\nand continue.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The following function (a variation of the eliminateDuplicates function already mentioned) seems to do the trick, returning test2,1,7,5 for the input [\"test\", \"test2\", \"test2\", 1, 1, 1, 2, 3, 4, 5, 6, 7, 7, 10, 22, 43, 1, 5, 8]</p>\n\n<p>Note that the problem is stranger in JavaScript than in most other languages, because a JavaScript array can hold just about anything. Note that solutions that use sorting might need to provide an appropriate sorting function--I haven't tried that route yet.</p>\n\n<p>This particular implementation works for (at least) strings and numbers.</p>\n\n<pre><code>function findDuplicates(arr) {\n\tvar i,\n    \tlen=arr.length,\n    \tout=[],\n    \tobj={};\n\n\tfor (i=0;i&lt;len;i++) {\n\t\tif (obj[arr[i]] != null) {\n\t\t\tif (!obj[arr[i]]) {\n\t\t\t\tout.push(arr[i]);\n\t\t\t\tobj[arr[i]] = 1;\n\t\t\t}\n\t\t} else {\n\t\t\tobj[arr[i]] = 0;\t\t\t\n\t\t}\n\t}\n\treturn out;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>/*\nThe indexOf method of the Array object is useful for comparing array items.\nIE is the only major browser that does not natively support it, but it is easy to implement:\n*/</p>\n\n<pre><code>Array.prototype.indexOf= Array.prototype.indexOf || function(what, i){\n    i= i || 0;\n    var L= this.length;\n    while(i&lt;L){\n    \tif(this[i]=== what) return i;\n    \t++i;\n    }\n    return -1;\n}\n\nfunction getarrayduplicates(arg){\n    var itm, A= arg.slice(0, arg.length), dups= [];\n    while(A.length){\n    \titm= A.shift();\n    \tif(A.indexOf(itm)!= -1 &amp;&amp; dups.indexOf(itm)== -1){\n    \t\tdups[dups.length]= itm;\n    \t}\n    }\n    return dups;\n}\n</code></pre>\n\n<p>var a1= [1, 22, 3, 2, 2, 3, 3, 4, 1, 22, 7, 8, 9];</p>\n\n<p>alert(getarrayduplicates(a1));</p>\n\n<p>For very large arrays, it can be faster to remove the duplicates from the array as they are found, so that they will not be looked at again:</p>\n\n<pre><code>function getarrayduplicates(arg){\n    var itm, A= arg.slice(0, arg.length), dups= [];\n    while(A.length){\n    \titm= A.shift();\n    \tif(A.indexOf(itm)!= -1){\n    \t\tdups[dups.length]= itm;\n    \t\twhile(A.indexOf(itm)!= -1){\n    \t\t\tA.splice(A.indexOf(itm), 1);\n    \t\t}\n    \t}\n    }\n    return dups;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<h3>Find unique values from 3 arrays (or more):</h3>\n\n<pre><code>Array.prototype.unique = function () {\n    var arr = this.sort(), i; // input must be sorted for this to work\n    for( i=arr.length; i--; )\n      arr[i] === arr[i-1] &amp;&amp; arr.splice(i,1); // remove duplicate item\n\n    return arr;\n}\n\nvar arr =  [1,2,2,3,3,4,5,6,2,3,7,8,5,9],\n    arr2 = [1,2,511,12,50],\n    arr3 = [22],\n    unique = arr.concat(arr2, arr3).unique();\n\nconsole.log(unique);  // [22, 50, 12, 511, 2, 1, 9, 5, 8, 7, 3, 6, 4]\n</code></pre>\n\n<h3>Just a polyfill for array indexOf for old browsers:</h3>\n\n<pre><code>if (!Array.prototype.indexOf){\n   Array.prototype.indexOf = function(elt /*, from*/){\n     var len = this.length &gt;&gt;&gt; 0;\n\n     var from = Number(arguments[1]) || 0;\n     from = (from &lt; 0) ? Math.ceil(from) : Math.floor(from);\n     if (from &lt; 0)\n        from += len;\n\n     for (; from &lt; len; from++){\n        if (from in this &amp;&amp; this[from] === elt)\n           return from;\n     }\n     return -1;\n  };\n}\n</code></pre>\n\n<h2>jQuery solution using \"inArray\":</h2>\n\n<pre><code>if( $.inArray(this[i], arr) == -1 )\n</code></pre>\n\n<p>instead of adding the 'Array.prototype.indexOf'</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>From Raphael Montanaro answer, it can improve to use with array/object item as follows.</p>\n\n<pre><code>function eliminateDuplicates(arr) {\n  var len = arr.length,\n      out = [],\n      obj = {};\n\n  for (var key, i=0; i &lt; len; i++) {\n    key = JSON.stringify(arr[i]);\n    obj[key] = (obj[key]) ? obj[key] + 1 : 1;\n  }\n  for (var key in obj) {\n    out.push(JSON.parse(key));\n  }\n  return [out, obj];\n}\n</code></pre>\n\n<p>Note: You need to use JSON library for browser that's not supported JSON.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's one without using a temp Array to store the non-duplicate ones:</p>\n\n<pre><code>// simple duplicate removal for non-object types\nArray.prototype.removeSimpleDupes = function() {\n    var i, cntr = 0, arr = this, len = arr.length;\n\n    var uniqueVal = function(val,n,len) { // remove duplicates\n        var dupe = false;\n            for (i = n; i &lt; len; i++) { \n                if (typeof arr[i]!==\"undefined\" &amp;&amp; val===arr[i]) { arr.splice(i,1); dupe = true; }\n            }\n        return (dupe) ? arr.length : len;\n    };\n\n    while (cntr &lt; len) {\n        len = uniqueVal(arr[cntr],cntr+1,len);\n        cntr++;\n    }\n\n    return arr;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I prefer the function way of doing this.</p>\n\n<pre><code>function removeDuplicates(links) {\n    return _.reduce(links, function(list, elem) { \n        if (list.indexOf(elem) == -1) {\n            list.push(elem);\n        }   \n        return list;\n    }, []);\n}\n</code></pre>\n\n<p>This uses underscore, but <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/Reduce\" rel=\"nofollow\">Array</a> has a <code>reduce</code> function, too </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"http://jsfiddle.net/vol7ron/gfJ28/\" rel=\"nofollow\">http://jsfiddle.net/vol7ron/gfJ28/</a></p>\n\n<pre><code>var arr  = ['hello','goodbye','foo','hello','foo','bar',1,2,3,4,5,6,7,8,9,0,1,2,3];\nvar hash = [];\n\n// build hash\nfor (var n=arr.length; n--; ){\n   if (typeof hash[arr[n]] === 'undefined') hash[arr[n]] = [];\n   hash[arr[n]].push(n);\n}\n\n\n// work with compiled hash (not necessary)\nvar duplicates = [];\nfor (var key in hash){\n    if (hash.hasOwnProperty(key) &amp;&amp; hash[key].length &gt; 1){\n        duplicates.push(key);\n    }\n}    \nalert(duplicates);\n</code></pre>\n\n<ol>\n<li><p>The result will be the <code>hash</code> array, which will contain both a unique set of values and the position of those values.  So if there are 2 or more positions, we can determine that the value has a duplicate.  Thus, every place <code>hash[&lt;value&gt;].length &gt; 1</code>, signifies a duplicate.</p></li>\n<li><p><code>hash['hello']</code> will return <code>[0,3]</code> because 'hello' was found in node 0 and 3 in <code>arr[]</code>.  </p>\n\n<p><em><strong>Note:</strong> the length of <code>[0,3]</code> is what's used to determine if it was a duplicate.</em></p></li>\n<li><p>Using <code>for(var key in hash){ if (hash.hasOwnProperty(key)){ alert(key); } }</code> will alert each unique value.</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var a = [324,3,32,5,52,2100,1,20,2,3,3,2,2,2,1,1,1].sort();\na.filter(function(v,i,o){return i&amp;&amp;v!==o[i-1]?v:0;});\n</code></pre>\n\n<p>or when added to the prototyp.chain of Array</p>\n\n<pre><code>//copy and paste: without error handling\nArray.prototype.unique = \n   function(){return this.sort().filter(function(v,i,o){return i&amp;&amp;v!==o[i-1]?v:0;});}\n</code></pre>\n\n<p>See here: <a href=\"https://gist.github.com/1305056\" rel=\"nofollow\">https://gist.github.com/1305056</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>UPDATED: The following uses an optimized combined strategy. It optimizes primitive lookups to benefit from hash O(1) lookup time (running <code>unique</code> on an array of primitives is O(n)). Object lookups are optimized by tagging objects with a unique id while iterating through so so identifying duplicate objects is also O(1) per item and O(n) for the whole list. The only exception is items that are frozen, but those are rare and a fallback is provided using an array and indexOf.</p>\n\n<pre><code>var unique = function(){\n  var hasOwn = {}.hasOwnProperty,\n      toString = {}.toString,\n      uids = {};\n\n  function uid(){\n    var key = Math.random().toString(36).slice(2);\n    return key in uids ? uid() : uids[key] = key;\n  }\n\n  function unique(array){\n    var strings = {}, numbers = {}, others = {},\n        tagged = [], failed = [],\n        count = 0, i = array.length,\n        item, type;\n\n    var id = uid();\n\n    while (i--) {\n      item = array[i];\n      type = typeof item;\n      if (item == null || type !== 'object' &amp;&amp; type !== 'function') {\n        // primitive\n        switch (type) {\n          case 'string': strings[item] = true; break;\n          case 'number': numbers[item] = true; break;\n          default: others[item] = item; break;\n        }\n      } else {\n        // object\n        if (!hasOwn.call(item, id)) {\n          try {\n            item[id] = true;\n            tagged[count++] = item;\n          } catch (e){\n            if (failed.indexOf(item) === -1)\n              failed[failed.length] = item;\n          }\n        }\n      }\n    }\n\n    // remove the tags\n    while (count--)\n      delete tagged[count][id];\n\n    tagged = tagged.concat(failed);\n    count = tagged.length;\n\n    // append primitives to results\n    for (i in strings)\n      if (hasOwn.call(strings, i))\n        tagged[count++] = i;\n\n    for (i in numbers)\n      if (hasOwn.call(numbers, i))\n        tagged[count++] = +i;\n\n    for (i in others)\n      if (hasOwn.call(others, i))\n        tagged[count++] = others[i];\n\n    return tagged;\n  }\n\n  return unique;\n}();\n</code></pre>\n\n<p>If you have ES6 Collections available, then there is a much simpler and significantly faster version. (shim for IE9+ and other browsers here: <a href=\"https://github.com/Benvie/ES6-Harmony-Collections-Shim\" rel=\"nofollow\">https://github.com/Benvie/ES6-Harmony-Collections-Shim</a>)</p>\n\n<pre><code>function unique(array){\n  var seen = new Set;\n  return array.filter(function(item){\n    if (!seen.has(item)) {\n      seen.add(item);\n      return true;\n    }\n  });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<pre><code>function remove_dups(arrayName){\n  var newArray = new Array();\n\n  label:for(var i=0; i&lt;arrayName.length; i++ ){  \n\n     for(var j=0; j&lt;newArray.length;j++ ){\n       if(newArray[j]==arrayName[i]){\n         continue label;\n       }\n     }\n\n     newArray[newArray.length] = arrayName[i];\n\n  }\n\n  return newArray;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In this post was useful for duplication check if u are using Jquery.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/4346547/how-to-find-the-duplicates-in-an-array-using-jquery\">How to find the duplicates in an array using jquery</a></p>\n\n<pre><code>var unique_values = {}; var list_of_values = []; $('input[name$=\"recordset\"]').     each(function(item) {          if ( ! unique_values[item.value] ) {             unique_values[item.value] = true;             list_of_values.push(item.value);         } else {             // We have duplicate values!         }     });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>ES5 only (i.e., it needs a filter() polyfill for IE8 and below):</p>\n\n<pre><code>var arrayToFilter = [ 4, 5, 5, 5, 2, 1, 3, 1, 1, 2, 1, 3 ];\n\narrayToFilter.\n    sort().\n    filter( function(me,i,arr){\n       return (i===0) || ( me !== arr[i-1] );\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>using underscore.js</p>\n\n<pre><code>function hasDuplicate(arr){\n    return (arr.length != _.uniq(arr).length);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>var input = ['a', 'b', 'a', 'c', 'c'],\n    duplicates = [],\n    i, j;\nfor (i = 0, j = input.length; i &lt; j; i++) {\n  if (duplicates.indexOf(input[i]) === -1 &amp;&amp; input.indexOf(input[i], i+1) !== -1) {\n    duplicates.push(input[i]);\n  }\n}\n\nconsole.log(duplicates);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is the one of methods to avoid duplicates into javascript array...and it supports for strings and numbers...</p>\n\n<pre><code> var unique = function(origArr) {\n    var newArray = [],\n        origLen = origArr.length,\n        found,\n        x = 0; y = 0;\n\n    for ( x = 0; x &lt; origLen; x++ ) {\n        found = undefined;\n        for ( y = 0; y &lt; newArray.length; y++ ) {\n            if ( origArr[x] === newArray[y] ) found = true;\n        }\n        if ( !found) newArray.push( origArr[x] );    \n    }\n   return newArray;\n}\n</code></pre>\n\n<p>check this <a href=\"http://jsfiddle.net/V9RBE/4/\" rel=\"nofollow\">fiddle</a>..</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I am trying to improve the answer from @swilliams, this will return an array without duplicates.</p>\n\n<pre><code>// arrays for testing\nvar arr = [9, 9, 111, 2, 3, 4, 4, 5, 7];\n\n// ascending order\nvar sorted_arr = arr.sort(function(a,b){return a-b;}); \n\nvar arr_length = arr.length;\nvar results = [];\nif(arr_length){\n    if(arr_length == 1){\n        results = arr;\n    }else{\n        for (var i = 0; i &lt; arr.length - 1; i++) {\n            if (sorted_arr[i + 1] != sorted_arr[i]) {\n                results.push(sorted_arr[i]);\n            }\n            // for last element\n            if (i == arr.length - 2){\n                results.push(sorted_arr[i+1]);\n            }\n        }\n    }\n}\n\nalert(results);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yet another way by using underscore. Numbers is the source array and dupes has possible duplicate values.</p>\n\n<pre><code>var itemcounts = _.countBy(numbers, function (n) { return n; });\nvar dupes = _.reduce(itemcounts, function (memo, item, idx) {\n    if (item &gt; 1)\n        memo.push(idx);\n    return memo;\n}, []);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a very light and easy way:</p>\n\n<pre><code>var codes = dc_1.split(',');\nvar i = codes.length;\nwhile (i--) {\n  if (codes.indexOf(codes[i]) != i) {\n    codes.splice(i,1);\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I think the below is the easiest and fastest O(n) way to accomplish exactly what you asked:</p>\n\n<pre><code>function getDuplicates( arr ) {\n  var i, value;\n  var all = {};\n  var duplicates = [];\n\n  for( i=0; i&lt;arr.length; i++ ) {\n    value = arr[i];\n    if( all[value] ) {\n      duplicates.push( value );\n      all[value] = false;\n    } else if( typeof all[value] == \"undefined\" ) {\n      all[value] = true;\n    }\n  }\n\n  return duplicates;\n}\n</code></pre>\n\n<p>Or for ES5 or greater:</p>\n\n<pre><code>function getDuplicates( arr ) {\n  var all = {};\n  return arr.reduce(function( duplicates, value ) {\n    if( all[value] ) {\n      duplicates.push(value);\n      all[value] = false;\n    } else if( typeof all[value] == \"undefined\" ) {\n      all[value] = true;\n    }\n    return duplicates;\n  }, []);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is one implemented using sort() and JSON.stringify()</p>\n\n<p><a href=\"https://gist.github.com/korczis/7598657\" rel=\"nofollow\">https://gist.github.com/korczis/7598657</a></p>\n\n<pre><code>function removeDuplicates(vals) {\n    var res = [];\n    var tmp = vals.sort();\n\n    for (var i = 0; i &lt; tmp.length; i++) {\n        res.push(tmp[i]);\n                    while (JSON.stringify(tmp[i]) == JSON.stringify(tmp[i + 1])) {\n            i++;\n        }\n    }\n\n    return res;\n}\nconsole.log(removeDuplicates([1,2,3,4,5,4,3,3,2,1,]));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Surprised no one posted <code>this solution</code>.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=utf-8 /&gt;\n&lt;title&gt;\n&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;script&gt;\n       var list = [100,33,45,54,9,12,80,100];\n       var newObj = {};\n       var newArr = [];\n        for(var i=0; i&lt;list.length; i++){\n          newObj[list[i]] = i;               \n        }\n        for(var j in newObj){\n            newArr.push(j);  \n        }\n       console.log(newArr);\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Modifying @RaphaelMontanaro's solution, borrowing from @Nosredna's blog, here is what you could do if you just want to identify the duplicate elements from your array.</p>\n\n<pre><code>function identifyDuplicatesFromArray(arr) {\n        var i;\n        var len = arr.length;\n        var obj = {};\n        var duplicates = [];\n\n        for (i = 0; i &lt; len; i++) {\n\n            if (!obj[arr[i]]) {\n\n                obj[arr[i]] = {};\n\n            }\n\n            else\n            {\n                duplicates.push(arr[i]);\n            }\n\n        }\n        return duplicates;\n    }\n</code></pre>\n\n<p>Thanks for the elegant solution, @Nosredna!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I did not like most answers. </p>\n\n<p>Why? Too complicated, too much code, inefficient code and many do not answer the question, which is to find the duplicates (and not to give an array without the duplicates). </p>\n\n<p>Next function returns all duplicates:</p>\n\n<pre><code>function GetDuplicates(arr) {\n  var i, out=[], obj={};\n  for (i=0; i &lt; arr.length; i++) \n    obj[arr[i]] == undefined ? obj[arr[i]] ++ : out.push(arr[i]);\n  return out;\n}  \n</code></pre>\n\n<p>Because most of the time it is of no use to return ALL duplicates, but just to tell which duplicate values exist. In that case you return an array with unique duplicates ;-)</p>\n\n<pre><code>function GetDuplicates(arr) {\n  var i, out=[], obj={};\n  for (i=0; i &lt; arr.length; i++)\n    obj[arr[i]] == undefined ? obj[arr[i]] ++ : out.push(arr[i]);\n  return GetUnique(out);\n}\n\nfunction GetUnique(arr) {\n  return $.grep(arr, function(elem, index) {\n    return index == $.inArray(elem, arr);\n  });\n}\n</code></pre>\n\n<p>Maybe somebody else thinks the same.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is my answer from the duplicate thread (!):</p>\n\n<p>Got tired of seeing all bad examples with for-loops or jQuery. Javascript has the perfect tools for this nowadays: sort, map and reduce. </p>\n\n<h2>Uniq reduce while keeping existing order</h2>\n\n<pre><code>var names = [\"Mike\",\"Matt\",\"Nancy\",\"Adam\",\"Jenny\",\"Nancy\",\"Carl\"];\n\nvar uniq = names.reduce(function(a,b){\n    if (a.indexOf(b) &lt; 0 ) a.push(b);\n    return a;\n  },[]);\n\nconsole.log(uniq, names) // [ 'Mike', 'Matt', 'Nancy', 'Adam', 'Jenny', 'Carl' ]\n\n// one liner\nreturn names.reduce(function(a,b){if(a.indexOf(b)&lt;0)a.push(b);return a;},[]);\n</code></pre>\n\n<h2>Faster uniq with sorting</h2>\n\n<p>There are probably faster ways but this one is pretty decent.</p>\n\n<pre><code>var uniq = names.slice() // slice makes copy of array before sorting it\n  .sort(function(a,b){\n    return a - b;\n  })\n  .reduce(function(a,b){\n    if (a.slice(-1)[0] !== b) a.push(b); // slice(-1)[0] means last item in array without removing it (like .pop())\n    return a;\n  },[]); // this empty array becomes the starting value for a\n\n// one liner\nreturn names.slice().sort(function(a,b){return a - b}).reduce(function(a,b){if (a.slice(-1)[0] !== b) a.push(b);return a;},[]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>This is probably one of the fastest way to remove permanently the duplicates from an array</strong>\n10x times faster than the most functions here.&amp; 78x faster in safari</p>\n\n<pre><code>function toUnique(a,b,c){//array,placeholder,placeholder\n b=a.length;\n while(c=--b)while(c--)a[b]!==a[c]||a.splice(c,1)\n}\nvar array=[1,2,3,4,5,6,7,8,9,0,1,2,1];\ntoUnique(array);\nconsole.log(array);\n</code></pre>\n\n<ol>\n<li>Test: <a href=\"http://jsperf.com/wgu\" rel=\"nofollow\">http://jsperf.com/wgu</a></li>\n<li>Demo: <a href=\"http://jsfiddle.net/46S7g/\" rel=\"nofollow\">http://jsfiddle.net/46S7g/</a></li>\n<li>More: <a href=\"http://stackoverflow.com/a/25082874/2450730\">http://stackoverflow.com/a/25082874/2450730</a></li>\n</ol>\n\n<p>if you can't read the code above ask, read a javascript book or here are some explainations about shorter code. <a href=\"http://stackoverflow.com/a/21353032/2450730\">http://stackoverflow.com/a/21353032/2450730</a></p>\n\n<p><strong>EDIT</strong>\nAs stated in the comments this function does return an array with uniques, the question however asks to find the duplicates. in that case a simple modification to this function allows to push the duplicaes into an array, then using using the previous function <code>toUnique</code> removes the duplicates of the duplicates. </p>\n\n<pre><code>function theDuplicates(a,b,c,d){//array,placeholder,placeholder\n b=a.length,d=[];\n while(c=--b)while(c--)a[b]!==a[c]||d.push(a.splice(c,1))\n}\nvar array=[1,2,3,4,5,6,7,8,9,0,1,2,1];\n\ntoUnique(theDuplicates(array));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var arr = [4,5,1,1,2,3,4,4,7,5,2,6,10,9];\r\nvar sorted_arr = arr.sort();\r\nvar len = arr.length;\r\nvar results = [];\r\nfor (var i = 0; i &lt; len; i++) {\r\n  if (sorted_arr[i + 1] !== sorted_arr[i]) {\r\n    results.push(sorted_arr[i]);\r\n  }\r\n}\r\ndocument.write(results);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I need to check a JavaScript array to see if there are any duplicate values. What's the easiest way to do this? I just need to find what the duplicated values are - I don't actually need their indexes or how many times they are duplicated.</p>\n\n<p>I know I can loop through the array and check all the other values for a match, but it seems like there should be an easier way. Any ideas? Thanks!</p>\n\n<h3>Related: <a href=\"http://stackoverflow.com/questions/9229645/remove-duplicates-from-javascript-array\">Remove Duplicates from JavaScript Array</a></h3>\n",
            "last_activity_date": 1421668762,
            "question_id": 840781,
            "score": 132,
            "tags": [
                "javascript",
                "arrays"
            ],
            "title": "Easiest way to find duplicate values in a JavaScript array"
        },
        {
            "answer_count": 0,
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/4539253/what-is-console-log\">What is console.log?</a>  </p>\n</blockquote>\n\n\n\n<p>I see this line in a lot of jQuery scripts out there. I assume it's used for debug.</p>\n\n<p>Where can I see this log?</p>\n",
            "last_activity_date": 1401292492,
            "question_id": 4743730,
            "score": 218,
            "tags": [
                "javascript"
            ],
            "title": "What is console.log and how do I use it?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p><a href=\"http://docs.angularjs.org/api/ngRoute.%24routeProvider\">$routeProvider</a> <a href=\"http://docs.angularjs.org/api/ngRoute.%24routeProvider\">resolve</a> property allows delaying of route change until data is loaded.</p>\n\n<p>First define a route with <code>resolve</code> attribute like this.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('phonecat', ['phonecatFilters', 'phonecatServices', 'phonecatDirectives']).\n  config(['$routeProvider', function($routeProvider) {\n    $routeProvider.\n      when('/phones', {\n        templateUrl: 'partials/phone-list.html', \n        controller: PhoneListCtrl, \n        resolve: PhoneListCtrl.resolve}).\n      when('/phones/:phoneId', {\n        templateUrl: 'partials/phone-detail.html', \n        controller: PhoneDetailCtrl, \n        resolve: PhoneDetailCtrl.resolve}).\n      otherwise({redirectTo: '/phones'});\n}]);\n</code></pre>\n\n<p>notice that the <code>resolve</code> property is defined on route.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function PhoneListCtrl($scope, phones) {\n  $scope.phones = phones;\n  $scope.orderProp = 'age';\n}\n\nPhoneListCtrl.resolve = {\n  phones: function(Phone, $q) {\n    // see: https://groups.google.com/forum/?fromgroups=#!topic/angular/DGf7yyD4Oc4\n    var deferred = $q.defer();\n    Phone.query(function(successData) {\n            deferred.resolve(successData); \n    }, function(errorData) {\n            deferred.reject(); // you could optionally pass error data here\n    });\n    return deferred.promise;\n  },\n  delay: function($q, $defer) {\n    var delay = $q.defer();\n    $defer(delay.resolve, 1000);\n    return delay.promise;\n  }\n}\n</code></pre>\n\n<p>Notice that the controller definition contains a resolve object which declares things wich should be available to the controller constructor. Here the <code>phones</code> is injected into the controller and it is defined in the <code>resolve</code> property.</p>\n\n<p>The <code>resolve.phones</code> function is responsible for returning a promise. All of the promises are collected and the route change is delayed until after all of the promises are resolved.</p>\n\n<p>Working demo: <a href=\"http://mhevery.github.com/angular-phonecat/app/#/phones\">http://mhevery.github.com/angular-phonecat/app/#/phones</a>\nSource: <a href=\"https://github.com/mhevery/angular-phonecat/commit/ba33d3ec2d01b70eb5d3d531619bf90153496831\">https://github.com/mhevery/angular-phonecat/commit/ba33d3ec2d01b70eb5d3d531619bf90153496831</a></p>\n",
                    "is_accepted": false,
                    "score": 278
                },
                {
                    "body": "<p>Delaying showing the route is sure to lead to an asynchronous tangle... why not simply track the loading status of your main entity and use that in the view. For example in your controller you might use both the success and error callbacks on ngResource:</p>\n\n<pre><code>$scope.httpStatus = 0; // in progress\n$scope.projects = $resource.query('/projects', function() {\n    $scope.httpStatus = 200;\n  }, function(response) {\n    $scope.httpStatus = response.status;\n  });\n</code></pre>\n\n<p>Then in the view you could do whatever:</p>\n\n<pre><code>&lt;div ng-show=\"httpStatus == 0\"&gt;\n    Loading\n&lt;/div&gt;\n&lt;div ng-show=\"httpStatus == 200\"&gt;\n    Real stuff\n    &lt;div ng-repeat=\"project in projects\"&gt;\n         ...\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;div ng-show=\"httpStatus &gt;= 400\"&gt;\n    Error, not found, etc. Could distinguish 4xx not found from \n    5xx server error even.\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I worked from Misko's code above and this is what I've done with it. This is a more current solution since <code>$defer</code> has been changed to <code>$timeout</code>. Substituting <code>$timeout</code> however will wait for the timeout period (in Misko's code, 1 second), then return the data hoping it's resolved in time. With this way, it returns asap.</p>\n\n<pre><code>function PhoneListCtrl($scope, phones) {\n  $scope.phones = phones;\n  $scope.orderProp = 'age';\n}\n\nPhoneListCtrl.resolve = {\n\n  phones: function($q, Phone) {\n    var deferred = $q.defer();\n\n    Phone.query(function(phones) {\n        deferred.resolve(phones);\n    });\n\n    return deferred.promise;\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Here's a minimal working example which works for Angular 1.0.2</p>\n\n<p>Template:</p>\n\n<pre><code>&lt;script type=\"text/ng-template\" id=\"/editor-tpl.html\"&gt;\n    Editor Template {{datasets}}\n&lt;/script&gt;\n\n&lt;div ng-view&gt;\n\n&lt;/div&gt;\n</code></pre>\n\n<p>JavaScript:</p>\n\n<pre><code>function MyCtrl($scope, datasets) {    \n    $scope.datasets = datasets;\n}\n\nMyCtrl.resolve = {\n    datasets : function($q, $http) {\n        var deferred = $q.defer();\n\n        $http({method: 'GET', url: '/someUrl'})\n            .success(function(data) {\n                deferred.resolve(data)\n            })\n            .error(function(data){\n                //actually you'd want deffered.reject(data) here\n                //but to show what would happen on success..\n                deferred.resolve(\"error value\");\n            });\n\n        return deferred.promise;\n    }\n};\n\nvar myApp = angular.module('myApp', [], function($routeProvider) {\n    $routeProvider.when('/', {\n        templateUrl: '/editor-tpl.html',\n        controller: MyCtrl,\n        resolve: MyCtrl.resolve\n    });\n});\u200b\n\u200b\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/dTJ9N/3/\">http://jsfiddle.net/dTJ9N/3/</a></p>\n\n<p><strong>Streamlined version:</strong></p>\n\n<p>Since $http() already returns a promise (aka deferred), we actually don't need to create our own. So we can simplify MyCtrl. resolve to:</p>\n\n<pre><code>MyCtrl.resolve = {\n    datasets : function($q, $http) {\n        return $http({\n            method: 'GET', \n            url: 'http://fiddle.jshell.net/'\n        });\n    }\n};\n</code></pre>\n\n<p>The result of $http() contains <em>data</em>, <em>status</em>, <em>headers</em> and <em>config</em> objects, so we need to change the body of MyCtrl to:</p>\n\n<pre><code>$scope.datasets = datasets.data;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/dTJ9N/5/\">http://jsfiddle.net/dTJ9N/5/</a></p>\n",
                    "is_accepted": false,
                    "score": 42
                },
                {
                    "body": "<p>I like darkporter's idea because it will be easy for a dev team new to AngularJS to understand and worked straight away.</p>\n\n<p>I created this adaptation which uses 2 divs, one for loader bar and another for actual content displayed after data is loaded. Error handling would be done elsewhere.</p>\n\n<p>Add a 'ready' flag to $scope:</p>\n\n<pre><code>$http({method: 'GET', url: '...'}).\n    success(function(data, status, headers, config) {\n        $scope.dataForView = data;      \n        $scope.ready = true;  // &lt;-- set true after loaded\n    })\n});\n</code></pre>\n\n<p>In html view:</p>\n\n<pre><code>&lt;div ng-show=\"!ready\"&gt;\n\n    &lt;!-- Show loading graphic, e.g. Twitter Boostrap progress bar --&gt;\n    &lt;div class=\"progress progress-striped active\"&gt;\n        &lt;div class=\"bar\" style=\"width: 100%;\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n&lt;/div&gt;\n\n&lt;div ng-show=\"ready\"&gt;\n\n    &lt;!-- Real content goes here and will appear after loading --&gt;\n\n&lt;/div&gt;\n</code></pre>\n\n<p>See also: <a href=\"http://twitter.github.com/bootstrap/components.html#progress\" rel=\"nofollow\">Boostrap progress bar docs</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I see some people asking how to do this using the angular.controller method with minification friendly dependency injection. Since I just got this working I felt obliged to come back and help. Here's my solution (adopted from the original question and Misko's answer):</p>\n\n<pre><code>angular.module('phonecat', ['phonecatFilters', 'phonecatServices', 'phonecatDirectives']).\n  config(['$routeProvider', function($routeProvider) {\n    $routeProvider.\n      when('/phones', {\n        templateUrl: 'partials/phone-list.html', \n        controller: PhoneListCtrl, \n        resolve: { \n            phones: [\"Phone\", \"$q\", function(Phone, $q) {\n                var deferred = $q.defer();\n                Phone.query(function(successData) {\n                  deferred.resolve(successData); \n                }, function(errorData) {\n                  deferred.reject(); // you could optionally pass error data here\n                });\n                return deferred.promise;\n             ]\n            },\n            delay: [\"$q\",\"$defer\", function($q, $defer) {\n               var delay = $q.defer();\n               $defer(delay.resolve, 1000);\n               return delay.promise;\n              }\n            ]\n        },\n\n        }).\n      when('/phones/:phoneId', {\n        templateUrl: 'partials/phone-detail.html', \n        controller: PhoneDetailCtrl, \n        resolve: PhoneDetailCtrl.resolve}).\n      otherwise({redirectTo: '/phones'});\n}]);\n\nangular.controller(\"PhoneListCtrl\", [ \"$scope\", \"phones\", ($scope, phones) {\n  $scope.phones = phones;\n  $scope.orderProp = 'age';\n}]);\n</code></pre>\n\n<p>Since this code is derived from the question/most popular answer it is untested, but it should send you in the right direction if you already understand how to make minification friendly angular code. The one part that my own code didn't requires was an injection of \"Phone\" into the resolve function for 'phones', nor did I use any 'delay' object at all.</p>\n\n<p>I also recommend this youtube video <a href=\"http://www.youtube.com/watch?v=P6KITGRQujQ&amp;list=UUKW92i7iQFuNILqQOUOCrFw&amp;index=4&amp;feature=plcp\">http://www.youtube.com/watch?v=P6KITGRQujQ&amp;list=UUKW92i7iQFuNILqQOUOCrFw&amp;index=4&amp;feature=plcp</a> , which helped me quite a bit</p>\n\n<p>Should it interest you I've decided to also paste my own code (Written in coffeescript) so you can see how I got it working.</p>\n\n<p>FYI, in advance I use a generic controller that helps me do CRUD on several models:</p>\n\n<pre><code>appModule.config ['$routeProvider', ($routeProvider) -&gt;\n  genericControllers = [\"boards\",\"teachers\",\"classrooms\",\"students\"]\n  for controllerName in genericControllers\n    $routeProvider\n      .when \"/#{controllerName}/\",\n        action: 'confirmLogin'\n        controller: 'GenericController'\n        controllerName: controllerName\n        templateUrl: \"/static/templates/#{controllerName}.html\"\n        resolve:\n          items : [\"$q\", \"$route\", \"$http\", ($q, $route, $http) -&gt;\n             deferred = $q.defer()\n             controllerName = $route.current.controllerName\n             $http(\n               method: \"GET\"\n               url: \"/api/#{controllerName}/\"\n             )\n             .success (response) -&gt;\n               deferred.resolve(response.payload)\n             .error (response) -&gt;\n               deferred.reject(response.message)\n\n             return deferred.promise\n          ]\n\n  $routeProvider\n    .otherwise\n      redirectTo: '/'\n      action: 'checkStatus'\n]\n\nappModule.controller \"GenericController\", [\"$scope\", \"$route\", \"$http\", \"$cookies\", \"items\", ($scope, $route, $http, $cookies, items) -&gt;\n\n  $scope.items = items\n      #etc ....\n    ]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p><a href=\"https://github.com/vojtajina/angular.js/commit/05772e15fbecfdc63d4977e2e8839d8b95d6a92d\">This commit</a>, which is part of version 1.1.5 and above, exposes the <code>$promise</code> object of <code>$resource</code>. Versions of ngResource including this commit allow resolving resources like this:</p>\n\n<p><strong>$routeProvider</strong></p>\n\n<pre><code>resolve: {\n    data: function(Resource) {\n        return Resource.get().$promise;\n    }\n}\n</code></pre>\n\n<p><strong>controller</strong></p>\n\n<pre><code>app.controller('ResourceCtrl', ['$scope', 'data', function($scope, data) {\n\n    $scope.data = data;\n\n}]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<h2>Using AngularJS 1.1.5</h2>\n\n<p>Updating the 'phones' function in Justen's answer using <strong>AngularJS 1.1.5</strong> syntax.</p>\n\n<p>Original:</p>\n\n<pre><code>phones: function($q, Phone) {\n    var deferred = $q.defer();\n\n    Phone.query(function(phones) {\n        deferred.resolve(phones);\n    });\n\n    return deferred.promise;\n}\n</code></pre>\n\n<p>Updated:</p>\n\n<pre><code>phones: function(Phone) {\n    return Phone.query().$promise;\n}\n</code></pre>\n\n<p>Much shorter thanks to the Angular team and contributors. :)</p>\n\n<p>This is also the answer of Maximilian Hoffmann. Apparently that commit made it into 1.1.5.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This snippet is <em>dependency injection</em> friendly (I even use it in combination of <strong>ngmin</strong> and <strong>uglify</strong>) and it's a more elegant <em>domain driven</em> based solution.</p>\n\n<p>The example below registers a <strong>Phone</strong> <em>resource</em> and a <em>constant</em> <strong>phoneRoutes</strong>, which contains all your routing information for that (phone) domain. Something I didn't like in the provided answer was the location of the <em>resolve</em> logic -- the <em>main</em> module should not <em>know</em> anything or be bothered about the way the resource arguments are provided to the controller. This way the logic stays in the same domain.</p>\n\n<p><em>Note: if you're using <a href=\"https://github.com/btford/grunt-ngmin\">ngmin</a> (and if you're not: you should) you only have to write the resolve functions with the DI array convention.</em></p>\n\n<pre><code>angular.module('myApp').factory('Phone',function ($resource) {\n  return $resource('/api/phone/:id', {id: '@id'});\n}).constant('phoneRoutes', {\n    '/phone': {\n      templateUrl: 'app/phone/index.tmpl.html',\n      controller: 'PhoneIndexController'\n    },\n    '/phone/create': {\n      templateUrl: 'app/phone/edit.tmpl.html',\n      controller: 'PhoneEditController',\n      resolve: {\n        phone: ['$route', 'Phone', function ($route, Phone) {\n          return new Phone();\n        }]\n      }\n    },\n    '/phone/edit/:id': {\n      templateUrl: 'app/phone/edit.tmpl.html',\n      controller: 'PhoneEditController',\n      resolve: {\n        form: ['$route', 'Phone', function ($route, Phone) {\n          return Phone.get({ id: $route.current.params.id }).$promise;\n        }]\n      }\n    }\n  });\n</code></pre>\n\n<p>The next piece is injecting the routing data when the module is in the configure state and applying it to the <strong>$routeProvider</strong>.</p>\n\n<pre><code>angular.module('myApp').config(function ($routeProvider, \n                                         phoneRoutes, \n                                         /* ... otherRoutes ... */) {\n\n  $routeProvider.when('/', { templateUrl: 'app/main/index.tmpl.html' });\n\n  // Loop through all paths provided by the injected route data.\n\n  angular.forEach(phoneRoutes, function(routeData, path) {\n    $routeProvider.when(path, routeData);\n  });\n\n  $routeProvider.otherwise({ redirectTo: '/' });\n\n});\n</code></pre>\n\n<p>Testing the route configuration with this setup is also pretty easy:</p>\n\n<pre><code>describe('phoneRoutes', function() {\n\n  it('should match route configuration', function() {\n\n    module('myApp');\n\n    // Mock the Phone resource\n    function PhoneMock() {}\n    PhoneMock.get = function() { return {}; };\n\n    module(function($provide) {\n      $provide.value('Phone', FormMock);\n    });\n\n    inject(function($route, $location, $rootScope, phoneRoutes) {\n      angular.forEach(phoneRoutes, function (routeData, path) {\n\n        $location.path(path);\n        $rootScope.$digest();\n\n        expect($route.current.templateUrl).toBe(routeData.templateUrl);\n        expect($route.current.controller).toBe(routeData.controller);\n      });\n    });\n  });\n});\n</code></pre>\n\n<p>You can see it in full glory in <a href=\"https://github.com/McNull/angular-febworms\">my latest (upcoming) experiment</a>.\nAlthough this method works fine for me, I really wonder why the $injector isn't delaying construction of <em>anything</em> when it detects injection of <em>anything</em> that is a <strong>promise</strong> object; it would make things soooOOOOOooOOOOO much easier.</p>\n\n<p><em>Edit: used Angular v1.2(rc2)</em></p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>One possible solution might be to use the ng-cloak directive with the element where we are using the models e.g.</p>\n\n<pre><code>&lt;div ng-cloak=\"\"&gt;\n  Value in  myModel is: {{myModel}}\n&lt;/div&gt;\n</code></pre>\n\n<p>I think this one takes least effort.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use <a href=\"https://docs.angularjs.org/api/auto/service/$provide#constant\" rel=\"nofollow\">$routeProvider resolve</a> property to delay route change until data is loaded.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('app', ['ngRoute']).\n  config(['$routeProvider', function($routeProvider, EntitiesCtrlResolve, EntityCtrlResolve) {\n    $routeProvider.\n      when('/entities', {\n        templateUrl: 'entities.html', \n        controller: 'EntitiesCtrl', \n        resolve: EntitiesCtrlResolve\n      }).\n      when('/entity/:entityId', {\n        templateUrl: 'entity.html', \n        controller: 'EntityCtrl', \n        resolve: EntityCtrlResolve\n      }).\n      otherwise({redirectTo: '/entities'});\n}]);\n</code></pre>\n\n<p>Notice that the <code>resolve</code> property is defined on route.</p>\n\n<p><code>EntitiesCtrlResolve</code> and <code>EntityCtrlResolve</code> is <a href=\"https://docs.angularjs.org/api/auto/service/$provide#constant\" rel=\"nofollow\">constant</a> objects defined in same file as <code>EntitiesCtrl</code> and <code>EntityCtrl</code> controllers.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// EntitiesCtrl.js\n\nangular.module('app').constant('EntitiesCtrlResolve', {\n  Entities: function(EntitiesService) {\n    return EntitiesService.getAll();\n  }\n});\n\nangular.module('app').controller('EntitiesCtrl', function(Entities) {\n  $scope.entities = Entities;\n\n  // some code..\n});\n\n// EntityCtrl.js\n\nangular.module('app').constant('EntityCtrlResolve', {\n  Entity: function($route, EntitiesService) {\n    return EntitiesService.getById($route.current.params.projectId);\n  }\n});\n\nangular.module('app').controller('EntityCtrl', function(Entity) {\n  $scope.entity = Entity;\n\n  // some code..\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I liked above answers and learned a lot from them but there is something that is missing in most of the above answers.</p>\n\n<p>I was stuck in a similar scenario where I was resolving url with some data that is fetched in the first request from the server. <strong>Problem I faced was what if the promise is <code>rejected</code>.</strong></p>\n\n<p>I was using a custom provider which used to return a <code>Promise</code> which was resolved by the <code>resolve</code> of <code>$routeProvider</code> at the time of config phase.</p>\n\n<p>What I want to stress here is the concept of <code>when</code> it does something like this.</p>\n\n<p>It sees the url in url bar and then respective <code>when</code> block in called controller and view is referred so far so good.</p>\n\n<p>Lets say I have following config phase code.</p>\n\n<pre><code>App.when('/', {\n   templateUrl: '/assets/campaigns/index.html',\n   controller: 'CampaignListCtr',\n   resolve : {\n      Auth : function(){\n         return AuthServiceProvider.auth('campaign');\n      }\n   }\n})\n// Default route\n.otherwise({\n   redirectTo: '/segments'\n});\n</code></pre>\n\n<p>On root url in browser first block of run get called otherwise <code>otherwise</code> gets called.</p>\n\n<p>Let's imagine a scenario I hit rootUrl in address bar <code>AuthServicePrivider.auth()</code> function gets called.</p>\n\n<p>Lets say Promise returned is in <strong>reject</strong> state  <strong><em>what then???</em></strong></p>\n\n<p>Nothing gets rendered at all.</p>\n\n<p><code>Otherwise</code> block will not get executed as it is for any url which is not defined in the config block and is unknown to angularJs config phase.</p>\n\n<p>We will have to handle the event that gets fired when this promise is not resolved. On failure <code>$routeChangeErorr</code> gets fired on <code>$rootScope</code>.</p>\n\n<p>It can be captured as shown in code below.</p>\n\n<pre><code>$rootScope.$on('$routeChangeError', function(event, current, previous, rejection){\n    // Use params in redirection logic.\n    // event is the routeChangeEvent\n    // current is the current url\n    // previous is the previous url\n    $location.path($rootScope.rootPath);\n});\n</code></pre>\n\n<p>IMO It's generally a good idea to put event tracking code in run block of application. This code run just after the config phase of the application.</p>\n\n<pre><code>App.run(['$routeParams', '$rootScope', '$location', function($routeParams, $rootScope, $location){\n   $rootScope.rootPath = \"my custom path\";\n   // Event to listen to all the routeChangeErrors raised\n   // by the resolve in config part of application\n   $rootScope.$on('$routeChangeError', function(event, current, previous, rejection){\n       // I am redirecting to rootPath I have set above.\n       $location.path($rootScope.rootPath);\n   });\n}]);\n</code></pre>\n\n<p>This way we can handle promise failure at the time of config phase.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am wondering if there is a way (similar to Gmail) for AngularJS to <strong>delay showing a new route until after each model and its data has been fetched</strong> using its respective services.</p>\n\n<p>For example, if there were a <code>ProjectsController</code> that listed all Projects and <code>project_index.html</code> which was the template that showed these Projects, <code>Project.query()</code> would be fetched completely before showing the new page.</p>\n\n<p>Until then, the old page would still continue to show (for example, if I were browsing another page and then decided to see this Project index).</p>\n",
            "last_activity_date": 1421059174,
            "question_id": 11972026,
            "score": 207,
            "tags": [
                "javascript",
                "angularjs",
                "angularjs-routing"
            ],
            "title": "Delaying AngularJS route change until model loaded to prevent flicker"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<pre><code>data.substring(0, input.length) === input\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 458
                },
                {
                    "body": "<p>You can add this function to the <code>String prototype</code>:</p>\n\n<pre><code>if (typeof String.prototype.startsWith != 'function') {\n  // see below for better implementation!\n  String.prototype.startsWith = function (str){\n    return this.indexOf(str) == 0;\n  };\n}\n</code></pre>\n\n<p>Then you can use it directly on string values:</p>\n\n<pre><code>\"Hello World!\".startsWith(\"He\"); // true\n\nvar data = \"Hello world\";\nvar input = 'He';\ndata.startsWith(input); // true\n</code></pre>\n\n<p><strong>Edit:</strong> Note that I'm checking if the function exists before defining it, that's because in the future, the language might have this strings extras methods defined as built-in functions, and native implementations are always faster and preferred, see the <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony%3astring_extras\"><em>ECMAScript Harmony String Extras</em></a> proposal.</p>\n\n<p><strong>Edit:</strong> As others noted, <code>indexOf</code> will be inefficient for large strings, its complexity is <code>O(N)</code>. For a constant-time solution (<code>O(1)</code>), you can use either, <code>substring</code> as <a href=\"http://stackoverflow.com/questions/646628/javascript-startswith/646631#646631\">@cobbal</a> suggested, or <code>String.prototype.slice</code>, which behaves similarly (note that I don't recommend using the <code>substr</code>, because it's inconsistent between implementations (most notably on JScript) ):</p>\n\n<pre><code>if (typeof String.prototype.startsWith != 'function') {\n  String.prototype.startsWith = function (str){\n    return this.slice(0, str.length) == str;\n  };\n}\n</code></pre>\n\n<p>The difference between <code>substring</code> and <code>slice</code> is basically that <code>slice</code> can take negative indexes, to manipulate characters from the end of the string, for example you could write the counterpart <code>endsWith</code> method by:</p>\n\n<pre><code>if (typeof String.prototype.endsWith != 'function') {\n  String.prototype.endsWith = function (str){\n    return this.slice(-str.length) == str;\n  };\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1030
                },
                {
                    "body": "<pre><code>var str = 'he';\n\nvar data = 'hello world';\n\nString.prototype.startsWith = function(s)\n{\n   if( this.indexOf(s) == 0 ) return true;\n   return false;\n}\n\nif( data.startsWith(str) ) return true;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is a minor improvement to CMS's solution:</p>\n\n<pre><code>if(!String.prototype.startsWith){\n    String.prototype.startsWith = function (str) {\n        return !this.indexOf(str);\n    }\n}\n\n\"Hello World!\".startsWith(\"He\"); // true\n\n var data = \"Hello world\";\n var input = 'He';\n data.startsWith(input); // true\n</code></pre>\n\n<p>Checking whether the function already exists in case a future browser implements it in native code or if it is implemented by another library. For example, the Prototype Library implements this function already.</p>\n\n<p>Using ! is slightly faster and more concise than \" === 0\" though not as readable.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Here's another alternative:</p>\n\n<pre><code>data.lastIndexOf(str, 0) === 0\n</code></pre>\n\n<ul>\n<li>It doesn't check the entire string.</li>\n<li>It doesn't create a new temporary string and then immediately discard it.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 690
                },
                {
                    "body": "<p>Without the use of a helper function:</p>\n\n<pre><code>(/^He/).test('Hello world')\n</code></pre>\n\n<p>Edit: and due to popular demand and as discussed in the comments, here is the way to do it using a dynamic string:</p>\n\n<pre><code>new RegExp('^' + input).test(data)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 109
                },
                {
                    "body": "<p>Also check out <a href=\"https://github.com/edtsech/underscore.string\">underscore.string.js</a>. It comes with a bunch of useful string testing and manipulation methods, including a <code>startsWith</code> method. From the docs:</p>\n\n<blockquote>\n  <p><strong>startsWith</strong> <code>_.startsWith(string, starts)</code></p>\n  \n  <p>This method checks whether <code>string</code> starts with <code>starts</code>.</p>\n\n<pre><code>_(\"image.gif\").startsWith(\"image\")\n=&gt; true\n</code></pre>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<pre><code>var str = 'hol';\nvar data = 'hola mundo';\nif (data.length &gt;= str.length &amp;&amp; data.substring(0, str.length) == str)\n    return true;\nelse\n    return false;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\" rel=\"nofollow\"><code>startsWith</code></a> is in the ES 6 drafts and Gecko already has native support. Here's a shim for unsupporting browsers: <a href=\"https://github.com/paulmillr/es6-shim\" rel=\"nofollow\">https://github.com/paulmillr/es6-shim</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>If you are working with <code>startsWith()</code> and <code>endsWith()</code> then you have to be careful about leading spaces....here is the complete example....</p>\n\n<pre><code>var Str1 = \" Your String Value Here.!! \"; // Starts With &amp; Ends With leading Spaces\nvar Str2 = Str1.trim();   // Removes All Spaces by using Trim() function Something like this --&gt; \"Your String Value Here.!!\"\n\nif (Str2.startsWith(\"Your\")) // returns TRUE\nif (Str2.endsWith(\"Here.!!\")) // returns TRUE\n\nif (Str1.startsWith(\"Your\")) // returns FALSE due to the leading spaces\u2026\nif (Str1.endsWith(\"Here.!!\")) // returns FALSE due to trailing spaces\u2026\n</code></pre>\n\n<p>Hope it will helps you, cheers. !!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can also return all members of an array that start with a string by creating your own prototype / extension to the the array prototype, aka</p>\n\n<pre><code>Array.prototype.mySearch = function (target) {\n    if (typeof String.prototype.startsWith != 'function') {\n        String.prototype.startsWith = function (str){\n        return this.slice(0, str.length) == str;\n      };\n    }\n    var retValues = [];\n    for (var i = 0; i &lt; this.length; i++) {\n        if (this[i].startsWith(target)) { retValues.push(this[i]); }\n    }\n    return retValues;\n};\n</code></pre>\n\n<p>And to use it:</p>\n\n<pre><code>var myArray = ['Hello', 'Helium', 'Hideout', 'Hamster'];\nvar myResult = myArray.mySearch('Hel');\n// result -&gt; Hello, Helium\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Simplest solution:</p>\n\n<p>data.indexOf(input) == 0</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It's quite an old question, but here is a version that doesn't create another string for comparison-</p>\n\n<pre><code>data.indexOf(input) === 0\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I just learned about this string library:</p>\n\n<p><a href=\"http://stringjs.com/\" rel=\"nofollow\">http://stringjs.com/</a></p>\n\n<p>Include the js file and then use the <code>S</code> variable like this:</p>\n\n<pre><code>S('hi there').endsWith('hi there')\n</code></pre>\n\n<p>It can also be used in NodeJS by installing it:</p>\n\n<pre><code>npm install string\n</code></pre>\n\n<p>Then requiring it as the <code>S</code> variable:</p>\n\n<pre><code>var S = require('string');\n</code></pre>\n\n<p>The web page also has links to alternate string libraries, if this one doesn't take your fancy.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I recently asked myself the same question.<br>\nThere are multiple possible solutions, here are 3 valid ones:</p>\n\n<ul>\n<li><code>s.indexOf(starter) === 0</code></li>\n<li><code>s.substr(0,starter.length) === starter</code></li>\n<li><code>s.lastIndexOf(starter, 0) === 0</code> (added after seeing Mark Byers's <a href=\"http://stackoverflow.com/a/4579228/2279260\">answer</a>)</li>\n<li><p>using a loop:</p>\n\n<pre><code>function startsWith(s,starter) {\n  for (var i = 0,cur_c; i &lt; starter.length; i++) {\n    cur_c = starter[i];\n    if (s[i] !== starter[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n</code></pre></li>\n</ul>\n\n<p>I haven't come across the last solution which makes uses of a loop.<br>\nSurprisingly this solution outperforms the first 3 by a significant margin.<br>\nHere is the jsperf test I performed to reach this conclusion: <a href=\"http://jsperf.com/startswith2/2\" rel=\"nofollow\">http://jsperf.com/startswith2/2</a></p>\n\n<p>Peace</p>\n\n<p>ps: ecmascript 6 (harmony) introduces a native <code>startsWith</code> method for strings.<br>\nJust think how much time would have been saved if they had thought of including this much needed method in the initial version itself.</p>\n\n<p><strong>Update</strong></p>\n\n<p>As Steve pointed out (the first comment on this answer), the above custom function will throw an error if the given <em>prefix</em> is shorter than the whole string. He has fixed that and added a loop optimization which can be viewed at <a href=\"http://jsperf.com/startswith2/4\" rel=\"nofollow\">http://jsperf.com/startswith2/4</a>.</p>\n\n<p>Note that there are 2 loop optimizations which Steve included, the first of the two showed better performance, thus I will post that code below:</p>\n\n<pre><code>function startsWith2(str, prefix) {\n  if (str.length &lt; prefix.length)\n    return false;\n  for (var i = prefix.length - 1; (i &gt;= 0) &amp;&amp; (str[i] === prefix[i]); --i)\n    continue;\n  return i &lt; 0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The best performant solution is to stop using library calls and just recognize that you're working with two arrays. A hand-rolled implementation is both short and also faster than every other solution I've seen here.</p>\n\n<pre><code>function startsWith2(str, prefix) {\n    if (str.length &lt; prefix.length)\n        return false;\n    for (var i = prefix.length - 1; (i &gt;= 0) &amp;&amp; (str[i] === prefix[i]); --i)\n        continue;\n    return i &lt; 0;\n}\n</code></pre>\n\n<p>For performance comparisons (success and failure), see <a href=\"http://jsperf.com/js-startswith/35\" rel=\"nofollow\">http://jsperf.com/js-startswith/35</a>. (Make sure you check for later versions that may have trumped mine.)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Based on the answers here, this is the version I am now using, as it seems to give the best performance based on JSPerf testing (and is functionally complete as far as I can tell).</p>\n\n<pre><code>if(typeof String.prototype.startsWith != 'function'){\n    String.prototype.startsWith = function(str){\n        if(str == null) return false;\n        var i = str.length;\n        if(this.length &lt; i) return false;\n        for(--i; (i &gt;= 0) &amp;&amp; (this[i] === str[i]); --i) continue;\n        return i &lt; 0;\n    }\n}\n</code></pre>\n\n<p>This was based on startsWith2 from here: <a href=\"http://jsperf.com/startswith2/6\" rel=\"nofollow\">http://jsperf.com/startswith2/6</a>. I added a small tweak for a tiny performance improvement, and have since also added a check for the comparison string being null or undefined, and converted it to add to the String prototype using the technique in CMS's answer.</p>\n\n<p>Note that this implementation doesn't support the \"position\" parameter which is mentioned in this <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith\" rel=\"nofollow\">Mozilla Developer Network</a> page, but that doesn't seem to be part of the ECMAScript proposal anyway.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>function strStartsWith(str, prefix) {\n    return str.indexOf(prefix) === 0;\n}\n</code></pre>\n\n<p>By monkey-patching JavaScript's builtin classes:</p>\n\n<pre><code>String.prototype.startsWith = function(prefix) {\n    return this.indexOf(prefix) === 0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How would I write the equivalent of C#'s <a href=\"http://msdn.microsoft.com/en-us/library/baketfxw.aspx\"><code>String.StartsWith</code></a> in Javascript?</p>\n\n<pre><code>var data = 'hello world';\nvar input = 'he';\n\n//data.startsWith(input) == true\n</code></pre>\n",
            "last_activity_date": 1424849195,
            "question_id": 646628,
            "score": 819,
            "tags": [
                "javascript",
                "string",
                "startswith"
            ],
            "title": "How to check if a string &quot;StartsWith&quot; another string?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>I would strongly suspect this is not possible, because it would be an incredible security problem if it were. For example, I could make a page which looked like a bank login page, and make the the URL in the address bar look <em>just like the real bank</em>!</p>\n\n<p>Perhaps if you explain why you want to do this, folks might be able to suggest alternative approaches...</p>\n\n<p><em>[Edit in 2011: Since I wrote this answer in 2008, more info has come to light regarding an <a href=\"https://developer.mozilla.org/en/DOM/Manipulating_the_browser_history\">HTML5 technique</a> that allows the URL to be modified as long as it is from the same origin]</em></p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>If you want it to work in browsers that don't support <code>history.pushState</code> and <code>history.popState</code> yet, the \"old\" way is to set the fragment identifier, which won't cause a page reload.</p>\n\n<p>The basic idea is to set the <code>window.location.hash</code> property to a value that contains whatever state information you need, then either use the <a href=\"https://developer.mozilla.org/en/DOM/window.onhashchange\">window.onhashchange event</a>, or for older browsers that don't support <code>onhashchange</code> (IE &lt; 8, Firefox &lt; 3.6), periodically check to see if the hash has changed (using <code>setInterval</code> for example) and update the page. You will also need to check the hash value on page load to set up the initial content.</p>\n\n<p>If you're using jQuery there's a <a href=\"http://benalman.com/projects/jquery-hashchange-plugin/\">hashchange plugin</a> that will use whichever method the browser supports. I'm sure there are plugins for other libraries as well.</p>\n\n<p>One thing to be careful of is colliding with ids on the page, because the browser will scroll to any element with a matching id.</p>\n",
                    "is_accepted": true,
                    "score": 161
                },
                {
                    "body": "<p>Browser security settings prevent people from modifying the displayed url directly. You could imagine the phishing vulnerabilities that would cause.</p>\n\n<p>Only reliable way to change the url without changing pages is to use an internal link or hash. e.g.: <a href=\"http://site.com/page.html\" rel=\"nofollow\">http://site.com/page.html</a> becomes <a href=\"http://site.com/page.html#item1\" rel=\"nofollow\">http://site.com/page.html#item1</a> . This technique is often used in hijax(AJAX + preserve history). </p>\n\n<p>When doing this I'll often just use links for the actions with the hash as the href, then add click events with jquery that use the requested hash to determine and delegate the action. </p>\n\n<p>I hope that sets you on the right path. </p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>window.location.href contains the current URL. You can read from it, you can append to it, and you can replace it, which may cause a page reload.</p>\n\n<p>If, as it sounds like, you want to record javascript state in the URL so it can be bookmarked, without reloading the page, append it to the current URL after a # and have a piece of javascript triggered by the onload event parse the current URL to see if it contains saved state.</p>\n\n<p>If you use a ? instead of a #, you will force a reload of the page, but since you will parse the saved state on load this may not actually be a problem; and this will make the forward and back buttons work correctly as well.</p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>There is a Yahoo YUI component (Browser History Manager) which can handle this: <a href=\"http://developer.yahoo.com/yui/history/\" rel=\"nofollow\">http://developer.yahoo.com/yui/history/</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I was wondering if it will posible as long as the parent path in the page is same, only something new is appended to it.</p>\n\n<p>So like let's say the user is at the page: <code>http://domain.com/site/page.html</code>\nThen the browser can let me do <code>location.append = new.html</code>\nand the page becomes: <code>http://domain.com/site/page.htmlnew.html</code> and the browser does not change it. </p>\n\n<p>Or just allow the person to change get parameter, so let's <code>location.get = me=1&amp;page=1</code>.</p>\n\n<p>So original page becomes <code>http://domain.com/site/page.html?me=1&amp;page=1</code> and it does not refresh. </p>\n\n<p>The problem with # is that the data is not cached (at least I don't think so) when hash is changed. So it is like each time a new page is being loaded, whereas back- and forward buttons in a non-<a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\" rel=\"nofollow\">Ajax</a> page are able to cache data and do not spend time on re-loading the data.</p>\n\n<p>From what I saw, the Yahoo history thing already loads all of the data at once. It does not seem to be doing any Ajax requests. So when a <code>div</code> is used to handle different method overtime, that data is not stored for each history state.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>With HTML 5, use the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/history.html\"><code>history.pushState</code> function</a>. As an example:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar stateObj = { foo: \"bar\" };\nfunction change_my_url()\n{\n   history.pushState(stateObj, \"page 2\", \"bar.html\");\n}\nvar link = document.getElementById('click');\nlink.addEventListener('click', change_my_url, false);\n&lt;/script&gt;\n</code></pre>\n\n<p>and a href:</p>\n\n<pre><code>&lt;a href=\"#\" id='click'&gt;Click to change url to bar.html&lt;/a&gt;\n</code></pre>\n\n<hr>\n\n<p>If you want to change the URL without adding an entry to the back button list, use <code>history.replaceState</code> instead.</p>\n",
                    "is_accepted": false,
                    "score": 82
                },
                {
                    "body": "<p>Facebook's photo gallery does this using a #hash in the URL. Here are some example URLs:</p>\n\n<p>Before clicking 'next':</p>\n\n<pre><code>/photo.php?fbid=496429237507&amp;set=a.218088072507.133423.681812507&amp;pid=5887027&amp;id=681812507\n</code></pre>\n\n<p>After clicking 'next':</p>\n\n<pre><code>/photo.php?fbid=496429237507&amp;set=a.218088072507.133423.681812507&amp;pid=5887027&amp;id=681812507#!/photo.php?fbid=496435457507&amp;set=a.218088072507.133423.681812507&amp;pid=5887085&amp;id=681812507\n</code></pre>\n\n<p>Note the hash-bang (#!) immediately followed by the new URL.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There is location.hash='text' in <a href=\"http://probablyinteractive.com/url-hunter\" rel=\"nofollow\">http://probablyinteractive.com/url-hunter</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There's a jquery plugin  <a href=\"http://www.asual.com/jquery/address/\" rel=\"nofollow\">http://www.asual.com/jquery/address/</a></p>\n\n<p>I think this is what you need.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><em>jQuery</em> has a great plugin for changing browsers' URL, called <strong><a href=\"https://github.com/salvan13/jquery-pusher\" rel=\"nofollow\">jQuery-pusher</a></strong>.</p>\n\n<p>JavaScript <code>pushState</code> and jQuery could be used together, like:</p>\n\n<p><code>history.pushState(null, null, $(this).attr('href'));</code></p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>$('a').click(function (event) {\n\n  // Prevent default click action\n  event.preventDefault();     \n\n  // Detect if pushState is available\n  if(history.pushState) {\n    history.pushState(null, null, $(this).attr('href'));\n  }\n  return false;\n});\n</code></pre>\n\n<p><br></p>\n\n<p>Using only <em>JavaScript</em> <code>history.pushState()</code>, which changes the referrer, that gets used in the HTTP header for XMLHttpRequest objects created after you change the state.</p>\n\n<p><strong>Example:</strong></p>\n\n<p><code>window.history.pushState(\"object\", \"Your New Title\", \"/new-url\");</code></p>\n\n<p><strong>The pushState() method:</strong></p>\n\n<p><code>pushState()</code> takes three parameters: a state object, a title (which is currently ignored), and (optionally) a URL. Let's examine each of these three parameters in more detail:</p>\n\n<ol>\n<li><p><em>state object</em> \u2014 The state object is a JavaScript object which is associated with the new history entry created by <code>pushState()</code>. Whenever the user navigates to the new state, a popstate event is fired, and the state property of the event contains a copy of the history entry's state object.</p>\n\n<p>The state object can be anything that can be serialized. Because Firefox saves state objects to the user's disk so they can be restored after the user restarts her browser, we impose a size limit of 640k characters on the serialized representation of a state object. If you pass a state object whose serialized representation is larger than this to <code>pushState()</code>, the method will throw an exception. If you need more space than this, you're encouraged to use sessionStorage and/or localStorage.</p></li>\n<li><p><em>title</em> \u2014 Firefox currently ignores this parameter, although it may use it in the future. Passing the empty string here should be safe against future changes to the method. Alternatively, you could pass a short title for the state to which you're moving.</p></li>\n<li><p><em>URL</em> \u2014 The new history entry's URL is given by this parameter. Note that the browser won't attempt to load this URL after a call to <code>pushState()</code>, but it might attempt to load the URL later, for instance after the user restarts her browser. The new URL does not need to be absolute; if it's relative, it's resolved relative to the current URL. The new URL must be of the same origin as the current URL; otherwise, <code>pushState()</code> will throw an exception. This parameter is optional; if it isn't specified, it's set to the document's current URL.</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>my code is:</p>\n\n<pre><code>//change address bar\nfunction setLocation(curLoc){\n    try {\n        history.pushState(null, null, curLoc);\n        return false;\n    } catch(e) {}\n        location.hash = '#' + curLoc;\n}\n</code></pre>\n\n<p>and action:</p>\n\n<pre><code>setLocation('http://site.com/your-url-here');\n</code></pre>\n\n<p>and example</p>\n\n<pre><code>$(document).ready(function(){\n    $('nav li a').live('click', function(){\n        if($(this).hasClass('active')) {\n\n        } else {\n            setLocation($(this).attr('href'));\n        }\n            return false;\n    });\n});\n</code></pre>\n\n<p>That all :)</p>\n\n<p>Using at: <a href=\"http://nm-styling.com/\" rel=\"nofollow\">http://nm-styling.com/</a> (it's a test version of the site, but you can try it)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I've had success with:</p>\n\n<pre><code>location.hash=\"myValue\";\n</code></pre>\n\n<p>It just adds <code>#myValue</code> to the current URL. If you need to trigger an event on page Load, you can use the same <code>location.hash</code> to check for the relevant value. Just remember to remove the <code>#</code> from the value returned by <code>location.hash</code> e.g.</p>\n\n<pre><code>var articleId = window.location.hash.replace(\"#\",\"\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How would I have a <a href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a> action that may have some effects on the current page but would also change the URL in the browser so if the user hits reload or bookmark the new URL is used?  </p>\n\n<p>It would also be nice if the back button would reload the original URL.</p>\n\n<p>I am trying to record JavaScript state in the URL.</p>\n",
            "last_activity_date": 1426142784,
            "question_id": 136458,
            "score": 229,
            "tags": [
                "javascript",
                "url",
                "fragment-identifier",
                "hashchange"
            ],
            "title": "Change the URL in the browser without loading the new page using JavaScript"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Most browsers can decompress gzip on the fly. That might be a better option than a javascript implementation.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I guess a generic client-side JavaScript compression implementation would be a very expensive operation in terms of processing time as opposed to transfer time of a few more HTTP packets with uncompressed payload.</p>\n\n<p>Have you done any testing that would give you an idea how much time there is to save? I mean, bandwidth savings can't be what you're after, or can it?</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use a 1 pixel per 1 pixel Java applet embedded in the page and use that for compression.</p>\n\n<p>It's not JavaScript and the clients will need a Java runtime but it will do what you need.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Edit</strong> There appears to be a better LZW solution that handles Unicode strings correctly at <a href=\"http://pieroxy.net/blog/pages/lz-string/index.html\">http://pieroxy.net/blog/pages/lz-string/index.html</a> (Thanks to pieroxy in the comments).</p>\n\n<hr>\n\n<p>I don't know of any gzip implementations, but the <a href=\"http://jsolait.net/\">jsolait library</a> (the site seems to have gone away) has functions for LZW compression/decompression. The code is covered under the <a href=\"http://www.gnu.org/licenses/lgpl.txt\">LGPL</a>.</p>\n\n<pre><code>// LZW-compress a string\nfunction lzw_encode(s) {\n    var dict = {};\n    var data = (s + \"\").split(\"\");\n    var out = [];\n    var currChar;\n    var phrase = data[0];\n    var code = 256;\n    for (var i=1; i&lt;data.length; i++) {\n        currChar=data[i];\n        if (dict[phrase + currChar] != null) {\n            phrase += currChar;\n        }\n        else {\n            out.push(phrase.length &gt; 1 ? dict[phrase] : phrase.charCodeAt(0));\n            dict[phrase + currChar] = code;\n            code++;\n            phrase=currChar;\n        }\n    }\n    out.push(phrase.length &gt; 1 ? dict[phrase] : phrase.charCodeAt(0));\n    for (var i=0; i&lt;out.length; i++) {\n        out[i] = String.fromCharCode(out[i]);\n    }\n    return out.join(\"\");\n}\n\n// Decompress an LZW-encoded string\nfunction lzw_decode(s) {\n    var dict = {};\n    var data = (s + \"\").split(\"\");\n    var currChar = data[0];\n    var oldPhrase = currChar;\n    var out = [currChar];\n    var code = 256;\n    var phrase;\n    for (var i=1; i&lt;data.length; i++) {\n        var currCode = data[i].charCodeAt(0);\n        if (currCode &lt; 256) {\n            phrase = data[i];\n        }\n        else {\n           phrase = dict[currCode] ? dict[currCode] : (oldPhrase + currChar);\n        }\n        out.push(phrase);\n        currChar = phrase.charAt(0);\n        dict[code] = oldPhrase + currChar;\n        code++;\n        oldPhrase = phrase;\n    }\n    return out.join(\"\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 101
                },
                {
                    "body": "<p>Here are some other compression algorithms implemented in Javascript:</p>\n\n<ul>\n<li><a href=\"http://rumkin.com/tools/compression/compress%5Fhuff.php\">Huffman</a></li>\n<li><a href=\"http://github.com/olle/lz77-kit/blob/master/src/main/js/lz77.js\">LZ77</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I did not test, but there's a javascript implementation of ZIP:</p>\n\n<p><a href=\"http://jszip.stuartk.co.uk/\">http://jszip.stuartk.co.uk/</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I ported an implementation of LZMA from a GWT module into standalone JavaScript.  It's called <a href=\"http://nmrugg.github.com/LZMA-JS/\">LZMA-JS</a>.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>I had another problem, I did not want to encode data in gzip but to <strong>decode gzipped data</strong>. \nI am running javascript code outside of the browser so I need to decode it using <em>pure</em> javascript.</p>\n\n<p>It took me some time but i found that in the <strong>JSXGraph</strong> library there is a way to read gzipped data.</p>\n\n<p>Here is where I found the library: <a href=\"http://jsxgraph.uni-bayreuth.de/wp/2009/09/29/jsxcompressor-zlib-compressed-javascript-code/\">http://jsxgraph.uni-bayreuth.de/wp/2009/09/29/jsxcompressor-zlib-compressed-javascript-code/</a>\nThere is even a standalone utility that can do that, <strong>JSXCompressor</strong>, and the code is LGPL licencied.</p>\n\n<p>Just include the jsxcompressor.js file in your project and then you will be able to read a base 64 encoded gzipped data:</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;/head&gt;\n&lt;title&gt;Test gzip decompression page&lt;/title&gt;\n&lt;script src=\"jsxcompressor.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;script&gt;\n    document.write(JXG.decompress('&lt;?php \n        echo base64_encode(gzencode(\"Try not. Do, or do not. There is no try.\")); \n    ?&gt;'));\n&lt;/script&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I understand it is not what you wanted but I still reply here because I suspect it will help some people.</p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>We just released pako <a href=\"https://github.com/nodeca/pako\" rel=\"nofollow\">https://github.com/nodeca/pako</a> , port of zlib to javascript. I think that's now the fastest js implementation of deflate / inflate / gzip / ungzip. Also, it has democratic MIT licence. Pako supports all zlib options and it's results are binary equal.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I'm writing a Web application that needs to store JSON data in a small, fixed-size server-side cache via AJAX (think: <a href=\"http://code.google.com/apis/opensocial/articles/persistence-0.8.html#restrictions-quotas\">Opensocial quotas</a>). I do not have control over the server.</p>\n\n<p>I need to reduce the size of the stored data to stay within a server-side quota, and was hoping to be able to gzip the stringified JSON in the browser before sending it up to the server.</p>\n\n<p>However, I cannot find much in the way of JavaScript implementations of Gzip. Any suggestions for how I can compress the data on the client side before sending it up?</p>\n",
            "last_activity_date": 1413281415,
            "question_id": 294297,
            "score": 148,
            "tags": [
                "javascript",
                "ajax",
                "compression",
                "gzip"
            ],
            "title": "JavaScript implementation of Gzip"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Perhaps you could handle OnSubmit and set a flag that you later check in your OnBeforeUnload handler.  </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Maybe just unbind the <code>beforeunload</code> event handler within the form's <code>submit</code> event handler:</p>\n\n<pre><code>jQuery('form').submit(function() {\n    jQuery(window).unbind(\"beforeunload\");\n    ...\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>The <code>beforeunload</code> event fires whenever the user leaves your page for any reason.</p>\n\n<p>For example, it will be fired if the user submits a form, clicks a link, closes the window (or tab), or goes to a new page using the address bar, search box, or a bookmark.</p>\n\n<p>You could exclude form submissions and hyperlinks (except from other frames) with the following code:</p>\n\n<pre><code>var inFormOrLink;\n$('a').on('click', function() { inFormOrLink = true; });\n$('form').on('submit', function() { inFormOrLink = true; });\n\n$(window).on(\"beforeunload\", function() { \n    return inFormOrLink ? \"Do you really want to close?\" : null; \n})\n</code></pre>\n\n<p>For jQuery versions older than 1.7, try this:</p>\n\n<pre><code>var inFormOrLink;\n$('a').live('click', function() { inFormOrLink = true; });\n$('form').bind('submit', function() { inFormOrLink = true; });\n\n$(window).bind(\"beforeunload\", function() { \n    return inFormOrLink ? \"Do you really want to close?\" : null; \n})\n</code></pre>\n\n<p>The <code>live</code> method doesn't work with the <code>submit</code> event, so if you add a new form, you'll need to bind the handler to it as well.</p>\n\n<p>Note that if a different event handler cancels the submit or navigation, you will lose the confirmation prompt if the window is actually closed later.  You could fix that by recording the time in the <code>submit</code> and <code>click</code> events, and checking if the <code>beforeunload</code> happens more than a couple of seconds later.</p>\n",
                    "is_accepted": true,
                    "score": 126
                },
                {
                    "body": "<p>If your form submission takes them to another page (as I assume it does, hence the triggering of <code>beforeunload</code>), you could try to change your form submission to an ajax call. This way, they won't leave your page when they submit the form and you can use your <code>beforeunload</code> binding code as you wish.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Following worked for me;</p>\n\n<pre><code> $(window).unload(function(event) {\n    if(event.clientY &lt; 0) {\n        //do whatever you want when closing the window..\n    }\n });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>My Issue: The 'onbeforeunload' event would only be triggered if there were odd number of submits(clicks). I had a combination of solutions from similar threads in SO to have my solution work. well my code will speak.</p>\n\n<pre><code>&lt;!--The definition of event and initializing the trigger flag---&gt;\n\n\n$(document).ready(function() {\nupdatefgallowPrompt(true);\nwindow.onbeforeunload = WarnUser;   \n}\n\nfunction WarnUser() {\nvar allowPrompt = getfgallowPrompt();\n    if(allowPrompt) {\n    saveIndexedDataAlert();\n    return null;\n    } else {\n        updatefgallowPrompt(true);\n        event.stopPropagation\n    }\n}\n\n&lt;!--The method responsible for deciding weather the unload event is triggered from submit or not---&gt;\nfunction saveIndexedDataAlert() {\n    var allowPrompt = getfgallowPrompt();\n    var lenIndexedDocs = parseInt($('#sortable3 &gt; li').size()) + parseInt($('#sortable3 &gt; ul').size());\n\n    if(allowPrompt &amp;&amp; $.trim(lenIndexedDocs) &gt; 0) {\n        event.returnValue = \"Your message\";\n    } else {\n        event.returnValue = \"   \";\n        updatefgallowPrompt(true);\n    }\n}\n\n&lt;!---Function responsible to reset the trigger flag----&gt;\n$(document).click(function(event) {  \n$('a').live('click', function() { updatefgallowPrompt(false); });\n });\n\n&lt;!--getter and setter for the flag----&gt;\nfunction updatefgallowPrompt (allowPrompt){ //exit msg dfds\n    $('body').data('allowPrompt', allowPrompt); \n}   \n\nfunction getfgallowPrompt(){        \n    return $('body').data('allowPrompt');   \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I used Slaks answer but that wasn't working as is,  since the onbeforeunload returnValue is parsed as a string and then displayed in the confirmations box of the browser. So the value true was displayed, like \"true\". </p>\n\n<p>Just using return worked. \nHere is my code</p>\n\n<pre><code>var preventUnloadPrompt;\nvar messageBeforeUnload = \"my message here - Are you sure you want to leave this page?\";\n//var redirectAfterPrompt = \"http://www.google.co.in\";\n$('a').live('click', function() { preventUnloadPrompt = true; });\n$('form').live('submit', function() { preventUnloadPrompt = true; });\n$(window).bind(\"beforeunload\", function(e) { \n    var rval;\n    if(preventUnloadPrompt) {\n        return;\n    } else {\n        //location.replace(redirectAfterPrompt);\n        return messageBeforeUnload;\n    }\n    return rval;\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>For a cross-browser solution (tested in Chrome 21, IE9, FF15), consider using the following code, which is a slightly tweaked version of Slaks' code:</p>\n\n<pre><code>var inFormOrLink;\n$('a').live('click', function() { inFormOrLink = true; });\n$('form').bind('submit', function() { inFormOrLink = true; });\n\n$(window).bind('beforeunload', function(eventObject) {\n    var returnValue = undefined;\n    if (! inFormOrLink) {\n        returnValue = \"Do you really want to close?\";\n    }\n    eventObject.returnValue = returnValue;\n    return returnValue;\n}); \n</code></pre>\n\n<p>Note that since Firefox 4, the message \"Do you really want to close?\" is not displayed.  FF just displays a generic message.  See note in <a href=\"https://developer.mozilla.org/en-US/docs/DOM/window.onbeforeunload\">https://developer.mozilla.org/en-US/docs/DOM/window.onbeforeunload</a></p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>For a solution that worked well with third party controls like Telerik (ex.: RadComboBox) and DevExpress that use the Anchor tags for various reasons, consider using the following code, which is a slightly tweaked version of desm's code with a better selector for self targeting anchor tags:</p>\n\n<pre><code>var inFormOrLink;\n$('a[href]:not([target]), a[href][target=_self]').live('click', function() { inFormOrLink = true; });\n$('form').bind('submit', function() { inFormOrLink = true; });\n\n$(window).bind('beforeunload', function(eventObject) {\n    var returnValue = undefined;\n    if (! inFormOrLink) {\n        returnValue = \"Do you really want to close?\";\n    }\n    eventObject.returnValue = returnValue;\n    return returnValue;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As of jQuery 1.7, the .live() method is deprecated. Use .on() to attach event handlers. Users of older versions of jQuery should use .delegate() in preference to .live()</p>\n\n<pre><code>$(window).bind(\"beforeunload\", function() {\n    return true || confirm(\"Do you really want to close?\"); \n}); \n</code></pre>\n\n<p>on complete or link</p>\n\n<pre><code>$(window).unbind();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just verify...</p>\n\n<pre><code>function wopen_close(){\n  var w = window.open($url, '_blank', 'width=600, height=400, scrollbars=no, status=no, resizable=no, screenx=0, screeny=0');\n  w.onunload = function(){\n    if (window.closed) {\n       alert(\"window closed\");\n    }else{ \n       alert(\"just refreshed\");\n    }\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>window.onbeforeunload = function () {\n    return \"Do you really want to close?\";\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I want to capture the browser window/tab close event.\nI have tried the following with jQuery: </p>\n\n<pre><code>jQuery(window).bind(\n    \"beforeunload\", \n    function() { \n        return confirm(\"Do you really want to close?\") \n    }\n)\n</code></pre>\n\n<p>But it works on form submission as well, which is not what I want. I want an event that triggers only when the user closes the window.</p>\n",
            "last_activity_date": 1425294952,
            "question_id": 1631959,
            "score": 77,
            "tags": [
                "javascript",
                "jquery",
                "events",
                "browser"
            ],
            "title": "How to capture the browser window close event?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>No. Browser-side javascript doesn't have permission to write to the client machine without a lot of security options having to be disabled</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>You can't do this in any cross-browser way. IE does have methods to enable \"trusted\" applications to use ActiveX objects to read/write files, but that is it unfortunately.</p>\n\n<p>If you are looking to save user information, you will most likely need to use cookies.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You cannot do file i/o on the client side using javascript as that would be a security risk. You'd either have to get them to download and run an exe, or if the file is on your server, use AJAX and a server-side language such as PHP to do the i/o on serverside</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are using JScript (Microsoft's Javascript) to do local scripting using WSH (NOT in a browser!) you can use <code>Scripting.FileSystemObject</code> to access the file system.</p>\n\n<p>I think you can access that same object in IE if you turn a lot of security settings off, but that would be a very, very bad idea.</p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/6kxy1a51%28VS.85%29.aspx\">MSDN here</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>here's the mozilla proposal</p>\n\n<p><a href=\"http://www-archive.mozilla.org/js/js-file-object.html\" rel=\"nofollow\">http://www-archive.mozilla.org/js/js-file-object.html</a></p>\n\n<p>this is implemented with a compilation switch in spidermonkey, and also in adobe's extendscript. Additionally (I think) you get the File object in firefox extensions.</p>\n\n<p>rhino has a (rather rudementary) readFile function\n<a href=\"https://developer.mozilla.org/en/Rhino_Shell\" rel=\"nofollow\">https://developer.mozilla.org/en/Rhino_Shell</a></p>\n\n<p>for more complex file operations in rhino, you can use java.io.File methods.</p>\n\n<p>you won't get any of this stuff in the browser though. For similar functionality in a browser you can use the SQL database functions from HTML5, clientside persistence, cookies, and flash storage objects.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>You'll have to turn to Flash, Java or Silverlight.  In the case of Silverlight, you'll be looking at <a href=\"http://msdn.microsoft.com/en-us/library/3ak841sy%28VS.95%29.aspx\" rel=\"nofollow\">Isolated Storage</a>.  That will get you write to files in your own playground on the users disk.  It won't let you write outside of your playground though.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For completeness, the OP does not state he is looking to do this in a browser (if he is, as has been stated, it is generally not possible)</p>\n\n<p>However javascript per se does allow this; it can be done with server side javascript.</p>\n\n<p><strike>See this <a href=\"http://docs.sun.com/source/816-6411-10/misc.htm#1017481\">documentation on the Javascript File class</a></strike></p>\n\n<p><strong>Edit</strong>: That link was to the Sun docs that now have been moved by Oracle.</p>\n\n<p>To keep up with the times here's the node.js documentation for the FileSystem class: <a href=\"http://nodejs.org/docs/latest/api/fs.html\">http://nodejs.org/docs/latest/api/fs.html</a></p>\n\n<p><strong>Edit(2)</strong>: You can read files client side now with HTML5: <a href=\"http://www.html5rocks.com/en/tutorials/file/dndfiles/\">http://www.html5rocks.com/en/tutorials/file/dndfiles/</a></p>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>To create file try</p>\n\n<pre><code>function makefile(){\n  var fso;\n  var thefile;\n\n    fso = new ActiveXObject(\"Scripting.FileSystemObject\");\n    thefile=fso.CreateTextFile(\"C:\\\\tmp\\\\MyFile.txt\",true);\n\n    thefile.close()\n    }\n</code></pre>\n\n<p>Create your directory in the C drive because windows has security against writing from web\ne.g create folder named \"tmp\" in C drive.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The future is here! The proposals are closer to completion, no more ActiveX or flash or java.\nNow we can use:</p>\n\n<p><a href=\"http://slides.html5rocks.com/#drag-in\">Native Drag&amp;Drop File Access</a></p>\n\n<p><a href=\"http://slides.html5rocks.com/#filewriter\">File System APIs</a></p>\n\n<p>You could use the Drag/Drop to get the file into the browser, or a simple upload control. Once the user has selected a file, you can read it w/ Javascript: <a href=\"http://www.html5rocks.com/en/tutorials/file/dndfiles/\">http://www.html5rocks.com/en/tutorials/file/dndfiles/</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p><strong>This Javascript function presents a complete \"Save As\" Dialog box to the user who runs this through the browser.  The user presses OK and the file is saved.</strong></p>\n\n<p>Edit: The following code only works with IE Browser since Firefox and Chrome have considered this code a security problem and has blocked it from working.</p>\n\n<pre><code>// content is the data you'll write to file&lt;br/&gt;\n// filename is the filename&lt;br/&gt;\n// what I did is use iFrame as a buffer, fill it up with text\nfunction save_content_to_file(content, filename)\n{\n    var dlg = false;\n    with(document){\n     ir=createElement('iframe');\n     ir.id='ifr';\n     ir.location='about.blank';\n     ir.style.display='none';\n     body.appendChild(ir);\n      with(getElementById('ifr').contentWindow.document){\n           open(\"text/plain\", \"replace\");\n           charset = \"utf-8\";\n           write(content);\n           close();\n           document.charset = \"utf-8\";\n           dlg = execCommand('SaveAs', false, filename+'.txt');\n       }\n       body.removeChild(ir);\n     }\n    return dlg;\n}\n</code></pre>\n\n<p>Invoke the function:</p>\n\n<pre><code>save_content_to_file(\"Hello\", \"C:\\\\test\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>For Firefox:</p>\n\n<pre><code>var file = Components.classes[\"@mozilla.org/file/local;1\"].\n       createInstance(Components.interfaces.nsILocalFile);\nfile.initWithPath(\"/home\");\n</code></pre>\n\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Code_snippets/File_I_O\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Code_snippets/File_I_O</a></p>\n\n<p>For others, check out the <a href=\"http://www.tiddlywiki.com/\" rel=\"nofollow\">TiddlyWiki</a> app to see how it does it.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>Can anybody give the sample code to read and write the file using JavaScript?</p>\n",
            "last_activity_date": 1426057039,
            "question_id": 585234,
            "score": 94,
            "tags": [
                "javascript",
                "filesystems"
            ],
            "title": "How to read and write into file using JavaScript"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>It's not possible in (ECMA|Java)Script to my knowledge. I'm not sure why one would want to rely on this PHP-esque behaviour, it just introduces confusion.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>You might be able to put something together using <code>eval()</code>, but I can't imagine this being a good idea.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are desperate to do this you can either try using eval():</p>\n\n<pre><code>var data = \"testVariable\";\neval(\"var temp_\" + data + \"=123;\");\nalert(temp_testVariable);\n</code></pre>\n\n<p>Or using the window object:</p>\n\n<pre><code>var data = \"testVariable\";\nwindow[\"temp_\" + data] = 123;\nalert(window[\"temp_\" + data]);\n</code></pre>\n\n<p><a href=\"http://www.hiteshagrawal.com/javascript/dynamic-variables-in-javascript\">http://www.hiteshagrawal.com/javascript/dynamic-variables-in-javascript</a></p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Well, sort of. If you set the variable as a property of an object:</p>\n\n<pre><code>var obj = {}\nobj.foo = 42;\n\nvar bar = 'foo';\nconsole.log(obj[bar]);\n</code></pre>\n\n<p>Works easily for global variables as they are set as properties of the <code>window</code> object.</p>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p>You could do something with objects. For example, you could do:</p>\n\n<pre><code>var myvars = {};\nmyvars.foo = \"hello, world!\";\n\nalert(myvars.foo);\n</code></pre>\n\n<p>It even works with functions:</p>\n\n<pre><code>myvars.foofn = function(){ alert(\"hello, world\")  };\nmyvars.foofn();\n</code></pre>\n\n<p>You can do the same with arrays. So:</p>\n\n<pre><code>var myarr = [];\nmyarr.push(\"hello, world!\");\n\nalert(myarr[0]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Of course you can, but don't. The variables have to be global.</p>\n\n<pre><code>var killingFunction = 'alert'\nvar killMeNow = 'please'\nvar please = 'You have been killed!'\nthis[killingFunction](this[killMeNow])\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>var vars = {};\nvar var_name = \"str\";\nvars[var_name] = \"working\";\nconsole.log(vars[\"str\"]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To reference a variable in javascript with only a string, you can use</p>\n\n<pre><code>window['your_variable_name']\n</code></pre>\n\n<p>You can set and reference variables, and objects in variables too.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>x='Hello,World';\r\neval('y='+x+';');\r\nalert(y);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<p>I know it's possible in PHP to have \"variable\" variables.  For example</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>$x = \"variable\";\n$$x = \"hello, world!\";\necho $variable; // displays \"hello, world!\"\n</code></pre>\n\n<p>Is this possible in javascript?  How would it be done?</p>\n",
            "last_activity_date": 1419825410,
            "question_id": 5187530,
            "score": 26,
            "tags": [
                "javascript",
                "variables",
                "variable-variables"
            ],
            "title": "&quot;Variable&quot; variables in Javascript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<blockquote>\n  <p>Is this defined behavior? Is it\n  cross-browser safe?</p>\n</blockquote>\n\n<p>Yes. And yes.</p>\n\n<blockquote>\n  <p>Is there any reasoning underlying why\n  it is the way it is...</p>\n</blockquote>\n\n<p>The meaning of <code>this</code> is pretty simple to deduce:</p>\n\n<ol>\n<li>If <code>this</code> is used inside a constructor function, and the function was invoked with the <code>new</code> keyword, <code>this</code> refers to the object that will be created. <code>this</code> will continue to mean the object even in public methods.</li>\n<li>If <code>this</code> is used anywhere else, including nested <em>protected</em> functions, it refers to the global scope (which in the case of the browser is the window object).</li>\n</ol>\n\n<p>The second case is obviously a design flaw, but it's pretty easy to work around it by using closures.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>In this case the inner <code>this</code> is bound to the global object instead of to the <code>this</code> variable of the outer function.\nIt's the way the language is designed.</p>\n\n<p>See \"JavaScript: The Good Parts\"  by Douglas Crockford for a good explanation.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Cannibalized from another post of mine, here's more than you ever wanted to know about <em>this</em>.</p>\n\n<p>Before I start, here's the most important thing to keep in mind about Javascript, and to repeat to yourself when it doesn't make sense.  Javascript does not have classes. If something looks like a class, it's a clever trick. Javascript has <strong>objects</strong>  and <strong>functions</strong>.  (that's not 100% accurate, functions are just objects, but it can sometimes be helpful to think of them as separate things)</p>\n\n<p>The <em>this</em> variable is attached to functions.  Whenever you invoke a function, <em>this</em> is given a certain value, depending on how you invoke the function.  This is often called the invocation pattern.</p>\n\n<p>There are four ways to invoke functions in javascript.  You can invoke the function as a <em>method</em>, as a <em>function</em>, as a <em>constructor</em>, and with <em>apply</em>.</p>\n\n<h2>As a Method</h2>\n\n<p>A method is a function that's attached to an object</p>\n\n<pre><code>var foo = {};\nfoo.someMethod = function(){\n    alert(this);\n}\n</code></pre>\n\n<p>When invoked as a method, <em>this</em> will be bound to the object the function/method is a part of.  In this example, this will be bound to foo.</p>\n\n<h2>As A Function</h2>\n\n<p>If you have a stand alone function, the <em>this</em> variable will be bound to the \"global\" object, almost always the <em>window</em> object in the context of a browser.</p>\n\n<pre><code> var foo = function(){\n    alert(this);\n }\n foo();\n</code></pre>\n\n<p><strong>This may be what's tripping you up</strong>, but don't feel bad.  Many people consider this a bad design decision.  Since a callback is invoked as a function and not as a method,  that's why you're seeing what appears to be inconsistent behavior.</p>\n\n<p>Many people get around the problem by doing something like, um, this</p>\n\n<pre><code>var foo = {};\nfoo.someMethod = function (){\n    var that=this;\n    function bar(){\n        alert(that);\n    }\n}\n</code></pre>\n\n<p>You define a variable <em>that</em> which points to <em>this</em>. Closure (a topic all it's own) keeps <em>that</em> around, so if you call bar as a callback, it still has a reference.</p>\n\n<h2>As a Constructor</h2>\n\n<p>You can also invoke a function as a constructor.  Based on the naming convention you're using (TestObject) this also <strong>may be what you're doing and is what's tripping you up</strong>.</p>\n\n<p>You invoke a function as a Constructor with the new keyword.</p>\n\n<pre><code>function Foo(){\n    this.confusing = 'hell yeah';\n}\nvar myObject = new Foo();\n</code></pre>\n\n<p>When invoked as a constructor, a new Object will be created, and <em>this</em> will be bound to that object.  Again, if you have inner functions and they're used as callbacks, you'll be invoking them as functions, and <em>this</em> will be bound to the global object.  Use that var that = this trick/pattern.</p>\n\n<p>Some people think the constructor/new keyword was a bone thrown to Java/traditional OOP programmers as a way to create something similar to classes.</p>\n\n<h2>With the Apply Method.</h2>\n\n<p>Finally, every function has a method (yes, functions are objects in Javascript) named \"apply\".  Apply lets you determine what the value of <em>this</em> will be, and also lets you pass in an array of arguments.  Here's a useless example.</p>\n\n<pre><code>function foo(a,b){\n    alert(a);\n    alert(b);\n    alert(this);\n}\nvar args = ['ah','be'];\nfoo.apply('omg',args);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 406
                },
                {
                    "body": "<h2>Function calls</h2>\n\n<p>Functions are just a type of Object.</p>\n\n<p>All Function objects have <a href=\"http://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Function/call\">call</a> and <a href=\"http://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Function/apply\">apply</a> methods which execute the Function object they're called on.</p>\n\n<p>When called, the first argument to these methods specifies the object which will be referenced by the <code>this</code> keyword during execution of the Function - if it's <code>null</code> or <code>undefined</code>, the global object, <code>window</code>, is used for <code>this</code>.</p>\n\n<p>Thus, calling a Function...</p>\n\n<pre><code>whereAmI = \"window\";\n\nfunction foo()\n{\n    return \"this is \" + this.whereAmI + \" with \" + arguments.length + \" + arguments\";\n}\n</code></pre>\n\n<p>...with parentheses - <code>foo()</code> - is equivalent to <code>foo.call(undefined)</code> or <code>foo.apply(undefined)</code>, which is <em>effectively</em> the same as <code>foo.call(window)</code> or <code>foo.apply(window)</code>.</p>\n\n<pre><code>&gt;&gt;&gt; foo()\n\"this is window with 0 arguments\"\n&gt;&gt;&gt; foo.call()\n\"this is window with 0 arguments\"\n</code></pre>\n\n<p>Additional arguments to <code>call</code> are passed as the arguments to the function call, whereas a single additional argument to <code>apply</code> can specify the arguments for the function call as an Array-like object.</p>\n\n<p>Thus, <code>foo(1, 2, 3)</code> is equivalent to <code>foo.call(null, 1, 2, 3)</code> or <code>foo.apply(null, [1, 2, 3])</code>.</p>\n\n<pre><code>&gt;&gt;&gt; foo(1, 2, 3)\n\"this is window with 3 arguments\"\n&gt;&gt;&gt; foo.apply(null, [1, 2, 3])\n\"this is window with 3 arguments\"\n</code></pre>\n\n<p>If a function is a property of an object...</p>\n\n<pre><code>var obj =\n{\n    whereAmI: \"obj\",\n    foo: foo\n};\n</code></pre>\n\n<p>...accessing a reference to the Function via the object and calling it with parentheses - <code>obj.foo()</code> - is equivalent to <code>foo.call(obj)</code> or <code>foo.apply(obj)</code>.</p>\n\n<p>However, functions held as properties of objects are not \"bound\" to those objects. As you can see in the definition of <code>obj</code> above, since Functions are just a type of Object, they can be referenced (and thus can be passed by reference to a Function call or returned by reference from a Function call). When a reference to a Function is passed, no additional information about where it was passed <em>from</em> is carried with it, which is why the following happens:</p>\n\n<pre><code>&gt;&gt;&gt; baz = obj.foo;\n&gt;&gt;&gt; baz();\n\"this is window with 0 arguments\"\n</code></pre>\n\n<p>The call to our Function reference, <code>baz</code>, doesn't provide any context for the call, so it's effectively the same as <code>baz.call(undefined)</code>, so <code>this</code> ends up referencing <code>window</code>. If we want <code>baz</code> to know that it belongs to <code>obj</code>, we need to somehow provide that information when <code>baz</code> is called, which is where the first argument to <code>call</code> or <code>apply</code> and closures come into play.</p>\n\n<h2>Scope chains</h2>\n\n<pre><code>function bind(func, context)\n{\n    return function()\n    {\n        func.apply(context, arguments);\n    };\n}\n</code></pre>\n\n<p>When a Function is executed, it creates a new scope and has a reference to any enclosing scope. When the anonymous function is created in the above example, it has a reference to the scope it was created in, which is <code>bind</code>'s scope. This is known as a \"closure.\"</p>\n\n<pre><code>[global scope (window)] - whereAmI, foo, obj, baz\n    |\n    [bind scope] - func, context\n        |\n        [anonymous scope]\n</code></pre>\n\n<p>When you attempt to access a variable this \"scope chain\" is walked to find a variable with the given name - if the current scope doesn't contain the variable, you look at the next scope in the chain, and so on until you reach the global scope. When the anonymous function is returned and <code>bind</code> finishes executing, the anonymous function still has a reference to <code>bind</code>'s scope, so <code>bind</code>'s scope doesn't \"go away\".</p>\n\n<p>Given all the above you should now be able to understand how scope works in the following example, and why the technique for passing a function around \"pre-bound\" with a particular value of <code>this</code> it will have when it is called works:</p>\n\n<pre><code>&gt;&gt;&gt; baz = bind(obj.foo, obj);\n&gt;&gt;&gt; baz(1, 2);\n\"this is obj with 2 arguments\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p><a href=\"http://bonsaiden.github.com/JavaScript-Garden/#this\">This</a> link has some great information on the 'this' keyword and it's scope, as well as a number of other JavaScript quirks and things to look out for.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I found a nice tutorial about the <em>ECMAScript this</em></p>\n\n<blockquote>\n  <p>A this value is a special object which is related with the execution\n  context. Therefore, it may be named as a context object (i.e. an\n  object in which context the execution context is activated).</p>\n</blockquote>\n\n<p>Any object may be used as this value of the context.</p>\n\n<blockquote>\n  <p>a this value is a property of the execution context, but not a\n  property of the variable object.</p>\n</blockquote>\n\n<p>This feature is very important, because in contrary to variables, this value never participates in identifier resolution process. I.e. when accessing this in a code, its value is taken directly from the execution context and without any scope chain lookup. The value of this is determinate only once when entering the context.</p>\n\n<p>In the global context, a this value is the global object itself (that means, this value here equals to variable object)</p>\n\n<p>In case of a function context, this value in every single function call may be different</p>\n\n<p>Reference <a href=\"http://dmitrysoshnikov.com/ecmascript/javascript-the-core/\" rel=\"nofollow\">Javascript-the-core</a> and <a href=\"http://dmitrysoshnikov.com/ecmascript/chapter-3-this/\" rel=\"nofollow\">Chapter-3-this</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I just came across an interesting situation in Javascript.  I have a class with a method that defines several objects using object-literal notation.  Inside those objects, the <code>this</code> pointer is being used.  From the behavior of the program, I have deduced that the <code>this</code> pointer is referring to the class on which the method was invoked, and not the object being created by the literal.  This seems arbitrary, though it is the way I would expect it to work.  Is this defined behavior?  Is it cross-browser safe?  Is there any reasoning underlying why it is the way it is beyond \"the spec says so\" (for instance, is it a consequence of some broader design decision/philosophy)?  Pared-down code example:</p>\n\n<pre><code>// inside class definition, itself an object literal, we have this function:\nonRender: function() {\n\n\tthis.menuItems = this.menuItems.concat([\n\t\t{\n\t\t\ttext: 'Group by Module',\n\t\t\trptletdiv: this\n\t\t},\n\t\t{\n\t\t\ttext: 'Group by Status',\n\t\t\trptletdiv: this\n\t\t}]);\n\t// etc\n}\n</code></pre>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1394714455,
            "question_id": 133973,
            "score": 164,
            "tags": [
                "javascript",
                "language-features",
                "language-design"
            ],
            "title": "How does &quot;this&quot; keyword work within a JavaScript object literal?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>I believe you could do it like this : </p>\n\n<pre><code>var fd = new FormData();    \nfd.append( 'file', input.files[0] );\n\n$.ajax({\n  url: 'http://example.com/script.php',\n  data: fd,\n  processData: false,\n  contentType: false,\n  type: 'POST',\n  success: function(data){\n    alert(data);\n  }\n});\n</code></pre>\n\n<p>Setting processData to false lets you prevent jQuery from automatically transforming the data into a query string. See <a href=\"http://api.jquery.com/jQuery.ajax/\">the docs</a> for more info.</p>\n\n<p>Setting the <code>contentType</code> to false is imperative, since otherwise jQuery <a href=\"http://stackoverflow.com/a/5976031/33080\">will set it incorrectly</a>.</p>\n",
                    "is_accepted": true,
                    "score": 261
                },
                {
                    "body": "<p>You can use the $.ajax <code>beforeSend</code> event to manipulate the header.</p>\n\n<p>\u2026</p>\n\n<pre><code>beforeSend: function(xhr) { \n    xhr.setRequestHeader('Content-Type', 'multipart/form-data');\n}\n</code></pre>\n\n<p>\u2026</p>\n\n<p>See this link for additional information: <a href=\"http://msdn.microsoft.com/en-us/library/ms536752(v=vs.85).aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/ms536752(v=vs.85).aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I think you cant do it in ajax to support all the browsers, I might say good to check this ajax uploader plugin to see how they have done it <a href=\"http://valums.com/ajax-upload/\" rel=\"nofollow\">http://valums.com/ajax-upload/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There are a few yet to be mentioned techniques available for you. Start with setting the contentType property in your ajax params.</p>\n\n<p>Building on pradeek's example:</p>\n\n<pre><code>$('form').submit(function (e) {\n    var data;\n\n    data = new FormData();\n    data.append('file', $('#file')[0].files[0]);\n\n    $.ajax({\n        url: 'http://hacheck.tel.fer.hr/xml.pl',\n        data: data,\n        processData: false,\n        type: 'POST',\n\n        // This will override the content type header, \n        // regardless of whether content is actually sent.\n        // Defaults to 'application/x-www-form-urlencoded'\n        contentType: 'multipart/form-data', \n\n        //Before 1.5.1 you had to do this:\n        beforeSend: function (x) {\n            if (x &amp;&amp; x.overrideMimeType) {\n                x.overrideMimeType(\"multipart/form-data\");\n            }\n        },\n        // Now you should be able to do this:\n        mimeType: 'multipart/form-data',    //Property added in 1.5.1\n\n        success: function (data) {\n            alert(data);\n        }\n    });\n\n    e.preventDefault();\n});\n</code></pre>\n\n<p>In some cases when forcing jQuery ajax to do non-expected things, the <code>beforeSend</code> event is a great place to do it. For a while people were using <code>beforeSend</code> to override the mimeType before that was added into jQuery in 1.5.1. You should be able to modify just about anything on the jqXHR object in the before send event.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>If you want to submit files using ajax use \"jquery.form.js\"\nThis submits all form elements easily.</p>\n\n<p>Samples\n<a href=\"http://jquery.malsup.com/form/#ajaxSubmit\" rel=\"nofollow\">http://jquery.malsup.com/form/#ajaxSubmit</a></p>\n\n<p>rough view :</p>\n\n<pre><code>&lt;form id='AddPhotoForm' method='post' action='../photo/admin_save_photo.php' enctype='multipart/form-data'&gt;\n</code></pre>\n\n<p></p>\n\n<p><br>\n</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction showResponseAfterAddPhoto(responseText, statusText)\n{ \n    information= responseText;\n    callAjaxtolist();\n    $(\"#AddPhotoForm\").resetForm();\n    $(\"#photo_msg\").html('&lt;div class=\"album_msg\"&gt;Photo uploaded Successfully...&lt;/div&gt;');        \n};\n\n$(document).ready(function(){\n    $('.add_new_photo_div').live('click',function(){\n            var options = {success:showResponseAfterAddPhoto};  \n            $(\"#AddPhotoForm\").ajaxSubmit(options);\n        });\n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The best documentation and example I found was here <a href=\"https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/Guide/Using_FormData_Objects</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code> function submitForm() {\n                        var data1 = new FormData($('input[name^=\"file\"]'));\n                        $.each($('input[name^=\"file\"]')[0].files, function(i, file) {\n                        data1.append(i, file);\n                        });\n\n            $.ajax({\n              url: \"&lt;?php echo base_url() ?&gt;employee/dashboard2/test2\",\n              type: \"POST\",\n              data: data1,\n              enctype: 'multipart/form-data',\n              processData: false,  // tell jQuery not to process the data\n              contentType: false   // tell jQuery not to set contentType\n            }).done(function(data) {\n                console.log(\"PHP Output:\");\n                console.log( data );\n            });\n            return false;\n        }\n================================\nphp fil \n\npublic function upload_file(){\n\nforeach ($_FILES as $key ) {\n\n      $name =time().$key['name'];\n\n      $path='upload/'.$name;\n\n      @move_uploaded_file($key['tmp_name'],$path);\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>The <a href=\"http://www.w3.org/TR/XMLHttpRequest2/\">XMLHttpRequest Level 2</a> standard (still a working draft) defines the <code>FormData</code> interface. This interface enables appending <code>File</code> objects to XHR-requests (Ajax-requests).</p>\n\n<p>Btw, this is a new feature - in the past, the \"hidden-iframe-trick\" was used (read about that in <a href=\"http://stackoverflow.com/questions/6718664/is-it-possible-to-peform-an-asynchronous-cross-domain-file-upload/6963843\">my other question</a>).</p>\n\n<p>This is how it works (example):</p>\n\n<pre><code>var xhr = new XMLHttpRequest(),\n    fd = new FormData();\n\nfd.append( 'file', input.files[0] );\nxhr.open( 'POST', 'http://example.com/script.php', true );\nxhr.onreadystatechange = handler;\nxhr.send( fd );\n</code></pre>\n\n<p>where <code>input</code> is a <code>&lt;input type=\"file\"&gt;</code> field, and <code>handler</code> is the success-handler for the Ajax-request.</p>\n\n<p>This works beautifully in all browsers (again, except IE).</p>\n\n<p>Now, I would like to make this functionality work with jQuery. I tried this:</p>\n\n<pre><code>var fd = new FormData();    \nfd.append( 'file', input.files[0] );\n\n$.post( 'http://example.com/script.php', fd, handler );\n</code></pre>\n\n<p>Unfortunately, that won't work (an \"Illegal invocation\" error is thrown - <a href=\"http://i.imgur.com/Uy8Xu.png\">screenshot is here</a>). I assume jQuery expects a simple key-value object representing form-field-names / values, and the <code>FormData</code> instance that I'm passing in is apparently incompatible.</p>\n\n<p>Now, since it is possible to pass a <code>FormData</code> instance into <code>xhr.send()</code>, I hope that it is also possible to make it work with jQuery.</p>\n\n<hr>\n\n<p><strong>Update:</strong></p>\n\n<p>I've created a \"feature ticket\" over at jQuery's Bug Tracker. It's here: <a href=\"http://bugs.jquery.com/ticket/9995\">http://bugs.jquery.com/ticket/9995</a></p>\n\n<p>I was suggested to use an \"Ajax prefilter\"...</p>\n\n<hr>\n\n<p><strong>Update:</strong></p>\n\n<p>First, let me give a demo demonstrating what behavior I would like to achieve. </p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;form&gt;\n    &lt;input type=\"file\" id=\"file\" name=\"file\"&gt;\n    &lt;input type=\"submit\"&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>JavaScript:</p>\n\n<pre><code>$( 'form' ).submit(function ( e ) {\n    var data, xhr;\n\n    data = new FormData();\n    data.append( 'file', $( '#file' )[0].files[0] );\n\n    xhr = new XMLHttpRequest();\n\n    xhr.open( 'POST', 'http://hacheck.tel.fer.hr/xml.pl', true );\n    xhr.onreadystatechange = function ( response ) {};\n    xhr.send( data );\n\n    e.preventDefault();\n});\n</code></pre>\n\n<p>The above code results in this HTTP-request:</p>\n\n<p><img src=\"http://i.stack.imgur.com/YJYPm.png\" alt=\"multipartformdata\"></p>\n\n<p><strong>This is what I need</strong> - I want that \"multipart/form-data\" content-type!</p>\n\n<hr>\n\n<p>The proposed solution would be like so:</p>\n\n<pre><code>$( 'form' ).submit(function ( e ) {\n    var data;\n\n    data = new FormData();\n    data.append( 'file', $( '#file' )[0].files[0] );\n\n    $.ajax({\n        url: 'http://hacheck.tel.fer.hr/xml.pl',\n        data: data,\n        processData: false,\n        type: 'POST',\n        success: function ( data ) {\n            alert( data );\n        }\n    });\n\n    e.preventDefault();\n});\n</code></pre>\n\n<p>However, this results in:</p>\n\n<p><img src=\"http://i.stack.imgur.com/uU2Gi.png\" alt=\"wrongcontenttype\"></p>\n\n<p>As you can see, the content type is wrong...</p>\n",
            "last_activity_date": 1422356519,
            "question_id": 6974684,
            "score": 158,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "multipartform-data"
            ],
            "title": "How to send FormData objects with Ajax-requests in jQuery?"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>Two divs, one for header, one for data.  Make the data div scrollable, and use JavaScript to set the width of the columns in the header to be the same as the widths in the data.  I think the data columns widths need to be fixed rather than dynamic.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I've just completed putting together a jQuery plugin that will take valid single table using valid HTML (have to have a thead and tbody) and will output a table that has fixed headers, optional fixed footer that can either be a cloned header or any content you chose (pagination, etc.).  If you want to take advantage of larger monitors it will also resize the table when the browser is resized.  Another added feature is being able to side scroll if the table columns can not all fit in view.</p>\n\n<p><a href=\"http://fixedheadertable.com/\">http://fixedheadertable.com/</a></p>\n\n<p>on github: <a href=\"http://markmalek.github.com/Fixed-Header-Table/\">http://markmalek.github.com/Fixed-Header-Table/</a></p>\n\n<p>It's extremely easy to setup and you can create your own custom styles for it.  It also uses rounded corners in all browsers.  Keep in mind I just released it, so it's still technically beta and there are very few minor issues I'm ironing out.</p>\n\n<p>It works in Internet Explorer 7, Internet Explorer 8, Safari, Firefox and Chrome.</p>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p>I was looking for a solution for this for a while and found most of the answers are not working or not suitable for my situation, so i wrote a simple solution with jquery.</p>\n\n<p>this is the solution outline. </p>\n\n<ol>\n<li>clone the table which needs to have fixed header and place the\ncloned copy on top of original</li>\n<li>remove the table body from top table</li>\n<li>remove the table header from bottom table</li>\n<li>adjust the column widths. (we are remembering the original column widths)</li>\n</ol>\n\n<p>below is the code. here's the demo <a href=\"http://jsbin.com/AjiJIGA/1\">Fixed Header Demo</a></p>\n\n<p></p>\n\n<pre><code>&lt;head&gt;\n    &lt;script   \n   src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.6.4/jquery.min.js\"&gt;\n    &lt;/script&gt;\n    &lt;script&gt;\n\n    function scrolify(tblAsJQueryObject, height){\n        var oTbl = tblAsJQueryObject;\n\n        // for very large tables you can remove the four lines below\n        // and wrap the table with &lt;div&gt; in the mark-up and assign\n        // height and overflow property  \n        var oTblDiv = $(\"&lt;div/&gt;\");\n        oTblDiv.css('height', height);\n        oTblDiv.css('overflow','scroll');               \n        oTbl.wrap(oTblDiv);\n\n        // save original width\n        oTbl.attr(\"data-item-original-width\", oTbl.width());\n        oTbl.find('thead tr td').each(function(){\n            $(this).attr(\"data-item-original-width\",$(this).width());\n        }); \n        oTbl.find('tbody tr:eq(0) td').each(function(){\n            $(this).attr(\"data-item-original-width\",$(this).width());\n        });                 \n\n\n        // clone the original table\n        var newTbl = oTbl.clone();\n\n        // remove table header from original table\n        oTbl.find('thead tr').remove();                 \n        // remove table body from new table\n        newTbl.find('tbody tr').remove();   \n\n        oTbl.parent().parent().prepend(newTbl);\n        newTbl.wrap(\"&lt;div/&gt;\");\n\n        // replace ORIGINAL COLUMN width                \n        newTbl.width(newTbl.attr('data-item-original-width'));\n        newTbl.find('thead tr td').each(function(){\n            $(this).width($(this).attr(\"data-item-original-width\"));\n        });     \n        oTbl.width(oTbl.attr('data-item-original-width'));      \n        oTbl.find('tbody tr:eq(0) td').each(function(){\n            $(this).width($(this).attr(\"data-item-original-width\"));\n        });                 \n    }\n\n    $(document).ready(function(){\n        scrolify($('#tblNeedsScrolling'), 160); // 160 is height\n    });\n\n\n    &lt;/script&gt;\n\n\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div style=\"width:300px;border:6px green solid;\"&gt;\n        &lt;table border=\"1\" width=\"100%\" id=\"tblNeedsScrolling\"&gt;\n            &lt;thead&gt;\n                &lt;tr&gt;&lt;th&gt;Header 1&lt;/th&gt;&lt;th&gt;Header 2&lt;/th&gt;&lt;/tr&gt;\n            &lt;/thead&gt;\n            &lt;tbody&gt;\n                &lt;tr&gt;&lt;td&gt;row 1, cell 1&lt;/td&gt;&lt;td&gt;row 1, cell 2&lt;/td&gt;&lt;/tr&gt;\n                &lt;tr&gt;&lt;td&gt;row 2, cell 1&lt;/td&gt;&lt;td&gt;row 2, cell 2&lt;/td&gt;&lt;/tr&gt;\n                &lt;tr&gt;&lt;td&gt;row 3, cell 1&lt;/td&gt;&lt;td&gt;row 3, cell 2&lt;/td&gt;&lt;/tr&gt;\n                &lt;tr&gt;&lt;td&gt;row 4, cell 1&lt;/td&gt;&lt;td&gt;row 4, cell 2&lt;/td&gt;&lt;/tr&gt;           \n                &lt;tr&gt;&lt;td&gt;row 5, cell 1&lt;/td&gt;&lt;td&gt;row 5, cell 2&lt;/td&gt;&lt;/tr&gt;\n                &lt;tr&gt;&lt;td&gt;row 6, cell 1&lt;/td&gt;&lt;td&gt;row 6, cell 2&lt;/td&gt;&lt;/tr&gt;\n                &lt;tr&gt;&lt;td&gt;row 7, cell 1&lt;/td&gt;&lt;td&gt;row 7, cell 2&lt;/td&gt;&lt;/tr&gt;\n                &lt;tr&gt;&lt;td&gt;row 8, cell 1&lt;/td&gt;&lt;td&gt;row 8, cell 2&lt;/td&gt;&lt;/tr&gt;           \n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/div&gt;\n\n&lt;/body&gt;\n</code></pre>\n\n<p></p>\n\n<p>this solution works in chrome &amp; ie. since this is based on jquery this should work in other jquery supported browsers as well.</p>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p>Use the latest version of jQuery, and include the following javascript code</p>\n\n<pre><code>$(window).scroll(function(){         \n  $(\"id of the div element\").offset({top:$(window).scrollTop()});         \n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h1>A simple jQuery plugin</h1>\n\n<p>This is a variation on Mahes' solution. You can call it like <code>$('table#foo').scrollableTable();</code></p>\n\n<p>The idea is:</p>\n\n<ul>\n<li>Split the <code>thead</code> and <code>tbody</code> into separate <code>table</code> elements</li>\n<li>Make their cell widths match again</li>\n<li>Wrap the second <code>table</code> in a <code>div.scrollable</code></li>\n<li>Use CSS to make <code>div.scrollable</code> actually scroll</li>\n</ul>\n\n<p>The CSS could be:</p>\n\n<pre><code>div.scrollable { height: 300px; overflow-y: scroll;}\n</code></pre>\n\n<h3>Caveats</h3>\n\n<ul>\n<li>Obviously, splitting up these tables makes the markup less semantic. I'm not sure what effect this has on accessibility.</li>\n<li>This plugin does not deal with footers, multiple headers, etc.</li>\n<li>I've only tested it in Chrome version 20.</li>\n</ul>\n\n<p>That said, it works for my purposes and you're free to take and modify it.</p>\n\n<p>Here's the plugin:</p>\n\n<pre><code>jQuery.fn.scrollableTable = function () {\n  var $newTable, $oldTable, $scrollableDiv, originalWidths;\n  $oldTable = $(this);\n\n  // Once the tables are split, their cell widths may change. \n  // Grab these so we can make the two tables match again.\n  originalWidths = $oldTable.find('tr:first td').map(function() {\n    return $(this).width();\n  });\n\n  $newTable = $oldTable.clone();\n  $oldTable.find('tbody').remove();\n  $newTable.find('thead').remove();\n\n  $.each([$oldTable, $newTable], function(index, $table) {\n    $table.find('tr:first td').each(function(i) {\n      $(this).width(originalWidths[i]);\n    });\n  });\n\n  $scrollableDiv = $('&lt;div/&gt;').addClass('scrollable');\n  $newTable.insertAfter($oldTable).wrap($scrollableDiv);\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here is a jQuery plugin for fixed table header. It allows the entire page to scroll, freezing the header when it reaches the top. It works perfectly with twitter bootstrap tables.</p>\n\n<p><strong>Live example:</strong> <a href=\"http://rubynor.com/table-fixed-header/example.html\">http://rubynor.com/table-fixed-header/example.html</a></p>\n\n<p>Github repo: <a href=\"https://github.com/oma/table-fixed-header\">https://github.com/oma/table-fixed-header</a></p>\n\n<p>It does <em>not</em> scroll only table content. Look to other tools for that, as one of these other answers. You decide what fits your case the best.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<h2>Support for fixed footer</h2>\n\n<p>I extended Nathan's function to also support a fixed footer and max height.\nAlso, the function will set the css itself, you only have to support a width.</p>\n\n<p>Usage:</p>\n\n<p>Fixed height:</p>\n\n<pre><code>$('table').scrollableTable({ height: 100 });\n</code></pre>\n\n<p>Max height (if the browser supports the css 'max-height' option):</p>\n\n<pre><code>$('table').scrollableTable({ maxHeight: 100 });\n</code></pre>\n\n<p>Script:</p>\n\n<pre><code>jQuery.fn.scrollableTable = function(options) {\n\n    var $originalTable, $headTable, $bodyTable, $footTable, $scrollableDiv, originalWidths;\n\n    // prepare the separate parts of the table\n    $originalTable = $(this);\n    $headTable = $originalTable.clone();\n\n    $headTable.find('tbody').remove();\n    $headTable.find('tfoot').remove();\n\n    $bodyTable = $originalTable.clone();\n    $bodyTable.find('thead').remove();\n    $bodyTable.find('tfoot').remove();\n\n    $footTable = $originalTable.clone();\n    $footTable.find('thead').remove();\n    $footTable.find('tbody').remove();\n\n    // grap original column widths and set them in the separate tables\n    originalWidths = $originalTable.find('tr:first td').map(function() {\n        return $(this).width();\n    });\n\n    $.each([$headTable, $bodyTable, $footTable], function(index, $table) {\n        $table.find('tr:first td').each(function(i) {\n            $(this).width(originalWidths[i]);\n        });\n    });\n\n    // the div that makes the body table scroll\n    $scrollableDiv = $('&lt;div/&gt;').css({\n        'overflow-y': 'scroll'\n    });\n\n    if(options.height) {\n        $scrollableDiv.css({'height': options.height});\n    }\n    else if(options.maxHeight) {\n        $scrollableDiv.css({'max-height': options.maxHeight});\n    }\n\n    // add the new separate tables and remove the original one\n    $headTable.insertAfter($originalTable);\n    $bodyTable.insertAfter($headTable);\n    $footTable.insertAfter($bodyTable);\n    $bodyTable.wrap($scrollableDiv);\n    $originalTable.remove();\n\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>All of the attempts to solve this from outside the CSS spec are pale shadows of what we really want:  Delivery on the implied promise of THEAD.</p>\n\n<p>This frozen-headers-for-a-table issue has been an open wound in HTML/CSS for a long time.</p>\n\n<p>In a perfect world, there would be a pure-css solution for this problem.  Unfortunately there doesn't seem to be a good one in place. </p>\n\n<p>Relevant standards-discussions on this topic include:</p>\n\n<ul>\n<li>The Sticky Positioning proposal at www-style: <a href=\"http://lists.w3.org/Archives/Public/www-style/2012Jun/0627.html\" rel=\"nofollow\">http://lists.w3.org/Archives/Public/www-style/2012Jun/0627.html</a></li>\n<li>Tab Atkins' proposal for position-root, position-contain or position-restrict:  <a href=\"http://www.xanthir.com/blog/b48H0\" rel=\"nofollow\">http://www.xanthir.com/blog/b48H0</a></li>\n</ul>\n\n<p><strong>UPDATE</strong>:  Firefox shipped position:sticky  in version 32.  Everyone wins!</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Most of the solutions posted here require jQuery. If you are looking for a framework independent solution try Grid: <a href=\"http://www.matts411.com/post/grid/\">http://www.matts411.com/post/grid/</a></p>\n\n<p>It's hosted on Github here: <a href=\"https://github.com/mmurph211/Grid\">https://github.com/mmurph211/Grid</a></p>\n\n<p>Not only does it support fixed headers, it also supports fixed left columns and footers, among other things.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I realize the question allows JavaScript but here is a pure CSS solution I worked up that also allows for the table to expand horizontally. Tested with IE10 and latest Chrome and Firefox browsers. A link to jsFiddle is at the bottom.</p>\n\n<p>The HTML:</p>\n\n<pre><code>Putting some text here to differentiate between the header aligning with the top of the screen and the header aligning with the top of one of it's ancestor containers.\n&lt;div id=\"positioning-container\"&gt;\n&lt;div id=\"scroll-container\"&gt;\n    &lt;table&gt;\n        &lt;colgroup&gt;\n            &lt;col class=\"col1\"&gt;&lt;/col&gt;\n            &lt;col class=\"col2\"&gt;&lt;/col&gt;\n        &lt;/colgroup&gt;\n        &lt;thead&gt;\n            &lt;th class=\"header-col1\"&gt;&lt;div&gt;Header 1&lt;/div&gt;&lt;/th&gt;\n            &lt;th class=\"header-col2\"&gt;&lt;div&gt;Header 2&lt;/div&gt;&lt;/th&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n            &lt;tr&gt;&lt;td&gt;Cell 1.1&lt;/td&gt;&lt;td&gt;Cell 1.2&lt;/td&gt;&lt;/tr&gt;\n            &lt;tr&gt;&lt;td&gt;Cell 2.1&lt;/td&gt;&lt;td&gt;Cell 2.2&lt;/td&gt;&lt;/tr&gt;\n            &lt;tr&gt;&lt;td&gt;Cell 3.1&lt;/td&gt;&lt;td&gt;Cell 3.2&lt;/td&gt;&lt;/tr&gt;\n            &lt;tr&gt;&lt;td&gt;Cell 4.1&lt;/td&gt;&lt;td&gt;Cell 4.2&lt;/td&gt;&lt;/tr&gt;\n            &lt;tr&gt;&lt;td&gt;Cell 5.1&lt;/td&gt;&lt;td&gt;Cell 5.2&lt;/td&gt;&lt;/tr&gt;\n            &lt;tr&gt;&lt;td&gt;Cell 6.1&lt;/td&gt;&lt;td&gt;Cell 6.2&lt;/td&gt;&lt;/tr&gt;\n            &lt;tr&gt;&lt;td&gt;Cell 7.1&lt;/td&gt;&lt;td&gt;Cell 7.2&lt;/td&gt;&lt;/tr&gt;\n\n        &lt;/tbody&gt;\n    &lt;/table&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And the CSS:</p>\n\n<pre><code>table{\n    border-collapse: collapse;\n    table-layout: fixed;\n    width: 100%;\n}\n/* Not required, just helps with alignment for this example */\ntd, th{\n    padding: 0;\n    margin: 0;\n}\n\ntbody{\n    background-color: #ddf;\n}\n\nthead {\n    /* Keeps the header in place. Don't forget top: 0 */\n    position: absolute;\n    top: 0;\n    background-color: #ddd;\n    /* The 17px is to adjust for the scrollbar width.\n     * This is a new css value that makes this pure\n     * css example possible */\n    width: calc(100% - 17px);\n    height: 20px;\n}\n/* Positioning container. Required to position the\n * header since the header uses position:absolute\n * (otherwise it would position at the top of the screen) */\n#positioning-container{\n    position: relative;\n}\n/* A container to set the scroll-bar and \n * includes padding to move the table contents\n * down below the header (padding = header height) */\n#scroll-container{\n    overflow-y: auto;\n    padding-top: 20px;\n    height: 100px;\n}\n.header-col1{\n    background-color: red;\n}\n/* fixed width header columns need a div to set their width */\n.header-col1 div{\n    width: 100px;\n}\n/* expandable columns need a width set on the th tag */\n.header-col2{\n    width: 100%;\n}\n.col1 {\n    width: 100px;\n}\n.col2{\n    width: 100%;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/HNHRv/3/\" rel=\"nofollow\">http://jsfiddle.net/HNHRv/3/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>:) </p>\n\n<p>Not-so-clean, but pure HTML/CSS solution.</p>\n\n<pre><code>table {\n    overflow-x:scroll;\n}\n\ntbody {\n    max-height: /*your desired max height*/\n    overflow-y:scroll;\n    display:block;\n}\n</code></pre>\n\n<p>Updated for IE8+\n<a href=\"http://jsfiddle.net/ZdeEH/4/\" rel=\"nofollow\">JSFiddle example</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This is not an exact solution to the fixed header row, but I have created a rather ingenious method of repeating the header row throughout the long table yet still keeping the ability to sort. This neat little option requires the <a href=\"http://tablesorter.com/docs/index.html\" rel=\"nofollow\">jQuery <code>tablesorter</code> plugin</a>. Here's how it works:</p>\n\n<p><strong>html</strong></p>\n\n<pre><code>&lt;table class=\"tablesorter boxlist\" id=\"pmtable\"&gt;\n&lt;thead class=\"fixedheader\"&gt;\n        &lt;tr class=\"boxheadrow\"&gt;\n    &lt;th width=\"70px\" class=\"header\"&gt;Job Number&lt;/th&gt;\n    &lt;th width=\"10px\" class=\"header\"&gt;Pri&lt;/th&gt;\n    &lt;th width=\"70px\" class=\"header\"&gt;CLLI&lt;/th&gt;\n    &lt;th width=\"35px\" class=\"header\"&gt;Market&lt;/th&gt;\n    &lt;th width=\"35px\" class=\"header\"&gt;Job Status&lt;/th&gt;\n    &lt;th width=\"65px\" class=\"header\"&gt;Technology&lt;/th&gt;\n    &lt;th width=\"95px;\" class=\"header headerSortDown\"&gt;MEI&lt;/th&gt;\n    &lt;th width=\"95px\" class=\"header\"&gt;TEO Writer&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;Quote Due&lt;/th&gt;\n    &lt;th width=\"100px\" class=\"header\"&gt;Engineer&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;ML Due&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;ML Complete&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;SPEC Due&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;SPEC Complete&lt;/th&gt;\n    &lt;th width=\"100px\" class=\"header\"&gt;Install Supervisor&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;MasTec OJD&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;Install Start&lt;/th&gt;\n    &lt;th width=\"30px\" class=\"header\"&gt;Install Hours&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;Revised CRCD&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;Latest Ship-To-Site&lt;/th&gt;\n    &lt;th width=\"30px\" class=\"header\"&gt;Total Parts&lt;/th&gt;\n    &lt;th width=\"30px\" class=\"header\"&gt;OEM Rcvd&lt;/th&gt;\n    &lt;th width=\"30px\" class=\"header\"&gt;Minor Rcvd&lt;/th&gt;\n    &lt;th width=\"30px\" class=\"header\"&gt;Total Received&lt;/th&gt;\n    &lt;th width=\"30px\" class=\"header\"&gt;% On Site&lt;/th&gt;\n    &lt;th width=\"60px\" class=\"header\"&gt;Actions&lt;/th&gt;\n    &lt;/tr&gt;\n&lt;/thead&gt;\n&lt;tbody class=\"scrollable\"&gt;\n        &lt;tr data-job_id=\"3548\" data-ml_id=\"\" class=\"odd\"&gt;\n            &lt;td class=\"c black\"&gt;FL-8-RG9UP&lt;/td&gt;\n            &lt;td data-pri=\"2\" class=\"priority c yellow\"&gt;M&lt;/td&gt;\n            &lt;td class=\"c\"&gt;FTLDFLOV&lt;/td&gt;\n            &lt;td class=\"c\"&gt;SFL&lt;/td&gt;\n            &lt;td class=\"c\"&gt;NOI&lt;/td&gt;\n            &lt;td class=\"c\"&gt;TRANSPORT&lt;/td&gt;\n            &lt;td class=\"c\"&gt;&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Chris Byrd&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Apr 13, 2013&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Kris Hall&lt;/td&gt;\n            &lt;td class=\"c\"&gt;May 20, 2013&lt;/td&gt;\n            &lt;td class=\"c\"&gt;May 20, 2013&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Jun 5, 2013&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Jun 7, 2013&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Joseph Fitz&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Jun 10, 2013&lt;/td&gt;\n            &lt;td class=\"c\"&gt;TBD&lt;/td&gt;\n            &lt;td class=\"c\"&gt;123&lt;/td&gt;\n            &lt;td class=\"c revised_crcd\"&gt;&lt;input readonly=\"true\" name=\"revised_crcd\" value=\"Jul 26, 2013\" type=\"text\" size=\"12\" class=\"smInput r_crcd c hasDatepicker\" id=\"dp1377194058616\"&gt;&lt;/td&gt;\n            &lt;td class=\"c\"&gt;TBD&lt;/td&gt;\n            &lt;td class=\"c\"&gt;N/A&lt;/td&gt;\n            &lt;td class=\"c\"&gt;N/A&lt;/td&gt;\n            &lt;td class=\"c\"&gt;N/A&lt;/td&gt;\n            &lt;td class=\"c\"&gt;N/A&lt;/td&gt;\n            &lt;td class=\"c\"&gt;N/A&lt;/td&gt;\n            &lt;td class=\"actions\"&gt;&lt;span style=\"float:left;\" class=\"ui-icon ui-icon-folder-open editJob\" title=\"View this job\" s=\"\" details'=\"\"&gt;&lt;/span&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr data-job_id=\"4264\" data-ml_id=\"2959\" class=\"even\"&gt;\n            &lt;td class=\"c black\"&gt;MTS13009SF&lt;/td&gt;\n            &lt;td data-pri=\"2\" class=\"priority c yellow\"&gt;M&lt;/td&gt;\n            &lt;td class=\"c\"&gt;OJUSFLTL&lt;/td&gt;\n            &lt;td class=\"c\"&gt;SFL&lt;/td&gt;\n            &lt;td class=\"c\"&gt;NOI&lt;/td&gt;\n            &lt;td class=\"c\"&gt;TRANSPORT&lt;/td&gt;\n            &lt;td class=\"c\"&gt;&lt;/td&gt;\n            &lt;td class=\"c\"&gt;DeMarcus Stewart&lt;/td&gt;\n            &lt;td class=\"c\"&gt;May 22, 2013&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Ryan Alsobrook&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Jun 19, 2013&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Jun 27, 2013&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Jun 19, 2013&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Jul 4, 2013&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Randy Williams&lt;/td&gt;\n            &lt;td class=\"c\"&gt;Jun 21, 2013&lt;/td&gt;\n            &lt;td class=\"c\"&gt;TBD&lt;/td&gt;\n            &lt;td class=\"c\"&gt;95&lt;/td&gt;\n            &lt;td class=\"c revised_crcd\"&gt;&lt;input readonly=\"true\" name=\"revised_crcd\" value=\"Aug 9, 2013\" type=\"text\" size=\"12\" class=\"smInput r_crcd c hasDatepicker\" id=\"dp1377194058632\"&gt;&lt;/td&gt;&lt;td class=\"c\"&gt;TBD&lt;/td&gt;\n            &lt;td class=\"c\"&gt;0&lt;/td&gt;\n            &lt;td class=\"c\"&gt;0.00%&lt;/td&gt;\n            &lt;td class=\"c\"&gt;0.00%&lt;/td&gt;\n            &lt;td class=\"c\"&gt;0.00%&lt;/td&gt;\n            &lt;td class=\"c\"&gt;0.00%&lt;/td&gt;\n            &lt;td class=\"actions\"&gt;&lt;span style=\"float:left;\" class=\"ui-icon ui-icon-folder-open editJob\" title=\"View this job\" s=\"\" details'=\"\"&gt;&lt;/span&gt;&lt;input style=\"float:left;\" type=\"hidden\" name=\"req_ship\" class=\"reqShip hasDatepicker\" id=\"dp1377194058464\"&gt;&lt;span style=\"float:left;\" class=\"ui-icon ui-icon-calendar requestShip\" title=\"Schedule this job for shipping\"&gt;&lt;/span&gt;&lt;span class=\"ui-icon ui-icon-info viewOrderInfo\" style=\"float:left;\" title=\"Show material details for this order\"&gt;&lt;/span&gt;&lt;/td&gt;\n        &lt;/tr&gt;\n        .\n        .\n        .\n        .\n        &lt;tr class=\"boxheadrow repeated-header\"&gt;\n        &lt;th width=\"70px\" class=\"header\"&gt;Job Number&lt;/th&gt;\n    &lt;th width=\"10px\" class=\"header\"&gt;Pri&lt;/th&gt;\n    &lt;th width=\"70px\" class=\"header\"&gt;CLLI&lt;/th&gt;\n    &lt;th width=\"35px\" class=\"header\"&gt;Market&lt;/th&gt;\n    &lt;th width=\"35px\" class=\"header\"&gt;Job Status&lt;/th&gt;\n    &lt;th width=\"65px\" class=\"header\"&gt;Technology&lt;/th&gt;\n    &lt;th width=\"95px;\" class=\"header\"&gt;MEI&lt;/th&gt;\n    &lt;th width=\"95px\" class=\"header\"&gt;TEO Writer&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;Quote Due&lt;/th&gt;\n    &lt;th width=\"100px\" class=\"header\"&gt;Engineer&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;ML Due&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;ML Complete&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;SPEC Due&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;SPEC Complete&lt;/th&gt;\n    &lt;th width=\"100px\" class=\"header\"&gt;Install Supervisor&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;MasTec OJD&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;Install Start&lt;/th&gt;\n    &lt;th width=\"30px\" class=\"header\"&gt;Install Hours&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;Revised CRCD&lt;/th&gt;\n    &lt;th width=\"75px\" class=\"header\"&gt;Latest Ship-To-Site&lt;/th&gt;\n    &lt;th width=\"30px\" class=\"header\"&gt;Total Parts&lt;/th&gt;\n    &lt;th width=\"30px\" class=\"header\"&gt;OEM Rcvd&lt;/th&gt;\n    &lt;th width=\"30px\" class=\"header\"&gt;Minor Rcvd&lt;/th&gt;\n    &lt;th width=\"30px\" class=\"header\"&gt;Total Received&lt;/th&gt;\n    &lt;th width=\"30px\" class=\"header\"&gt;% On Site&lt;/th&gt;\n    &lt;th width=\"60px\" class=\"header\"&gt;Actions&lt;/th&gt;\n    &lt;/tr&gt;\n</code></pre>\n\n<p>Obvioiusly, my table has many more rows than this. 193 to be exact, nut you can see where the header row repeats. The repeating header row is setup by this function:</p>\n\n<p><strong>jQuery</strong></p>\n\n<pre><code>    // clone the original header row and add the \"repeated-header\" class\nvar tblHeader = $('tr.boxheadrow').clone().addClass('repeated-header');\n    // add the cloned header with the new class every 34th row (or as you see fit)\n$('tbody tr:odd:nth-of-type(17n)').after(tblHeader);\n    // on the 'sortStart' routine, remove all the inserted header rows\n$('#pmtable').bind('sortStart', function() {\n    $('.repeated-header').remove();\n    // on the 'sortEnd' routine, add back all the header row lines.\n}).bind('sortEnd', function() {\n    $('tbody tr:odd:nth-of-type(17n)').after(tblHeader);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I wish I had found @Mark's solution earlier, but I went and wrote my own before I saw this SO question...</p>\n\n<p>Mine is a very lightweight jQuery plugin that supports fixed header, footer, column spanning (colspan), resizing, horizontal scrolling, and an optional number of rows to display before scrolling starts.</p>\n\n<p><a href=\"https://github.com/nheldman/jquery.scrollTableBody\" rel=\"nofollow\">jQuery.scrollTableBody (GitHub)</a></p>\n\n<p>As long as you have a table with proper <code>&lt;thead&gt;</code>, <code>&lt;tbody&gt;</code>, and (optional) <code>&lt;tfoot&gt;</code>, all you need to do is this:</p>\n\n<pre><code>$('table').scrollTableBody();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h1>TL;DR</h1>\n\n<p>If you target modern browsers and don't have extravagant styling needs: <a href=\"http://jsfiddle.net/dPixie/byB9d/3/\">http://jsfiddle.net/dPixie/byB9d/3/</a> ... Although the <a href=\"http://www.imaputz.com/cssStuff/bigFourVersion.html\">big four version</a> is pretty sweet as well this version handles fluid width a lot better.</p>\n\n<h1>Good news everyone!</h1>\n\n<p>With the advances of HTML5 and CSS3 this is now possible, at least for modern browsers. The slightly hackish implementation I came up with can be found here: <a href=\"http://jsfiddle.net/dPixie/byB9d/3/\">http://jsfiddle.net/dPixie/byB9d/3/</a>. I have tested it in FX 25, Chrome 31 and IE 10 ...</p>\n\n<p>Relevant HTML (insert a HTML5 doctype at the top of your document though):</p>\n\n<pre><code>&lt;section class=\"positioned\"&gt;\n  &lt;div class=\"container\"&gt;\n    &lt;table&gt;\n      &lt;thead&gt;\n        &lt;tr class=\"header\"&gt;\n          &lt;th&gt;\n            Table attribute name\n            &lt;div&gt;Table attribute name&lt;/div&gt;\n          &lt;/th&gt;\n          &lt;th&gt;\n            Value\n            &lt;div&gt;Value&lt;/div&gt;\n          &lt;/th&gt;\n          &lt;th&gt;\n            Description\n            &lt;div&gt;Description&lt;/div&gt;\n          &lt;/th&gt;\n        &lt;/tr&gt;\n      &lt;/thead&gt;\n      &lt;tbody&gt;\n        &lt;tr&gt;\n          &lt;td&gt;align&lt;/td&gt;\n          &lt;td&gt;left, center, right&lt;/td&gt;\n          &lt;td&gt;Not supported in HTML5. Deprecated in HTML 4.01. Specifies the alignment of a table according to surrounding text&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;bgcolor&lt;/td&gt;\n          &lt;td&gt;rgb(x,x,x), #xxxxxx, colorname&lt;/td&gt;\n          &lt;td&gt;Not supported in HTML5. Deprecated in HTML 4.01. Specifies the background color for a table&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;border&lt;/td&gt;\n          &lt;td&gt;1,\"\"&lt;/td&gt;\n          &lt;td&gt;Specifies whether the table cells should have borders or not&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;cellpadding&lt;/td&gt;\n          &lt;td&gt;pixels&lt;/td&gt;\n          &lt;td&gt;Not supported in HTML5. Specifies the space between the cell wall and the cell content&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;cellspacing&lt;/td&gt;\n          &lt;td&gt;pixels&lt;/td&gt;\n          &lt;td&gt;Not supported in HTML5. Specifies the space between cells&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;frame&lt;/td&gt;\n          &lt;td&gt;void, above, below, hsides, lhs, rhs, vsides, box, border&lt;/td&gt;\n          &lt;td&gt;Not supported in HTML5. Specifies which parts of the outside borders that should be visible&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;rules&lt;/td&gt;\n          &lt;td&gt;none, groups, rows, cols, all&lt;/td&gt;\n          &lt;td&gt;Not supported in HTML5. Specifies which parts of the inside borders that should be visible&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;summary&lt;/td&gt;\n          &lt;td&gt;text&lt;/td&gt;\n          &lt;td&gt;Not supported in HTML5. Specifies a summary of the content of a table&lt;/td&gt;\n        &lt;/tr&gt;\n        &lt;tr&gt;\n          &lt;td&gt;width&lt;/td&gt;\n          &lt;td&gt;pixels, %&lt;/td&gt;\n          &lt;td&gt;Not supported in HTML5. Specifies the width of a table&lt;/td&gt;\n        &lt;/tr&gt;\n      &lt;/tbody&gt;\n    &lt;/table&gt;\n  &lt;/div&gt;\n&lt;/section&gt;\n</code></pre>\n\n<p>With this CSS:</p>\n\n<pre><code>html, body{\n  margin:0;\n  padding:0;\n  height:100%;\n}\nsection {\n  position: relative;\n  border: 1px solid #000;\n  padding-top: 37px;\n  background: #500;\n}\nsection.positioned {\n  position: absolute;\n  top:100px;\n  left:100px;\n  width:800px;\n  box-shadow: 0 0 15px #333;\n}\n.container {\n  overflow-y: auto;\n  height: 200px;\n}\ntable {\n  border-spacing: 0;\n  width:100%;\n}\ntd + td {\n  border-left:1px solid #eee;\n}\ntd, th {\n  border-bottom:1px solid #eee;\n  background: #ddd;\n  color: #000;\n  padding: 10px 25px;\n}\nth {\n  height: 0;\n  line-height: 0;\n  padding-top: 0;\n  padding-bottom: 0;\n  color: transparent;\n  border: none;\n  white-space: nowrap;\n}\nth div{\n  position: absolute;\n  background: transparent;\n  color: #fff;\n  padding: 9px 25px;\n  top: 0;\n  margin-left: -25px;\n  line-height: normal;\n  border-left: 1px solid #800;\n}\nth:first-child div{\n  border: none;\n}\n</code></pre>\n\n<h1>But how?!</h1>\n\n<p>Simply put you have a table header, that you visually hide by making it 0px high, that also contains divs used as the fixed header. The table's container leaves enough room at the top to allow for the absolutely positioned header, and the table with scrollbars appear as you would expect.</p>\n\n<p>The code above uses the positioned class to position the table absolutely (I'm using it in a popup style dialog) but you can use it in the flow of the document as well by removing the <code>positioned</code> class from the container.</p>\n\n<h1>But ...</h1>\n\n<p>It's not perfect. Firefox refuses to make the header row 0px (at least I did not find any way) but stubbornly keeps it at minimum 4px ... It's not a huge problem, but depending on your styling it will mess with your borders etc.</p>\n\n<p>The table is also using a faux column approach where the background color of the container itself is used as the background for the header divs, that are transparent.</p>\n\n<h1>Summary</h1>\n\n<p>All in all there might be styling issues depending on your requirements, especially borders or complicated backgrounds. There might also be problems with computability, I haven't checked it in a wide variety of browsers yet (please comment with your experiences if you try it out), but I didn't find anything like it so I thought it was worth posting anyway ...</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I also created a plugin that addresses this issue. My project - <a href=\"http://mkoryak.github.io/floatThead/\" rel=\"nofollow\">jQuery.floatThead</a> has been around for over a year now and is very mature. </p>\n\n<p>It requires no external styles and does not expect your table to be styled in any particular way. It supports IE8+ and FF/Chrome.</p>\n\n<p>Currently it has:</p>\n\n<blockquote>\n  <p>144 commits and 202 stars on github</p>\n</blockquote>\n\n<hr>\n\n<p>Many (not all) of the answers here are quick hacks that may have solved the problem one person was having but will work not for every table.  </p>\n\n<p>Some of the other plugins are old and probably work great  with IE but will break on FF and chrome.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I developed a simple light weight jQuery plug-in for converting a well HTML table to a scrollable table with fixed table header and columns.</p>\n\n<p>The plugin works well to match pixel-to-pixel positioning the fixed section with the scrollable section. Additionally, you could also freeze number of columns that will be always in view when scrolling horizontally. </p>\n\n<p>Demo &amp; Documentation: <strong><a href=\"http://meetselva.github.io/fixed-table-rows-cols/\" rel=\"nofollow\">http://meetselva.github.io/fixed-table-rows-cols/</a></strong> </p>\n\n<p>Github Repo: <strong><a href=\"https://github.com/meetselva/fixed-table-rows-cols\" rel=\"nofollow\">https://github.com/meetselva/fixed-table-rows-cols</a></strong></p>\n\n<p>Below is the usage for a simple table with fixed header,</p>\n\n<pre><code>$(&lt;table selector&gt;).fxdHdrCol({\n    width:     \"100%\",\n    height:    200,\n    colModal: [{width: 30, align: 'center'},\n               {width: 70, align: 'center'}, \n               {width: 200, align: 'left'}, \n               {width: 100, align: 'center'}, \n               {width: 70, align: 'center'}, \n               {width: 250, align: 'center'}\n              ]\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A lot of people seem to be looking for this answer, I found it buried in an answer to another question here: <a href=\"http://stackoverflow.com/questions/3580016/syncing-column-width-of-between-tables-in-two-different-frames-etc\">Syncing column width of between tables in two different frames, etc</a></p>\n\n<p>Of the dozens of methods I have tried this is the only method I found that works reliably to allow you to have a scrolling bottom table with the header table having the same widths.</p>\n\n<p>Here is how I did it, first I improved upon the jsfiddle above to create this function, which works on both td and th (in case that trips up others who use th for styling of their header rows).</p>\n\n<pre><code>var setHeaderTableWidth= function (headertableid,basetableid) {\n            $(\"#\"+headertableid).width($(\"#\"+basetableid).width());\n            $(\"#\"+headertableid+\" tr th\").each(function (i) {\n                $(this).width($($(\"#\"+basetableid+\" tr:first td\")[i]).width());\n            });\n            $(\"#\" + headertableid + \" tr td\").each(function (i) {\n                $(this).width($($(\"#\" + basetableid + \" tr:first td\")[i]).width());\n            });\n        }\n</code></pre>\n\n<p>Next, you need to create two tables, NOTE the header table should have an extra TD to leave room in the top table for the scrollbar, like this:</p>\n\n<pre><code> &lt;table id=\"headertable1\" class=\"input-cells table-striped\"&gt;\n        &lt;thead&gt;\n            &lt;tr style=\"background-color:darkgray;color:white;\"&gt;&lt;th&gt;header1&lt;/th&gt;&lt;th&gt;header2&lt;/th&gt;&lt;th&gt;header3&lt;/th&gt;&lt;th&gt;header4&lt;/th&gt;&lt;th&gt;header5&lt;/th&gt;&lt;th&gt;header6&lt;/th&gt;&lt;th&gt;&lt;/th&gt;&lt;/tr&gt;\n        &lt;/thead&gt;\n     &lt;/table&gt;\n    &lt;div id=\"resizeToBottom\" style=\"overflow-y:scroll;overflow-x:hidden;\"&gt;\n        &lt;table id=\"basetable1\" class=\"input-cells table-striped\"&gt;\n            &lt;tbody &gt;\n                &lt;tr&gt;\n                    &lt;td&gt;testdata&lt;/td&gt;\n                    &lt;td&gt;2&lt;/td&gt;\n                    &lt;td&gt;3&lt;/td&gt;\n                    &lt;td&gt;4&lt;/span&gt;&lt;/td&gt;\n                    &lt;td&gt;55555555555555&lt;/td&gt;\n                    &lt;td&gt;test&lt;/td&gt;&lt;/tr&gt;\n            &lt;/tbody&gt;\n        &lt;/table&gt;\n    &lt;/div&gt;\n</code></pre>\n\n<p>then do something like:</p>\n\n<pre><code>        setHeaderTableWidth('headertable1', 'basetable1');\n        $(window).resize(function () {\n            setHeaderTableWidth('headertable1', 'basetable1');\n        });\n</code></pre>\n\n<p>This is the only solution that I found on stackoverflow that works out of many similar questions that have been posted, that works in all my cases.</p>\n\n<p>For example I tried the jquery stickytables plugin which does not work with durandal, and the google code project here <a href=\"https://code.google.com/p/js-scroll-table-header/issues/detail?id=2\" rel=\"nofollow\">https://code.google.com/p/js-scroll-table-header/issues/detail?id=2</a></p>\n\n<p>Other solutions involving cloning the tables, have poor performance, or suck and don't work in all cases. </p>\n\n<p>THERE IS NO NEED FOR THESE OVERLY COMPLEX SOLUTIONS, JUST MAKE TWO TABLES LIKE THE EXAMPLES BELOW AND CALL setHeaderTableWidth function like described here and BOOM, YOU ARE DONE.</p>\n\n<p>If this does not work for you, you probably were playing with your css box-sizing property and you need to set it correctly. It is easy to screw up your css by accident there are many things that can go wrong so just be aware/careful of that. THIS APPROACH WORKS FOR ME. I'm curious if it works for others, let me know. Good luck!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a solution that we ended up working with (in order to deal with some edge cases and older versions of IE we eventually also faded out the title bar on scroll then fade it back in when scrolling ends, but in Firefox and Webkit browsers this solution <em>just works</em>. It assumes border-collapse: collapse.</p>\n\n<p>The key to this solution is that once you apply <strong>border-collapse</strong>, <strong>CSS transforms</strong> work on the header, so it's just a matter of intercepting scroll events and setting the transform correctly. You don't need to duplicate anything. Short of this behavior being implemented properly in the browser, it's hard to imagine a more light-weight solution.</p>\n\n<p>JSFiddle: <a href=\"http://jsfiddle.net/podperson/tH9VU/2/\" rel=\"nofollow\">http://jsfiddle.net/podperson/tH9VU/2/</a></p>\n\n<p>It's implemented as a simple jQuery plugin. You simply make your thead's sticky with a call like $('thead').sticky() and they'll hang around. Works for multiple tables on a page and head sections halfway down big tables.</p>\n\n<pre><code>        $.fn.sticky = function(){\n        $(this).each( function(){\n            var thead = $(this),\n                tbody = thead.next('tbody');\n\n            updateHeaderPosition();\n\n            function updateHeaderPosition(){\n                if( \n                    thead.offset().top &lt; $(document).scrollTop()\n                    &amp;&amp; tbody.offset().top + tbody.height() &gt; $(document).scrollTop()\n                ){\n                    var tr = tbody.find('tr').last(),\n                        y = tr.offset().top - thead.height() &lt; $(document).scrollTop()\n                            ? tr.offset().top - thead.height() - thead.offset().top\n                            : $(document).scrollTop() - thead.offset().top;\n\n                    thead.find('th').css({\n                        'z-index': 100,\n                        'transform': 'translateY(' + y + 'px)',\n                        '-webkit-transform': 'translateY(' + y + 'px)'\n                    });\n                } else {\n                    thead.find('th').css({\n                        'transform': 'none',\n                        '-webkit-transform': 'none'\n                    });\n                }\n            }\n\n            // see http://www.quirksmode.org/dom/events/scroll.html\n            $(window).on('scroll', updateHeaderPosition);\n        });\n    }\n\n    $('thead').sticky();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h2>A More Refined Pure CSS Scrolling Table</h2>\n\n<p>All of the pure CSS solutions I've seen so far-- clever though they may be-- lack a certain level of polish, or just don't work right in some situations. So, I decided to create my own...</p>\n\n<p>Features:</p>\n\n<ul>\n<li>it's pure CSS, so no jQuery required (or any javascript at all, for that\nmatter)</li>\n<li>you can set the table width to a percent (a.k.a. \"fluid\") or a fixed value, or let the content determine its width (a.k.a. \"auto\")</li>\n<li>column widths can also be fluid, fixed, or auto.</li>\n<li>columns will never become misaligned with headers due to horizontal scrolling (a problem that occurs in every other CSS-based solution I've seen that doesn't require fixed widths).</li>\n<li>compatible with all of the popular desktop browsers, including Internet Explorer back to version 8</li>\n<li>clean, polished appearance; no sloppy-looking 1-pixel gaps or misaligned borders; looks the same in all browsers</li>\n</ul>\n\n<p>Here are a couple fiddles that show the fluid and auto width options:</p>\n\n<ul>\n<li><p><strong>Fluid Width and Height</strong> (adapts to screen size): <strong><a href=\"http://jsfiddle.net/doctorDestructo/kn4xprgx/\" rel=\"nofollow\">jsFiddle</a></strong> (Note that the scrollbar only shows up when needed in this configuration, so you may have to shrink the frame to see it)</p></li>\n<li><p><strong>Auto Width, Fixed Height</strong> (easier to integrate with other content): <strong><a href=\"http://jsfiddle.net/doctorDestructo/x54uraaq/\" rel=\"nofollow\">jsFiddle</a></strong></p></li>\n</ul>\n\n<p>The Auto Width, Fixed Height configuration probably has more use cases, so I'll post the code below.</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;div class=\"scrollingtable\"&gt;\n  &lt;div&gt;\n    &lt;div&gt;\n      &lt;table&gt;\n        &lt;caption&gt;Top Caption&lt;/caption&gt;\n        &lt;thead&gt;\n          &lt;tr&gt;\n            &lt;th&gt;&lt;div label=\"Column 1\"/&gt;&lt;/th&gt;\n            &lt;th&gt;&lt;div label=\"Column 2\"/&gt;&lt;/th&gt;\n            &lt;th&gt;&lt;div label=\"Column 3\"/&gt;&lt;/th&gt;\n            &lt;th&gt;\n              &lt;!--more versatile way of doing column label; requires 2 identical copies of label--&gt;\n              &lt;div&gt;&lt;div&gt;Column 4&lt;/div&gt;&lt;div&gt;Column 4&lt;/div&gt;&lt;/div&gt;\n            &lt;/th&gt;\n            &lt;th class=\"scrollbarhead\"/&gt; &lt;!--ALWAYS ADD THIS EXTRA CELL AT END OF HEADER ROW--&gt;\n          &lt;/tr&gt;\n        &lt;/thead&gt;\n        &lt;tbody&gt;\n          &lt;tr&gt;&lt;td&gt;Lorem ipsum&lt;/td&gt;&lt;td&gt;Dolor&lt;/td&gt;&lt;td&gt;Sit&lt;/td&gt;&lt;td&gt;Amet consectetur&lt;/td&gt;&lt;/tr&gt;\n          &lt;tr&gt;&lt;td&gt;Lorem ipsum&lt;/td&gt;&lt;td&gt;Dolor&lt;/td&gt;&lt;td&gt;Sit&lt;/td&gt;&lt;td&gt;Amet consectetur&lt;/td&gt;&lt;/tr&gt;\n          &lt;tr&gt;&lt;td&gt;Lorem ipsum&lt;/td&gt;&lt;td&gt;Dolor&lt;/td&gt;&lt;td&gt;Sit&lt;/td&gt;&lt;td&gt;Amet consectetur&lt;/td&gt;&lt;/tr&gt;\n          &lt;tr&gt;&lt;td&gt;Lorem ipsum&lt;/td&gt;&lt;td&gt;Dolor&lt;/td&gt;&lt;td&gt;Sit&lt;/td&gt;&lt;td&gt;Amet consectetur&lt;/td&gt;&lt;/tr&gt;\n          &lt;tr&gt;&lt;td&gt;Lorem ipsum&lt;/td&gt;&lt;td&gt;Dolor&lt;/td&gt;&lt;td&gt;Sit&lt;/td&gt;&lt;td&gt;Amet consectetur&lt;/td&gt;&lt;/tr&gt;\n          &lt;tr&gt;&lt;td&gt;Lorem ipsum&lt;/td&gt;&lt;td&gt;Dolor&lt;/td&gt;&lt;td&gt;Sit&lt;/td&gt;&lt;td&gt;Amet consectetur&lt;/td&gt;&lt;/tr&gt;\n          &lt;tr&gt;&lt;td&gt;Lorem ipsum&lt;/td&gt;&lt;td&gt;Dolor&lt;/td&gt;&lt;td&gt;Sit&lt;/td&gt;&lt;td&gt;Amet consectetur&lt;/td&gt;&lt;/tr&gt;\n          &lt;tr&gt;&lt;td&gt;Lorem ipsum&lt;/td&gt;&lt;td&gt;Dolor&lt;/td&gt;&lt;td&gt;Sit&lt;/td&gt;&lt;td&gt;Amet consectetur&lt;/td&gt;&lt;/tr&gt;\n          &lt;tr&gt;&lt;td&gt;Lorem ipsum&lt;/td&gt;&lt;td&gt;Dolor&lt;/td&gt;&lt;td&gt;Sit&lt;/td&gt;&lt;td&gt;Amet consectetur&lt;/td&gt;&lt;/tr&gt;\n          &lt;tr&gt;&lt;td&gt;Lorem ipsum&lt;/td&gt;&lt;td&gt;Dolor&lt;/td&gt;&lt;td&gt;Sit&lt;/td&gt;&lt;td&gt;Amet consectetur&lt;/td&gt;&lt;/tr&gt;\n          &lt;tr&gt;&lt;td&gt;Lorem ipsum&lt;/td&gt;&lt;td&gt;Dolor&lt;/td&gt;&lt;td&gt;Sit&lt;/td&gt;&lt;td&gt;Amet consectetur&lt;/td&gt;&lt;/tr&gt;\n          &lt;tr&gt;&lt;td&gt;Lorem ipsum&lt;/td&gt;&lt;td&gt;Dolor&lt;/td&gt;&lt;td&gt;Sit&lt;/td&gt;&lt;td&gt;Amet consectetur&lt;/td&gt;&lt;/tr&gt;\n        &lt;/tbody&gt;\n      &lt;/table&gt;\n    &lt;/div&gt;\n    Faux bottom caption\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<hr>\n\n<p><strong>CSS</strong></p>\n\n<pre><code>&lt;!--[if lte IE 9]&gt;&lt;style&gt;.scrollingtable &gt; div &gt; div &gt; table {margin-right: 17px;}&lt;/style&gt;&lt;![endif]--&gt;\n&lt;style&gt;\n/*the following html and body rule sets are required only if using a % width or height*/\n/*html {\n  width: 100%;\n  height: 100%;\n}*/\nbody {\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  padding: 0 20px 0 20px;\n        text-align: center;\n}\n.scrollingtable {\n  box-sizing: border-box;\n  display: inline-block;\n  vertical-align: middle;\n  overflow: hidden;\n  width: auto; /*if you want a fixed width, set it here, else set to auto*/\n  min-width: 0/*100%*/; /*if you want a % width, set it here, else set to 0*/\n  height: 188px/*100%*/; /*set table height here; can be fixed value or %*/\n  min-height: 0/*104px*/; /*if using % height, make this large enough to fit scrollbar arrows + caption + thead*/\n  font-family: Verdana, Tahoma, sans-serif;\n  font-size: 16px;\n  line-height: 20px;\n  padding: 20px 0 20px 0; /*need enough padding to make room for caption*/\n  text-align: left;\n}\n.scrollingtable * {box-sizing: border-box;}\n.scrollingtable &gt; div {\n  position: relative;\n  border-top: 1px solid black;\n  height: 100%;\n  padding-top: 20px; /*this determines column header height*/\n}\n.scrollingtable &gt; div:before {\n  top: 0;\n  background: cornflowerblue; /*header row background color*/\n}\n.scrollingtable &gt; div:before,\n.scrollingtable &gt; div &gt; div:after {\n  content: \"\";\n  position: absolute;\n  z-index: -1;\n  width: 100%;\n  height: 100%;\n  left: 0;\n}\n.scrollingtable &gt; div &gt; div {\n  min-height: 0/*43px*/; /*if using % height, make this large enough to fit scrollbar arrows*/\n  max-height: 100%;\n  overflow: scroll/*auto*/; /*set to auto if using fixed or % width; else scroll*/\n  overflow-x: hidden;\n  border: 1px solid black; /*border around table body*/\n}\n.scrollingtable &gt; div &gt; div:after {background: white;} /*match page background color*/\n.scrollingtable &gt; div &gt; div &gt; table {\n  width: 100%;\n  border-spacing: 0;\n  margin-top: -20px; /*inverse of column header height*/\n  /*margin-right: 17px;*/ /*uncomment if using % width*/\n}\n.scrollingtable &gt; div &gt; div &gt; table &gt; caption {\n  position: absolute;\n  top: -20px; /*inverse of caption height*/\n  margin-top: -1px; /*inverse of border-width*/\n  width: 100%;\n  font-weight: bold;\n  text-align: center;\n}\n.scrollingtable &gt; div &gt; div &gt; table &gt; * &gt; tr &gt; * {padding: 0;}\n.scrollingtable &gt; div &gt; div &gt; table &gt; thead {\n  vertical-align: bottom;\n  white-space: nowrap;\n  text-align: center;\n}\n.scrollingtable &gt; div &gt; div &gt; table &gt; thead &gt; tr &gt; * &gt; div {\n  display: inline-block;\n  padding: 0 6px 0 6px; /*header cell padding*/\n}\n.scrollingtable &gt; div &gt; div &gt; table &gt; thead &gt; tr &gt; :first-child:before {\n  content: \"\";\n  position: absolute;\n  top: 0;\n  left: 0;\n  height: 20px; /*match column header height*/\n  border-left: 1px solid black; /*leftmost header border*/\n}\n.scrollingtable &gt; div &gt; div &gt; table &gt; thead &gt; tr &gt; * &gt; div[label]:before,\n.scrollingtable &gt; div &gt; div &gt; table &gt; thead &gt; tr &gt; * &gt; div &gt; div:first-child,\n.scrollingtable &gt; div &gt; div &gt; table &gt; thead &gt; tr &gt; * + :before {\n  position: absolute;\n  top: 0;\n  white-space: pre-wrap;\n  color: white; /*header row font color*/\n}\n.scrollingtable &gt; div &gt; div &gt; table &gt; thead &gt; tr &gt; * &gt; div[label]:before,\n.scrollingtable &gt; div &gt; div &gt; table &gt; thead &gt; tr &gt; * &gt; div[label]:after {content: attr(label);}\n.scrollingtable &gt; div &gt; div &gt; table &gt; thead &gt; tr &gt; * + :before {\n  content: \"\";\n  display: block;\n  min-height: 20px; /*match column header height*/\n  padding-top: 1px;\n  border-left: 1px solid black; /*borders between header cells*/\n}\n.scrollingtable .scrollbarhead {float: right;}\n.scrollingtable .scrollbarhead:before {\n  position: absolute;\n  width: 100px;\n  top: -1px; /*inverse border-width*/\n  background: white; /*match page background color*/\n}\n.scrollingtable &gt; div &gt; div &gt; table &gt; tbody &gt; tr:after {\n  content: \"\";\n  display: table-cell;\n  position: relative;\n  padding: 0;\n  border-top: 1px solid black;\n  top: -1px; /*inverse of border width*/\n}\n.scrollingtable &gt; div &gt; div &gt; table &gt; tbody {vertical-align: top;}\n.scrollingtable &gt; div &gt; div &gt; table &gt; tbody &gt; tr {background: white;}\n.scrollingtable &gt; div &gt; div &gt; table &gt; tbody &gt; tr &gt; * {\n  border-bottom: 1px solid black;\n  padding: 0 6px 0 6px;\n  height: 20px; /*match column header height*/\n}\n.scrollingtable &gt; div &gt; div &gt; table &gt; tbody:last-of-type &gt; tr:last-child &gt; * {border-bottom: none;}\n.scrollingtable &gt; div &gt; div &gt; table &gt; tbody &gt; tr:nth-child(even) {background: gainsboro;} /*alternate row color*/\n.scrollingtable &gt; div &gt; div &gt; table &gt; tbody &gt; tr &gt; * + * {border-left: 1px solid black;} /*borders between body cells*/\n&lt;/style&gt;\n</code></pre>\n\n<hr>\n\n<p>The method I used to freeze the header row is similar to d-Pixie's, so refer to his post for an explanation. There were a slew of bugs and limitations with that technique that could only be fixed with heaps of additional CSS and an extra div container or two.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h2>This can be cleanly solved in four lines of code.</h2>\n\n<p>If you only care about modern browsers, a fixed header can be achieved much easier by using CSS transforms. Sounds odd, but works great:</p>\n\n<ul>\n<li>HTML and CSS stay as-is.</li>\n<li>No external JS dependencies.</li>\n<li>4 lines of code.</li>\n<li>Works for all configurations (table-layout: fixed etc).</li>\n</ul>\n\n<pre class=\"lang-js prettyprint-override\"><code>document.getElementById(\"wrap\").addEventListener(\"scroll\",function(){\n   var translate = \"translate(0,\"+this.scrollTop+\"px)\";\n   this.querySelector(\"thead\").style.transform = translate;\n});\n</code></pre>\n\n<p>Support for CSS Transforms is <a href=\"http://caniuse.com/#feat=transforms2d\" rel=\"nofollow\">widely available</a> except for IE8-. Some browsers still require vendor prefixes though. \nHere is the full example for reference:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>document.getElementById(\"wrap\").addEventListener(\"scroll\",function(){\r\n   var translate = \"translate(0,\"+this.scrollTop+\"px)\";\r\n   this.querySelector(\"thead\").style.transform = translate;\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>/* your existing container */\r\n#wrap {\r\n    overflow: auto;\r\n    height: 400px;\r\n}\r\n\r\n/* css for demo */\r\ntd {\r\n    background-color: green;\r\n    width: 200px;\r\n    height: 100px;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"wrap\"&gt;\r\n    &lt;table&gt;\r\n        &lt;thead&gt;\r\n            &lt;tr&gt;\r\n                &lt;th&gt;Foo&lt;/th&gt;\r\n                &lt;th&gt;Bar&lt;/th&gt;\r\n            &lt;/tr&gt;\r\n        &lt;/thead&gt;\r\n        &lt;tbody&gt;\r\n            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\r\n            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\r\n            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\r\n            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\r\n            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\r\n            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\r\n            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\r\n            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\r\n            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\r\n            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\r\n            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\r\n            &lt;tr&gt;&lt;td&gt;&lt;/td&gt;&lt;td&gt;&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;/tbody&gt;\r\n    &lt;/table&gt;\r\n&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is there a cross-browser CSS/JavaScript technique to display a long HTML table such that the column headers stay fixed on-screen and do not scroll with the table body. Think of the \"freeze panes\" effect in Microsoft Excel.</p>\n\n<p>I want to be able to scroll through the contents of the table, but to always be able to see the column headers at the top.</p>\n",
            "last_activity_date": 1411315552,
            "question_id": 673153,
            "score": 132,
            "tags": [
                "javascript",
                "html",
                "css"
            ],
            "title": "HTML table with fixed headers?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>You shouldn't need to. Allow the user to have whatever preferences they want.</p>\n\n<p>Firefox does that by default because opening a page in a new window is annoying and a page should never be allowed to do so if that is not what is desired by the user. (Firefox does allow you to open tabs in a new window if you set it that way).</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I may be wrong, but from what I understand, this is controlled by the user's browser preferences, and I do not believe that this can be overridden.</p>\n",
                    "is_accepted": false,
                    "score": 74
                },
                {
                    "body": "<p>Try:</p>\n\n<pre><code>window.open(\"\", [window name], \"height=XXX,width=XXX,modal=yes,alwaysRaised=yes\");\n</code></pre>\n\n<p>I have some code that does what your say, but there is a lot of parameters in it.  I think these are the bare minimum, let me know if it doesn't work, I'll post the rest.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Give the window a 'specs' parameter with width/height.  See <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.open#Position_and_size_features\">here</a> for all the possible options.</p>\n\n<pre><code>window.open(url, windowName, \"height=200,width=200\");\n</code></pre>\n\n<p>When you specify a width/height, it opens it in a new window instead of a tab.</p>\n",
                    "is_accepted": true,
                    "score": 272
                },
                {
                    "body": "<p>You don't need to use height, just make sure you use <code>_blank</code>,  Without it, it opens in a new tab.</p>\n\n<p>For a empty window:</p>\n\n<pre><code>window.open('', '_blank', 'toolbar=0,location=0,menubar=0');\n</code></pre>\n\n<p>For a specific URL:</p>\n\n<pre><code>window.open('http://www.google.com', '_blank', 'toolbar=0,location=0,menubar=0');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p>You might try following function:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>&lt;script type=\"text/javascript\"&gt;\nfunction open(url)\n{\n  var popup = window.open(url, \"_blank\", \"width=200, height=200\") ;\n  popup.location = URL;\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>The HTML code for execution:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;a href=\"#\" onclick=\"open('http://www.google.com')\"&gt;google search&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Interestingly, I found that if you pass in an <strong>empty</strong> string (as opposed to a null string, or a list of properties) for the third attribute of window.open, it would open in a new tab for Chrome, Firefox, and IE.  If absent, the behavior was different.</p>\n\n<p>So, this is my new call:</p>\n\n<pre><code> window.open(url, windowName, '');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The key is the parameters :</p>\n\n<p>If you <strong>provide</strong>  Parameters [ Height=\"\" , Width=\"\" ] , then it will open in new windows.</p>\n\n<p>If you <strong>DON'T provide</strong> Parameters , then  it will open in new tab.</p>\n\n<p>Tested in Chrome and Firefox</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Answered <a href=\"http://stackoverflow.com/a/13158856/1504589\">here</a>. But posting it again for reference. </p>\n\n<p><code>window.open()</code> will not open in new tab if it is not happening on actual click event. In the example given the url is being opened on actual click event. This will work provided user has appropriate settings in the browser.</p>\n\n<pre><code>&lt;a class=\"link\"&gt;Link&lt;/a&gt;\n&lt;script  type=\"text/javascript\"&gt;\n     $(\"a.link\").on(\"click\",function(){\n         window.open('www.yourdomain.com','_blank');\n     });\n&lt;/script&gt;\n</code></pre>\n\n<p>Similarly, if you are trying to do an ajax call within the click function and want to open a window on success, ensure you are doing the ajax call with <code>async : false</code> option set.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>try that method.....</p>\n\n<pre><code>function popitup(url) {\n       //alert(url);\n       newwindow=window.open(\"http://www.zeeshanakhter.com\",\"_blank\",\"toolbar=yes,scrollbars=yes, resizable=yes, top=500, left=500, width=400, height=400\");\n       newwindow.moveTo(350,150);\n   if (window.focus) \n          {\n             newwindow.focus()\n          }\n   return false;\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Tested in Chrome 31.0.1650.63, Firefox 25.01, Safari 6.1.1, and IE 9:</p>\n\n<pre><code>window.open(url, true, '_blank');\n</code></pre>\n\n<p>Why it works, I don't know, but it does.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>I think its not html target properties problem but you unchecked \"open nw windows in a new tab instead\" option in \"tab\" tab under firefox \"options\" menu. check it and try again. </p>\n\n<p><img src=\"http://i.stack.imgur.com/Kxx2D.png\" alt=\"enter image description here\"> </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had this same question but found a relatively simple solution to it. </p>\n\n<p>In JavaScript I was checking for <code>window.opener !=null;</code> to determine if the window was a pop up. If you're using some similar detection code to determine if the window you're site is being rendered in is a pop up you can easily <em>\"turn it off\"</em> when you want to open a <em>\"new\"</em> window using the new windows JavaScript. </p>\n\n<p>Just put this at the top of your page you want to always be a <em>\"new\"</em> window.</p>\n\n\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    window.opener=null;\n&lt;/script&gt;\n</code></pre>\n\n<p>I use this on the log in page of my site so users don't get pop up behavior if they use a pop up window to navigate to my site. </p>\n\n<p>You could even create a simple redirect page that does this and then moves to the URL you gave it. Something like,</p>\n\n<p><strong>JavaScript on parent page:</strong></p>\n\n<pre><code>window.open(\"MyRedirect.html?URL=\"+URL, \"_blank\");\n</code></pre>\n\n<p>And then by using a little javascript from <a href=\"http://stackoverflow.com/a/5448635/839501\">here</a> you can get the URL and redirect to it.</p>\n\n<p><strong>JavaScript on Redirect Page:</strong></p>\n\n<pre><code> &lt;script type=\"text/javascript\"&gt;\n        window.opener=null;\n\n    function getSearchParameters() {\n          var prmstr = window.location.search.substr(1);\n          return prmstr != null &amp;&amp; prmstr != \"\" ? transformToAssocArray(prmstr) : {};\n    }\n\n    function transformToAssocArray( prmstr ) {\n        var params = {};\n        var prmarr = prmstr.split(\"&amp;\");\n        for ( var i = 0; i &lt; prmarr.length; i++) {\n            var tmparr = prmarr[i].split(\"=\");\n            params[tmparr[0]] = tmparr[1];\n        }\n        return params;\n    }\n\n    var params = getSearchParameters();\n    window.location = params.URL;\n    &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a select box that calls <code>window.open(url)</code> when an item is selected.  Firefox will open the page in a new tab by default.  However, I would like the page to open in a new window, not a new tab.  </p>\n\n<p>How can I accomplish this?</p>\n",
            "last_activity_date": 1417158358,
            "question_id": 726761,
            "score": 209,
            "tags": [
                "javascript",
                "firefox"
            ],
            "title": "JavaScript open in a new window, not tab"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Here is a fast and easy way of parsing query strings in JavaScript:</p>\n\n<pre><code>function getQueryVariable(variable) {\n    var query = window.location.search.substring(1);\n    var vars = query.split('&amp;');\n    for (var i = 0; i &lt; vars.length; i++) {\n        var pair = vars[i].split('=');\n        if (decodeURIComponent(pair[0]) == variable) {\n            return decodeURIComponent(pair[1]);\n        }\n    }\n    console.log('Query variable %s not found', variable);\n}\n</code></pre>\n\n<p>Now make a request to <strong>page.html?x=Hello</strong>:</p>\n\n<pre><code>console.log(getQueryVariable('x'));\n</code></pre>\n\n<p><em>Source</em>: <a href=\"http://www.idealog.us/2006/06/javascript_to_p.html\">http://www.idealog.us/2006/06/javascript_to_p.html</a></p>\n",
                    "is_accepted": false,
                    "score": 131
                },
                {
                    "body": "<p>Have a look at <a href=\"http://www.netlobo.com/url_query_string_javascript.html\" rel=\"nofollow\">this solution</a>. Using his function, you would just not to call <code>gup('dest')</code> to grab the URL <code>dest</code> parameter.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you know that you will only have that one querystring variable you can simply do:</p>\n\n<pre><code>var dest = location.search.replace(/^.*?\\=/, '');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The following function will parse the search string with a regular expression, cache the result and return the value of the requested variable:</p>\n\n<pre><code>window.getSearch = function(variable) {\n  var parsedSearch;\n  parsedSearch = window.parsedSearch || (function() {\n    var match, re, ret;\n    re = /\\??(.*?)=([^\\&amp;]*)&amp;?/gi;\n    ret = {};\n    while (match = re.exec(document.location.search)) {\n      ret[match[1]] = match[2];\n    }\n    return window.parsedSearch = ret;\n  })();\n  return parsedSearch[variable];\n</code></pre>\n\n<p>};</p>\n\n<p>You can either call it once without any parameters and work with the <code>window.parsedSearch</code> object, or call <code>getSearch</code> subsequently.\nI haven't fully tested this, the regular expression might still need some tweaking...</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's my version based loosely on Braceyard's version above but parsing into a 'dictionary' and support for search args without '='. In use it in my JQuery $(document).ready() function. The arguments are stored as key/value pairs in argsParsed, which you might want to save somewhere...</p>\n\n<pre><code>var args = document.location.search.substring(1).split('&amp;');\n\nvar argsParsed = {};\n\nfor (i=0; i &lt; args.length; i++)\n{\n    var arg = decodeURIComponent(args[i]);\n\n    if (arg.indexOf('=') == -1)\n    {\n        argsParsed[arg.trim()] = true;\n    }\n    else\n    {\n        var kvp = arg.split('=');\n        argsParsed[kvp[0].trim()] = kvp[1].trim();\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>How about this?</p>\n\n<pre><code>function getQueryVar(varName){\n    // Grab and unescape the query string - appending an '&amp;' keeps the RegExp simple\n    // for the sake of this example.\n    var queryStr = unescape(window.location.search) + '&amp;';\n\n    // Dynamic replacement RegExp\n    var regex = new RegExp('.*?[&amp;\\\\?]' + varName + '=(.*?)&amp;.*');\n\n    // Apply RegExp to the query string\n    val = queryStr.replace(regex, \"$1\");\n\n    // If the string is the same, we didn't find a match - return false\n    return val == queryStr ? false : val;\n}\n</code></pre>\n\n<p>..then just call it with:</p>\n\n<pre><code>alert('Var \"dest\" = ' + getQueryVar('dest'));\n</code></pre>\n\n<p>Cheers</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can also use the excellent <a href=\"http://medialize.github.com/URI.js/\">URI.js</a> library by <a href=\"http://rodneyrehm.de/en/\">Rodney Rehm</a>. Here's how:-</p>\n\n<pre><code>var qs = URI('www.mysite.com/default.aspx?dest=aboutus.aspx').query(true); // == { dest : 'aboutus.aspx' }\n    alert(qs.dest); // == aboutus.aspx\n</code></pre>\n\n<hr>\n\n<p>And to parse the query string of current page:-</p>\n\n<pre><code>var $_GET = URI(document.URL).query(true); // ala PHP\n    alert($_GET['dest']); // == aboutus.aspx \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<pre><code>function parseQuery(qstr)\n{\n  var query = {};\n  var a = qstr.split('&amp;');\n  for (var i in a)\n  {\n    var b = a[i].split('=');\n    query[decodeURIComponent(b[0])] = decodeURIComponent(b[1]);\n  }\n\n  return query;\n}\n</code></pre>\n\n<p>This takes the query string, and first finds each part, turning for example <code>hello=1&amp;another=2</code> into <code>[\"hello=1\",\"another=2\"]</code>. Next, the for loop splits each bit of the resulting array, resulting in an object <code>{hello: 1, another: 2}</code>. From there, it's easy to extract the variable you need. </p>\n\n<p>That said, it does not deal with array cases such as <code>\"hello=1&amp;hello=2&amp;hello=3\"</code>. To work with this, you must check whether a property of the object you make exists before adding to it, and turn the value of it into an array, pushing any additional bits</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I wanted to pick up <em>specific</em> links <em>within</em> a DOM element on a page, send those users to a redirect page on a timer and then pass them onto the original clicked URL. This is how I did it using regular javascript incorporating one of the methods above.</p>\n\n<p><strong>Page with links:</strong> <em>Head</em></p>\n\n<pre><code>  function replaceLinks() {   \nvar content = document.getElementById('mainContent');\n            var nodes = content.getElementsByTagName('a');\n        for (var i = 0; i &lt; document.getElementsByTagName('a').length; i++) {\n            {\n                href = nodes[i].href;\n                if (href.indexOf(\"thisurl.com\") != -1) {\n\n                    nodes[i].href=\"http://www.thisurl.com/redirect.aspx\" + \"?url=\" + nodes[i];\n                    nodes[i].target=\"_blank\";\n\n                }\n            }\n    }\n}\n</code></pre>\n\n<p><strong>Body</strong></p>\n\n<pre><code>&lt;body onload=\"replaceLinks()\"&gt;\n</code></pre>\n\n<p><strong>Redirect page</strong>\n<em>Head</em></p>\n\n<pre><code>   function getQueryVariable(variable) {\n        var query = window.location.search.substring(1);\n        var vars = query.split('&amp;');\n        for (var i = 0; i &lt; vars.length; i++) {\n            var pair = vars[i].split('=');\n            if (decodeURIComponent(pair[0]) == variable) {\n                return decodeURIComponent(pair[1]);\n            }\n        }\n        console.log('Query variable %s not found', variable);\n    }\n    function delayer(){\n        window.location = getQueryVariable('url')\n    }\n</code></pre>\n\n<p><em>Body</em></p>\n\n<pre><code>&lt;body onload=\"setTimeout('delayer()', 1000)\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Following on from my comment to the answer @bobby posted, here is the code I would use:</p>\n\n<pre><code>    function parseQuery(str)\n        {\n        if(typeof str != \"string\" || str.length == 0) return {};\n        var s = str.split(\"&amp;\");\n        var s_length = s.length;\n        var bit, query = {}, first, second;\n        for(var i = 0; i &lt; s_length; i++)\n            {\n            bit = s[i].split(\"=\");\n            first = decodeURIComponent(bit[0]);\n            if(first.length == 0) continue;\n            second = decodeURIComponent(bit[1]);\n            if(typeof query[first] == \"undefined\") query[first] = second;\n            else if(query[first] instanceof Array) query[first].push(second);\n            else query[first] = [query[first], second]; \n            }\n        return query;\n        }\n</code></pre>\n\n<p>This code takes in the querystring provided (as 'str') and returns an object. The string is split on all occurances of &amp;, resulting in an array. the array is then travsersed and each item in it is split by \"=\". This results in sub arrays wherein the 0th element is the parameter and the 1st element is the value (or undefined if no = sign). These are mapped to object properties, so for example the string \"hello=1&amp;another=2&amp;something\" is turned into:</p>\n\n<pre><code>{\nhello: \"1\",\nanother: \"2\",\nsomething: undefined\n}\n</code></pre>\n\n<p>In addition, this code notices repeating reoccurances such as \"hello=1&amp;hello=2\" and converts the result into an array, eg:</p>\n\n<pre><code>{\nhello: [\"1\", \"2\"]\n}\n</code></pre>\n\n<p>You'll also notice it deals with cases in whih the = sign is not used. It also ignores if there is an equal sign straight after an &amp; symbol.</p>\n\n<p>A bit overkill for the original question, but a reusable solution if you ever need to work with querystrings in javascript :)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I wanted a simple function that took a URL as an input and returned a map of the query params.\nIf I were to improve this function, I would support the standard for array data in the URL, and or nested variables. </p>\n\n<p>This should work back and for with the jQuery.param( qparams ) function.</p>\n\n<pre><code>function getQueryParams(url){\n    var qparams = {},\n        parts = (url||'').split('?'),\n        qparts, qpart,\n        i=0;\n\n    if(parts.length &lt;= 1 ){\n        return qparams;\n    }else{\n        qparts = parts[1].split('&amp;');\n        for(i in qparts){\n\n            qpart = qparts[i].split('=');\n            qparams[decodeURIComponent(qpart[0])] = \n                           decodeURIComponent(qpart[1] || '');\n        }\n    }\n\n    return qparams;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Me too! <a href=\"http://jsfiddle.net/drzaus/8EE8k/\">http://jsfiddle.net/drzaus/8EE8k/</a></p>\n\n<p><em>(Note: without fancy nested or duplicate checking)</em></p>\n\n<pre><code>deparam = function (querystring) {\n  // remove any preceding url and split\n  querystring = querystring.substring(querystring.indexOf('?')+1).split('&amp;');\n  var params = {}, pair, d = decodeURIComponent;\n  // march and parse\n  for (var i = querystring.length - 1; i &gt;= 0; i--) {\n    pair = querystring[i].split('=');\n    params[d(pair[0])] = d(pair[1]);\n  }\n\n  return params;\n};//--  fn  deparam\n</code></pre>\n\n<p>And tests:</p>\n\n<pre><code>var tests = {};\ntests[\"simple params\"] = \"ID=2&amp;first=1&amp;second=b\";\ntests[\"full url\"] = \"http://blah.com/?\" + tests[\"simple params\"];\ntests['just ?'] = '?' + tests['simple params'];\n\nvar $output = document.getElementById('output');\nfunction output(msg) {\n  $output.innerHTML += \"\\n\" + Array.prototype.slice.call(arguments, 0).join(\"\\n\");\n}\n$.each(tests, function(msg, test) {\n  var q = deparam(test);\n  // prompt, querystring, result, reverse\n  output(msg, test, JSON.stringify(q), $.param(q));\n  output('-------------------');\n});\n</code></pre>\n\n<p>Results in:</p>\n\n<pre><code>simple params\nID=2&amp;first=1&amp;second=b\n{\"second\":\"b\",\"first\":\"1\",\"ID\":\"2\"}\nsecond=b&amp;first=1&amp;ID=2\n-------------------\nfull url\nhttp://blah.com/?ID=2&amp;first=1&amp;second=b\n{\"second\":\"b\",\"first\":\"1\",\"ID\":\"2\"}\nsecond=b&amp;first=1&amp;ID=2\n-------------------\njust ?\n?ID=2&amp;first=1&amp;second=b\n{\"second\":\"b\",\"first\":\"1\",\"ID\":\"2\"}\nsecond=b&amp;first=1&amp;ID=2\n-------------------\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/901115/how-can-i-get-query-string-values\">How can I get query string values?</a>  </p>\n</blockquote>\n\n\n\n<p>I need to parse the query string <code>www.mysite.com/default.aspx?dest=aboutus.aspx</code>.\nHow do I get the <code>dest</code> variable in JavaScript?</p>\n",
            "last_activity_date": 1425409031,
            "question_id": 2090551,
            "score": 133,
            "tags": [
                "javascript",
                "parsing",
                "query-string"
            ],
            "title": "Parse query string in JavaScript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<h1>Nesting (and) closures</h1>\n\n<p>Using closures for maintaining the scope of variables (in our case, the success callback function parameters) is the natural JavaScript solution. With promises, we can arbitrarily <a href=\"http://stackoverflow.com/a/22000931/1048572\">nest and flatten</a> <code>.then()</code> callbacks - they are semantically equivalent, except for the scope of the inner one.</p>\n\n<pre><code>function getExample() {\n    return promiseA(\u2026).then(function(resultA) {\n        // some processing\n        return promiseB(\u2026).then(function(resultB) {\n            // more processing\n            return // something using both resultA and resultB;\n        });\n    });\n}\n</code></pre>\n\n<p>Of course, this is building an indentation pyramid. If indentation is getting too large, you still can apply the old tools to counter the <a href=\"http://callbackhell.com/\" rel=\"nofollow\">pyramid of doom</a>: modularize, use extra named functions, and flatten the promise chain as soon as you don't need a variable any more.<br>\nIn theory, you can always avoid more than two levels of nesting (by making all closures explicit), in practise use as many as are reasonable.</p>\n\n<pre><code>function getExample(\u2026) {\n    // preprocessing\n    return promiseA(\u2026).then(makeAhandler(\u2026));\n}\nfunction makeAhandler(\u2026)\n    return function(resultA) {\n        // some processing\n        return promiseB(\u2026).then(makeBhandler(\u2026, resultA));\n    };\n}\nfunction makeBhandler(resultA, \u2026) {\n    return function(resultB) {\n        // more processing\n        return // anything that uses the variables in scope\n    };\n}\n</code></pre>\n\n<p>You can also use helper functions for this kind of <a href=\"https://en.wikipedia.org/wiki/Partial_application\" rel=\"nofollow\">partial application</a>, like <code>_.partial</code> from <a href=\"http://underscorejs.org/#partial\" rel=\"nofollow\">Underscore</a>/<a href=\"https://lodash.com/docs#partial\" rel=\"nofollow\">lodash</a> or the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" rel=\"nofollow\">native <code>.bind()</code> method</a>, to further decrease indentation:</p>\n\n<pre><code>function getExample(\u2026) {\n    // preprocessing\n    return promiseA(\u2026).then(handlerA);\n}\nfunction handlerA(resultA) {\n    // some processing\n    return promiseB(\u2026).then(handlerB.bind(null, resultA));\n}\nfunction handlerB(resultA, resultB) {\n    // more processing\n    return // anything that uses resultA and resultB\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<h1>Explicit pass-through</h1>\n\n<p>Similar to nesting the callbacks, this technique relies on closures. Yet, the chain stays flat - instead of passing only the latest result, some state object is passed for every step. These state objects accumulate the results of the previous actions, handing down all values that will be needed later again plus the result of the current task.</p>\n\n<pre><code>function getExample() {\n    return promiseA(\u2026).then(function(resultA) {\n        // some processing\n        return promiseB(\u2026).then(function(b) { return [resultA, b] });\n    }).spread(function(resultA, resultB) {\n        // more processing\n        return // something using both resultA and resultB\n    });\n}\n</code></pre>\n\n<p>Here, that little <code>function(b) { return [resultA, b] }</code> is the function that closes over <code>resultA</code>, and passes an array of both results to the next step.\nThe <code>.spread()</code> method is a nifty helper that is available in many promise libraries (<a href=\"https://github.com/kriskowal/q/wiki/API-Reference#promisespreadonfulfilled-onrejected\" rel=\"nofollow\">Q</a>, <a href=\"https://github.com/petkaantonov/bluebird/blob/master/API.md#spreadfunction-fulfilledhandler--function-rejectedhandler----promise\" rel=\"nofollow\">Bluebird</a>, <a href=\"https://github.com/cujojs/when/blob/master/docs/api.md#promisespread\" rel=\"nofollow\">when</a>, \u2026) and breaks the array into multiple function arguments, it will be displaced by destructuring in ES6.</p>\n\n<p>Of course, that closure needed here can be further simplified by some helper functions, e.g.</p>\n\n<pre><code>function addTo(x) {\n    // imagine complex `arguments` fiddling or anything that helps usability\n    // but you get the idea with this simple one:\n    return function(res) { return [x, res]; };\n}\n\n\u2026\nreturn promiseB(\u2026).then(addTo(resultA));\n</code></pre>\n\n<p>Alternatively, you can employ <code>Promise.all</code> to produce the promise for the array:</p>\n\n<pre><code>function getExample() {\n    return promiseA(\u2026).then(function(resultA) {\n        // some processing\n        return Promise.all([resultA, promiseB(\u2026)]); // resultA will implicitly be wrapped\n                                                    // as if passed to Promise.resolve()\n    }).spread(function(resultA, resultB) {\n        // more processing\n        return // something using both resultA and resultB\n    });\n}\n</code></pre>\n\n<p>And you might not only use arrays, but arbitrarily complex objects. For example, with <a href=\"http://underscorejs.org/#extend\" rel=\"nofollow\"><code>_.extend</code></a> in a different helper function:</p>\n\n<pre><code>function augment(obj, name) {\n    return function (res) { var r = _.extend({}, obj); r[name] = res; return r; };\n}\n\nfunction getExample() {\n    return promiseA(\u2026).then(function(resultA) {\n        // some processing\n        return promiseB(\u2026).then(augment({resultA: resultA}, \"resultB\"));\n    }).then(function(obj) {\n        // more processing\n        return // something using both obj.resultA and obj.resultB\n    });\n}\n</code></pre>\n\n<p>While this pattern guarantees a flat chain and explicit state objects can improve clarity, it will become tedious for a long chain. Especially when you need the state only sporadically, you still have to pass it through every step. With this fixed interface, the single callbacks in the chain are rather tightly coupled and inflexible to change. It makes factoring out single steps harder, and callbacks cannot be supplied directly from other modules - they always need to be wrapped in boilerplate code that cares about the state. Abstract helper functions like the above can ease the pain a bit, but it will always be present.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h1>ECMAScript Harmony</h1>\n\n<p>Of course, this problem was recognized by the language designers as well. </p>\n\n<p>And they are working on a solution which will probably come with ECMAScript 7: <a href=\"http://wiki.ecmascript.org/doku.php?id=strawman:async_functions\" rel=\"nofollow\">async functions</a>. You won't need a single <code>then</code> invocation or callback function any more, as in an asynchronous function (that returns a promise when being called) you can simply wait for promises to resolve directly. It will also feature arbitrary control structures like conditions, loops and try-catch-clauses, but for the sake of convenience we don't need them here:</p>\n\n<pre><code>async function getExample() {\n    var resultA = await promiseA(\u2026);\n    // some processing\n    var resultB = await promiseB(\u2026);\n    // more processing\n    return // something using both resultA and resultB\n}\n</code></pre>\n\n<h2>ECMAScript 6</h2>\n\n<p>While we are waiting for ES7, we already can use a very similar kind of syntax. ES6 comes with <a href=\"http://davidwalsh.name/es6-generators\" rel=\"nofollow\">generator functions</a>, which allow to break the execution apart in pieces at arbitrarily placed <code>yield</code> keywords. Those slices can be run after each other, independently, even asynchronously - and that's just what we do when we want to wait for a promise resolution before running the next step.</p>\n\n<p>There are dedicated libraries (like <a href=\"https://github.com/tj/co\" rel=\"nofollow\">co</a> &amp; thunkify), but also many promise libraries have helper functions (<a href=\"https://github.com/kriskowal/q/wiki/API-Reference#generators\" rel=\"nofollow\">Q</a>, <a href=\"https://github.com/petkaantonov/bluebird/blob/master/API.md#generators\" rel=\"nofollow\">Bluebird</a>, <a href=\"https://github.com/cujojs/when/blob/master/docs/api.md#es6-generators\" rel=\"nofollow\">when</a>, \u2026) that do <a href=\"http://stackoverflow.com/a/23554399/1048572\">this async step-by-step execution</a> for you when you give them a generator function.</p>\n\n<pre><code>var getExample = Promise.coroutine(function* () {\n//               ^^^^^^^^^^^^^^^^^ Bluebird syntax\n    var resultA = yield promiseA(\u2026);\n    // some processing\n    var resultB = yield promiseB(\u2026);\n    // more processing\n    return // something using both resultA and resultB\n});\n</code></pre>\n\n<p>This already works in Node.js, also a few browsers (or their dev editions) do support generator syntax.</p>\n\n<h2>ECMAScript 5</h2>\n\n<p>However, if you want/need to be backwards-compatible you cannot use those without a 6-to-5 compiler. Yet, there are also many other <a href=\"https://github.com/jashkenas/coffeescript/wiki/List-of-languages-that-compile-to-JS#synchronous-to-asynchronous-javascript-compilers-cps\" rel=\"nofollow\">compile-to-JS languages</a>\nthat are dedicated to easing asynchronous programming. They usually use a syntax similar to ES7's <code>await</code>, (e.g. <a href=\"http://maxtaco.github.io/coffee-script/\" rel=\"nofollow\">Iced CoffeeScript</a>), but there are also others that feature a Haskell-like <code>do</code>-notation (e.g. <a href=\"http://lattejs.com/\" rel=\"nofollow\">LatteJs</a>, <a href=\"https://www.npmjs.com/package/monadic\" rel=\"nofollow\">monadic</a>, <a href=\"http://www.purescript.org/\" rel=\"nofollow\">PureScript</a> or <a href=\"http://lispyscript.com/\" rel=\"nofollow\">LispyScript</a>).</p>\n",
                    "is_accepted": true,
                    "score": 3
                },
                {
                    "body": "<h1>Mutable contextual state</h1>\n\n<p>The trivial (but inelegant and rather errorprone) solution is to just use higher-scope variables (to which all callbacks in the chain have access) and write result values to them when you get them:</p>\n\n<pre><code>function getExample() {\n    var resultA;\n    return promiseA(\u2026).then(function(_resultA) {\n        resultA = _resultA;\n        // some processing\n        return promiseB(\u2026);\n    }).then(function(resultB) {\n        // more processing\n        return // something using both resultA and resultB\n    });\n}\n</code></pre>\n\n<p>Instead of many variables one might also use an (initially empty) object, on which the results are stored as dynamically created properties.</p>\n\n<p>This solution has several drawbacks:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/q/844536/1048572\">Mutable state is ugly</a>, and <a href=\"http://programmers.stackexchange.com/questions/148108/why-is-global-state-so-evil\">global variables are evil</a>.</li>\n<li>This pattern doesn't work across function boundaries, modularising the functions is harder as their declarations must not leave the shared scope</li>\n<li>The scope of the variables does not prevent to access them before they are initialized. This is especially likely for complex promise constructions (loops, branching, excptions) where race conditions might happen. Passing state explicitly, a <a href=\"http://en.wikipedia.org/wiki/Declarative_programming\" rel=\"nofollow\">declarative design</a> that promises encourage, forces a cleaner coding style which can prevent this.</li>\n<li>One must choose the scope for those shared variables correctly. It needs to be local to the executed function to prevent race conditions between multiple parallel invocations. This fallacy is especially likely when one stores the state of an asynchronous method on the instance.</li>\n</ul>\n\n<p>The Bluebird library encourages the use of an object that is passed along, using <a href=\"https://github.com/petkaantonov/bluebird/blob/master/API.md#binddynamic-thisarg---promise\" rel=\"nofollow\">their <code>bind()</code> method</a> to assign a context object to a promise chain. It will be accessible from each callback function via the otherwise unusable <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/this\" rel=\"nofollow\"><code>this</code> keyword</a>. While object properties are more prone to undetected typos than variables, the pattern is quite clever:</p>\n\n<pre><code>function getExample() {\n    return promiseA(\u2026)\n    .bind({}) // Bluebird only!\n    .then(function(resultA) {\n        this.resultA = resultA;\n        // some processing\n        return promiseB(\u2026);\n    }).then(function(resultB) {\n        // more processing\n        return // something using both this.resultA and resultB\n    }).bind(); // don't forget to unbind the object if you don't want the\n               // caller to access it\n}\n</code></pre>\n\n<p>This approach can be easily simulated in promise libraries that do not support .bind (although in a somewhat more verbose way and cannot be used in an expression):</p>\n\n<pre><code>function getExample() {\n    var ctx = {};\n    return promiseA(\u2026)\n    .then(function(resultA) {\n        this.resultA = resultA;\n        // some processing\n        return promiseB(\u2026);\n    }.bind(ctx)).then(function(resultB) {\n        // more processing\n        return // something using both this.resultA and resultB\n    }.bind(ctx));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<h1>Break the chain</h1>\n\n<p>When you need to access the intermediate values in your chain, you should split your chain apart in those single pieces that you need. Instead of attaching one callback and somehow trying to use its parameter multiple times, attach multiple callbacks to the same promise - wherever you need the result value. Don't forget, a <a href=\"http://stackoverflow.com/a/22540276/1048572\">promise just represents (proxies) a future value</a>! Next to deriving one promise from the other in a linear chain, use the promise combinators that are given to you by your library to build the result value.</p>\n\n<p>This will result in a very straightforward control flow, clear composition of functionalities and therefore easy modularisation.</p>\n\n<pre><code>function getExample() {\n    var a = promiseA(\u2026);\n    var b = a.then(function(resultA) {\n        // some processing\n        return promiseB(\u2026);\n    });\n    return Promise.all([a, b]).spread(function(resultA, resultB) {\n        // more processing\n        return // something using both resultA and resultB\n    });\n}\n</code></pre>\n\n<p>Bluebird also features a dedicated <a href=\"https://github.com/petkaantonov/bluebird/blob/master/API.md#promisejoinpromisethenablevalue-promises-function-handler---promise\"><code>join</code> function</a> to replace that <code>Promise.all</code>+<code>spread</code> combination with a simpler (and more efficient) construct:</p>\n\n<pre><code>\u2026\nreturn Promise.join(a, b, function(resultA, resultB) { \u2026 });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<h1>Synchronous inspection</h1>\n\n<p>Assigning promises-for-later-needed-values to variables and then getting their value via synchronous inspection. The example uses bluebird's <code>.value()</code> method but many libraries provide similar method.</p>\n\n<pre><code>function getExample() {\n    var a = promiseA(\u2026);\n\n    return a.then(function() {\n        // some processing\n        return promiseB(\u2026);\n    }).then(function(resultB) {\n        // a is guaranteed to be fulfilled here so we can just retrieve its\n        // value synchronously\n        var aValue = a.value();\n    });\n}\n</code></pre>\n\n<p>This can be used for as many values as you like:</p>\n\n<pre><code>function getExample() {\n    var a = promiseA(\u2026);\n\n    var b = a.then(function() {\n        return promiseB(\u2026)\n    });\n\n    var c = b.then(function() {\n        return promiseC(\u2026);\n    });\n\n    var d = c.then(function() {\n        return promiseD(\u2026);\n    });\n\n    return d.then(function() {\n        return a.value() + b.value() + c.value() + d.value();\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I have restructured my code to promises, and built a wonderful long <strong>flat promise chain</strong>, consisting of multiple <code>.then()</code> callbacks. In the end I want to return some composite value, and need to access multiple <strong>intermediate promise results</strong>. However the resolution values from the middle of the sequence are not in scope in the last callback, how do I access them?</p>\n\n<pre><code>function getExample() {\n    return promiseA(\u2026).then(function(resultA) {\n        // some processing\n        return promiseB(\u2026);\n    }).then(function(resultB) {\n        // more processing\n        return // how do I gain access to resultA here?\n    });\n}\n</code></pre>\n",
            "last_activity_date": 1424435796,
            "question_id": 28250680,
            "score": 12,
            "tags": [
                "javascript",
                "scope",
                "promise",
                "bluebird",
                "es6-promise"
            ],
            "title": "How do I access previous promise results in a .then() chain?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Here is a hack that will do what you need - be aware that it modifies the Object's prototype, something people frown upon (usually for good reason)</p>\n\n<pre><code>Object.prototype.getName = function() { \n   var funcNameRegex = /function (.{1,})\\(/;\n   var results = (funcNameRegex).exec((this).constructor.toString());\n   return (results &amp;&amp; results.length &gt; 1) ? results[1] : \"\";\n};\n</code></pre>\n\n<p>Now, all of your objects will have the function, <code>getName()</code>, that will return the name of the constructor as a string. I have tested this in FF3 and IE7, I can't speak for other implementations.</p>\n\n<p>If you don't want to do that, here is a discussion on the various ways of determining types in JavaScript...</p>\n\n<hr>\n\n<p>I recently updated this to be a bit more exhaustive, though it is hardly that. Corrections welcome...</p>\n\n<h2>Using the <code>constructor</code> property...</h2>\n\n<p>Every object has a value for its <code>constructor</code> property, but depending on how that object was constructed as well as what you want to do with that value, it may or may not be useful. </p>\n\n<p>Generally speaking, you can use the <code>constructor</code> property to test the type of the object like so:</p>\n\n<pre><code>var myArray = [1,2,3];\n(myArray.constructor == Array); // true\n</code></pre>\n\n<p>So, that works well enough for most needs. That said...</p>\n\n<h3>Caveats</h3>\n\n<p>An example where it isn't as obvious is using multiple inheritance:</p>\n\n<pre><code>function a() { this.foo = 1;}\nfunction b() { this.bar = 2; }\nb.prototype = new a(); // b inherits from a\n</code></pre>\n\n<p>Things now don't work as you might expect them to:</p>\n\n<pre><code>var f = new b(); // instantiate a new object with the b constructor\n(f.constructor == b); // false\n(f.constructor == a); // true\n</code></pre>\n\n<p>So, you might get unexpected results if the object your testing has a different object set as its prototype. There are ways around this outside the scope of this discussion.</p>\n\n<p>There are other uses for the <code>constructor</code> property, some of them interesting, others not so much; for now we will not delve into those uses since it isn't relevant to this discussion.</p>\n\n<h3>Will not work cross-frame and cross-window</h3>\n\n<p>Using <code>.constructor</code> for type checking will break when you want to check the type of objects coming from different <code>window</code> objects, say that of an iframe or a popup window. This is because there's a different version of each core type constructor in each `window', i.e.</p>\n\n<pre><code>iframe.contentWindow.Array === Array // false\n</code></pre>\n\n<hr>\n\n<h2>Using the <code>instanceof</code> operator...</h2>\n\n<p>The <code>instanceof</code> operator is a clean way of testing object type as well, but has its own potential issues, just like the <code>constructor</code> property.</p>\n\n<pre><code>var myArray = [1,2,3];\n(myArray instanceof Array); // true\n(myArray instanceof Object); // true\n</code></pre>\n\n<p>But <code>instanceof</code> fails to work for primitive values</p>\n\n<pre><code>3 instanceof Number // false\n'abc' instanceof String // false\ntrue instanceof Boolean // false\n</code></pre>\n\n<p>A wrapper is needed around primitives in order for <code>instanceof</code> to work, for example</p>\n\n<pre><code>new Number(3) instanceof Number // true\n</code></pre>\n\n<p>This is ironic because the <code>.constructor</code> check works fine for primitives</p>\n\n<pre><code>3..constructor === Number // true\n'abc'.constructor === String // true\ntrue.constructor === Boolean // true\n</code></pre>\n\n<p>Why two dots for the 3? Because Javascript interprets the first dot as a decimal point ;)</p>\n\n<h3>Will not work cross-frame and cross-window</h3>\n\n<p><code>instanceof</code> also will not work across different windows, for the same reason as the constructor property check.</p>\n\n<hr>\n\n<h2>Using the <code>name</code> property of the <code>constructor</code> property...</h2>\n\n<h3>Does NOT work in &lt;IE9</h3>\n\n<p>Using <code>myObjectInstance.constructor.name</code> will give you a string containing the name of the constructor function used, but is subject to the caveats about the constructor property that were mentioned earlier.</p>\n\n<p>For IE9 and above, you can <a href=\"http://matt.scharley.me/2012/03/09/monkey-patch-name-ie.html\">monkey-patch in support</a>:</p>\n\n<pre><code>if (Function.prototype.name === undefined &amp;&amp; Object.defineProperty !== undefined) {\n    Object.defineProperty(Function.prototype, 'name', {\n        get: function() {\n            var funcNameRegex = /function\\s+([^\\s(]+)\\s*\\(/;\n            var results = (funcNameRegex).exec((this).toString());\n            return (results &amp;&amp; results.length &gt; 1) ? results[1] : \"\";\n        },\n        set: function(value) {}\n    });\n}\n</code></pre>\n\n<p><strong>Updated version</strong> from the article in question. This was added 3 months after the article was published, this is the recommended version to use by the article's author Matthew Scharley. This change was inspired by <a href=\"http://matt.scharley.me/2012/03/09/monkey-patch-name-ie.html#comment-551654096\">comments pointing out potential pitfalls</a> in the previous code.</p>\n\n<pre><code>if (Function.prototype.name === undefined &amp;&amp; Object.defineProperty !== undefined) {\n    Object.defineProperty(Function.prototype, 'name', {\n        get: function() {\n            var funcNameRegex = /function\\s([^(]{1,})\\(/;\n            var results = (funcNameRegex).exec((this).toString());\n            return (results &amp;&amp; results.length &gt; 1) ? results[1].trim() : \"\";\n        },\n        set: function(value) {}\n    });\n}\n</code></pre>\n\n<hr>\n\n<h2>Using Object.prototype.toString</h2>\n\n<p>It turns out, as <a href=\"http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\">this post details</a>, you can use Object.prototype.toString - the low level and generic implementation of toString - to get the type for all built-in types</p>\n\n<pre><code>Object.prototype.toString.call('abc') // [object String]\nObject.prototype.toString.call(/abc/) // [object RegExp]\nObject.prototype.toString.call([1,2,3]) // [object Array]\n</code></pre>\n\n<p>One could write a short helper function such as</p>\n\n<pre><code>function type(obj){\n    return Object.prototype.toString.call(obj).slice(8, -1);\n}\n</code></pre>\n\n<p>to remove the cruft and get at just the type name</p>\n\n<pre><code>type('abc') // String\n</code></pre>\n\n<p>However, it will return 'Object' for all user-defined types.</p>\n\n<hr>\n\n<h2>Caveats for all...</h2>\n\n<p>All of these are subject to one potential problem, and that is the question of how the object in question was constructed. Here are various ways of building objects and the values that the different methods of type checking will return:</p>\n\n<pre><code>// using a named function:\nfunction Foo() { this.a = 1; }\nvar obj = new Foo();\n(obj instanceof Object);          // true\n(obj instanceof Foo);             // true\n(obj.constructor == Foo);         // true\n(obj.constructor.name == \"Foo\");  // true\n\n// let's add some prototypical inheritance\nfunction Bar() { this.b = 2; }\nFoo.prototype = new Bar();\nobj = new Foo();\n(obj instanceof Object);          // true\n(obj instanceof Foo);             // true\n(obj.constructor == Foo);         // false\n(obj.constructor.name == \"Foo\");  // false\n\n\n// using an anonymous function:\nobj = new (function() { this.a = 1; })();\n(obj instanceof Object);              // true\n(obj.constructor == obj.constructor); // true\n(obj.constructor.name == \"\");         // true\n\n\n// using an anonymous function assigned to a variable\nvar Foo = function() { this.a = 1; };\nobj = new Foo();\n(obj instanceof Object);      // true\n(obj instanceof Foo);         // true\n(obj.constructor == Foo);     // true\n(obj.constructor.name == \"\"); // true\n\n\n// using object literal syntax\nobj = { foo : 1 };\n(obj instanceof Object);            // true\n(obj.constructor == Object);        // true\n(obj.constructor.name == \"Object\"); // true\n</code></pre>\n\n<p>While not all permutations are present in this set of examples, hopefully there are enough to provide you with an idea about how messy things might get depending on your needs. Don't assume anything, if you don't understand exactly what you are after, you may end up with code breaking where you don't expect it to because of a lack of grokking the subtleties.</p>\n\n<h3>NOTE:</h3>\n\n<p>Discussion of the <code>typeof</code> operator may appear to be a glaring omission, but it really isn't useful in helping to identify whether an object is a given type, since it is very simplistic. Understanding where <code>typeof</code> is useful is important, but I don't currently feel that it is terribly relevant to this discussion. My mind is open to change though. :)</p>\n",
                    "is_accepted": true,
                    "score": 884
                },
                {
                    "body": "<p>You can use the <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Special_Operators/instanceof_Operator\" rel=\"nofollow\"><code>instanceof</code></a> operator to see if an object is an instance of another, but since there are no classes, you can't get a class name.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Jason Bunting's answer gave me enough of a clue to find what I needed:</p>\n\n<pre><code>&lt;&lt;Object instance&gt;&gt;.constructor.name\n</code></pre>\n\n<p>So, for example, in the following piece of code:</p>\n\n<pre><code>function MyObject() {}\nvar myInstance = new MyObject();\n</code></pre>\n\n<p><code>myInstance.constructor.name</code> would return <code>\"MyObject\"</code>.</p>\n",
                    "is_accepted": false,
                    "score": 42
                },
                {
                    "body": "<p>The closest you can get is <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Operators/Special_Operators/typeof_Operator\" rel=\"nofollow\"><code>typeof</code></a>, but it only returns \"object\" for any sort of custom type. For those, see <a href=\"http://stackoverflow.com/questions/332422/how-do-i-get-the-name-of-an-object-in-javascript#332429\">Jason Bunting</a>.</p>\n\n<p>Edit, Jason's deleted his post for some reason, so just use Object's <code>constructor</code> property.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use the \"instanceof\" operator to determine if an object is an instance of a certain class or not. If you do not know the name of an object's type, you can use its constructor property. The constructor property of objects, is a reference to the function that is used to initialize them. Example:</p>\n\n<pre><code>function Circle (x,y,radius) {\n    this._x = x;\n    this._y = y;\n    this._radius = raduius;\n}\nvar c1 = new Circle(10,20,5);\n</code></pre>\n\n<p>Now c1.constructor is a reference to the <code>Circle()</code> function.\nYou can alsow use the <code>typeof</code> operator, but the <code>typeof</code> operator shows limited information. One solution is to use the <code>toString()</code> method of the Object global object. For example if you have an object, say myObject, you can use the <code>toString()</code> method of the global Object to determine the type of the class of myObject. Use this:</p>\n\n<pre><code>Object.prototype.toString.apply(myObject);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>DO NOT USE THE CONSTRUCTOR PROPERTY.</strong></p>\n\n<p>Read <a href=\"http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\">THIS</a> first.</p>\n\n<p>The correct code is:</p>\n\n<pre><code>function get_type(thing){\n    if(thing===null)return \"[object Null]\"; // special case\n    return Object.prototype.toString.call(thing);\n}\n\n// example results:\nget_type(null)                    - [object Null]\nget_type(window)                  - [object Window]\nget_type([])                      - [object Array]\nget_type(['1'])                   - [object Array]\nget_type({})                      - [object Object]\nget_type(document)                - [object HTMLDocument]\nget_type(document.getElementById) - [object Function]\n</code></pre>\n\n<p><strong>NB:</strong> According to specs, this function is the most reliable between different browsers.</p>\n",
                    "is_accepted": false,
                    "score": 79
                },
                {
                    "body": "<p>A little trick I use:</p>\n\n<pre><code>function Square(){\n    this.className = \"Square\";\n    this.corners = 4;\n}\n\nvar MySquare = new Square();\nconsole.log(MySquare.className); // \"Square\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Use <code>constructor.name</code> when you can, and regex function when I can't.</p>\n\n<pre><code>Function.prototype.getName = function(){\n  if (typeof this.name != 'undefined')\n    return this.name;\n  else\n    return /function (.+)\\(/.exec(this.toString())[1];\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h2>Update</h2>\n\n<p>To be precise, I think OP asked for a function that retrieves the constructor name for a particular object. In terms of Javascript, <code>object</code> does not have a type but is a type <strong>of and in itself</strong>. However, different objects can have different <strong>constructors</strong>.</p>\n\n<pre><code>Object.prototype.getConstructorName = function () {\n   var str = (this.prototype ? this.prototype.constructor : this.constructor).toString();\n   var cname = str.match(/function\\s(\\w*)/)[1];\n   var aliases = [\"\", \"anonymous\", \"Anonymous\"];\n   return aliases.indexOf(cname) &gt; -1 ? \"Function\" : cname;\n}\n\nnew Array().getConstructorName();  // returns \"Array\"\n(function () {})().getConstructorName(); // returns \"Function\"\n</code></pre>\n\n<p>&nbsp;</p>\n\n<hr>\n\n<p><strong>Note:</strong> the below example is deprecated.</p>\n\n<p>A <a href=\"http://perfectionkills.com/instanceof-considered-harmful-or-how-to-write-a-robust-isarray/\">blog post</a> linked by <a href=\"http://stackoverflow.com/questions/332422/how-do-i-get-the-name-of-an-objects-type-in-javascript/3826081#3826081\">Christian Sciberras</a> contains a good example on how to do it. Namely, by extending the Object prototype:</p>\n\n<pre><code>if (!Object.prototype.getClassName) {\n    Object.prototype.getClassName = function () {\n        return Object.prototype.toString.call(this).match(/^\\[object\\s(.*)\\]$/)[1];\n    }\n}\n\nvar test = [1,2,3,4,5];\n\nalert(test.getClassName()); // returns Array\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Here is a solution that I have come up with that solves the shortcomings of instanceof. It can check an object's types from cross-windows and cross-frames and doesn't have problems with primitive types.</p>\n\n<pre><code>function getType(o) {\n    return Object.prototype.toString.call(o).match(/^\\[object\\s(.*)\\]$/)[1];\n}\nfunction isInstance(obj, type) {\n    var ret = false,\n    isTypeAString = getType(type) == \"String\",\n    functionConstructor, i, l, typeArray, context;\n    if (!isTypeAString &amp;&amp; getType(type) != \"Function\") {\n        throw new TypeError(\"type argument must be a string or function\");\n    }\n    if (obj !== undefined &amp;&amp; obj !== null &amp;&amp; obj.constructor) {\n        //get the Function constructor\n        functionConstructor = obj.constructor;\n        while (functionConstructor != functionConstructor.constructor) {\n            functionConstructor = functionConstructor.constructor;\n        }\n        //get the object's window\n        context = functionConstructor == Function ? self : functionConstructor(\"return window\")();\n        //get the constructor for the type\n        if (isTypeAString) {\n            //type is a string so we'll build the context (window.Array or window.some.Type)\n            for (typeArray = type.split(\".\"), i = 0, l = typeArray.length; i &lt; l &amp;&amp; context; i++) {\n                context = context[typeArray[i]];\n            }\n        } else {\n            //type is a function so execute the function passing in the object's window\n            //the return should be a constructor\n            context = type(context);\n        }\n        //check if the object is an instance of the constructor\n        if (context) {\n            ret = obj instanceof context;\n            if (!ret &amp;&amp; (type == \"Number\" || type == \"String\" || type == \"Boolean\")) {\n                ret = obj.constructor == context\n            }\n        }\n    }\n    return ret;\n}\n</code></pre>\n\n<p>isInstance requires two parameters: an object and a type. The real trick to how it works is that it checks if the object is from the same window and if not gets the object's window.</p>\n\n<p>Examples:</p>\n\n<pre><code>isInstance([], \"Array\"); //true\nisInstance(\"some string\", \"String\"); //true\nisInstance(new Object(), \"Object\"); //true\n\nfunction Animal() {}\nfunction Dog() {}\nDog.prototype = new Animal();\n\nisInstance(new Dog(), \"Dog\"); //true\nisInstance(new Dog(), \"Animal\"); //true\nisInstance(new Dog(), \"Object\"); //true\nisInstance(new Animal(), \"Dog\"); //false\n</code></pre>\n\n<p>The type argument can also be a callback function which returns a constructor. The callback function will receive one parameter which is the window of the provided object.</p>\n\n<p>Examples:</p>\n\n<pre><code>//\"Arguments\" type check\nvar args = (function() {\n    return arguments;\n}());\n\nisInstance(args, function(w) {\n    return w.Function(\"return arguments.constructor\")();\n}); //true\n\n//\"NodeList\" type check\nvar nl = document.getElementsByTagName(\"*\");\n\nisInstance(nl, function(w) {\n    return w.document.getElementsByTagName(\"bs\").constructor;\n}); //true\n</code></pre>\n\n<p>One thing to keep in mind is that IE &lt; 9 does not provide the constructor on all objects so the above test for NodeList would return false and also a isInstance(alert, \"Function\") would return false.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><strong>Using Object.prototype.toString</strong></p>\n\n<p>It turns out, as this post details, you can use Object.prototype.toString - the low level and generic implementation of toString - to get the type for all built-in types</p>\n\n<pre><code>Object.prototype.toString.call('abc') // [object String]\nObject.prototype.toString.call(/abc/) // [object RegExp]\nObject.prototype.toString.call([1,2,3]) // [object Array]\n</code></pre>\n\n<p>One could write a short helper function such as</p>\n\n<pre><code>function type(obj){\n    return Object.prototype.toString.call(obj]).match(/\\s\\w+/)[0].trim()\n}\n\nreturn [object String] as String\nreturn [object Number] as Number\nreturn [object Object] as Object\nreturn [object Undefined] as Undefined\nreturn [object Function] as Function\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The <strong>kind()</strong> function from <a href=\"http://agavejs.org/\" rel=\"nofollow\">Agave.JS</a> will return:</p>\n\n<ul>\n<li>the closest prototype in the inheritance tree</li>\n<li>for always-primitive types like 'null' and 'undefined', the primitive name. </li>\n</ul>\n\n<p>It works on all JS objects and primitives, <strong>regardless of how they were created</strong>, and doesn't have any surprises. Examples:</p>\n\n<h3>Numbers</h3>\n\n<pre><code>kind(37) === 'Number'\nkind(3.14) === 'Number'\nkind(Math.LN2) === 'Number'\nkind(Infinity) === 'Number'\nkind(Number(1)) === 'Number'\nkind(new Number(1)) === 'Number'\n</code></pre>\n\n<h3>NaN</h3>\n\n<pre><code>kind(NaN) === 'NaN'\n</code></pre>\n\n<h3>Strings</h3>\n\n<pre><code>kind('') === 'String'\nkind('bla') === 'String'\nkind(String(\"abc\")) === 'String'\nkind(new String(\"abc\")) === 'String'\n</code></pre>\n\n<h3>Booleans</h3>\n\n<pre><code>kind(true) === 'Boolean'\nkind(false) === 'Boolean'\nkind(new Boolean(true)) === 'Boolean'\n</code></pre>\n\n<h3>Arrays</h3>\n\n<pre><code>kind([1, 2, 4]) === 'Array'\nkind(new Array(1, 2, 3)) === 'Array'\n</code></pre>\n\n<h3>Objects</h3>\n\n<pre><code>kind({a:1}) === 'Object'\nkind(new Object()) === 'Object'\n</code></pre>\n\n<h3>Dates</h3>\n\n<pre><code>kind(new Date()) === 'Date'\n</code></pre>\n\n<h3>Functions</h3>\n\n<pre><code>kind(function(){}) === 'Function'\nkind(new Function(\"console.log(arguments)\")) === 'Function'\nkind(Math.sin) === 'Function'\n</code></pre>\n\n<h3>undefined</h3>\n\n<pre><code>kind(undefined) === 'undefined'\n</code></pre>\n\n<h3>null</h3>\n\n<pre><code>kind(null) === 'null'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I was actually looking for a similar thing and came across this question. Here is how I get types: <a href=\"http://jsfiddle.net/9fsqy/2/\" rel=\"nofollow\">jsfiddle</a></p>\n\n<pre><code>var TypeOf = function ( thing ) {\n    var typeOfThing = typeof thing;\n    if ( typeOfThing === 'object' ) {\n        typeOfThing = Object.prototype.toString.call(thing);\n        if ( typeOfThing === '[object Object]') {\n            if ( thing.constructor.name ) {\n                return thing.constructor.name;\n            } else if ( thing.constructor.toString().charAt(0) === '[' ) {\n                typeOfThing = typeOfThing.substring(8,typeOfThing.length - 1);\n            } else {\n                typeOfThing = thing.constructor.toString().match(/function\\s*(\\w+)/);\n                if ( typeOfThing ) { \n                    return typeOfThing[1];\n                } else {\n                    return 'Function';\n                }\n            }\n        } else {\n            typeOfThing = typeOfThing.substring(8,typeOfThing.length - 1);\n        }\n    }\n    return typeOfThing.charAt(0).toUpperCase() + typeOfThing.slice(1);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If anyone was looking for a solution which is working with jQuery, here is the adjusted wiki code (the original breaks jQuery).</p>\n\n<pre><code>Object.defineProperty(Object.prototype, \"getClassName\", {\n    value: function() {\n        var funcNameRegex = /function (.{1,})\\(/;\n        var results = (funcNameRegex).exec((this).constructor.toString());\n        return (results &amp;&amp; results.length &gt; 1) ? results[1] : \"\";\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>you can simply find object type by using typeOf function</p>\n\n<pre><code>a = 10;\ntypeof(a)\n\"number\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there a JavaScript equivalent of Java's <code>class.getName()</code>?</p>\n",
            "last_activity_date": 1420644510,
            "question_id": 332422,
            "score": 574,
            "tags": [
                "javascript"
            ],
            "title": "How do I get the name of an object&#39;s type in JavaScript?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Maybe you want to include a <a href=\"http://stackoverflow.com/questions/610406/javascript-printf-string-format\">sprintf library for JavaScript</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>To format a number using fixed-point notation, you can simply use the <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Global%5FObjects/Number/toFixed\">toFixed</a> method:</p>\n\n<pre><code>(10.8).toFixed(2); // 10.80\n\nvar num = 2.4;\nalert(num.toFixed(2)); // 2.40\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 456
                },
                {
                    "body": "<blockquote>\n  <p>toFixed(n) provides n length after the decimal point; toPrecision(x)\n  provides x total length.</p>\n</blockquote>\n\n<p>Use this method below</p>\n\n<pre><code>// Example: toPrecision(4) when the number has 7 digits (3 before, 4 after)\n    // It will round to the tenths place\n    num = 500.2349;\n    result = num.toPrecision(4); // result will equal 500.2\n</code></pre>\n\n<p>AND if you want the number to be fixed use</p>\n\n<pre><code>result = num.toFixed(2);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>@heridev and I created a small function in jQuery.</p>\n\n<p>You can try next:</p>\n\n<p>HTML</p>\n\n<pre><code>&lt;input type=\"text\" name=\"one\" class=\"two-digits\"&gt;&lt;br&gt;\n&lt;input type=\"text\" name=\"two\" class=\"two-digits\"&gt;\u200b\n</code></pre>\n\n<p>jQuery</p>\n\n<pre><code>// apply the two-digits behaviour to elements with 'two-digits' as their class\n$( function() {\n    $('.two-digits').keyup(function(){\n        if($(this).val().indexOf('.')!=-1){         \n            if($(this).val().split(\".\")[1].length &gt; 2){                \n                if( isNaN( parseFloat( this.value ) ) ) return;\n                this.value = parseFloat(this.value).toFixed(2);\n            }  \n         }            \n         return this; //for chaining\n    });\n});\n</code></pre>\n\n<p>\u200b\nDEMO ONLINE:</p>\n\n<p><a href=\"http://jsfiddle.net/c4Wqn/\" rel=\"nofollow\">http://jsfiddle.net/c4Wqn/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I usually add this to my personal library, and after some suggestions and using the @TIMINeutron solution too, and making it adaptable for decimal length then, this one fits best: </p>\n\n<pre><code> function precise_round(num, decimals) {\nvar t=Math.pow(10, decimals);   \n return (Math.round((num * t) + (decimals&gt;0?1:0)*(Math.sign(num) * (10 / Math.pow(100, decimals)))) / t).toFixed(decimals);\n    }\n</code></pre>\n\n<p>will work for the exceptions reported.</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>I didn't find an accurate solution for this problem, so i created my own.</p>\n\n<pre><code>function inprecise_round(value, decPlaces) {\n  return Math.round(value*Math.pow(10,decPlaces))/Math.pow(10,decPlaces);\n}\n\nfunction precise_round(value, decPlaces){\n    var val = value * Math.pow(10, decPlaces);\n    var fraction = (Math.round((val-parseInt(val))*10)/10);\n\n    //this line is for consistency with .NET Decimal.Round behavior\n    // -342.055 =&gt; -342.06\n    if(fraction == -0.5) fraction = -0.6;\n\n    val = Math.round(parseInt(val) + fraction) / Math.pow(10, decPlaces);\n    return val;\n}\n\n//this may produce different results depending on the browser environment\n342.055.toFixed(2) // 342.06 on Chrome &amp; IE10\n\ninprecise_round(342.055, 2) // 342.05\nprecise_round(342.055, 2) // 342.06\nprecise_round(-342.055, 2) // -342.06\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I don't know why can't I add a comment to a previous answer (maybe I'm hopelessly blind, dunno), but I came up with a solution using @Miguel's answer:</p>\n\n<pre><code>function precise_round(num,decimals){\nreturn Math.round(num*Math.pow(10,decimals))/Math.pow(10,decimals);\n}\n</code></pre>\n\n<p>And its two comments (from @bighostkim and @Imre):</p>\n\n<ul>\n<li>Problem with <code>precise_round(1.275,2)</code> not returning 1.28</li>\n<li>Problem with <code>precise_round(6,2)</code> not returning 6.00 (as he wanted).</li>\n</ul>\n\n<p>My final solution is as follows:</p>\n\n<pre><code>function precise_round(num,decimals){\n    var sign = num &gt;= 0 ? 1 : -1;\n    return (Math.round((num*Math.pow(10,decimals))+(sign*0.001))/Math.pow(10,decimals)).toFixed(decimals);\n}\n</code></pre>\n\n<p>As you can see I had to add a little bit of \"correction\" (it's not what it is, but since Math.round is lossy - you can check it on jsfiddle.net - this is the only way I knew how to \"fix\" it). It adds 0.001 to the already padded number, so it is adding a <code>1</code> three <code>0</code>s to the right of the decimal value. So it should be safe to use.</p>\n\n<p>After that I added <code>.toFixed(decimal)</code> to always output the number in the correct format (with the right amount of decimals).</p>\n\n<p>So that's pretty much it. Use it well ;)</p>\n\n<p>EDIT: added functionality to the \"correction\" of negative numbers.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>The trouble with floating point values is that they are trying to represent an infinite amount of (continuous) values with a fixed amount of bits. So naturally, there must be some loss in play, and you're going to be bitten with some values.</p>\n\n<p>When a computer stores 1.275 as a floating point value, it won't actually remember whether it was 1.275 or 1.27499999999999993, or even 1.27500000000000002. These values should give different results after rounding to two decimals, but they won't, since for computer they look <em>exactly the same</em> after storing as floating point values, and there's no way to restore the lost data. Any further calculations will only accumulate such imprecision.</p>\n\n<p>So, if precision matters, you have to avoid floating point values from the start. The simplest options are to</p>\n\n<ul>\n<li>use a <a href=\"http://stackoverflow.com/q/2622144/706714\">devoted library</a></li>\n<li>use strings for storing and passing around the values (accompanied by string operations)</li>\n<li>use integers (e.g. you could be passing around the amount of hundredths of your actual value, e.g. amount in cents instead of amount in dollars)</li>\n</ul>\n\n<p>For example, when using integers to store the number of hundredths, the function for finding the actual value is quite simple:</p>\n\n<pre><code>function descale(num, decimals) {\n    var hasMinus = num &lt; 0;\n    var numString = Math.abs(num).toString();\n    var precedingZeroes = '';\n    for (var i = numString.length; i &lt;= decimals; i++) {\n        precedingZeroes += '0';\n    }\n    numString = precedingZeroes + numString;\n    return (hasMinus ? '-' : '') \n        + numString.substr(0, numString.length-decimals) \n        + '.' \n        + numString.substr(numString.length-decimals);\n}\n\nalert(descale(127, 2));\n</code></pre>\n\n<p>With strings, you'll need rounding, but it's still manageable:</p>\n\n<pre><code>function precise_round(num, decimals) {\n    var parts = num.split('.');\n    var hasMinus = parts.length &gt; 0 &amp;&amp; parts[0].length &gt; 0 &amp;&amp; parts[0].charAt(0) == '-';\n    var integralPart = parts.length == 0 ? '0' : (hasMinus ? parts[0].substr(1) : parts[0]);\n    var decimalPart = parts.length &gt; 1 ? parts[1] : '';\n    if (decimalPart.length &gt; decimals) {\n        var roundOffNumber = decimalPart.charAt(decimals);\n        decimalPart = decimalPart.substr(0, decimals);\n        if ('56789'.indexOf(roundOffNumber) &gt; -1) {\n            var numbers = integralPart + decimalPart;\n            var i = numbers.length;\n            var trailingZeroes = '';\n            var justOneAndTrailingZeroes = true;\n            do {\n                i--;\n                var roundedNumber = '1234567890'.charAt(parseInt(numbers.charAt(i)));\n                if (roundedNumber === '0') {\n                    trailingZeroes += '0';\n                } else {\n                    numbers = numbers.substr(0, i) + roundedNumber + trailingZeroes;\n                    justOneAndTrailingZeroes = false;\n                    break;\n                }\n            } while (i &gt; 0);\n            if (justOneAndTrailingZeroes) {\n                numbers = '1' + trailingZeroes;\n            }\n            integralPart = numbers.substr(0, numbers.length - decimals);\n            decimalPart = numbers.substr(numbers.length - decimals);\n        }\n    } else {\n        for (var i = decimalPart.length; i &lt; decimals; i++) {\n            decimalPart += '0';\n        }\n    }\n    return (hasMinus ? '-' : '') + integralPart + (decimals &gt; 0 ? '.' + decimalPart : '');\n}\n\nalert(precise_round('1.275', 2));\nalert(precise_round('1.27499999999999993', 2));\n</code></pre>\n\n<p>Note that this function rounds to nearest, <em>ties away from zero</em>, while <a href=\"http://en.wikipedia.org/wiki/IEEE_754#Rounding_rules\" rel=\"nofollow\">IEEE 754</a> recommends rounding to nearest, <em>ties to even</em> as the default behavior for floating point operations. Such modifications are left as an exercise for the reader :)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's a simple one</p>\n\n<pre><code>function roundFloat(num,dec){\n    var d = 1;\n    for (var i=0; i&lt;dec; i++){\n        d += \"0\";\n    }\n    return Math.round(num * d) / d;\n}\n</code></pre>\n\n<p>Use like <code>alert(roundFloat(1.79209243929,4));</code></p>\n\n<p><a href=\"http://jsfiddle.net/ow3n/YqQgC/\" rel=\"nofollow\">Jsfiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>One way to be 100% sure that you get a number with 2 decimals: </p>\n\n<pre><code>(Math.round(num*100)/100).toFixed(2)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is an old topic but still top-ranked Google results and the solutions offered share the same floating point decimals issue. Here is the (very generic) function I use, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/round#Example%3a_Decimal_rounding\">thanks to MDN</a>:</p>\n\n<pre><code>function round(value, exp) {\n  if (typeof exp === 'undefined' || +exp === 0)\n    return Math.round(value);\n\n  value = +value;\n  exp  = +exp;\n\n  if (isNaN(value) || !(typeof exp === 'number' &amp;&amp; exp % 1 === 0))\n    return NaN;\n\n  // Shift\n  value = value.toString().split('e');\n  value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + exp) : exp)));\n\n  // Shift back\n  value = value.toString().split('e');\n  return +(value[0] + 'e' + (value[1] ? (+value[1] - exp) : -exp));\n}\n</code></pre>\n\n<p>As we can see, we don't get these issues:</p>\n\n<pre><code>round(1.275, 2);   // Returns 1.28\nround(1.27499, 2); // Returns 1.27\n</code></pre>\n\n<p>This genericity also provides some cool stuff:</p>\n\n<pre><code>round(1234.5678, -2);   // Returns 1200\nround(1.2345678e+2, 2); // Returns 123.46\nround(\"123.45\");        // Returns 123\n</code></pre>\n\n<hr>\n\n<p>Now, to answer the OP's question, one has to type:</p>\n\n<pre><code>round(10.8034, 2).toFixed(2); // Returns \"10.80\"\nround(10.8, 2).toFixed(2);    // Returns \"10.80\"\n</code></pre>\n\n<hr>\n\n<p>Or, for a more concise, less generic function:</p>\n\n<pre><code>function round2Fixed(value) {\n  value = +value;\n\n  if (isNaN(value))\n    return NaN;\n\n  // Shift\n  value = value.toString().split('e');\n  value = Math.round(+(value[0] + 'e' + (value[1] ? (+value[1] + 2) : 2)));\n\n  // Shift back\n  value = value.toString().split('e');\n  return (+(value[0] + 'e' + (value[1] ? (+value[1] - 2) : -2))).toFixed(2);\n}\n</code></pre>\n\n<p>You can call it with:</p>\n\n<pre><code>round2Fixed(10.8034); // Returns \"10.80\"\nround2Fixed(10.8);    // Returns \"10.80\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Put <strong>the following</strong> in some global scope:</p>\n\n<pre><code>Number.prototype.getDecimals = function ( decDigCount ) {\n   return this.toFixed(decDigCount);\n}\n</code></pre>\n\n<p>and <strong>then try</strong>:</p>\n\n<pre><code>var a = 56.23232323;\na.getDecimals(2); // will return 56.23\n</code></pre>\n\n<h2>Update</h2>\n\n<p>Note that <code>toFixed()</code> can only work for the number of decimals between <code>0-20</code> i.e. <code>a.getDecimals(25)</code> may generate a javascript error, so to accomodate that you may add some additional check i.e.</p>\n\n<pre><code>Number.prototype.getDecimals = function ( decDigCount ) {\n   return ( decDigCount &gt; 20 ) ? this : this.toFixed(decDigCount);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Round your decimal value, then use <code>toFixed(x)</code> for your expected digit(s).</p>\n\n<pre><code>function parseDecimalRoundAndFixed(num,dec){\n  var d =  Math.pow(10,dec);\n  return (Math.round(num * d) / d).toFixed(dec);\n}\n</code></pre>\n\n<hr>\n\n<p>Call</p>\n\n<p>parseDecimalRoundAndFixed(10.800243929,4)  =>  10.80\nparseDecimalRoundAndFixed(10.807243929,2)  =>  10.81</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have this line of code which rounds my numbers to 2 decimal places. But the thing is I get numbers like this. 10.8, 2.4 etc. These are not my idea of 2 decimal places so how I can improve this:</p>\n\n<pre><code>Math.round(price*Math.pow(10,2))/Math.pow(10,2);\n</code></pre>\n\n<p>I want numbers like 10.80, 2.40 etc. Use of JQuery is fine with me.</p>\n",
            "last_activity_date": 1415336591,
            "question_id": 1726630,
            "score": 249,
            "tags": [
                "javascript",
                "rounding",
                "decimal-point"
            ],
            "title": "JavaScript: formatting number with exactly two decimals"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>You can extract the key/value pairs from the <a href=\"https://developer.mozilla.org/en/DOM/window.location\">location.search</a> property, this property has the part of the URL that follows the ? symbol, including the ? symbol.</p>\n\n<pre><code>function getQueryString() {\n  var result = {}, queryString = location.search.slice(1),\n      re = /([^&amp;=]+)=([^&amp;]*)/g, m;\n\n  while (m = re.exec(queryString)) {\n    result[decodeURIComponent(m[1])] = decodeURIComponent(m[2]);\n  }\n\n  return result;\n}\n\n// ...\nvar myParam = getQueryString()[\"myParam\"];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 218
                },
                {
                    "body": "<p>Okay, since everyone is ignoring my actual question, heh, I'll post mine too! Here's what I have:</p>\n\n<pre><code>location.querystring = (function() {\n\n    // The return is a collection of key/value pairs\n\n    var queryStringDictionary = {};\n\n    // Gets the query string, starts with '?'\n\n    var querystring = unescape(location.search);\n\n    // document.location.search is empty if no query string\n\n    if (!querystring) {\n        return {};\n    }\n\n    // Remove the '?' via substring(1)\n\n    querystring = querystring.substring(1);\n\n    // '&amp;' seperates key/value pairs\n\n    var pairs = querystring.split(\"&amp;\");\n\n    // Load the key/values of the return collection\n\n    for (var i = 0; i &lt; pairs.length; i++) {\n        var keyValuePair = pairs[i].split(\"=\");\n        queryStringDictionary[keyValuePair[0]] = keyValuePair[1];\n    }\n\n    // Return the key/value pairs concatenated\n\n    queryStringDictionary.toString = function() {\n\n        if (queryStringDictionary.length == 0) {\n            return \"\";\n        }\n\n        var toString = \"?\";\n\n        for (var key in queryStringDictionary) {\n            toString += key + \"=\" + queryStringDictionary[key];\n        }\n\n        return toString;\n    };\n\n    // Return the key/value dictionary\n\n    return queryStringDictionary;\n})();\n</code></pre>\n\n<p>And the tests:</p>\n\n<pre><code>alert(window.location.querystring.toString());\n\nfor (var key in location.querystring) {\n    alert(key + \"=\" + location.querystring[key]);\n}\n</code></pre>\n\n<p>Mind you thought, JavaScript isn't my native tongue. </p>\n\n<p>Anyway, I'm looking for a JavaScript library (e.g. jQuery, Prototype) that already has one written. :)</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<pre><code>\nfunction decode(s) {\n    try {\n        return decodeURIComponent(s).replace(/\\r\\n|\\r|\\n/g, \"\\r\\n\");\n    } catch (e) {\n        return \"\";\n    }\n}\nfunction getQueryString(win) {\n    var qs = win.location.search;\n    var multimap = {};\n    if (qs.length &gt; 1) {\n        qs = qs.substr(1);\n        qs.replace(/([^=&]+)=([^&]*)/g, function(match, hfname, hfvalue) {\n            var name = decode(hfname);\n            var value = decode(hfvalue);\n            if (name.length &gt; 0) {\n                if (!multimap.hasOwnProperty(name)) {\n                    multimap[name] = [];\n                }\n                multimap[name].push(value);\n            }\n        });\n    }\n    return multimap;\n}\nvar keys = getQueryString(window);\nfor (var i in keys) {\n    if (keys.hasOwnProperty(i)) {\n        for (var z = 0; z &lt; keys[i].length; ++z) {\n            alert(i + \":\" + keys[i][z]);\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Maybe <a href=\"http://plugins.jquery.com/project/query-object\" rel=\"nofollow\">http://plugins.jquery.com/project/query-object</a>?</p>\n\n<p>Edit: The link seems to be broken now. Don't know what happened to the plug-in. But, <a href=\"https://github.com/sousk/jquery.parsequery#readme\" rel=\"nofollow\">https://github.com/sousk/jquery.parsequery#readme</a> is supposed to be a fork of it I guess.</p>\n\n<p>Edit: Actually, <a href=\"http://plugins.jquery.com/query-object/\" rel=\"nofollow\">http://plugins.jquery.com/query-object/</a> seems to be the correct link now.</p>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>After finding this post, when looking myself I thought I should add that I don't think the most up-voted solution is the best. It doesn't handle array values (such as ?a=foo&amp;a=bar - in this case I would expect getting a to return ['foo', 'bar']). It also as far as I can tell doesn't take into account encoded values - such as hex character encoding where %20 represents a space (example: ?a=Hello%20World) or the plus symbol being used to represent a space (example: ?a=Hello+World).</p>\n\n<p>Node.js offers what looks like a very complete solutions to querystring parsing. It would be easy to take out and use in your own project as its fairly well isolated and under a permissive licence.</p>\n\n<p>The code for it can be viewed here: <a href=\"https://github.com/joyent/node/blob/master/lib/querystring.js\" rel=\"nofollow\">https://github.com/joyent/node/blob/master/lib/querystring.js</a></p>\n\n<p>The tests that Node has can be seen here:\n<a href=\"https://github.com/joyent/node/blob/master/test/simple/test-querystring.js\" rel=\"nofollow\">https://github.com/joyent/node/blob/master/test/simple/test-querystring.js</a> I would suggest trying some of these with the popular answer to see how it handles them.</p>\n\n<p>There is also a project that I was involved in to specifically add this functionality. It is a port of the Python standard lib query string parsing module. My fork can be found here: <a href=\"https://github.com/d0ugal/jquery.qeeree\" rel=\"nofollow\">https://github.com/d0ugal/jquery.qeeree</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If you have the querystring on hand, use this:</p>\n\n<pre><code> /**\n * @param qry the querystring\n * @param name name of parameter\n * @returns the parameter specified by name\n * @author eduardo.medeirospereira@gmail.com\n */\n\nfunction getQueryStringParameter(qry,name){\n    if(typeof qry !== undefined &amp;&amp; qry !== \"\"){\n        var keyValueArray = qry.split(\"&amp;\");\n        for ( var i = 0; i &lt; keyValueArray.length; i++) {\n            if(keyValueArray[i].indexOf(name)&gt;-1){\n                return keyValueArray[i].split(\"=\")[1];\n            }\n        }\n    }\n    return \"\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Building on the answer by @CMS I have the following (in CoffeeScript which can easily be converted to JavaScript):</p>\n\n<pre><code>String::to_query = -&gt;\n  [result, re, d] = [{}, /([^&amp;=]+)=([^&amp;]*)/g, decodeURIComponent]\n  while match = re.exec(if @.match /^\\?/ then @.substring(1) else @)\n    result[d(match[1])] = d match[2] \n  result\n</code></pre>\n\n<p>You can easily grab what you need with:</p>\n\n<pre><code>location.search.to_query()['my_param']\n</code></pre>\n\n<p>The win here is an object-oriented interface (instead of functional) and it can be done on any string (not just location.search).</p>\n\n<p>If you are already using a JavaScript library this function make already exist. For example <a href=\"http://api.prototypejs.org/language/String/prototype/toQueryParams/\" rel=\"nofollow\">here is Prototype's version</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Or you could use the library <a href=\"http://sugarjs.com\" rel=\"nofollow\">sugar.js</a>.</p>\n\n<p>From sugarjs.com:</p>\n\n<blockquote>\n  <p><strong>Object.fromQueryString ( str</strong> , deep = true <strong>)</strong></p>\n  \n  <p>Converts the query string of a URL into an object. If deep is false,\n  conversion will only accept shallow params (ie. no object or arrays\n  with [] syntax) as these are not universally supported. </p>\n\n<pre><code>Object.fromQueryString('foo=bar&amp;broken=wear') &gt;{\"foo\":\"bar\",\"broken\":\"wear\"}\nObject.fromQueryString('foo[]=1&amp;foo[]=2') &gt;{\"foo\":[1,2]}\n</code></pre>\n</blockquote>\n\n<p>Example:</p>\n\n<pre><code>var queryString = Object.fromQueryString(location.search);\nvar foo = queryString.foo;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<h1><em>tl;dr</em> solution on a single line of code using vanilla javascript</h1>\n\n<pre><code>var queryDict = {}\nlocation.search.substr(1).split(\"&amp;\").forEach(function(item) {queryDict[item.split(\"=\")[0]] = item.split(\"=\")[1]})\n</code></pre>\n\n<p>For querystring <code>?a=1&amp;b=2&amp;c=3&amp;d&amp;e</code>it returns:</p>\n\n<pre><code>&gt; queryDict\na: \"1\"\nb: \"2\"\nc: \"3\"\nd: undefined\ne: undefined\n</code></pre>\n\n<h2><em>multi-valued keys</em> and <em>encoded characters</em>?</h2>\n\n<p>See the original answer at <a href=\"http://stackoverflow.com/a/21152762/985454\">How can I get query string values in JavaScript?</a></p>\n\n<pre><code>\"?a=1&amp;b=2&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst\u00e5le%26car%3Dsaab\"\n&gt; queryDict\na: [\"1\", \"5\", \"t e x t\"]\nb: [\"2\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined, \"http://w3schools.com/my test.asp?name=st\u00e5le&amp;car=saab\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<pre><code>// How about this\nfunction queryString(qs) {\n    var queryStr = qs.substr(1).split(\"&amp;\"),obj={};\n    for(var i=0; i &lt; queryStr.length;i++)\n        obj[queryStr[i].split(\"=\")[0]] = queryStr[i].split(\"=\")[1];\n    return obj;\n}\n\n// Usage:\nvar result = queryString(location.search);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>I like to keep it simple, readable and small.</strong></p>\n\n<pre><code>function searchToObject(search) {\n    var pairs = search.substring(1).split(\"&amp;\"),\n        obj = {}, pair;\n\n    for (var i in pairs) {\n        if (pairs[i] === \"\") continue;\n        pair = pairs[i].split(\"=\");\n        obj[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n    return obj;\n}\n\nsearchToObject(location.search);\n</code></pre>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>searchToObject('?query=myvalue')['query']; // spits out: 'myvalue'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Function I wrote for a requirement similar to this with pure javascript string manipulation</p>\n\n<pre><code>\"http://www.google.lk/?Name=John&amp;Age=20&amp;Gender=Male\"\n\nfunction queryize(sampleurl){\n    var tokens = url.split('?')[1].split('&amp;');\n    var result = {};\n\n    for(var i=0; i&lt;tokens.length; i++){\n        result[tokens[i].split('=')[0]] = tokens[i].split('=')[1];\n    }\n\n    return result;\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>queryize(window.location.href)['Name'] //returns John\nqueryize(window.location.href)['Age'] //returns 20\nqueryize(window.location.href)['Gender'] //returns Male\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there any JavaScript library that makes a dictionary out of the query string, <code>ASP.NET</code> style?</p>\n\n<p>Something which can be used like:</p>\n\n<pre><code>var query = window.location.querystring[\"query\"]?\n</code></pre>\n\n<p>Is <em>\"query string\"</em> called something else outside the <code>.NET</code> realm? Why isn't <code>location.search</code> broken into a <em>key/value collection</em> ?</p>\n\n<p><strong>EDIT</strong>: I have written my own function, but does any major JavaScript library do this?</p>\n",
            "last_activity_date": 1406819797,
            "question_id": 647259,
            "score": 87,
            "tags": [
                "javascript",
                "query-string"
            ],
            "title": "JavaScript query string"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>With simple JavaScript:</p>\n\n<pre><code>var split = 'john smith~123 Street~Apt 4~New York~NY~12345'.split('~');\n\nvar name = split[0];\nvar street = split[1];\n\netc...\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 309
                },
                {
                    "body": "<p>You'll want to look into JavaScript's <a href=\"http://devguru.com/technologies/javascript/10819.asp\">substr</a> or <a href=\"http://devguru.com/technologies/javascript/10816.asp\">split</a> as this is not really a task suited for jQuery</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You don't need jQuery.</p>\n\n<pre><code>var s = 'john smith~123 Street~Apt 4~New York~NY~12345';\nvar fields = s.split(/~/);\nvar name = fields[0];\nvar street = fields[1];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>well, easiest way would be something like:</p>\n\n<pre><code>var address = theEncodedString.split(/~/)\nvar name = address[0], street = address[1]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Something like:</p>\n\n<pre><code>var divided = str.split(\"/~/\");\nvar name=divided[0];\nvar street = divided[1];\n</code></pre>\n\n<p>Is probably going to be easiest</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Even though this is not the simplest way, you could do this:</p>\n\n<pre><code>var addressString = \"~john smith~123 Street~Apt 4~New York~NY~12345~\",\n    keys = \"name address1 address2 city state zipcode\".split(\" \"),\n    address = {};\n\n// clean up the string with the first replace\n// \"abuse\" the second replace to map the keys to the matches\naddressString.replace(/^~|~$/g).replace(/[^~]+/g, function(match){\n    address[ keys.unshift() ] = match;\n});\n\n// address will contain the mapped result\naddress = {\n    address1: \"123 Street\"\n    address2: \"Apt 4\"\n    city: \"New York\"\n    name: \"john smith\"\n    state: \"NY\"\n    zipcode: \"12345\"\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If <strong>Spliter  is found</strong> then only </p>\n\n<p>Split it </p>\n\n<p>else return the <strong>same string</strong></p>\n\n<blockquote>\n  <p>function SplitTheString(ResultStr) {</p>\n\n<pre><code>    if (ResultStr != null) {\n\n        var SplitChars = '~';\n\n        if (ResultStr.indexOf(SplitChars) &gt;= 0) {\n\n            var DtlStr = ResultStr.split(SplitChars);\n\n            var name  = DtlStr[0];\n            var street = DtlStr[1];\n        }\n    }\n}\n</code></pre>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Zach had this one right.. using his method you could also make a seemingly \"multi-dimensional\" array.. I created a quick example at JSFiddle <a href=\"http://jsfiddle.net/LcnvJ/2/\" rel=\"nofollow\">http://jsfiddle.net/LcnvJ/2/</a></p>\n\n<pre><code>// array[0][0] will produce brian\n// array[0][1] will produce james\n\n// array[1][0] will produce kevin\n// array[1][1] will produce haley\n\nvar array = [];\n    array[0] = \"brian,james,doug\".split(\",\");\n    array[1] = \"kevin,haley,steph\".split(\",\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have this string</p>\n\n<pre><code>'john smith~123 Street~Apt 4~New York~NY~12345'\n</code></pre>\n\n<p>Using JavaScript, what is the fastest way to parse this into</p>\n\n<pre><code>var name = \"john smith\";\nvar street= \"123 Street\";\n//etc...\n</code></pre>\n",
            "last_activity_date": 1419601910,
            "question_id": 96428,
            "score": 165,
            "tags": [
                "javascript",
                "string-split"
            ],
            "title": "How do I split a string, breaking at a particular character?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>I don't think this is possible (at least not without using some internals). And I don't think you would gain much by optimizing this.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you are actually running into a performance problem I would suggest wrapping the calls that add/remove properties to/from the object with a function that also increments/decrements an appropriately named (size?) property.</p>\n\n<p>You only need to calculate the initial number of properties once and move on from there. If there isn't an actual performance problem, don't bother. Just wrap that bit of code in a function <code>getNumberOfProperties(object)</code> and be done with it.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I'm not aware of any way to do this, however to keep the iterations to a minimum, you could try checking for the existance of <code>__count__</code> and if it doesn't exist (ie not Firefox) then you could iterate over the object and define it for later use eg:</p>\n\n<pre><code>if (myobj.__count__ === undefined) {\n  myobj.__count__ = ...\n}\n</code></pre>\n\n<p>This way any browser supporting <code>__count__</code> would use that, and iterations would only be carried out for those which don't. If the count changes and you can't do this, you could always make it a function:</p>\n\n<pre><code>if (myobj.__count__ === undefined) {\n  myobj.__count__ = function() { return ... }\n  myobj.__count__.toString = function() { return this(); }\n}\n</code></pre>\n\n<p>This way anytime you reference myobj.<code>__count__</code> the function will fire and recalculate.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I just stumbled on this question. It's quite old, but since there's no accepted answer try this:</p>\n\n<pre><code>keys(myObj).length\n</code></pre>\n\n<p>I'm not sure how efficient this is, but it requires the least amount of code :)</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>To do this in any ES5-compatible environment, such as <a href=\"http://nodejs.org\">Node</a>, Chrome, IE 9+, FF 4+, or Safari 5+:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>Object.keys(obj).length\n</code></pre>\n\n<ul>\n<li><a href=\"http://kangax.github.com/es5-compat-table/\">Browser compatibility</a></li>\n<li><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/keys\">Object.keys documentation</a> \n<ul>\n<li>(includes a method you can add to non-ECMA5 browsers)</li>\n</ul></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 860
                },
                {
                    "body": "<p>You could use this code:</p>\n\n<pre><code>if (!Object.keys) {\n    Object.keys = function (obj) {\n        var keys = [],\n            k;\n        for (k in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, k)) {\n                keys.push(k);\n            }\n        }\n        return keys;\n    };\n}\n</code></pre>\n\n<p>then you can do this in older browsers as well:</p>\n\n<pre><code>var len = Object.keys(obj).length;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 99
                },
                {
                    "body": "<p>If you are using <a href=\"http://documentcloud.github.com/underscore/\">Underscore.js</a> you can use <a href=\"http://documentcloud.github.com/underscore/#size\">_.size</a> (thanks @douwe):<br>\n<code>_.size(obj)</code></p>\n\n<p>Alternatively you can also use <a href=\"http://documentcloud.github.com/underscore/#keys\">_.keys</a> which might be clearer for some:<br>\n<code>_.keys(obj).length</code> </p>\n\n<p>I highly recommend Underscore, its a tight library for doing lots of basic things. Whenever possible they match ECMA5 and defer to the native implementation.</p>\n\n<p>Otherwise I support @Avi's answer. I edited it to add a link to the MDC doc which includes the keys() method you can add to non-ECMA5 browsers.</p>\n",
                    "is_accepted": false,
                    "score": 64
                },
                {
                    "body": "<p>How I've solved this problem is to build my own implementation of a basic list which keeps a record of how many items are stored in the object. Its very simple. Something like this:</p>\n\n<pre><code>function BasicList()\n{\n   var items = {};\n   this.count = 0;\n\n   this.add = function(index, item)\n   {\n      items[index] = item;\n      this.count++;\n   }\n\n   this.remove = function (index)\n   {\n      delete items[index];\n      this.count--;\n   }\n\n   this.get = function(index)\n   {\n      if (undefined === index)\n        return items;\n      else\n        return items[index];\n   }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Google Closure has a nice function for this... goog.object.getCount(obj)</p>\n\n<p><a href=\"http://closure-library.googlecode.com/svn/docs/closure_goog_object_object.js.html\" rel=\"nofollow\">look at goog.Object Documentation</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For those who have Underscore.js included in their project you can do:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>_({a:'', b:''}).size() // =&gt; 2\n</code></pre>\n\n<p>or functional style:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>_.size({a:'', b:''}) // =&gt; 2\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>For those that have Ext JS 4 in their project you can do:</p>\n\n<pre><code>Ext.Object.getSize(myobj);\n</code></pre>\n\n<p>The advantage of this is that it'll work on all Ext compatible browsers (IE6-IE8 included), however, I believe the running time is no better than O(n) though, as with other suggested solutions.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If jQuery above does not work, then try</p>\n\n<pre><code>$(Object.Item).length\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As stated by Avi Flax <a href=\"http://stackoverflow.com/a/4889658/1047014\">http://stackoverflow.com/a/4889658/1047014</a></p>\n\n<pre><code>Object.keys(obj).length\n</code></pre>\n\n<p>will do the trick for all enumerable properties on your object but to also include the non-enumerable properties you can instead use the <code>Object.getOwnPropertyNames</code>. Here's the difference:</p>\n\n<pre><code>var myObject = new Object();\n\nObject.defineProperty(myObject, \"nonEnumerableProp\", {\n  enumerable: false\n});\nObject.defineProperty(myObject, \"enumerableProp\", {\n  enumerable: true\n});\n\nconsole.log(Object.getOwnPropertyNames(myObject).length); //outputs 2\nconsole.log(Object.keys(myObject).length); //outputs 1\n\nconsole.log(myObject.hasOwnProperty(\"nonEnumerableProp\")); //outputs true\nconsole.log(myObject.hasOwnProperty(\"enumerableProp\")); //outputs true\n\nconsole.log(\"nonEnumerableProp\" in myObject); //outputs true\nconsole.log(\"enumerableProp\" in myObject); //outputs true\n</code></pre>\n\n<p>As stated <a href=\"http://kangax.github.com/es5-compat-table/\">here</a> this has the same browser support as <code>Object.keys</code></p>\n\n<p>However, in most cases, you might not want to include the nonenumerables in these type of operations, but it's always good to know the difference ;)</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The standard Object implementation ( <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.6.2\">ES5.1 Object Internal Properties and Methods\n</a>) does not require an Object to track its number of keys/properties, so there should be no standard way to determine the size of an Object without explicitly or implicitly iterating over its keys.</p>\n\n<p>So here are the most commonly used alternatives:</p>\n\n\n\n<h3>1. ECMAScript's Object.keys()</h3>\n\n<p><code>Object.keys(obj).length;</code> Works by <em>internally</em> iterating over the keys to compute a temporary array and returns its length.</p>\n\n<ul>\n<li><strong>Pros</strong> - Readable and clean syntax. No library or custom code required except a shim if native support is unavailable</li>\n<li><strong>Cons</strong> - Memory overhead due to the creation of the array.</li>\n</ul>\n\n<h3>2. Library-based solutions</h3>\n\n<p>Many library-based examples elsewhere in this topic are usefull idioms in the context of their library. From a performance viewpoint, however, there is nothing to gain compared to a perfect no-library code since all those library methods actually encapsulate either a for-loop or ES5 <code>Object.keys</code> (native or shimmed). </p>\n\n<h3>3. Optimizing a for-loop</h3>\n\n<p>The <strong>slowest part</strong> of such a for-loop is generally the <code>.hasOwnProperty()</code> call, because of the function call overhead. So when I just want the number of entries of a JSON object, I just skip the <code>.hasOwnProperty()</code> call if I know that no code did nor will extend  <code>Object.prototype</code>. </p>\n\n<p>Otherwise, your code could be very slightly optimized by making <code>k</code> local (<code>var k</code>) and by using prefix-decrement operator (<code>++count</code>) instead of postfix.</p>\n\n<pre><code>var count = 0;\nfor (var k in myobj) if (myobj.hasOwnProperty(k)) ++count;\n</code></pre>\n\n<p>Another idea relies on caching the <code>hasOwnProperty</code> method:</p>\n\n<pre><code>var hasOwn = Object.prototype.hasOwnProperty;\nvar count = 0;\nfor (var k in myobj) if (hasOwn.call(myobj, k)) ++count;\n</code></pre>\n\n<p>Whether this is faster or not on a given environment is a question of benchmarking. Very limited performance gain can be expected anyway.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>To iterate on Avi Flax answer Object.keys(obj).length is correct for an object that doesnt have functions tied to it</p>\n\n<p>example:</p>\n\n<pre><code>obj = {\"lol\": \"what\", owo: \"pfft\"};\nObject.keys(obj).length; // should be 2\n</code></pre>\n\n<p>versus</p>\n\n<pre><code>arr = [];\nobj = {\"lol\": \"what\", owo: \"pfft\"};\nobj.omg = function(){\n    _.each(obj, function(a){\n        arr.push(a);\n    });\n};\nObject.keys(obj).length; // should be 3 becuase it looks like this \n/* obj === {\"lol\": \"what\", owo: \"pfft\", omg: function(){_.each(obj, function(a){arr.push(a);});}} */\n</code></pre>\n\n<p>steps to avoid this:</p>\n\n<ol>\n<li><p>do not put functions in an object that you want to count the number of keys in</p></li>\n<li><p>use a seperate object or make a new object specifically for functions (if you want to count how many functions there are in the file using <code>Object.keys(obj).length</code>)</p></li>\n</ol>\n\n<p>also yes i used the _ or underscore module from nodejs in my example </p>\n\n<p>documentation can be found here <a href=\"http://underscorejs.org/\" rel=\"nofollow\">http://underscorejs.org/</a> as well as its source on github and various other info</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>What's the fastest way to count the number of keys/properties of an object?  It it possible to do this without iterating over the object?  i.e. without doing</p>\n\n<pre><code>var count = 0;\nfor (k in myobj) if (myobj.hasOwnProperty(k)) count++;\n</code></pre>\n\n<p>(Firefox did provide a magic <code>__count__</code> property, but this was removed somewhere around version 4.)</p>\n",
            "last_activity_date": 1416334178,
            "question_id": 126100,
            "score": 498,
            "tags": [
                "javascript",
                "performance",
                "properties",
                "count",
                "key"
            ],
            "title": "How to efficiently count the number of keys/properties of an object in JavaScript?"
        },
        {
            "answer_count": 27,
            "answers": [
                {
                    "body": "<p>this works for me (safari 3.2), by firing from within the <code>window.onload</code> event:</p>\n\n<pre><code>$(window).load(function() {\n  var pic = $('img');\n\n  pic.removeAttr(\"width\"); \n  pic.removeAttr(\"height\");\n\n  alert( pic.width() );\n  alert( pic.height() );\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>The root problem is that WebKit browsers (Safari and Chrome) load JavaScript and CSS information in parallel. Thus, JavaScript may execute before the styling effects of CSS have been computed, returning the wrong answer. In jQuery, I've found that the solution is to wait until document.readyState == 'complete', .e.g.,</p>\n\n<pre><code>jQuery(document).ready(function(){\n  if (jQuery.browser.safari &amp;&amp; document.readyState != \"complete\"){\n    //console.info('ready...');\n    setTimeout( arguments.callee, 100 );\n    return;\n  } \n  ... (rest of function)\n</code></pre>\n\n<p>As far as width and height goes... depending on what you are doing you may want offsetWidth and offsetHeight, which include things like borders and padding.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Webkit browsers set the height and width property after the image is loaded.  Instead of using timeouts, I'd recommend using an image's onload event.  Here's a quick example:</p>\n\n<pre><code>var img = $(\"img\")[0]; // Get my img elem\nvar pic_real_width, pic_real_height;\n$(\"&lt;img/&gt;\") // Make in memory copy of image to avoid css issues\n    .attr(\"src\", $(img).attr(\"src\"))\n    .load(function() {\n        pic_real_width = this.width;   // Note: $(this).width() will not\n        pic_real_height = this.height; // work for in memory images.\n    });\n</code></pre>\n\n<p>To avoid any affects CSS might have on the image's dimensions, the code above makes an in memory copy of the image.  This is a very clever solution suggested by <a href=\"http://stackoverflow.com/questions/318630#3192577\">FDisk</a>.</p>\n",
                    "is_accepted": true,
                    "score": 278
                },
                {
                    "body": "<p>For functions where you do not want to alter the original placement or image.</p>\n\n<pre><code>$(this).clone().removeAttr(\"width\").attr(\"width\");\n$(this).clone().removeAttr(\"height\").attr(\"height);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As Luke Smith says, <a href=\"http://twitter.com/ls%5Fn/status/5178745627\" rel=\"nofollow\">image load is a mess</a>. It's not reliable on all browsers. This fact has given me great pain. A cached image will not fire the event at all in some browsers, so those who said \"image load is better than setTimeout\" are wrong.</p>\n\n<p>Luke Smith's solution is <a href=\"http://lucassmith.name/2008/11/is-my-image-loaded.html\" rel=\"nofollow\">here.</a></p>\n\n<p>And there is <a href=\"http://groups.google.com/group/jquery-dev/browse%5Ffrm/thread/eee6ab7b2da50e1f\" rel=\"nofollow\">an interesting discussion</a> about how this mess might be handled in jQuery 1.4.</p>\n\n<p>I have found that it's pretty reliable to set the width to 0, then wait for the \"complete\" property to go true and the width property to come in greater than zero. You should watch for errors, too.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><pre><code>\nfunction getOriginalWidthOfImg(img_element) {\n    var t = new Image();\n    t.src = (img_element.getAttribute ? img_element.getAttribute(\"src\") : false) || img_element.src;\n    return t.width;\n}\n</pre></code></p>\n\n<p>You don't need to remove style from the image or image dimensions attributes. Just create an element with javascript and get the created object width.</p>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<pre><code>$(\"#myImg\").one(\"load\",function(){\n  //do something, like getting image width/height\n}).each(function(){\n  if(this.complete) $(this).trigger(\"load\");\n});\n</code></pre>\n\n<p>From Chris' comment: <a href=\"http://api.jquery.com/load-event/\" rel=\"nofollow\">http://api.jquery.com/load-event/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is now a jQuery plugin, <code>event.special.load</code>, to deal with cases where the load event on a cached image doesn't fire: <a href=\"http://github.com/peol/jquery.imgloaded/raw/master/ahpi.imgload.js\" rel=\"nofollow\">http://github.com/peol/jquery.imgloaded/raw/master/ahpi.imgload.js</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>How we get right real dimensions without a blink real image:</p>\n\n<pre><code>(function( $ ){\n   $.fn.getDimensions=function(){\n         alert(\"First example:This works only for HTML code without CSS width/height definition.\");\n         w=$(this, 'img')[0].width;\n         h=$(this, 'img')[0].height;\n\n         alert(\"This is a width/height on your monitor: \" + $(this, 'img')[0].width+\"/\"+$(this, 'img')[0].height);\n\n         //This is bad practice - it shows on your monitor\n         $(this, 'img')[0].removeAttribute( \"width\" );\n         $(this, 'img')[0].removeAttribute( \"height\" );\n         alert(\"This is a bad effect of view after attributes removing, but we get right dimensions: \"+  $(this, 'img')[0].width+\"/\"+$(this, 'img')[0].height);\n         //I'am going to repare it\n         $(this, 'img')[0].width=w;\n         $(this, 'img')[0].height=h;\n         //This is a good practice - it doesn't show on your monitor\n         ku=$(this, 'img').clone(); //We will work with a clone\n         ku.attr( \"id\",\"mnbv1lk87jhy0utrd\" );//Markup clone for a final removing\n         ku[0].removeAttribute( \"width\" );\n         ku[0].removeAttribute( \"height\" );\n         //Now we still get 0\n         alert(\"There are still 0 before a clone appending to document: \"+ $(ku)[0].width+\"/\"+$(ku)[0].height);\n         //Hide a clone\n         ku.css({\"visibility\" : \"hidden\",'position':'absolute','left':'-9999px'}); \n         //A clone appending\n         $(document.body).append (ku[0]);\n         alert(\"We get right dimensions: \"+ $(ku)[0].width+\"/\"+$(ku)[0].height);\n         //Remove a clone\n         $(\"#mnbv1lk87jhy0utrd\").remove();\n\n         //But a next resolution is the best of all. It works in case of CSS definition of dimensions as well.\n         alert(\"But if you want to read real dimensions for image with CSS class definition outside of img element, you can't do it with a clone of image. Clone method is working with CSS dimensions, a clone has dimensions as well as in CSS class. That's why you have to work with a new img element.\");\n         imgcopy=$('&lt;img src=\"'+ $(this, 'img').attr('src') +'\" /&gt;');//new object \n         imgcopy.attr( \"id\",\"mnbv1lk87jhy0aaa\" );//Markup for a final removing\n         imgcopy.css({\"visibility\" : \"hidden\",'position':'absolute','left':'-9999px'});//hide copy \n         $(document.body).append (imgcopy);//append to document \n         alert(\"We get right dimensions: \"+ imgcopy.width()+\"/\"+imgcopy.height());\n         $(\"#mnbv1lk87jhy0aaa\").remove();\n\n\n   }\n})( jQuery );\n\n$(document).ready(function(){\n\n   $(\"img.toreaddimensions\").click(function(){$(this).getDimensions();});\n});\n</code></pre>\n\n<p>It works with &lt;img class=\"toreaddimensions\"... </p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I checked out the answer of Dio and it works great for me.</p>\n\n<p><code>$('#image').fadeIn(10,function () {var tmpW = $(this).width(); var tmpH = $(this).height(); });</code></p>\n\n<p>Make sure that you call all your functions aso. that handle with the image size in the recaller function of fadeIn().</p>\n\n<p>Thanks for this.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use different approach, simply make Ajax call to server to get image size when image object is in use.</p>\n\n<pre><code>//make json call to server to get image size\n$.getJSON(\"http://server/getimagesize.php\",\n{\"src\":url},\nSetImageWidth\n);\n\n//callback function\nfunction SetImageWidth(data) {\n\n    var wrap = $(\"div#image_gallery #image_wrap\");\n\n    //remove height\n     wrap.find(\"img\").removeAttr('height');\n    //remove height\n     wrap.find(\"img\").removeAttr('width');\n\n    //set image width\n    if (data.width &gt; 635) {\n        wrap.find(\"img\").width(635);\n    }\n    else {\n         wrap.find(\"img\").width(data.width);\n    }\n}\n</code></pre>\n\n<p>and of course server side code:</p>\n\n<pre><code>&lt;?php\n\n$image_width = 0;\n$image_height = 0;\n\nif (isset ($_REQUEST['src']) &amp;&amp; is_file($_SERVER['DOCUMENT_ROOT'] . $_REQUEST['src'])) {\n\n    $imageinfo = getimagesize($_SERVER['DOCUMENT_ROOT'].$_REQUEST['src']);\n    if ($imageinfo) {\n       $image_width=  $imageinfo[0];\n       $image_height= $imageinfo[1];\n    }\n}\n\n$arr = array ('width'=&gt;$image_width,'height'=&gt;$image_height);\n\necho json_encode($arr);\n\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Recently I needed to find width and height for setting default size of .dialog representing graph. Solution I use was : </p>\n\n<pre><code> graph= $('&lt;img/&gt;', {\"src\":'mySRC', id:'graph-img'});\n    graph.bind('load', function (){\n        wid = graph.attr('width');\n        hei = graph.attr('height');\n\n        graph.dialog({ autoOpen: false, title: 'MyGraphTitle', height:hei, width:wid })\n    })\n</code></pre>\n\n<p>For me this works in FF3, Opera 10, IE 8,7,6</p>\n\n<p>P.S. You may be find some more solutions looking inside some plugins like LightBox or ColorBox</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There's a lot of discussion in the accepted answer about a problem where the <code>onload</code> event doesn't fire if an image is loaded from the WebKit cache.</p>\n\n<p>In my case, <code>onload</code> fires for cached images, but the height and width are still 0.  A simple <code>setTimeout</code> resolved the issue for me:</p>\n\n<pre><code>$(\"img\").one(\"load\", function(){\n    var img = this;\n    setTimeout(function(){\n        // do something based on img.width and/or img.height\n    }, 0);\n});\n</code></pre>\n\n<p>I can't speak as to why the <code>onload</code> event is firing even when the image is loaded from the cache (improvement of jQuery 1.4/1.5?) \u2014 but if you are still experiencing this problem, maybe a combination of my answer and the <code>var src = img.src; img.src = \"\"; img.src = src;</code> technique will work.</p>\n\n<p>(Note that for my purposes, I'm not concerned about pre-defined dimensions, either in the image's attributes or CSS styles \u2014 but you might want to remove those, as per Xavi's answer.  Or clone the image.)</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Use the <code>naturalHeight</code> and <code>naturalWidth</code> attributes from <a href=\"http://www.w3.org/TR/html5/embedded-content-0.html#the-img-element\">HTML5</a>.</p>\n\n<p>For example:</p>\n\n<pre><code>var h = document.querySelector('img').naturalHeight;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 88
                },
                {
                    "body": "<p>To add to Xavi's answer, <strike><a href=\"https://gist.github.com/268257\" rel=\"nofollow\">Paul Irish's github</a></strike> <a href=\"https://github.com/desandro/imagesloaded\" rel=\"nofollow\">David Desandro's gitgub offers a function called imagesLoaded()</a> that works on the same principles, and gets around the problem of some browser's cached images not firing the .load() event (with clever original_src -> data_uri -> original_src switching).</p>\n\n<p>It's is widely used and updated regularly, which contributes to it being the most robust solution to the problem, IMO.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As stated before, <a href=\"http://stackoverflow.com/questions/318630/get-real-image-width-and-height-with-javascript-in-safari-chrome/670433#670433\">Xavi answer</a> won't work if images are in the cache. The issue responds to webkit not firing the load event on cached images, so if the width/height attrs are no explicitly set in the img tag, the only reliable way to get the images is to wait for the <code>window.load</code> event to be fired.</p>\n\n<p>The <code>window.load</code> event will fire <strong>always</strong>, so it's safe to access the width/height of and img after that without any trick.</p>\n\n<pre><code>$(window).load(function(){\n\n   //these all work\n\n   $('img#someId').css('width');\n   $('img#someId').width();\n   $('img#someId').get(0).style.width;\n   $('img#someId').get(0).width; \n\n});\n</code></pre>\n\n<p>If you need to get the size of dynamically loaded images that might get cached (previously loaded), you can use Xavi method plus a query string to trigger a cache refresh. The downside is that it will cause another request to the server, for an img that is already cached and should be already available. Stupid Webkit.</p>\n\n<pre><code>var pic_real_width   = 0,\n    img_src_no_cache = $('img#someId').attr('src') + '?cache=' + Date.now();\n\n$('&lt;img/&gt;').attr('src', img_src_no_cache).load(function(){\n\n   pic_real_width = this.width;\n\n});\n</code></pre>\n\n<p>ps: if you have a QueryString in the <code>img.src</code> already, you will have to <a href=\"http://stackoverflow.com/questions/486896/adding-a-parameter-to-the-url-with-javascript\">parse it</a> and add the extra param to clear the cache. </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Another suggestion is to use <a href=\"https://github.com/desandro/imagesloaded\" rel=\"nofollow\">imagesLoaded plugin</a>.</p>\n\n<pre><code>$(\"img\").imagesLoaded(function(){\nalert( $(this).width() );\nalert( $(this).height() );\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This works cross browser</p>\n\n<pre><code>var img = new Image();\n$(img).bind('load error', function(e)\n{\n    $.data(img, 'dimensions', { 'width': img.width, 'height': img.height });                    \n});\nimg.src = imgs[i];              \n</code></pre>\n\n<p>get the dimensions by using </p>\n\n<pre><code>$(this).data('dimensions').width;\n$(this).data('dimensions').height;\n</code></pre>\n\n<p>Cheers!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What about <code>image.naturalHeight</code> and <code>image.naturalWidth</code> properties?</p>\n\n<p>Seems to work fine back quite a few versions in Chrome, Safari and Firefox, but not at all in IE8 or even IE9.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This works for both cached and dynamically loaded images.</p>\n\n<pre><code>function LoadImage(imgSrc, callback){\n  var image = new Image();\n  image.src = imgSrc;\n  if (image.complete) {\n    callback(image);\n    image.onload=function(){};\n  } else {\n    image.onload = function() {\n      callback(image);\n      // clear onLoad, IE behaves erratically with animated gifs otherwise\n      image.onload=function(){};\n    }\n    image.onerror = function() {\n        alert(\"Could not load image.\");\n    }\n  }\n}\n</code></pre>\n\n<p>To use this script:</p>\n\n<pre><code>function AlertImageSize(image) {\n  alert(\"Image size: \" + image.width + \"x\" + image.height);\n}\nLoadImage(\"http://example.org/image.png\", AlertImageSize);\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/9543z/2/\" rel=\"nofollow\">http://jsfiddle.net/9543z/2/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've done some workaround utility function, using imagesLoaded jquery plugin:\n<a href=\"https://github.com/desandro/imagesloaded\" rel=\"nofollow\">https://github.com/desandro/imagesloaded</a></p>\n\n<pre><code>            function waitForImageSize(src, func, ctx){\n                if(!ctx)ctx = window;\n                var img = new Image();\n                img.src = src;\n                $(img).imagesLoaded($.proxy(function(){\n                    var w = this.img.innerWidth||this.img.naturalWidth;\n                    var h = this.img.innerHeight||this.img.naturalHeight;\n                    this.func.call(this.ctx, w, h, this.img);\n                },{img: img, func: func, ctx: ctx}));\n            },\n</code></pre>\n\n<p>You can use this by passing url, function and its context. Function is performed after image is loaded and return created image, its width and height.</p>\n\n<pre><code>waitForImageSize(\"image.png\", function(w,h){alert(w+\",\"+h)},this)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can programmatically get the image and check the dimensions using Javascript without having to mess with the DOM at all.</p>\n\n<pre><code>var img = new Image();\nimg.onload = function() {\n  console.log(this.width + 'x' + this.height);\n}\nimg.src = 'http://www.google.com/intl/en_ALL/images/logo.gif';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>$(document).ready(function(){\n                            var image = $(\"#fix_img\");\n                            var w = image.width();\n                            var h = image.height();\n                            var mr = 274/200;\n                            var ir = w/h\n                            if(ir &gt; mr){\n                                image.height(200);\n                                image.width(200*ir);\n                            } else{\n                                image.width(274);\n                                image.height(274/ir);\n                            }\n                        }); \n</code></pre>\n\n<p>// This code helps to show image with 200*274 dimention</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>My situation is probably a little different. I am dynamically changing the src of an image via javascript and needed to ensure that the new image is sized proportionally to fit a fixed container (in a photo gallery). I initially just removed the width and height attributes of the image after it is loaded (via the image's load event) and reset these after calculating the preferred dimensions. However, that does not work in Safari and possibly IE (I have not tested it in IE thoroughly, but the image doesn't even show, so...). </p>\n\n<p>Anyway, Safari keeps the dimensions of the previous image so the dimensions are always one image behind. I assume that this has something to do with cache. So the simplest solution is to just clone the image and add it to the DOM (it is important that it be added to the DOM the get the with and height). Give the image a visibility value of hidden (do not use display none because it will not work). After you get the dimensions remove the clone.</p>\n\n<p>Here is my code using jQuery:</p>\n\n<pre><code>// Hack for Safari and others\n// clone the image and add it to the DOM\n// to get the actual width and height\n// of the newly loaded image\n\nvar cloned, \n    o_width, \n    o_height, \n    src = 'my_image.jpg', \n    img = [some existing image object];\n\n$(img)\n.load(function()\n{\n    $(this).removeAttr('height').removeAttr('width');\n    cloned = $(this).clone().css({visibility:'hidden'});\n    $('body').append(cloned);\n    o_width = cloned.get(0).width; // I prefer to use native javascript for this\n    o_height = cloned.get(0).height; // I prefer to use native javascript for this\n    cloned.remove();\n    $(this).attr({width:o_width, height:o_height});\n})\n.attr(src:src);\n</code></pre>\n\n<p>This solution works in any case.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's a cross browser solution that triggers an event when your selected images are loaded: <a href=\"http://desandro.github.io/imagesloaded/\" rel=\"nofollow\">http://desandro.github.io/imagesloaded/</a> you can look up the height and width within the imagesLoaded() function.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Stumbled upon this thread trying to find an answer for my own question. I was trying to get an image's width/height in a function AFTER the loader, and kept coming up with 0. I feel like this might be what you're looking for, though, as it works for me:</p>\n\n<pre><code>tempObject.image = $('&lt;img /&gt;').attr({ 'src':\"images/prod-\" + tempObject.id + \".png\", load:preloader });\nxmlProjectInfo.push(tempObject);\n\nfunction preloader() {\n    imagesLoaded++;\n    if (imagesLoaded &gt;= itemsToLoad) { //itemsToLoad gets set elsewhere in code\n        DetachEvent(this, 'load', preloader); //function that removes event listener\n        drawItems();\n    }   \n}\n\nfunction drawItems() {\n    for(var i = 1; i &lt;= xmlProjectInfo.length; i++)\n        alert(xmlProjectInfo[i - 1].image[0].width);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If the image is already used, you sholud:</p>\n\n<ol>\n<li><p>set image simensions to initial</p>\n\n<p>image.css('width', 'initial');\nimage.css('height', 'initial');</p></li>\n<li><p>get dimensions</p>\n\n<p>var originalWidth = $(this).width();\nvar originalHeight = $(this).height();</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am creating a jQuery plugin.</p>\n\n<p>How do I get real image width and height with Javascript in Safari?</p>\n\n<p>Following works with Firefox 3, IE7 and Opera 9:</p>\n\n<pre><code>var pic = $(\"img\")\n\n// need to remove these in of case img-element has set width and height\npic.removeAttr(\"width\"); \npic.removeAttr(\"height\");\n\nvar pic_real_width = pic.width();\nvar pic_real_height = pic.height();\n</code></pre>\n\n<p>But in Webkit browsers like Safari and Google Chrome values are 0...</p>\n\n<p>Doing this on server side is not an option.</p>\n",
            "last_activity_date": 1401182651,
            "question_id": 318630,
            "score": 203,
            "tags": [
                "javascript",
                "jquery",
                "safari",
                "google-chrome",
                "webkit"
            ],
            "title": "Get real image width and height with JavaScript in Safari/Chrome?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Take a look at Doug Neiner's <a href=\"https://github.com/dcneiner/Downloadify\">Downloadify</a> which is a Flash based JavaScript interface to do this.</p>\n\n<blockquote>\n  <p>Downloadify is a tiny JavaScript + Flash library that enables the generation and saving of files on the fly, in the browser, without server interaction. </p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 25
                },
                {
                    "body": "<p>You can generate a <a href=\"http://en.wikipedia.org/wiki/Data_URI\">data URI</a>.  However, there are browser-specific limitations.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You can use localStorage. This is the Html5 equivalent of cookies. It appears to work on Chrome and Firefox BUT on Firefox, I needed to upload it to a server. That is, testing directly on my home computer didn't work.</p>\n\n<p>I'm working up HTML5 examples. Go to <a href=\"http://faculty.purchase.edu/jeanine.meyer/html5/html5explain.html\" rel=\"nofollow\">http://faculty.purchase.edu/jeanine.meyer/html5/html5explain.html</a>\nand scroll to the maze one. The information to re-build the maze is stored using localStorage.</p>\n\n<p>I came to this article looking for HTML5 JavaScript for loading and working with xml files. Is it the same as older html and JavaScript????</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is a link to the data URI method Mathew suggested, it worked on safari, but not well because I couldn't set the filetype, it gets saved as \"unknown\" and then i have to go there again later and change it in order to view the file...</p>\n\n<p><a href=\"http://www.nihilogic.dk/labs/canvas2image/\" rel=\"nofollow\">http://www.nihilogic.dk/labs/canvas2image/</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>OK, creating a data:URI definitely does the trick for me, thanks to Matthew and Dennkster pointing that option out! Here is basically how I do it:</p>\n\n<p>1) get all the content into a string called \"content\" (e.g. by creating it there initially or by reading innerHTML of the  tag of an already built page).</p>\n\n<p>2) Build the data URI:</p>\n\n<pre><code>uriContent = \"data:application/octet-stream,\" + encodeURIComponent(content);\n</code></pre>\n\n<p>There will be length limitations depending on browser type etc., but e.g. Firefox 3.6.12 works until at least 256k. Encoding in Base64 instead using encodeURIComponent might make things more efficient, but for me that was ok.</p>\n\n<p>3) open a new window and \"redirect\" it to this URI prompts for a download location of my JavaScript generated page:</p>\n\n<pre><code> newWindow=window.open(uriContent, 'neuesDokument');\n</code></pre>\n\n<p>That's it.</p>\n",
                    "is_accepted": false,
                    "score": 156
                },
                {
                    "body": "<p>HTML5 defined a <code>window.saveAs(blob, filename)</code> method. It isn't supported by any browser right now. But there is a compatibility library called <a href=\"http://eligrey.com/blog/post/saving-generated-files-on-the-client-side\" rel=\"nofollow\">FileSaver.js</a> that adds this function to most modern browsers (including Internet Explorer 10+). Internet Explorer 10 supports a <code>navigator.msSaveBlob(blob, filename)</code> method (<a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/hh441122.aspx\" rel=\"nofollow\">MSDN</a>), which is used in FileSaver.js for Internet Explorer support.</p>\n\n<p>I wrote a <a href=\"http://hackworthy.blogspot.com/2012/05/savedownload-data-generated-in.html\" rel=\"nofollow\">blog posting</a> with more details about this problem.</p>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>Simple solution for HTML5 ready browsers...</p>\n\n<pre><code>function download(filename, text) {\n    var pom = document.createElement('a');\n    pom.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    pom.setAttribute('download', filename);\n\n    if (document.createEvent) {\n        var event = document.createEvent('MouseEvents');\n        event.initEvent('click', true, true);\n        pom.dispatchEvent(event);\n    }\n    else {\n        pom.click();\n    }\n}\n</code></pre>\n\n<p><strong>Usage</strong></p>\n\n<pre><code>download('test.txt', 'Hello world!');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 64
                },
                {
                    "body": "<pre><code>function download(content, filename, contentType)\n{\n    if(!contentType) contentType = 'application/octet-stream';\n        var a = document.createElement('a');\n        var blob = new Blob([content], {'type':contentType});\n        a.href = window.URL.createObjectURL(blob);\n        a.download = filename;\n        a.click();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>I've used FileSaver (<a href=\"https://github.com/eligrey/FileSaver.js\" rel=\"nofollow\">https://github.com/eligrey/FileSaver.js</a>) and it works just fine.<br/>\nFor example, I did this function to export logs displayed on a page.<br/>\nYou have to pass an array for the instanciation of the Blob, so I just maybe didn't write this the right way, but it works for me.<br/>\nJust in case, be careful with the replace: this is the syntax to make this global, otherwise it will only replace the first one he meets.</p>\n\n<pre><code>exportLogs : function(){\n    var array = new Array();\n\n    var str = $('#logs').html();\n    array[0] = str.replace(/&lt;br&gt;/g, '\\n\\t');\n\n    var blob = new Blob(array, {type: \"text/plain;charset=utf-8\"});\n    saveAs(blob, \"example.log\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I found two simple approaches that work for me. First, using an already clicked <code>a</code> element and injecting the download data. And second, generating an <code>a</code> element with the download data, executing <code>a.click()</code> and removing it again. But the second approach works only if invoked by a user click action as well. (Some) Browser block <code>click()</code> from other contexts like on loading or triggered after a timeout (setTimeout).</p>\n\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;script type=\"text/javascript\"&gt;\n      function linkDownload(a, filename, content) {\n        contentType =  'data:application/octet-stream,';\n        uriContent = contentType + encodeURIComponent(content);\n        a.setAttribute('href', uriContent);\n        a.setAttribute('download', filename);\n      }\n      function download(filename, content) {\n        var a = document.createElement('a');\n        linkDownload(a, filename, content);\n        document.body.appendChild(a);\n        a.click();\n        document.body.removeChild(a);\n      }\n    &lt;/script&gt;\n   &lt;/head&gt;\n  &lt;body&gt;\n    &lt;a href=\"#\" onclick=\"linkDownload(this, 'test.txt', 'Hello World!');\"&gt;download&lt;/a&gt;\n    &lt;button onclick=\"download('test.txt', 'Hello World!');\"&gt;download&lt;/button&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>How about using filesaver.js?It is an implementaion of saveAs() API</p>\n\n<p><a href=\"http://eligrey.com/demos/FileSaver.js/\" rel=\"nofollow\">http://eligrey.com/demos/FileSaver.js/</a></p>\n\n<p><a href=\"https://github.com/eligrey/FileSaver.js\" rel=\"nofollow\">https://github.com/eligrey/FileSaver.js</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've been fiddling with WebGL lately, and have gotten a Collada reader working. Problem is it's pretty slow (Collada is a very verbose format), so I'm going to start converting files to a easier to use format (probably JSON). Thing is, I already have the code to parse the file in Javascript, so I may as well use it as my exporter too! The problem is saving.</p>\n\n<p>Now, I know that I can parse the file, send the result to the server, and have the browser request the file back from the server as a download. But in reality the server has nothing to do with this particular process, so why get it involved? I already have the contents of the desired file in memory. Is there any way that I could present the user with a download using pure javascript? (I doubt it, but might as well ask...)</p>\n\n<p>And to be clear: I am not trying to access the filesystem without the users knowledge! The user will provide a file (probably via drag and drop), the script will transform the file in memory, and the user will be prompted to download the result. All of which should be \"safe\" activities as far as the browser is concerned.</p>\n\n<p><b>[EDIT]:</b> I didn't mention it upfront, so the posters who answered \"Flash\" are valid enough, but part of what I'm doing is an attempt to highlight what can be done with pure HTML5... so Flash is right out in my case. (Though it's a perfectly valid answer for anyone doing a \"real\" web app.) That being the case it looks like I'm out of luck unless I want to involve the server. Thanks anyway!</p>\n",
            "last_activity_date": 1425934223,
            "question_id": 2897619,
            "score": 138,
            "tags": [
                "javascript",
                "html5",
                "download"
            ],
            "title": "Using HTML5/Javascript to generate and save a file"
        },
        {
            "answer_count": 19,
            "answers": [
                {
                    "body": "<pre><code>var browser = navigator.appName;\nvar version = navigator.appVersion;\n</code></pre>\n\n<p>Note, however, that both will not necessarily reflect the truth. Many browsers can be set to mask as other browsers. So, for example, you can't always be sure if a user is actually surfing with IE6 or with Opera that pretends to be IE6.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>It is usually best to avoid browser-specific code where possible. The JQuery <code>$.support</code> property is available for detection of support for particular features rather than relying on browser name and version.</p>\n\n<p>In Opera for example, you can fake an internet explorer or firefox instance.</p>\n\n<p><img src=\"http://www.davidtan.org/wp-content/uploads/2009/02/opera-quick-preferences-network-user-agent.png\" alt=\"alt text\"></p>\n\n<p>A detailed description of JQuery.support can be found here: <a href=\"http://api.jquery.com/jQuery.support/\" rel=\"nofollow\">http://api.jquery.com/jQuery.support/</a></p>\n\n<p>Now deprecated according to jQuery.</p>\n\n<blockquote>\n  <p>We strongly recommend the use of an external library such as <a href=\"http://modernizr.com/\" rel=\"nofollow\">Modernizr</a>\n  instead of dependency on properties in <code>jQuery.support</code>.</p>\n</blockquote>\n\n<p>When coding websites, I always make sure, that basic functionality like navigation is also accessible to non-js users. This may be object to discussion and can be ignored if the homepage is targeted to a special audience.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>This <a href=\"http://www.quirksmode.org/js/detect.html\" rel=\"nofollow\">little library</a> may help you. But be aware that browser detection is not always the solution.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is something I wrote to get client info</p>\n\n<pre><code>var ua = navigator.userAgent.toLowerCase();\nvar check = function(r) {\n    return r.test(ua);\n};\nvar DOC = document;\nvar isStrict = DOC.compatMode == \"CSS1Compat\";\nvar isOpera = check(/opera/);\nvar isChrome = check(/chrome/);\nvar isWebKit = check(/webkit/);\nvar isSafari = !isChrome &amp;&amp; check(/safari/);\nvar isSafari2 = isSafari &amp;&amp; check(/applewebkit\\/4/); // unique to\n// Safari 2\nvar isSafari3 = isSafari &amp;&amp; check(/version\\/3/);\nvar isSafari4 = isSafari &amp;&amp; check(/version\\/4/);\nvar isIE = !isOpera &amp;&amp; check(/msie/);\nvar isIE7 = isIE &amp;&amp; check(/msie 7/);\nvar isIE8 = isIE &amp;&amp; check(/msie 8/);\nvar isIE6 = isIE &amp;&amp; !isIE7 &amp;&amp; !isIE8;\nvar isGecko = !isWebKit &amp;&amp; check(/gecko/);\nvar isGecko2 = isGecko &amp;&amp; check(/rv:1\\.8/);\nvar isGecko3 = isGecko &amp;&amp; check(/rv:1\\.9/);\nvar isBorderBox = isIE &amp;&amp; !isStrict;\nvar isWindows = check(/windows|win32/);\nvar isMac = check(/macintosh|mac os x/);\nvar isAir = check(/adobeair/);\nvar isLinux = check(/linux/);\nvar isSecure = /^https/i.test(window.location.protocol);\nvar isIE7InIE8 = isIE7 &amp;&amp; DOC.documentMode == 7;\n\nvar jsType = '', browserType = '', browserVersion = '', osName = '';\nvar ua = navigator.userAgent.toLowerCase();\nvar check = function(r) {\n    return r.test(ua);\n};\n\nif(isWindows){\n    osName = 'Windows';\n\n    if(check(/windows nt/)){\n        var start = ua.indexOf('windows nt');\n        var end = ua.indexOf(';', start);\n        osName = ua.substring(start, end);\n    }\n} else {\n    osName = isMac ? 'Mac' : isLinux ? 'Linux' : 'Other';\n} \n\nif(isIE){\n    browserType = 'IE';\n    jsType = 'IE';\n\n    var versionStart = ua.indexOf('msie') + 5;\n    var versionEnd = ua.indexOf(';', versionStart);\n    browserVersion = ua.substring(versionStart, versionEnd);\n\n    jsType = isIE6 ? 'IE6' : isIE7 ? 'IE7' : isIE8 ? 'IE8' : 'IE';\n} else if (isGecko){\n    var isFF =  check(/firefox/);\n    browserType = isFF ? 'Firefox' : 'Others';;\n    jsType = isGecko2 ? 'Gecko2' : isGecko3 ? 'Gecko3' : 'Gecko';\n\n    if(isFF){\n        var versionStart = ua.indexOf('firefox') + 8;\n        var versionEnd = ua.indexOf(' ', versionStart);\n        if(versionEnd == -1){\n            versionEnd = ua.length;\n        }\n        browserVersion = ua.substring(versionStart, versionEnd);\n    }\n} else if(isChrome){\n    browserType = 'Chrome';\n    jsType = isWebKit ? 'Web Kit' : 'Other';\n\n    var versionStart = ua.indexOf('chrome') + 7;\n    var versionEnd = ua.indexOf(' ', versionStart);\n    browserVersion = ua.substring(versionStart, versionEnd);\n}else{\n    browserType = isOpera ? 'Opera' : isSafari ? 'Safari' : '';\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>You could use the jQuery library to detect the browser version.</p>\n\n<p><strong>Example:</strong></p>\n\n<p>jQuery.browser.version</p>\n\n<p>However, this only makes sense if you are also using other functions of jQuery. Adding an entire library just to detect the browser seems like overkill to me.</p>\n\n<p><strong>More information:</strong>\n<a href=\"http://api.jquery.com/jQuery.browser/\" rel=\"nofollow\">http://api.jquery.com/jQuery.browser/</a></p>\n\n<p>(you have to scroll down a bit)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Not exactly what you want, but close to it:</p>\n\n<pre><code>var jscriptVersion = /*@cc_on @if(@_jscript) @_jscript_version @else @*/ false /*@end @*/;\nvar geckoVersion = navigator.product === 'Gecko' &amp;&amp; navigator.productSub;\nvar operaVersion = 'opera' in window &amp;&amp; 'version' in opera &amp;&amp; opera.version();\n</code></pre>\n\n<p>The variables will contain the appropriate version or <code>false</code> if it is not available.</p>\n\n<p>I'd appreciate it if someone using Chrome could find out if you can use <code>window.chrome</code> in a similar way to <code>window.opera</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>navigator.sayswho= (function(){\n    var ua= navigator.userAgent, tem,\n    M= ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n    if(/trident/i.test(M[1])){\n        tem=  /\\brv[ :]+(\\d+)/g.exec(ua) || [];\n        return 'IE '+(tem[1] || '');\n    }\n    if(M[1]=== 'Chrome'){\n        tem= ua.match(/\\b(OPR|Edge)\\/(\\d+)/);\n        if(tem!= null) return tem.slice(1).join(' ').replace('OPR', 'Opera');\n    }\n    M= M[2]? [M[1], M[2]]: [navigator.appName, navigator.appVersion, '-?'];\n    if((tem= ua.match(/version\\/(\\d+)/i))!= null) M.splice(1, 1, tem[1]);\n    return M.join(' ');\n})();\n</code></pre>\n\n<p>As the name implies, this will tell you the  name and version number supplied by the browser.</p>\n\n<p>It is handy for sorting test and error results, when you are testing new code on multiple browsers.</p>\n",
                    "is_accepted": true,
                    "score": 183
                },
                {
                    "body": "<p>All the information about web browser is contained in navigator object. The name and version are there.</p>\n\n<pre><code>var appname = window.navigator.appName;\n</code></pre>\n\n<p>Source: <a href=\"http://web-design-lessons.com/articles/article/1/JavaScript%20Browser%20Detection\">javascript browser detection</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>//Copy and paste this into your code/text editor, and try it\n\n//Before you use this to fix compatability bugs, it's best to try inform the browser provider that you have found a bug and there latest browser may not be up to date with the current web standards\n\n//Since none of the browsers use the browser identification system properly you need to do something a bit like this\n\n//Write browser identification\ndocument.write(navigator.userAgent + \"&lt;br&gt;\")\n\n//Detect browser and write the corresponding name\nif (navigator.userAgent.search(\"MSIE\") &gt;= 0){\n    document.write('\"MS Internet Explorer ');\n    var position = navigator.userAgent.search(\"MSIE\") + 5;\n    var end = navigator.userAgent.search(\"; Windows\");\n    var version = navigator.userAgent.substring(position,end);\n    document.write(version + '\"');\n}\nelse if (navigator.userAgent.search(\"Chrome\") &gt;= 0){\ndocument.write('\"Google Chrome ');// For some reason in the browser identification Chrome contains the word \"Safari\" so when detecting for Safari you need to include Not Chrome\n    var position = navigator.userAgent.search(\"Chrome\") + 7;\n    var end = navigator.userAgent.search(\" Safari\");\n    var version = navigator.userAgent.substring(position,end);\n    document.write(version + '\"');\n}\nelse if (navigator.userAgent.search(\"Firefox\") &gt;= 0){\n    document.write('\"Mozilla Firefox ');\n    var position = navigator.userAgent.search(\"Firefox\") + 8;\n    var version = navigator.userAgent.substring(position);\n    document.write(version + '\"');\n}\nelse if (navigator.userAgent.search(\"Safari\") &gt;= 0 &amp;&amp; navigator.userAgent.search(\"Chrome\") &lt; 0){//&lt;&lt; Here\n    document.write('\"Apple Safari ');\n    var position = navigator.userAgent.search(\"Version\") + 8;\n    var end = navigator.userAgent.search(\" Safari\");\n    var version = navigator.userAgent.substring(position,end);\n    document.write(version + '\"');\n}\nelse if (navigator.userAgent.search(\"Opera\") &gt;= 0){\n    document.write('\"Opera ');\n    var position = navigator.userAgent.search(\"Version\") + 8;\n    var version = navigator.userAgent.substring(position);\n    document.write(version + '\"');\n}\nelse{\n    document.write('\"Other\"');\n}\n\n//Use w3schools research the `search()` method as other methods are availible\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I recommend using the tiny javascript library Bowser, yes no r. It is based on the <code>navigator.userAgent</code> and quite well tested for all browsers including iphone, android etc.</p>\n\n<p><a href=\"https://github.com/ded/bowser\">https://github.com/ded/bowser</a></p>\n\n<p>You can use simply say: </p>\n\n<pre><code>if (bowser.msie &amp;&amp; bowser.version &lt;= 6) {\n  alert('Hello China');\n} else if (bowser.firefox){\n  alert('Hello Foxy');\n} else if (bowser.chrome){\n  alert('Hello Silicon Valley');\n} else if (bowser.safari){\n  alert('Hello Apple Fan');\n} else if(bowser.iphone || bowser.android){\n  alert('Hello mobile');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>This tells you all the details about your browser and the version of it.    </p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n&lt;div id=\"example\"&gt;&lt;/div&gt;\n\n&lt;script&gt;\n\ntxt = \"&lt;p&gt;Browser CodeName: \" + navigator.appCodeName + \"&lt;/p&gt;\";\ntxt+= \"&lt;p&gt;Browser Name: \" + navigator.appName + \"&lt;/p&gt;\";\ntxt+= \"&lt;p&gt;Browser Version: \" + navigator.appVersion + \"&lt;/p&gt;\";\ntxt+= \"&lt;p&gt;Cookies Enabled: \" + navigator.cookieEnabled + \"&lt;/p&gt;\";\ntxt+= \"&lt;p&gt;Platform: \" + navigator.platform + \"&lt;/p&gt;\";\ntxt+= \"&lt;p&gt;User-agent header: \" + navigator.userAgent + \"&lt;/p&gt;\";\ntxt+= \"&lt;p&gt;User-agent language: \" + navigator.systemLanguage + \"&lt;/p&gt;\";\n\ndocument.getElementById(\"example\").innerHTML=txt;\n\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<pre><code> var isOpera = !!window.opera || navigator.userAgent.indexOf('Opera') &gt;= 0;\n        // Opera 8.0+ (UA detection to detect Blink/v8-powered Opera)\n        var isFirefox = typeof InstallTrigger !== 'undefined';   // Firefox 1.0+\n        var isSafari = Object.prototype.toString.call(window.HTMLElement).indexOf('Constructor') &gt; 0;\n        // At least Safari 3+: \"[object HTMLElementConstructor]\"\n        var isChrome = !!window.chrome;                          // Chrome 1+\n        var isIE = /*@cc_on!@*/false; \n</code></pre>\n\n<p>you can more read\n<a href=\"http://stackoverflow.com/questions/9847580/how-to-detect-safari-chrome-ie-firefox-and-opera-browser\">How to detect Safari, Chrome, IE, Firefox and Opera browser?</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>With jQuery:</p>\n\n<pre><code>$.browser\n</code></pre>\n\n<p>gives you somthing like:</p>\n\n<pre><code>Object {chrome: true, version: \"26.0.1410.63\", webkit: true}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Sadly, IE11 no longer has 'MSIE' in its navigator.userAgent: \"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; OfficeLiveConnector.1.5; OfficeLivePatch.1.3; .NET4.0C; BRI/2; BOIE9;ENUS; rv:11.0) like Gecko\"<br>\nAs to why you want to know which browser you're using, it's because every browser has its own set of bugs, and you end up implementing browser and version specific workarounds, or tell the user to use a different browser!</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I found something interesting and quicker way.\nIE supports navigator.systemLanguage which returns \"en-US\" where other browsers return \"underfined\".</p>\n\n<p><code>&lt;script&gt;\n    var lang = navigator.systemLanguage;\n    if (lang!='en-US'){document.write(\"Well, this is not internet explorer\");}\n    else{document.write(\"This is internet explorer\");}\n &lt;/script&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is how I do custom CSS for Internet Explorer:</p>\n\n<p>In my JavaScript file:</p>\n\n<pre><code>function isIE () {\n      var myNav = navigator.userAgent.toLowerCase();\n      return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;\n}\n\njQuery(document).ready(function(){\n    if(var_isIE){\n            if(var_isIE == 10){\n                jQuery(\"html\").addClass(\"ie10\");\n            }\n            if(var_isIE == 8){\n                jQuery(\"html\").addClass(\"ie8\");\n                // you can also call here some function to disable things that \n                //are not supported in IE, or override browser default styles.\n            }\n        }\n    });\n</code></pre>\n\n<p>And then in my CSS file, y define each different style:</p>\n\n<pre><code>.ie10 .some-class span{\n    .......\n}\n.ie8 .some-class span{\n    .......\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can do it using JavaScript.</p>\n\n<pre><code>function get_browser() {\n    var ua = navigator.userAgent,\n        tem,\n        M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];\n    if (/trident/i.test(M[1])) {\n        tem =/\\brv[ :]+(\\d+)/g.exec(ua) || [];\n        return 'IE';\n    }\n    if (M[1] === 'Chrome') {\n        tem = ua.match(/\\bOPR\\/(\\d+)/)\n        if (tem != null) {\n            return 'Opera'\n        }\n    }\n    M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, '-?'];\n    if ((tem = ua.match(/version\\/(\\d+)/i)) !=null) {\n        M.splice(1,1,tem[1]);\n    }\n    return M[0];\n}\n\nvar browser = get_browser();\nalert(browser);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Some times we need simple method to check if the browser is IE or not. This is how it could be:</p>\n\n<pre><code> var isMSIE = (/trident/i).test(navigator.userAgent);\n\n if(isMSIE)\n {\n  /* do something for ie */\n }\n else\n {\n  /* do something else */\n }\n</code></pre>\n\n<p>or simplified siva's method:</p>\n\n<pre><code> if(!!navigator.systemLanguage)\n {\n  /* do something for ie */\n }\n else\n {\n  /* do something else */\n }\n</code></pre>\n\n<p>MSIE v.11 check:</p>\n\n<pre><code>if( (/trident/i).test(navigator.userAgent) &amp;&amp; (/rv:/i).test(navigator.userAgent) )\n{\n  /* do something for ie 11 */\n}\n</code></pre>\n\n<p>other IE browsers contain MSIE string in their userAgent property and could be catched by it.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Since Internet Explorer 11 (IE11+) came out and is not using the tag name of <code>MSIE</code> anymore I came up with a variance of an older detection function:</p>\n\n<pre><code>navigator.sayswho= (function(){\n    var N= navigator.appName, ua= navigator.userAgent, tem;\n\n    // if IE11+\n    if (new RegExp(\"Trident/.*rv:([0-9]{1,}[\\.0-9]{0,})\").exec(ua) !== null) {\n        var M= [\"Internet Explorer\"];\n        if(M &amp;&amp; (tem= ua.match(/rv:([0-9]{1,}[\\.0-9]{0,})/))!= null) M[2]= tem[1];\n        M= M? [M[0], M[2]]: [N, navigator.appVersion,'-?'];\n        return M;\n    }\n\n    var M= ua.match(/(opera|chrome|safari|firefox|msie)\\/?\\s*(\\.?\\d+(\\.\\d+)*)/i);\n    if(M &amp;&amp; (tem= ua.match(/version\\/([\\.\\d]+)/i))!= null) M[2]= tem[1];\n    M= M? [M[1], M[2]]: [N, navigator.appVersion,'-?'];\n    return M;\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How do I determine the exact browser and version using JavaScript?</p>\n",
            "last_activity_date": 1423126026,
            "question_id": 2400935,
            "score": 88,
            "tags": [
                "javascript",
                "browser-detection"
            ],
            "title": "Browser detection in JavaScript?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>If you are using jQuery then:</p>\n\n<p>HTML:</p>\n\n<pre><code> &lt;a id=\"openMap\" href=\"/map/\"&gt;link&lt;/a&gt;\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>$(document).ready(function() {\n    $(\"#openMap\").click(function(){\n        popup('/map/', 300, 300, 'map');\n        return false;\n    });\n});\n</code></pre>\n\n<p>This has the benefit of still working without JS, or if the user middle clicks the link.</p>\n\n<p>It also means that I could handle generic popups by rewriting again to:</p>\n\n<p>HTML:</p>\n\n<pre><code> &lt;a class=\"popup\" href=\"/map/\"&gt;link&lt;/a&gt;\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>$(document).ready(function() {\n    $(\".popup\").click(function(){\n        popup($(this).attr(\"href\"), 300, 300, 'map');\n        return false;\n    });\n});\n</code></pre>\n\n<p>This would let you add a popup to any link by just giving it the popup class.</p>\n\n<p>This idea could be extended even further like so:</p>\n\n<p>HTML:</p>\n\n<pre><code> &lt;a class=\"popup\" data-width=\"300\" data-height=\"300\" href=\"/map/\"&gt;link&lt;/a&gt;\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>$(document).ready(function() {\n    $(\".popup\").click(function(){\n        popup($(this).attr(\"href\"), $(this).data('width'), $(this).data('height'), 'map');\n        return false;\n    });\n});\n</code></pre>\n\n<p>I can now use the same bit of code for lots of popups on my whole site without having to write loads of onclick stuff! Yay for reusability!</p>\n\n<p>It also means that if later on I decide that popups are bad practice, (which they are!) and that I want to replace them with a lightbox style modal window, I can change:</p>\n\n<pre><code>popup($(this).attr(\"href\"), $(this).data('width'), $(this).data('height'), 'map');\n</code></pre>\n\n<p>to</p>\n\n<pre><code>myAmazingModalWindow($(this).attr(\"href\"), $(this).data('width'), $(this).data('height'), 'map');\n</code></pre>\n\n<p>and all my popups on my whole site are now working totally differently. I could even do feature detection to decide what to do on a popup, or store a users preference to allow them or not. With the inline onclick, this requires a huge copy and pasting effort.</p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>It's not good for several reasons:</p>\n\n<ul>\n<li>it mixes code and markup</li>\n<li>code written this way goes through <code>eval</code></li>\n<li>and runs in the global scope</li>\n</ul>\n\n<p>The simplest thing would be to add a <code>name</code> attribute to your <code>&lt;a&gt;</code> element, then you could do:</p>\n\n<pre><code>document.myelement.onclick = function() {\n    window.popup('/map/', 300, 300, 'map');\n    return false;\n};\n</code></pre>\n\n<p>although modern best practise would be to use an <code>id</code> instead of a name, and use <code>addEventListener()</code> instead of using <code>onclick</code> since that allows you to bind multiple functions to a single event.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>There are a few reasons:</p>\n\n<ol>\n<li><p>I find it aids maintenence to separate markup, i.e. the HTML and client-side scripts. For example, <a href=\"http://jquery.com/\" rel=\"nofollow\">jQuery</a> makes it easy to add event handlers programatically.</p></li>\n<li><p>The example you give would be broken in any user agent that doesn't support javascript, or has javascript turned off. The concept of <a href=\"http://dev.opera.com/articles/view/graceful-degradation-progressive-enhance/\" rel=\"nofollow\">progressive enhancement</a> would encourage a simple hyperlink to <code>/map/</code> for user agents without javascript, then adding a click handler prgramatically for user agents that support javascript.</p></li>\n</ol>\n\n<p>For example:</p>\n\n<p>Markup:</p>\n\n<pre><code>&lt;a id=\"example\" href=\"/map/\"&gt;link&lt;/a&gt;\n</code></pre>\n\n<p>Javascript:</p>\n\n<pre><code>$(document).ready(function(){\n\n    $(\"#example\").click(function(){\n        popup('/map/', 300, 300, 'map');\n        return false;\n    });\n\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>It's a <strike>new</strike> paradigm called \"<a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\" rel=\"nofollow\">Unobtrusive JavaScript</a>\".  The current \"web standard\" says to separate functionality and presentation.</p>\n\n<p>It's not really a \"bad practice\", it's just that most new standards want you to use event listeners instead of in-lining JavaScript.</p>\n\n<p>Also, this may just be a personal thing, but I think it's much easier to read when you use event listeners, especially if you have more than 1 JavaScript statement you want to run.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You're probably talking about <a href=\"http://en.wikipedia.org/wiki/Unobtrusive_JavaScript\">unobtrusive Javascript</a>, which would look like this:</p>\n\n<pre><code>&lt;a href=\"#\" id=\"someLink\"&gt;link&lt;/a&gt;\n</code></pre>\n\n<p>with the logic in a central javascript file looking something like this:</p>\n\n<pre><code>$('#someLink').click(function(){\n    popup('/map/', 300, 300, 'map'); \n    return false;\n});\n</code></pre>\n\n<p>The advantages are</p>\n\n<ul>\n<li>behaviour (Javascript) is separated from presentation (HTML)</li>\n<li>no mixing of languages</li>\n<li>you're using a javascript framework like jQuery that can handle most cross-browser issues for you</li>\n<li>You can add behaviour to a lot of HTML elements at once without code duplication</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 87
                },
                {
                    "body": "<p>Your question will trigger discussion I suppose. The general idea is that it's good to separate behavior and structure. Furthermore, afaik, an inline click handler has to be <code>eval</code>led to 'become' a real javascript function. And it's pretty old fashioned, allbeit that that's a pretty shaky argument. Ah, well, read some about it <a href=\"http://www.quirksmode.org/js/events_early.html\" rel=\"nofollow\">@quirksmode.org</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>With very large JavaScript applications, programmers are using more encapsulation of code to avoid polluting the global scope. And to make a function available to the onClick action in an HTML element, it has to be in the global scope.</p>\n\n<p>You may have seen JS files that look like this...</p>\n\n<pre><code>(function(){\n    ...[some code]\n}());\n</code></pre>\n\n<p>These are Immediately Invoked Function Expressions (IIFEs) and any function declared within them will only exist within their internal scope. </p>\n\n<p>If you declare <code>function doSomething(){}</code> within an IIFE, then make <code>doSomething()</code> an element's onClick action in your HTML page, you'll get an error.</p>\n\n<p>If, on the other hand, you create an eventListener for that element within that IIFE and call <code>doSomething()</code> when the listener detects a click event, you're good because the listener and <code>doSomething()</code> share the IIFE's scope.</p>\n\n<p>For little web apps with a minimal amount of code, it doesn't matter. But if you aspire to write large, maintainable codebases, <code>onclick=\"\"</code> is a habit that you should work to avoid.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I have heard many times that using JavaScript events, such as <code>onClick()</code>, in HTML is a bad practice, because it's not good for semantics. I would like to know what the downsides are and how to fix the following code?</p>\n\n<pre><code>&lt;a href=\"#\" onclick=\"popup('/map/', 300, 300, 'map'); return false;\"&gt;link&lt;/a&gt;\n</code></pre>\n",
            "last_activity_date": 1418499019,
            "question_id": 5871640,
            "score": 62,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "Why is using onClick() in HTML a bad practice?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>Your <code>getElementById()</code> code works since IDs have to be unique and thus the function always returns exactly one element (or <code>null</code> if none was found).</p>\n\n<p><a href=\"https://developer.mozilla.org/en/DOM/document.getElementsByClassName#Syntax\"><code>getElementsByClassName()</code></a> however returns an array-like collection of elements. Iterate over it like you would with a real array:</p>\n\n<pre><code>var elems = document.getElementsByClassName('myElement');\nfor(var i = 0; i &lt; elems.length; i++) {\n    elems[i].style.size = '100px';\n}\n</code></pre>\n\n<p>If you prefer something shorter, consider using <a href=\"http://jquery.com\">jQuery</a>:</p>\n\n<pre><code>$('.myElement').css('size', '100px');\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 39
                }
            ],
            "body": "<p>Does <code>getElementsByClassName</code> work the same as <code>getElementById</code> or does it return an array of elements?</p>\n\n<p>The reason I ask is because I am trying to change the style of all elements using <code>getElementsByClassName</code>. See below.</p>\n\n<pre><code>//doesn't work\ndocument.getElementsByClassName('myElement').style.size = '100px';\n\n//works\ndocument.getElementById('myIdElement').style.size = '100px';\n</code></pre>\n",
            "last_activity_date": 1406796461,
            "question_id": 10693845,
            "score": 14,
            "tags": [
                "javascript",
                "getelementsbyclassname",
                "dom-traversal"
            ],
            "title": "Why getElementsByClassName does not work for me? What does it return?"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>If you're escaping for HTML, there are only three that I can think of that would be really necessary:</p>\n\n<pre><code>html.replace(/&amp;/g, \"&amp;amp;\").replace(/&lt;/g, \"&amp;lt;\").replace(/&gt;/g, \"&amp;gt;\");\n</code></pre>\n\n<p>Depending on your use case, you might also need to do things like \" to <code>&amp;quot;</code>.  If the list got big enough, I'd just use an array:</p>\n\n<pre><code>var escaped = html;\nvar findReplace = [[/&amp;/g, \"&amp;amp;\"], [/&lt;/g, \"&amp;lt;\"], [/&gt;/g, \"&amp;gt;\"], [/\"/g, \"&amp;quot;\"]]\nfor(var item in findReplace)\n    escaped = escaped.replace(findReplace[item][0], findReplace[item][1]);\n</code></pre>\n\n<p><code>encodeURIComponent()</code> will only escape it for URLs, not for HTML.</p>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>Since you're using jQuery, you can just set the element's <code>text</code> property:</p>\n\n<pre><code>// before:\n// &lt;div class=\"someClass\"&gt;text&lt;/div&gt;\nvar someHtmlString = \"&lt;script&gt;alert('hi!');&lt;/script&gt;\";\nvar escaped = $(\"div.someClass\").text(someHtmlString).html();\n// after: \n// &lt;div class=\"someClass\"&gt;&amp;lt;script&amp;gt;alert('hi!');&amp;lt;/script&amp;gt;&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 229
                },
                {
                    "body": "<pre><code>$('&lt;div/&gt;').text('This is fun &amp; stuff').html(); // \"This is fun &amp;amp; stuff\"\n</code></pre>\n\n<p>Source: <a href=\"http://debuggable.com/posts/encode-html-entities-with-jquery:480f4dd6-13cc-4ce9-8071-4710cbdd56cb\">http://debuggable.com/posts/encode-html-entities-with-jquery:480f4dd6-13cc-4ce9-8071-4710cbdd56cb</a></p>\n",
                    "is_accepted": false,
                    "score": 141
                },
                {
                    "body": "<p>If your're going the regex route, there's an error in tghw's example above.</p>\n\n<pre><code>&lt;!-- WON'T WORK -  item[0] is an index, not an item --&gt;\n\nvar escaped = html; \nvar findReplace = [[/&amp;/g, \"&amp;amp;\"], [/&lt;/g, \"&amp;lt;\"], [/&gt;/g,\"&amp;gt;\"], [/\"/g,\n\"&amp;quot;\"]]\n\nfor(var item in findReplace) {\n     escaped = escaped.replace(item[0], item[1]);   \n}\n\n\n&lt;!-- WORKS - findReplace[item[]] correctly references contents --&gt;\n\nvar escaped = html;\nvar findReplace = [[/&amp;/g, \"&amp;amp;\"], [/&lt;/g, \"&amp;lt;\"], [/&gt;/g, \"&amp;gt;\"], [/\"/g, \"&amp;quot;\"]]\n\nfor(var item in findReplace) {\n     escaped = escaped.replace(findReplace[item[0]], findReplace[item[1]]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>escape() and unescape() are intended to encode/decode strings for URLs, not HTML.</p>\n\n<p>Actually, I use the following snippet to do the trick that doesn't require any framework:</p>\n\n<pre><code>var escapedHtml = html.replace(/&amp;/g, '&amp;amp;')\n                      .replace(/&gt;/g, '&amp;gt;')\n                      .replace(/&lt;/g, '&amp;lt;')\n                      .replace(/\"/g, '&amp;quot;')\n                      .replace(/'/g, '&amp;apos;');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Here is a clean, clear JavaScript function. It will escape text such as \"a few &lt; many\" into \"a few &amp;lt; many\".</p>\n\n<pre><code>function escapeHtmlEntities (str) {\n  if (typeof jQuery !== 'undefined') {\n    // Create an empty div to use as a container,\n    // then put the raw text in and get the HTML\n    // equivalent out.\n    return jQuery('&lt;div/&gt;').text(str).html();\n  }\n\n  // No jQuery, so use string replace.\n  return str\n    .replace(/&amp;/g, '&amp;amp;')\n    .replace(/&gt;/g, '&amp;gt;')\n    .replace(/&lt;/g, '&amp;lt;')\n    .replace(/\"/g, '&amp;quot;');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<pre><code>function htmlEscape(str) {\n    var stringval=\"\";\n    $.each(str, function (i, element) {\n        alert(element);\n        stringval += element\n            .replace(/&amp;/g, '&amp;amp;')\n            .replace(/\"/g, '&amp;quot;')\n            .replace(/'/g, '&amp;#39;')\n            .replace(/&lt;/g, '&amp;lt;')\n            .replace(/&gt;/g, '&amp;gt;')\n            .replace(' ', '-')\n            .replace('?', '-')\n            .replace(':', '-')\n            .replace('|', '-')\n            .replace('.', '-');\n    });\n    alert(stringval);\n    return String(stringval);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Try <a href=\"https://github.com/epeli/underscore.string\">Underscore.string</a> lib, it works with jQuery.</p>\n\n<pre><code>_.str.escapeHTML('&lt;div&gt;Blah blah blah&lt;/div&gt;')\n</code></pre>\n\n<p>output:</p>\n\n<pre><code>'&amp;lt;div&amp;gt;Blah blah blah&amp;lt;/div&amp;gt;'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>There is also the solution from mustache.js</p>\n\n<p><a href=\"https://github.com/janl/mustache.js/blob/master/mustache.js#L82\">https://github.com/janl/mustache.js/blob/master/mustache.js#L82</a></p>\n\n<pre><code> var entityMap = {\n    \"&amp;\": \"&amp;amp;\",\n    \"&lt;\": \"&amp;lt;\",\n    \"&gt;\": \"&amp;gt;\",\n    '\"': '&amp;quot;',\n    \"'\": '&amp;#39;',\n    \"/\": '&amp;#x2F;'\n  };\n\n  function escapeHtml(string) {\n    return String(string).replace(/[&amp;&lt;&gt;\"'\\/]/g, function (s) {\n      return entityMap[s];\n    });\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 192
                },
                {
                    "body": "<pre><code>unescape(escape(\"It's &gt; 20% less complicated this way.\"))\n</code></pre>\n\n<p>Escaped string: \"It%27s%20%3E%2020%25%20less%20complicated%20this%20way.\"</p>\n\n<p>If the escaped spaces bother you, try:</p>\n\n<pre><code>unescape(escape(\"It's &gt; 20% less complicated this way.\").replace(/%20/g, \" \"))\n</code></pre>\n\n<p>Escaped string: \"It%27s %3E 20%25 less complicated this way.\"</p>\n\n<p>Note: This is only for easy embedding and doesn't break embedded HTML and scripts, for which <a href=\"http://stackoverflow.com/a/10825766/819417\">this answer</a> provides the jQuery and normal JS methods.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is a nice safe example...</p>\n\n<pre><code>function escapeHtml(str) {\n    if (typeof(str) == \"string\"){\n        try{\n            var newStr = \"\";\n            var nextCode = 0;\n            for (var i = 0;i &lt; str.length;i++){\n                nextCode = str.charCodeAt(i);\n                if (nextCode &gt; 0 &amp;&amp; nextCode &lt; 128){\n                    newStr += \"&amp;#\"+nextCode+\";\";\n                }\n                else{\n                    newStr += \"?\";\n                }\n             }\n             return newStr;\n        }\n        catch(err){\n        }\n    }\n    else{\n        return str;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I wrote a tiny little function which does this. It only escapes <code>\"</code>, <code>&amp;</code>, <code>&lt;</code> and <code>&gt;</code> (but usually that's all you need anyway). It is slightly more elegant then the earlier proposed solutions in that it only uses <em>one</em> <code>.replace()</code> to do all the conversion.</p>\n\n<pre><code>var escapeHTML = (function () {\n    'use strict';\n    var chr = { '\"': '&amp;quot;', '&amp;': '&amp;amp;', '&lt;': '&amp;lt;', '&gt;': '&amp;gt;' };\n    return function (text) {\n        return text.replace(/[\\\"&amp;&lt;&gt;]/g, function (a) { return chr[a]; });\n    };\n}());\n</code></pre>\n\n<p>And the function uses a closure to keep <code>chr</code> to itself without having to re-initialize it every time you call it. This is plain Javascript, no jQuery needed.</p>\n\n<h2>Escaping <code>/</code> and <code>'</code> too</h2>\n\n<p>Edit in response to <em>mklement</em>'s comment.</p>\n\n<p>The above function can easily be expanded to include any character. To specify more characters to escape, simply insert them both in the character class in the regular expression (i.e. inside the <code>/[...]/g</code>) and as an entry in the <code>chr</code> object.</p>\n\n<pre><code>var escapeHTML = (function () {\n    'use strict';\n    var chr = {\n        '\"': '&amp;quot;', '&amp;': '&amp;amp;', \"'\": '&amp;#39;',\n        '/': '&amp;#47;',  '&lt;': '&amp;lt;',  '&gt;': '&amp;gt;'\n    };\n    return function (text) {\n        return text.replace(/[\\\"&amp;'\\/&lt;&gt;]/g, function (a) { return chr[a]; });\n    };\n}());\n</code></pre>\n\n<p>Note the above use of <code>&amp;#39;</code> for apostrophe (the symbolic entity <code>&amp;apos;</code> might have been used instead \u2013 it is defined in XML, but was originally not included in the HTML spec and might therefore not be supported by all browsers. See: <a href=\"http://en.wikipedia.org/wiki/Character_encodings_in_HTML#HTML_character_references\">Wikipedia article on HTML character encodings</a>). I also recall reading somewhere that using decimal entities is more widely supported than using hexadecimal, but I can't seem to find the source for that now though. (And there cannot be many browsers out there which does not support the hexadecimal entities.)</p>\n\n<p><strong>Note:</strong> Adding <code>/</code> and <code>'</code> to the list of escaped characters isn't all that useful, since they do not have any special meaning in HTML and do not <em>need</em> to be escaped.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>I've enhanced the mustache.js example adding the <code>escapeHTML()</code> method to the string object.</p>\n\n<pre><code>var __entityMap = {\n    \"&amp;\": \"&amp;amp;\",\n    \"&lt;\": \"&amp;lt;\",\n    \"&gt;\": \"&amp;gt;\",\n    '\"': '&amp;quot;',\n    \"'\": '&amp;#39;',\n    \"/\": '&amp;#x2F;'\n};\n\nString.prototype.escapeHTML = function() {\n    return String(this).replace(/[&amp;&lt;&gt;\"'\\/]/g, function (s) {\n        return __entityMap[s];\n    });\n}\n</code></pre>\n\n<p>That way it is quite easy to use <code>\"Some &lt;text&gt;, more Text&amp;Text\".escapeHTML()</code></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>(function(undefined){\n    var charsToReplace = {\n        '&amp;': '&amp;amp;',\n        '&lt;': '&amp;lt;',\n        '&gt;': '&amp;gt;'\n    };\n\n    var replaceReg = new RegExp(\"[\" + Object.keys(charsToReplace).join(\"\") + \"]\", \"g\");\n    var replaceFn = function(tag){ return charsToReplace[tag] || tag; };\n\n    var replaceRegF = function(replaceMap) {\n        return (new RegExp(\"[\" + Object.keys(charsToReplace).concat(Object.keys(replaceMap)).join(\"\") + \"]\", \"gi\"));\n    };\n    var replaceFnF = function(replaceMap) {\n        return function(tag){ return replaceMap[tag] || charsToReplace[tag] || tag; };\n    };\n\n    String.prototype.htmlEscape = function(replaceMap) {\n        if (replaceMap === undefined) return this.replace(replaceReg, replaceFn);\n        return this.replace(replaceRegF(replaceMap), replaceFnF(replaceMap));\n    };\n})();\n</code></pre>\n\n<p>No global variables, some memory optimization.\nUsage: </p>\n\n<pre><code>\"some&lt;tag&gt;and&amp;symbol\u00a9\".htmlEscape({'\u00a9': '&amp;copy;'})\n</code></pre>\n\n<p>result is: </p>\n\n<pre><code>\"some&amp;lt;tag&amp;gt;and&amp;amp;symbol&amp;copy;\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function htmlDecode(t){\n   if (t) return $('&lt;div /&gt;').html(t).text();\n}\n</code></pre>\n\n<p>works like a charm</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>After last tests I can recommend <strong>fastest</strong> and completely cross browser compatible <strong>native java script</strong> (DOM) solution:</p>\n\n<pre><code>function HTMLescape(html){\n    return document.createElement('div')\n        .appendChild(document.createTextNode(html))\n        .parentNode\n        .innerHTML\n}\n</code></pre>\n\n<p>If you repeat it many times you can do it with once prepared variables:</p>\n\n<pre><code>//prepare variables\nvar DOMtext = document.createTextNode(\"test\");\nvar DOMnative = document.createElement(\"span\");\nDOMnative.appendChild(DOMtext);\n\n//main work for each case\nfunction HTMLescape(html){\n  DOMtext.nodeValue = html;\n  return DOMnative.innerHTML\n}\n</code></pre>\n\n<p>Look at my final performance <a href=\"http://jsperf.com/htmlencoderegex/35\">comparison</a> (<a href=\"http://stackoverflow.com/a/17450136/1828986\">stack question</a>).</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Easy enough to use underscore:</p>\n\n<pre><code>_.escape(string) \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>If you have underscore.js, use _.escape (more efficient than the jQuery method posted above):</p>\n\n<pre><code>_.escape('Curly, Larry &amp; Moe'); // returns: Curly, Larry &amp;amp; Moe\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can easily do it with vanilla js.</p>\n\n<p>Simply add a text node the document. \nIt will be escaped by the browser.</p>\n\n<pre><code>var escaped = document.createTextNode(\"&lt;HTML TO/ESCAPE/&gt;\")\ndocument.getElementById(\"[PARENT_NODE]\").appendChild(escaped)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are saving this information in a <strong>database</strong>, its wrong to escape HTML using a <strong>client-side</strong> script, this should be done in the <strong>server</strong>. Otherwise its easy to bypass your XSS protection.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Does anyone know of an easy way to escape HTML from strings in <a href=\"http://jquery.com/\">jQuery</a>?  I need to be able to pass an arbitrary string and have it properly escaped for display in an HTML page (preventing JavaScript/HTML injection attacks).  I'm sure it's possible to extend jQuery to do this, but I don't know enough about the framework at the moment to accomplish this.</p>\n",
            "last_activity_date": 1425668124,
            "question_id": 24816,
            "score": 304,
            "tags": [
                "javascript",
                "jquery",
                "string",
                "escaping"
            ],
            "title": "Escaping HTML strings with jQuery"
        },
        {
            "answer_count": 23,
            "answers": [
                {
                    "body": "<p>You can always try putting it into an object, and then iterating through its keys:</p>\n\n<pre><code>a = [\"Mike\",\"Matt\",\"Nancy\",\"Adam\",\"Jenny\",\"Nancy\",\"Carl\"];\nb = {};\nfor (var i = 0; i &lt; a.length; i++) {\n    b[a[i]] = a[i];\n}\nc = [];\nfor (var key in b) {\n    c.push(key);\n}\n//c:\n//[\"Mike\", \"Matt\", \"Nancy\", \"Adam\", \"Jenny\", \"Carl\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<h2>\"Smart\" but na\u00efve way</h2>\n\n<pre><code>uniqueArray = a.filter(function(item, pos) {\n    return a.indexOf(item) == pos;\n})\n</code></pre>\n\n<p>Basically, we iterate over the array and, for each element, check if the first position of this element in the array is equal to the current position. Obviously, these two positions are different for duplicate elements.</p>\n\n<p>Using the 3rd (\"this array\") parameter of the filter callback we can avoid a closure of the array variable:</p>\n\n<pre><code>uniqueArray = a.filter(function(item, pos, self) {\n    return self.indexOf(item) == pos;\n})\n</code></pre>\n\n<p>Although concise, this algorithm is not particularly efficient for large arrays (quadratic time).</p>\n\n<h2>Hashtables to the rescue</h2>\n\n<pre><code>function uniq(a) {\n    var seen = {};\n    return a.filter(function(item) {\n        return seen.hasOwnProperty(item) ? false : (seen[item] = true);\n    });\n}\n</code></pre>\n\n<p>This is how it's usually done. The idea is to place each element in a hashtable and then check for its presence instantly. This gives us linear time, but has at least two drawbacks:</p>\n\n<ul>\n<li>since hash keys can only be strings in Javascript, this code doesn't distinguish numbers and \"numeric strings\". That is, <code>uniq([1,\"1\"])</code> will return just <code>[1]</code></li>\n<li>for the same reason, all objects will be considered equal: <code>uniq([{foo:1},{foo:2}])</code> will return just <code>[{foo:1}]</code>.</li>\n</ul>\n\n<p>That said, if your arrays contain only primitives and you don't care about types (e.g. it's always numbers), this solution is optimal.</p>\n\n<h2>The best from two worlds</h2>\n\n<p>An universal solution combines both approaches: it uses hash lookups for primitives and linear search for objects.</p>\n\n<pre><code>function uniq(a) {\n    var prims = {\"boolean\":{}, \"number\":{}, \"string\":{}}, objs = [];\n\n    return a.filter(function(item) {\n        var type = typeof item;\n        if(type in prims)\n            return prims[type].hasOwnProperty(item) ? false : (prims[type][item] = true);\n        else\n            return objs.indexOf(item) &gt;= 0 ? false : objs.push(item);\n    });\n}\n</code></pre>\n\n<h2>sort | uniq</h2>\n\n<p>Another option is to sort the array first, and then remove each element equal to the preceding one:</p>\n\n<pre><code>function uniq(a) {\n    return a.sort().filter(function(item, pos) {\n        return !pos || item != a[pos - 1];\n    })\n}\n</code></pre>\n\n<p>Again, this doesn't work with objects (because all objects are equal for <code>sort</code>). Additionally, this method silently changes the original array as a side effect - not good! However, if your input is already sorted, this is the way to go (just remove <code>sort</code> from the above).</p>\n\n<h2>Unique by...</h2>\n\n<p>Sometimes it's desired to uniquify a list based on some criteria other than just equality, for example, to filter out objects that are different, but share some property. This can be done elegantly by passing a callback. This \"key\" callback is applied to each element, and elements with equal \"keys\" are removed. Since <code>key</code> is expected to return a primitive, hash table will work fine here:</p>\n\n<pre><code>function uniqBy(a, key) {\n    var seen = {};\n    return a.filter(function(item) {\n        var k = key(item);\n        return seen.hasOwnProperty(k) ? false : (seen[k] = true);\n    })\n}\n</code></pre>\n\n<p>A particularly useful <code>key()</code> is <code>JSON.stringify</code> which will remove objects that are physically different, but \"look\" the same:</p>\n\n<pre><code>a = [[1,2,3], [4,5,6], [1,2,3]]\nb = uniqBy(a, JSON.stringify)\nconsole.log(b) // [[1,2,3], [4,5,6]]\n</code></pre>\n\n<h2>Libraries</h2>\n\n<p>Both <a href=\"http://underscorejs.org/#uniq\">underscore</a> and <a href=\"https://lodash.com/docs#uniq\">Lo-Dash</a> provide <code>uniq</code> methods. Their algorithms are basically similar to the first snippet above and boil down to this:</p>\n\n<pre><code>var result = [];\na.forEach(function(item) {\n     if(result.indexOf(item) &lt; 0) {\n         result.push(item);\n     }\n});\n</code></pre>\n\n<p>This is quadratic, but there are nice additional goodies, like wrapping native <code>indexOf</code>, ability to uniqify by a key (<code>iteratee</code> in their parlance), and optimizations for already sorted arrays.</p>\n\n<p>If you're using jQuery and can't stand anything without a dollar before it, it goes like this:</p>\n\n<pre><code>  $.uniqArray = function(a) {\n        return $.grep(a, function(item, pos) {\n            return $.inArray(item, a) === pos;\n        });\n  }\n</code></pre>\n\n<p>which is, again, a variation of the first snippet.</p>\n\n<h2>Performance</h2>\n\n<p>Function calls are expensive in Javascript, therefore the above solutions, as concise as they are, are not particularly efficient. For maximal performance, replace <code>filter</code> with a loop and get rid of other function calls:</p>\n\n<pre><code>function uniq_fast(a) {\n    var seen = {};\n    var out = [];\n    var len = a.length;\n    var j = 0;\n    for(var i = 0; i &lt; len; i++) {\n         var item = a[i];\n         if(seen[item] !== 1) {\n               seen[item] = 1;\n               out[j++] = item;\n         }\n    }\n    return out;\n}\n</code></pre>\n\n<p>This chunk of ugly code does the same as the snippet #3 above, but about 20 times faster. <a href=\"http://jsperf.com/http-stackoverflow-com-a-9229821-989121\">http://jsperf.com/http-stackoverflow-com-a-9229821-989121</a>.</p>\n",
                    "is_accepted": false,
                    "score": 401
                },
                {
                    "body": "<p>You could also use the <code>Array.unique()</code> method from the <a href=\"http://www.jslab.dk/library/Array.unique\">JavaScript Lab library</a> \u2013 or steal an idea from there.</p>\n\n<p>However, the code there isn\u2019t very well written, since it declares the <code>unique()</code> method as a property of the Array prototype, thus adding it to every Array, breaking the <code>for...in</code> functionality (because a <code>for...in</code> loop will always iterate over the <code>unique</code> variable, too).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Quick and dirty using jQuery:</p>\n\n<pre><code>var names = [\"Mike\",\"Matt\",\"Nancy\",\"Adam\",\"Jenny\",\"Nancy\",\"Carl\"];\nvar uniqueNames = [];\n$.each(names, function(i, el){\n    if($.inArray(el, uniqueNames) === -1) uniqueNames.push(el);\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 135
                },
                {
                    "body": "<h2>Use <a href=\"http://underscorejs.org/\">Underscore.js</a></h2>\n\n<p>It's a library with a host of functions for manipulating arrays. </p>\n\n<blockquote>\n  <p>It's the tie to go along with jQuery's tux, and Backbone.js's\n  suspenders.</p>\n</blockquote>\n\n<p><strong><a href=\"http://underscorejs.org/#uniq\">_.uniq</a></strong></p>\n\n<blockquote>\n  <p><code>_.uniq(array, [isSorted], [iterator])</code> <em>Alias:</em> <strong>unique</strong><br>\n  Produces a duplicate-free version of the <strong>array</strong>, using === to test object\n  equality. If you know in advance that the <strong>array</strong> is sorted, passing\n  <em>true</em> for <strong>isSorted</strong> will run a much faster algorithm. If you want to\n  compute unique items based on a transformation, pass an <strong>iterator</strong>\n  function.</p>\n</blockquote>\n\n<p><strong><a href=\"http://jsfiddle.net/ZNLUP/1/\">Example</a></strong></p>\n\n<pre><code>var names = [\"Mike\",\"Matt\",\"Nancy\",\"Adam\",\"Jenny\",\"Nancy\",\"Carl\"];\n\nalert(_.uniq(names, false));\n</code></pre>\n\n<p><em>Note: <a href=\"http://lodash.com\">Lo-Dash</a> (an <a href=\"http://underscorejs.org/\">underscore</a> competitor) also offers a comparable <a href=\"http://lodash.com/docs#uniq\">.uniq</a> implementation.</em></p>\n",
                    "is_accepted": false,
                    "score": 57
                },
                {
                    "body": "<p>The following is more than 80% faster than the jQuery method listed (see tests below).\nIt is an answer from a similar question a few years ago, if I come across the person who originally proposed it I will post credit.\nPure JS.</p>\n\n<pre><code>var temp = {};\n  for (var i = 0; i &lt; array.length; i++)\n  temp[array[i]] = true;\n  var r = [];\n  for (var k in temp)\n  r.push(k);\n  return r;\n</code></pre>\n\n<p>My Test Case comparison:\n<a href=\"http://jsperf.com/remove-duplicate-array-tests\">http://jsperf.com/remove-duplicate-array-tests</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Here is another approach using jQuery,</p>\n\n<pre><code>function uniqueArray(array){\n  if ($.isArray(array)){\n    var dupes = {}; var len, i;\n    for (i=0,len=array.length;i&lt;len;i++){\n      var test = array[i].toString();\n      if (dupes[test]) { array.splice(i,1); len--; i--; } else { dupes[test] = true; }\n    }\n  } \n  else {\n    if (window.console) console.log('Not passing an array to uniqueArray, returning whatever you sent it - not filtered!');\n      return(array);\n  }\n  return(array);\n}\n</code></pre>\n\n<p>Author: <strong>William Skidmore</strong></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function removeDuplicates(inputArray) {\n            var outputArray=new Array();\n\n            if(inputArray.length&gt;0){\n                jQuery.each(inputArray, function(index, value) {\n                    if(jQuery.inArray(value, outputArray) == -1){\n                        outputArray.push(value);\n                    }\n                });\n            }           \n            return outputArray;\n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The top answers have complexity of <code>O(n\u00b2)</code>, but this can be done with just <code>O(n)</code> by using an object as a hash:</p>\n\n<pre><code>function getDistinctArray(arr) {\n    var dups = {};\n    return arr.filter(function(el) {\n        var hash = el.valueOf();\n        var isDup = dups[hash];\n        dups[hash] = true;\n        return !isDup;\n    });\n}\n</code></pre>\n\n<p>This will work for strings, numbers, and dates.  If your array contains complex objects (ie, they have to be compared with <code>===</code>), the above solution won't work.  You can get an <code>O(n)</code> implementation for objects by setting a flag on the object itself:</p>\n\n<pre><code>function getDistinctObjArray(arr) {\n    var distinctArr = arr.filter(function(el) {\n        var isDup = el.inArray;\n        el.inArray = true;\n        return !isDup;\n    });\n    distinctArr.forEach(function(el) {\n        delete el.inArray;\n    });\n    return distinctArr;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>A single line version using array filter and indexOf functions:</p>\n\n<pre><code>arr = arr.filter (function (v, i, a) { return a.indexOf (v) == i });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>If you don't want to include a whole library, you can use this one off to add a method that any array can use:</p>\n\n<pre><code>Array.prototype.uniq = function uniq() {\n  return this.reduce(function(accum, cur) { \n    if (accum.indexOf(cur) === -1) accum.push(cur); \n    return accum; \n  }, [] );\n}\n\n[\"Mike\",\"Matt\",\"Nancy\",\"Adam\",\"Jenny\",\"Nancy\",\"Carl\"].uniq()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you're creating the array yourself, you can save yourself a loop and the extra unique filter by doing the check as you're inserting the data;</p>\n\n<pre><code>var values = [];\n$.each(collection, function() {\n    var x = $(this).value;\n    if (!$.inArray(x, values)) {\n        values.push(x);\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Got tired of seeing all bad examples with for-loops or jQuery. Javascript has the perfect tools for this nowadays: sort, map and reduce. </p>\n\n<h2>Uniq reduce while keeping existing order</h2>\n\n<pre><code>var names = [\"Mike\",\"Matt\",\"Nancy\",\"Adam\",\"Jenny\",\"Nancy\",\"Carl\"];\n\nvar uniq = names.reduce(function(a,b){\n    if (a.indexOf(b) &lt; 0 ) a.push(b);\n    return a;\n  },[]);\n\nconsole.log(uniq, names) // [ 'Mike', 'Matt', 'Nancy', 'Adam', 'Jenny', 'Carl' ]\n\n// one liner\nreturn names.reduce(function(a,b){if(a.indexOf(b)&lt;0)a.push(b);return a;},[]);\n</code></pre>\n\n<h2>Faster uniq with sorting</h2>\n\n<p>There are probably faster ways but this one is pretty decent.</p>\n\n<pre><code>var uniq = names.slice() // slice makes copy of array before sorting it\n  .sort(function(a,b){\n    return a - b;\n  })\n  .reduce(function(a,b){\n    if (a.slice(-1)[0] !== b) a.push(b); // slice(-1)[0] means last item in array without removing it (like .pop())\n    return a;\n  },[]); // this empty array becomes the starting value for a\n\n// one liner\nreturn names.slice().sort(function(a,b){return a - b}).reduce(function(a,b){if (a.slice(-1)[0] !== b) a.push(b);return a;},[]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>A slight modification of thg435's excellent answer to use a custom comparator:</p>\n\n<pre><code>function contains(array,obj) {\n    for(var i =0;i&lt;array.length;i++) {\n        if(isEqual(array[i],obj))return true;\n    }\n    return false;\n}\n//comparator\nfunction isEqual(obj1,obj2) {\n    if(obj1.name==obj2.name) return true;\n    return false;\n}\nfunction removeDuplicates(ary) {\n    var arr = [];\n    return ary.filter(function(x) {\n        return !contains(arr,x) &amp;&amp; arr.push(x);\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>$(document).ready(function() {\n\n    var arr1=[\"dog\",\"dog\",\"fish\",\"cat\",\"cat\",\"fish\",\"apple\",\"orange\"]\n\n    var arr2=[\"cat\",\"fish\",\"mango\",\"apple\"]\n\n    var uniquevalue=[];\n    var seconduniquevalue=[];\n    var finalarray=[];\n\n    $.each(arr1,function(key,value){\n\n       if($.inArray (value,uniquevalue) === -1)\n       {\n           uniquevalue.push(value)\n\n       }\n\n    });\n\n     $.each(arr2,function(key,value){\n\n       if($.inArray (value,seconduniquevalue) === -1)\n       {\n           seconduniquevalue.push(value)\n\n       }\n\n    });\n\n    $.each(uniquevalue,function(ikey,ivalue){\n\n        $.each(seconduniquevalue,function(ukey,uvalue){\n\n            if( ivalue == uvalue)\n\n            {\n                finalarray.push(ivalue);\n            }   \n\n        });\n\n    });\n    alert(finalarray);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><strong>This is probably one of the fastest way to remove permanently the duplicates from an array</strong>\n10x times faster than the most functions here.&amp; 78x faster in safari</p>\n\n<pre><code>function toUnique(a,b,c){               //array,placeholder,placeholder\n b=a.length;while(c=--b)while(c--)a[b]!==a[c]||a.splice(c,1)\n}\n</code></pre>\n\n<ol>\n<li>Test: <a href=\"http://jsperf.com/wgu\" rel=\"nofollow\">http://jsperf.com/wgu</a></li>\n<li>Demo: <a href=\"http://jsfiddle.net/46S7g/\" rel=\"nofollow\">http://jsfiddle.net/46S7g/</a></li>\n<li>More: <a href=\"http://stackoverflow.com/a/25082874/2450730\">http://stackoverflow.com/a/25082874/2450730</a></li>\n</ol>\n\n<p>if you can't read the code above ask, read a javascript book or here are some explainations about shorter code. <a href=\"http://stackoverflow.com/a/21353032/2450730\">http://stackoverflow.com/a/21353032/2450730</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Another method of doing this without writing much code is using the ES5 <code>Object.keys</code>-method:</p>\n\n<pre><code>var arrayWithDuplicates = ['a','b','c','d','a','c'],\n    deduper = {};\narrayWithDuplicates.forEach(function (item) {\n    deduper[item] = null;\n});\nvar dedupedArray = Object.keys(deduper); // [\"a\", \"b\", \"c\", \"d\"]\n</code></pre>\n\n<p><strong>Extracted in a function</strong></p>\n\n<pre><code>function removeDuplicates (arr) {\n    var deduper = {}\n    arr.forEach(function (item) {\n        deduper[item] = null;\n    });\n    return Object.keys(deduper);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a simple answer to the question.</p>\n\n<pre><code>var names = [\"Alex\",\"Tony\",\"James\",\"Suzane\", \"Marie\", \"Laurence\", \"Alex\", \"Suzane\", \"Marie\", \"Marie\", \"James\", \"Tony\", \"Alex\"];\n\n    var uniqueNames = [];\n    for(var i in names){\n        if(uniqueNames.indexOf(names[i]) === -1){\n            uniqueNames.push(names[i]);\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In EcmaScript 6, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set\" rel=\"nofollow\"><code>Set</code></a> can be used to filter out duplicates. Then it can be converted back to an array using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\" rel=\"nofollow\">spread operator</a>.</p>\n\n<pre><code>var names = [\"Mike\",\"Matt\",\"Nancy\",\"Adam\",\"Jenny\",\"Nancy\",\"Carl\"],\n    unique = [...Set(names)];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The easiest way to remove string duplicates is to use associative array and then iterate over the associative array to make the list/array back.</p>\n\n<p>Like below:</p>\n\n<pre><code>var toHash = [];\nvar toList = [];\n\n// add from ur data list to hash\n$(data.pointsToList).each(function(index, Element) {\n    toHash[Element.nameTo]= Element.nameTo;\n});\n\n// now convert hash to array\n// don't forget the \"hasownproperty\" else u will get random results \nfor (var key in toHash)  {\n    if (toHash.hasOwnProperty(key)) { \n      toList.push(toHash[key]);\n   }\n}\n</code></pre>\n\n<p>Voila, now duplicates are gone!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The simplest way to remove a duplicate is to do a for loop and compare the elements that are not the same and push them into the new array</p>\n\n<pre><code> var array = [\"Mike\",\"Matt\",\"Nancy\",\"Adam\",\"Jenny\",\"Nancy\",\"Carl\"];\n\n var removeDublicate = function(arr){\n var result = []\n var sort_arr = arr.sort() //=&gt; optional\n for (var i = 0; i &lt; arr.length; i++) {\n        if(arr[ i + 1] !== arr[i] ){\n            result.push(arr[i])\n        }\n };\n  return result\n}  \nconsole.log(removeDublicate(array))\n==&gt;  [\"Adam\", \"Carl\", \"Jenny\", \"Matt\", \"Mike\", \"Nancy\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>go for this one ,</p>\n\n<pre><code>var uniqueArray = duplicateArray.filter(function(elem, pos) {\n                        return duplicateArray.indexOf(elem) == pos;\n                      }); \n</code></pre>\n\n<p>Now uniqueArray contains no duplicates</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The following script returns a new array containing only unique values. It works on string and numbers. No requirement for additional libraries only vanilla JS.</p>\n\n<p>Browser support:</p>\n\n<pre><code>Feature Chrome  Firefox (Gecko)     Internet Explorer   Opera   Safari\nBasic support   (Yes)   1.5 (1.8)   9                   (Yes)   (Yes)\n</code></pre>\n\n<p><a href=\"https://jsfiddle.net/fzmcgcxv/3/\" rel=\"nofollow\">https://jsfiddle.net/fzmcgcxv/3/</a></p>\n\n<pre><code>var duplicates = [\"Mike\",\"Matt\",\"Nancy\",\"Adam\",\"Jenny\",\"Nancy\",\"Carl\",\"Mike\",\"Mike\",\"Nancy\",\"Carl\"]; \nvar unique = duplicates.filter(function(elem, pos) {\n    return duplicates.indexOf(elem) == pos;\n  }); \nalert(unique);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>This seems like such a simple need but I've spent an inordinate amount of time trying to do this to no avail. I've looked at other questions on SO and I haven't found what I need. I have a very simple JavaScript array such as <code>peoplenames = new Array(\"Mike\",\"Matt\",\"Nancy\",\"Adam\",\"Jenny\",\"Nancy\",\"Carl\");</code> that may or may not contain duplicates and I need to simply remove the duplicates and put the unique values in a new array. That's it. I could point to all the codes that I've tried but I think it's useless because they don't work. If anyone has done this and can help me out I'd really appreciate it. JavaScript or jQuery solutions are both acceptable.</p>\n\n<h3>Related: <a href=\"http://stackoverflow.com/questions/840781/easiest-way-to-find-duplicate-values-in-a-javascript-array\">Easiest way to find duplicate values in a JavaScript array</a></h3>\n",
            "last_activity_date": 1425975559,
            "question_id": 9229645,
            "score": 131,
            "tags": [
                "javascript",
                "arrays",
                "duplicate-removal"
            ],
            "title": "Remove Duplicates from JavaScript Array"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>I dont think you can connect to SQL server from client side javascripts. You need to pick up some server side language to build web applications which can interact with your database and use javascript only to make your user interface better to interact with.</p>\n\n<p>you can pick up any server side scripting language based on your language preference :</p>\n\n<ul>\n<li>PHP </li>\n<li>ASP.Net </li>\n<li>Ruby On Rails</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You shouldn\u00b4t use client javascript to access databases for several reasons (bad practice, security issues, etc) but if you really want to do this, here is an example:</p>\n\n<pre><code>var connection = new ActiveXObject(\"ADODB.Connection\") ;\n\nvar connectionstring=\"Data Source=&lt;server&gt;;Initial Catalog=&lt;catalog&gt;;User ID=&lt;user&gt;;Password=&lt;password&gt;;Provider=SQLOLEDB\";\n\nconnection.Open(connectionstring);\nvar rs = new ActiveXObject(\"ADODB.Recordset\");\n\nrs.Open(\"SELECT * FROM table\", connection);\nrs.MoveFirst\nwhile(!rs.eof)\n{\n   document.write(rs.fields(1));\n   rs.movenext;\n}\n\nrs.close;\nconnection.close;\n</code></pre>\n\n<p>A better way to connect to a sql server would be to use some server side language like PHP, Java, .NET, among others. Client javascript should be used only for the interfaces.</p>\n\n<p>And there are rumors of an ancient legend about the existence of server javascript, but this is another story. ;)</p>\n",
                    "is_accepted": true,
                    "score": 329
                },
                {
                    "body": "<h2>Web services</h2>\n\n<p>SQL 2005+ supports native WebServices that you could <em>almost</em> use although I wouldn't suggest it, because of security risks you may face. Why did I say <em>almost</em>. Well Javascript is not SOAP native, so it would be a bit more complicated to actually make it. You'd have to send and receive SOAP via <code>XmlHttpRequest</code>. Check google for Javascript SOAP clients.</p>\n\n<ul>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ms345123.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/ms345123.aspx</a> - SQL native WebServices</li>\n<li><a href=\"http://www.google.com/search?q=javascript+soap\" rel=\"nofollow\">http://www.google.com/search?q=javascript+soap</a> - Google results for Javascript SOAP clients</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>(sorry, this was a more generic answer about SQL backends--I hadn't read the answer about SQL Server 2005's WebServices feature.  Although, this feature is still run over HTTP rather than more directly via sockets, so essentially they've built a mini web server into the database server, so this answer is still another route you could take.)</p>\n\n<p>You can also connect directly using sockets (google \"javascript sockets\") and by directly at this point I mean using a Flash file for this purpose, although HTML5 has Web Sockets as part of the spec which I believe let you do the same thing.</p>\n\n<p>Some people cite security issues, but if you designed your database permissions correctly you should theoretically be able to access the database from any front end, including OSQL, and not have a security breach.  The security issue, then, would be if you weren't connecting via SSL.</p>\n\n<p>Finally, though, I'm pretty sure this is all theoretical because I don't believe any JavaScript libraries exist for handling the communications protocols for SSL or SQL Server, so unless you're willing to figure these things out yourself it'd be better to go the route of having a web server and server-side scripting language in between the browser and the database.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This would be really bad to do because sharing your connection string opens up your website to so many vulnerabilities that you can't simply patch up, you have to use a different method if you want it to be secure. Otherwise you are opening up to a huge audience to take advantage of your site.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Yes you can do connectivity using <code>JavaScript</code> but, Please don't do the connectivity using <code>JavaScript</code>, basically JavaScript is a Client Side Language. You can do connectivity using <code>EI</code>. </p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>A perfect working code.. </p>\n\n<pre><code>    &lt;script&gt;\n    var objConnection = new ActiveXObject(\"adodb.connection\");\n    var strConn = \"driver={sql server};server=QITBLRQIPL030;database=adventureworks;uid=sa;password=12345\";\n    objConnection.Open(strConn);\n    var rs = new ActiveXObject(\"ADODB.Recordset\");\n    var strQuery = \"SELECT * FROM  Person.Address\";\n    rs.Open(strQuery, objConnection);\n    rs.MoveFirst();\n    while (!rs.EOF) {\n        document.write(rs.fields(0) + \"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\");\n        document.write(rs.fields(1) + \"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;\");\n        document.write(rs.fields(2) + \"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    \");\n        document.write(rs.fields(3) + \"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    \");\n        document.write(rs.fields(4) + \"&lt;br/&gt;\");\n        rs.movenext();\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Playing with JavaScript in an HTA I had no luck with a <code>driver={SQL Server};...</code> connection string, but a named DSN was OK :<br>\nI set up <em>TestDSN</em> and it tested OK, and then <code>var strConn= \"DSN=TestDSN\";</code> worked, so I carried on experimenting for my in-house testing and learning purposes.</p>\n\n<p>Our server has several instances running, e.g. <strong>server1\\dev</strong> and <strong>server1\\Test</strong> which made things slightly more tricky as I managed to waste some time forgetting to escape the <code>\\</code> as <code>\\\\</code> :)<br>\nAfter some dead-ends with <code>server=server1;instanceName=dev</code> in the connection strings, I eventually got this one to work :<br>\n<code>var strConn= \"Provider=SQLOLEDB;Data Source=server1\\\\dev;Trusted_Connection=Yes;Initial Catalog=MyDatabase;\"</code></p>\n\n<p>Using Windows credentials rather than supplying a user/pwd, I found an interesting diversion was discovering the subtleties of <code>Integrated Security = true</code> v <code>Integrated Security = SSPI</code> v <code>Trusted_Connection=Yes</code> - see <a href=\"http://stackoverflow.com/questions/1229691/difference-between-integrated-security-true-and-integrated-security-sspi\">Difference between Integrated Security = True and Integrated Security = SSPI</a></p>\n\n<p>Beware that RecordCount will come back as <code>-1</code> if using the default <em>adOpenForwardOnly</em> type. If you're working with small result sets and/or don't mind the whole lot in memory at once, use <code>rs.Open(strQuery, objConnection, 3);</code> <em>(3=adOpenStatic)</em> and this gives a valid <code>rs.RecordCount</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As stated before it shouldn't be done using client side Javascript but there's a framework for implementing what you want more securely.</p>\n\n<p>Nodejs is a framework that allows you to code server connections in javascript so have a look into Nodejs and you'll probably learn a bit more about communicating with databases and grabbing data you need.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Can anybody give me some sample source code showing how to connect to a SQL server 2005 database from javascript locally? I am learning web programming on my desktop. Or do I need to use any other scripting language? Suggest some alternatives if you have them, but I am now trying to do it with javascript. Thanks in advance. My SQL server is locally installed on my desktop \u2014 SQL Server Management Studio 2005 and IE7 browser.</p>\n",
            "last_activity_date": 1414853741,
            "question_id": 857670,
            "score": 117,
            "tags": [
                "javascript",
                "sql"
            ],
            "title": "How to connect to SQL server database from javascript?"
        },
        {
            "answer_count": 21,
            "answers": [
                {
                    "body": "<p>On the same lines as JSON.encode is to use join().</p>\n\n<pre><code>function checkArrays( arrA, arrB ){\n\n    //check if lengths are different\n    if(arrA.length !== arrB.length) return false;\n\n\n    //slice so we do not effect the original\n    //sort makes sure they are in order\n    //join makes it a string so we can do a string compare\n    var cA = arrA.slice().sort().join(\",\"); \n    var cB = arrB.slice().sort().join(\",\");\n\n    return cA===cB;\n\n}\n\nvar a = [1,2,3,4,5];\nvar b = [5,4,3,2,1];\nvar c = [1,2,3,4];\nvar d = [1,2,3,4,6];\nvar e = [\"1\",\"2\",\"3\",\"4\",\"5\"];  //will return true\n\nconsole.log( checkArrays(a,b) );  //true\nconsole.log( checkArrays(a,c) );  //false\nconsole.log( checkArrays(a,d) );  //false\nconsole.log( checkArrays(a,e) );  //true\n</code></pre>\n\n<p>Only problem is if you care about types which the last comparison tests.\nIf you care about types, you will have to loop.</p>\n\n<pre><code>function checkArrays( arrA, arrB ){\n\n    //check if lengths are different\n    if(arrA.length !== arrB.length) return false;\n\n    //slice so we do not effect the orginal\n    //sort makes sure they are in order\n    var cA = arrA.slice().sort(); \n    var cB = arrB.slice().sort();\n\n    for(var i=0;i&lt;cA.length;i++){\n         if(cA[i]!==cB[i]) return false;\n    }\n\n    return true;\n\n}\n\nvar a = [1,2,3,4,5];\nvar b = [5,4,3,2,1];\nvar c = [1,2,3,4];\nvar d = [1,2,3,4,6];\nvar e = [\"1\",\"2\",\"3\",\"4\",\"5\"];\n\nconsole.log( checkArrays(a,b) );  //true\nconsole.log( checkArrays(a,c) );  //false\nconsole.log( checkArrays(a,d) );  //false\nconsole.log( checkArrays(a,e) );  //false\n</code></pre>\n\n<p>If the order should remain the same, than it is just a loop, no sort is needed.</p>\n\n<pre><code>function checkArrays( arrA, arrB ){\n\n    //check if lengths are different\n    if(arrA.length !== arrB.length) return false;\n\n\n    for(var i=0;i&lt;arrA.length;i++){\n         if(arrA[i]!==arrB[i]) return false;\n    }\n\n    return true;\n\n}\n\nvar a = [1,2,3,4,5];\nvar b = [5,4,3,2,1];\nvar c = [1,2,3,4];\nvar d = [1,2,3,4,6];\nvar e = [\"1\",\"2\",\"3\",\"4\",\"5\"];\n\nconsole.log( checkArrays(a,a) );  //true\nconsole.log( checkArrays(a,b) );  //false\nconsole.log( checkArrays(a,c) );  //false\nconsole.log( checkArrays(a,d) );  //false\nconsole.log( checkArrays(a,e) );  //false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You could do <code>a2.toString() == a1.toString()</code>.</p>\n\n<p>This would result in something like:</p>\n\n<pre><code>var a1 = [1,2,3]\nvar a2 = [1,2,3]\n\nvar a1String = a1.toString() // \"1,2,3\"\nvar a2String = a2.toString() // \"1,2,3\"\n\na1String == a2String // true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>JSON.encode would also iterate through each value anyway so i guess it would be better to compare iterating through each value and reduce some steps of execution ( like encoding it into JSON )</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It's unclear what you mean by \"identical\". For example, are the arrays <code>a</code> and <code>b</code> below identical (note the nested arrays)?</p>\n\n<pre><code>var a = [\"foo\", [\"bar\"]], b = [\"foo\", [\"bar\"]];\n</code></pre>\n\n<p>Here's an optimized array comparison function that compares corresponding elements of each array in turn using strict equality and does not do recursive comparison of array elements that are themselves arrays, meaning that for the above example, <code>arraysIdentical(a, b)</code> would return <code>false</code>. It works in the general case, which JSON- and <code>join()</code>-based solutions will not:</p>\n\n<pre><code>function arraysIdentical(a, b) {\n    var i = a.length;\n    if (i != b.length) return false;\n    while (i--) {\n        if (a[i] !== b[i]) return false;\n    }\n    return true;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>I can't really believe that so many people want to compare <strong>arrays as strings</strong>. So, though this is old question, I will add the <strong>right</strong> way to compare arrays - loop through them and compare every value:  </p>\n\n<h2>The right way:</h2>\n\n<pre><code>// attach the .equals method to Array's prototype to call it on any array\nArray.prototype.equals = function (array) {\n    // if the other array is a falsy value, return\n    if (!array)\n        return false;\n\n    // compare lengths - can save a lot of time \n    if (this.length != array.length)\n        return false;\n\n    for (var i = 0, l=this.length; i &lt; l; i++) {\n        // Check if we have nested arrays\n        if (this[i] instanceof Array &amp;&amp; array[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!this[i].equals(array[i]))\n                return false;       \n        }           \n        else if (this[i] != array[i]) { \n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;   \n        }           \n    }       \n    return true;\n}   \n</code></pre>\n\n<h3>Usage:</h3>\n\n<pre><code>[1, 2, [3, 4]].equals([1, 2, [3, 2]]) === false;\n[1, \"2,3\"].equals([1, 2, 3]) === false;\n[1, 2, [3, 4]].equals([1, 2, [3, 4]]) === true;\n[1, 2, 1, 2].equals([1, 2, 1, 2]) === true;\n</code></pre>\n\n<p>You may say \"<em>But it is much faster to compare strings - no loops...</em>\" well, then you should note there ARE loops. First recursive loop that converts Array to string and second, that compares two strings. So this method <strong>is faster than use of string</strong>.</p>\n\n<p><sub>I believe that larger amounts of data should be always stored in arrays, not in objects. However if you use objects, they can be partially compared too.<br>\n<strong>Here's how:</strong></sub></p>\n\n<h2>Comparing objects:</h2>\n\n<p>I've stated above, that two object <strong>instances</strong> will never be equal, even if they contain same data at the moment:</p>\n\n<pre><code>({a:1, foo:\"bar\", numberOfTheBeast: 666}) == ({a:1, foo:\"bar\", numberOfTheBeast: 666})  //false\n</code></pre>\n\n<p>This has a reason, since there may be, for example <a href=\"http://stackoverflow.com/a/201471/607407\">private variables within objects.</a></p>\n\n<p>However, if you just use object structure to contain data, comparing is still possible:</p>\n\n<pre><code>Object.prototype.equals = function(object2) {\n    //For the first loop, we only check for types\n    for (propName in this) {\n        //Check for inherited methods and properties - like .equals itself\n        //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/hasOwnProperty\n        //Return false if the return value is different\n        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {\n            return false;\n        }\n        //Check instance type\n        else if (typeof this[propName] != typeof object2[propName]) {\n            //Different types =&gt; not equal\n            return false;\n        }\n    }\n    //Now a deeper check using other objects property names\n    for(propName in object2) {\n        //We must check instances anyway, there may be a property that only exists in object2\n            //I wonder, if remembering the checked values from the first loop would be faster or not \n        if (this.hasOwnProperty(propName) != object2.hasOwnProperty(propName)) {\n            return false;\n        }\n        else if (typeof this[propName] != typeof object2[propName]) {\n            return false;\n        }\n        //If the property is inherited, do not check any more (it must be equa if both objects inherit it)\n        if(!this.hasOwnProperty(propName))\n          continue;\n\n        //Now the detail check and recursion\n\n        //This returns the script back to the array comparing\n        /**REQUIRES Array.equals**/\n        if (this[propName] instanceof Array &amp;&amp; object2[propName] instanceof Array) {\n                   // recurse into the nested arrays\n           if (!this[propName].equals(object2[propName]))\n                        return false;\n        }\n        else if (this[propName] instanceof Object &amp;&amp; object2[propName] instanceof Object) {\n                   // recurse into another objects\n                   //console.log(\"Recursing to compare \", this[propName],\"with\",object2[propName], \" both named \\\"\"+propName+\"\\\"\");\n           if (!this[propName].equals(object2[propName]))\n                        return false;\n        }\n        //Normal value comparison for strings and numbers\n        else if(this[propName] != object2[propName]) {\n           return false;\n        }\n    }\n    //If everything passed, let's say YES\n    return true;\n}  \n</code></pre>\n\n<p>However, remember that this one is to serve in comparing JSON like data, not class instances and other stuff. If you want to compare mor complicated objects, look at <a href=\"http://stackoverflow.com/a/1144249/607407\">this answer and it's superlong function</a>.<br>\nTo make this work with <code>Array.equals</code> you must edit the original function a little bit:</p>\n\n<pre><code>...\n    // Check if we have nested arrays\n    if (this[i] instanceof Array &amp;&amp; array[i] instanceof Array) {\n        // recurse into the nested arrays\n        if (!this[i].equals(array[i]))\n            return false;\n    }\n    /**REQUIRES OBJECT COMPARE**/\n    else if (this[i] instanceof Object &amp;&amp; array[i] instanceof Object) {\n        // recurse into another objects\n        //console.log(\"Recursing to compare \", this[propName],\"with\",object2[propName], \" both named \\\"\"+propName+\"\\\"\");\n        if (!this[i].equals(array[i]))\n            return false;\n        }\n    else if (this[i] != array[i]) {\n...\n</code></pre>\n\n<p>I made a <a href=\"http://jsfiddle.net/Darker/SBtu2/\">little test tool for both of the functions</a>.</p>\n",
                    "is_accepted": true,
                    "score": 264
                },
                {
                    "body": "<p>In my case compared arrays contain only numbers and strings. This solution worked for me:</p>\n\n<pre><code>function are_arrs_equal(arr1, arr2){\n    return arr1.sort().toString() === arr2.sort().toString()\n}\n</code></pre>\n\n<p>Let's test it!</p>\n\n<pre><code>arr1 = [1, 2, 3, 'nik']\narr2 = ['nik', 3, 1, 2]\narr3 = [1, 2, 5]\n\nconsole.log (are_arrs_equal(arr1, arr2)) //true\nconsole.log (are_arrs_equal(arr1, arr3)) //false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Herer's my solution:</p>\n\n<pre><code>/**\n * Tests two data structures for equality\n * @param {object} x\n * @param {object} y\n * @returns {boolean}\n */\nvar equal = function(x, y) {\n    if (typeof x !== typeof y) return false;\n    if (x instanceof Array &amp;&amp; y instanceof Array &amp;&amp; x.length !== y.length) return false;\n    if (typeof x === 'object') {\n        for (var p in x) if (x.hasOwnProperty(p)) {\n            if (typeof x[p] === 'function' &amp;&amp; typeof y[p] === 'function') continue;\n            if (x[p] instanceof Array &amp;&amp; y[p] instanceof Array &amp;&amp; x[p].length !== y[p].length) return false;\n            if (typeof x[p] !== typeof y[p]) return false;\n            if (typeof x[p] === 'object' &amp;&amp; typeof y[p] === 'object') { if (!equal(x[p], y[p])) return false; } else\n            if (x[p] !== y[p]) return false;\n        }\n    } else return x === y;\n    return true;\n};\n</code></pre>\n\n<p>Works with any nested data structure, and obviously ignores objects' methods. Don't even think of extending Object.prototype with this method, when I tried this once, jQuery broke ;)</p>\n\n<p>For most arrays it's still faster than most of serialization solutions. It's probably the fastest compare method for arrays of object records.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Extending Tom\u00e1\u0161 Zato idea. Tomas's Array.prototype.compare should be infact called  Array.prototype.compareIdentical.</p>\n\n<p>It passes on:</p>\n\n<pre><code>[1, 2, [3, 4]].compareIdentical ([1, 2, [3, 2]]) === false;\n[1, \"2,3\"].compareIdentical ([1, 2, 3]) === false;\n[1, 2, [3, 4]].compareIdentical ([1, 2, [3, 4]]) === true;\n[1, 2, 1, 2].compareIdentical ([1, 2, 1, 2]) === true;\n</code></pre>\n\n<p>But fails on:</p>\n\n<pre><code>[[1, 2, [3, 2]],1, 2, [3, 2]].compareIdentical([1, 2, [3, 2],[1, 2, [3, 2]]])\n</code></pre>\n\n<p>Here is better (in my opinion) version:</p>\n\n<pre><code>Array.prototype.compare = function (array) {\n    // if the other array is a falsy value, return\n    if (!array)\n        return false;\n\n    // compare lengths - can save a lot of time\n    if (this.length != array.length)\n        return false;\n\n    this.sort();\n    array.sort();\n    for (var i = 0; i &lt; this.length; i++) {\n        // Check if we have nested arrays\n        if (this[i] instanceof Array &amp;&amp; array[i] instanceof Array) {\n            // recurse into the nested arrays\n            if (!this[i].compare(array[i]))\n                return false;\n        }\n        else if (this[i] != array[i]) {\n            // Warning - two different object instances will never be equal: {x:20} != {x:20}\n            return false;\n        }\n    }\n    return true;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/igos/bcfCY/\" rel=\"nofollow\">http://jsfiddle.net/igos/bcfCY/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Building off Tom\u00e1\u0161 Zato's answer, I agree that just iterating through the arrays is the fastest.  Additionally (like others have already stated), the function should be called equals/equal, not compare.  In light of this, I modified the function to handle comparing arrays for similarity - i.e. they have the same elements, but out of order - for personal use, and thought I'd throw it on here for everyone to see.</p>\n\n<pre><code>Array.prototype.equals = function (array, strict) {\n    if (!array)\n        return false;\n\n    if (arguments.length == 1)\n        strict = true;\n\n    if (this.length != array.length)\n        return false;\n\n    for (var i = 0; i &lt; this.length; i++) {\n        if (this[i] instanceof Array &amp;&amp; array[i] instanceof Array) {\n            if (!this[i].equals(array[i], strict))\n                return false;\n        }\n        else if (strict &amp;&amp; this[i] != array[i]) {\n            return false;\n        }\n        else if (!strict) {\n            return this.sort().equals(array.sort(), true);\n        }\n    }\n    return true;\n}\n</code></pre>\n\n<p>This function takes an additional parameter of strict that defaults to true.  This strict parameter defines if the arrays need to be wholly equal in both contents and the order of those contents, or simply just contain the same contents.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>var arr1 = [1, 2, 3, 4];\nvar arr2 = [2, 1, 4, 3];  // Loosely equal to 1\nvar arr3 = [2, 2, 3, 4];  // Not equal to 1\nvar arr4 = [1, 2, 3, 4];  // Strictly equal to 1\n\narr1.equals(arr2);         // false\narr1.equals(arr2, false);  // true\narr1.equals(arr3);         // false\narr1.equals(arr3, false);  // false\narr1.equals(arr4);         // true\narr1.equals(arr4, false);  // true\n</code></pre>\n\n<p>I've also written up a quick jsfiddle with the function and this example:<br/>\n<a href=\"http://jsfiddle.net/Roundaround/DLkxX/\">http://jsfiddle.net/Roundaround/DLkxX/</a></p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>for single dimension array you can simply use:</p>\n\n<p><code>arr1.sort().toString() == arr2.sort().toString()</code></p>\n\n<p>this will also take care of array with mismatched index.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>My solution compares Objects, not Arrays. This would work in the same way as Tom\u00e1\u0161's as Arrays are Objects, but without the Warning:</p>\n\n<pre><code>Object.prototype.compare_to = function(comparable){\n\n    // Is the value being compared an object\n    if(comparable instanceof Object){\n\n        // Count the amount of properties in @comparable\n        var count_of_comparable = 0;\n        for(p in comparable) count_of_comparable++;\n\n        // Loop through all the properties in @this\n        for(property in this){\n\n            // Decrements once for every property in @this\n            count_of_comparable--;\n\n            // Prevents an infinite loop\n            if(property != \"compare_to\"){\n\n                // Is the property in @comparable\n                if(property in comparable){\n\n                    // Is the property also an Object\n                    if(this[property] instanceof Object){\n\n                        // Compare the properties if yes\n                        if(!(this[property].compare_to(comparable[property]))){\n\n                            // Return false if the Object properties don't match\n                            return false;\n                        }\n                    // Are the values unequal\n                    } else if(this[property] !== comparable[property]){\n\n                        // Return false if they are unequal\n                        return false;\n                    }\n                } else {\n\n                    // Return false if the property is not in the object being compared\n                    return false;\n                }\n            }\n        }\n    } else {\n\n        // Return false if the value is anything other than an object\n        return false;\n    }\n\n    // Return true if their are as many properties in the comparable object as @this\n    return count_of_comparable == 0;\n}\n</code></pre>\n\n<p>Hope this helps you or anyone else searching for an answer.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>while this only works for scalar arrays, it is short &amp; sweet:</p>\n\n<pre><code>a1.length==a2.length &amp;&amp; a1.every(function(v,i) { return v === a2[i]})\n</code></pre>\n\n<p>or, in typescript </p>\n\n<pre><code>a1.length==a2.length &amp;&amp; a1.every((v,i)=&gt; v === a2[i])\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I like to use the underscore library for array/object heavy coding projects ... in underscore whether you're doing arrays or objects it just looks like this </p>\n\n<pre><code>_.isEqual(array1, array2); // or _.isEqual(object1, object2)\n</code></pre>\n\n<p>returns a boolean</p>\n\n<p><a href=\"http://underscorejs.org/#isEqual\">See documentation</a></p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<pre><code>function compareArrays(arrayA, arrayB) {\n    if (arrayA.length != arrayB.length) return true;\n    for (i = 0; i &lt; arrayA.length; i++)\n        if (arrayB.indexOf(arrayA[i]) == -1) {\n            return true;\n        }\n    }\n    for (i = 0; i &lt; arrayB.length; i++) {\n        if (arrayA.indexOf(arrayB[i]) == -1) {\n            return true;\n        }\n    }\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a CoffeeScript version, for those who prefer that:</p>\n\n<pre><code>Array.prototype.equals = (array) -&gt;\n  return false if not array # if the other array is a falsy value, return\n  return false if @length isnt array.length # compare lengths - can save a lot of time\n\n  for item, index in @\n    if item instanceof Array and array[index] instanceof Array # Check if we have nested arrays\n      if not item.equals(array[index]) # recurse into the nested arrays\n        return false\n    else if this[index] != array[index]\n      return false # Warning - two different object instances will never be equal: {x:20} != {x:20}\n  true\n</code></pre>\n\n<p>All credits goes to @tomas-zato.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If the array is plain and the order is matter so this two lines may help</p>\n\n<pre><code>//Assume\nvar a = ['a','b', 'c']; var b = ['a','e', 'c'];  \n\nif(a.length !== b.length) return false;\nreturn !a.reduce(\n  function(prev,next,idx, arr){ return prev || next != b[idx] },false\n); \n</code></pre>\n\n<p>Reduce walks through one of array and returns 'false' if at least one element of 'a' is nor equial to element of 'b'\nJust wrap this into function </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Maybe it is a good idea to employ functional programming techniques that JavaScript provides for its users. Consider the following code: </p>\n\n<pre><code>var a = ['h','e','l','l','o'];\nvar b = ['h','e','l','l','r'];\n\nfunction compare_arrays(a1,a2) {\n    var i=0;\n    return a1.every(function(e){\n        return e==a2[i++];\n    });\n}\n\ncompare_arrays(a,b); // produces false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This I think is the simplest way to do it using JSON stringify:</p>\n\n<pre><code>JSON.stringify(a1) == JSON.stringify(a2)\n</code></pre>\n\n<p>This turns the object into a string and it can be compared easily as a string, of course order is important but you can use the sort like one of the above answers if order is not important.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>While == is comparing pointers for array, it is often forgoten that &lt; and > work pretty good.\nSo one simple solution is:</p>\n\n<pre><code>  function eq(a,b){return !(a&lt;b || b&lt;a);}\n</code></pre>\n\n<p>It appears to work quite good, but it seems to be a bit lose about type-checking:</p>\n\n<pre><code>eq([1,2],[])\nfalse\neq([1,2],[1,2,0])\nfalse\neq([1,2,0],[1,2,0])\ntrue\neq([1,2,0],[1,2,null])\nfalse\neq([1,2,0],[1,2,\"0\"])\ntrue\neq([1,2,0],[1,2,[0]])\ntrue\neq([1,2,[0],[3]],[1,2,[0,3]])\ntrue\neq([1,2,[0],[3]],[1,2,[0,4]])\nfalse\neq([1,2,[0],[3]],[1,2,\"0,3\"])\ntrue\n</code></pre>\n\n<p>So, as long as your arrays contain only numbers it should work just fine, and is definitely nice short hack:)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use this code with no issues so far:</p>\n\n<pre><code>if(a.join() == b.join())\n    ...\n</code></pre>\n\n<p>It works even if there are commas in an item. </p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p><strong>The easy way</strong></p>\n\n<p>The easiest way to check if array's are equivalent is to convert them into strings and compare the strings.</p>\n\n<pre><code>var arr1, arr2;\narr1 = JSON.stringify(arr1);\narr2 = JSON.stringify(arr2);\n\nconsole.log(arr1.localeCompare(arr2));\n</code></pre>\n\n<p><strong>\"The right way\"</strong></p>\n\n<p>Without using strings, this is a difficult problem because arrays can basically contain objects, other arrays, strings, numbers, etc. The solutions below can be used on arrays (without objects), and on arrays that contain other arrays (without objects). Still working on a solution to compare arrays with objects (which might also contain arrays).</p>\n\n<p>If you want to compare 2 arrays (without nested array elements):<br>\n<a href=\"http://jsfiddle.net/6mcjpnsf/\" rel=\"nofollow\">http://jsfiddle.net/6mcjpnsf/</a></p>\n\n<pre><code>function equal(arr1, arr2) {\n\n  var i = arr1.length;\n  if ((i === 0) || (i !== arr2.length)) {\n    return false;\n  }\n\n  while(i--) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nequal([1, 2, 3], [1, 2, 3]);\n</code></pre>\n\n<p>If you want to compare 2 arrays (with nested array elements - recursive):\n<a href=\"http://jsfiddle.net/6mcjpnsf/1/\" rel=\"nofollow\">http://jsfiddle.net/6mcjpnsf/1/</a></p>\n\n<pre><code>function equal(arr1, arr2) {\n\n  var i = arr1.length;\n  if (i === 0 || i !== arr2.length) {\n    return false;\n  }\n\n  while(i--) {\n    if (arr1[i] instanceof Array &amp;&amp; arr2[i] instanceof Array) {\n      if (!equal(arr1[i], arr2[i])) {\n        return false;\n      }\n    } else if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nequal([1, 2, [3]], [1, 2, [3]]);\n</code></pre>\n\n<p>If you want to compare 2 arrays (with nested array elements and objects):<br>\n<em>Still working on code. Will update here when finished.</em></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'd like to compare two arrays... ideally, efficiently. Nothing fancy, just <code>true</code> if they are identical, and <code>false</code> if not. Not surprisingly, the comparison operator doesn't seem to work.</p>\n\n<pre><code>var a1 = [1,2,3];\nvar a2 = [1,2,3];\nconsole.log(a1==a2);    // Returns false\nconsole.log(JSON.stringify(a1)==JSON.stringify(a2));    // Returns true\n</code></pre>\n\n<p>JSON encoding each array does, but is there a faster or \"better\" way to simply compare arrays without having to iterate through each value?</p>\n",
            "last_activity_date": 1425466262,
            "question_id": 7837456,
            "score": 158,
            "tags": [
                "javascript",
                "arrays",
                "json"
            ],
            "title": "Comparing two arrays in Javascript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p><code>window</code> is passed in like that just in case someone decides to redefine the window object in IE, I assume the same for <code>undefined</code>, in case it's re-assigned in some way later.</p>\n\n<p>The top <code>window</code> in that script is just naming the argument \"window\", an argument that's more local that the global <code>window</code> reference and it what the code inside this closure will use.  The <code>window</code> at the end is actually specifying what to pass for the first argument, in this case the current meaning of <code>window</code>...the hope is you haven't screwed up <code>window</code> before that happens.</p>\n\n<p>This may be easier to think of by showing the most typical case used in jQuery, plugin <a href=\"http://api.jquery.com/jQuery.noConflict/\" rel=\"nofollow\"><code>.noConflict()</code></a> handling, so for the majority of code you can still use <code>$</code>, even if it means something <em>other</em> than <code>jQuery</code> outside this scope:</p>\n\n<pre><code>(function($) {\n  //inside here, $ == jQuery, it was passed as the first argument\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The undefined is a normal variable and can be changed simply with <code>undefined = \"new value\";</code>. So jQuery creates a local \"undefined\" variable that is REALLY undefined.</p>\n\n<p>The window variable is made local for performance reasons. Because when JavaScript looks up a variable, it first goes through the local variables until it finds the variable name. When it's not found, JavaScript goes through the next scope etc. until it filters through the global variables. So if the window variable is made local, JavaScript can look it up quicker.\nFurther information: <a href=\"http://www.youtube.com/watch?v=mHtdZgou0qU\">Speed Up Your JavaScript - Nicholas C. Zakas</a></p>\n",
                    "is_accepted": true,
                    "score": 110
                },
                {
                    "body": "<p>Others have explained <code>undefined</code>. <code>undefined</code> is like a global variable that can be redefined to any value. This technique is to prevent all undefined checks from breaking if someone wrote say, <code>undefined = 10</code> somewhere. An argument that is never passed is guaranteed to be real <code>undefined</code> irrespective of the value of the <em>variable</em> <code>undefined</code>.</p>\n\n<p>The reason to pass window can be illustrated with the following example.</p>\n\n<pre><code>(function() {\n   console.log(window);\n   ...\n   ...\n   ...\n   var window = 10;\n})();\n</code></pre>\n\n<p>What does the console log? The value of <code>window</code> object right? Wrong! 10? Wrong! It logs <code>undefined</code>. Javascript interpreter (or JIT compiler) rewrites it this way - </p>\n\n<pre><code>(function() {\n   var window; //and every other var in this function\n\n   console.log(window);\n   ...\n   ...\n   ...\n   window = 10;\n\n})();\n</code></pre>\n\n<p>However, if you get the <code>window</code> variable as an argument, there is no var and hence no surprises.</p>\n\n<p>I don't know if jQuery is doing it, but if you are redefining <code>window</code> local variable anywhere in your function for whatever reason, it is a good idea to borrow it from global scope.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p><strong>Undefined</strong></p>\n\n<p>By declaring <code>undefined</code> as an argument but never passing a value to it ensures that it is always undefined, as it is simply a variable in the global scope that can be overwritten. This makes <code>a === undefined</code> a safe alternative to <code>typeof a == 'undefined'</code>, which saves a few characters. It also makes the code more minifier-friendly, as <code>undefined</code> can be shortened to <code>u</code> for example, saving a few more characters.</p>\n\n<p><strong>Window</strong></p>\n\n<p>Passing <code>window</code> as an argument keeps a copy in the local scope, which affects performance: <a href=\"http://jsperf.com/short-scope\">http://jsperf.com/short-scope</a>. All accesses to <code>window</code> will now have to travel one level less up the scope chain. As with <code>undefined</code>, a local copy again allows for more aggressive minification.</p>\n\n<hr>\n\n<p><em>Sidenote:</em></p>\n\n<p>Though this may not have been the intention of the jQuery developers, passing in <code>window</code> allows the library to be more easily integrated in server-side Javascript environments, for example <a href=\"http://nodejs.org\">node.js</a> - where there is no global <code>window</code> object. In such a situation, only one line needs to be changed to replace the <code>window</code> object with another one. In the case of jQuery, a mock <code>window</code> object can be created and passed in for the purpose of HTML scraping (a library such as <a href=\"https://github.com/tmpvar/jsdom\">jsdom</a> can do this).</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>Tested with 1000000 iterations. This kind of localization had no effect in performance. Not even a single millisecond in 1000000 iterations. This is simply useless.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Have you ever taken a look under the hood at the <strong>JQuery 1.4</strong> source code and noticed how it's encapsulated in the following way:</p>\n\n<pre><code>(function( window, undefined ) {\n\n  //All the JQuery code here \n  ...\n\n})(window);\n</code></pre>\n\n<p>I've read an article on <a href=\"http://peter.michaux.ca/articles/javascript-namespacing\">JavaScript Namespacing</a> and another one called \"<a href=\"http://peter.michaux.ca/articles/an-important-pair-of-parens\">An Important Pair of Parens</a>,\" so I know some about what's going on here.  </p>\n\n<p>But I've never seen this particular syntax before.  What is that <strong><code>undefined</code></strong> doing there? And why does <strong><code>window</code></strong> need to be passed and then appear at the end again?</p>\n",
            "last_activity_date": 1405555594,
            "question_id": 2716069,
            "score": 107,
            "tags": [
                "javascript",
                "jquery",
                "syntax"
            ],
            "title": "How does this JavaScript/JQuery Syntax work: (function( window, undefined ) { })(window)?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>By default,</p>\n\n<pre><code>function b() {}\n</code></pre>\n\n<p>then <code>b.prototype</code> has a <code>.constructor</code> property which is set to <code>b</code> automatically. However, you're currently overwriting the prototype and thus discarding that variable:</p>\n\n<pre><code>b.prototype = new a;\n</code></pre>\n\n<p>Then <code>b.prototype</code> does not have a <code>.constructor</code> property anymore; it was erased with the overwrite. It <em>does</em> inherit from <code>a</code> though,  and <code>(new a).constructor === a</code>, and hence <code>(new b).constructor === a</code> (it is referring to the same property in the prototype chain).</p>\n\n<p>Best to do is to simply setting it manually afterwards:</p>\n\n<pre><code>b.prototype.constructor = b;\n</code></pre>\n\n<p>You could also make a little function for this:</p>\n\n<pre><code>function inherit(what, from) {\n    what.prototype = new from;\n    what.prototype.constructor = what;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/79xTg/5/\">http://jsfiddle.net/79xTg/5/</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p><code>constructor</code> is a regular, non-enumerable property of the default value of the <code>prototype</code> property of function objects. Thus, assigning to <code>prototype</code> will lose the property.</p>\n\n<p><code>instanceof</code> will still work as it does not use <code>constructor</code>, but rather scans the prototype chain of the object for the (current) value of the function's <code>prototype</code> property, ie <code>foo instanceof Foo</code> is equivalent to</p>\n\n<pre><code>var proto = Object.getPrototypeOf(foo);\nfor(; proto !== null; proto = Object.getPrototypeOf(proto)) {\n    if(proto === Foo.prototype)\n        return true;\n}\nreturn false;\n</code></pre>\n\n<p>In ECMAScript3, there's no way to set a <code>constructor</code> property which behaves identically to the built-in one as user-defined properties are always enumerable (ie visible to <code>for..in</code>).</p>\n\n<p>This changed with ECMAScript5. However, even if you set <code>constructor</code> manually, your code still has issues: In particular, it is a bad idea to set <code>prototype</code> to an instance of the parent-'class' - the parent constructor should not be called when the child-'class' is defined, but rather when child-instances are created.</p>\n\n<p>Here's some ECMAScript5 example code for how it should be done:</p>\n\n<pre><code>function Pet(name) {\n    this.name = name;\n}\n\nPet.prototype.feed = function(food) {\n    return this.name + ' ate ' + food + '.';\n};\n\nfunction Cat(name) {\n    Pet.call(this, name);\n}\n\nCat.prototype = Object.create(Pet.prototype, {\n    constructor : {\n        value : Cat,\n        writable : true,\n        enumerable : false,\n        configurable : true\n    }\n});\n\nCat.prototype.caress = function() {\n    return this.name + ' purrs.';\n};\n</code></pre>\n\n<p>If you're stuck with ECMAScript3, you'll need to use a custom <a href=\"http://mercurial.intuxication.org/hg/js-hacks/raw-file/tip/clone.js\" rel=\"nofollow\"><code>clone()</code> function</a> instead of <code>Object.create()</code> and won't be able to make <code>constructor</code> non-enumerable:</p>\n\n<pre><code>Cat.prototype = clone(Pet.prototype);\nCat.prototype.constructor = Cat;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Okay, let's play a little mind game:</p>\n\n<p><img src=\"http://i.stack.imgur.com/ZNn56.png\" alt=\"\"></p>\n\n<p>From the above image we can see:</p>\n\n<ol>\n<li>When we create a function like <code>function Foo() {}</code>, JavaScript creates a <code>Function</code> instance.</li>\n<li>Every <code>Function</code> instance (the constructor function) has a property <code>prototype</code> which is a pointer.</li>\n<li>The <code>prototype</code> property of the constructor function points to its prototype object.</li>\n<li>The prototype object has a property <code>constructor</code> which is also a pointer.</li>\n<li>The <code>constructor</code> property of the prototype object points back to its constructor function.</li>\n<li>When we create a new instance of <code>Foo</code> like <code>new Foo()</code>, JavaScript creates a new object.</li>\n<li>The internal <code>[[proto]]</code> property of the instance points to the prototype of the constructor.</li>\n</ol>\n\n<p>Now, the question arises that why doesn't JavaScript attach the <code>constructor</code> property to the instance object instead of the prototype. Consider:</p>\n\n<pre><code>function defclass(prototype) {\n    var constructor = prototype.constructor;\n    constructor.prototype = prototype;\n    return constructor;\n}\n\nvar Square = defclass({\n    constructor: function (side) {\n        this.side = side;\n    },\n    area: function () {\n        return this.side * this.side;\n    }\n});\n\nvar square = new Square(10);\n\nalert(square.area()); // 100\n</code></pre>\n\n<p>As you can see the <code>constructor</code> property is just another method of the prototype, like <code>area</code> in the example above. What makes the <code>constructor</code> property special is that it's used to initialize an instance of the prototype. Otherwise it's exactly the same as any other method of the prototype.</p>\n\n<p>Defining the <code>constructor</code> property on the prototype is advantageous for the following reasons:</p>\n\n<ol>\n<li>It's logically correct. For example consider <code>Object.prototype</code>. The <code>constructor</code> property of <code>Object.prototype</code> points to <code>Object</code>. If the <code>constructor</code> property was defined on the instance then <code>Object.prototype.constructor</code> would be <code>undefined</code> because <code>Object.prototype</code> is an instance of <code>null</code>.</li>\n<li>It's treated no differently from other prototype methods. This makes the job of <code>new</code> easier since it doesn't need to define the <code>constructor</code> property on every instance.</li>\n<li>Every instance shares the same <code>constructor</code> property. Hence it's efficient.</li>\n</ol>\n\n<p>Now when we talk about inheritance, we have the following scenario:</p>\n\n<p><img src=\"http://i.stack.imgur.com/0SnWH.png\" alt=\"\"></p>\n\n<p>From the above image we can see:</p>\n\n<ol>\n<li>The derived constructor's <code>prototype</code> property is set to the instance of the base constructor.</li>\n<li>Hence the internal <code>[[proto]]</code> property of the instance of the derived constructor points to it too.</li>\n<li>Thus the <code>constructor</code> property of the derived constructor instance now points to the base constructor.</li>\n</ol>\n\n<p>As for the <code>instanceof</code> operator, contrary to popular belief it doesn't depend on the <code>constructor</code> property of the instance. As we can see from above, that would lead to erroneous results.</p>\n\n<p>The <code>instanceof</code> operator is a binary operator (it has two operands). It operates on an instance object and a constructor function. As explain on <a href=\"https://developer.mozilla.org/en/JavaScript/Guide/Details_of_the_Object_Model#Determining_instance_relationships\">Mozilla Developer Network</a>, it simply does the following:</p>\n\n<pre><code>function instanceOf(object, constructor) {\n    while (object != null) {\n        if (object == constructor.prototype) { //object is instanceof constructor\n            return true;\n        } else if (typeof object == 'xml') { //workaround for XML objects\n            return constructor.prototype == XML.prototype;\n        }\n        object = object.__proto__; //traverse the prototype chain\n    }\n    return false; //object is not instanceof constructor\n}\n</code></pre>\n\n<p>To put it simply if <code>Foo</code> inherits from <code>Bar</code>, then the prototype chain for the instance of <code>Foo</code> would be:</p>\n\n<ol>\n<li><code>foo.__proto__ === Foo.prototype</code></li>\n<li><code>foo.__proto__.__proto__ === Bar.prototype</code></li>\n<li><code>foo.__proto__.__proto__.__proto__ === Object.prototype</code></li>\n<li><code>foo.__proto__.__proto__.__proto__.__proto__ === null</code></li>\n</ol>\n\n<p>As you can see, every object inherits from the <code>Object</code> constructor. The prototype chain ends when an internal <code>[[proto]]</code> property points to <code>null</code>.</p>\n\n<p>The <code>instanceof</code> function simply traverses the prototype chain of the instance object (the first operand) and compares the internal <code>[[proto]]</code> property of each object to the <code>prototype</code> property of the constructor function (the second operand). If they match, it returns <code>true</code>; and else if the prototype chain ends, it returns <code>false</code>.</p>\n",
                    "is_accepted": true,
                    "score": 46
                }
            ],
            "body": "<p>Consider the following code.</p>\n\n<pre><code>function a() {}\nfunction b() {}\nfunction c() {}\n\nb.prototype = new a();\nc.prototype = new b();\n\nconsole.log((new a()).constructor); //a()\nconsole.log((new b()).constructor); //a()\nconsole.log((new c()).constructor); //a()\n</code></pre>\n\n<ul>\n<li>Why isn't the constructor updated for b and c?</li>\n<li>Am I doing inheritance wrong?</li>\n<li>What is the best way to update the constructor?</li>\n</ul>\n\n<p>Further, please consider the following.</p>\n\n<pre><code>console.log(new a() instanceof a); //true\nconsole.log(new b() instanceof b); //true\nconsole.log(new c() instanceof c); //true\n</code></pre>\n\n<ul>\n<li>Given that <code>(new c()).constructor</code> is equal to <code>a()</code> and <code>Object.getPrototypeOf(new c())</code> is <code>a{\u00a0}</code>, how is it possible for <code>instanceof</code> to know that <code>new c()</code> is an instance of <code>c</code>?</li>\n</ul>\n\n<blockquote>\n  <p><a href=\"http://jsfiddle.net/ezZr5/\">http://jsfiddle.net/ezZr5/</a></p>\n</blockquote>\n",
            "last_activity_date": 1392641731,
            "question_id": 8093057,
            "score": 24,
            "tags": [
                "javascript",
                "inheritance",
                "constructor",
                "instanceof"
            ],
            "title": "JavaScript inheritance and the constructor property"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Like this:</p>\n\n<pre><code>delete myJSONObject.regex;\n// or,\ndelete myJSONObject['regex'];\n// or,\nvar prop = \"regex\";\ndelete myJSONObject[prop];\n</code></pre>\n\n<p>For anyone interested in reading more about it, Stack Overflow user <a href=\"http://stackoverflow.com/users/130652/kangax\">kangax</a> has written an incredibly in-depth blog post about the <code>delete</code> statement on his blog, <em><a href=\"http://perfectionkills.com/understanding-delete/\">Understanding delete</a></em>. It is highly recommended.</p>\n",
                    "is_accepted": true,
                    "score": 2607
                },
                {
                    "body": "<pre><code>var myJSONObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\n\ndelete myJSONObject.regex;\n\nalert ( myJSONObject.regex); // alerts: undefined\n</code></pre>\n\n<p>This works in Firefox and Internet&nbsp;Explorer, and I think it works in all others.</p>\n",
                    "is_accepted": false,
                    "score": 85
                },
                {
                    "body": "<p>In arrays, unlike objects, using the delete keyword leaves <code>null</code> or <code>undefined</code> artifacts.</p>\n\n<pre><code>var array = [1,2,3,4];\ndelete array[2];\n//Expected result --&gt; [1,2,4]\n//Actual result   --&gt; [1,2,null,4]\n</code></pre>\n\n<p>This can be problematic if the array needs to be precise. For example, in a webapp that uses JSON serialized arrays to hold data in localStorage, and uses the indexes as well as the values within. This will result in \"null\" showing up, or if you use an if statement, completely skip numbers. Another problem is that JSON serialization also saves the <code>null</code> values, so this could rapidly result in clutter.</p>\n\n<p>Instead, what you want to do is instead make a sort of <code>garbage collection</code> method</p>\n\n<pre><code>Array.prototype.remove = function(index){\n    delete this[index];\n    return this;\n};\nArray.prototype.clean = function(){\n    var arr1 = this, arr2 = [];\n    for(var a in arr1){\n        if(arr1[a]&amp;&amp;arr1.hasOwnProperty(a)){\n            arr2.push(arr1[a]);\n        }\n    }\n    this.splice(0);\n    for(var b in arr2){\n        if(arr2.hasOwnProperty(b)){\n            this.push(arr2[b]);\n        }\n    }\n    return this;\n};\nvar array = [1,2,3,4];\narray.remove(2).clean();\n// Result --&gt; [1,2,4]\n</code></pre>\n\n<p>Or, more concisely, you could just use array.splice like this:</p>\n\n<pre><code>Array.prototype.remove = function(index){\n  this.splice(index,1);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<pre><code>//Inconsistent behavior if the same object is stored in an\n//array or object and also somewhere else at the same time. \n//Any inconsistency.\n\nfunction my_delete (objectOrArray, index) {\n    if (objectOrArray.splice) {\n        objectOrArray.splice(index,1);\n    } else {\n        delete(objectOrArray[index]);\n    }        \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The term you have used in your question title <code>Remove a property from a JavaScript object</code>, can be interpreted in some different ways. The one is to remove it for whole the memory and the list of object keys or the other is just to remove it from your object. As it has been mentioned in some other answers, the <code>delete</code> keyword is the main part. Let's say you have your object like:</p>\n\n<pre><code>myJSONObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\n</code></pre>\n\n<p>If you do:</p>\n\n<pre><code>console.log(Object.keys(myJSONObject));\n</code></pre>\n\n<p>the result would be:</p>\n\n<pre><code>[\"ircEvent\", \"method\", \"regex\"]\n</code></pre>\n\n<p>You can delete that specific key from your object keys like:</p>\n\n<pre><code>delete myJSONObject[\"regex\"];\n</code></pre>\n\n<p>Then your objects key using <code>Object.keys(myJSONObject)</code> would be:</p>\n\n<pre><code>[\"ircEvent\", \"method\"]\n</code></pre>\n\n<p>But the point is if you care about memory and you want to whole the object gets removed from the memory, it is recommended to set it to null before you delete the key:</p>\n\n<pre><code>myJSONObject[\"regex\"] = null;\ndelete myJSONObject[\"regex\"];\n</code></pre>\n\n<p>The other important point here is to be careful about your other references to the same object. For instance, if you create a variable like:</p>\n\n<pre><code>var regex = myJSONObject[\"regex\"];\n</code></pre>\n\n<p>Or add it as a new pointer to another object like:</p>\n\n<pre><code>var myOtherObject = {};\nmyOtherObject[\"regex\"] = myJSONObject[\"regex\"];\n</code></pre>\n\n<p>Then even if you remove it from your object <code>myJSONObject</code>, that specific object won't get deleted from the memory, since the <code>regex</code> variable and <code>myOtherObject[\"regex\"]</code> still have their values. Then how could we remove the object from the memory for sure?</p>\n\n<p>The answer would be to <strong>delete all the references you have in your code, pointed to that very object</strong> and also <strong>not use <code>var</code> statements to create new references to that object</strong>. This last point regarding <code>var</code> statements, is one of the most crucial issues that we are usually faced with, because using <code>var</code> statements would prevent the created object from getting removed.</p>\n\n<p>Which means in this case you won't be able to remove that object because you have created the <code>regex</code> variable via a <code>var</code> statement, and if you do:</p>\n\n<pre><code>delete regex; //False\n</code></pre>\n\n<p>The result would be <code>false</code>, which means that your delete statement haven't been executed as you expected. But if you had not created that variable before, and you only had <code>myOtherObject[\"regex\"]</code> as your last existing reference, you could have done this just by removing it like:</p>\n\n<pre><code>myOtherObject[\"regex\"] = null;\ndelete myOtherObject[\"regex\"];\n</code></pre>\n\n<p><strong>In other words, a JavaScript object gets killed as soon as there is no reference left in your code pointed to that object.</strong></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<h2>Operator <code>delete</code> is unexpectedly slow!</h2>\n\n<p>Look at the <strong><a href=\"http://jsperf.com/delete-vs-undefined-vs-null/16\">benchmark</a></strong>.</p>\n\n<p>Delete is the only true way to remove object's properties without any leftovers, but it works <strong>~ 100 times slower</strong>, \ncompared to it's \"alternative\", setting <code>object[key] = undefined</code>.</p>\n\n<p>This alternative is not the correct answer to this question! But, if you use it with care, you can dramatically speed up some algorithms. If you are using <code>delete</code> in loops and you have problems with performance, read the verbose explanation.</p>\n\n<h2>When should one use <code>delete</code> and when set value to <code>undefined</code> ?</h2>\n\n<p>An object may be seen as a set of key-value pairs. What I call a 'value' is a primitive or a reference to other object, connected to that 'key'. </p>\n\n<p><strong>Use <code>delete</code>,</strong> when you are passing the result object to the code on which you don't have control (or when you are not sure about your team or yourself).</p>\n\n<p>It <strong>deletes the key from the hashmap</strong>.</p>\n\n<pre><code> var obj = {\n     field: 1     \n };\n delete obj.field;\n</code></pre>\n\n<p><strong>Use setting to <code>undefined</code>,</strong> when you care about performance. It can give a serious boost to your code. </p>\n\n<p>The <strong>key remains on its place in the hashmap</strong>, only the value is replaced with <code>undefined</code>. Understand, that <code>for..in</code> loop will still iterate over that key.</p>\n\n<pre><code> var obj = {\n     field: 1     \n };\n obj.field = undefined;\n</code></pre>\n\n<p>Using this method, not all <a href=\"http://stackoverflow.com/questions/1894792/determining-if-a-javascript-object-has-a-given-property\">ways of determining property existence</a> will work as expected. </p>\n\n<p>However, this code:</p>\n\n<p><code>object.field === undefined</code></p>\n\n<p>will behave equivalently for both methods.</p>\n\n<h2>Tests</h2>\n\n<p>To summarize, differences are all about ways of determining the property existence, and about <code>for..in</code> loop.</p>\n\n<pre><code> console.log('* -&gt; \"Takes prototype inheritance into consideration, that means it lookups all over prototype chain too.\"');\n\n console.log(obj.field === undefined, 'obj.field === undefined', 'You get \"undefined\" value when querying for \"field\" in object-hashmap. *');\n\n console.log(obj[\"field\"] === undefined, 'obj[\"field\"] === undefined', 'Just another way to query (equivalent). *');\n\n console.log(typeof obj.field === \"undefined\", 'typeof obj.field === \"undefined\"', 'Get the value attached to \"field\" key, and check it\\'s type is \"undefined\". *');\n\n console.log(! (\"field\" in obj), '! (\"field\" in obj)', 'This statement returns true if \"field\" key exists in the hashmap. False otherwise. *');\n\n console.log(obj.hasOwnProperty(\"field\"), 'obj.hasOwnProperty(\"field\")', 'This statement returns true if 'field' key exists in the hashmap. The ONLY way NOT to lookup for property in the prototype chain!');\n //Object.keys().indexOf() is an overkill :)\n\n var counter = 0,\n     key;\n for (key in obj) {\n     counter++;\n }\n console.assert(counter === 0, 'counter === 0', '\"field\" is not iterated using \"for .. in\" loop. *');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 76
                },
                {
                    "body": "<p>Another alternative is to use the <a href=\"https://en.wikipedia.org/wiki/Underscore.js\" rel=\"nofollow\">Underscore.js</a> library. </p>\n\n<p>Note that <code>_.pick()</code> and <code>_.omit()</code> both return a copy of the object and don't directly modify the original object. Assigning the result to the original object should do the trick (not shown).</p>\n\n<p>Reference: <a href=\"http://underscorejs.org/#pick\" rel=\"nofollow\">http://underscorejs.org/#pick</a> <strong>_.pick(object, *keys)</strong></p>\n\n<p>Return a copy of the object, filtered to only have values for the \nwhitelisted keys (or array of valid keys).</p>\n\n<pre><code>var myJSONObject = \n{\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\n\n_.pick(myJSONObject, \"ircEvent\", \"method\");\n=&gt; {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\"};\n</code></pre>\n\n<p>Reference: <a href=\"http://underscorejs.org/#omit\" rel=\"nofollow\">http://underscorejs.org/#omit</a> <strong>_.omit(object, *keys)</strong></p>\n\n<p>Return a copy of the object, filtered to omit the \nblacklisted keys (or array of keys).</p>\n\n<pre><code>var myJSONObject = \n{\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\n\n_.omit(myJSONObject, \"regex\");\n=&gt; {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\"};\n</code></pre>\n\n<p>For arrays, <code>_.filter()</code> and <code>_.reject()</code> can be used in a similar manner. </p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>There are a lot of good answers here but I just want to chime in that when using delete to remove a property in JavaScript, it is often wise to first check if that property exists to prevent errors.</p>\n\n<p>E.g</p>\n\n<pre><code>var obj = {\"property\":\"value\", \"property2\":\"value\"};\n\nif (obj &amp;&amp; obj.hasOwnProperty(\"property2\")) {\n  delete obj.property2;\n} else {\n  //error handling\n}\n</code></pre>\n\n<p>Due to the dynamic nature of JavaScript there are often cases where you simply don't know if the property exists or not. Checking if obj exists before the &amp;&amp; also makes sure you don't throw an error due to calling the hasOwnProperty() function on an undefined object.</p>\n\n<p>Sorry if this didn't add to your specific use case but I believe this to be a good design to adapt when managing objects and their properties.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var myJSONObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\ndelete myJSONObject.regex;\nalert ( myJSONObject.regex);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This post is very old and I find it very helpful so I decided to share the unset function I wrote in case someone else see this post and think why its not so simple as it in PHP unset function:</p>\n\n<pre><code>function unset(unsetKey, unsetArr, resort){\n  tempArr = unsetArr;\n  unsetArr = {};\n  delete tempArr[unsetKey];\n  if(resort){\n    j = -1;\n  }\n  for(i in tempArr){\n    if(typeof(tempArr[i]) !== 'undefined'){\n      if(resort){\n        j++;\n      }else{\n        j = i;\n      }\n      unsetArr[j] = tempArr[i];\n    }\n  }\n  return unsetArr;\n}\n\nvar unsetArr = ['test','deletedString','test2'];\n\nconsole.log(unset('1',unsetArr,true)); // output Object {0: \"test\", 1: \"test2\"}\nconsole.log(unset('1',unsetArr,false)); // output Object {0: \"test\", 2: \"test2\"}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Say I create an object thusly:</p>\n\n<pre><code>var myJSONObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\", \"regex\": \"^http://.*\"};\n</code></pre>\n\n<p>What is the best way to remove the property 'regex' to end up with this new <code>myJSONObject</code>:</p>\n\n<pre><code>var myJSONObject = {\"ircEvent\": \"PRIVMSG\", \"method\": \"newURI\"};\n</code></pre>\n",
            "last_activity_date": 1423346814,
            "question_id": 208105,
            "score": 1703,
            "tags": [
                "javascript"
            ],
            "title": "How to remove a property from a JavaScript object"
        },
        {
            "answer_count": 32,
            "answers": [
                {
                    "body": "<pre><code>Array.prototype.remByVal = function(val) {\n    for (var i = 0; i &lt; this.length; i++) {\n        if (this[i] === val) {\n            this.splice(i, 1);\n            i--;\n        }\n    }\n    return this;\n}\n//Call like\n[1, 2, 3, 4].remByVal(3);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>I don't know how you are expecting <code>array.remove(int)</code> to behave. There are three possibilities I can think of that you might be wanting.</p>\n\n<p>To remove an element of an array at an index <code>i</code>:</p>\n\n<pre><code>array.splice(i, 1);\n</code></pre>\n\n<p>If you want to remove every element with value <code>number</code> from the array:</p>\n\n<pre><code>for(var i = array.length - 1; i &gt;= 0; i--) {\n    if(array[i] === number) {\n       array.splice(i, 1);\n    }\n}\n</code></pre>\n\n<p>If you just want to make the element at index <code>i</code> no longer exist, but you don't want the indexes of the other elements to change:</p>\n\n<pre><code>delete array[i];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 190
                },
                {
                    "body": "<p>First, find the <code>index</code> of the element you want to remove:</p>\n\n<pre><code>var array = [2, 5, 9];\nvar index = array.indexOf(5);\n</code></pre>\n\n<p><em>Note: <a href=\"http://kangax.github.io/es5-compat-table/#Array.prototype.indexOf\">browser support for indexOf</a> is limited</em>, it is not supported in IE7-8.</p>\n\n<p>Then remove it with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice</code></a>:</p>\n\n<pre><code>if (index &gt; -1) {\n    array.splice(index, 1);\n}\n</code></pre>\n\n<p>The second parameter of <code>splice</code> is the number of elements to remove. Note, <code>splice</code> modifies the array in place and returns a new array containing the elements that have been removed.</p>\n",
                    "is_accepted": true,
                    "score": 2202
                },
                {
                    "body": "<p>Depends on whether you want to keep an empty spot or not.</p>\n\n<p>If you do want an empty slot, delete is fine:</p>\n\n<pre><code>delete array[ index ];\n</code></pre>\n\n<p>If you don't, you should use the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\">splice</a> method:</p>\n\n<pre><code>array.splice( index, 1 );\n</code></pre>\n\n<p>And if you need the value of that item, you can just store the returned array's element:</p>\n\n<pre><code>var value = array.splice( index, 1 )[0];\n</code></pre>\n\n<p>In case you want to do it in some order, you can use <code>array.pop()</code> for the last one or <code>array.shift()</code> for the first one (and both return the value of the item too).</p>\n\n<p>And if you don't know the index of the item, you can use <code>array.indexOf( item )</code> to get it (in a <code>if()</code> to get one item or in a <code>while()</code> to get all of them). <code>array.indexOf( item )</code> returns either the index or -1 if not found.&nbsp;</p>\n",
                    "is_accepted": false,
                    "score": 101
                },
                {
                    "body": "<p>If you want a new array with the deleted positions removed, you can always delete the specific element and filter out the array. It might need an extension of the <a href=\"http://www.tutorialspoint.com/javascript/array_filter.htm\" rel=\"nofollow\">array object</a> for browsers that don't implement the filter method but in the long term its easier since all you do is this:</p>\n\n<pre><code>var my_array = [1,2,3,4,5,6];\ndelete my_array[4];\nconsole.log(my_array.filter(function(a){return typeof a !== 'undefined';}));\n</code></pre>\n\n<p>Should display <code>[1, 2, 3, 4, 6]</code></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Be careful when you use delete for an array. It is good for deleting attributes of objects but not so good for arrays. It is better to use <code>splice</code> for arrays.</p>\n\n<p>Keep in mind that when you use <code>delete</code> for an array you could get wrong results for <code>anArray.length</code>. In other words, <code>delete</code> would remove the element but wouldn't update the value of length property.</p>\n\n<p>You can also expect to have holes in index numbers after using delete, e.g. you could end up with having indexes 1,3,4,8,9,11 and length as it was before using delete. All indexed <code>for</code> loops would crash in that case since indexes are no longer sequential.</p>\n\n<p>If you are forced to use <code>delete</code> for some reason, then you should use <a href=\"http://stackoverflow.com/questions/9329446/for-each-over-an-array-in-javascript\"><code>for each</code></a> loops when you need to loop through arrays.</p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p><a href=\"https://gist.github.com/zykadelic/5069236\">This gist here</a> will solve your problem, and also deletes all occurrences of the argument instead of just 1 (or a specified value).</p>\n\n<pre><code>Array.prototype.destroy = function(obj){\n    // Return null if no objects were found and removed\n    var destroyed = null;\n\n    for(var i = 0; i &lt; this.length; i++){\n\n        // Use while-loop to find adjacent equal objects\n        while(this[i] === obj){\n\n            // Remove this[i] and store it within destroyed\n            destroyed = this.splice(i, 1)[0];\n        }\n    }\n\n    return destroyed;\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var x = [1, 2, 3, 3, true, false, undefined, false];\n\nx.destroy(3);         // =&gt; 3\nx.destroy(false);     // =&gt; false\nx;                    // =&gt; [1, 2, true, undefined]\n\nx.destroy(true);      // =&gt; true\nx.destroy(undefined); // =&gt; undefined\nx;                    // =&gt; [1, 2]\n\nx.destroy(3);         // =&gt; null\nx;                    // =&gt; [1, 2]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Check out this code. It works in every <strong>major browser</strong>.</p>\n\n<pre><code>remove_item = function (arr, value) {\n    var b = '';\n    for (b in arr) {\n        if (arr[b] === value) {\n            arr.splice(b, 1);\n            break;\n        }\n    }\n    return arr;\n}\n</code></pre>\n\n<p>Call this function </p>\n\n<pre><code>remove_item(array,value);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You can iterate over each <code>array</code>-item and <code>splice</code> it if it exist in your <code>array</code>.</p>\n\n<pre><code>function destroy(arr, val) {\n    for (var i = 0; i &lt; arr.length; i++) if (arr[i] === val) arr.splice(i, 1);\n    return arr;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>Create new array:</strong></p>\n\n<pre><code>var my_array = new Array();\n</code></pre>\n\n<p><strong>Add elements to this array:</strong></p>\n\n<pre><code>my_array.push(\"element1\");\n</code></pre>\n\n<p><strong>The function indexOf (Returns index or -1 when not found) :</strong></p>\n\n<pre><code>var indexOf = function(needle) \n{\n    if(typeof Array.prototype.indexOf === 'function') // newer browsers\n    {\n        indexOf = Array.prototype.indexOf;\n    } \n    else // older browsers\n    {\n        indexOf = function(needle) \n        {\n            var index = -1;\n\n            for(var i = 0; i &lt; this.length; i++) \n            {\n                if(this[i] === needle) \n                {\n                    index = i;\n                    break;\n                }\n            }\n            return index;\n        };\n    }\n\n    return indexOf.call(this, needle);\n};\n</code></pre>\n\n<p><strong>Check index of this element (tested with firefox and IE8+):</strong></p>\n\n<pre><code>var index = indexOf.call(my_array, \"element1\");\n</code></pre>\n\n<p><strong>Remove 1 element located at index from the array</strong></p>\n\n<pre><code>my_array.splice(index, 1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A friend was having issues in IE8, and showed me what he did, I told him it was wrong, and he told me he got the answer here. The current top answer will not work in all browsers (IE8 for example), and will only remove the first occurrence of the item.</p>\n\n<h2>Remove ALL instances from an array</h2>\n\n<pre><code>  function remove(arr, item) {\n      for(var i = arr.length; i--;) {\n          if(arr[i] === item) {\n              arr.splice(i, 1);\n          }\n      }\n  }\n</code></pre>\n\n<p>It loops through the array backwards (since indices and length will change as items are removed) and removes the item if it's found. Works in all browsers.</p>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>You can do a backward loop to make sure not to screw up the indexes, if there are multiple instances of the element.</p>\n\n<pre><code>var myElement = \"chocolate\";\nvar myArray = ['chocolate', 'poptart', 'poptart', 'poptart', 'chocolate', 'poptart', 'poptart', 'chocolate'];\n\n/* Important code */\nfor (var i = myArray.length - 1; i &gt;= 0; i--) {\n    if (myArray[i] == myElement) myArray.splice(i, 1);\n}\n</code></pre>\n\n<h2><a href=\"http://jsfiddle.net/lun471k/7m6G9/\" rel=\"nofollow\">Live Demo</a></h2>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>John Resig <a href=\"http://ejohn.org/blog/javascript-array-remove/\" rel=\"nofollow\">posted a good implementation</a>:</p>\n\n<pre><code>// Array Remove - By John Resig (MIT Licensed)\nArray.prototype.remove = function(from, to) {\n  var rest = this.slice((to || from) + 1 || this.length);\n  this.length = from &lt; 0 ? this.length + from : from;\n  return this.push.apply(this, rest);\n};\n</code></pre>\n\n<p>If you don\u2019t want to extend a global object, you can do something like the following, instead:</p>\n\n<pre><code>// Array Remove - By John Resig (MIT Licensed)\nArray.remove = function(array, from, to) {\n    var rest = array.slice((to || from) + 1 || array.length);\n    array.length = from &lt; 0 ? array.length + from : from;\n    return array.push.apply(array, rest);\n};\n</code></pre>\n\n<p>But the main reason I am posting this is to warn users against the alternative implementation suggested in the comments on that page (Dec 14, 2007):</p>\n\n<pre><code>Array.prototype.remove = function(from, to){\n  this.splice(from, (to=[0,from||1,++to-from][arguments.length])&lt;0?this.length+to:to);\n  return this.length;\n};\n</code></pre>\n\n<p>It seems to work well at first, but through a painful process I discovered it fails when trying to remove the second to last element in an array. For example, if you have a 10-element array and you try to remove the 9th element with this:</p>\n\n<pre><code>myArray.remove(8);\n</code></pre>\n\n<p>You end up with an 8-element array. Don't know why but I confirmed John's original implementation doesn't have this problem.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Why has nobody suggested the obvious one that doesn't need indexOf or splice?</p>\n\n<pre><code>function(arr, val) {\n  for (var i = 0, j = 0, l = arr.length; i &lt; l; i++) {\n    if (arr[i] !== val) {\n      arr[j++] = arr[i];\n    }\n  }\n  arr.length = j;\n}\n</code></pre>\n\n<p>It also performs much better in comparison with the splice implementation in every test I did.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>  Array.prototype.removeItem = function(a) {\n            for (i = 0; i &lt; this.length; i++) {\n                if (this[i] == a) {\n                    for (i2 = i; i2 &lt; this.length - 1; i2++) {\n                        this[i2] = this[i2 + 1];\n                    }\n                    this.length = this.length - 1\n                    return;\n                }\n            }\n        }\n\n    var recentMovies = ['Iron Man', 'Batman', 'Superman', 'Spiderman'];\n    recentMovies.removeItem('Superman');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I also ran in the situation where I had to remove an element from <code>Array</code>. <code>.indexOf</code> was not working in <code>IE*</code> so sharing my working <code>jQuery.inArray()</code> solution.</p>\n\n<pre><code>var index = jQuery.inArray(val,arr);\nif (index &gt; -1) {\n    arr.splice(index, 1);\n    //console.log(arr);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<h1>Remarks</h1>\n\n<ul>\n<li>This function removes every occurence of specified value from array.</li>\n<li>Function name have \"stackoverflow_\" prefix to prevent name collision. If you accepts the risk of name collision, you can remove that prefix.</li>\n<li>There are described 3 versions of this function for different cases.</li>\n</ul>\n\n<h1>Option #1 Extending \"Array.prototype\" with \"Object.defineProperty\" function</h1>\n\n<p><em>Compatible browsers: Internet&nbsp;Explorer 9+, Firefox 4+, Chrome 5+, Safari 5+, and Opera 12+</em></p>\n\n<p>Extend the Array prototype by using \"Object.defineProperty\" function.</p>\n\n<p>This approach will not cause problems with enumeration, because we marked \"enumerable\" as \"false\".</p>\n\n<p>Be sure that your browser supports \"Object.defineProperty\" function. Here is the compatibility table:</p>\n\n<p><a href=\"http://kangax.github.io/es5-compat-table/#Object.defineProperty\">http://kangax.github.io/es5-compat-table/#Object.defineProperty</a></p>\n\n<h3>Extension code:</h3>\n\n<pre><code>// Extending Array prototype with new function,\n// if that function is already defined in \"Array.prototype\", \n// then \"Object.defineProperty\" will throw an exception\nObject.defineProperty(Array.prototype, \"stackoverflow_remove\", {\n    // Specify \"enumerable\" as \"false\" to prevent function enumeration\n    enumerable: false,\n\n    /**\n    * Removes all occurence of specified item from array\n    * @this Array\n    * @param itemToRemove Item to remove from array\n    * @returns {Number} Count of removed items\n    */\n    value: function (itemToRemove) {\n        // Count of removed items\n        var removeCounter = 0;\n\n        // Iterate every array item\n        for (var index = 0; index &lt; this.length; index++) {\n            // If current array item equals itemToRemove then\n            if (this[index] === itemToRemove) {\n                // Remove array item at current index\n                this.splice(index, 1);\n\n                // Increment count of removed items\n                removeCounter++;\n\n                // Decrement index to iterate current position \n                // one more time, because we just removed item \n                // that occupies it, and next item took it place\n                index--;\n            }\n        }\n\n        // Return count of removed items\n        return removeCounter;\n    }\n});\n</code></pre>\n\n<h3>Usage code #1:</h3>\n\n<pre><code>var arr = [1, 2, 3, 2, 2, 2];\n\nvar itemsRemoved = arr.stackoverflow_remove(2);\n\nconsole.log(itemsRemoved);\n// 4\n\nconsole.log(arr);\n// [1, 3]\n</code></pre>\n\n<h3>Usage code #2:</h3>\n\n<pre><code>var arr = [\"tree\", \"bird\", \"car\", \"bird\", \"bird\"];\n\nvar itemsRemoved = arr.stackoverflow_remove(\"bird\");\n\nconsole.log(itemsRemoved);\n// 3\n\nconsole.log(arr);\n// [\"tree\", \"car\"]\n</code></pre>\n\n<p><br/></p>\n\n<h1>Option #2 Defining global function. For old browsers which not support prototype extending with \"Object.defineProperty\"</h1>\n\n<p>If you want to use this function without \"Object.defineProperty\", you can define it as a global scope function.</p>\n\n<h3>Extension code:</h3>\n\n<pre><code>/**\n* Removes all occurence of specified item from array\n* @param array Array\n* @param itemToRemove Item to remove from array\n* @returns {Number} Count of removed items\n*/\nfunction stackoverflow_removeArrayItem(array, itemToRemove) {\n    // Count of removed items\n    var removeCounter = 0;\n\n    // Iterate every array item\n    for (var index = 0; index &lt; array.length; index++) {\n        // If current array item equals itemToRemove then\n        if (array[index] === itemToRemove) {\n            // Remove array item at current index\n            array.splice(index, 1);\n\n            // Increment count of removed items\n            removeCounter++;\n\n            // Decrement index to iterate current position \n            // one more time, because we just removed item \n            // that occupies it, and next item took it place\n            index--;\n        }\n    }\n\n    // Return count of removed items\n    return removeCounter;\n}\n</code></pre>\n\n<h3>Usage code:</h3>\n\n<pre><code>var arr = [\"tree\", \"bird\", \"car\", \"bird\", \"bird\"];\n\nvar itemsRemoved = stackoverflow_removeArrayItem(arr, \"bird\");\n\nconsole.log(itemsRemoved);\n// 3\n\nconsole.log(arr);\n// [\"tree\", \"car\"]\n</code></pre>\n\n<p><br/></p>\n\n<h1>Option #3 For high performance</h1>\n\n<p>This code uses a \"filter\" function and it works about 50 times faster than previous options, but this approach creates new array.</p>\n\n<h3>Extension code:</h3>\n\n<pre><code>// Extending Array prototype with new function,\n// if that function is already defined in \"Array.prototype\", \n// then \"Object.defineProperty\" will throw an exception\nObject.defineProperty(Array.prototype, \"stackoverflow_filterValue\", {\n    // Specify \"enumerable\" as \"false\" to prevent function enumeration\n    enumerable: false,\n\n    /**\n    * Create new array where specified item is removed\n    * @this Array\n    * @param itemToRemove Item to remove from array\n    * @returns {Number} Count of removed items\n    */\n    value: function (itemToRemove) {\n        var filteredArray = this.filter(function(item){\n            return item !== itemToRemove;\n        });\n\n        return filteredArray;\n    }\n});\n</code></pre>\n\n<h3>Usage code:</h3>\n\n<pre><code>var arr = [1, 2, 3, 2, 2, 2];\n\n// PAY ATTENTION.\n// Original array stay unchanged.\nvar filteredArray = arr.stackoverflow_filterValue(2);\n\nconsole.log(filteredArray);\n// [1, 3]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>I'm pretty new to JavaScript and needed this functionality. I merely wrote this:</p>\n\n<pre><code>function removeFromArray(array, item, index) {\n  while((index = array.indexOf(item)) &gt; -1) {\n    array.splice(index, 1);\n  }\n}\n</code></pre>\n\n<p>Then when I want to use it:</p>\n\n<pre><code>//Set-up some dummy data\nvar dummyObj = {name:\"meow\"};\nvar dummyArray = [dummyObj, \"item1\", \"item1\", \"item2\"];\n\n//Remove the dummy data\nremoveFromArray(dummyArray, dummyObj);\nremoveFromArray(dummyArray, \"item2\");\n</code></pre>\n\n<p>Output - As expected.\n[\"item1\", \"item1\"]</p>\n\n<p>You may have different needs than I, so you can easily modify it to suit them. I hope this helps someone.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Based on all the answers which were mainly correct and taking into account the best practices suggested (especially not using Array.prototype directly), I came up with the below code. Let me know if there is anything you find wierd. But should be fine:</p>\n\n<pre><code>// Extending the core Array Object\nMyArray.prototype = new Array();\nMyArray.prototype.constructor= MyArray;\n\n/**\n * New array class constructor\n */\nfunction MyArray() {\n    // Constructor code here\n}\n\n /**\n  * Excludes a value from array and returns the rest of array \n  * @param  {string/number/boolean} excludedValue Value   which should be removed\n  * @return {array}               \n  */\n MyArray.prototype.without = function(excludedValue) { \n\n    var valueType = typeof excludedValue;\n\n    if (this.length &lt; 1)\n        return [];\n\n    if (valueType == 'object' || valueType == 'array' || valueType == 'undefined')\n        throw \"Argument can not be object, array or undefined\";\n\n    for (var index in this) {\n\n            if (this[index] === excludedValue) {\n\n                this.splice(index, 1);\n                index--;\n\n            }   \n    }; \n\n    return this;\n};\n\n// How to use\nvar arr = new MyArray();\narr = [1,2,3,4,5,\"name\", false];\n\narr.without(1); // will change the array to [2,3,4,5,\"name\", false]\narr.without(\"name\"); // will change the array to [2,3,4,5, false]\narr.without(false); // will change the array to [2,3,4,5]\narr.without([1,2]); // will throw error as argument can not be array\narr.without({bar: \"foo\"}); // will throw error as argument can not be object\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In <a href=\"http://en.wikipedia.org/wiki/CoffeeScript\" rel=\"nofollow\">CoffeeScript</a>:</p>\n\n<pre><code>my_array.splice(idx, 1) for ele, idx in my_array when ele is this_value\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I know there are a lot of answers already, but many of them seem to over complicate the problem.  Here is a simple, recursive way of removing all instances of a key - calls self until index isn't found.  Yes, it only works in browsers with <code>indexOf</code>, but it's simple and can be easily polyfilled.</p>\n\n<p><strong>Stand-alone function</strong></p>\n\n<pre><code>function removeAll(array, key){\n    var index = array.indexOf(key);\n\n    if(index === -1) return;\n\n    array.splice(index, 1);\n    removeAll(array,key);\n}\n</code></pre>\n\n<p><strong>Prototype method</strong></p>\n\n<pre><code>Array.prototype.removeAll = function(key){\n    var index = this.indexOf(key);\n\n    if(index === -1) return;\n\n    this.splice(index, 1);\n    this.removeAll(key);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can do it easily with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">filter</a> method:</p>\n\n<pre><code>function remove(arrOriginal, elementToRemove){\n    return arrOriginal.filter(function(el){return el !== elementToRemove});\n}\nconsole.log( remove([1, 2, 1, 0, 3, 1, 4], 1) );\n</code></pre>\n\n<p>This removes all elements from the array and also works faster then combination of slice and indexOf</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I like this version of splice, removing an element by its value using <code>$.inArray</code>:</p>\n\n<pre><code>$(document).ready(function(){\n    var arr = [\"C#\",\"Ruby\",\"PHP\",\"C\",\"C++\"];\n    var itemtoRemove = \"PHP\";\n    arr.splice($.inArray(itemtoRemove, arr),1);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know too old to reply, but I want to add my functions that take a predicate instead of a value.</p>\n\n<p><strong>Definition</strong></p>\n\n<pre><code>var ArrayHelper = {\n    remove: function(array, predict) {\n        for (var i = 0; i &lt; array.length; i++) {\n            if (predict(array[i]) &amp;&amp; i &gt; -1) {\n                return array.splice(i, 1);\n            }\n        }\n    },\n    removeAll: function(array, predict) {\n        var removed = [];\n        for (var i = 0; i &lt; array.length; i++) {\n            if (predict(array[i]) &amp;&amp; i &gt; -1) {\n                removed.push(array.splice(i, 1));\n            }\n        }\n\n        return removed;\n    }\n};\n</code></pre>\n\n<p><strong>Usage</strong></p>\n\n<pre><code>ArrayHelper.remove(myArray, function(row) { return row.id === 5 });\nArrayHelper.removeAll(myArray, function(row) { return row.id &gt; 3 &amp;&amp; row.id &lt; 15});\n</code></pre>\n\n<p>Hope this helps</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://underscorejs.org/#without\">Underscore.js</a> can be used to solve issues with multiple browsers. It uses in-build browser methods if present. If they are absent like in the case of older IE it uses its own custom methods.</p>\n\n<p>Simple example to remove elements from array (from the website) -</p>\n\n<pre><code>_.without([1, 2, 1, 0, 3, 1, 4], 0, 1); // =&gt; [2, 3, 4]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>var index,\n    input = [1,2,3],\n    indexToRemove = 1;\n    integers = [];\n\nfor (index in input) {\n    if (input.hasOwnProperty(index)) {\n        if (index !== indexToRemove) {\n            integers.push(result); \n        }\n    }\n}\ninput = integers;\n</code></pre>\n\n<p>This solution will take an array of input and will search through the input for the value to remove.  This will loop through the entire input array and the result will be a second array integers that has had the specific index removed. The integers array is then copied back into the input array.  </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The easiest way:</p>\n\n<pre><code>array.splice( array.indexOf(item), 1 );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>It can be done using jQuery.grep() as well. You can remove by value or by index. Find below a working example</p>\n\n<pre><code>a = [];\na[0] = \"name\";\na[1] = \"place\";\na[2] = \"animal\";\nconsole.log(a);\nb = removeItem(0, a);\nconsole.log(b);\n\nfunction removeItem(removeIndex, haystack){//By value: (removeValue, haystack)\n    temp = [];\n    temp = jQuery.grep(haystack, function( val, index ) {\n            alert(val + \"_\" + index);\n            return ( index != removeIndex );//By value: return ( index != removeValue);\n        });\n    if(temp.length == 0){\n        console.log(\"Index not found\");\n        return False;\n    }\n    else\n        return temp;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>use jquery InArray<br>\n<code>A=[1,2,3,4,5,6];\n A.splice($.inArray(3,A) ,1 );\n //it will return A=[1,2,4,5,6]</code>   </p>\n\n<p><strong>Note: inArray will return -1, if the element was not found.</strong></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>removing the value with index and splice!</p>\n\n<pre><code>function removeArrValue(arr,value){\nvar index = arr.indexOf(value);\n        if (index &gt; -1) {\n            arr.splice(index, 1);\n        }\n        return arr;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you must support older versions of IE, I recommend using the following polyfill (note: this is <strong>not</strong> a framework)  It's a 100% backwards-compatible replacement of all modern array methods (JavaScript 1.8.5 / ECMAScript 5 Array Extras) that works for Internet Explorer 6+, Firefox 1.5+, Chrome, Safari, &amp; Opera.</p>\n\n<p><a href=\"https://github.com/plusdude/array-generics\" rel=\"nofollow\">https://github.com/plusdude/array-generics</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There are many fantastic answers here, but for me, what worked most simply wasn't removing my element from the array completely but simply setting the value of it to null. This works for most cases I have, and is a good solution since I will be using the variable later and don't want it gone, just empty for now. Also, this approach is completely cross-browser compatible.</p>\n\n<pre><code>array.key = null;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have an array of integers, which I'm using the <code>.push()</code> method to add to.</p>\n\n<p>Is there a simple way to remove a specific element from an array? The equivalent of something like <code>array.remove(int);</code></p>\n\n<p>I have to use good ol' fashioned JavaScript - no frameworks allowed.</p>\n",
            "last_activity_date": 1425352383,
            "question_id": 5767325,
            "score": 1285,
            "tags": [
                "javascript",
                "arrays"
            ],
            "title": "Remove specific element from an array?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Do it like this...</p>\n\n<pre><code>if (!Array.prototype.indexOf) {\n\n}\n</code></pre>\n\n<p>As <a href=\"https://developer.mozilla.org/En/Core%5FJavaScript%5F1.5%5FReference/Objects/Array/IndexOf\">recommended compatibility by MDC</a>.</p>\n\n<p>In general, browser detection code is a big no-no.</p>\n",
                    "is_accepted": true,
                    "score": 181
                },
                {
                    "body": "<p>You should check if it's not defined using <code>if (!Array.prototype.indexOf)</code>.</p>\n\n<p>Also, your implementation of <code>indexOf</code> is not correct. You must use <code>===</code> instead of <code>==</code> in your <code>if (this[i] == obj)</code> statement, otherwise <code>[4,\"5\"].indexOf(5)</code> would be 1 according to your implementation, which is incorrect.</p>\n\n<p>I recommend you use <a href=\"https://developer.mozilla.org/En/Core%5FJavaScript%5F1.5%5FReference/Objects/Array/IndexOf#Compatibility\">the implementation on MDC</a>.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Alternatively, you could use the <a href=\"http://api.jquery.com/jQuery.inArray/\">jQuery 1.2 inArray function</a>, which should work across browsers:</p>\n\n<pre><code>jQuery.inArray( value, array [, fromIndex ] )\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 121
                },
                {
                    "body": "<p>The full code then would be this:</p>\n\n<pre><code>if (!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(obj, start) {\n         for (var i = (start || 0), j = this.length; i &lt; j; i++) {\n             if (this[i] === obj) { return i; }\n         }\n         return -1;\n    }\n}\n</code></pre>\n\n<p>For a really thorough answer and code to this as well as other array functions check out Stack Overflow question <em><a href=\"http://stackoverflow.com/questions/2790001\">Fixing JavaScript Array functions in Internet Explorer (indexOf, forEach, etc.)</a></em>.</p>\n",
                    "is_accepted": false,
                    "score": 63
                },
                {
                    "body": "<p>The underscore.js library has an <a href=\"http://documentcloud.github.com/underscore/#indexOf\">indexOf</a> function you can use instead:</p>\n\n<pre><code>_.indexOf([1, 2, 3], 2)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I would recommend this to anyone looking for missing functionality: </p>\n\n<p><a href=\"http://code.google.com/p/ddr-ecma5/\">http://code.google.com/p/ddr-ecma5/</a></p>\n\n<p>It brings in most of the missing ecma5 functionality to older browers :)</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This was my implementation. Essentially, add this before any other scripts on the page. i.e. in your master for a global solution for Internet Explorer 8. I also added in the trim function which seems to be used in allot of frameworks. </p>\n\n<pre><code>&lt;!--[if lte IE 8]&gt;\n&lt;script&gt;\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function(obj, start) {\n            for (var i = (start || 0), j = this.length; i &lt; j; i++) {\n                if (this[i] === obj) {\n                    return i;\n                }\n            }\n            return -1;\n        };\n    }\n\n    if(typeof String.prototype.trim !== 'function') {\n        String.prototype.trim = function() {\n            return this.replace(/^\\s+|\\s+$/g, '');\n        };\n    };\n&lt;/script&gt;\n&lt;![endif]--&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>With the Underscore.js</p>\n\n<p><code>var arr=['a','a1','b'] \n_.filter(arr, function(a){ return a.indexOf('a') &gt; -1; })</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There is Mozilla official solution:\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf</a></p>\n\n<pre><code>(function() {\n    /**Array*/\n    // Production steps of ECMA-262, Edition 5, 15.4.4.14\n    // Reference: http://es5.github.io/#x15.4.4.14\n    if (!Array.prototype.indexOf) {\n        Array.prototype.indexOf = function(searchElement, fromIndex) {\n            var k;\n            // 1. Let O be the result of calling ToObject passing\n            //    the this value as the argument.\n            if (null === this || undefined === this) {\n                throw new TypeError('\"this\" is null or not defined');\n            }\n            var O = Object(this);\n            // 2. Let lenValue be the result of calling the Get\n            //    internal method of O with the argument \"length\".\n            // 3. Let len be ToUint32(lenValue).\n            var len = O.length &gt;&gt;&gt; 0;\n            // 4. If len is 0, return -1.\n            if (len === 0) {\n                return -1;\n            }\n            // 5. If argument fromIndex was passed let n be\n            //    ToInteger(fromIndex); else let n be 0.\n            var n = +fromIndex || 0;\n            if (Math.abs(n) === Infinity) {\n                n = 0;\n            }\n            // 6. If n &gt;= len, return -1.\n            if (n &gt;= len) {\n                return -1;\n            }\n            // 7. If n &gt;= 0, then Let k be n.\n            // 8. Else, n&lt;0, Let k be len - abs(n).\n            //    If k is less than 0, then let k be 0.\n            k = Math.max(n &gt;= 0 ? n : len - Math.abs(n), 0);\n            // 9. Repeat, while k &lt; len\n            while (k &lt; len) {\n                // a. Let Pk be ToString(k).\n                //   This is implicit for LHS operands of the in operator\n                // b. Let kPresent be the result of calling the\n                //    HasProperty internal method of O with argument Pk.\n                //   This step can be combined with c\n                // c. If kPresent is true, then\n                //    i.  Let elementK be the result of calling the Get\n                //        internal method of O with the argument ToString(k).\n                //   ii.  Let same be the result of applying the\n                //        Strict Equality Comparison Algorithm to\n                //        searchElement and elementK.\n                //  iii.  If same is true, return k.\n                if (k in O &amp;&amp; O[k] === searchElement) {\n                    return k;\n                }\n                k++;\n            }\n            return -1;\n        };\n    }\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>If you have worked with JavaScript at any length you are aware that Internet&nbsp;Explorer does not implement the ECMAScript function for Array.prototype.indexOf() [including Internet&nbsp;Explorer&nbsp;8]. It is not a huge problem, because you can extend the functionality on your page with the following code.</p>\n\n<pre><code>Array.prototype.indexOf = function(obj, start) {\n     for (var i = (start || 0), j = this.length; i &lt; j; i++) {\n         if (this[i] === obj) { return i; }\n     }\n     return -1;\n}\n</code></pre>\n\n<p>When should I implement this?</p>\n\n<p>Should I wrap it on all my pages with the following check, which checks if the prototype function exists and if not, go ahead and extend the Array prototype?</p>\n\n<pre><code>if (!Array.prototype.indexOf) {\n\n    // Implement function here\n\n}\n</code></pre>\n\n<p>Or do browser check and if it is Internet&nbsp;Explorer then just implement it?</p>\n\n<pre><code>//Pseudo-code\n\nif (browser == IE Style Browser) {\n\n     // Implement function here\n\n}\n</code></pre>\n",
            "last_activity_date": 1426141206,
            "question_id": 1744310,
            "score": 242,
            "tags": [
                "javascript",
                "internet-explorer",
                "internet-explorer-8",
                "cross-browser"
            ],
            "title": "How to fix Array indexOf() in JavaScript for Internet Explorer browsers"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Simple:</p>\n\n<pre><code>var rand = myArray[Math.floor(Math.random() * myArray.length)];\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 251
                },
                {
                    "body": "<p>I've found it even simpler to add a prototype function to the Array class:</p>\n\n<pre><code>Array.prototype.randomElement = function () {\n    return this[Math.floor(Math.random() * this.length)]\n}\n</code></pre>\n\n<p>Now I can get a random array element by just typing:</p>\n\n<pre><code>var myRandomElement = myArray.randomElement()\n</code></pre>\n\n<p>Note that this will add a property to all arrays, so if you're looping over one using <code>for..in</code> you should use <code>.hasOwnProperty()</code>:</p>\n\n<pre><code>for (var prop in myArray) {\n    if (myArray.hasOwnProperty(prop)) {\n        ...\n    }\n}\n</code></pre>\n\n<p>(That may or may not be a hassle for you.)</p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>Say you want to choose a random item that is different from the last time (not really random, but still a common requirement)...</p>\n\n<p>Building upon the answer by @Markus, we can add another prototype function:</p>\n\n<pre><code>Array.prototype.randomDiffElement = function(last) {\n   if (this.length == 0) {\n      return;\n   } else if (this.length == 1) {\n      return this[0];\n   } else {\n      var num = 0;\n      do {\n         num = Math.floor(Math.random() * this.length);\n      } while (this[num] == last);\n      return this[num];\n   }\n}\n</code></pre>\n\n<p>And implement like so:</p>\n\n<pre><code>var myRandomDiffElement = myArray.randomDiffElement(lastRandomElement)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>In my opinion, better than messing around with prototypes , or declaring it just in time, I prefer exposing it to window:</p>\n\n<pre><code>window.choice = function() {\n  if (!this.length || this.length == 0) return;\n  if (this.length == 1) return this[0];\n  return this[Math.floor(Math.random()*this.length)];\n}\n</code></pre>\n\n<p>Now anywhere on your app you call it like:</p>\n\n<pre><code>var rand = window.choice.call(array)\n</code></pre>\n\n<p>This way you can still use <code>for(x in array)</code> loop properly</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you have fixed values (like a month name list) and want a one-line solution</p>\n\n<pre><code>var result = ['January', 'February', 'March'][Math.floor(Math.random() * 3)]\n</code></pre>\n\n<p>The second part of the array is an access operation as described in <a href=\"http://stackoverflow.com/questions/7421013/why-does-5-6-8-71-2-8-in-javascript/7421030#7421030\">Why does [5,6,8,7][1,2] = 8 in Javascript</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<pre><code>var myArray = ['January', 'February', 'March'];    \n</code></pre>\n\n<p>How to select random one from this array?</p>\n",
            "last_activity_date": 1417186731,
            "question_id": 4550505,
            "score": 98,
            "tags": [
                "javascript"
            ],
            "title": "Getting random value from an array"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>With angular 1.3 you can no longer use global controller declaration on the global scope. You would need to define the controller using inline declaration. </p>\n\n<pre><code>   angular.module('app', []).controller('ContactController', function ContactController($scope) {\n        $scope.contacts = [\"abcd@gmail.com\", \"abcd@yahoo.co.in\"];\n\n        $scope.add = function() {\n            $scope.contacts.push($scope.newcontact);\n            $scope.newcontact = \"\";\n\n        };\n    });\n</code></pre>\n\n<p>or</p>\n\n<pre><code> function ContactController($scope) {\n        $scope.contacts = [\"abcd@gmail.com\", \"abcd@yahoo.co.in\"];\n\n        $scope.add = function() {\n            $scope.contacts.push($scope.newcontact);\n            $scope.newcontact = \"\";\n\n        };\n    }\n\n angular.module('app', []).controller('ContactController', ContactController)\n</code></pre>\n\n<p>It is a breaking change but it <a href=\"https://docs.angularjs.org/api/ng/provider/$controllerProvider\">can be turned off to use globals by using <code>allowGlobals</code></a>.</p>\n\n<p>Example:-</p>\n\n<pre><code>angular.module('app').config(['$controllerProvider', function($controllerProvider) {\n      $controllerProvider.allowGlobals();\n   }]);\n</code></pre>\n\n<p>Here is the comment from angular source:-</p>\n\n<blockquote>\n  <ul>\n  <li>check if a controller with given name is registered via <code>$controllerProvider</code></li>\n  <li>check if evaluating the string on the current scope returns a constructor</li>\n  <li>if $controllerProvider#allowGlobals, check <code>window[constructor]</code> on the global <code>window</code> object (not recommended)</li>\n  </ul>\n</blockquote>\n\n<pre><code> .....\n\nexpression = controllers.hasOwnProperty(constructor)\n            ? controllers[constructor]\n            : getter(locals.$scope, constructor, true) ||\n                (globals ? getter($window, constructor, true) : undefined);\n</code></pre>\n\n<p><em>Do Make sure to put the appname in <code>ng-app</code> directive on your angular root element (eg:- <code>html</code>) as well. Example:- ng-app=\"myApp\"</em></p>\n",
                    "is_accepted": true,
                    "score": 39
                },
                {
                    "body": "<p>I just migrate to angular 1.3.3 and I found that If I had multiple controllers in different files when app is override and I lost first declared containers.</p>\n\n<p>I don't know if is a good practise, but maybe can be helpful for another one.</p>\n\n<pre><code>var app = app;\nif(!app) {\n    app = angular.module('web', ['ui.bootstrap']);\n}\napp.controller('SearchCtrl', SearchCtrl);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am writing a sample application using angularjs. i got an error mentioned below on chrome browser. </p>\n\n<p>Error is</p>\n\n<pre><code>Error: [ng:areq] http://errors.angularjs.org/1.3.0-beta.17/ng/areq?p0=ContactController&amp;p1=not%20a%20function%2C%20got%20undefined\n</code></pre>\n\n<p>Code</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html ng-app&gt;\n&lt;head&gt;\n    &lt;script src=\"../angular.min.js\"&gt; &lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function ContactController($scope) {\n            $scope.contacts = [\"abcd@gmail.com\", \"abcd@yahoo.co.in\"];\n\n            $scope.add = function() {\n                $scope.contacts.push($scope.newcontact);\n                $scope.newcontact = \"\";\n\n            };\n        }\n\n    &lt;/script&gt;\n\n&lt;/head&gt;\n\n&lt;body&gt;\n\n    &lt;h1&gt;  modules sample &lt;/h1&gt;\n\n    &lt;div ng-controller=\"ContactController\"&gt;\n        Email:&lt;input type=\"text\" ng-model=\"newcontact\"&gt;\n        &lt;button ng-click=\"add()\"&gt;Add&lt;/button&gt;\n\n        &lt;h2&gt; Contacts &lt;/h2&gt;\n        &lt;ul&gt;\n            &lt;li ng-repeat=\"contact in contacts\"&gt; {{contact}} &lt;/li&gt;\n        &lt;/ul&gt;\n\n    &lt;/div&gt;\n&lt;/body&gt; \n&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1416867910,
            "question_id": 25111831,
            "score": 16,
            "tags": [
                "javascript",
                "angularjs",
                "angularjs-directive",
                "angularjs-scope"
            ],
            "title": "Controller not a function, got undefined, while defining controllers globally"
        },
        {
            "answer_count": 29,
            "answers": [
                {
                    "body": "<pre><code>if ( $(element).css('display') == 'none' ){\n    // element is hidden\n}\n</code></pre>\n\n<p>Functions don't work with the visibility attribute.</p>\n",
                    "is_accepted": false,
                    "score": 324
                },
                {
                    "body": "<p>You can use the <a href=\"http://docs.jquery.com/Selectors/hidden\"><code>hidden</code></a> selector:</p>\n\n<pre><code>// Matches all elements that are hidden\n$('element:hidden')\n</code></pre>\n\n<p>And the <a href=\"http://docs.jquery.com/Selectors/visible\"><code>visible</code></a> selector:</p>\n\n<pre><code>// Matches all elements that are visible\n$('element:visible')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 609
                },
                {
                    "body": "<p>Since the question refers to a single element, this code might be more suitable:</p>\n\n<pre><code>// Checks for display:[none|block], ignores visible:[true|false]\n$(element).is(\":visible\"); \n</code></pre>\n\n<p>Same as <a href=\"http://stackoverflow.com/questions/178325/how-do-you-test-if-something-is-hidden-in-jquery/178386#178386\">twernt's suggestion</a>, but applied to a single element.</p>\n",
                    "is_accepted": true,
                    "score": 4447
                },
                {
                    "body": "<p>Often when checking if something is visible or not, you are going to go right ahead immediately and do something else with it. jQuery chaining makes this easy.</p>\n\n<p>So if you have a selector and you want to perform some action on it only if is visible or hidden, you can use <code>filter(\":visible\")</code> or <code>filter(\":hidden\")</code> followed by chaining it with the action you want to take.</p>\n\n<p>So instead of an <code>if</code> statement, like this:</p>\n\n<pre><code>if ($('#btnUpdate').is(\":visible\"))\n{\n     $('#btnUpdate').animate({ width: \"toggle\" });   // Hide button\n}\n</code></pre>\n\n<p>Or more efficient, but even uglier:</p>\n\n<pre><code>var button = $('#btnUpdate');\nif ($(button).is(\":visible\"))\n{\n     $(button).animate({ width: \"toggle\" });   // Hide button\n}\n</code></pre>\n\n<p>You can do it all in one line:</p>\n\n<pre><code>$('#btnUpdate').filter(\":visible\").animate({ width: \"toggle\" });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 77
                },
                {
                    "body": "<p>From <em><a href=\"http://docs.jquery.com/Frequently_Asked_Questions#How_do_I_determine_the_state_of_a_toggled_element.3F\">How do I determine the state of a toggled element? </a></em>:</p>\n\n<hr>\n\n<p>You can determine whether an element is collapsed or not by using the <code>:visible</code> and <code>:hidden</code> selectors.</p>\n\n<pre><code>var isVisible = $('#myDiv').is(':visible');\nvar isHidden = $('#myDiv').is(':hidden');\n</code></pre>\n\n<p>If you're simply acting on an element based on its visibility, just include \":visible\" or \":hidden\" in the selector expression. For example:</p>\n\n<pre><code> $('#myDiv:visible').animate({left: '+=200px'}, 'slow');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 106
                },
                {
                    "body": "<p>None of these answers address what I understand to be the question, which is what I was searching for, \"how do I handle items that have <code>visibility: hidden</code>?\". Neither <code>:visible</code> nor <code>:hidden</code> will handle this, as they are both looking for display per the documentation.  As far as I could determine, there is no selector to handle CSS visibility.  Here is how I resolved it (standard jQuery selectors, there may be a more condensed syntax):</p>\n\n<pre><code>$(\".item\").each(function() {\n    if ($(this).css(\"visibility\") == \"hidden\") {\n        // handle non visible state\n    } else {\n        // handle visible state\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 204
                },
                {
                    "body": "<p>This works for me, and I am using <code>show()</code> and <code>hide()</code> to make my div hidden/visible:</p>\n\n<pre><code>if( $(this).css(\"display\") == 'none' ){\n\n    /* your code here*/\n}\nelse{\n\n    /*  alternate logic   */\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 48
                },
                {
                    "body": "<p>The <code>:visible</code> selector according to the jQuery documentation:</p>\n\n<ul>\n<li>They have a CSS display value of none.</li>\n<li>They are form elements with <code>type=\"hidden\"</code>.</li>\n<li>Their width and height are explicitly set to 0.</li>\n<li>An ancestor element is hidden, so the element is not shown on the page.</li>\n<li>Elements with <code>visibility: hidden</code> or <code>opacity: 0</code> are considered to be visible, since they still consume space in the layout.</li>\n</ul>\n\n<p>This is useful in some cases and useless in others, because if you want to check if the element is visible (<code>display != none</code>), ignoring the parents visibility, you will find that doing <code>.css(\"display\") == 'none'</code> is not only faster, but will also return the visibility check correctly.</p>\n\n<p>If you want to check visibility instead of display, you should use: <code>.css(\"visibility\") == \"hidden\"</code>.</p>\n\n<p>Also take into consideration the additional jQuery notes:</p>\n\n<blockquote>\n  <p>Because <code>:visible</code> is a jQuery extension and not part of the CSS specification, queries using <code>:visible</code> cannot take advantage of the performance boost provided by the native DOM <code>querySelectorAll()</code> method. To achieve the best performance when using <code>:visible</code> to select elements, first select the elements using a pure CSS selector, then use <code>.filter(\":visible\")</code>.</p>\n</blockquote>\n\n<p>Also, if you are concerned about performance, you should check <em><a href=\"http://www.learningjquery.com/2010/05/now-you-see-me-showhide-performance\">Now you see me\u2026 show/hide performance</a></em> (2010-05-04). And use other methods to show and hide elements.</p>\n",
                    "is_accepted": false,
                    "score": 52
                },
                {
                    "body": "<p>I would use CSS class <code>.hide { display: none!important; }</code>. </p>\n\n<p>For hiding/showing, I call <code>.addClass(\"hide\")/.removeClass(\"hide\")</code>. For checking visibility, I use <code>.hasClass(\"hide\")</code>.</p>\n\n<p>It's a simple and clear way to check/hide/show elements, if you don't plan to use <code>.toggle()</code> or <code>.animate()</code> methods.</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>Another answer you should put into consideration is if you are hiding an element, you should use <a href=\"http://en.wikipedia.org/wiki/JQuery\">jQuery</a>, but instead of actually hiding it, you remove the whole element, but you copy its <a href=\"http://en.wikipedia.org/wiki/HTML\">HTML</a> content and the tag itself into a jQuery variable, and then all you need to do is test if there is such a tag on the screen, using the normal <code>if (!$('#thetagname').length)</code>.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>How <strong><a href=\"http://web-profile.com.ua/jquery/dev/jquery-element-visible-hidden/\">element visibility and jQuery works</a></strong>;</p>\n\n<p>An element could be hidden with \"display:none\", \"visibility:hidden\" or \"opacity:0\". The difference between those methods:</p>\n\n<ul>\n<li><code>display:none</code> hides the element, and it does not take up any space;</li>\n<li><code>visibility:hidden</code> hides the element, but it still takes up space in the layout;</li>\n<li><p><code>opacity:0</code> hides the element as \"visibility:hidden\", and it still takes up space in the layout; the only difference is that opacity lets one to make an element partly transparent;  </p>\n\n<pre><code>        if ($('.target').is(':hidden')) {\n            $('.target').show();\n        } \n        else {\n            $('.target').hide();\n        }\n        if ($('.target').is(':visible')) {\n            $('.target').hide();\n        } \n        else {\n            $('.target').show();\n        }\n\n        if ($('.target-visibility').css('visibility') == 'hidden') {\n            $('.target-visibility').css({ visibility: \"visible\", display: \"\" });\n        }\n         else {\n            $('.target-visibility').css({ visibility: \"hidden\", display: \"\" });\n        }\n\n        if ($('.target-visibility').css('opacity') == \"0\") {\n            $('.target-visibility').css({ opacity: \"1\", display: \"\" });\n        } \n        else {\n            $('.target-visibility').css({ opacity: \"0\", display: \"\" });\n        }\n</code></pre></li>\n</ul>\n\n<p><strong>Useful jQuery toggle methods:</strong></p>\n\n<pre><code>$('.click').click(function() {\n    $('.target').toggle();\n});\n\n$('.click').click(function() {\n    $('.target').slideToggle();\n});\n\n$('.click').click(function() {\n    $('.target').fadeToggle();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 50
                },
                {
                    "body": "<p>One can simply use the <code>hidden</code> or <code>visible</code> attribute, like:</p>\n\n<pre><code>$('element:hidden')\n$('element:visible')\n</code></pre>\n\n<p>Or you can simplify the same with <em>is</em> as follows.</p>\n\n<pre><code>$(element).is(\":visible\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p><code>ebdiv</code> should be set to <code>style=\"display:none;\"</code>. It is works for show and hide:</p>\n\n<pre><code>$(document).ready(function(){\n    $(\"#eb\").click(function(){\n        $(\"#ebdiv\").toggle();\n    });    \n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>You can also do this using plain JavaScript:</p>\n\n<pre><code>function isRendered(domObj) {\n    if ((domObj.nodeType != 1) || (domObj == document.body)) {\n        return true;\n    }\n    if (domObj.currentStyle &amp;&amp; domObj.currentStyle[\"display\"] != \"none\" &amp;&amp; domObj.currentStyle[\"visibility\"] != \"hidden\") {\n        return isRendered(domObj.parentNode);\n    } else if (window.getComputedStyle) {\n        var cs = document.defaultView.getComputedStyle(domObj, null);\n        if (cs.getPropertyValue(\"display\") != \"none\" &amp;&amp; cs.getPropertyValue(\"visibility\") != \"hidden\") {\n            return isRendered(domObj.parentNode);\n        }\n    }\n    return false;\n}\n</code></pre>\n\n<p>Notes:</p>\n\n<ol>\n<li><p>Works everywhere</p></li>\n<li><p>Works for nested elements</p></li>\n<li><p>Works for CSS and inline styles</p></li>\n<li><p>Doesn't require a framework</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>This may work:</p>\n\n<pre><code>expect($(\"#message_div\").css(\"display\")).toBe(\"none\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p><em><strong>HTML</em></strong></p>\n\n<pre><code>&lt;div id=\"clickme\"&gt;\n Click here\n&lt;/div&gt;\n&lt;img id=\"book\" src=\"http://www.chromefusion.com/wp-content/uploads/2012/06/chrome-logo.jpg\" alt=\"\" /&gt;\n</code></pre>\n\n<p><em><strong>jQuery</em></strong></p>\n\n<pre><code>&lt;script&gt;\n\n$('#clickme').click(function() {\n$('#book').toggle('slow', function() {\n    // Animation complete.\n     alert( $('#book').is(\":visible\"));//&lt;--- TRUE if Visible False if Hidden\n   });\n});\n\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>Source:</strong> </p>\n\n<p><a href=\"http://bloggerplugnplay.blogspot.in/2013/01/how-to-see-if-element-is-hidden-or.html\">Blogger Plug n Play - jQuery Tools and Widgets: How to See if Element is hidden or Visible Using jQuery</a></p>\n\n<p><strong>jsFiddle:</strong> </p>\n\n<p><a href=\"http://jsfiddle.net/ipsjolly/k4WWj/\">JSFiddle - ipsjolly - k4WWj</a></p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>To check if it is not visible I use <code>!</code>:</p>\n\n<pre><code>if ( !$('#book').is(':visible')) {\n    alert('#book is not visible')\n}\n</code></pre>\n\n<p>Or the following is also the sam, saving the jQuery selector in a variable to have better performance when you need it multiple times:</p>\n\n<pre><code>var $book = $('#book')\n\nif(!$book.is(':visible')) {\n    alert('#book is not visible')\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<h2>Use class toggling, not style editing . . .</h2>\n\n<p>Using classes designated for \"hiding\" elements is easy and also one of the most efficient methods. Toggling a class 'hidden' with a <code>Display</code> style of 'none' will perform faster than editing that style directly. I explained some of this pretty thoroughly in Stack Overflow question <em><a href=\"http://stackoverflow.com/questions/17725361/turning-two-elements-visible-hidden-in-same-div/17726550#answer-17726550\">Turning two elements visible/hidden in the same div</a></em>.</p>\n\n<hr>\n\n<h2>JavaScript Best Practices and Optimization</h2>\n\n<p>Here is a truly enlightening video of a Google Tech Talk by Google front-end engineer Nicholas Zakas:</p>\n\n<ul>\n<li><strong><a href=\"http://www.youtube.com/watch?v=mHtdZgou0qU\">Speed Up Your Javascript</a></strong> (YouTube)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<pre><code>Example:\n\n&lt;div id=\"checkme\" class=\"product\" style=\"display:none\"&gt;\n &lt;span class=\"itemlist\"&gt;&lt;!-- Shows Results for Fish --&gt;&lt;/span&gt;\n Category:Fish\n &lt;br&gt;Product: Salmon Atlantic\n &lt;br&gt;Specie: Salmo salar\n &lt;br&gt;Form: Steaks\n&lt;/div&gt;\n\n\n&lt;script&gt;\n  $(document).ready(function(){\n     if($(\"#checkme:hidden\").length)\n     {\n          alert('Hidden');\n     }\n   });\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Also here's a ternary conditional expression to check the state of the element and then to toggle it:</p>\n\n<pre><code>$('someElement').on('click', function(){ $('elementToToggle').is(':visible') ? $('elementToToggle').hide('slow') : $('elementToToggle').show('slow'); });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>if($('#postcode_div').is(':visible')) {\n    if($('#postcode_text').val()=='') {\n        $('#spanPost').text('\\u00a0');\n    } else {\n        $('#spanPost').text($('#postcode_text').val());\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You need to check both... Display as well as visibility:</p>\n\n<pre><code>if ($(this).css(\"display\") == \"none\" || $(this).css(\"visibility\") == \"hidden\") {\n    // The element is not visible\n} else {\n    // The element is visible\n}\n</code></pre>\n\n<p>If we check for <code>$(this).is(\":visible\")</code>, jQuery checks for both the things automatically.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Because <code>Elements with visibility: hidden or opacity: 0 are considered visible, since they still consume space in the layout</code> (as described for <a href=\"https://api.jquery.com/visible-selector/\" rel=\"nofollow\">jQuery :visible Selector</a>) - we can check if element is <em>really</em> visible in this way:</p>\n\n<pre><code>function isElementReallyHidden (el) {\n    return $(el).is(\":hidden\") || $(el).css(\"visibility\") == \"hidden\" || $(el).css('opacity') == 0;\n}\n\nvar booElementReallyShowed = !isElementReallyHidden(someEl);\n$(someEl).parents().each(function () {\n    if (isElementReallyHidden(this)) {\n        booElementReallyShowed = false;\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>After all, none of examples suits me, so I wrote my own.</p>\n\n<p><strong>Tests</strong> (no support of Internet&nbsp;Explorer <code>filter:alpha</code>):</p>\n\n<p>a) Check if the document is not hidden</p>\n\n<p>b) Check if an element has zero width / height / opacity or <code>display:none</code> / <code>visibility:hidden</code> in inline styles</p>\n\n<p>c) Check if the center (also because it is faster than testing every pixel / corner) of element is not hidden by other element (and all ancestors, example: <code>overflow:hidden</code> / scroll / one element over enother) or screen edges</p>\n\n<p>d) Check if an element has zero width / height / opacity or <code>display:none</code> / visibility:hidden in computed styles (among all ancestors)</p>\n\n<p><strong>Tested on</strong></p>\n\n<p>Android 4.4 (Native browser/Chrome/Firefox), Firefox (Windows/Mac), Chrome (Windows/Mac), Opera (Windows <a href=\"http://en.wikipedia.org/wiki/Presto_%28layout_engine%29\">Presto</a>/Mac Webkit), Internet&nbsp;Explorer (Internet&nbsp;Explorer 5-11 document modes + Internet&nbsp;Explorer 8 on a virtual machine), Safari (Windows/Mac/iOS)</p>\n\n<pre><code>var is_visible = (function () {\n    var x = window.pageXOffset ? window.pageXOffset + window.innerWidth - 1 : 0,\n        y = window.pageYOffset ? window.pageYOffset + window.innerHeight - 1 : 0,\n        relative = !!((!x &amp;&amp; !y) || !document.elementFromPoint(x, y));\n        function inside(child, parent) {\n            while(child){\n                if (child === parent) return true;\n                child = child.parentNode;\n            }\n        return false;\n    };\n    return function (elem) {\n        if (\n            document.hidden ||\n            elem.offsetWidth==0 ||\n            elem.offsetHeight==0 ||\n            elem.style.visibility=='hidden' ||\n            elem.style.display=='none' ||\n            elem.style.opacity===0\n        ) return false;\n        var rect = elem.getBoundingClientRect();\n        if (relative) {\n            if (!inside(document.elementFromPoint(rect.left + elem.offsetWidth/2, rect.top + elem.offsetHeight/2),elem)) return false;\n        } else if (\n            !inside(document.elementFromPoint(rect.left + elem.offsetWidth/2 + window.pageXOffset, rect.top + elem.offsetHeight/2 + window.pageYOffset), elem) ||\n            (\n                rect.top + elem.offsetHeight/2 &lt; 0 ||\n                rect.left + elem.offsetWidth/2 &lt; 0 ||\n                rect.bottom - elem.offsetHeight/2 &gt; (window.innerHeight || document.documentElement.clientHeight) ||\n                rect.right - elem.offsetWidth/2 &gt; (window.innerWidth || document.documentElement.clientWidth)\n            )\n        ) return false;\n        if (window.getComputedStyle || elem.currentStyle) {\n            var el = elem,\n                comp = null;\n            while (el) {\n                if (el === document) {break;} else if(!el.parentNode) return false;\n                comp = window.getComputedStyle ? window.getComputedStyle(el, null) : el.currentStyle;\n                if (comp &amp;&amp; (comp.visibility=='hidden' || comp.display == 'none' || (typeof comp.opacity !=='undefined' &amp;&amp; comp.opacity != 1))) return false;\n                el = el.parentNode;\n            }\n        }\n        return true;\n    }\n})();\n</code></pre>\n\n<p>How to use:</p>\n\n<pre><code>is_visible(elem) // boolean\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>.is(\":not(':hidden')\") /*if shown*/\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>When testing an element against <code>:hidden</code> selector in jQuery it should be considered that <strong>an absolute positioned element may be recognized as hidden although their child elements are visible</strong>.</p>\n\n<p>This seems somewhat counter-intuitive in the first place \u2013 though having a closer look at the jQuery documentation gives the relevant information:</p>\n\n<blockquote>\n  <p>Elements can be considered hidden for several reasons: [...] Their width and height are explicitly set to 0. [...]</p>\n</blockquote>\n\n<p>So this actually makes sense in regards to the box-model and the computed style for the element. Even if width and height are not set <em>explicitly</em> to 0 they may be set <em>implicitly</em>.</p>\n\n<p>Have a look at the following example:</p>\n\n<p>JSFiddle:</p>\n\n<p><a href=\"http://jsfiddle.net/pM2q3/1/\">http://jsfiddle.net/pM2q3/1/</a></p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div class=\"foo\"&gt;\n    &lt;div class=\"bar\"&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>.foo {\n    position: absolute;\n    left: 10px;\n    top: 10px;\n    background: #ff0000;\n}\n\n.bar {\n    position: absolute;\n    left: 10px;\n    top: 10px;\n    width: 20px;\n    height: 20px;\n    background: #0000ff;\n}\n</code></pre>\n\n<p>JavaScript:</p>\n\n<pre><code>console.log($('.foo').is(':hidden')); // true\nconsole.log($('.bar').is(':hidden')); // false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Simply check visibility by checking for a boolean value, like:</p>\n\n<pre><code>if (this.hidden === false) {\n    // Your code\n}\n</code></pre>\n\n<p>I used this code for each function. Otherwise you can use \"is(':visible')\" for checking the visibility of an element.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>But what if the element's CSS is like the following?</p>\n\n<pre><code>.element{\n    position: absolute;left:-9999;    \n}\n</code></pre>\n\n<p>So <a href=\"http://stackoverflow.com/questions/8897289\">this answer to Stack Overflow question <em>How to check if an element is off-screen</em></a> should also be considered.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A function can be created in order to check for visibility/display attributes in order to gauge whether the element is shown in the UI or not. </p>\n\n<pre><code>function checkUIElementVisible(element) {\n    return ((element.css('display') !== 'none') &amp;&amp; (element.css('visibility') !== 'hidden'));\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/w8bytkqc/\" rel=\"nofollow\">Working Fiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>In jQuery, it is possible to toggle the visibility of an element, using the functions <code>.hide()</code>, <code>.show()</code> or <code>.toggle()</code>.</p>\n\n<p>Using jQuery, how would you test if an element is visible or hidden?</p>\n",
            "last_activity_date": 1424892995,
            "question_id": 178325,
            "score": 3253,
            "tags": [
                "javascript",
                "jquery",
                "visibility"
            ],
            "title": "Testing if something is hidden"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>The easiest way to avoid use of custom attributes is to use existing attributes.</p>\n\n<p>use meaningful, relevant class names.<br>\nFor example, do something like: <code>type='book'</code> and <code>type='cd'</code>, \nto represent books and cds. Classes are much better for representing what something <em>IS</em>. </p>\n\n<p>e.g. <code>class='book'</code></p>\n\n<p>I have used custom attributes in the past, but honestly, there really isn't a need to for them if you make use of existing attributes in a semantically meaningful way.</p>\n\n<p>To give a more concrete example, let's say you have a site giving links to different kinds of stores. You could use the following:</p>\n\n<pre><code>&lt;a href='wherever.html' id='bookstore12' class='book store'&gt;Molly's books&lt;/a&gt;\n&lt;a href='whereverelse.html' id='cdstore3' class='cd store'&gt;James' Music&lt;/a&gt;\n</code></pre>\n\n<p>css styling could use classes like:</p>\n\n<pre><code>.store { }\n.cd.store { }\n.book.store { }\n</code></pre>\n\n<p>In the above example we see that both are links to stores (as opposed to the other unrelated links on the site) and one is a cd store, and the other is a book store.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Custom attributes, in my humble opinion, should not be used as they do not validate. Alternative to that, you can define many classes for a single element like:</p>\n\n<pre><code>&lt;div class='class1 class2 class3'&gt;\n    Lorem ipsum\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Embed the data in the dom and use <a href=\"https://github.com/jquery-orphans/jquery-metadata\" rel=\"nofollow\">metadata</a> for <a href=\"http://jquery.com/\" rel=\"nofollow\">jQuery</a>.</p>\n\n<p>All the good plug-ins support the metadata plugin(allowing per tag options).</p>\n\n<p>It also allows infinitely complex data/data structures, as well as key-value pairs.</p>\n\n<pre><code>&lt;li class=\"someclass {'some': 'random,'json':'data'} anotherclass\"&gt;...&lt;/li&gt;\n</code></pre>\n\n<p>OR</p>\n\n<pre><code>&lt;li class=\"someclass\" data=\"{'some':'random', 'json': 'data'}\"&gt;...&lt;/li&gt;\n</code></pre>\n\n<p>OR</p>\n\n<pre><code>&lt;li class=\"someclass\"&gt;&lt;script type=\"data\"&gt;{\"some\":\"random\",\"json\":\"data\"}&lt;/script&gt; ...&lt;/li&gt;\n</code></pre>\n\n<p>Then get the data like so:</p>\n\n<pre><code>var data = $('li.someclass').metadata();\nif ( data.some &amp;&amp; data.some == 'random' )\nalert('It Worked!');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I see no problem in using existing XHTML features without breaking anything or extending your namespace. Let's take a look at a small example:</p>\n\n<pre><code>&lt;div id=\"some_content\"&gt;\n &lt;p&gt;Hi!&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>How to add additional information to some_content without additional attributes? What about adding another tag like the following?</p>\n\n<pre><code>&lt;div id=\"some_content\"&gt;\n &lt;div id=\"some_content_extended\" class=\"hidden\"&gt;&lt;p&gt;Some alternative content.&lt;/p&gt;&lt;/div&gt;\n &lt;p&gt;Hi!&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>It keeps the relation via a well defined id/extension \"_extended\" of your choice and by its position in the hierarchy. I often use this approach together with jQuery and without actually using Ajax like techniques.  </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Nay. Try something like this instead:</p>\n\n<pre><code>&lt;div id=\"foo\"/&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n  document.getElementById('foo').myProperty = 'W00 H00! I can add JS properties to DOM nodes without using custom attributes!';\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'm not doing using custom attributes, because I'm outputing XHTML, because I want the data to be machine-readable by 3rd-party software (although, I could extend the XHTML schema if I wanted to).</p>\n\n<p>As an alternative to custom attributes, mostly I'm finding the id and class attributes (e.g. as mentioned in other answers) sufficient.</p>\n\n<p>Also, consider this:</p>\n\n<ul>\n<li><p>If the extra data is to be human-readable as well as machine-readable, then it needs to be encoded using (visible) HTML tags and text instead of as custom attributes.</p></li>\n<li><p>If it doesn't need to be human readable, then perhaps it can be encoded using <em>invisible</em> HTML tags and text.</p></li>\n</ul>\n\n<p>Some people make an exception: they allow custom attributes, added to the DOM by Javascript on the client side at run-time. They reckon this is OK: because the custom attributes are only added to the DOM at run-time, the HTML contains no custom attributes.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>HTML 5 explicitly allows custom attributes that begin with <code>data</code>. So, for example, <code>&lt;p data-date-changed=\"Jan 24 5:23 p.m.\"&gt;Hello&lt;/p&gt;</code> is valid. Since it's officially supported by a standard, I think this is the best option for custom attributes. And it doesn't require you to overload other attributes with hacks, so your HTML can stay semantic.</p>\n\n<p>Source:  <a href=\"http://www.w3.org/TR/html5/dom.html#embedding-custom-non-visible-data-with-the-data-\">http://www.w3.org/TR/html5/dom.html#embedding-custom-non-visible-data-with-the-data-</a>*-attributes</p>\n",
                    "is_accepted": true,
                    "score": 175
                },
                {
                    "body": "<p>Spec: <em>Create an ASP.NET TextBox control which dynamically auto-formats its text as a number, according to properties \"DecimalSeparator\" and \"ThousandsSeparator\", using JavaScript.</em>\n<br /><br /><br />\nOne way to transfer these properties from the control to JavaScript is to have the control render out custom properties:</p>\n\n<pre><code>&lt;input type=\"text\" id=\"\" decimalseparator=\".\" thousandsseparator=\",\" /&gt;\n</code></pre>\n\n<p>Custom properties are easily accessible by JavaScript. And whilst a page using elements with custom properties won't <a href=\"http://validator.w3.org/\" rel=\"nofollow\">validate</a>, the rendering of that page won't be affected.\n<br /><br /><br />\nI <strong>only</strong> use this approach when I want to associate simple types like strings and integers to HTML elements for use with JavaScript. If I want to make HTML elements easier to identify, I'll make use of the <em>class</em> and <em>id</em> properties.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a technique I've been using recently:</p>\n\n<pre><code>&lt;div id=\"someelement\"&gt;\n\n    &lt;!-- {\n        someRandomData: {a:1,b:2},\n        someString: \"Foo\"\n    } --&gt;\n\n    &lt;div&gt;... other regular content...&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The comment-object ties to the parent element (i.e. #someelement).</p>\n\n<p>Here's the parser: <strong><a href=\"http://pastie.org/511358\">http://pastie.org/511358</a></strong></p>\n\n<p>To get the data for any particular element simply call <strong><code>parseData</code></strong> with a reference to that element passed as the only argument:</p>\n\n<pre><code>var myElem = document.getElementById('someelement');\n\nvar data = parseData( myElem );\n\ndata.someRandomData.a; // &lt;= Access the object staight away\n</code></pre>\n\n<p><hr /></p>\n\n<p>It can be more succinct than that:</p>\n\n<pre><code>&lt;li id=\"foo\"&gt;\n    &lt;!--{specialID:245}--&gt;\n    ... content ...\n&lt;/li&gt;\n</code></pre>\n\n<p>Access it:</p>\n\n<pre><code>parseData( document.getElementById('foo') ).specialID; // &lt;= 245\n</code></pre>\n\n<p><hr /></p>\n\n<p>The only disadvantage of using this is that it cannot be used with self-closing elements (e.g. <code>&lt;img/&gt;</code>), since the comments must be <em>within</em> the element to be considered as that element's data. </p>\n\n<p><hr /></p>\n\n<p><strong>EDIT</strong>:</p>\n\n<p>Notable benefits of this technique:</p>\n\n<ul>\n<li>Easy to implement</li>\n<li>Does <em>not</em> invalidate HTML/XHTML</li>\n<li>Easy to use/understand (basic JSON notation)</li>\n<li>Unobtrusive and semantically cleaner than most alternatives</li>\n</ul>\n\n<p><hr /></p>\n\n<p>Here's the parser code (copied from the <strong><a href=\"http://pastie.org/511358\">http://pastie.org/511358</a></strong> hyperlink above, in case it ever becomes unavailable on pastie.org):</p>\n\n<pre><code>var parseData = (function(){\n\n    var getAllComments = function(context) {\n\n            var ret = [],\n                node = context.firstChild;\n\n            if (!node) { return ret; }\n\n            do {\n                if (node.nodeType === 8) {\n                    ret[ret.length] = node;\n                }\n                if (node.nodeType === 1) {\n                    ret = ret.concat( getAllComments(node) );\n                }\n            } while( node = node.nextSibling );\n\n            return ret;\n\n        },\n        cache = [0],\n        expando = 'data' + +new Date(),\n        data = function(node) {\n\n            var cacheIndex = node[expando],\n                nextCacheIndex = cache.length;\n\n            if(!cacheIndex) {\n                cacheIndex = node[expando] = nextCacheIndex;\n                cache[cacheIndex] = {};\n            }\n\n            return cache[cacheIndex];\n\n        };\n\n    return function(context) {\n\n        context = context || document.documentElement;\n\n        if ( data(context) &amp;&amp; data(context).commentJSON ) {\n            return data(context).commentJSON;\n        }\n\n        var comments = getAllComments(context),\n            len = comments.length,\n            comment, cData;\n\n        while (len--) {\n            comment = comments[len];\n            cData = comment.data.replace(/\\n|\\r\\n/g, '');\n            if ( /^\\s*?\\{.+\\}\\s*?$/.test(cData) ) {\n                try {\n                    data(comment.parentNode).commentJSON =\n                        (new Function('return ' + cData + ';'))();\n                } catch(e) {}\n            }\n        }\n\n        return data(context).commentJSON || true;\n\n    };\n\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 65
                },
                {
                    "body": "<p>For complex web apps, I drop custom attributes all over the place.</p>\n\n<p>For more public facing pages I use the \"rel\" attribute and dump all my data there in JSON and then decode it with MooTools or jQuery: </p>\n\n<p><code>&lt;a rel=\"{color:red, awesome:true, food: tacos}\"&gt;blah&lt;/a&gt;</code>.</p>\n\n<p>I'm trying to stick with HTML 5 data attribute lately just to \"prepare\", but it hasn't come naturally yet.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>We've made a web-based editor that understands a subset of HTML - a very strict subset (that understood nearly universally by mail clients).  We need to express things like <code>&lt;td width=\"@INSWIDTH_42@\"&gt;</code> in the database, but we can't have that in the DOM, otherwise the browser where the editor runs, freaks out (or is more likely to freak out than it is likely to freak out over custom attributes).  We wanted drag-and-drop, so putting it purely in the DOM was out, as was jquery's <code>.data()</code> (the extra data didn't get copied properly).  We probably also needed the extra data to come along for the ride in <code>.html()</code>.  In the end we settled on using <code>&lt;td width=\"1234\" rs-width=\"@INSWIDTH_42@\"&gt;</code> during the editing process, and then when we POST it all, we remove <code>width</code> and do a regex search-and-destroy <code>s/rs-width=/width=/g</code>.</p>\n\n<p>At first the guy writing most of this was the validation-nazi on this issue and tried everything to avoid our custom attribute, but in the end acquiesced when nothing else seemed to work for ALL our requirements.  It helped when he realized that the custom attribute would never appear in an <em>email</em> We did consider encoding our extra data in <code>class</code>, but decided that would be the greater of two evils.</p>\n\n<p>Personally, I <em>prefer</em> to have things clean and passing validators etc., but as a company employee I have to remember that my primary responsibility is advancing the company's cause (making as much money as quickly as possible), not that of my egotistical desire for technical purity.  Tools should work for us; not us for them.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can create any attribute if you specify a schema for your page.</p>\n\n<p>For example:</p>\n\n<p><a href=\"http://www.addthis.com/help/api-spec\">Addthis</a></p>\n\n<pre><code>&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:addthis=\"http://www.addthis.com/help/api-spec\"&gt;\n...\n&lt;a addthis:title=\"\" addthis:url=\"\" ...&gt;\n</code></pre>\n\n<p><a href=\"http://developers.facebook.com/docs/opengraph\">Facebook</a> (even tags)</p>\n\n<pre><code>&lt;html xmlns:og=\"http://opengraphprotocol.org/schema/\" xmlns:fb=\"http://www.facebook.com/2008/fbml\"&gt;\n...\n&lt;fb:like href=\"http://developers.facebook.com/\" width=\"450\" height=\"80\"/&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                }
            ],
            "body": "<p>Recently I have been reading more and more about people using custom attributes in their HTML tags, mainly for the purpose of embedding some extra bits of data for use in javascript code.</p>\n\n<p>I was hoping to gather some feedback on whether or not using custom attributes is a good practice, and also what some alternatives are.</p>\n\n<p>It seems like it can really simplify <em>both</em> server side and client side code, but it also isn't W3C compliant.  </p>\n\n<p>Should we be making use of custom HTML attributes in our web apps?   Why or why not?</p>\n\n<p>For those who think custom attributes are a good thing:  what are some things to keep in mind when using them?</p>\n\n<p>For those who think custom attributes are bad thing: what alternatives do you use to accomplish something similar?</p>\n\n<p><strong>Update:</strong>  I'm mostly interested in the <em>reasoning</em> behind the various methods, as well as points as to why one method is better than another.  I think we can all come up with 4-5 different ways to accomplish the same thing.  (hidden elements, inline scripts, extra classes, parsing info from ids, etc). </p>\n\n<p><strong>Update 2:</strong>  It seems that the HTML 5 <code>data-</code> attribute feature has a lot of support here (and I tend to agree, it looks like a solid option).  So far I haven't seen much in the way of rebuttals for this suggestion.   Are there any issues/pitfalls to worry about using this approach?   Or is it simply a 'harmless' invalidation of the current W3C specs?</p>\n",
            "last_activity_date": 1420039255,
            "question_id": 992115,
            "score": 174,
            "tags": [
                "html",
                "xhtml",
                "javascript"
            ],
            "title": "Custom attributes - Yea or nay?"
        },
        {
            "answer_count": 41,
            "answers": [
                {
                    "body": "<p><strong>HTML 5</strong>\n(does not require JavaScript, but may not work with older browsers)</p>\n\n<p><code>&lt;input type=\"number\"&gt;</code></p>\n\n<p>Try <a href=\"http://www.w3schools.com/html/tryit.asp?filename=tryhtml5_input_type_number\">input type=number</a> to see the HTML5 version in action.</p>\n\n<p><strong>JavaScript</strong>\n(rough and ready)</p>\n\n<p><code>&lt;input type=\"text\" onkeypress='return event.charCode &gt;= 48 &amp;&amp; event.charCode &lt;= 57'&gt;&lt;/input&gt;</code></p>\n\n<p><strong>jQuery</strong></p>\n\n<pre><code>$(document).ready(function() {\n    $(\"#txtboxToFilter\").keydown(function (e) {\n        // Allow: backspace, delete, tab, escape, enter and .\n        if ($.inArray(e.keyCode, [46, 8, 9, 27, 13, 110, 190]) !== -1 ||\n             // Allow: Ctrl+A\n            (e.keyCode == 65 &amp;&amp; e.ctrlKey === true) || \n             // Allow: home, end, left, right\n            (e.keyCode &gt;= 35 &amp;&amp; e.keyCode &lt;= 39)) {\n                 // let it happen, don't do anything\n                 return;\n        }\n        // Ensure that it is a number and stop the keypress\n        if ((e.shiftKey || (e.keyCode &lt; 48 || e.keyCode &gt; 57)) &amp;&amp; (e.keyCode &lt; 96 || e.keyCode &gt; 105)) {\n            e.preventDefault();\n        }\n    });\n});\n</code></pre>\n\n<p><strong>More complex validation options</strong></p>\n\n<p>If you want to do some other validation bits and pieces, this could be handy:</p>\n\n<p><a href=\"http://www.javascript-coder.com/html-form/javascript-form-validation.phtml\">http://www.javascript-coder.com/html-form/javascript-form-validation.phtml</a></p>\n\n<p><strong>But don't forget you still <em>must</em> do server side validation!</strong></p>\n",
                    "is_accepted": true,
                    "score": 170
                },
                {
                    "body": "<p>2 solutions:</p>\n\n<p>Use a form validator (for example with <a href=\"http://bassistance.de/jquery-plugins/jquery-plugin-validation/\">jQuery validation plugin</a>)</p>\n\n<p>Do a check during the onblur (i.e. when the user leaves the field) event of the input field, with the regular expression:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction testField(field) {\n    var regExpr = new RegExp(\"^\\d*\\.?\\d*$\");\n    if (!regExpr.test(field.value)) {\n      // Case of error\n      field.value = \"\";\n    }\n}\n\n&lt;/script&gt;\n\n&lt;input type=\"text\" ... onblur=\"testField(this);\"/&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>You may try using the '''onkeydown''' event and cancel the event (event.preventDefault or something like that) when it's not one of the allowed keys.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can attach to the key down event and then filter keys according to what you need, for example:</p>\n\n<pre><code>&lt;input id=\"FIELD_ID\" name=\"FIELD_ID\" onkeypress=\"return validateNUM(event,this);\"  type=\"text\"&gt;\n</code></pre>\n\n<p>And the actual javascript handler would be:</p>\n\n<pre><code>function validateNUM(e,field)\n{\n    var key = getKeyEvent(e)\n    if (specialKey(key)) return true;\n    if ((key &gt;= 48 &amp;&amp; key &lt;= 57) || (key == 46)){ \n        if (key != 46)\n            return true;\n        else{  \n            if (field.value.search(/\\./) == -1 &amp;&amp; field.value.length &gt; 0) \n                return true;\n            else \n                return false;\n        }       \n    }\n\nfunction getKeyEvent(e){\n    var keynum\n    var keychar\n    var numcheck\n    if(window.event) // IE\n        keynum = e.keyCode\n    else if(e.which) // Netscape/Firefox/Opera\n        keynum = e.which\n    return keynum;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use this DOM</p>\n\n<pre><code>&lt;input type='text' onkeypress='validate(event)' /&gt;\n</code></pre>\n\n<p>And this script</p>\n\n<pre><code>function validate(evt) {\n  var theEvent = evt || window.event;\n  var key = theEvent.keyCode || theEvent.which;\n  key = String.fromCharCode( key );\n  var regex = /[0-9]|\\./;\n  if( !regex.test(key) ) {\n    theEvent.returnValue = false;\n    if(theEvent.preventDefault) theEvent.preventDefault();\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 149
                },
                {
                    "body": "<p>Remember the regional differences (Euros use periods and commas in the reverse way as Americans), plus the minus sign (or the convention of wrapping a number in parentheses to indicate negative), plus exponential notation (I'm reaching on that one).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>HTML5 has <code>&lt;input type=number></code>, which sounds right for you. Currently, only Opera supports it natively, but there is <a href=\"http://code.google.com/p/webforms2/\">a project</a> that has a JavaScript implementation.</p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>Thanks guys this really help me!</p>\n\n<p>I found the perfert one really useful for database.</p>\n\n<pre><code>function numonly(root){\n    var reet = root.value;    \n    var arr1=reet.length;      \n    var ruut = reet.charAt(arr1-1);   \n        if (reet.length &gt; 0){   \n        var regex = /[0-9]|\\./;   \n            if (!ruut.match(regex)){   \n            var reet = reet.slice(0, -1);   \n            $(root).val(reet);   \n            }   \n        }  \n }\n</code></pre>\n\n<p>Then add the eventhandler:</p>\n\n<pre><code>onkeyup=\"numonly(this);\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>And one more example, which works great for me: </p>\n\n<pre><code>function validateNumber(event) {\n    var key = window.event ? event.keyCode : event.which;\n\n    if (event.keyCode == 8 || event.keyCode == 46\n     || event.keyCode == 37 || event.keyCode == 39) {\n        return true;\n    }\n    else if ( key &lt; 48 || key &gt; 57 ) {\n        return false;\n    }\n    else return true;\n};\n</code></pre>\n\n<p>Also attach to keypress event</p>\n\n<pre><code>$(document).ready(function(){\n    $('[id^=edit]').keypress(validateNumber);\n});\n</code></pre>\n\n<p>And html:</p>\n\n<pre><code>&lt;input type=\"input\" id=\"edit1\" value=\"0\" size=\"5\" maxlength=\"5\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>If you want to suggest to the device(maybe a mobile phone) between alpha or numeric you can use <code>&lt;input type=\"number\"&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I've searched long and hard for a good answer to this, and we desperately need <code>&lt;input type=\"number\"</code>, but short of that, these 2 are the most concise ways I could come up with:</p>\n\n<pre><code>&lt;input type=\"text\" \n       onkeyup=\"this.value=this.value.replace(/[^\\d]/,'')\"&gt;\n</code></pre>\n\n<p>If you dislike the non-accepted character showing for a split-second before being erased, the method below is my solution.  Note the numerous additional conditions, this is to avoid disabling all sorts of navigation and hotkeys.  If anyone knows how to compactify this, let us know!</p>\n\n<pre><code>&lt;input type=\"text\" \nonkeydown=\"return ( event.ctrlKey || event.altKey \n                    || (47&lt;event.keyCode &amp;&amp; event.keyCode&lt;58 &amp;&amp; event.shiftKey==false) \n                    || (95&lt;event.keyCode &amp;&amp; event.keyCode&lt;106)\n                    || (event.keyCode==8) || (event.keyCode==9) \n                    || (event.keyCode&gt;34 &amp;&amp; event.keyCode&lt;40) \n                    || (event.keyCode==46) )\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 62
                },
                {
                    "body": "<p>this is an improved function :</p>\n\n<pre><code>function validateNumber(evt) {\n  var theEvent = evt || window.event;\n  var key = theEvent.keyCode || theEvent.which;\n  if ((key &lt; 48 || key &gt; 57) &amp;&amp; !(key == 8 || key == 9 || key == 13 || key == 37 || key == 39 || key == 46) ){\n    theEvent.returnValue = false;\n    if (theEvent.preventDefault) theEvent.preventDefault();\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A short and sweet implementation using jQuery and replace() instead of looking at event.keyCode or event.which:</p>\n\n<pre><code>$('input.numeric').live('keyup', function(e) {\n  $(this).val($(this).val().replace(/[^0-9]/g, ''));\n});\n</code></pre>\n\n<p>Only small side effect that the typed letter appears momentarily and CTRL/CMD + A seems to behave a bit strange.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>HTML5 supports regexes, so you could use this:</p>\n\n<pre><code>&lt;input id=\"numbersOnly\" pattern=\"[0-9.]+\" type=\"text\"&gt;\n</code></pre>\n\n<p>Warning:  Some browsers don't support this yet.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>if you just want to only allow numbers 0-9 on a input,\nyou can just remove all non numeric characters, without messing about charCodes and arrows ctrl and others kinds of keyboars, and this fix a string pasted or draged to a input.</p>\n\n<p>this have a advantage that you don't have to worry about browser messy of keyEvents.\nyou can use this to allow letters and -,. but this cant deal with valid numbers like (0.1.4- is not a integer nor float), in this case this others guys solutions is better.</p>\n\n<p><a href=\"http://jsfiddle.net/6E689/\" rel=\"nofollow\">LIVE DEMO</a></p>\n\n<pre><code>&lt;input type=\"text\" id=\"number\" size=\"100\" value=\"type a number here\"&gt;\n</code></pre>\n\n<p>Javascript</p>\n\n<pre><code>addEvent(document.getElementById('number'),'keyup',validate);\naddEvent(document.getElementById('number'),'mouseover',validate);\n\nfunction validate(event){   \n    var charsAllowed=\"0123456789\";\n    var allowed;\n    for(var i=0;i&lt;this.value.length;i++){       \n        allowed=false;\n        for(var j=0;j&lt;charsAllowed.length;j++){\n            if( this.value.charAt(i)==charsAllowed.charAt(j) ){ allowed=true; }\n        }\n        if(allowed==false){ this.value = this.value.replace(this.value.charAt(i),\"\"); i--; }\n    }\n    return true;\n}\n</code></pre>\n\n<p>yes, regex is less work but not faster than this.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can also compare input value (which is treated as string by default) to itself forced as numeric, like: </p>\n\n<pre><code>if(event.target.value == event.target.value * 1) {\n    // returns true if input value is numeric string\n}\n</code></pre>\n\n<p>However, you need to bind that to event like keyup etc.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Just an other variant with jQuery using                 </p>\n\n<pre><code>$(\".numeric\").keypress(function() {\n    return (/\\d/.test(String.fromCharCode(event.which) ))\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can replace the Shurok function with:</p>\n\n<pre><code>$(\".numeric\").keypress(function() {\n    return (/[0123456789,.]/.test(String.fromCharCode(Event.which) ))\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I realize an old post but i thought this could help someone. Recently I had to limit a text box to just 5 decimal places. In my case ALSO the users input had to be less than 0.1</p>\n\n<pre><code>&lt;input type=\"text\" value=\"\" maxlength=7 style=\"width:50px\" id=\"fmargin\" class=\"formText\"  name=\"textfield\" onkeyup=\"return doCheck('#fmargin',event);\"&gt;\n</code></pre>\n\n<p>Here is the doCheck function</p>\n\n<pre><code>function doCheck(id,evt)\n{\n    var temp=parseFloat($(id).val());\n\n    if (isNaN(temp))\n        temp='0.0';\n    if (temp==0)\n        temp='0.0';\n\n    $(id).val(temp);\n}\n</code></pre>\n\n<p>Here is the same function except to force integer input</p>\n\n<pre><code>function doCheck(id,evt)\n{\n    var temp=parseInt($(id).val());\n\n    if (isNaN(temp))\n        temp='0';\n\n    $(id).val(temp);\n}\n</code></pre>\n\n<p>hope that helps someone</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Javascript code:</p>\n\n<pre><code>function validate(evt)\n\n {\n\n  if(evt.keyCode!=8)\n\n  {\n\n  var theEvent = evt || window.event;\n\n  var key = theEvent.keyCode || theEvent.which;\n\n  key = String.fromCharCode( key );\n\n\n  var regex = /[0-9]|\\./;\n\n  if( !regex.test(key) )\n {\n\n    theEvent.returnValue = false;\n\n    if(theEvent.preventDefault) theEvent.preventDefault();\n\n  }\n\n  }\n\n}\n</code></pre>\n\n<p>HTML code:</p>\n\n<pre><code>&lt;input type='text' name='price' value='0' onkeypress='validate(event)'/&gt;\n</code></pre>\n\n<p>works perfectly because backspace keycode is 8 and regex expression doesnt let it so its a easy way to bypass the bug :)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is the extended version of <a href=\"http://stackoverflow.com/a/469419/669677\">geowa4's solution</a>. Supports <code>min</code> and <code>max</code> attributes. If the number is out of range, the previous value will be shown.</p>\n\n<p><a href=\"http://jsbin.com/utikec\" rel=\"nofollow\">You can test it here.</a></p>\n\n<p>Usage: <code>&lt;input type=text class='number' maxlength=3 min=1 max=500&gt;</code></p>\n\n<pre><code>function number(e) {\nvar theEvent = e || window.event;\nvar key = theEvent.keyCode || theEvent.which;\nif(key!=13&amp;&amp;key!=9){//allow enter and tab\n  key = String.fromCharCode( key );\n  var regex = /[0-9]|\\./;\n  if( !regex.test(key)) {\n    theEvent.returnValue = false;\n    if(theEvent.preventDefault) theEvent.preventDefault();\n    }   \n  }\n}\n\n$(document).ready(function(){\n    $(\"input[type=text]\").filter(\".number,.NUMBER\").on({\n        \"focus\":function(e){\n         $(e.target).data('oldValue',$(e.target).val());\n            },\n        \"keypress\":function(e){\n                e.target.oldvalue = e.target.value;\n                number(e);\n            },\n        \"change\":function(e){\n            var t = e.target;\n            var min = $(t).attr(\"min\");\n            var max = $(t).attr(\"max\");\n            var val = parseInt($(t).val(),10);          \n            if( val&lt;min || max&lt;val)\n                {\n                    alert(\"Error!\");\n                    $(t).val($(t).data('oldValue'));\n                }\n\n            }       \n    });     \n});\n</code></pre>\n\n<p>If the inputs are dynamic use this:</p>\n\n<pre><code>$(document).ready(function(){\n    $(\"body\").on(\"focus\",\"input[type=text].number,.NUMBER\",function(e){\n        $(e.target).data('oldValue',$(e.target).val());\n    }); \n    $(\"body\").on(\"keypress\",\"input[type=text].number,.NUMBER\",function(e){\n        e.target.oldvalue = e.target.value;\n        number(e);\n    }); \n    $(\"body\").on(\"change\",\"input[type=text].number,.NUMBER\",function(e){\n        var t = e.target\n        var min = $(t).attr(\"min\");\n        var max = $(t).attr(\"max\");\n        var val = parseInt($(t).val());         \n        if( val&lt;min || max&lt;val)\n            {\n                alert(\"Error!\");\n                $(t).val($(t).data('oldValue'));\n            }\n    }); \n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The best way (allow ALL type of numbers - real negative, real positive, iinteger negative, integer positive) is:</p>\n\n<pre><code>$(input).keypress(function (evt){\n    var theEvent = evt || window.event;\n    var key = theEvent.keyCode || theEvent.which;\n    key = String.fromCharCode( key );\n    var regex = /[-\\d\\.]/; // dowolna liczba (+- ,.) :)\n    var objRegex = /^-?\\d*[\\.]?\\d*$/;\n    var val = $(evt.target).val();\n    if(!regex.test(key) || !objRegex.test(val+key) || \n            !theEvent.keyCode == 46 || !theEvent.keyCode == 8) {\n        theEvent.returnValue = false;\n        if(theEvent.preventDefault) theEvent.preventDefault();\n    };\n}); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>JavaScript</p>\n\n<pre><code>function validateNumber(evt) {\n    var e = evt || window.event;\n    var key = e.keyCode || e.which;\n\n    if (!e.shiftKey &amp;&amp; !e.altKey &amp;&amp; !e.ctrlKey &amp;&amp;\n    // numbers   \n    key &gt;= 48 &amp;&amp; key &lt;= 57 ||\n    // Numeric keypad\n    key &gt;= 96 &amp;&amp; key &lt;= 105 ||\n    // Backspace and Tab and Enter\n    key == 8 || key == 9 || key == 13 ||\n    // Home and End\n    key == 35 || key == 36 ||\n    // left and right arrows\n    key == 37 || key == 39 ||\n    // Del and Ins\n    key == 46 || key == 45) {\n        // input is VALID\n    }\n    else {\n        // input is INVALID\n        e.returnValue = false;\n        if (e.preventDefault) e.preventDefault();\n    }\n}\n</code></pre>\n\n<p>additional you could add comma, period and minus (,.-) </p>\n\n<pre><code>  // comma, period and minus, . on keypad\n  key == 190 || key == 188 || key == 109 || key == 110 ||\n</code></pre>\n\n<p>HTML</p>\n\n<pre><code>&lt;input type=\"text\" onkeydown=\"validateNumber(event);\"/ &gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I tweaked it some, but it needs a lot more work to conform to the JavaScript weirding way.</p>\n\n<pre><code>function validateNumber(myEvent,decimal) {\n    var e = myEvent || window.event;\n    var key = e.keyCode || e.which;\n\n    if (e.shiftKey) {\n    } else if (e.altKey) {\n    } else if (e.ctrlKey) {\n    } else if (key === 48) { // 0\n    } else if (key === 49) { // 1\n    } else if (key === 50) { // 2\n    } else if (key === 51) { // 3\n    } else if (key === 52) { // 4\n    } else if (key === 53) { // 5\n    } else if (key === 54) { // 6\n    } else if (key === 55) { // 7\n    } else if (key === 56) { // 8\n    } else if (key === 57) { // 9\n\n    } else if (key === 96) { // Numeric keypad 0\n    } else if (key === 97) { // Numeric keypad 1\n    } else if (key === 98) { // Numeric keypad 2\n    } else if (key === 99) { // Numeric keypad 3\n    } else if (key === 100) { // Numeric keypad 4\n    } else if (key === 101) { // Numeric keypad 5\n    } else if (key === 102) { // Numeric keypad 6\n    } else if (key === 103) { // Numeric keypad 7\n    } else if (key === 104) { // Numeric keypad 8\n    } else if (key === 105) { // Numeric keypad 9\n\n    } else if (key === 8) { // Backspace\n    } else if (key === 9) { // Tab\n    } else if (key === 13) { // Enter\n    } else if (key === 35) { // Home\n    } else if (key === 36) { // End\n    } else if (key === 37) { // Left Arrow\n    } else if (key === 39) { // Right Arrow\n    } else if (key === 190 &amp;&amp; decimal) { // decimal\n    } else if (key === 110 &amp;&amp; decimal) { // period on keypad\n    // } else if (key === 188) { // comma\n    } else if (key === 109) { // minus\n    } else if (key === 46) { // Del\n    } else if (key === 45) { // Ins\n    } else {\n        e.returnValue = false;\n        if (e.preventDefault) e.preventDefault();\n    }\n}\n</code></pre>\n\n<p>And then it's called via:</p>\n\n<pre><code>$('input[name=Price]').keydown(function(myEvent) {\n    validateNumber(myEvent,true);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0 Transitional//EN\"&gt;\n&lt;HTML&gt;\n&lt;HEAD&gt;\n&lt;TITLE&gt;Allow Only Numbers\n&lt;/HEAD&gt;\n\n&lt;BODY&gt;\n&lt;script language=\"JavaScript\"&gt;\nfunction onlyNumbers(evt)\n{\nvar e = event || evt; // for trans-browser compatibility\nvar charCode = e.which || e.keyCode;\n\nif (charCode &gt; 31 &amp;&amp; (charCode &lt; 48 || charCode &gt; 57))\n    return false;\n\nreturn true;\n\n}\n&lt;/script&gt;\n&lt;input type=\"text\" onkeypress=\"return onlyNumbers();\"&gt;\n&lt;/BODY&gt;\n&lt;/HTML&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>another easy way with jquery:</p>\n\n<pre><code>     $('.Numeric').bind('keydown',function(e){\n             if (e.which &lt; 48 ||  e.which &gt; 57)\n                return false;\n                return true;\n       })           \n</code></pre>\n\n<p>now just set your each inputs class to Numeric, like:</p>\n\n<pre><code>     &lt;input type=\"text\" id=\"inp2\" name=\"inp2\" class='Numeric' /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This removes any bad character instantly, allows only 1 dot, is short and allows backspace etc.</p>\n\n<pre><code>$('.numberInput').keyup(function () {\n    s=$(this).val();\n    if (!/^\\d*\\.?\\d*$/.test(s)) $(this).val(s.substr(0,s.length-1));\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>so simple....\n<strong>// In Javascript Function (can use HTML or PHP).</strong></p>\n\n<pre><code>function isNumberKey(evt){\n    var charCode = (evt.which) ? evt.which : evt.keyCode;\n    if (charCode &gt; 31 &amp;&amp; (charCode &lt; 48 || charCode &gt; 57))\n        return false;\n    return true;\n}\n</code></pre>\n\n<p><strong>In Your Form Input :</strong></p>\n\n<pre><code>&lt;input type=text name=form_number size=20 maxlength=12 onkeypress='return isNumberKey(event)'&gt;\n</code></pre>\n\n<p>With input max. (these above, is allow for 12 Digit number)</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>How about this DOM...</p>\n\n<pre><code>&lt;input type = \"text\" onkeydown = \"validate(event)\"/&gt;\n</code></pre>\n\n<p>...and this script?</p>\n\n<pre><code>validate = function(evt)\n{\n    if ([8, 46, 37, 39, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 35, 36].indexOf(evt.keyCode || evt.which) == -1)\n    {\n        evt.returnValue = false;\n        if(evt.preventDefault){evt.preventDefault();}\n    }\n}\n</code></pre>\n\n<p>...OR this script, without indexOf, using 2 for's...</p>\n\n<pre><code>validate = function(evt)\n{\n    var CharValidate = new Array(\"08\", \"046\", \"039\", \"948\", \"235\");\n    var number_pressed = false;\n    for (i = 0; i &lt; 5; i++)\n    {\n        for (Ncount = 0; Ncount &lt; parseInt(CharValidate[i].substring(0, 1)) + 1; Ncount++)\n        {\n            if ((evt.keyCode || evt.which) == parseInt(CharValidate[i].substring(1, CharValidate[i].lenght)) + Ncount)\n            {\n                number_pressed = true;\n            }\n        }\n    }\n    if (number_pressed == false)\n    {\n        evt.returnValue = false;\n        if(evt.preventDefault){evt.preventDefault();}\n    }\n}\n</code></pre>\n\n<p>I used the onkeydown attribute instead of onkeypress because the onkeydown attribute is checked before onkeypress attribute. The problem would be in the google chrome browser.</p>\n\n<p>With the attribute \"onkeypress\", TAB would be uncontrollable with \"preventDefault\" on google chrome, however, with the attribute \"onkeydown\", TAB becomes controllable!</p>\n\n<p>ASCII Code for TAB => 9</p>\n\n<p>The first script have less code than the second, however, the array of ASCII characters must have all the keys.</p>\n\n<p>The second script is much bigger than the first, but the array does not need all keys, the first digit in each position of the array is the number of times each position will be readed. For each reading, will be incremented 1 to the next one. For example:\n<br>\n<br>\n<br>\n<br>\n<br>\nNCount = 0</p>\n\n<p>48 + NCount = 48</p>\n\n<p>NCount + +</p>\n\n<p>48 + NCount = 49</p>\n\n<p>NCount + +</p>\n\n<p>...</p>\n\n<p>48 + NCount = 57\n<br>\n<br>\n<br>\n<br>\n<br>\nIn the case of numerical keys are only 10 (0 - 9), but if they were 1 million would not make sense to create an array with all these keys.</p>\n\n<p>ASCII Codes: </p>\n\n<ul>\n<li>8 ==> (Backspace);</li>\n<li>46 => (Delete);</li>\n<li>37 => (left arrow);</li>\n<li>39 => (right arrow);</li>\n<li>48 - 57 => (numbers);</li>\n<li>36 => (home);</li>\n<li>35 => (end);</li>\n</ul>\n\n<p>I'm gonna sleep now!!</p>\n\n<p>This is my first post on StackOverflow :P </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Call this function when ready to validate what ever. I used a textbox here</p>\n\n<p>In my HTML:</p>\n\n<pre><code>&lt;input type=\"button\" value=\"Check IT!\" onclick=\"check(document.getElementById('inputboxToValidate').value);\" /&gt;\n</code></pre>\n\n<p>In my javascript:</p>\n\n<pre><code>function check(num){\n    var onlynumbers = true\n    for (var i = 0; i &lt; (num.length - 1); i++) {\n        if (num.substr(i, 1) != \"0\" || num.substr(i, 1) != \"1\" || num.substr(i, 1) != \"2\" || num.substr(i, 1) != \"3\" || num.substr(i, 1) != \"4\" || num.substr(i, 1) != \"5\" || num.substr(i, 1) != \"6\" || num.substr(i, 1) != \"7\" || num.substr(i, 1) != \"8\" || num.substr(i, 1) != \"9\") {\n            alert(\"please make sure that only numbers have been entered in the Quantaty box\");\n            onlynumbers = false\n        }\n    }\n    if (onlynumbers == true) {\n        //Exicute Code\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I opted to use a combination of the two answers mentioned here i.e.</p>\n\n<p><code>&lt;input type=\"number\" /&gt;</code></p>\n\n<p>and </p>\n\n<pre><code>function isNumberKey(evt){\n    var charCode = (evt.which) ? evt.which : evt.keyCode\n    return !(charCode &gt; 31 &amp;&amp; (charCode &lt; 48 || charCode &gt; 57));\n}\n</code></pre>\n\n<p><code>&lt;input type=\"text\" onkeypress=\"return isNumberKey(event);\"&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<pre><code>&lt;input name=\"amount\" type=\"text\" value=\"Only number in here\"/&gt; \n\n&lt;script&gt;\n    $('input[name=amount]').keyup(function(){\n        $(this).val($(this).val().replace(/[^\\d]/,''));\n    });\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Regular expressions and the match function can work well for this situation.  For instance, I used the following to validate 4 input boxes that served as coordinates on a graph.  It works reasonably well.</p>\n\n<pre><code>function validateInput() {\n   if (jQuery('#x1').val().toString().match(/^[-]?[0-9]+[\\.]?[0-9]*$/) == null || \n       jQuery('#x2').val().toString().match(/^[-]?[0-9]+[\\.]?[0-9]*$/) == null || \n       jQuery('#y1').val().toString().match(/^[-]?[0-9]+[\\.]?[0-9]*$/) == null ||\n       jQuery('#y2').val().toString().match(/^[-]?[0-9]+[\\.]?[0-9]*$/) == null) {\n         alert(\"A number must be entered for each coordinate, even if that number is 0. Please try again.\");\n         location.reload();\n   }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>input type=\"number\"</code> is html5 attribute.</p>\n\n<p>In other case this will help you.</p>\n\n<pre><code>function isNumberKey(evt){\n    var charCode = (evt.which) ? evt.which : evt.keyCode\n    if (charCode &gt; 31 &amp;&amp; (charCode &lt; 48 || charCode &gt; 57))\n        return false;\n    return true;\n}\n\n&lt;input type=\"number\" name=\"somecode\" onkeypress=\"return isNumberKey(event)\"/&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>&lt;input id=\"numbers\" pattern=\"[0-9.]+\" type=\"number\"&gt;\n</code></pre>\n\n<p>you can use pattern for this. <a href=\"http://javacourseblog.blogspot.in/2013/12/how-to-make-user-friendly-interface-for.html\" rel=\"nofollow\">here you can see the complete mobile website interface tips</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function digitsOnly(obj) {\n   obj.value = obj.value.replace(/\\D/g, \"\");\n}\n</code></pre>\n\n<p>and in the element</p>\n\n<pre><code>&lt;input type=\"text\" onkeyup=\"digitsOnly(this);\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yes, HTML5 does. Try this code (<a href=\"http://www.w3schools.com/html/tryit.asp?filename=tryhtml5_input_type_number\" rel=\"nofollow\">w3school</a>):</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;form action=\"\"&gt;\n  Quantity (between 1 and 5): &lt;input type=\"number\" name=\"quantity\" min=\"1\" max=\"5\" /&gt;\n  &lt;input type=\"submit\" /&gt;\n&lt;/form&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use the jquery.inputmask.js library you can download from NUGET.\nMore specifically I use jquery.inputmask.regex.extensions.js that comes with it.\nI give the input element a class, in this case reg;</p>\n\n<pre><code>&lt;input type=\"number\" id=\"WorkSrqNo\" name=\"WorkSrqNo\" maxlength=\"6\" class=\"reg\"/&gt;\n</code></pre>\n\n<p>and then in javascript I set the mask;</p>\n\n<pre><code>var regexDigitsOnly = \"^[0-9]*$\";\n$('input.reg').inputmask('Regex', { regex: regexDigitsOnly });\n</code></pre>\n\n<p>This is for digits only but you can alter regex to accept \".\"\nBy using this it is impossible to enter characters that are not digits.\nIt is useful to have these inputmask libraries for general formatting.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are okay with using Plugins, here is one I tested. Works well except for paste.</p>\n\n<p><a href=\"https://github.com/joshuadeleon/NumericInput\" rel=\"nofollow\">Numeric Input</a></p>\n\n<p>Here is a Demo <a href=\"http://jsfiddle.net/152sumxu/2\" rel=\"nofollow\">http://jsfiddle.net/152sumxu/2</a></p>\n\n<p>Code below (Lib pasted in-line)\n    \n        Demo of the plug-in \n        \n            \n                Any Number\n                \n                    \n                \n            \n        \n    </p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n//  Author: Joshua De Leon - File: numericInput.js - Description: Allows only numeric input in an element. - If you happen upon this code, enjoy it, learn from it, and if possible please credit me: www.transtatic.com\n(function(b){var c={allowFloat:false,allowNegative:false};b.fn.numericInput=function(e){var f=b.extend({},c,e);var d=f.allowFloat;var g=f.allowNegative;this.keypress(function(j){var i=j.which;var h=b(this).val();if(i&gt;0&amp;&amp;(i&lt;48||i&gt;57)){if(d==true&amp;&amp;i==46){if(g==true&amp;&amp;a(this)==0&amp;&amp;h.charAt(0)==\"-\"){return false}if(h.match(/[.]/)){return false}}else{if(g==true&amp;&amp;i==45){if(h.charAt(0)==\"-\"){return false}if(a(this)!=0){return false}}else{if(i==8){return true}else{return false}}}}else{if(i&gt;0&amp;&amp;(i&gt;=48&amp;&amp;i&lt;=57)){if(g==true&amp;&amp;h.charAt(0)==\"-\"&amp;&amp;a(this)==0){return false}}}});return this};function a(d){if(d.selectionStart){return d.selectionStart}else{if(document.selection){d.focus();var f=document.selection.createRange();if(f==null){return 0}var e=d.createTextRange(),g=e.duplicate();e.moveToBookmark(f.getBookmark());g.setEndPoint(\"EndToStart\",e);return g.text.length}}return 0}}(jQuery));\n\n$(function() {\n   $(\"#anyNumber\").numericInput({ allowFloat: true, allowNegative: true });\n});\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;script&gt;\nfunction onlyNumber(id){ \n    var DataVal = document.getElementById(id).value;\n    document.getElementById(id).value = DataVal.replace(/[^0-9]/g,'');\n}\n&lt;/script&gt;\n&lt;input type=\"text\" id=\"1\" name=\"1\" onChange=\"onlyNumber(this.id);\"&gt;\n</code></pre>\n\n<p>And if you wanna update value after press key, you can change <strong>onChange</strong>\nfor <strong>onKeypress</strong>, <strong>onKeyDown</strong> or <strong>onKeyup</strong>. <em>But event onKeypress don't running\nin any browsers.</em></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Lots of great answers here but thought I'd contribute this simple one which allows for exactly one decimal but no more:</p>\n\n<pre><code>&lt;input type=\"text\" oninput=\"this.value = this.value.replace(/[^0-9.]/g, ''); this.value = this.value.replace(/(\\..*)\\./g, '$1');\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Any quick way to set an HTML text input (<code>&lt;input type=text /&gt;</code>) to only allow numeric keystrokes(plus '.')?</p>\n",
            "last_activity_date": 1425405955,
            "question_id": 469357,
            "score": 178,
            "tags": [
                "javascript",
                "html",
                "dhtml"
            ],
            "title": "HTML Text Input allow only Numeric input"
        },
        {
            "answer_count": 30,
            "answers": [
                {
                    "body": "<p>Don't quote me on this but I think that you need to use a string for your property name, like <code>o[e.toString()]</code>, and then convert it back when you push it.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>That's because <code>0</code> is a falsy value in JavaScript.</p>\n\n<p><code>this[i]</code> will be falsy if the value of the array is 0 or any other falsy value.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>Array.prototype.getUnique = function() {\n    var o = {}, a = []\n    for (var i = 0; i &lt; this.length; i++) o[this[i]] = 1\n    for (var e in o) a.push(e)\n    return a\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There is no need to use 2 <code>for</code> loops, just put one small <code>if</code> statement inside loop</p>\n\n<pre><code>Array.prototype.getUnique = function(){\n   var u = {}, a = [];\n   for(var i = 0, l = this.length; i &lt; l; ++i){\n      if(u.hasOwnProperty(this[i])) {\n         continue;\n      }\n      a.push(this[i]);\n      u[this[i]] = 1;\n   }\n   return a;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 161
                },
                {
                    "body": "<p>If you're using Prototype framework there is no need to do 'for' loops, you can use <a href=\"http://www.prototypejs.org/api/array/uniq\">http://www.prototypejs.org/api/array/uniq</a> like this:</p>\n\n<pre><code>var a = Array.uniq();  \n</code></pre>\n\n<p>Which will produce a duplicate array with no duplicates. I came across your question searching a method to count distinct array records so after </p>\n\n<blockquote>\n  <p>uniq()</p>\n</blockquote>\n\n<p>I used </p>\n\n<blockquote>\n  <p>size()</p>\n</blockquote>\n\n<p>and there was my simple result. \np.s. Sorry if i misstyped something</p>\n\n<p>edit: if you want to escape undefined records you may want to add </p>\n\n<blockquote>\n  <p>compact() </p>\n</blockquote>\n\n<p>before, like this:</p>\n\n<pre><code>var a = Array.compact().uniq();  \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>You can also use <a href=\"http://underscorejs.org/\">underscore.js</a>.</p>\n\n<pre><code>_.uniq([1, 2, 1, 3, 1, 4]);\n</code></pre>\n\n<p>which will return:</p>\n\n<pre><code>[1, 2, 3, 4]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>You can also use jQuery</p>\n\n<pre><code>var a = [1,5,1,6,4,5,2,5,4,3,1,2,6,6,3,3,2,4];\n\n// note: jQuery's filter params are opposite of javascript's native implementation :(\nvar unique = $.makeArray($(a).filter(function(i,itm){ \n    // note: 'index', not 'indexOf'\n    return i == $(a).index(itm);\n}));\n\n// unique: [1, 5, 6, 4, 2, 3]\n</code></pre>\n\n<p>Originally answered at: <a href=\"http://stackoverflow.com/questions/5381621/jquery-function-to-get-all-unique-elements-from-an-array\">jQuery function to get all unique elements from an array?</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I have since found a nice method that uses jQuery</p>\n\n<pre><code>arr = $.grep(arr, function(v, k){\n    return $.inArray(v ,arr) === k;\n});\n</code></pre>\n\n<p>Note: This code was pulled from <a href=\"http://paulirish.com/2010/duck-punching-with-jquery/\">Paul Irish's duck punching post</a> - I forgot to give credit :P</p>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>This prototype <code>getUnique</code> is not totally correct, because if i have a Array like: <code>[\"1\",1,2,3,4,1,\"foo\"]</code> it will return <code>[\"1\",\"2\",\"3\",\"4\"]</code> and <code>\"1\"</code> is string and <code>1</code> is a integer; they are different.</p>\n\n<p>Here is a correct solution:</p>\n\n<pre><code>Array.prototype.unique = function(a){\n    return function(){ return this.filter(a) }\n}(function(a,b,c){ return c.indexOf(a,b+1) &lt; 0 });\n</code></pre>\n\n<p>using:</p>\n\n<pre><code>var foo;\nfoo = [\"1\",1,2,3,4,1,\"foo\"];\nfoo.unique();\n</code></pre>\n\n<p>The above will produce <code>[\"1\",2,3,4,1,\"foo\"]</code>.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>From <a href=\"http://www.shamasis.net/2009/09/fast-algorithm-to-find-unique-items-in-javascript-array/\" rel=\"nofollow\"><strong>Shamasis Bhattacharya</strong>'s blog</a> (O(2n) time complexity) :</p>\n\n<pre><code>Array.prototype.unique = function() {\n    var o = {}, i, l = this.length, r = [];\n    for(i=0; i&lt;l;i+=1) o[this[i]] = this[i];\n    for(i in o) r.push(o[i]);\n    return r;\n};\n</code></pre>\n\n<p>From <a href=\"http://paulirish.com/2010/duck-punching-with-jquery/\" rel=\"nofollow\"><strong>Paul Irish</strong>'s blog</a>: improvement on JQuery <a href=\"http://api.jquery.com/jQuery.unique/\" rel=\"nofollow\"><code>.unique()</code></a> :</p>\n\n<pre><code>(function($){\n\n    var _old = $.unique;\n\n    $.unique = function(arr){\n\n        // do the default behavior only if we got an array of elements\n        if (!!arr[0].nodeType){\n            return _old.apply(this,arguments);\n        } else {\n            // reduce the array to contain no dupes via grep/inArray\n            return $.grep(arr,function(v,k){\n                return $.inArray(v,arr) === k;\n            });\n        }\n    };\n})(jQuery);\n\n// in use..\nvar arr = ['first',7,true,2,7,true,'last','last'];\n$.unique(arr); // [\"first\", 7, true, 2, \"last\"]\n\nvar arr = [1,2,3,4,5,4,3,2,1];\n$.unique(arr); // [1, 2, 3, 4, 5]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>With <em>JavaScript 1.6</em> / <em>ECMAScript 5</em> you can use the native <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/filter\" rel=\"nofollow\" title=\"filter\"><code>filter</code></a> method of an Array in the following way to get an array with unique values:</p>\n\n<pre><code>function onlyUnique(value, index, self) { \n    return self.indexOf(value) === index;\n}\n\n// usage example:\nvar a = ['a', 1, 'a', 2, '1'];\nvar unique = a.filter( onlyUnique ); // returns ['a', 1, 2, '1']\n</code></pre>\n\n<p><strong>Update:</strong> added more detailed explanation:</p>\n\n<p>What this does, is:</p>\n\n<p>The native method <code>filter</code> will loop through the array and leave only those entries that pass the given callback function <code>onlyUnique</code>.</p>\n\n<p><code>onlyUnique</code> checks, if the given value is the first occurring. If not, it must be a duplicate and will not be copied.</p>\n\n<p>This solution works without any extra library like jQuery or prototype.js.</p>\n\n<p>It works for arrays with mixed value types too.</p>\n\n<p><strong>Update2:</strong></p>\n\n<p>For old Browsers (&lt;ie9), that do not support the native methods <code>filter</code> and <code>indexOf</code> you can find work arounds in the MDN documentation for <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/filter\" rel=\"nofollow\" title=\"filter\">filter</a> and <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf\" rel=\"nofollow\">indexOf</a>.</p>\n\n<p>If you want to keep the last occurrence of a value, simple replace <code>indexOf</code> by <code>lastIndexOf</code>. </p>\n",
                    "is_accepted": false,
                    "score": 239
                },
                {
                    "body": "<p>Without extending Array.prototype (it is said to be a bad practice) or using jquery/underscore, you can simply <code>filter</code> the array.</p>\n\n<p>By keeping last occurrence:</p>\n\n<pre><code>    function arrayLastUnique(array) {\n        return array.filter(function (a, b, c) {\n            // keeps last occurrence\n            return c.indexOf(a, b + 1) &lt; 0;\n        });\n    },\n</code></pre>\n\n<p>or first occurrence:</p>\n\n<pre><code>    function arrayFirstUnique(array) {\n        return array.filter(function (a, b, c) {\n            // keeps first occurrence\n            return c.indexOf(a) === b;\n        });\n    },\n</code></pre>\n\n<p>Well, it's only javascript ECMAScript 5+, which means only IE9+, but it's nice for a development in native HTML/JS (Windows Store App, Firefox OS, Sencha, Phonegap, Titanium, ...).</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>This will work.</p>\n\n<pre><code>function getUnique(a) {\n  var b = [a[0]], i, j, tmp;\n  for (i = 1; i &lt; a.length; i++) {\n    tmp = 1;\n    for (j = 0; j &lt; b.length; j++) {\n      if (a[i] == b[j]) {\n        tmp = 0;\n        break;\n      }\n    }\n    if (tmp) {\n      b.push(a[i]);\n    }\n  }\n  return b;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If anyone using <a href=\"http://knockoutjs.com/\" rel=\"nofollow\">knockoutjs</a></p>\n\n<pre><code>ko.utils.arrayGetDistinctValues()\n</code></pre>\n\n<p>BTW have look at all <code>ko.utils.array*</code> utilities.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'm not sure why Gabriel Silveira wrote the function that way but a simpler form that works for me just as well and without the minification is:</p>\n\n<pre><code>Array.prototype.unique = function() {\n  return this.filter(function(value, index, array) {\n    return array.indexOf(value, index + 1) &lt; 0;\n  });\n};\n</code></pre>\n\n<p>or in CoffeeScript:</p>\n\n<pre><code>Array.prototype.unique = -&gt;\n  this.filter( (value, index, array) -&gt;\n    array.indexOf(value, index + 1) &lt; 0\n  )\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If order is not important then we can make an hash and get the keys to make unique array.</p>\n\n<pre><code>var ar = [1,3,4,5,5,6,5,6,2,1];\nvar uarEle = {};\nlinks.forEach(function(a){ uarEle[a] = 1; });\nvar uar = keys(uarEle)\n</code></pre>\n\n<p>uar will be having the unique array elements.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I found that serializing they hash key helped me get this working for objects.</p>\n\n<pre><code>Array.prototype.getUnique = function() {\n        var hash = {}, result = [], key; \n        for ( var i = 0, l = this.length; i &lt; l; ++i ) {\n            key = JSON.stringify(this[i]);\n            if ( !hash.hasOwnProperty(key) ) {\n                hash[key] = true;\n                result.push(this[i]);\n            }\n        }\n        return result;\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can also use <a href=\"http://sugarjs.com/\" rel=\"nofollow\">sugar.js:</a></p>\n\n<pre><code>[1,2,2,3,1].unique() // =&gt; [1,2,3]\n\n[{id:5, name:\"Jay\"}, {id:6, name:\"Jay\"}, {id: 5, name:\"Jay\"}].unique('id') \n  // =&gt; [{id:5, name:\"Jay\"}, {id:6, name:\"Jay\"}]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Building on other answers, here's another variant that takes an optional flag to choose a strategy (keep first occurrence or keep last):</p>\n\n<p><strong>Without extending</strong> <code>Array.prototype</code>  </p>\n\n<pre><code>function unique(arr, keepLast) {\n  return arr.filter(function (value, index, array) {\n    return keepLast ? array.indexOf(value, index + 1) &lt; 0 : array.indexOf(value) === index;\n  });\n};\n\n// Usage\nunique(['a', 1, 2, '1', 1, 3, 2, 6]); // -&gt; ['a', 1, 2, '1', 3, 6]\nunique(['a', 1, 2, '1', 1, 3, 2, 6], true); // -&gt; ['a', '1', 1, 3, 2, 6]\n</code></pre>\n\n<p><strong>Extending</strong> <code>Array.prototype</code></p>\n\n<pre><code>Array.prototype.unique = function (keepLast) {\n  return this.filter(function (value, index, array) {\n    return keepLast ? array.indexOf(value, index + 1) &lt; 0 : array.indexOf(value) === index;\n  });\n};\n\n// Usage\n['a', 1, 2, '1', 1, 3, 2, 6].unique(); // -&gt; ['a', 1, 2, '1', 3, 6]\n['a', 1, 2, '1', 1, 3, 2, 6].unique(true); // -&gt; ['a', '1', 1, 3, 2, 6]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>Array.prototype.unique = function() {\n    var a = [],k = 0,e;\n    for(k=0;e=this[k];k++)\n      if(a.indexOf(e)==-1)\n           a.push(e);\n    return a;\n}\n[1,2,3,4,33,23,2,3,22,1].unique(); // return [1,2,3,4,33,23,22]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Yet another answer, just because I wrote one for my specific use case.  I happened to be sorting the array anyway, and given I'm sorting I can use that to deduplicate.</p>\n\n<p>Note that my sort deals with my specific data types, you might need a different sort depending on what sort of elements you have.</p>\n\n<pre><code>var sortAndDedup = function(array) {\n  array.sort(function(a,b){\n    if(isNaN(a) &amp;&amp; isNaN(b)) { return a &gt; b ? 1 : (a &lt; b ? -1 : 0); }\n    if(isNaN(a)) { return 1; }\n    if(isNaN(b)) { return -1; }\n    return a-b;\n  });\n\n  var newArray = [];\n  var len = array.length;\n  for(var i=0; i&lt;len; i++){\n    if(i === 0 || array[i] != array[i-1]){\n      newArray.push(array[i]);\n    }\n  }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I think many of the answers here will not be useful to beginners. If de-duping an array is difficult, will they really know about the prototype chain, or even jQuery?</p>\n\n<p>Here is what I recommend...</p>\n\n<pre><code>// this creates an example array named cars\nvar cars=[\"Volvo\",\"Jeep\",\"Ford\",\"Volvo\",\"Lincoln\",\"Ford\",\"Mazda\",\"Mazda\",\"Nissan\",\"Jaguar\",\"Nissan\",\"Mercury\",\"Mercury\"];\n// the code inside of here runs only when the cars array contains\n// anything, otherwise it gets skipped and you can do something else,\n// like deliver an error message, etc. (inside an else statement)\nif (cars.length&gt;0){\n    // this creates an empty array named result\n    var result=[];\n    // now we go through the whole cars array, one item at a time\n    for (var i=0; i&lt;cars.length; i++){\n        // the code inside of here runs only if the current\n        // cars item the loop is on does NOT exist in\n        // the result array - a.k.a. prevent duplicates\n        if (result.indexOf(cars[i])===-1){\n            // now we take the current cars item the loop\n            // is on and copy it to the end of the result array\n            result.push(cars[i]);\n        }\n    }\n    // optionally, if you need the original array items\n    // to be de-duplicated and cannot use a new array\n    // like result, just copy the value of result back\n    // over to cars, like this...\n    cars = result;\n}\n</code></pre>\n\n<p>Now, right after you get the data you want out of <em>result</em> (as in <code>cars = result</code>), if you feel like it you can set the <em>result</em> array as null, undefined, etc. to pevent its data from going anywhere else by accident.</p>\n\n<pre><code>result = null;\n</code></pre>\n\n<p>Or you could even delete the result array to \"play it safe\" (so you think), but first you must do something less safe to begin with - make it global. Not recommended, but worth understanding. Remove the keyword <code>var</code> from where the array was created. So instead of...</p>\n\n<pre><code>...\n    var result=[];\n    ...\n</code></pre>\n\n<p>Now it should say...</p>\n\n<pre><code>...\n    result=[];\n    ...\n</code></pre>\n\n<p>Then delete the result array after you're done using it...</p>\n\n<pre><code>    delete result;\n</code></pre>\n\n<p>You might want to <a href=\"http://perfectionkills.com/understanding-delete/\" rel=\"nofollow\" title=\"Understanding Delete\">read about the weirdness of this</a>.</p>\n\n<p>Another strategy is to wrap it all up into a function and be done with it.</p>\n\n<pre><code>function deduplicate(data){\n    if (data.length&gt;0){\n        var result=[];\n        for (var i=0; i&lt;data.length; i++){\n            if (result.indexOf(data[i])===-1){\n                result.push(data[i]);\n            }\n        }\n        return result;\n    }\n}\n</code></pre>\n\n<p>In this case, there's no need to set <em>result</em> to <code>null</code> or <code>delete</code> it. In fact, we're using it to <em>return a value</em> to where the function was <em>called</em>. Then you assign its value to <em>cars</em> outside of the function.</p>\n\n<p>So you would get rid of the duplicates in your original array like this.</p>\n\n<pre><code>cars = deduplicate(cars);\n</code></pre>\n\n<p>The <code>deduplicate(cars)</code> part <strong>becomes</strong> the thing we named <em>result</em> when the function completes.</p>\n\n<p>Just pass it the name of any array you like.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The simplest, and <a href=\"http://jsperf.com/unique-in-array\">fastest</a> (in Chrome) way of doing this:</p>\n\n<pre><code>Array.prototype.unique = function() {\n    var a = [];\n    for (var i=0, l=this.length; i&lt;l; i++)\n        if (a.indexOf(this[i]) === -1)\n            a.push(this[i]);\n    return a;\n}\n</code></pre>\n\n<p>Simply goes through every item in the array, tests if that item is already in the list, and if it's not, push to the array that gets returned.</p>\n\n<p>According to jsPerf, this function is <a href=\"http://jsperf.com/unique-in-array\">the fastest of the ones I could find anywhere</a> - feel free to add your own though.</p>\n\n<p>The non-prototype version:</p>\n\n<pre><code>function uniques(arr) {\n    var a = [];\n    for (var i=0, l=arr.length; i&lt;l; i++)\n        if (a.indexOf(arr[i]) === -1 &amp;&amp; arr[i] !== '')\n            a.push(arr[i]);\n    return a;\n}\n</code></pre>\n\n<h2>Sorting</h2>\n\n<p>When also needing to sort the array, the following is the fastest:</p>\n\n<pre><code>Array.prototype.sortUnique = function() {\n    this.sort();\n    var last_i;\n    for (var i=0;i&lt;this.length;i++)\n        if ((last_i = this.lastIndexOf(this[i])) !== i)\n            this.splice(i+1, last_i-i);\n    return this;\n}\n</code></pre>\n\n<p>or non-prototype:</p>\n\n<pre><code>function sortUnique(arr) {\n    arr.sort();\n    var last_i;\n    for (var i=0;i&lt;arr.length;i++)\n        if ((last_i = arr.lastIndexOf(arr[i])) !== i)\n            arr.splice(i+1, last_i-i);\n    return arr;\n}\n</code></pre>\n\n<p>This is also <a href=\"http://jsperf.com/unique-in-array\">faster than the above method</a> in most non-chrome browsers.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I looked at Joeytje50's code on jsperf who has compared a number of alternatives. His code had many minor typos, which made a difference in the performance and the correctness.</p>\n\n<p>More importantly, he is testing on a very small array. I made an array with 1000 integers. Each integer was 100 times a random integer between 0 and 1000. This makes for about 1000/e = 368 duplicates on the average. The results are at <a href=\"http://jsperf.com/unique-in-array/8\" rel=\"nofollow\">jsperf</a>.</p>\n\n<p>This is a much more realistic scenario of where efficiency might be needed. These changes make dramatic changes in the claims (specifically the code touted as fastest is nowhere near fast). The obvious winners are where hashing techniques are used, with the best one being</p>\n\n<pre><code>Array.prototype.getUnique3 = function(){\n   var u = Object.create(null), a = [];\n   for(var i = 0, l = this.length; i &lt; l; ++i){\n      if(this[i] in u) continue;\n      a.push(this[i]);\n      u[this[i]] = 1;\n   }\n   return a.length;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Shortest with ES6 Magic: <code>unique = function(a){return [...(new Set(a))];}</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h3>This handles null, undefined properly, except NaN</h3>\n\n<pre><code>Array.prototype.uniq = function () {\n  for(var i = this.length - 1; i &gt; 0; i--) {\n    var j = this.indexOf(this[i]);\n    if(j != -1 &amp;&amp; j != i) this.splice(i, 1);\n  } \n  return this;\n}\n</code></pre>\n\n<h2>the rest are interesting, based on your need</h2>\n\n<h3>This handles null, NaN properly, but would also treat undefined as NaN</h3>\n\n<pre><code>Array.prototype.uniq = function () {\n  var hasNaN = false;\n  for (var i = this.length - 1; i &gt; 0; i--) { \n    var e = this[i], j = this.indexOf(e), gotNaN = isNaN(e);\n    if (gotNaN) hasNaN = true;\n    if (j != -1 &amp;&amp; j != i || gotNaN) this.splice(i, 1);\n  }\n  if (hasNaN) this.push(NaN);\n  return this;\n}\n</code></pre>\n\n<h3>This handles null, NaN, undefined properly</h3>\n\n<pre><code>Array.prototype.uniq = function () {\n  var hasNaN = false, hasUndef = false;\n  for (var i = this.length - 1; i &gt; 0; i--) { \n    var e = this[i], j = this.indexOf(e), gotNaN = isNaN(e);\n    if (gotNaN) {\n      if ((typeof e) == \"undefined\") {\n        hasUndef = true;\n      } else {\n        hasNaN = true;\n      }\n    }\n    if (j != -1 &amp;&amp; j != i || gotNaN) this.splice(i, 1);\n  }\n  if (hasNaN) this.push(NaN);\n  if (hasUndef) this.push(undefined);\n  return this;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>PERFORMANCE ONLY! this code is probably 10X faster than all the codes in here</strong> *works on all browsers and also has the lowest memory impact....\nand more</p>\n\n<p>if you don't need to reuse the old array;btw do the necessary other operations before you convert it to unique here is probably the fastest way to do this, also very short.</p>\n\n<pre><code>var array=[1,2,3,4,5,6,7,8,9,0,1,2,1];\n</code></pre>\n\n<p>then you can try this</p>\n\n<pre><code>function toUnique(a,b,c){//array,placeholder,placeholder\n b=a.length;\n while(c=--b)while(c--)a[b]!==a[c]||a.splice(c,1);\n return a // not needed ;)\n}\ntoUnique(array)\n//[3, 4, 5, 6, 7, 8, 9, 0, 2, 1] \n</code></pre>\n\n<p>I came up with this function reading this article...</p>\n\n<p><a href=\"http://www.shamasis.net/2009/09/fast-algorithm-to-find-unique-items-in-javascript-array/\">http://www.shamasis.net/2009/09/fast-algorithm-to-find-unique-items-in-javascript-array/</a></p>\n\n<p>I don't like the for loop. it has to many parameters.i like the while-- loop.\nwhile is the fastest loop in all browsers except the one we all like so much... chrome.</p>\n\n<p>anyway i wrote the first function that uses while.And yep it's a little faster than the function found in the article.but not enough.<code>unique2()</code></p>\n\n<p>next step use modern js.<code>Object.keys</code>\ni replaced the other for loop with js1.7's Object.keys...\na little faster and shorter (in chrome 2x faster) ;). Not enough!.<code>unique3()</code>.</p>\n\n<p>at this point i was thinking about what i really need in MY unique function.\ni don't need the old array, i want a fast function.\nso i used 2 while loops + splice.<code>unique4()</code></p>\n\n<p><strong>Useless to say that i was impressed.</strong></p>\n\n<p><em>chrome:</em> the usual 150,000 operations per second jumped to 1,800,000 operations per second.</p>\n\n<p><em>ie:</em> 80,000 op/s vs 3,500,000 op/s</p>\n\n<p><em>ios:</em> 18,000 op/s vs 170,000 op/s </p>\n\n<p><strong><em>safari:</em> 80,000 op/s vs 6,000,000 op/s</strong></p>\n\n<p><strong>Proof</strong>\n<a href=\"http://jsperf.com/wgu\">http://jsperf.com/wgu</a> or better use console.time... microtime... whatever</p>\n\n<p><code>unique5()</code> is just to show you what happens if you want to keep the old array.</p>\n\n<p>Don't use <code>Array.prototype</code> if yu don't know what your doing.\ni just did alot of copy and past.\nUse <code>Object.defineProperty(Array.prototype,...,writable:false,enumerable:false})</code> if you want to create a native prototype.example: <a href=\"http://stackoverflow.com/a/20463021/2450730\">http://stackoverflow.com/a/20463021/2450730</a></p>\n\n<p><strong>Demo</strong>\n<a href=\"http://jsfiddle.net/46S7g/\">http://jsfiddle.net/46S7g/</a></p>\n\n<p><strong>NOTE: your old array is destroyed/becomestheunique after this operation.</strong></p>\n\n<p>if you can't read the code above ask, read a javascript book or here are some explainations about shorter code. <a href=\"http://stackoverflow.com/a/21353032/2450730\">http://stackoverflow.com/a/21353032/2450730</a></p>\n\n<p>some are using <code>indexOf</code>  ... don't ... <a href=\"http://jsperf.com/dgfgghfghfghghgfhgfhfghfhgfh\">http://jsperf.com/dgfgghfghfghghgfhgfhfghfhgfh</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Yet another solution for the pile.</p>\n\n<p>I recently needed to make a sorted list unique and I did it using filter that keeps track of the previous item in an object like this:</p>\n\n<pre><code>uniqueArray = sortedArray.filter(function(e) { \n    if(e==this.last) \n      return false; \n    this.last=e; return true;  \n  },{last:null});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>[\"Defects\", \"Total\", \"Days\", \"City\", \"Defects\"].reduce(function(prev, cur) {\n  return (prev.indexOf(cur) &lt; 0) ? prev.concat([cur]) : prev;\n }, []);\n\n[0,1,2,0,3,2,1,5].reduce(function(prev, cur) {\n  return (prev.indexOf(cur) &lt; 0) ? prev.concat([cur]) : prev;\n }, []);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This script modify the array, filtering out duplicated values. It works with numbers and strings.</p>\n\n<p><a href=\"https://jsfiddle.net/qsdL6y5j/1/\" rel=\"nofollow\">https://jsfiddle.net/qsdL6y5j/1/</a></p>\n\n<pre><code>    Array.prototype.getUnique = function () {\n        var unique = this.filter(function (elem, pos) {\n            return this.indexOf(elem) == pos;\n        }.bind(this));\n        this.length = 0;\n        this.splice(0, 0, unique);\n    }\n\n    var duplicates = [0, 0, 1, 1, 2, 3, 1, 1, 0, 4, 4];\n    duplicates.getUnique();\n    alert(duplicates);\n</code></pre>\n\n<hr>\n\n<p>This version instead, allow you to return a new array with unique value keeping the original (just pass true).</p>\n\n<p><a href=\"https://jsfiddle.net/dj7qxyL7/\" rel=\"nofollow\">https://jsfiddle.net/dj7qxyL7/</a></p>\n\n<pre><code>    Array.prototype.getUnique = function (createArray) {\n        createArray = createArray === true ? true : false;\n        var temp = JSON.stringify(this);\n        temp = JSON.parse(temp);\n        if (createArray) {\n            var unique = temp.filter(function (elem, pos) {\n                return temp.indexOf(elem) == pos;\n            }.bind(this));\n            return unique;\n        }\n        else {\n            var unique = this.filter(function (elem, pos) {\n                return this.indexOf(elem) == pos;\n            }.bind(this));\n            this.length = 0;\n            this.splice(0, 0, unique);\n        }\n    }\n\n    var duplicates = [0, 0, 1, 1, 2, 3, 1, 1, 0, 4, 4];\n    console.log('++++ ovveride')\n    duplicates.getUnique();\n    console.log(duplicates);\n    console.log('++++ new array')\n    var duplicates2 = [0, 0, 1, 1, 2, 3, 1, 1, 0, 4, 4];\n    var unique = duplicates2.getUnique(true);\n    console.log(unique);\n    console.log('++++ original')\n    console.log(duplicates2);\n</code></pre>\n\n<hr>\n\n<pre><code>Browser support:\n\nFeature Chrome  Firefox (Gecko)     Internet Explorer   Opera   Safari\nBasic support   (Yes)   1.5 (1.8)   9                   (Yes)   (Yes)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have an array of numbers that I need to make sure are unique. I found the code snippet below on the internet and it works great until the array has a zero in it. I found <a href=\"http://stackoverflow.com/questions/1890203/unique-for-arrays-in-javascript\">this other script</a> here on SO that looks almost exactly like it, but it doesn't fail.</p>\n\n<p>So for the sake of helping me learn, can someone help me determine where the prototype script is going wrong?</p>\n\n<pre><code>Array.prototype.getUnique = function() {\n var o = {}, a = [], i, e;\n for (i = 0; e = this[i]; i++) {o[e] = 1};\n for (e in o) {a.push (e)};\n return a;\n}\n</code></pre>\n",
            "last_activity_date": 1425978371,
            "question_id": 1960473,
            "score": 118,
            "tags": [
                "javascript",
                "arrays",
                "unique"
            ],
            "title": "Unique values in an array"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>What about using <a href=\"http://docs.jquery.com/UI/Datepicker/%24.datepicker.formatDate\" rel=\"nofollow\">formatDate</a> from DatePicker widget? You could use it to convert the dates in timestamp format (milliseconds since 01/01/1970) and then do a simple subtraction.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function parseDate(str) {\n    var mdy = str.split('/')\n    return\u00a0new Date(mdy[2], mdy[0]-1, mdy[1]);\n}\n\nfunction daydiff(first, second) {\n    return (second-first)/(1000*60*60*24);\n}\n\nalert(daydiff(parseDate($('#first').val()), parseDate($('#second').val())));\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 84
                },
                {
                    "body": "<p>I would go ahead and <a href=\"http://mattkruse.com/javascript/date/date.js\">grab this small utility</a> and in it you will find functions to this for you. Here's a short example:</p>\n\n<pre><code>    \t&lt;script type=\"text/javascript\" src=\"date.js\"&gt;&lt;/script&gt;\n    \t&lt;script type=\"text/javascript\"&gt;\n    \t\tvar minutes = 1000*60;\n    \t\tvar hours = minutes*60;\n    \t\tvar days = hours*24;\n\n    \t\tvar foo_date1 = getDateFromFormat(\"02/10/2009\", \"M/d/y\");\n    \t\tvar foo_date2 = getDateFromFormat(\"02/12/2009\", \"M/d/y\");\n\n    \t\tvar diff_date = Math.round((foo_date2 - foo_date1)/days);\n    \t\talert(\"Diff date is: \" + diff_date );\n    \t&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>The easiest way to get the difference between two dates:</p>\n\n<pre><code>var diff =  Math.floor(( Date.parse(str2) - Date.parse(str1) ) / 86400000);\n</code></pre>\n\n<p>You get the difference days (or NaN if one or both could not be parsed). The parse date gived the result in milliseconds and to get it by day you have to divided it by 24 * 60 * 60 * 1000</p>\n\n<p>If you want it divided by days, hours, minutes, seconds and milliseconds:</p>\n\n<pre><code>function dateDiff( str1, str2 ) {\n    var diff = Date.parse( str2 ) - Date.parse( str1 ); \n    return isNaN( diff ) ? NaN : {\n    \tdiff : diff,\n    \tms : Math.floor( diff            % 1000 ),\n    \ts  : Math.floor( diff /     1000 %   60 ),\n    \tm  : Math.floor( diff /    60000 %   60 ),\n    \th  : Math.floor( diff /  3600000 %   24 ),\n    \td  : Math.floor( diff / 86400000        )\n    };\n}\n</code></pre>\n\n<p>Here is my refactored version of James version:</p>\n\n<pre><code>function mydiff(date1,date2,interval) {\n    var second=1000, minute=second*60, hour=minute*60, day=hour*24, week=day*7;\n    date1 = new Date(date1);\n    date2 = new Date(date2);\n    var timediff = date2 - date1;\n    if (isNaN(timediff)) return NaN;\n    switch (interval) {\n        case \"years\": return date2.getFullYear() - date1.getFullYear();\n        case \"months\": return (\n            ( date2.getFullYear() * 12 + date2.getMonth() )\n            -\n            ( date1.getFullYear() * 12 + date1.getMonth() )\n        );\n        case \"weeks\"  : return Math.floor(timediff / week);\n        case \"days\"   : return Math.floor(timediff / day); \n        case \"hours\"  : return Math.floor(timediff / hour); \n        case \"minutes\": return Math.floor(timediff / minute);\n        case \"seconds\": return Math.floor(timediff / second);\n        default: return undefined;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 61
                },
                {
                    "body": "<p>I think the solutions aren't correct 100% I would use <strong>ceil</strong> instead of <strong>floor</strong>, round will work but it isn't the right operation.</p>\n\n<pre><code>function dateDiff( str1, str2 ) {\n    var diff = Date.parse( str2 ) - Date.parse( str1 ); \n    return isNaN( diff ) ? NaN : {\n        diff : diff,\n        ms : Math.ceil( diff            % 1000 ),\n        s  : Math.ceil( diff /     1000 %   60 ),\n        m  : Math.ceil( diff /    60000 %   60 ),\n        h  : Math.ceil( diff /  3600000 %   24 ),\n        d  : Math.ceil( diff / 86400000        )\n    };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As of this writing, only one of the other answers correctly handles DST (daylight saving time) transitions. Here are the results on a system located in California:</p>\n\n<pre><code>                                        1/1/2013- 3/10/2013- 11/3/2013-\nUser       Formula                      2/1/2013  3/11/2013  11/4/2013  Result\n---------  ---------------------------  --------  ---------  ---------  ---------\nMiles                   (d2 - d1) / N   31        0.9583333  1.0416666  Incorrect\nsome         Math.floor((d2 - d1) / N)  31        0          1          Incorrect\nfuentesjr    Math.round((d2 - d1) / N)  31        1          1          Correct\ntoloco     Math.ceiling((d2 - d1) / N)  31        1          2          Incorrect\n\nN = 86400000\n</code></pre>\n\n<p>Although <code>Math.round</code> returns the correct results, I think it's somewhat clunky. Instead, by explicitly accounting for changes to the UTC offset when DST begins or ends, we can use exact arithmetic:</p>\n\n<pre><code>function treatAsUTC(date) {\n    var result = new Date(date);\n    result.setMinutes(result.getMinutes() - result.getTimezoneOffset());\n    return result;\n}\n\nfunction daysBetween(startDate, endDate) {\n    var millisecondsPerDay = 24 * 60 * 60 * 1000;\n    return (treatAsUTC(endDate) - treatAsUTC(startDate)) / millisecondsPerDay;\n}\n\nalert(daysBetween($('#first').val(), $('#second').val()));\n</code></pre>\n\n<h2>Explanation</h2>\n\n<p>JavaScript date calculations are tricky because <code>Date</code> objects store times internally in UTC, not local time. For example, 3/10/2013 12:00\u00a0AM Pacific Standard Time (UTC-08:00) is stored as 3/10/2013 8:00\u00a0AM UTC, and 3/11/2013 12:00\u00a0AM Pacific Daylight Time (UTC-07:00) is stored as 3/11/2013 7:00\u00a0AM UTC. On this day, midnight to midnight local time is only 23 hours in UTC!</p>\n\n<p>Although a day in local time can have more or less than 24 hours, a day in UTC is always exactly 24 hours.<sup>1</sup> The <code>daysBetween</code> method shown above takes advantage of this fact by first calling <code>treatAsUTC</code> to adjust both local times to midnight UTC, before subtracting and dividing.</p>\n\n<p><sup>1. JavaScript ignores leap seconds.</sup></p>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<p>I found this question when I want do some calculate on two date, but the date have hours and minutes value, I modified @michael-liu 's answer to fit my requirement, and it passed my test.</p>\n\n<p>diff days <code>2012-12-31 23:00</code> and <code>2013-01-01 01:00</code> should equal 1. (2 hour)\ndiff days <code>2012-12-31 01:00</code> and <code>2013-01-01 23:00</code> should equal 1. (46 hour)</p>\n\n<pre><code>function treatAsUTC(date) {\n    var result = new Date(date);\n    result.setMinutes(result.getMinutes() - result.getTimezoneOffset());\n    return result;\n}\n\nvar millisecondsPerDay = 24 * 60 * 60 * 1000;\nfunction diffDays(startDate, endDate) {\n    return Math.floor(treatAsUTC(endDate) / millisecondsPerDay) - Math.floor(treatAsUTC(startDate) / millisecondsPerDay);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I recommend using the moment.js library (<a href=\"http://momentjs.com/docs/#/displaying/difference/\">http://momentjs.com/docs/#/displaying/difference/</a>).  It handles daylight savings time correctly and in general is great to work with.</p>\n\n<p>Example:</p>\n\n<pre><code>var start = moment(\"2013-11-04\");\nvar end = moment(\"2013-11-03\");\nstart.diff(end, \"days\")\n1\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>Date values in JS are datetime values.</p>\n\n<p>So, direct date computations are inconsistent:</p>\n\n<pre><code>(2013-11-05 00:00:00) - (2013-11-04 10:10:10) &lt; 1 day\n</code></pre>\n\n<p>for example we need to convert de 2nd date:</p>\n\n<pre><code>(2013-11-05 00:00:00) - (2013-11-04 00:00:00) = 1 day\n</code></pre>\n\n<p>the method could be truncate the mills in both dates: </p>\n\n<pre><code>start = Math.floor( date1.getTime() / (3600*24*1000)); //days as integer from..\nend   = Math.floor( date2.getTime() / (3600*24*1000)); //days as integer from..\ndaysDiff = end - start; // exact dates\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>Date.prototype.days=function(to){\n  return  Math.abs(Math.floor( to.getTime() / (3600*24*1000)) -  Math.floor( this.getTime() / (3600*24*1000)))\n\n}\n</code></pre>\n\n<p>then : </p>\n\n<pre><code>  new Date('2014/05/20').days(new Date('2014/05/23')) // 3 days\n\n  new Date('2014/05/23').days(new Date('2014/05/20')) // 3 days\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do I get the number of days between two dates in JavaScript? For example, given two dates in input boxes:</p>\n\n<pre><code>&lt;input id=\"first\" value=\"1/1/2000\"/&gt;\n&lt;input id=\"second\" value=\"1/1/2001\"/&gt;\n\n&lt;script&gt;\n  alert(datediff(\"day\", first, second)); // what goes here?\n&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1417488598,
            "question_id": 542938,
            "score": 89,
            "tags": [
                "javascript",
                "date"
            ],
            "title": "How do I get the number of days between two dates in JavaScript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Stolen shamelessly from: <a href=\"http://www.techrepublic.com/article/convert-the-local-time-to-another-time-zone-with-this-javascript/6016329\">http://www.techrepublic.com/article/convert-the-local-time-to-another-time-zone-with-this-javascript/6016329</a>  </p>\n\n<pre><code>// function to calculate local time\n// in a different city\n// given the city's UTC offset\nfunction calcTime(city, offset) {\n\n    // create Date object for current location\n    d = new Date();\n\n    // convert to msec\n    // add local time zone offset\n    // get UTC time in msec\n    utc = d.getTime() + (d.getTimezoneOffset() * 60000);\n\n    // create new Date object for different city\n    // using supplied offset\n    nd = new Date(utc + (3600000*offset));\n\n    // return time as a string\n    return \"The local time in \" + city + \" is \" + nd.toLocaleString();\n\n}\n</code></pre>\n\n<p>this function is useful to calculate time zone value by providing name of a city/country and offset value</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Okay, found it!</p>\n\n<p>I'm using <a href=\"https://github.com/mde/timezone-js\">timezone-js</a>. this is the code:</p>\n\n<pre><code>var dt = new timezoneJS.Date(\"2012/04/10 10:10:30 +0000\", 'Europe/London');\ndt.setTimezone(\"Asia/Jakarta\");\n\nconsole.debug(dt); //return formatted date-time in asia/jakarta\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>For <a href=\"http://momentjs.com/\">moment.js</a> users, you can now use <a href=\"http://momentjs.com/timezone/docs/\">moment-timezone</a>.  Using it, your function would look something like this:</p>\n\n<pre><code>function toTimeZone(time, zone) {\n    var format = 'YYYY/MM/DD HH:mm:ss ZZ';\n    return moment(time, format).tz(zone).format(format);\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<p>Following code requires no library etc if you are using PHP as server side script you can simplify follow following code.</p>\n\n<pre class=\"lang-php prettyprint-override\"><code>&lt;?php\n\n$arrTimeAbbr = timezone_abbreviations_list(); //Internal Function of PHP\n$resultTimeAbbr = array();\n\nforeach ($arrTimeAbbr as $abr =&gt; $timeAbbr) {\n    foreach ($timeAbbr as $key =&gt; $arrValue) {\n        $arrValue['abbr'] = $abr;\n        $resultTimeAbbr[$arrValue['timezone_id']] = $arrValue;\n    }\n}\n\n$arrTimeZoneData = $resultTimeAbbr['Pacific/Midway'];\n\n?&gt;\n</code></pre>\n\n<p>and on client side you can do this </p>\n\n<pre><code>function startTime(offset){\n    d = new Date();\n    utc = d.getTime() + (d.getTimezoneOffset() * 60000);\n    today = new Date(utc + (offset));\n    //var today=new Date();\n    var h=today.getHours();\n    var m=today.getMinutes();\n    var s=today.getSeconds();\n    // add a zero in front of numbers&lt;10\n    m=checkTime(m);\n    s=checkTime(s);\n    $(\"#spnClock\").html(h+\":\"+m+\":\"+s);\n    //document.getElementById('txt').innerHTML=h+\":\"+m+\":\"+s;\n    t=setTimeout(function(){startTime(offset)},500);\n}\n\nfunction checkTime(i)\n{\n    if (i&lt;10)\n      {\n      i=\"0\" + i;\n      }\n    return i;\n}\n\nstartTime(&lt;?php echo $arrTimeZoneData['offset']; ?&gt;); //Call need to be written in PHP file\n</code></pre>\n\n<p>Done same working great for me ..</p>\n",
                    "is_accepted": false,
                    "score": -5
                },
                {
                    "body": "<p>Most desktop (not mobile) browsers except Safari support the <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\" rel=\"nofollow\">toLocaleString</a> function with arguments, older browsers usually ignore the arguments.</p>\n\n<pre><code>new Date().toLocaleString('en-US', { timeZone: 'Asia/Jakarta' })\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Got it !</p>\n\n<p>Wanted to force the date shown = server date, no mattter the local settings (UTC).</p>\n\n<p>My server is GMT-6 --> new Date().getTimezoneOffset() = 360.</p>\n\n<pre><code>myTZO = 360;\nmyNewDate=new Date(myOldDateObj.getTime() + (60000*(myOldDateObj.getTimezoneOffset()-myTZO)));\nalert(myNewDate);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am looking for a function to convert date in one timezone to another. </p>\n\n<p>It need two parameters, </p>\n\n<ul>\n<li>date (in format \"2012/04/10 10:10:30 +0000\") </li>\n<li>timezone string (\"Asia/Jakarta\")</li>\n</ul>\n\n<p>The timezone string is described in <a href=\"http://en.wikipedia.org/wiki/Zone.tab\">http://en.wikipedia.org/wiki/Zone.tab</a></p>\n\n<p>Is there an easy way to do this?</p>\n",
            "last_activity_date": 1424679509,
            "question_id": 10087819,
            "score": 65,
            "tags": [
                "javascript",
                "timezone"
            ],
            "title": "Convert date to another timezone in javascript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>It means it\u2019ll do nothing. It\u2019s an attempt to have the link not \u2018navigate\u2019 anywhere. But it\u2019s not the right way.</p>\n\n<p>You should actually just <code>return false</code> in the <code>onclick</code> event, like so:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;a href=\"#\" onclick=\"return false;\"&gt;hello&lt;/a&gt;\n</code></pre>\n\n<p>Typically it\u2019s used if the link is doing some \u2018JavaScript-y\u2019 thing. Like posting an AJAX form, or swapping an image, or whatever. In that case you just make whatever function is being called return <code>false</code>.</p>\n\n<p>To make your website completely awesome, however, generally you\u2019ll include a link that does the same action, if the person browsing it chooses not to run JavaScript.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;a href=\"backup_page_displaying_image.aspx\"\n   onclick=\"return coolImageDisplayFunction();\"&gt;hello&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<blockquote>\n  <p>The <code>void</code> operator evaluates the given\n  expression and then returns <code>undefined</code>.</p>\n  \n  <p>The <code>void</code> operator is often used merely\n  to obtain the <code>undefined</code> primitive\n  value, usually using \u201c<code>void(0)</code>\u201d (which\n  is equivalent to \u201c<code>void 0</code>\u201d). In these\n  cases, the global variable <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/undefined\"><code>undefined</code></a>\n  can be used instead (assuming it has\n  not been assigned to a non-default\n  value).</p>\n</blockquote>\n\n<p>An explanation is provided here: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/void\"><code>void</code> operator</a>.</p>\n\n<p>The reason you\u2019d want to do this with the <code>href</code> of a link is that normally, a <code>javascript:</code> URL will redirect the browser to a plain text version of the result of evaluating that JavaScript. But if the result is <code>undefined</code>, then the browser stays on the same page. <code>void(0)</code> is just the smallest script possible that evaluates as <code>undefined</code>.</p>\n",
                    "is_accepted": true,
                    "score": 240
                },
                {
                    "body": "<p>You should always have an href on your <strong>a</strong> tags. Calling a Javascript function that returns 'undefined' will do just fine. So will linking to '#'.</p>\n\n<p>Anchor tags in IE6 without an href do not get the a:hover style applied.</p>\n\n<p>Yes it is terrible and a minor crime against humanity, but then again so is IE6 in general.</p>\n\n<p>Hope this helps.</p>\n\n<p>EDIT: IE6 is actually a major crime against humanity</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>There is a HUGE difference in the behaviour of \"#\" vs javascript:void</p>\n\n<p>\"#\" scrolls you to the TOP of the page\nwhile \"javascript:void(0);\" does not.</p>\n\n<p>This is very important if you are coding dynamic pages.\nthe user does not want to go back to top just because he clicked a link on the page.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>In addition to the technical answer, <code>javascript:void</code> means the author is Doing It Wrong.</p>\n\n<p>There is no good reason to use a <code>javascript:</code> pseudo-URL(*). In practice it will cause confusion or errors should anyone try things like \u2018bookmark link\u2019, \u2018open link in a new tab\u2019, and so on. This happens quite a lot now people have got used to middle-click-for-new-tab: it looks like a link, you want to read it in a new tab, but it turns out to be not a real link at all, and gives unwanted results like a blank page or a JS error when middle-clicked.</p>\n\n<p><code>&lt;a href=\"#\"&gt;</code> is a common alternative which might arguably be less bad. However you must remember to <code>return false</code> from your <code>onclick</code> event handler to prevent the link being followed and scrolling up to the top of the page.</p>\n\n<p>In some cases there may be an actual useful place to point the link to. For example if you have a control you can click on that opens up a previously-hidden <code>&lt;div id=\"foo\"&gt;</code>, it makes some sense to use <code>&lt;a href=\"#foo\"&gt;</code> to link to it. Or if there is a non-JavaScript way of doing the same thing (for example, \u2018thispage.php?show=foo\u2019 that sets foo visible to begin with), you can link to that.</p>\n\n<p>Otherwise, if a link points only to some script, it is not really a link and should not be marked up as such. The usual approach would be to add the <code>onclick</code> to a <code>&lt;span&gt;</code>, <code>&lt;div&gt;</code>, or an <code>&lt;a&gt;</code> without an <code>href</code> and style it in some way to make it clear you can click on it. This is what StackOverflow [did at the time of writing; now it uses <code>href=\"#\"</code>].</p>\n\n<p>The disadvantage of this is that you lose keyboard control, since you can't tab onto a span/div/bare-a or activate it with space. Whether this is actually a disadvantage depends on what sort of action the element is intended to take. You can, with some effort, attempt to mimic the keyboard interactability by adding a <code>tabIndex</code> to the element, and listening for a Space keypress. But it's never going to 100% reproduce the real browser behaviour, not least because different browsers can respond to the keyboard differently (not to mention non-visual browsers).</p>\n\n<p>If you really want an element that isn't a link but which can be activated as normal by mouse or keyboard, what you want is a <code>&lt;button type=\"button\"&gt;</code> (or <code>&lt;input type=\"button\"&gt;</code> is just as good, for simple textual contents). You can always use CSS to restyle it so it looks more like a link than a button, if you want. But since it behaves like a button, that's how really you should mark it up.</p>\n\n<p>(*: in site authoring, anyway. Obviously they are useful for bookmarklets. <code>javascript:</code> pseudo-URLs are a conceptual bizarreness: a locator that doesn't point to a location, but instead calls active code inside the current location. They have caused massive security problems for both browsers and webapps, and should never have been invented by Netscape.)</p>\n",
                    "is_accepted": false,
                    "score": 159
                },
                {
                    "body": "<p>void is an operator that is used to return a null value so the browser will not be able to load a new page. </p>\n\n<p>Web browsers will try and take whatever is used as a URL and load it unless it is a javascript function that returns null. for example if we click a link like this <code>&lt;a href=\"javascript: alert('Hello World')\"&gt;Click Me&lt;/a&gt;</code> then an alert message will show up without loading a new page, and that is because alert is a function that returns a null value. This means that when the browser attempts to load a new page it sees null and has nothing to load</p>\n\n<p>An important thing to note about the void operator is that it requires a value and cannot be used by itself. we should use it like this <code>&lt;a href=\"javascript: void(0)\"&gt;I am a useless link&lt;/a&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The <code>void</code> operator evaluates the given expression and then returns undefined.\nIt avoids refreshing the page.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>It is used very popularly to add js functions to the html link, for example: the [Print] link that you see on many webpages. Its code is like:</p>\n\n<pre><code>&lt;a href=\"javascript:void(0)\" onclick=\"call print function\"&gt;Print&lt;/a&gt;\n</code></pre>\n\n<p>Why need 'href' while 'onclick' alone can get the job done? Because if we omit the 'href', when users mouse over the text \"Print\" the cursor will change to \"I\". Having 'href' allow the cursor to display as if it was a hyperlink: a pointing hand.</p>\n\n<p>PS: There are 2 methods: 1. href=\"javascript:void(0);\" and 2. href=\"#\" - both have the same effect. But the 1st require JS to be turned on in web browser while the 2nd does not. So the 2nd seems to be more compatible.</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<pre><code>&lt;a href=\"javascript:void(0)\" id=\"loginlink\"&gt;login&lt;/a&gt;\n</code></pre>\n\n<p>I've seen such <code>href</code>s many times, but I don't know what exactly that means.</p>\n",
            "last_activity_date": 1403194749,
            "question_id": 1291942,
            "score": 269,
            "tags": [
                "javascript",
                "html",
                "href",
                "void"
            ],
            "title": "What does &quot;javascript:void(0)&quot; mean?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<blockquote>\n  <p>What is JavaScript garbage collection? </p>\n</blockquote>\n\n<p>check <a href=\"http://www.memorymanagement.org/articles/recycle.html\" rel=\"nofollow\">this</a> </p>\n\n<blockquote>\n  <p>What's important for a web programmer to understand about JavaScript garbage collection, \n  in order to write better code?</p>\n</blockquote>\n\n<p>In Javascript you don't care about memory allocation and deallocation. The whole problem is demanded to the Javascript interpreter. Leaks are still possible in Javascript, but they are bugs of the interpreter. If you are interested in this topic you could read more in \n<a href=\"http://www.memorymanagement.org\" rel=\"nofollow\">www.memorymanagement.org</a> </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Eric Lippert wrote a <a href=\"http://blogs.msdn.com/ericlippert/archive/2003/09/17/53038.aspx\"><strong>detailed blog post</strong></a> about this subject a while back (additionally comparing it to <em>VBScript</em>). More accurately, he wrote about <a href=\"http://en.wikipedia.org/wiki/Jscript\"><em>JScript</em></a>, which is Microsoft's own implementation of ECMAScript, although very similar to JavaScript. I would imagine that you can assume the vast majority of behaviour would be the same for the JavaScript engine of Internet Explorer. Of course, the implementation will vary from browser to browser, though I suspect you could take a number of the common principles and apply them to other browsers.</p>\n\n<p>Quoted from that page:</p>\n\n<blockquote>\n  <p>JScript uses a nongenerational\n  mark-and-sweep garbage collector.  It\n  works like this: </p>\n  \n  <ul>\n  <li><p>Every variable which is \"in scope\"\n  is called a \"scavenger\".  A scavenger\n  may refer to a number, an object, a\n  string, whatever.  We maintain a list\n  of scavengers -- variables are moved\n  on to the scav list when they come\n  into scope and off the scav list when\n  they go out of scope.</p></li>\n  <li><p>Every now and then the garbage\n  collector runs.   First it puts a\n  \"mark\" on every object, variable,\n  string, etc \u2013 all the memory tracked\n  by the GC.  (JScript uses the VARIANT\n  data structure internally and there\n  are plenty of extra unused bits in\n  that structure, so we just set one of\n  them.)</p></li>\n  <li><p>Second, it clears the mark on the\n  scavengers and the transitive closure\n  of scavenger references.  So if a\n  scavenger object references a\n  nonscavenger object then we clear the\n  bits on the nonscavenger, and on\n  everything that it refers to.  (I am\n  using the word \"closure\" in a\n  different sense than in my earlier\n  post.)</p></li>\n  <li><p>At this point we know that all the\n  memory still marked is allocated\n  memory which cannot be reached by any\n  path from any in-scope variable.  All\n  of those objects are instructed to\n  tear themselves down, which destroys\n  any circular references.</p></li>\n  </ul>\n</blockquote>\n\n<p>The main purpose of garbage collection is to allow the programmer <em>not</em> to worry about memory management of the objects they create and use, though of course there's no avoiding it sometimes - it is always beneficial to have at least a rough idea of how garbage collection works.</p>\n\n<p>There are a few particular points of which to be aware. The Apple developer site has <a href=\"http://developer.apple.com/safari/library/documentation/ScriptingAutomation/Conceptual/JSCodingGuide/Advanced/Advanced.html\"><strong>some guidelines</strong></a> on the matter. Two important ones from there:</p>\n\n<ul>\n<li>Use delete statements. Whenever you create an object using a new statement, pair it with a delete statement. This ensures that all of the memory associated with the object, including its property name, is available for garbage collection. The delete statement is discussed more in \u201cFreeing Objects.\u201d</li>\n<li>Use the var keyword. Any variable created without the var keyword is created at the global scope and is never eligible for garbage collection, presenting the opportunity for a memory leak.</li>\n</ul>\n\n<p>I would imagine that the practices should apply to all JavaScript engines (in different browsers), though because this is from an Apple site, they <em>may</em> be somewhat specific to Safari. (Perhaps someone could clarify that?)</p>\n\n<p>Hope that helps.</p>\n",
                    "is_accepted": true,
                    "score": 142
                },
                {
                    "body": "<p>Javascript garbage collection may differ between browser implementations, but basic foundation is the same.</p>\n\n<ol>\n<li>All variables defined in a function scope, get trashed the moment the function completes execution.</li>\n<li>No global variables get recycled, even if not being used by any function, therefore, avoid them like the plague, they add to namespace pollution.</li>\n<li>Anonymous functions passed as an argument, disappear the moment they are executed.</li>\n</ol>\n\n<p>That's all I can remember right now.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Beware of circular references when DOM objects are involved:</p>\n\n<p><a href=\"http://www.ibm.com/developerworks/web/library/wa-memleak/\">Memory leak patterns in JavaScript</a></p>\n\n<p>Keep in mind that memory can only be reclaimed when there are no active references to the object. This is a common pitfall with closures and event handlers, as some JS engines will not check which variables actually are referenced in inner functions and just keep all local variables of the enclosing functions.</p>\n\n<p>Here's a simple example:</p>\n\n<pre><code>function init() {\n    var bigString = new Array(1000).join('xxx');\n    var foo = document.getElementById('foo');\n    foo.onclick = function() {\n        // this might create a closure over `bigString`,\n        // even if `bigString` isn't referenced anywhere!\n    };\n}\n</code></pre>\n\n<p>A naive JS implementation can't collect <code>bigString</code> as long as the event handler is around. There are several ways to solve this problem, eg setting <code>bigString = null</code> at the end of <code>init()</code> (<code>delete</code> won't work for local variables and function arguments: <code>delete</code> removes properties from objects, and the variable object is inaccessible - ES5 in strict mode will even throw a <code>ReferenceError</code> if you try to delete a local variable!).</p>\n\n<p>I recommend to avoid unnecessary closures as much as possible if you care for memory consumption.</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>Good quote taken from a blog</p>\n\n<p>The DOM component is \"garbage collected\", as is the JScript component, which means that if you create an object within either component, and then lose track of that object, it will eventually be cleaned up.</p>\n\n<p>For example:</p>\n\n<pre><code>function makeABigObject() {\nvar bigArray = new Array(20000);\n}\n</code></pre>\n\n<p>When you call that function, the JScript component creates an object (named bigArray) that is accessible within the function. As soon as the function returns, though, you \"lose track\" of bigArray because there's no way to refer to it anymore. Well, the JScript component realizes that you've lost track of it, and so bigArray is cleaned up--its memory is reclaimed. The same sort of thing works in the DOM component. If you say <code>document.createElement('div')</code>, or something similar, then the DOM component creates an object for you. Once you lose track of that object somehow, the DOM component will clean up the related.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>To the best of my knowledge, JavaScript's objects are garbage collected periodically when there are no references remaining to the object.  It is something that happens automatically, but if you want to see more about how it works, at the C++ level, it makes sense to take a look at the <a href=\"http://webkit.org/building/checkout.html\">WebKit</a> or <a href=\"http://code.google.com/p/v8/\">V8 source code</a></p>\n\n<p>Typically you don't need to think about it, however, in older browsers, like IE 5.5 and early versions of IE 6, and perhaps current versions, closures would create circular references that when unchecked would end up eating up memory.  In the particular case that I mean about closures, it was when you added a JavaScript reference to a dom object, and an object to a DOM object that referred back to the JavaScript object.  Basically it could never be collected, and would eventually cause the OS to become unstable in test apps that looped to create crashes.  In practice these leaks are usually small, but to keep your code clean you should delete the JavaScript reference to the DOM object.</p>\n\n<p>Usually it is a good idea to use the delete keyword to immediately de-reference big objects like JSON data that you have received back and done whatever you need to do with it, especially in mobile web development.  This causes the next sweep of the GC to remove that object and free its memory.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<blockquote>\n  <p>\"In computer science, garbage collection (GC) is a form of automatic memory management. The garbage collector, or just collector, attempts to reclaim garbage, or memory used by objects that will never be accessed or mutated again by the application.\"</p>\n</blockquote>\n\n<p>All JavaScript engines have their own garbage collectors, and they may differ. Most time you do not have to deal with them because they just do what they supposed to do.</p>\n\n<p>Writing better code mostly depends of how good do you know programming principles, language and particular implementation.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>On windows you can use <a href=\"http://home.orange.nl/jsrosman/\" rel=\"nofollow\">Drip.exe</a> to find memory leaks or check if your free mem routine works. </p>\n\n<p>It's really simple, just enter a website URL and you will see the memory consumption of the integrated IE renderer. Then hit refresh, if the memory increases, you found a memory leak somewhere on the webpage. But this is also very useful to see if routines for freeing memory work for IE. </p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>What is JavaScript garbage collection? What's important for a web programmer to understand about JavaScript garbage collection, in order to write better code?</p>\n",
            "last_activity_date": 1328491882,
            "question_id": 864516,
            "score": 196,
            "tags": [
                "javascript",
                "garbage-collection"
            ],
            "title": "What is JavaScript garbage collection?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Simplest example would consist of:</p>\n\n<ol>\n<li>Getting user input.</li>\n<li><p>Composing XML SOAP message similar to this</p>\n\n<pre><code>&lt;soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;\n  &lt;soap:Body&gt;\n    &lt;GetInfoByZIP xmlns=\"http://www.webserviceX.NET\"&gt;\n      &lt;USZip&gt;string&lt;/USZip&gt;\n    &lt;/GetInfoByZIP&gt;\n  &lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre></li>\n<li><p>POSTing message to webservice url using XHR</p></li>\n<li><p>Parsing webservice's XML SOAP response similar to this</p>\n\n<pre><code>&lt;soap:Envelope xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"\n               xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"&gt;\n &lt;soap:Body&gt;\n  &lt;GetInfoByZIPResponse xmlns=\"http://www.webserviceX.NET\"&gt;\n   &lt;GetInfoByZIPResult&gt;\n    &lt;NewDataSet xmlns=\"\"&gt;\n     &lt;Table&gt;\n      &lt;CITY&gt;...&lt;/CITY&gt;\n      &lt;STATE&gt;...&lt;/STATE&gt;\n      &lt;ZIP&gt;...&lt;/ZIP&gt;\n      &lt;AREA_CODE&gt;...&lt;/AREA_CODE&gt;\n      &lt;TIME_ZONE&gt;...&lt;/TIME_ZONE&gt;\n     &lt;/Table&gt;\n    &lt;/NewDataSet&gt;\n   &lt;/GetInfoByZIPResult&gt;\n  &lt;/GetInfoByZIPResponse&gt;\n &lt;/soap:Body&gt;\n&lt;/soap:Envelope&gt;\n</code></pre></li>\n<li><p>Presenting results to user.</p></li>\n</ol>\n\n<p>But it's a lot of hassle without external JavaScript libraries.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>This cannot be done with straight JavaScript unless the web service is on the same domain as your page.</strong></p>\n\n<p>If the web service is on another domain then you will have to use a proxy page on your own domain that will retrieve the results and return them to you.  If you are going to do that then you should use something like the lib that timyates suggested because you do not want to have to parse the results yourself.</p>\n\n<p>If the web service is on your own domain then don't use SOAP. There is no good reason to do so.  If the web service is on your own domain then modify it so that it can return JSON and save yourself the trouble of dealing with all the hassles that come with SOAP.</p>\n\n<p>Short answer is: Don't make SOAP requests from JavaScript.  Only use a web service to request data from another domain, and if you do that then parse the results on the server-side and return them in a js friendly form.</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>Thomas:</p>\n\n<p>JSON is preferred for front end use because it is javascript. Therefore you have no XML to deal with. SOAP is a pain without using a library because of this. Somebody mentioned SOAPClient, which is a good library, we started with it for our project. However it had some limitations and we had to rewrite large chunks of it. It's been released as <a href=\"http://sourceforge.net/projects/soapjs/\">SOAPjs</a> and supports passing complex objects to the server, and includes some sample proxy code to consume services from other domains. </p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>There are many quirks in the way browsers handle XMLHttpRequest, this JS code will work across all browsers:<br>\n<a href=\"http://code.google.com/p/xmlhttprequest/\">http://code.google.com/p/xmlhttprequest/</a></p>\n\n<p>This JS code converts XML into easy to use JavaScript objects:<br>\n<a href=\"http://www.terracoder.com/index.php/xml-objectifier\">http://www.terracoder.com/index.php/xml-objectifier</a></p>\n\n<p>The JS code above can be included in the page to meet your no external library requirement.</p>\n\n<pre><code>var symbol = \"MSFT\"; \nvar xmlhttp = new XMLHttpRequest();\nxmlhttp.open(\"POST\", \"http://www.webservicex.net/stockquote.asmx?op=GetQuote\",true);\nxmlhttp.onreadystatechange=function() {\n if (xmlhttp.readyState == 4) {\n  alert(xmlhttp.responseText);\n  // http://www.terracoder.com convert XML to JSON \n  var json = XMLObjectifier.xmlToJSON(xmlhttp.responseXML);\n  var result = json.Body[0].GetQuoteResponse[0].GetQuoteResult[0].Text;\n  // Result text is escaped XML string, convert string to XML object then convert to JSON object\n  json = XMLObjectifier.xmlToJSON(XMLObjectifier.textToXML(result));\n  alert(symbol + ' Stock Quote: $' + json.Stock[0].Last[0].Text); \n }\n}\nxmlhttp.setRequestHeader(\"SOAPAction\", \"http://www.webserviceX.NET/GetQuote\");\nxmlhttp.setRequestHeader(\"Content-Type\", \"text/xml\");\nvar xml = '&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;' +\n '&lt;soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' +\n                'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" ' +\n                'xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;' + \n   '&lt;soap:Body&gt; ' +\n     '&lt;GetQuote xmlns=\"http://www.webserviceX.NET/\"&gt; ' +\n       '&lt;symbol&gt;' + symbol + '&lt;/symbol&gt; ' +\n     '&lt;/GetQuote&gt; ' +\n   '&lt;/soap:Body&gt; ' +\n '&lt;/soap:Envelope&gt;';\nxmlhttp.send(xml);\n// ...Include Google and Terracoder JS code here...\n</code></pre>\n\n<p>Two other options:</p>\n\n<ul>\n<li><p>JavaScript SOAP client:<br>\n<a href=\"http://www.guru4.net/articoli/javascript-soap-client/en/\">http://www.guru4.net/articoli/javascript-soap-client/en/</a></p></li>\n<li><p>Generate JavaScript from a WSDL:<br>\n<a href=\"https://cwiki.apache.org/confluence/display/CXFDOCS/WSDL+to+Javascript\">https://cwiki.apache.org/confluence/display/CXFDOCS/WSDL+to+Javascript</a></p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 61
                },
                {
                    "body": "<p><a href=\"https://web.archive.org/web/20100418151626/http://articles.techrepublic.com.com/5100-10878_11-5887775.html\" rel=\"nofollow\">Easily consume SOAP Web services with JavaScript</a> -> <a href=\"https://web.archive.org/web/20100327205241/http://techrepublic.com.com/html/tr/sidebars/5887775-1.html\" rel=\"nofollow\">Listing B</a></p>\n\n<pre><code>function fncAddTwoIntegers(a, b)\n{\n    varoXmlHttp = new XMLHttpRequest();\n    oXmlHttp.open(\"POST\",\n \"http://localhost/Develop.NET/Home.Develop.WebServices/SimpleService.asmx'\",\n false);\n    oXmlHttp.setRequestHeader(\"Content-Type\", \"text/xml\");\n    oXmlHttp.setRequestHeader(\"SOAPAction\", \"http://tempuri.org/AddTwoIntegers\");\n    oXmlHttp.send(\" \\\n&lt;soap:Envelope xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' \\\nxmlns:xsd='http://www.w3.org/2001/XMLSchema' \\\n xmlns:soap='http://schemas.xmlsoap.org/soap/envelope/'&gt; \\\n  &lt;soap:Body&gt; \\\n    &lt;AddTwoIntegers xmlns='http://tempuri.org/'&gt; \\\n      &lt;IntegerOne&gt;\" + a + \"&lt;/IntegerOne&gt; \\\n      &lt;IntegerTwo&gt;\" + b + \"&lt;/IntegerTwo&gt; \\\n    &lt;/AddTwoIntegers&gt; \\\n  &lt;/soap:Body&gt; \\\n&lt;/soap:Envelope&gt; \\\n\");\n    return oXmlHttp.responseXML.selectSingleNode(\"//AddTwoIntegersResult\").text;\n}\n</code></pre>\n\n<p>This may not meet all your requirements but it is a start at actually answering your question. (I switched <em>XMLHttpRequest()</em> for <em>ActiveXObject(\"MSXML2.XMLHTTP\")</em>).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is the simplest JavaScript SOAP Client I can create. </p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;SOAP JavaScript Client Test&lt;/title&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function soap() {\n            var xmlhttp = new XMLHttpRequest();\n            xmlhttp.open('POST', 'https://somesoapurl.com/', true);\n\n            // build SOAP request\n            var sr =\n                '&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;' +\n                '&lt;soapenv:Envelope ' + \n                    'xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" ' +\n                    'xmlns:api=\"http://127.0.0.1/Integrics/Enswitch/API\" ' +\n                    'xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" ' +\n                    'xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;' +\n                    '&lt;soapenv:Body&gt;' +\n                        '&lt;api:some_api_call soapenv:encodingStyle=\"http://schemas.xmlsoap.org/soap/encoding/\"&gt;' +\n                            '&lt;username xsi:type=\"xsd:string\"&gt;login_username&lt;/username&gt;' +\n                            '&lt;password xsi:type=\"xsd:string\"&gt;password&lt;/password&gt;' +\n                        '&lt;/api:some_api_call&gt;' +\n                    '&lt;/soapenv:Body&gt;' +\n                '&lt;/soapenv:Envelope&gt;';\n\n            xmlhttp.onreadystatechange = function () {\n                if (xmlhttp.readyState == 4) {\n                    if (xmlhttp.status == 200) {\n\n                        alert('done use firebug to see response');\n                    }\n                }\n            }\n            // Send the POST request\n            xmlhttp.setRequestHeader('Content-Type', 'text/xml');\n            xmlhttp.send(sr);\n            // send request\n            // ...\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form name=\"Demo\" action=\"\" method=\"post\"&gt;\n        &lt;div&gt;\n            &lt;input type=\"button\" value=\"Soap\" onclick=\"soap();\" /&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;html&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 67
                },
                {
                    "body": "<pre><code>&lt;html&gt;\n &lt;head&gt;\n    &lt;title&gt;Calling Web Service from jQuery&lt;/title&gt;\n    &lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.4.3/jquery.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        $(document).ready(function () {\n            $(\"#btnCallWebService\").click(function (event) {\n                var wsUrl = \"http://abc.com/services/soap/server1.php\";\n                var soapRequest ='&lt;soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;   &lt;soap:Body&gt; &lt;getQuote xmlns:impl=\"http://abc.com/services/soap/server1.php\"&gt;  &lt;symbol&gt;' + $(\"#txtName\").val() + '&lt;/symbol&gt;   &lt;/getQuote&gt; &lt;/soap:Body&gt;&lt;/soap:Envelope&gt;';\n                               alert(soapRequest)\n                $.ajax({\n                    type: \"POST\",\n                    url: wsUrl,\n                    contentType: \"text/xml\",\n                    dataType: \"xml\",\n                    data: soapRequest,\n                    success: processSuccess,\n                    error: processError\n                });\n\n            });\n        });\n\n        function processSuccess(data, status, req) { alert('success');\n            if (status == \"success\")\n                $(\"#response\").text($(req.responseXML).find(\"Result\").text());\n\n                alert(req.responseXML);\n        }\n\n        function processError(data, status, req) {\n        alert('err'+data.state);\n            //alert(req.responseText + \" \" + status);\n        } \n\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h3&gt;\n        Calling Web Services with jQuery/AJAX\n    &lt;/h3&gt;\n    Enter your name:\n    &lt;input id=\"txtName\" type=\"text\" /&gt;\n    &lt;input id=\"btnCallWebService\" value=\"Call web service\" type=\"button\" /&gt;\n    &lt;div id=\"response\" &gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Hear is best JavaScript with SOAP tutorial with example.</p>\n\n<p><a href=\"http://www.codeproject.com/Articles/12816/JavaScript-SOAP-Client\" rel=\"nofollow\">http://www.codeproject.com/Articles/12816/JavaScript-SOAP-Client</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function SoapQuery(){\n  var namespace = \"http://tempuri.org/\";\n  var site = \"http://server.com/Service.asmx\";\n  var xmlhttp = new ActiveXObject(\"Msxml2.ServerXMLHTTP.6.0\");\n  xmlhttp.setOption(2,  13056 );  /* if use standard proxy */\n  var args,fname =  arguments.callee.caller.toString().match(/ ([^\\(]+)/)[1]; /*\u0418\u043c\u044f \u0432\u044b\u0437\u0432\u0430\u0432\u0448\u0435\u0439 \u0444-\u0446\u0438\u0438*/\n  try { args =   arguments.callee.caller.arguments.callee.toString().match(/\\(([^\\)]+)/)[1].split(\",\");  \n    } catch (e) { args = Array();};\n  xmlhttp.open('POST',site,true);  \n  var i, ret = \"\", q = '&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;'+\n   '&lt;soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\"&gt;'+\n   '&lt;soap:Body&gt;&lt;'+fname+ ' xmlns=\"'+namespace+'\"&gt;';\n  for (i=0;i&lt;args.length;i++) q += \"&lt;\" + args[i] + \"&gt;\" + arguments.callee.caller.arguments[i] +  \"&lt;/\" + args[i] + \"&gt;\";\n  q +=   '&lt;/'+fname+'&gt;&lt;/soap:Body&gt;&lt;/soap:Envelope&gt;';\n            // Send the POST request\n            xmlhttp.setRequestHeader(\"MessageType\",\"CALL\");\n            xmlhttp.setRequestHeader(\"SOAPAction\",namespace + fname);\n            xmlhttp.setRequestHeader('Content-Type', 'text/xml');\n            //WScript.Echo(\"\u0417\u0430\u043f\u0440\u043e\u0441 XML:\" + q);\n            xmlhttp.send(q);\n     if  (xmlhttp.waitForResponse(5000)) ret = xmlhttp.responseText;\n    return ret;\n  };\n\n\n\n\n\nfunction GetForm(prefix,post_vars){return SoapQuery();};\nfunction SendOrder2(guid,order,fio,phone,mail){return SoapQuery();};\n\nfunction SendOrder(guid,post_vars){return SoapQuery();};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You can use the <a href=\"https://github.com/doedje/jquery.soap\" rel=\"nofollow\">jquery.soap plugin</a> to do the work for you.</p>\n\n<blockquote>\n  <p>This script uses $.ajax to send a SOAPEnvelope. It can take XML DOM, XML string or JSON as input and the response can be returned as either XML DOM, XML string or JSON too.</p>\n</blockquote>\n\n<p>Example usage from the site:</p>\n\n<pre><code>$.soap({\n    url: 'http://my.server.com/soapservices/',\n    method: 'helloWorld',\n\n    data: {\n        name: 'Remy Blom',\n        msg: 'Hi!'\n    },\n\n    success: function (soapResponse) {\n        // do stuff with soapResponse\n        // if you want to have the response as JSON use soapResponse.toJSON();\n        // or soapResponse.toString() to get XML string\n        // or soapResponse.toXML() to get XML DOM\n    },\n    error: function (SOAPResponse) {\n        // show error\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Some great examples (and a ready-made JavaScript SOAP client!) here:\n<a href=\"http://plugins.jquery.com/soap/\" rel=\"nofollow\">http://plugins.jquery.com/soap/</a></p>\n\n<p>Check the readme, and beware the same-origin browser restriction.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>What is the simplest SOAP example using Javascript?</p>\n\n<p>To be as useful as possible, the answer should:</p>\n\n<ul>\n<li>Be functional (in other words actually work)</li>\n<li>Send at least one parameter that can be set elsewhere in the code</li>\n<li>Process at least one result value that can be read elsewhere in the code</li>\n<li>Work with most modern browser versions</li>\n<li>Be as clear and as short as possible, without using an external library</li>\n</ul>\n",
            "last_activity_date": 1423170654,
            "question_id": 124269,
            "score": 118,
            "tags": [
                "javascript",
                "soap"
            ],
            "title": "Simplest SOAP example"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>in IE, you can use</p>\n\n<pre><code>event.returnValue = false;\n</code></pre>\n\n<p>to achieve the same result.</p>\n\n<p>And in order not to get an error, you can test for the existence of preventDefault:</p>\n\n<pre><code>if(event.preventDefault) event.preventDefault();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 302
                },
                {
                    "body": "<p>Mootools redefines preventDefault in Event objects. So your code should work fine on every browser. If it doesn't, then there's a problem with ie8 support in mootools.</p>\n\n<p>Did you test your code on ie6 and/or ie7?</p>\n\n<p>The doc says </p>\n\n<blockquote>\n  <p>Every event added with addEvent gets the mootools method automatically, without the need to manually instance it.</p>\n</blockquote>\n\n<p>but in case it doesn't, you might want to try</p>\n\n<pre><code>new Event(event).preventDefault();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here's a function I've been testing with jquery 1.3.2 and 09-18-2009's nightly build. Let me know your results with it. Everything executes fine on this end in Safari, FF, Opera on OSX. It is exclusively for fixing a problematic IE8 bug, and may have unintended results:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function ie8SafePreventEvent(e) {\n    if (e.preventDefault) {\n        e.preventDefault()\n    } else {\n        e.stop()\n    };\n\n    e.returnValue = false;\n    e.stopPropagation();\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$('a').click(function (e) {\n    // Execute code here\n    ie8SafePreventEvent(e);\n    return false;\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you bind the event though mootools addEvent function your event handler will get a fixed event passed as the parameter. It will always contain the preventDefault() method.</p>\n\n<p>Try out this fiddle too see the difference in event binding.\n<a href=\"http://jsfiddle.net/pFqrY/8/\">http://jsfiddle.net/pFqrY/8/</a></p>\n\n<p>For all <strong>jQuery</strong> users out there you can fix an event when needed. Say that you used HTML onclick=\"..\" and get a IE specific event that lacks preventDefault(), just use this code to get it.</p>\n\n<pre><code>e = $.event.fix(e);\n</code></pre>\n\n<p>After that e.preventDefault(); works just fine in all browsers including IE.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<pre class=\"lang-js prettyprint-override\"><code>if (e.preventDefault) {\n    e.preventDefault();\n} else {\n    e.returnValue = false;\n}\n</code></pre>\n\n<p>Tested on IE 9 and Chrome.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>To disable a keyboard key after IE9, use : <code>e.preventDefault();</code></p>\n\n<p>To disable a <strong>regular keyboard key</strong> under IE7/8, use : <code>e.returnValue = false;</code> or <code>return false;</code></p>\n\n<p>If you try to disable a <strong>keyboard shortcut</strong> (with Ctrl, like <code>Ctrl+F</code>) you need to add those lines :</p>\n\n<pre><code>try {\n    e.keyCode = 0;\n}catch (e) {}\n</code></pre>\n\n<p>Here is a full example for IE7/8 only :</p>\n\n<pre><code>document.attachEvent(\"onkeydown\", function () {\n    var e = window.event;\n\n    //Ctrl+F or F3\n    if (e.keyCode === 114 || (e.ctrlKey &amp;&amp; e.keyCode === 70)) {\n        //Prevent for Ctrl+...\n        try {\n            e.keyCode = 0;\n        }catch (e) {}\n\n        //prevent default (could also use e.returnValue = false;)\n        return false;\n    }\n});\n</code></pre>\n\n<p>Reference : <a href=\"http://social.msdn.microsoft.com/Forums/ie/en-US/0d69b007-34de-4d7c-b8fc-fe7bb88b95d4/how-to-disable-keyboard-shortcuts-in-ie7-ie8?forum=iewebdevelopment\" rel=\"nofollow\">How to disable keyboard shortcuts in IE7 / IE8</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know this is quite an old post but I just spent some time trying to make this work in IE8.</p>\n\n<p>It appears that there are some differences in IE8 versions because solutions posted here and in other threads didn't work for me.</p>\n\n<p>Let's say that we have this code:</p>\n\n<pre><code>$('a').on('click', function(event) {\n    event.preventDefault ? event.preventDefault() : event.returnValue = false;\n});\n</code></pre>\n\n<p>In my IE8 <code>preventDefault()</code> method exists because of jQuery, but is not working (probably because of the point below), so this will fail.</p>\n\n<p>Even if I set <code>returnValue</code> property directly to false:</p>\n\n<pre><code>$('a').on('click', function(event) {\n    event.returnValue = false;\n    event.preventDefault();\n});\n</code></pre>\n\n<p>This also won't work, because I just set some property of jQuery custom event object.</p>\n\n<p>Only solution that works for me is to set property <code>returnValue</code> of <strong>global variable</strong> <code>event</code> like this:</p>\n\n<pre><code>$('a').on('click', function(event) {\n    if (window.event) {\n        window.event.returnValue = false;\n    }\n    event.preventDefault();\n});\n</code></pre>\n\n<p>Just to make it easier for someone who will try to convince IE8 to work. I hope that IE8 will die horribly in painful death soon.</p>\n\n<p><strong>UPDATE:</strong></p>\n\n<p>As <a href=\"http://stackoverflow.com/users/22550/sv-in\">sv_in</a> points out, you could use <code>event.originalEvent</code> to get original event object and set <code>returnValue</code> property in the original one. But I haven't tested it in my IE8 yet.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><code>return false</code> in your listener should work in all browsers.</p>\n\n<pre><code>$('orderNowForm').addEvent('submit', function () {\n    // your code\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For some updated information, From <a href=\"https://msdn.microsoft.com/en-us/library/ff975460%28v=vs.85%29.aspx\" rel=\"nofollow\">msdn - preventDefault method</a>,</p>\n\n<p>Cancels the default action of an event. </p>\n\n<p>Remarks</p>\n\n<ul>\n<li>If an event is cancelable, the preventDefault method signifies that the event should be canceled. Any event handler can cancel the default action. If the event cannot be canceled, this method has no effect.</li>\n<li>A call to this method is similar to setting the returnValue event property to false in Windows Internet Explorer 8 and earlier versions.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Following is my javascript (mootools) code:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$('orderNowForm').addEvent('submit', function (event) {\n    event.preventDefault();\n    allFilled = false;\n    $$(\".required\").each(function (inp) {\n        if (inp.getValue() != '') {\n            allFilled = true;\n        }\n    });\n\n    if (!allFilled) {\n        $$(\".errormsg\").setStyle('display', '');\n        return;\n    } else {\n        $$('.defaultText').each(function (input) {\n            if (input.getValue() == input.getAttribute('title')) {\n                input.setAttribute('value', '');\n            }\n        });\n    }\n\n    this.send({\n        onSuccess: function () {\n            $('page_1_table').setStyle('display', 'none');\n            $('page_2_table').setStyle('display', 'none');\n            $('page_3_table').setStyle('display', '');\n        }\n    });\n});\n</code></pre>\n\n<p>In all browsers except IE, this works fine. But in IE, this cause error. I have IE8 so while using its javascript debugger, I found out that the <code>event</code> object does not have a <code>preventDefault</code> method which is causing the error and so the form is getting submitted. The method is supported in case of firefox (which I found out using firebug).</p>\n\n<p>Any Help?</p>\n",
            "last_activity_date": 1426110040,
            "question_id": 1000597,
            "score": 127,
            "tags": [
                "javascript",
                "events",
                "mootools",
                "preventdefault"
            ],
            "title": "event.preventDefault() function not working in IE."
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<h1>Short 'n Sweet</h1>\n\n<pre><code>function escapeRegExp(str) {\n  return str.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&amp;\");\n}\n</code></pre>\n\n<p>See <a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Guide/Regular_Expressions\">MDN: Javascript Guide: Regular Expressions</a></p>\n\n<pre><code>escapeRegExp(\"All of these should be escaped: \\ ^ $ * + ? . ( ) | { } [ ]\");\n\n&gt;&gt;&gt; \"All of these should be escaped: \\\\ \\^ \\$ \\* \\+ \\? \\. \\( \\) \\| \\{ \\} \\[ \\] \"\n</code></pre>\n\n<p>Other symbols (~`!@# ...) MAY be escaped without consequence, but are not required to be.</p>\n\n<p>.</p>\n\n<p>.</p>\n\n<p>.</p>\n\n<p>.</p>\n\n<h2>Test Case: A typical url</h2>\n\n<pre><code>escapeRegExp(\"/path/to/resource.html?search=query\");\n\n&gt;&gt;&gt; \"\\/path\\/to\\/resource\\.html\\?search=query\"\n</code></pre>\n\n<h1>The Long Answer</h1>\n\n<p>If you're going to use the function above at least link to this stack overflow post in your code's documentation so that it doesn't look like crazy hard-to-test voodoo.</p>\n\n<pre><code>var escapeRegExp;\n\n(function () {\n  // Referring to the table here:\n  // https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/regexp\n  // these characters should be escaped\n  // \\ ^ $ * + ? . ( ) | { } [ ]\n  // These characters only have special meaning inside of brackets\n  // they do not need to be escaped, but they MAY be escaped\n  // without any adverse effects (to the best of my knowledge and casual testing)\n  // : ! , = \n  // my test \"~!@#$%^&amp;*(){}[]`/=?+\\|-_;:'\\\",&lt;.&gt;\".match(/[\\#]/g)\n\n  var specials = [\n        // order matters for these\n          \"-\"\n        , \"[\"\n        , \"]\"\n        // order doesn't matter for any of these\n        , \"/\"\n        , \"{\"\n        , \"}\"\n        , \"(\"\n        , \")\"\n        , \"*\"\n        , \"+\"\n        , \"?\"\n        , \".\"\n        , \"\\\\\"\n        , \"^\"\n        , \"$\"\n        , \"|\"\n      ]\n\n      // I choose to escape every character with '\\'\n      // even though only some strictly require it when inside of []\n    , regex = RegExp('[' + specials.join('\\\\') + ']', 'g')\n    ;\n\n  escapeRegExp = function (str) {\n    return str.replace(regex, \"\\\\$&amp;\");\n  };\n\n  // test escapeRegExp(\"/path/to/res?search=this.that\")\n}());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 274
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript\">Is there a RegExp.escape function in Javascript?</a>  </p>\n</blockquote>\n\n\n\n<p>I am trying to build a javascript regex based on user input:</p>\n\n<pre>\nfunction FindString(input) {\n    var reg = new RegExp('' + input + '');\n    // [snip] perform search\n}\n</pre>\n\n<p>But the regex will not work correctly when the user input contains a <code>?</code> or <code>*</code> because they are interpreted as regex specials. In fact, if the user puts an unbalanced <code>(</code> or <code>[</code> in their string, the regex isn't even valid.</p>\n\n<p>What is the javascript function to correctly escape all special characters for use in regex?</p>\n",
            "last_activity_date": 1384105778,
            "question_id": 3446170,
            "score": 108,
            "tags": [
                "javascript",
                "regex",
                "escaping"
            ],
            "title": "Escape string for use in Javascript regex"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>You can't style a pseudo-class on a particular element alone, in the same way that you can't have a pseudo-class in an inline style=\"...\" attribute (as there is no selector).</p>\n\n<p>You can do it by altering the stylesheet, for example by adding the rule:</p>\n\n<pre><code>#elid:hover { background: red; }\n</code></pre>\n\n<p>assuming each element you want to affect has a unique ID to allow it to be selected.</p>\n\n<p>In theory the document you want is <a href=\"http://www.w3.org/TR/DOM-Level-2-Style/Overview.html\">http://www.w3.org/TR/DOM-Level-2-Style/Overview.html</a> which means you can (given a pre-existing embedded or linked stylesheet) using syntax like:</p>\n\n<pre><code>document.styleSheets[0].insertRule('#elid:hover { background-color: red; }', 0);\ndocument.styleSheets[0].cssRules[0].style.backgroundColor= 'red';\n</code></pre>\n\n<p>IE, of course, requires its own syntax:</p>\n\n<pre><code>document.styleSheets[0].addRule('#elid:hover', 'background-color: red', 0);\ndocument.styleSheets[0].rules[0].style.backgroundColor= 'red';\n</code></pre>\n\n<p>Older and minor browsers are likely not to support either syntax. Dynamic stylesheet-fiddling is rarely done because it's quite annoying to get right, rarely needed, and historically troublesome.</p>\n",
                    "is_accepted": false,
                    "score": 128
                },
                {
                    "body": "<p>As already stated this is not something that browsers support.</p>\n\n<p>If you aren't coming up with the styles dynamically (i.e. pulling them out of a database or something) you should be able to work around this by adding a class to the body of the page.</p>\n\n<p>The css would look something like:</p>\n\n<pre><code>a:hover { background: red; }\n.theme1 a:hover { background: blue; }\n</code></pre>\n\n<p>And the javascript to change this would be something like:</p>\n\n<pre><code>// Look up some good add/remove className code if you want to do this\n// This is really simplified\n\ndocument.body.className += \" theme1\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A function to cope with the cross-browser stuff:</p>\n\n<pre><code>addCssRule = function(/* string */ selector, /* string */ rule) {\n  if (document.styleSheets) {\n    if (!document.styleSheets.length) {\n      var head = document.getElementsByTagName('head')[0];\n      head.appendChild(bc.createEl('style'));\n    }\n\n    var i = document.styleSheets.length-1;\n    var ss = document.styleSheets[i];\n\n    var l=0;\n    if (ss.cssRules) {\n      l = ss.cssRules.length;\n    } else if (ss.rules) {\n      // IE\n      l = ss.rules.length;\n    }\n\n    if (ss.insertRule) {\n      ss.insertRule(selector + ' {' + rule + '}', l);\n    } else if (ss.addRule) {\n      // IE\n      ss.addRule(selector, rule, l);\n    }\n  }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Instead of directly setting pseudo-class rules with javascript, you can set the rules differently in different CSS files, and then use Javascript to switch one stylesheet off and to switch another on. A method is described at <a href=\"http://www.alistapart.com/articles/alternate\" rel=\"nofollow\">A List Apart</a> (qv. for more detail).</p>\n\n<p>Set up the CSS files as,</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" href=\"always_on.css\"&gt;\n&lt;link rel=\"stylesheet\" title=\"usual\" href=\"preferred.css\"&gt; &lt;!-- on by default --&gt;\n&lt;link rel=\"alternate stylesheet\" title=\"strange\" href=\"alternate.css\"&gt; &lt;!-- off by default --&gt;\n</code></pre>\n\n<p>And then switch between them using javascript:</p>\n\n<pre><code>function setActiveStyleSheet(title) {\n   var i, a, main;\n   for(i=0; (a = document.getElementsByTagName(\"link\")&lt;i&gt;); i++) {\n     if(a.getAttribute(\"rel\").indexOf(\"style\") != -1\n        &amp;&amp; a.getAttribute(\"title\")) {\n       a.disabled = true;\n       if(a.getAttribute(\"title\") == title) a.disabled = false;\n     }\n   }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Switching stylesheets in and out is the way to do it.   Here is a library to build stylesheets dynamically, so you can set styles on the fly:</p>\n\n<p><a href=\"http://www.4pmp.com/2009/11/dynamic-css-pseudo-class-styles-with-jquery/\" rel=\"nofollow\">http://www.4pmp.com/2009/11/dynamic-css-pseudo-class-styles-with-jquery/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I threw together a <a href=\"https://github.com/Box9/jss\">small library for this</a> since I do think there are valid use cases for manipulating stylesheets in JS. Reasons being:</p>\n\n<ul>\n<li>Setting styles that must be calculated or retrieved - for example setting the user's preferred font-size from a cookie.</li>\n<li>Setting behavioural (not aesthetic) styles, especially for UI widget/plugin developers. Tabs, carousels, etc, often require some basic CSS simply to function - shouldn't <em>demand</em> a stylesheet for the core function.</li>\n<li>Better than inline styles since CSS rules apply to all current and future elements, and don't clutter the HTML when viewing in Firebug / Developer Tools.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>There is another alternative.  Instead of manipulating the pseudo-classes directly, create real classes that model the same things, like a \"hover\" class or a \"visited\" class.  Style the classes with the usual \".\" syntax and then you can use JavaScript to add or remove classes from an element when the appropriate event fires.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>My trick is using an attribute selector. Attributes are easier to set up by javascript. </p>\n\n<p><strong>css</strong></p>\n\n<pre><code>.class{ /*normal css... */}\n.class[special]:after{ content: 'what you want'}\n</code></pre>\n\n<p><strong>javascript</strong></p>\n\n<pre><code>  function setSpecial(id){ document.getElementById(id).setAttribute('special', '1'); }\n</code></pre>\n\n<p><strong>html</strong></p>\n\n<pre><code>&lt;element id='x' onclick=\"setSpecial(this.id)\"&gt; ...  \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I'm looking for a way to change the CSS rules for pseudo-class selectors (such as :link, :hover, etc.) from JavaScript.</p>\n\n<p>So an analogue of the CSS code: <code>a:hover { color: red }</code> in JS.</p>\n\n<p>I couldn't find the answer anywhere else; if anyone knows that this is something browsers do not support, that would be a helpful result as well.</p>\n",
            "last_activity_date": 1412666950,
            "question_id": 311052,
            "score": 72,
            "tags": [
                "javascript",
                "css",
                "pseudo-class"
            ],
            "title": "Setting CSS pseudo-class rules from JavaScript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Gets the current page URL:</p>\n\n<pre><code>window.location.href\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 187
                },
                {
                    "body": "<p>Use:</p>\n\n<pre><code>alert(document.URL);\n</code></pre>\n\n<p>See <em><a href=\"http://www.w3.org/TR/DOM-Level-2-HTML/html.html#ID-46183437\">URL of type DOMString, readonly</a></em>.</p>\n",
                    "is_accepted": true,
                    "score": 1439
                },
                {
                    "body": "<p>The same question <a href=\"http://stackoverflow.com/questions/1029387/request-address-in-javascript\">has been asked less than 24 hours ago</a>. To quote myself:</p>\n\n<blockquote>\n  <p>Use <code>window.location</code> for read and\n  write access to the <a href=\"https://developer.mozilla.org/En/DOM/Window.location#Location%5Fobject\">location\n  object</a>\n  associated with the current frame. If\n  you just want to get the address as a\n  read-only string, you may use\n  <code>document.URL</code>, which should contain\n  the same value as\n  <code>window.location.href</code>.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 242
                },
                {
                    "body": "<pre><code>var currentPageUrlIs = \"\";\nif (typeof this.href != \"undefined\") {\n       currentPageUrlIs = this.href.toString().toLowerCase(); \n}else{ \n       currentPageUrlIs = document.location.toString().toLowerCase();\n}\n</code></pre>\n\n<p>The above code can also help someone </p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>JavaScript provides you many methods to retrieve and change the current URL which is displayed in browser's address bar. All these methods uses the Location object, which is  a property of the Window object. You can create a new Location object that has the current URL as follows:</p>\n\n<pre><code>var currentLocation = window.location;\n</code></pre>\n\n<p><strong>Basic Structure of a URL</strong></p>\n\n<pre><code>&lt;protocol&gt;//&lt;hostname&gt;:&lt;port&gt;/&lt;pathname&gt;&lt;search&gt;&lt;hash&gt;\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/4kiBE.jpg\" alt=\"enter image description here\"></p>\n\n<ol>\n<li><p>Protocol -- Specifies the protocol name be used to access the resource on the Internet. (HTTP (without SSL) or HTTPS (with SSL))</p></li>\n<li><p>hostname -- Host name specifies the host that owns the resource. For example, www.stackoverflow.com. A server provides services using the name of the host.</p></li>\n<li><p>port -- A port number used to recognize a specific process to which an Internet or other network message is to be forwarded when it arrives at a server.</p></li>\n<li><p>pathname -- The path gives info about the specific resource within the host that the Web client wants to access. For example, stackoverflow.com/index.html.</p></li>\n<li><p>query --  A query string follows the path component, and provides a string of information that the resource can utilize for some purpose (for example, as parameters for a search or as data to be processed). </p></li>\n<li><p>hash -- The anchor portion of a URL, includes the hash sign (#).</p></li>\n</ol>\n\n<p>With these Location object properties you can access all of these URL components</p>\n\n<ol>\n<li><strong>hash</strong>   -Sets or returns the anchor portion of a URL.  </li>\n<li><strong>host</strong>   -Sets\nor returns the hostname and port of a URL.   </li>\n<li><strong>hostname</strong>   -Sets or\nreturns the hostname of a URL.   </li>\n<li><strong>href</strong>   -Sets or returns the entire\nURL.  </li>\n<li><strong>pathname</strong>   -Sets or returns the path name of a URL.   </li>\n<li><strong>port</strong> -Sets or returns the port number the server uses for a URL.  </li>\n<li><strong>protocol</strong>   -Sets or returns the protocol of a URL.   </li>\n<li><strong>search</strong>   -Sets\nor returns the query portion of a URL</li>\n</ol>\n\n<p>I Hope you got your answer..</p>\n",
                    "is_accepted": false,
                    "score": 111
                },
                {
                    "body": "<p>Use: <code>window.location.href</code>.</p>\n\n<p>As noted above, <code>document.URL</code> <strong>doesn't update</strong> when updating <code>window.location</code>. See <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.URL\">MDN</a>.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>For complete URL with query strings:</p>\n\n<pre><code>document.location.toString().toLowerCase();\n</code></pre>\n\n<p>For host URL:</p>\n\n<pre><code>window.location\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Use : \"<strong>window.location.href</strong>\" or \"<strong>document.URL</strong>\"</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>How do I get the website URL?</p>\n\n<p>Not the URL as taken from a link. On the loading page, I want to get the full, current URL of the current web page and store its value in a variable.</p>\n",
            "last_activity_date": 1416226220,
            "question_id": 1034621,
            "score": 1084,
            "tags": [
                "javascript",
                "url",
                "window.location"
            ],
            "title": "Get current url in web browser"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p><strong>You can now do this in most \"modern\" browsers!</strong></p>\n\n<p>Here is the original article I read (posted July 10, 2010): <a href=\"http://spoiledmilk.com/blog/html5-changing-the-browser-url-without-refreshing-page/\">HTML5: Changing the browser-URL without refreshing page</a>.</p>\n\n<p>For a more in-depth look into pushState/replaceState/popstate (aka the HTML5 History API) <a href=\"https://developer.mozilla.org/en-US/docs/DOM/Manipulating_the_browser_history\">see the MDN docs</a>.</p>\n\n<p>TL;DR, you can do this:</p>\n\n<pre><code>window.history.pushState(\"object or string\", \"Title\", \"/new-url\");\n</code></pre>\n\n<p>See my answer to <a href=\"http://stackoverflow.com/questions/824349/modify-the-url-without-reloading-the-page/3354511#3354511\">Modify the URL without reloading the page</a> for a basic how-to.</p>\n",
                    "is_accepted": true,
                    "score": 375
                }
            ],
            "body": "<p>I either dreamt about chrome (dev channel) implementing a way to update the address bar via javascript (the path, not domain) without reloading the page or they really have done this.</p>\n\n<p>However, I can't find the article I <em>think</em> I read.</p>\n\n<p>Am I crazy or is there a way to do this (in Chrome)?</p>\n\n<p>p.s. I'm not talking about window.location.hash, et al. If the above exists <a href=\"http://stackoverflow.com/a/824356/160173\">the answer to this question</a> will be untrue.</p>\n",
            "last_activity_date": 1404147430,
            "question_id": 3338642,
            "score": 250,
            "tags": [
                "javascript",
                "ajax",
                "google-chrome"
            ],
            "title": "Updating address bar with new URL without hash or reloading the page"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Try parseInt.</p>\n\n<pre><code>var number = parseInt(\"10\", 10); //number will have value of 10.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Try parseInt function:</p>\n\n<pre><code>var number = parseInt(\"10\");\n</code></pre>\n\n<p>But there is a problem. If you try to convert \"010\" using parseInt function, it detects as octal number, and will return number 8. So, you need to specify a radix (from 2 to 36). In this case base 10.</p>\n\n<pre><code>parseInt(string, radix)\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>var result = parseInt(\"010\", 10) == 10; // Returns true\n\nvar result = parseInt(\"010\") == 10; // Returns false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 62
                },
                {
                    "body": "<p><strong>parseInt</strong> or <strong>unary plus</strong> or even <strong>parseFloat with floor</strong> or <strong>Math.round</strong></p>\n\n<p>parseInt:</p>\n\n<pre><code>var x = parseInt(\"1000\",10); // you want to use radix\n    // of 10 so you get a decimal number even with a leading 0\n</code></pre>\n\n<p>unary plus\nif your string is already in the form of an integer:</p>\n\n<pre><code>var x = +\"1000\";\n</code></pre>\n\n<p>if your string is or might be a float and you want an integer:</p>\n\n<pre><code>var x = Math.floor(\"1000.01\"); //floor automatically converts string to number\n</code></pre>\n\n<p>or, if you're going to be using Math.floor several times:</p>\n\n<pre><code>var floor = Math.floor;\nvar x = floor(\"1000.01\");\n</code></pre>\n\n<p>If you're the type who forgets to put the radix in when you call parseInt, you can use parseFloat and round it however you like. Here I use floor.</p>\n\n<pre><code>var floor = Math.floor;\nvar x = floor(parseFloat(\"1000.01\"));\n</code></pre>\n\n<p>Interestingly, Math.round (like Math.floor) will do a string to number conversion, so if you want the number rounded (or if you have an integer in the string), this is a great way, maybe my favorite:</p>\n\n<pre><code>var round = Math.round;\nvar x = round(\"1000\"); //equivalent to round(\"1000\",0)\n</code></pre>\n\n<p>You don't see this much. valueOf is used mostly internally, according to w3c</p>\n\n<pre><code>var x = \"1000\".valueOf();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 674
                },
                {
                    "body": "<p>Also as a side note: Mootools has the function toInt() which is used on any native string (or float (or integer)).</p>\n\n<pre><code>\"2\".toInt()   // 2\n\"2px\".toInt() // 2\n2.toInt()     // 2\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Beware if you use parseInt to convert a float in scientific notation!\nFor example:</p>\n\n<pre><code>parseInt(\"5.6e-14\") \n</code></pre>\n\n<p>will result in</p>\n\n<pre><code>5 \n</code></pre>\n\n<p>instead of</p>\n\n<pre><code>0\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>ParseInt() and + are different</p>\n\n<pre><code>parseInt(\"10.3456\") // returns 10\n\n+\"10.3456\" // returns 10.3456\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>I posted the wrong answer here, sorry.  fixed.</p>\n\n<p>This is an old question, but I love this trick:</p>\n\n<pre><code>~~\"2.123\"; //2\n~~\"5\"; //5\n</code></pre>\n\n<p>The double bitwise negative drops off anything after the decimal point AND converts it to a number format. I've been told it's slightly faster than calling functions and whatnot, but I'm not entirely convinced.</p>\n\n<p>EDIT: Another method I just saw <a href=\"http://stackoverflow.com/questions/3081987/what-good-does-zero-fill-bit-shifting-by-0-do-a-0/3082073#3082073\">here</a> (a question about the javascript >>> operator, which is a zero-fill right shift) which shows that shifting a number by 0 with this operator converts the number to a <strong>uint32</strong> which is nice if you also want it <strong>unsigned</strong>.  Again, this converts to an <strong>unsigned integer</strong>, which can lead to strange behaviors if you use a signed number.</p>\n\n<pre><code>\"-2.123\" &gt;&gt;&gt; 0; // 4294967294\n\"2.123\" &gt;&gt;&gt; 0; // 2\n\"-5\" &gt;&gt;&gt; 0; // 4294967291\n\"5\" &gt;&gt;&gt; 0; // 5\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>There are two main ways to convert a string to a number in javascript.  One way is to parse it and the other way is to change its type to a Number.  All of the tricks in the other answers (e.g. unary plus) involve implicitly coercing the type of the string to a number.  You can also do the same thing explicitly with the Number function.</p>\n\n<p><strong>Parsing</strong></p>\n\n<pre><code>var parsed = parseInt(\"97\", 10);\n</code></pre>\n\n<p>parseInt and parseFloat are the two functions used for parsing strings to numbers.  Parsing will stop silently if it hits a character it doesn't recognise, which can be useful for parsing strings like \"92px\", but it's also somewhat dangerous, since it won't give you any kind of error on bad input, instead you'll get back NaN unless the string starts with a number. Whitespace at the beginning of the string is ignored.  Here's an example of it doing something different to what you want, and giving no indication that anything went wrong:</p>\n\n<pre><code>var widgetsSold = parseInt(\"97,800\", 10); // widgetsSold is now 97\n</code></pre>\n\n<p>It's good practice to always specify the radix as the second argument.  In older browsers, if the string started with a 0, it would be interpreted as octal if the radix wasn't specified which took a lot of people by surprise.  The behaviour for hexadecimal is triggered by having the string start with 0x if no radix is specified, e.g. <code>0xff</code>. The standard actually changed with ecmascript 5, so modern browsers no longer trigger octal when there's a leading 0 if no radix has been specified.  parseInt understands radixes up to base 36, in which case both upper and lower case letters are treated as equivalent.</p>\n\n<p><strong>Changing the Type of a String to a Number</strong></p>\n\n<p>All of the other tricks mentioned above that don't use parseInt, involve implicitly coercing the string into a number.  I prefer to do this explicitly,</p>\n\n<pre><code>var cast = Number(\"97\");\n</code></pre>\n\n<p>This has different behavior to the parse methods (although it still ignores whitespace).  It's more strict: if it doesn't understand the whole of the string than it returns <code>NaN</code>, so you can't use it for strings like <code>97px</code>.  Since you want a primitive number rather than a Number wrapper object, make sure you don't put <code>new</code> in front of the Number function.</p>\n\n<p>Obviously, converting to a Number gives you a value that might be a float rather than an integer, so if you want an integer, you need to modify it.  There are a few ways of doing this:</p>\n\n<pre><code>var rounded = Math.floor(Number(\"97.654\"));  // other options are Math.ceil, Math.round\nvar fixed = Number(\"97.654\").toFixed(0); // rounded rather than truncated\nvar bitwised = Number(\"97.654\")|0;  // do not use for large numbers\n</code></pre>\n\n<p>Any bitwise operator (here I've done a bitwise or, but you could also do double negation as in an earlier answer or a bitshift) will convert the value to a 32bit integer, and most of them will convert to a signed integer.  Note that this <strong>will not do want you want for large integers</strong>.  If the integer cannot be represented in 32bits, it will wrap.  </p>\n\n<pre><code>~~\"3000000000.654\" === -1294967296\n// This is the same as\nNumber(\"3000000000.654\")|0\n\"3000000000.654\" &gt;&gt;&gt; 0 === 3000000000 // unsigned right shift gives you an extra bit\n\"300000000000.654\" &gt;&gt;&gt; 0 === 3647256576 // but still fails with larger numbers\n</code></pre>\n\n<p>To work correctly with larger numbers, you should use the rounding methods</p>\n\n<pre><code>Math.floor(\"3000000000.654\") === 3000000000\n// This is the same as\nMath.floor(Number(\"3000000000.654\"))\n</code></pre>\n\n<p>Bear in mind that all of these methods understand exponential notation, so <code>2e2</code> is <code>200</code> rather than NaN.  Also, Number understands \"Infinity\", while the parse methods don't.</p>\n\n<p><strong>Custom</strong></p>\n\n<p>It's unlikely that either of these methods do exactly what you want.  For example, usually I would want an error thrown if parsing fails, and I don't need support for Infinity, exponentials or leading whitespace.  Depending on your usecase, sometimes it makes sense to write a custom conversion function.</p>\n\n<p>Always check that the output of Number or one of the parse methods is the sort of number you expect.  You will almost certainly want to use <code>isNaN</code> to make sure the number is not NaN (usually the only way you find out that the parse failed).</p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>Though and old question, but maybe this can be helpful to someone.</p>\n\n<p>I use this way of converting string to <strike>int</strike> number</p>\n\n<pre><code>var str = \"25\";       // string\nvar number = str*1;   // number\n</code></pre>\n\n<p>So, when multiplying by 1, the value does not change, but js automatically returns a number.</p>\n\n<p>But as it is shown below, this should be used if you are sure that the <code>str</code> is a number, otherwise it will return NaN - not a number.</p>\n\n<p>you can create simple function to use, e.g.</p>\n\n<pre><code>function toNumber(str) {\n   return str*1;\n}\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/ICAj5.png\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>By using parsing method of JavaScript, you can convert <strong>string</strong> to <strong>integer</strong>:</p>\n\n<pre><code>var number = parseInt(\"11112\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do I convert a string into an integer in JavaScript?  </p>\n\n<p>Is it possible to do this automatically, or do I have to write a subroutine to do it manually?</p>\n",
            "last_activity_date": 1410263101,
            "question_id": 1133770,
            "score": 475,
            "tags": [
                "javascript",
                "string",
                "integer"
            ],
            "title": "How do I Convert a String into an Integer in JavaScript?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<pre><code>// create a new javascript Date object based on the timestamp\n// multiplied by 1000 so that the argument is in milliseconds, not seconds\nvar date = new Date(unix_timestamp*1000);\n// hours part from the timestamp\nvar hours = date.getHours();\n// minutes part from the timestamp\nvar minutes = \"0\" + date.getMinutes();\n// seconds part from the timestamp\nvar seconds = \"0\" + date.getSeconds();\n\n// will display time in 10:30:23 format\nvar formattedTime = hours + ':' + minutes.substr(minutes.length-2) + ':' + seconds.substr(seconds.length-2);\n</code></pre>\n\n<p>For more information regarding the Date object, please refer to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date\">MDN</a> or the <a href=\"http://ecma-international.org/ecma-262/5.1/#sec-15.9\">ES5 specification</a>.</p>\n",
                    "is_accepted": true,
                    "score": 563
                },
                {
                    "body": "<p>JavaScript works in milliseconds, so you'll first have to convert the UNIX timestamp from seconds to milliseconds.</p>\n\n<pre><code>var date = new Date([UNIX Timestamp] * 1000);\n// Manipulate JavaScript Date object here...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 60
                },
                {
                    "body": "<p>UNIX timestamp is number of <strong>seconds</strong> since 00:00:00 UTC on January 1, 1970 (according to <a href=\"http://en.wikipedia.org/wiki/Unix_time\" rel=\"nofollow\">Wikipedia</a>).</p>\n\n<p>Argument of Date object in Javascript is number of <strong>miliseconds</strong> since 00:00:00 UTC on January 1, 1970 (according to <a href=\"http://www.w3schools.com/jsref/jsref_setTime.asp\" rel=\"nofollow\">W3Schools Javascript documentation</a>).</p>\n\n<p>See code below for example:</p>\n\n<pre><code>    function tm(unix_tm) {\n        var dt = new Date(unix_tm*1000);\n        document.writeln(dt.getHours() + '/' + dt.getMinutes() + '/' + dt.getSeconds() + ' -- ' + dt + '&lt;br&gt;');\n\n    }\n\ntm(60);\ntm(86400);\n</code></pre>\n\n<p>gives:</p>\n\n<pre><code>1/1/0 -- Thu Jan 01 1970 01:01:00 GMT+0100 (Central European Standard Time)\n1/0/0 -- Fri Jan 02 1970 01:00:00 GMT+0100 (Central European Standard Time)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<pre><code>function timeConverter(UNIX_timestamp){\n  var a = new Date(UNIX_timestamp*1000);\n  var months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\n  var year = a.getFullYear();\n  var month = months[a.getMonth()];\n  var date = a.getDate();\n  var hour = a.getHours();\n  var min = a.getMinutes();\n  var sec = a.getSeconds();\n  var time = date + ',' + month + ' ' + year + ' ' + hour + ':' + min + ':' + sec ;\n  return time;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 85
                },
                {
                    "body": "<pre><code>function timeConverter(UNIX_timestamp){\n var a = new Date(UNIX_timestamp*1000);\n     var hour = a.getUTCHours();\n     var min = a.getUTCMinutes();\n     var sec = a.getUTCSeconds();\n     var time = hour+':'+min+':'+sec ;\n     return time;\n }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The problem with the aforementioned solutions is, that if hour, minute or second, has only one digit (i.e. 0-9), the time would be wrong, e.g. it could be 2:3:9, but it should rather be 02:03:09.</p>\n\n<p>According to <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/toLocaleTimeString\">this page</a> it seems to be a better solution to use Date's \"toLocaleTimeString\" method.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p><a href=\"http://www.esqsoft.com/javascript_examples/date-to-epoch.htm\" rel=\"nofollow\">http://www.esqsoft.com/javascript_examples/date-to-epoch.htm</a></p>\n\n<p>you need to <code>ParseInt</code> otherwise it wouldn't work:</p>\n\n<hr>\n\n<pre><code>if(!window.a) window.a = new Date();\n   var mEpoch = parseInt(UNIX_timestamp);\n   if(mEpoch&lt;10000000000) mEpoch *= 1000; \n   ------\n   a.setTime(mEpoch);\n   var year = a.getFullYear();\n   ...\n   return time;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Another way - from iso date.</p>\n\n<pre><code>var timestamp = 1293683278;\nvar date = new Date(timestamp*1000);\nvar iso = date.toISOString().match(/(\\d{2}:\\d{2}:\\d{2})/)\nalert(iso[1]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>// Format value as two digits 0 =&gt; 00, 1 =&gt; 01\nfunction twoDigits(value) {\n   if(value &lt; 10) {\n    return '0' + value;\n   }\n   return value;\n}\n\nvar date = new Date(unix_timestamp*1000);\n// display in format HH:MM:SS\nvar formattedTime = twoDigits(date.getHours()) \n      + ':' + twoDigits(date.getMinutes()) \n      + ':' + twoDigits(date.getSeconds());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I'm partial to Jacob Wright's <a href=\"https://github.com/jacwright/date.format\"><code>Date.format()</code></a> library, which implements JavaScript date formatting in the style of PHP's <a href=\"http://www.php.net/manual/en/function.date.php\"><code>date()</code></a> function.</p>\n\n<pre><code>new Date(unix_timestamp * 1000).format('h:i:s')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 47
                },
                {
                    "body": "<p>I'd think about using a lib like <a href=\"http://momentjs.com\" rel=\"nofollow\">momentjs.com</a>, that makes this really simple:</p>\n\n<p>Based on a unix timestamp:</p>\n\n<pre><code>var timestamp = moment.unix(1293683278);\nconsole.log( timestamp.format(\"HH/mm/ss\") );\n</code></pre>\n\n<p>Based on a mysql date string:</p>\n\n<pre><code>var now = moment(\"2010-10-10 12:03:15\");\nconsole.log( now.format(\"HH/mm/ss\") );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you want to convert unix time duration to real hours, minutes, seconds you could use next code:</p>\n\n<pre><code>var hours = Math.floor(timestamp / 60 / 60);\nvar minutes = Math.floor((timestamp - hours * 60 * 60) / 60);\nvar seconds = Math.floor(timestamp - hours * 60 * 60 - minutes * 60 );\nvar duration = hours + ':' + minutes + ':' + seconds;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The modern solution that doesn't need a 40Kb library.<br>\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\" rel=\"nofollow\">Intl.DateTimeFormat</a> is the non-culturally imperialistic way to format a date/time.   </p>\n\n<pre><code>// Setup once\nvar options = {\n    //weekday: 'long',\n    //month: 'short',\n    //year: 'numeric',\n    //day: 'numeric',\n    hour: 'numeric',\n    minute: 'numeric',\n    second: 'numeric'\n},\nintlDate = new Intl.DateTimeFormat( undefined, options );\n\n\n// Reusable formatter\nvar timeStamp = 1412743273;\nconsole.log( intlDate.format( new Date( 1000 * timeStamp ) ) );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am storing time in a MySQL database as a Unix timestamp and that gets sent to some Javascript, how would I get just the time out of it? Ex. HH/MM/SS</p>\n",
            "last_activity_date": 1416913270,
            "question_id": 847185,
            "score": 337,
            "tags": [
                "javascript",
                "timestamp"
            ],
            "title": "Convert a Unix timestamp to time in Javascript"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>From what I understand, removing a node directly does not work in Firefox, only Internet Explorer. So, to support Firefox, you have to go up to the parent to remove it's child.</p>\n\n<p>Ref: <a href=\"http://chiragrdarji.wordpress.com/2007/03/16/removedelete-element-from-page-using-javascript-working-in-firefoxieopera/\" rel=\"nofollow\">http://chiragrdarji.wordpress.com/2007/03/16/removedelete-element-from-page-using-javascript-working-in-firefoxieopera/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You may want to try the following code:</p>\n\n<pre><code>&lt;body&gt;\n    &lt;div&gt;\n        &lt;p id=\"one\"&gt;The 1st line.&lt;/p&gt;\n        &lt;p id=\"two\"&gt;The 2nd line.&lt;/p&gt;\n        &lt;p id=\"three\"&gt;The 3rd line.&lt;/p&gt;\n        &lt;button&gt;Remove the 3rd line.&lt;/button&gt;\n    &lt;/div&gt;\n    &lt;script type=\"text/javascript\" src=\"http://code.jquery.com/jquery-1.4.2.min.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        $(function () {\n            $(\"button\").click(function () {\n                $(\"#three\").remove();\n            });\n        });\n    &lt;/script&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Please refer to <a href=\"http://api.jquery.com/remove/\" rel=\"nofollow\">http://api.jquery.com/remove/</a> for details.</p>\n",
                    "is_accepted": false,
                    "score": -7
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en/DOM/element#Methods\" title=\"Gecko DOM Reference - element methods\">It's what the DOM supports</a>. Search that page for \"remove\" or \"delete\" and <a href=\"https://developer.mozilla.org/En/DOM/Node.removeChild\">removeChild</a> is the only one that removes a node.</p>\n",
                    "is_accepted": false,
                    "score": 77
                },
                {
                    "body": "<p>You could make a function that did the removing for you so that you wouldn't have to think about it every time.</p>\n\n<pre>\nfunction remove(id)\n{\n    return (elem=document.getElementById(id)).parentNode.removeChild(elem);\n}\n</pre>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>This one actually comes from FireFox... for once, IE was ahead of  the pack and allowed the removal of an element directly.</p>\n\n<p>This is just my assumption, but I believe the reason that you must remove a child through the parent is due to an issue with the way FireFox handled the reference.</p>\n\n<p>If you call an object to commit hari-kari directly, then immediately after it dies, you are still holding that reference to it.  This has the potential to create several nasty bugs... such as failing to remove it, removing it but keeping references to it that appear valid, or simply a memory leak.</p>\n\n<p>I believe that when they realized the issue, the work around was to remove an element through its parent because when the element is gone, you are now simply holding a reference to the parent.  This would stop all that unpleasantness, and (if closing down a tree node by node, for example) would 'zip-up' rather nicely.</p>\n\n<p>It should be an easily fixable bug, but as with many other things in web programming, the release was probably rushed, leading to this... and by the time the next version came around, enough people were using it that changing this would lead to breaking a bunch of code.</p>\n\n<p>Again, all of this is simply my guesswork.</p>\n\n<p>I do, however, look forward to the day when web programming finally gets a full spring cleaning, all these strange little idiosynchracies get cleaned up, and everyone starts playing by the same rules.</p>\n\n<p>Probably the day after my robot servant sues me for back wages.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Functions that use ele.parentNode.removeChild(ele) won't work for elements you've created but not yet inserted into the HTML.  Libraries like jQuery and Prototype wisely use a method like the following to evade that limitation.</p>\n\n<pre><code>_limbo = document.createElement('div');\nfunction deleteElement(ele){\n    _limbo.appendChild(ele);\n    _limbo.removeChild(ele);\n}\n</code></pre>\n\n<p>I think JavaScript works like that because the DOM's original designers held parent/child and previous/next navigation as a higher priority than the DHTML modifications that are so popular today.  Being able to read from one &lt;input type='text'> and write to another by relative location in the DOM was useful in the mid 90s, a time when the dynamic generation of entire HTML forms or interactive GUI elements was barely a twinkle in some developer's eye.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This is the best function to remove an element without script error:</p>\n\n<pre><code>function Remove(EId)\n{\n    return(EObj=document.getElementById(EId))?EObj.parentNode.removeChild(EObj):false;\n}\n</code></pre>\n\n<p>Note to <code>EObj=document.getElementById(EId)</code>.</p>\n\n<p>This is ONE equal sign not <code>==</code>.</p>\n\n<p>if element <code>EId</code> exists then the function removes it, otherwise it returns false, not <code>error</code>.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<pre><code>// http://javascript.crockford.com/memory/leak.html\n// cleans dom element to prevent memory leaks\nfunction domPurge(d) {\n    var a = d.attributes, i, l, n;\n    if (a) {\n        for (i = a.length - 1; i &gt;= 0; i -= 1) {\n            n = a[i].name;\n            if (typeof d[n] === 'function') {\n                d[n] = null;\n            }\n        }\n    }\n    a = d.childNodes;\n    if (a) {\n        l = a.length;\n        for (i = 0; i &lt; l; i += 1) {\n            domPurge(d.childNodes[i]);\n       }\n    }\n}\n\nfunction domRemove(id) {\n    var elem = document.getElementById(id);\n    domPurge(elem);\n    return elem.parentNode.removeChild(elem);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know that augmenting native DOM functions isn't always the best or most popular solution, but this works fine for modern browsers.</p>\n\n<pre><code>Element.prototype.remove = function() {\n    this.parentElement.removeChild(this);\n}\nNodeList.prototype.remove = HTMLCollection.prototype.remove = function() {\n    for(var i = 0, len = this.length; i &lt; len; i++) {\n        if(this[i] &amp;&amp; this[i].parentElement) {\n            this[i].parentElement.removeChild(this[i]);\n        }\n    }\n}\n</code></pre>\n\n<p>And then you can remove elements like this  </p>\n\n<pre><code>document.getElementById(\"my-element\").remove();\n</code></pre>\n\n<p>or</p>\n\n<pre><code>document.getElementsByClassName(\"my-elements\").remove();\n</code></pre>\n\n<p><strong>Note:</strong> this solution doesn't work for IE 7 and below. For more info about extending the DOM read this <a href=\"http://perfectionkills.com/whats-wrong-with-extending-the-dom/\">article</a>.</p>\n",
                    "is_accepted": false,
                    "score": 156
                },
                {
                    "body": "<p>Crossbrowser:</p>\n\n<pre><code>var element = document.getElementById(\"element-id\");\nelement.outerHTML = \"\";\ndelete element;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>you can just use <code>element.remove()</code></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>For removing one element:</p>\n\n<pre><code>var elem = document.getElementById(\"yourid\");\nelem.parentElement.removeChild(elem);\n</code></pre>\n\n<p>For removing all the elements with for example a certain class name:</p>\n\n<pre><code>var list = document.getElementByClassName(\"yourclassname\");\nfor(var i = list.length - 1; 0 &lt;= i; i--)\n    if(list[i] &amp;&amp; list[i].parentElement)\n        list[i].parentElement.removeChild(list[i]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>According to DOM level 4 specs, which is the current version in development, there are some new handy mutation methods available: <code>append()</code>, <code>prepend()</code>, <code>before()</code>, <code>after()</code>, <code>replace()</code>, and <code>remove()</code>.</p>\n\n<p><a href=\"http://red-team-design.com/removing-an-element-with-plain-javascript-remove-method/\" rel=\"nofollow\">http://red-team-design.com/removing-an-element-with-plain-javascript-remove-method/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The DOM is organized in a tree of nodes, where each node has a value, along with a list of references to its child nodes. So <code>element.parentNode.removeChild(element)</code> mimics exactly what is happening internally: First you go the the parent node, then remove the reference to the child node.</p>\n\n<p>As of DOM4, a helper function is provided to do the same thing: <a href=\"https://developer.mozilla.org/en/docs/Web/API/ChildNode.remove\" rel=\"nofollow\"><code>element.remove()</code></a>. This works in WebKit and Firefox, but not IE. If you need to support older browsers, you can:</p>\n\n<ul>\n<li>Remove elements via the parent node, as in <a href=\"https://www.google.com/search?q=What%20is%20the%20answer%20to%20the%20ultimate%20question%20of%20life,%20the%20universe,%20and%20everything%3F\" rel=\"nofollow\">the question</a>,</li>\n<li>modify the native DOM functions, as in <a href=\"https://stackoverflow.com/a/18120786/405550\">Johan Dettmar's answer</a>, or</li>\n<li>use a <a href=\"https://github.com/WebReflection/dom4#dom4\" rel=\"nofollow\">DOM4 polyfill</a>.</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 2
                }
            ],
            "body": "<p>When removing an element with standard JavaScript, you must go to it's parent first:</p>\n\n<pre><code>var element = document.getElementById(\"element-id\");\nelement.parentNode.removeChild(element);\n</code></pre>\n\n<p>Having to go to the parent node first seems a bit odd to me, is there a reason JavaScript works like this?</p>\n",
            "last_activity_date": 1425637318,
            "question_id": 3387427,
            "score": 344,
            "tags": [
                "javascript"
            ],
            "title": "Remove element by id"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Use an invisible <code>&lt;iframe&gt;</code>:</p>\n\n<pre><code>&lt;iframe id=my_iframe style='display:none;'&gt;\n&lt;script&gt;\nfunction Download(url) {\n    document.getElementById('my_iframe').src = url;\n};\n&lt;/script&gt;\n</code></pre>\n\n<p>To force the browser to download a file it would otherwise be capable of rendering (such as HTML or text files), you need the server to set the file's <a href=\"http://en.wikipedia.org/wiki/Internet_media_type\" rel=\"nofollow\">MIME Type</a> to a nonsensical value, such as <code>application/x-please-download-me</code> or alternatively <code>application/octet-stream</code>, which is used for arbitrary binary data.</p>\n\n<p>If you only want to open it in a new tab, the only way to do this is for the user to a click on a link with its <code>target</code> attribute set to <code>_blank</code>.</p>\n\n<p><strong>In jQuery:</strong></p>\n\n<pre><code>$('a#someID').attr({target: '_blank', \n                    href  : 'http://localhost/directory/file.pdf'});\n</code></pre>\n\n<p>Whenever that link is clicked, it will download the file in a new tab/window.</p>\n",
                    "is_accepted": true,
                    "score": 170
                },
                {
                    "body": "<p>I have created the <a href=\"http://johnculviner.com/post/2012/03/22/Ajax-like-feature-rich-file-downloads-with-jQuery-File-Download.aspx\">jQuery File Download plugin</a> (<a href=\"http://jqueryfiledownload.apphb.com/\">Demo</a>) (<a href=\"https://github.com/johnculviner/jquery.fileDownload\">GitHub</a>) which could also help with your situation. It works pretty similarly with an iframe but has some cool features that I have found quite handy:</p>\n\n<ul>\n<li><p>Very easy to setup with nice visuals (jQuery UI Dialog, but not required), everything is tested too</p></li>\n<li><p>User never leaves the same page they initiated a file download from. This feature is becoming crucial for modern web applications</p></li>\n<li><p>successCallback and failCallback functions allow for you to be explicit about what the user sees in either situation</p></li>\n<li><p>In conjunction with jQuery UI a developer can easily show a modal telling the user that a file download is occurring, disband the modal after the download starts or even inform the user in a friendly manner that an error has occurred. See the <a href=\"http://jqueryfiledownload.apphb.com/\">Demo</a> for an example of this. Hope this helps someone!</p></li>\n</ul>\n\n<p>Here is a simple use case demo using the plugin <a href=\"http://github.com/johnculviner/jquery.fileDownload/blob/master/src/Scripts/jquery.fileDownload.js\">source</a> with promises. The <a href=\"http://jqueryfiledownload.apphb.com/\">demo page</a> includes many other, 'better UX' examples as well.</p>\n\n<pre><code>$.fileDownload('some/file.pdf')\n    .done(function () { alert('File download a success!'); })\n    .fail(function () { alert('File download failed!'); });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 82
                },
                {
                    "body": "<p>If you are already using jQuery, you could take adventage of it to produce a smaller snippet<br>\nA jQuery version of Andrew's answer:</p>\n\n<pre><code>var $idown;  // Keep it outside of the function, so it's initialized once.\ndownloadURL : function(url) {\n  if ($idown) {\n    $idown.attr('src',url);\n  } else {\n    $idown = $('&lt;iframe&gt;', { id:'idown', src:url }).hide().appendTo('body');\n  }\n},\n//... How to use it:\ndownloadURL('http://whatever.com/file.pdf');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Using anchor tag and PHP it can be done, Check this answer</p>\n\n<p><a href=\"http://stackoverflow.com/questions/7578124/jquery-ajax-call-for-pdf-file-download/20840644#20840644\">JQuery Ajax call for PDF file download</a></p>\n\n<pre><code>HTML\n    &lt;a href=\"www.example.com/download_file.php?file_source=example.pdf\"&gt;Download pdf here&lt;/a&gt;\n\nPHP\n&lt;?php\n$fullPath = $_GET['fileSource'];\nif($fullPath) {\n    $fsize = filesize($fullPath);\n    $path_parts = pathinfo($fullPath);\n    $ext = strtolower($path_parts[\"extension\"]);\n    switch ($ext) {\n        case \"pdf\":\n        header(\"Content-Disposition: attachment; filename=\\\"\".$path_parts[\"basename\"].\"\\\"\"); // use 'attachment' to force a download\n        header(\"Content-type: application/pdf\"); // add here more headers for diff. extensions\n        break;\n        default;\n        header(\"Content-type: application/octet-stream\");\n        header(\"Content-Disposition: filename=\\\"\".$path_parts[\"basename\"].\"\\\"\");\n    }\n    if($fsize) {//checking if file size exist\n      header(\"Content-length: $fsize\");\n    }\n    readfile($fullPath);\n    exit;\n}\n?&gt;\n</code></pre>\n\n<p>I am checking for file size because if you load pdf from CDN cloudfront, you won`t get the size of document which forces the document to download in 0kb, To avoid this i am checking with this condition</p>\n\n<pre><code> if($fsize) {//checking if file size exist\n      header(\"Content-length: $fsize\");\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The answer submitted by hitesh on Dec 30 '13 does in fact work.  It just requires a little adjusting:</p>\n\n<p>The PHP file can call itself.  In other words, just create a file named saveAs.php, and put this code into it...</p>\n\n<pre><code>        &lt;a href=\"saveAs.php?file_source=YourDataFile.pdf\"&gt;Download pdf here&lt;/a&gt;\n\n    &lt;?php\n        if (isset($_GET['file_source'])) {\n            $fullPath = $_GET['file_source'];\n            if($fullPath) {\n                $fsize = filesize($fullPath);\n                $path_parts = pathinfo($fullPath);\n                $ext = strtolower($path_parts[\"extension\"]);\n                switch ($ext) {\n                    case \"pdf\":\n                    header(\"Content-Disposition: attachment; filename=\\\"\".$path_parts[\"basename\"].\"\\\"\"); // use 'attachment' to force a download\n                    header(\"Content-type: application/pdf\"); // add here more headers for diff. extensions\n                    break;\n                    default;\n                    header(\"Content-type: application/octet-stream\");\n                    header(\"Content-Disposition: filename=\\\"\".$path_parts[\"basename\"].\"\\\"\");\n                }\n                if($fsize) {//checking if file size exist\n                  header(\"Content-length: $fsize\");\n                }\n                readfile($fullPath);\n                exit;\n            }\n        }\n    ?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function downloadURI(uri, name) \n{\n    var link = document.createElement(\"a\");\n    link.download = name;\n    link.href = uri;\n    link.click();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>These functions are used in <a href=\"https://github.com/stacktracejs/stacktrace.js/\" rel=\"nofollow\">stacktrace.js</a>:</p>\n\n<pre><code>/**\n * Try XHR methods in order and store XHR factory.\n *\n * @return &lt;Function&gt; XHR function or equivalent\n */\nvar createXMLHTTPObject = function() {\n    var xmlhttp, XMLHttpFactories = [\n        function() {\n            return new XMLHttpRequest();\n        }, function() {\n            return new ActiveXObject('Msxml2.XMLHTTP');\n        }, function() {\n            return new ActiveXObject('Msxml3.XMLHTTP');\n        }, function() {\n            return new ActiveXObject('Microsoft.XMLHTTP');\n        }\n    ];\n    for (var i = 0; i &lt; XMLHttpFactories.length; i++) {\n        try {\n            xmlhttp = XMLHttpFactories[i]();\n            // Use memoization to cache the factory\n            createXMLHTTPObject = XMLHttpFactories[i];\n            return xmlhttp;\n        } catch (e) {\n        }\n    }\n}\n\n/**\n * @return the text from a given URL\n */\nfunction ajax(url) {\n    var req = createXMLHTTPObject();\n    if (req) {\n        try {\n            req.open('GET', url, false);\n            req.send(null);\n            return req.responseText;\n        } catch (e) {\n        }\n    }\n    return '';\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I suggest you use the mousedown event, which is called BEFORE the click event. That way, the browser handles the click event naturally, which avoids any code weirdness:</p>\n\n<pre><code>(function ($) {\n\n\n    // with this solution, the browser handles the download link naturally (tested in chrome and firefox)\n    $(document).ready(function () {\n\n        var url = '/private/downloads/myfile123.pdf';\n        $(\"a#someID\").on('mousedown', function () {\n            $(this).attr(\"href\", url);\n        });\n\n    });\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a very similar requirement specified <a href=\"http://stackoverflow.com/questions/1296085/download-file-using-jquery\">here</a></p>\n\n<p>I need to start download manually when <code>$('a#someID').click();</code></p>\n\n<p>But I cannot use <code>window.href</code> method, since it replaces the current page contents with the file you're trying to download. </p>\n\n<p>Instead I want to open the download in new window/tab. How is this possible?</p>\n",
            "last_activity_date": 1425423106,
            "question_id": 3749231,
            "score": 90,
            "tags": [
                "javascript",
                "jquery",
                "download"
            ],
            "title": "Download File Using Javascript/jQuery"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>One (slightly hacky) way to do it is replace and links that lead away from your site with an AJAX call to the server-side, indicating the user is leaving, then use that same javascript block to take the user to the external site they've requested.</p>\n\n<p>Of course this won't work if the user simply closes the browser window or types in a new URL.</p>\n\n<p>To get around that, you'd potentially need to use Javascript's setTimeout() on the page, making an AJAX call every few seconds (depending on how quickly you want to know if the user has left).</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Try the <code>onbeforeunload</code> event: It is fired just before the page is unloaded. It also allows you to ask back if the user really wants to leave. See the demo <em><a href=\"http://www.4guysfromrolla.com/demos/OnBeforeUnloadDemo1.htm\">onbeforeunload Demo</a></em>.</p>\n\n<p>Alternatively, you can send out an <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">Ajax</a> request when he leaves.</p>\n",
                    "is_accepted": true,
                    "score": 135
                },
                {
                    "body": "<p>Mozilla Developer Network has a nice description and example of <a href=\"https://developer.mozilla.org/en/DOM/window.onbeforeunload\">onbeforeunload</a>.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>For this I am using:</p>\n\n<pre><code>window.onbeforeunload = function (e) {\n\n}\n</code></pre>\n\n<p>It is fired just before the page is unloaded. </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I know this question has been answered, but in case you only want something to trigger when the actual BROWSER is closed, and not just when a pageload occurs, you can use this code:</p>\n\n<pre><code>window.onbeforeunload = function (e) {\n        if ((window.event.clientY &lt; 0)) {\n            //window.localStorage.clear();\n            //alert(\"Y coords: \" + window.event.clientY)\n        }\n};\n</code></pre>\n\n<p>In my example, I am clearing local storage and alerting the user with the mouses y coords, only when the browser is closed, this will be ignored on all page loads from within the program.</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>What is the best way to detect if a user leaves a web page?</p>\n\n<p>The <code>onunload</code> JavaScript event doesn't work every time (the HTTP request takes longer than the time required to terminate the browser).</p>\n\n<p>Creating one will probably be blocked by current browsers.</p>\n",
            "last_activity_date": 1397145037,
            "question_id": 147636,
            "score": 113,
            "tags": [
                "javascript"
            ],
            "title": "Best way to detect when a user leaves a web page?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You're specifying the wrong class name, try this instead:</p>\n\n<pre><code>$(\".fancybox\").fancybox({padding: 0});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could try something like this maybe:</p>\n\n<pre><code> $(document.body).append(\"&lt;a href='home/index' class='fancybox' onclick='showFancybox()'/&gt;\");\n</code></pre>\n\n<p>And then make a function to create and show Fancybox:</p>\n\n<pre><code>function showFancybox(){\n    $.fancybox(\n            '&lt;h2&gt;Hi!&lt;/h2&gt;&lt;p&gt;Content of popup&lt;/p&gt;',\n            {\n                    'autoDimensions'    : false,\n                'width'             : 350,\n                'height'            : 'auto',\n                'transitionIn'      : 'none',\n                'transitionOut'     : 'none'\n            }\n        );\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The easiest way to bind fancybox (v1.3.x) to dynamically added elements is:</p>\n\n<p>1: Upgrade to jQuery v1.7.x (if you haven't yet)</p>\n\n<p>2: Set your script using <a href=\"http://api.jquery.com/on/\">jQuery API <code>on()</code></a> + the <code>focusin</code> event. </p>\n\n<p>To make it work you need to find the <code>parent</code> element of your elements with <code>class=\"ajaxFancyBox\"</code> as per your code above (or the <code>parent</code> of the <code>parent</code> as you need it) and attach <code>jQuery on()</code> to it so for example, having this html:</p>\n\n<pre><code>&lt;div id=\"container\"&gt;\n &lt;a class=\"ajaxFancyBox\" href=\"image01.jpg\"&gt;open image 01&lt;/a&gt;\n &lt;a class=\"ajaxFancyBox\" href=\"image02.jpg\"&gt;open image 02&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>.. we will apply <code>on()</code> and <code>focusin</code> event to the element with <code>id=\"container\"</code> (the <code>parent</code>) as in the example above, like:</p>\n\n<pre><code>$(\"#container\").on(\"focusin\", function(){\n $(\"a.ajaxFancyBox\").fancybox({\n  // fancybox API options here\n  'padding': 0\n }); // fancybox\n}); // on\n</code></pre>\n\n<p>You can apply any fancybox option as you need. Additionally you may have different scripts for different type of content (inside the <code>on()</code> method) like:</p>\n\n<pre><code>$(\"#container\").on(\"focusin\", function(){\n $(\"a.ajaxFancyBox\").fancybox({\n  // fancybox API options here\n  'padding': 0\n }); // fancybox\n $(\"a.iframeFancyBox\").fancybox({\n  // fancybox API options here\n  'padding': 0,\n  'width': 640,\n  'height': 320,\n  'type': 'iframe'\n }); // fancybox\n}); // on\n</code></pre>\n\n<p><strong>IMPORTANT</strong>: the example above won't work like that on Chrome. The <strong>workaround</strong> is to add the <code>tabindex</code> attribute to all of your elements bound to fancybox like</p>\n\n<pre><code>&lt;div id=\"container\"&gt;\n &lt;a tabindex=\"1\" class=\"ajaxFancyBox\" href=\"image01.jpg\"&gt;open image 01&lt;/a&gt;\n &lt;a tabindex=\"1\" class=\"ajaxFancyBox\" href=\"image02.jpg\"&gt;open image 02&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>that solves the issue and will work (as far as I know) in most browsers including IE7+.</p>\n\n<p><a href=\"http://picssel.com/playground/jquery/jQueryON_13dec11.html\">See my demo page here</a></p>\n\n<p><strong>UPDATE: March 07, 2012.</strong></p>\n\n<p>I was told that this method only works when you add new content to the page but not when you replace the content of the page.</p>\n\n<p>The method actually works on either of the two scenarios mentioned above. Just make sure that the new replacing content is also loaded inside the container where you applied the <code>.on()</code> method.</p>\n\n<p><a href=\"http://picssel.com/playground/jquery/jQueryONreplacingContent_07mar12.html\">See demo</a></p>\n\n<p>The <code>tabindex</code> workaround for Chrome also applies.</p>\n",
                    "is_accepted": true,
                    "score": 17
                },
                {
                    "body": "<p>I answered the question same like this you can find the answer at</p>\n\n<p><a href=\"http://stackoverflow.com/questions/3574100/appending-dynamically-generated-html-using-jquery-does-not-play-well-with-fancyb\">Appending dynamically generated html using jQuery does not play well with Fancybox</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As suggested in above comment , we can use following approach in this kind of problems ( binding element to dynamic elements ) -</p>\n\n<pre><code>$(\"#container\").on(\"focusin\", function(){\n\n    if($(this).hasClass(\"fancybox-bind\")){                //check if custom class exist \n       return 0;                                          //now fancybox event will not be binded\n    }else{                                                //add class to container\n        $(this).addClass(\"fancybox-bind\");\n    }\n\n    $(\"a.ajaxFancyBox\").fancybox({                        // fancybox API options here\n        'padding': 0\n    }); // fancybox\n\n   $(\"a.iframeFancyBox\").fancybox({                       // fancybox API options here\n     'padding': 0,\n     'width': 640,\n     'height': 320,\n     'type': 'iframe'\n   }); // fancybox\n}); // on\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>i use jquery fancybox 1.3.4 as pop form. </p>\n\n<p>but i found fancybox can't bind to element dynamic added. for example when i add a html element to current document. </p>\n\n<p>like this : \n  first i append a element to body use jquery,</p>\n\n<pre><code>  $(document.body).append(\"&lt;a href=\"home/index\" class=\"fancybox\"/&gt;\");\n</code></pre>\n\n<p>and i call fancybox,</p>\n\n<pre><code>  $(\".ajaxFancyBox\").fancybox({padding: 0});\n</code></pre>\n\n<p>but fancybox don't work with dynamic added element.</p>\n\n<p>and i can't call fancybox from this element? </p>\n\n<p>i come from China. so my english is poor, please forgive me.</p>\n",
            "last_activity_date": 1414951978,
            "question_id": 9081571,
            "score": 9,
            "tags": [
                "javascript",
                "jquery",
                "fancybox"
            ],
            "title": "how to bind fancybox to dynamic added element?"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>It works in IE8. Open IE8's Developer Tools by hitting F12.</p>\n\n<pre><code>&gt;&gt;console.log('test')\nLOG: test\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>console.log is only available after you have opened the Developer Tools (F12 to toggle it open and closed).\nFunny thing is that after you've opened it, you can close it, then still post to it via console.log calls, and those will be seen when you reopen it.\nI'm thinking that is a bug of sorts, and may be fixed, but we shall see.</p>\n\n<p>I'll probably just use something like this:</p>\n\n<pre><code>function trace(s) {\n  if ('console' in self &amp;&amp; 'log' in console) console.log(s)\n  // the line below you might want to comment out, so it dies silent\n  // but nice for seeing when the console is available or not.\n  else alert(s)\n}\n</code></pre>\n\n<p>and even simpler:</p>\n\n<pre><code>function trace(s) {\n  try { console.log(s) } catch (e) { alert(s) }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 246
                },
                {
                    "body": "<p>It's worth noting that <code>console.log</code> in IE8 isn't a true Javascript function. It doesn't support the <code>apply</code> or <code>call</code> methods.</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>If you get \"undefined\" to all of your console.log calls, that probably means you still have an old firebuglite loaded (firebug.js).   It will override all the valid functions of IE8's console.log even though they do exist.  This is what happened to me anyway.</p>\n\n<p>Check for other code overriding the console object.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre>\nif (window.console && 'function' === typeof window.console.log) {\n    window.console.log(o);\n}\n</pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Even better for fallback is this:</p>\n\n<pre>\n<code>\n   var alertFallback = true;\n   if (typeof console === \"undefined\" || typeof console.log === \"undefined\") {\n     console = {};\n     if (alertFallback) {\n         console.log = function(msg) {\n              alert(msg);\n         };\n     } else {\n         console.log = function() {};\n     }\n   }\n</code>\n</pre>\n",
                    "is_accepted": true,
                    "score": 193
                },
                {
                    "body": "<p>I really like the approach posted by \"orange80\".  It's elegant because you can set it once and forget it.</p>\n\n<p>The other approaches require you to do something different (call something other than plain <code>console.log()</code> every time), which is just asking for trouble\u2026 I know that I'd eventually forget.</p>\n\n<p>I've taken it a step further, by wrapping the code in a utility function that you can call once at the beginning of your javascript, anywhere as long as it's before any logging.  (I'm installing this in my company's event data router product.  It will help simplify the cross-browser design of its new admin interface.)</p>\n\n\n\n<pre class=\"lang-js prettyprint-override\"><code>/**\n * Call once at beginning to ensure your app can safely call console.log() and\n * console.dir(), even on browsers that don't support it.  You may not get useful\n * logging on those browers, but at least you won't generate errors.\n * \n * @param  alertFallback - if 'true', all logs become alerts, if necessary. \n *   (not usually suitable for production)\n */\nfunction fixConsole(alertFallback)\n{    \n    if (typeof console === \"undefined\")\n    {\n        console = {}; // define it if it doesn't exist already\n    }\n    if (typeof console.log === \"undefined\") \n    {\n        if (alertFallback) { console.log = function(msg) { alert(msg); }; } \n        else { console.log = function() {}; }\n    }\n    if (typeof console.dir === \"undefined\") \n    {\n        if (alertFallback) \n        { \n            // THIS COULD BE IMPROVED\u2026 maybe list all the object properties?\n            console.dir = function(obj) { alert(\"DIR: \"+obj); }; \n        }\n        else { console.dir = function() {}; }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>Assuming you don't care about a fallback to alert, here's an even more concise way to workaround Internet Explorer's shortcomings:</p>\n\n<pre><code>var console=console||{\"log\":function(){}};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>This is my take on the various answers. I wanted to actually see the logged messages, even if I did not have the IE console open when they were fired, so I push them into a <code>console.messages</code> array that I create. I also added a function <code>console.dump()</code> to facilitate viewing the whole log. <code>console.clear()</code> will empty the message queue.</p>\n\n<p>This solutions also \"handles\" the other Console methods (which I believe all originate from the <a href=\"http://getfirebug.com/wiki/index.php/Console_API\">Firebug Console API</a>) </p>\n\n<p>Finally, this solution is in the form of an <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\">IIFE</a>, so it does not pollute the global scope. The fallback function argument is defined at the bottom of the code.</p>\n\n<p>I just drop it in my master JS file which is included on every page, and forget about it.</p>\n\n<pre><code>(function (fallback) {    \n\n    fallback = fallback || function () { };\n\n    // function to trap most of the console functions from the FireBug Console API. \n    var trap = function () {\n        // create an Array from the arguments Object           \n        var args = Array.prototype.slice.call(arguments);\n        // console.raw captures the raw args, without converting toString\n        console.raw.push(args);\n        var message = args.join(' ');\n        console.messages.push(message);\n        fallback(message);\n    };\n\n    // redefine console\n    if (typeof console === 'undefined') {\n        console = {\n            messages: [],\n            raw: [],\n            dump: function() { return console.messages.join('\\n'); },\n            log: trap,\n            debug: trap,\n            info: trap,\n            warn: trap,\n            error: trap,\n            assert: trap,\n            clear: function() { \n                  console.messages.length = 0; \n                  console.raw.length = 0 ;\n            },\n            dir: trap,\n            dirxml: trap,\n            trace: trap,\n            group: trap,\n            groupCollapsed: trap,\n            groupEnd: trap,\n            time: trap,\n            timeEnd: trap,\n            timeStamp: trap,\n            profile: trap,\n            profileEnd: trap,\n            count: trap,\n            exception: trap,\n            table: trap\n        };\n    }\n\n})(null); // to define a fallback function, replace null with the name of the function (ex: alert)\n</code></pre>\n\n<h3>Some extra info</h3>\n\n<p>The line <code>var args = Array.prototype.slice.call(arguments);</code> creates an Array from the <code>arguments</code> Object. This is required because <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\">arguments is not really an Array</a>.</p>\n\n<p><code>trap()</code> is a default handler for any of the API functions.  I pass the arguments to <code>message</code> so that you get a log of the arguments that were passed to any API call (not just <code>console.log</code>). </p>\n\n<h3>Edit</h3>\n\n<p>I added an extra array <code>console.raw</code> that captures the arguments exactly as passed to <code>trap()</code>. I realized that <code>args.join(' ')</code> was converting objects to the string <code>\"[object Object]\"</code> which may sometimes be undesirable. Thanks <a href=\"http://stackoverflow.com/users/735926/bfontaine\">bfontaine</a> for the <a href=\"http://stackoverflow.com/review/suggested-edits/3077446\">suggestion</a>.</p>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>The best solution for any browser that lack a console is:</p>\n\n<pre><code>// Avoid `console` errors in browsers that lack a console.\n(function() {\n    var method;\n    var noop = function () {};\n    var methods = [\n        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',\n        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',\n        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',\n        'timeStamp', 'trace', 'warn'\n    ];\n    var length = methods.length;\n    var console = (window.console = window.console || {});\n\n    while (length--) {\n        method = methods[length];\n\n        // Only stub undefined methods.\n        if (!console[method]) {\n            console[method] = noop;\n        }\n    }\n}());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I found this on <a href=\"https://gist.github.com/sx/1793447\" rel=\"nofollow\">github</a>:</p>\n\n<pre><code>// usage: log('inside coolFunc', this, arguments);\n// paulirish.com/2009/log-a-lightweight-wrapper-for-consolelog/\nwindow.log = function f() {\n    log.history = log.history || [];\n    log.history.push(arguments);\n    if (this.console) {\n        var args = arguments,\n            newarr;\n        args.callee = args.callee.caller;\n        newarr = [].slice.call(args);\n        if (typeof console.log === 'object') log.apply.call(console.log, console, newarr);\n        else console.log.apply(console, newarr);\n    }\n};\n\n// make it safe to use console.log always\n(function(a) {\n    function b() {}\n    for (var c = \"assert,count,debug,dir,dirxml,error,exception,group,groupCollapsed,groupEnd,info,log,markTimeline,profile,profileEnd,time,timeEnd,trace,warn\".split(\",\"), d; !! (d = c.pop());) {\n        a[d] = a[d] || b;\n    }\n})(function() {\n    try {\n        console.log();\n        return window.console;\n    } catch(a) {\n        return (window.console = {});\n    }\n} ());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is my \"IE please don't crash\"</p>\n\n<pre><code>typeof console==\"undefined\"&amp;&amp;(console={});typeof console.log==\"undefined\"&amp;&amp;(console.log=function(){});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I'm using Walter's approach from above (see: <a href=\"http://stackoverflow.com/a/14246240/3076102\">http://stackoverflow.com/a/14246240/3076102</a>)</p>\n\n<p>I mix in a solution I found here <a href=\"http://stackoverflow.com/a/7967670\">http://stackoverflow.com/a/7967670</a> to properly show Objects. </p>\n\n<p>This means the trap function becomes:</p>\n\n<pre><code>function trap(){\n    if(debugging){\n        // create an Array from the arguments Object           \n        var args = Array.prototype.slice.call(arguments);\n        // console.raw captures the raw args, without converting toString\n        console.raw.push(args);\n        var index;\n        for (index = 0; index &lt; args.length; ++index) {\n            //fix for objects\n            if(typeof args[index] === 'object'){ \n                args[index] = JSON.stringify(args[index],null,'\\t').replace(/\\n/g,'&lt;br&gt;').replace(/\\t/g,'&amp;nbsp;&amp;nbsp;&amp;nbsp;');\n            }\n        }\n        var message = args.join(' ');\n        console.messages.push(message);\n        // instead of a fallback function we use the next few lines to output logs\n        // at the bottom of the page with jQuery\n        if($){\n            if($('#_console_log').length == 0) $('body').append($('&lt;div /&gt;').attr('id', '_console_log'));\n            $('#_console_log').append(message).append($('&lt;br /&gt;'));\n        }\n    }\n} \n</code></pre>\n\n<p>I hope this is helpful:-)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There are so many Answers. My solution for this was:</p>\n\n<blockquote>\n<pre><code>globalnamespace.Array = new Array()\n   if (typeof console === \"undefined\" || typeof console.log === \"undefined\") {\n     console = {};\n     console.log = function(message) {namespace.globalArray.push(message)};   \n   }\n</code></pre>\n</blockquote>\n\n<p>In short, if console.log doesn't exists (or in this case, isn't opened) then store the log in a global namespace Array. This way, you're not pestered with millions of alerts and you can still view your logs with the developer console opened or closed.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I like this method (using jquery's doc ready)... it lets you use console even in ie... only catch is that you need to reload the page if you open ie's dev tools after the page loads...</p>\n\n<p>it could be slicker by accounting for all the functions, but I only use log so this is what I do. </p>\n\n<pre><code>//one last double check against stray console.logs\n$(document).ready(function (){\n    try {\n        console.log('testing for console in itcutils');\n    } catch (e) {\n        window.console = new (function (){ this.log = function (val) {\n            //do nothing\n        }})();\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a version that will log to the console when the developer tools are open and not when they are closed.</p>\n\n<pre><code>(function(window) {\n\n   var console = {};\n   console.log = function() {\n      if (window.console &amp;&amp; (typeof window.console.log === 'function' || typeof window.console.log === 'object')) {\n         window.console.log.apply(window, arguments);\n      }\n   }\n\n   // Rest of your application here\n\n})(window)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Make your own console in html .... ;-)\nThis can be imprved but you can start with :</p>\n\n<pre><code>if (typeof console == \"undefined\" || typeof console.log === \"undefined\") {\n    var oDiv=document.createElement(\"div\");\n    var attr = document.createAttribute('id'); attr.value = 'html-console';\n    oDiv.setAttributeNode(attr);\n\n\n    var style= document.createAttribute('style');\n    style.value = \"overflow: auto; color: red; position: fixed; bottom:0; background-color: black; height: 200px; width: 100%; filter: alpha(opacity=80);\";\n    oDiv.setAttributeNode(style);\n\n    var t = document.createElement(\"h3\");\n    var tcontent = document.createTextNode('console');\n    t.appendChild(tcontent);\n    oDiv.appendChild(t);\n\n    document.body.appendChild(oDiv);\n    var htmlConsole = document.getElementById('html-console');\n    window.console = {\n        log: function(message) {\n            var p = document.createElement(\"p\");\n            var content = document.createTextNode(message.toString());\n            p.appendChild(content);\n            htmlConsole.appendChild(p);\n        }\n    };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>According to <a href=\"http://readerszone.com/microsoft/internet-explorer/ie8-beta2-jscript-features.html\">this post</a> it was in the beta, but it's not in the release?</p>\n",
            "last_activity_date": 1424461909,
            "question_id": 690251,
            "score": 209,
            "tags": [
                "javascript",
                "logging",
                "internet-explorer-8",
                "console"
            ],
            "title": "What happened to console.log in IE8?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>try <code>getTimezoneOffset()</code> of the <code>Date</code> object:</p>\n\n<pre><code>var curdate = new Date()\nvar offset = curdate.getTimezoneOffset()\n</code></pre>\n\n<p>This method returns time zone offset in minutes which is the difference between GMT and local time in minutes.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>var offset = new Date().getTimezoneOffset();\n</code></pre>\n\n<blockquote>\n  <p>The time-zone offset is the difference, in minutes, between UTC and local time. Note that this means that the offset is positive if the local timezone is behind UTC and negative if it is ahead.  For example, if your time zone is UTC+10 (Australian Eastern Standard Time), -600 will be returned. Daylight savings time prevents this value from being a constant even for a given locale</p>\n</blockquote>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Global%5FObjects/Date/getTimezoneOffset\">Mozilla Date Object reference</a></li>\n</ul>\n\n<p>Note that not all timezones are offset by whole hours: for example, Newfoundland is UTC minus 3h 30m (leaving Daylight Saving Time out of the equation).</p>\n",
                    "is_accepted": true,
                    "score": 143
                },
                {
                    "body": "<p>It's already been answered how to get offset in minutes as an integer, but in case anyone wants the local GMT offset as a string e.g. <code>\"+1130\"</code>:</p>\n\n<pre><code>function pad(number, length){\n    var str = \"\" + number\n    while (str.length &lt; length) {\n        str = '0'+str\n    }\n    return str\n}\n\nvar offset = new Date().getTimezoneOffset()\noffset = ((offset&lt;0? '+':'-')+ // Note the reversed sign!\n          pad(parseInt(Math.abs(offset/60)), 2)+\n          pad(Math.abs(offset%60), 2))\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p><a href=\"http://www.pageloom.com/automatic-timezone-detection-with-javascript\">Timezone detection that returns the standard timezone name such as America/Chicago</a>.</p>\n\n<p><a href=\"https://bitbucket.org/pellepim/jstimezonedetect\">Source</a>(MIT License)</p>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>I realize this answer is a bit off topic but I imagine many of us looking for an answer also wanted to format the time zone for display and perhaps get the zone abbreviation too. So here it goes...</p>\n\n<p>If you want the client timezone nicely formatted you can rely on the JavaScript Date.toString method and do:</p>\n\n<pre><code>var split = new Date().toString().split(\" \");\nvar timeZoneFormatted = split[split.length - 2] + \" \" + split[split.length - 1];\n</code></pre>\n\n<p>This will give you \"GMT-0400 (EST)\" for example, including the timezone minutes when applicable. </p>\n\n<p>Alternatively, with regex you can extract any desired part:</p>\n\n<p>For \"GMT-0400 (EDT)\" :</p>\n\n<pre><code>new Date().toString().match(/([A-Z]+[\\+-][0-9]+.*)/)[1]\n</code></pre>\n\n<p>For \"GMT-0400\" :</p>\n\n<pre><code>new Date().toString().match(/([A-Z]+[\\+-][0-9]+)/)[1]\n</code></pre>\n\n<p>For just \"EDT\" :</p>\n\n<pre><code>new Date().toString().match(/\\(([A-Za-z\\s].*)\\)/)[1]\n</code></pre>\n\n<p>For just \"-0400\":</p>\n\n<pre><code>new Date().toString().match(/([-\\+][0-9]+)\\s/)[1]\n</code></pre>\n\n<p>Date.toString reference: <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/toString\">https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/toString</a></p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>With <a href=\"http://momentjs.com/\" rel=\"nofollow\">moment.js</a>:</p>\n\n<pre><code>moment().format('zz');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How can I gather the visitor's time zone information? I need the GMT offset hours.</p>\n",
            "last_activity_date": 1405252090,
            "question_id": 1091372,
            "score": 125,
            "tags": [
                "javascript",
                "timezone"
            ],
            "title": "Getting the client&#39;s timezone in JavaScript"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Not possible, I believe ie has a content changed event but it is certainly not x-browser</p>\n\n<p>Should I say not possible without some nasty interval chugging away in the background!</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>These are <a href=\"http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113/events.html#Events-MutationEvent\" rel=\"nofollow\">mutation events</a>.</p>\n\n<p>I have not used mutation event APIs in jQuery, but a cursory search led me to <a href=\"http://github.com/jollytoad/jquery.mutation-events/tree/master\" rel=\"nofollow\">this project</a> on GitHub. I am unaware of the project's maturity.</p>\n",
                    "is_accepted": true,
                    "score": 19
                },
                {
                    "body": "<p>Try to bind to the <code>DOMSubtreeModified</code> event seeign as test is also just part of the DOM.</p>\n\n<p>see this post here on SO:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/648996/how-do-i-monitor-the-dom-for-changes\">how-do-i-monitor-the-dom-for-changes</a></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Try this, it was created by James Padolsey(J-P here on SO) and does exactly what you want (I think)</p>\n\n<p><a href=\"http://james.padolsey.com/javascript/monitoring-dom-properties/\">http://james.padolsey.com/javascript/monitoring-dom-properties/</a></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>The browser will not fire the onchange event for <code>&lt;div&gt;</code> elements.  </p>\n\n<p>I think the reasoning behind this is that these elements won't change unless modified by javascript.  If you are already having to modify the element yourself (rather than the user doing it), then you can just call the appropriate accompanying code at the same time that you modify the element, like so:</p>\n\n<pre><code> $(\"#content\").html('something').each(function() { });\n</code></pre>\n\n<p>You could also manually fire an event like this:</p>\n\n<pre><code> $(\"#content\").html('something').change();\n</code></pre>\n\n<p>If neither of these solutions work for your situation, could you please give more information on what you are specifically trying to accomplish?</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Try the livequery plugin. That seems to work for something similar I am doing.</p>\n\n<p><a href=\"http://docs.jquery.com/Plugins/livequery\" rel=\"nofollow\">http://docs.jquery.com/Plugins/livequery</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Often a simple and effective way to achieve this is to keep track of when and where you are modifying the DOM.</p>\n\n<p>You can do this by creating one central function that is always responsible for modifying the DOM. You then do whatever cleanup you need on the modified element from within this function. </p>\n\n<p>In a recent application, I didn't need immediate action so I used a callback for the handly load() function, to add a class to any modified elements and then updated all modified elements every few seconds with a setInterval timer.</p>\n\n<pre><code>$($location).load(\"my URL\", \"\", $location.addClass(\"dommodified\"));\n</code></pre>\n\n<p>Then you can handle it however you want - e.g.</p>\n\n<pre><code>setInterval(\"handlemodifiedstuff();\", 3000); \nfunction handlemodifiedstuff()\n{\n    $(\".dommodified\").each(function(){/* Do stuff with $(this) */});\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know this post is  a year old, but I'd like to provide a different solution approach to those who have a similar issue:</p>\n\n<ol>\n<li><p>The jQuery change event is used only on user input fields because if anything else is manipulated (e.g., a div), that manipulation is coming from code.  So, find where the manipulation occurs, and then add whatever you need to there. </p></li>\n<li><p>But if that's not possible for any reason (you're using a complicated plugin or can't find any \"callback\" possibilities) then the jQuery approach I'd suggest is:</p>\n\n<p>a. For simple DOM manipulation, use jQuery chaining and traversing, <code>$(\"#content\").html('something').end().find(whatever)....</code></p>\n\n<p>b. If you'd like to do something else, employ jQuery's <code>bind</code> with custom event and <code>triggerHandler</code></p>\n\n<pre><code>$(\"#content\").html('something').triggerHandler('customAction');\n\n\n$('#content').unbind().bind('customAction', function(event, data) {\n   //Custom-action\n});\n</code></pre></li>\n</ol>\n\n<p>Here's a link to jQuery trigger handler: <a href=\"http://api.jquery.com/triggerHandler/\">http://api.jquery.com/triggerHandler/</a></p>\n",
                    "is_accepted": false,
                    "score": 57
                },
                {
                    "body": "<p>And with HTML5 we have <a href=\"http://updates.html5rocks.com/2012/02/Detect-DOM-changes-with-Mutation-Observers\" rel=\"nofollow\">native DOM Mutation Observers</a> (not crossbrowser yet)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>what about <a href=\"http://jsbin.com/esepal/2\">http://jsbin.com/esepal/2</a></p>\n\n<pre><code>$(document).bind(\"DOMSubtreeModified\",function(){\n  console.log($('body').width() + ' x '+$('body').height());\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I'm developing tiny JS library called mutabor (<a href=\"https://github.com/eskat0n/mutabor\" rel=\"nofollow\">https://github.com/eskat0n/mutabor</a>) which intended to simplify usage of DOM Mutation Events. See demo.html for examples.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This plugin is very good, and you can add more mutations if you should need more than the default mutations provided...</p>\n\n<p><a href=\"http://www.jqui.net/jquery-projects/jquery-mutate-official/\" rel=\"nofollow\">http://www.jqui.net/jquery-projects/jquery-mutate-official/</a></p>\n\n<p>it's very easy to use, just like you would, for any websites, and it also supports future elements, if you was to add elements using ajax or any other method.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can add a callback option to html (,or any) function:</p>\n\n<pre><code>$.fn.oldHtml = $.fn.html;\n$.fn.html = function(html,fn){\n  fn = fn || function(){};\n  var result =  this.oldHtml(html);\n  fn();\n  return result;\n};\n$('body').html(11,function(){alert(\"haha\");});\n</code></pre>\n\n<p><a href=\"http://jsbin.com/uRAXAjon/1/\" rel=\"nofollow\">Demo here.</a></p>\n\n<p><em>You do the change on some element, not the element is forced to change by something that you have to catch.</em></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I wrote a snippet that will check for the change of an element on an event.</p>\n\n<p>So if you are using third party javascript code or something and you need to know when something appears or changes when you have clicked then you can.</p>\n\n<p><strong>For the below snippet, lets say you need to know when a table content changes after you clicked a button.</strong></p>\n\n<pre><code>$('.button').live('click', function() {\n\n            var tableHtml = $('#table &gt; tbody').html();\n            var timeout = window.setInterval(function(){\n\n                if (tableHtml != $('#table &gt; tbody').\n                    console.log('no change');\n                } else {\n                    console.log('table changed!');\n                    clearInterval(timeout);\n                }\n\n            }, 10);\n        });\n</code></pre>\n\n<p>Psudo Code:</p>\n\n<ul>\n<li>Once you click a button</li>\n<li>the html of the element you are expecting to change is captured</li>\n<li>we then continually check the html of the element</li>\n<li>when we find the html to be different we stop the checking</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p><code>change()</code> function works and detects changes on form elements, but is there a way of detecting when a DOM element's content was changed?</p>\n\n<p>This does not work, unless <code>#content</code> is a form element</p>\n\n<pre><code>$(\"#content\").change( function(){\n    // do something\n});\n</code></pre>\n\n<p>I want this to trigger when doing something like:</p>\n\n<pre><code>$(\"#content\").html('something');\n</code></pre>\n\n<p>Also <code>html()</code> or <code>append()</code> function don't have a callback.</p>\n\n<p>Any suggestions?</p>\n",
            "last_activity_date": 1422101336,
            "question_id": 1091661,
            "score": 89,
            "tags": [
                "javascript",
                "jquery",
                "dom"
            ],
            "title": "Detect element content changes with jQuery"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<h2>Situation for ES 6</h2>\n\n<p>The upcoming ECMAScript language specification, edition 6, includes Unicode-aware regular expressions. Support must be enabled with the <code>u</code> modifier on the regex. See <a href=\"https://mathiasbynens.be/notes/es6-unicode-regex\"><em>Unicode-aware regular expressions in ES6</em></a>.</p>\n\n<p>Until ES 6 is finished and widely adopted among browser vendors you're still on your own, though. <strong>Update:</strong> There is now <a href=\"http://mths.be/regexpu\">a transpiler named <em>regexpu</em></a> that translates ES6 Unicode regular expressions into equivalent ES5. It can be used as part of your build process. <a href=\"http://mothereff.in/regexpu\">Try it out online.</a></p>\n\n<h2>Situation for ES 5 and below</h2>\n\n<p>Even though JavaScript operates on Unicode strings, it does not implement Unicode-aware character classes and has no concept of POSIX character classes or Unicode blocks/sub-ranges.</p>\n\n<ul>\n<li><p><a href=\"https://mathiasbynens.be/notes/javascript-unicode#regex\">Issues with Unicode in JavaScript regular expressions</a></p></li>\n<li><p>Check your expectations here: <a href=\"http://hamstersoup.com/javascript/regexp_character_class_tester.html\">Javascript RegExp Unicode Character Class tester</a> (<em>Edit:</em> the original page is down, <a href=\"http://web.archive.org/web/20101104085449/http://hamstersoup.com/javascript/regexp_character_class_tester.html\">the Internet Archive still has a copy</a>.)</p></li>\n<li><p>Flagrant Badassery has an article on <a href=\"http://blog.stevenlevithan.com/archives/javascript-regex-and-unicode\">JavaScript, Regex, and Unicode</a> that sheds some light on the matter.</p></li>\n<li><p>Also read <a href=\"http://stackoverflow.com/questions/14389/\">Regex and Unicode</a> here on SO. Probably you have to build your own \"punctuation character class\".</p></li>\n<li><p>Check out the <a href=\"http://kourge.net/projects/regexp-unicode-block\">Regular Expression: Match Unicode Block Range</a> builder, which lets you build a JavaScript regular expression that matches characters that fall in any number of specified Unicode blocks.  </p>\n\n<p>I just did it for the \"General Punctuation\" and \"Supplemental Punctuation\" sub-ranges, and the result is as simple and straight-forward as I would have expected it:</p>\n\n<pre><code>[\\u2000-\\u206F\\u2E00-\\u2E7F]\n</code></pre></li>\n<li><p>There also is <a href=\"http://www.xregexp.com/\">XRegExp</a>, a project that brings <a href=\"http://www.xregexp.com/plugins/#unicode\">Unicode support to JavaScript</a> by offering an alternative regex engine with extended capabilities.</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 75
                },
                {
                    "body": "<p>In JavaScript, \\w and \\d are ASCII, while \\s is Unicode.  Don't ask me why.  JavaScript does support \\p with Unicode categories, which you can use to emulate a Unicode-aware \\w and \\d.</p>\n\n<p>For \\d use \\p{N} (numbers)</p>\n\n<p>For \\w use [\\p{L}\\p{N}\\p{Pc}\\p{M}] (letters, numbers, underscores, marks)</p>\n\n<p><strong>Update:</strong> Unfortunately, I was wrong about this.  JavaScript does does not officially support \\p either, though some implementations may still support this.  The only Unicode support in JavaScript regexes is matching specific code points with \\uFFFF.  You can use those in ranges in character classes.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>As mentioned in other answers, JavaScript regexes have no support for Unicode character classes. However, there is a library that does provide this: Steven Levithan's excellent <a href=\"http://xregexp.com/\">XRegExp</a> and its <a href=\"http://xregexp.com/plugins/\">Unicode plug-in</a>.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Having also not found a good solution, I wrote a small <a href=\"https://marcelogibson.com/stackoverflow/unicode_hack.js\" rel=\"nofollow\">script</a> a long time ago, by downloading data from the unicode <a href=\"http://unicode.org/versions/Unicode5.0.0/\" rel=\"nofollow\">specification</a> (v.5.0.0) and generating intervals for each unicode category and subcategory in the BMP (lately replaced by <a href=\"https://ideone.com/04llh4\" rel=\"nofollow\">a small Java program</a> that uses its own native Unicode support).</p>\n\n<p>Basically it converts <code>\\p{...}</code> to a range of values, much like the output of the <a href=\"http://kourge.net/projects/regexp-unicode-block\" rel=\"nofollow\">tool</a> mentioned by Tomalak, but the intervals can end up quite large (since it's not dealing with blocks, but with characters scattered through many different places).</p>\n\n<p>For instance, a Regex written like this:</p>\n\n<pre><code>var regex = unicode_hack(/\\p{L}(\\p{L}|\\p{Nd})*/g);\n</code></pre>\n\n<p>Will be converted to something like this:</p>\n\n<pre><code>/[\\u0041-\\u005a\\u0061-\\u007a...]([...]|[\\u0030-\\u0039\\u0660-\\u0669...])*/g\n</code></pre>\n\n<p>Haven't used it a lot in practice, but it seems to work fine from my tests, so I'm posting here in case someone find it useful. Despite the length of the resulting regexes (the example above has 3591 characters when expanded), the performance seems to be acceptable (see the <a href=\"http://jsfiddle.net/mgibsonbr/Waxkc/\" rel=\"nofollow\">tests</a> at jsFiddle; thanks to @modiX and @Lwangaman for the improvements).</p>\n\n<p>Here's the <a href=\"http://difnet.com.br/opensource/unicode_hack.js\" rel=\"nofollow\">source</a> (raw, 27.5KB; <a href=\"http://difnet.com.br/opensource/unicode_hack.js\" rel=\"nofollow\">minified</a>, 24.9KB, not much better...). It <em>might</em> be made smaller by unescaping the unicode characters, but OTOH will run the risk of encoding issues, so I'm leaving as it is. Hopefully with ES6 this kind of thing won't be necessary anymore.</p>\n\n<p><strong>Update</strong>: this looks like the same strategy adopted in the <a href=\"http://xregexp.com/plugins/#unicode\" rel=\"nofollow\">XRegExp Unicode plug-in</a> mentioned by Tim Down, except that in this case regular JavaScript regexes are being used.</p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>Try here:</p>\n\n<p><a href=\"http://inimino.org/~inimino/blog/javascript_cset\" rel=\"nofollow\">http://inimino.org/~inimino/blog/javascript_cset</a></p>\n\n<p>I have had a lot of success using this javascript library for unicode regex and it is licensed under the MIT license.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Does anyone know of any JavaScript libraries that support Unicode-aware regular expressions? For example, there should be something akin to \\w that can match any code-point in Letters or Marks category (not just the ASCII ones), and hopefully have filters like [[P*]] for punctuation etc.</p>\n",
            "last_activity_date": 1420925468,
            "question_id": 280712,
            "score": 75,
            "tags": [
                "javascript",
                "regex",
                "unicode",
                "character-properties"
            ],
            "title": "Javascript + Unicode regexes"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>This question got me searching on Google for a <code>RegEx.quote</code> function in JavaScript, which I was not aware of. It turns out that the function exists in only one place, namely in an <a href=\"http://stackoverflow.com/questions/494035/how-do-you-pass-a-variable-to-a-regular-expression-javascript/494122#494122\">answer by Gracenote here on StackOverflow</a>. The function is defined like this:</p>\n\n<pre><code>RegExp.quote = function(str) {\n    return (str+'').replace(/[.?*+^$[\\]\\\\(){}|-]/g, \"\\\\$&amp;\");\n};\n</code></pre>\n\n<p>If you wish to use this function, you will need to include the above definition somewhere above the point where you use the function in your script.</p>\n",
                    "is_accepted": true,
                    "score": 109
                },
                {
                    "body": "<p>Well, first of all you can define the regular expression with its own constant syntax:</p>\n\n<pre><code>var reg = /arrayname\\[1\\]/;\n</code></pre>\n\n<p>Inside the regular expression you quote things with backslash. Now, if you're starting from a string, you have to \"protect\" those backslashes inside the string constant. In that case, the pattern is being parsed <em>twice</em>: once when the string constant is gobbled by the Javascript parser, and then once by the RegExp constructor:</p>\n\n<pre><code>var pattern = \"arrayname\\\\[1\\\\]\";\nvar reg = new RegExp(pattern);\n</code></pre>\n\n<p>The backslashes are doubled so that the string \"pattern\" will look like the regular expression in my first example - one backslash before each bracket character.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you're replacing literally, you don't need a regexp in the first place:</p>\n\n<pre><code> str = str.split(search).join(replace)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>From the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions?redirectlocale=en-US&amp;redirectslug=JavaScript%2FGuide%2FRegular_Expressions\" rel=\"nofollow\">mozilla dev docs</a></p>\n\n<pre><code>function escapeRegExp(string){\n  return string.replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n</code></pre>\n\n<p>This is out of the ordinary, but in this particular scenario, I would create a function like this</p>\n\n<pre><code>RegExp.escape = function(str) {\n  return String(str).replace(/([.*+?^=!:${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n};\n</code></pre>\n\n<p>Usage</p>\n\n<pre><code>new RegExp(RegExp.escape('http://www.google.com'));\n//=&gt; /http\\:\\/\\/www\\.google\\.com/\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Here is the exact function Google's closure library uses.</p>\n\n<pre><code>/**\n * Escapes characters in the string that are not safe to use in a RegExp.\n * @param {*} s The string to escape. If not a string, it will be casted\n *     to one.\n * @return {string} A RegExp safe, escaped copy of {@code s}.\n */\ngoog.string.regExpEscape = function(s) {\n  return String(s).replace(/([-()\\[\\]{}+?*.$\\^|,:#&lt;!\\\\])/g, '\\\\$1').\n      replace(/\\x08/g, '\\\\x08');\n};\n</code></pre>\n\n<p>See <a href=\"http://closure-library.googlecode.com/git-history/docs/local_closure_goog_string_string.js.source.html#line1021\" rel=\"nofollow\">link</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>var easiest = any_string.replace(/\\W/g, \"\\\\$&amp;\");\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>Why should I remember which characters have a special meaning or even use a function if escaping any non-word character is enough?</p>\n\n<p>My solution is a no brainer, maybe that's why it gets down voted. :D</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Previous answers escape too much characters.</p>\n\n<p>According to <a href=\"http://stackoverflow.com/q/399078/1529630\">What special characters must be escaped in regular expressions?</a>, only the following characters need to be escaped:</p>\n\n<ul>\n<li><code>.^$*+?()[{\\|</code> outside character classes.</li>\n<li><code>^-]\\</code> inside character classes.</li>\n</ul>\n\n<p>Then, this function does the trick:</p>\n\n<pre><code>function escapeRegExp(str) {\n    return str.replace(/[.^$*+?()[{\\\\|\\]-]/g, '\\\\$&amp;');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Mozilla recommends to use this function to espace character from regex :</p>\n\n<pre><code>function escapeRegExp(string){\n  return string.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, \"\\\\$1\");\n}\n</code></pre>\n\n<p>You can find this one at the end of this chapter in Mozilla Javascript Guide: \n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Using_Special_Characters</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have code like:</p>\n\n<pre><code>pattern = 'arrayname[1]'; // fetch from dom, make literal here just for example\nreg = new RegExp(RegExp.quote(pattern), 'g');\nmystring.replace(reg, 'arrayname[2]');\n</code></pre>\n\n<p>but it fails with an error message saying: \"RegExp.quote is not a function\".</p>\n\n<p>Am I missing something simple?</p>\n",
            "last_activity_date": 1418643945,
            "question_id": 2593637,
            "score": 54,
            "tags": [
                "javascript",
                "regex"
            ],
            "title": "How to escape regular expression in javascript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>All of your handlers are sharing the same <code>i</code> variable.</p>\n\n<p>You need to put each handler into a separate function that takes <code>i</code> as a parameter so that each one gets its own variable:</p>\n\n<pre><code>function handleElement(i) {\n    document.getElementById(\"b\"+i).onclick=function() {\n        alert(i);\n    };\n}\n\nfor(i=1; i&lt;11; i++) \n    handleElement(i);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 14
                },
                {
                    "body": "<p>A closure is what you're looking for:</p>\n\n<pre><code>for(i=1; i&lt;11; i++) {\n    (function(i) {\n        document.getElementById(\"b\"+i).onclick=function() {\n            alert(i);\n        };\n    })(i);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>There are two ways to use closure on this problem. The idea is to create a scope with a snapshot of \"i\" variable for each iteration to be used by event handler.</p>\n\n<p>Solution #1 (as was mentioned by Kevin):</p>\n\n<pre><code>for(i=1; i&lt;11; i++) {\n    (function(num) {\n\n       document.getElementById(\"b\"+num).addEventListener('click', function() {\n            alert(num);\n       });\n\n    })(i);\n}\n</code></pre>\n\n<p>Solution #2:</p>\n\n<pre><code>for (i=1; i&lt;11; i++) {\n    document.getElementById(\"b\"+i).addEventListener('click', (function(){\n        var num = i;\n        return function() {\n            alert(num);\n        }\n    })());\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>For example, I have 10 a tags generated from an AJAX response:</p>\n\n<pre><code>&lt;a href=\"#\" id=\"b1\"&gt;b1&lt;/a&gt;\n&lt;a href=\"#\" id=\"b2\"&gt;b2&lt;/a&gt;\n&lt;a href=\"#\" id=\"b3\"&gt;b3&lt;/a&gt;\n&lt;a href=\"#\" id=\"b4\"&gt;b4&lt;/a&gt;\n&lt;a href=\"#\" id=\"b5\"&gt;b5&lt;/a&gt;\n&lt;a href=\"#\" id=\"b6\"&gt;b6&lt;/a&gt;\n&lt;a href=\"#\" id=\"b7\"&gt;b7&lt;/a&gt;\n&lt;a href=\"#\" id=\"b8\"&gt;b8&lt;/a&gt;\n&lt;a href=\"#\" id=\"b9\"&gt;b9&lt;/a&gt;\n&lt;a href=\"#\" id=\"b10\"&gt;b10&lt;/a&gt;\n</code></pre>\n\n<p>I need to assign onclick event to each of them via loop:</p>\n\n<pre><code>for(i=1; i&lt;11; i++) {\n    document.getElementById(\"b\"+i).onclick=function() {\n        alert(i);\n    }\n}\n</code></pre>\n\n<p>This doesn't work, it only assigns onclick to the last a tag and alerts \"11\". How can I get this to work? I'd prefer not to use jQuery.</p>\n",
            "last_activity_date": 1391145875,
            "question_id": 6487366,
            "score": 8,
            "tags": [
                "javascript"
            ],
            "title": "How to generate event handlers with loop in Javascript?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Here's a list of explanations for the results you're seeing (and supposed to be seeing). The references I'm using are from the <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">ECMA-262 standard</a>.</p>\n\n<ol>\n<li><h3><code>[] + []</code></h3>\n\n<p>When using the addition operator, both the left and right operands are converted to primitives first (<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.6.1\">\u00a711.6.1</a>). As per <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-9.1\">\u00a79.1</a>, converting an object (in this case an array) to a primitive returns its default value, which for objects with a valid <code>toString()</code> method is the result of calling <code>object.toString()</code> (<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.12.8\">\u00a78.12.8</a>). For arrays this is the same as calling <code>array.join()</code> (<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.2\">\u00a715.4.4.2</a>). Joining an empty array results in an empty string, so step #7 of the addition operator returns the concatenation of two empty strings, which is the empty string.</p></li>\n<li><h3><code>[] + {}</code></h3>\n\n<p>Similar to <code>[] + []</code>, both operands are converted to primitives first. For \"Object objects\" (\u00a715.2), this is again the result of calling <code>object.toString()</code>, which for non-null, non-undefined objects is <code>\"[object Object]\"</code> (<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.2.4.2\">\u00a715.2.4.2</a>).</p></li>\n<li><h3><code>{} + []</code></h3>\n\n<p>The <code>{}</code> here is not parsed as an object, but instead as an empty block (<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-12.1\">\u00a712.1</a>, at least as long as you're not forcing that statement to be an expression, but more about that later). The return value of empty blocks is empty, so the result of that statement is the same as <code>+[]</code>. The unary <code>+</code> operator (<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.4.6\">\u00a711.4.6</a>) returns <code>ToNumber(ToPrimitive(operand))</code>. As we already know, <code>ToPrimitive([])</code> is the empty string, and according to <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-9.3.1\">\u00a79.3.1</a>, <code>ToNumber(\"\")</code> is 0.</p></li>\n<li><h3><code>{} + {}</code></h3>\n\n<p>Similar to the previous case, the first <code>{}</code> is parsed as a block with empty return value. Again, <code>+{}</code> is the same as <code>ToNumber(ToPrimitive({}))</code>, and <code>ToPrimitive({})</code> is <code>\"[object Object]\"</code> (see <code>[] + {}</code>). So to get the result of <code>+{}</code>, we have to apply <code>ToNumber</code> on the string <code>\"[object Object]\"</code>. When following the steps from <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-9.3.1\">\u00a79.3.1</a>, we get <code>NaN</code> as a result:</p>\n\n<blockquote>\n  <p>If the grammar cannot interpret the String as an expansion of <em>StringNumericLiteral</em>, then the result of <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-9.3\">ToNumber</a> is <strong>NaN</strong>.</p>\n</blockquote></li>\n<li><h3><code>Array(16).join(\"wat\" - 1)</code></h3>\n\n<p>As per <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.1.1\">\u00a715.4.1.1</a> and <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.2.2\">\u00a715.4.2.2</a>, <code>Array(16)</code> creates a new array with length 16. To get the value of the argument to join, <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.6.2\">\u00a711.6.2</a> steps #5 and #6 show that we have to convert both operands to a number using <code>ToNumber</code>. <code>ToNumber(1)</code> is simply 1 (<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-9.3\">\u00a79.3</a>), whereas <code>ToNumber(\"wat\")</code> again is <code>NaN</code> as per <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-9.3.1\">\u00a79.3.1</a>. Following step 7 of <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.6.2\">\u00a711.6.2</a>, <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-11.6.3\">\u00a711.6.3</a> dictates that </p>\n\n<blockquote>\n  <p>If either operand is <strong>NaN</strong>, the result is <strong>NaN</strong>.</p>\n</blockquote>\n\n<p>So the argument to <code>Array(16).join</code> is <code>NaN</code>. Following \u00a715.4.4.5 (<code>Array.prototype.join</code>), we have to call <code>ToString</code> on the argument, which is <code>\"NaN\"</code> (<a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-9.8.1\">\u00a79.8.1</a>):</p>\n\n<blockquote>\n  <p>If <em>m</em> is <strong>NaN</strong>, return the String <strong><code>\"NaN\"</code></strong>.</p>\n</blockquote>\n\n<p>Following step 10 of <a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.4.4.5\">\u00a715.4.4.5</a>, we get 15 repetitions of the concatenation of <code>\"NaN\"</code> and the empty string, which equals the result you're seeing.\nWhen using <code>\"wat\" + 1</code> instead of <code>\"wat\" - 1</code> as argument, the addition operator converts <code>1</code> to a string instead of converting <code>\"wat\"</code> to a number, so it effectively calls <code>Array(16).join(\"wat1\")</code>.</p></li>\n</ol>\n\n<p>As to why you're seeing different results for the <code>{} + []</code> case: When using it as a function argument, you're forcing the statement to be an <em>ExpressionStatement</em>, which makes it impossible to parse <code>{}</code> as empty block, so it's instead parsed as an empty object literal.</p>\n",
                    "is_accepted": true,
                    "score": 1206
                },
                {
                    "body": "<p>I second @Ventero\u2019s solution. If you want to, you can go into more detail as to how <code>+</code> converts its operands.</p>\n\n<p><strong>First step (\u00a79.1):</strong> convert both operands to primitives (primitive values are <code>undefined</code>, <code>null</code>, booleans, numbers, strings; all other values are objects, including arrays and functions). If an operand is already primitive, you are done. If not, it is an object <code>obj</code> and the following steps are performed:</p>\n\n<ol>\n<li>Call <code>obj.valueOf()</code>. If it returns a primitive, you are done. Direct instances of <code>Object</code> and arrays return themselves, so you are not done yet.</li>\n<li>Call <code>obj.toString()</code>. If it returns a primitive, you are done. <code>{}</code> and <code>[]</code> both return a string, so you are done.</li>\n<li>Otherwise, throw a <code>TypeError</code>.</li>\n</ol>\n\n<p>For dates, step 1 and 2 are swapped. You can observe the conversion behavior as follows:</p>\n\n<pre><code>var obj = {\n    valueOf: function () {\n        console.log(\"valueOf\");\n        return {}; // not a primitive\n    },\n    toString: function () {\n        console.log(\"toString\");\n        return {}; // not a primitive\n    }\n}\n</code></pre>\n\n<p>Interaction (<code>Number()</code> first converts to primitive then to number):</p>\n\n<pre><code>&gt; Number(obj)\nvalueOf\ntoString\nTypeError: Cannot convert object to primitive value\n</code></pre>\n\n<p><strong>Second step (\u00a711.6.1):</strong> If one of the operands is a string, the other operand is also converted to string and the result is produced by concatenating two strings. Otherwise, both operands are converted to numbers and the result is produced by adding them.</p>\n\n<p>More detailed explanation of the conversion process: \u201c<a href=\"http://www.2ality.com/2012/01/object-plus-object.html\">What is {} + {} in JavaScript?</a>\u201d</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>We may refer to the specification and that's great and most accurate, but most of the cases can also be explained in a more comprehensible way with the following statements:</p>\n\n<ul>\n<li><code>+</code> and <code>-</code> operators work only with primitive values. More specifically <code>+</code>(addition) works with either strings or numbers, and <code>+</code>(unary) and <code>-</code>(subtraction and unary) works only with numbers.</li>\n<li>All native functions or operators that expect primitive value as argument, will first convert that argument to desired primitive type. It is done with <code>valueOf</code> or <code>toString</code>, which are available on any object. That's the reason why such functions or operators don't throw errors when invoked on objects.</li>\n</ul>\n\n<p>So we may say that:</p>\n\n<ul>\n<li><code>[] + []</code> is same as <code>String([]) + String([])</code> which is same as <code>'' + ''</code>. I mentioned above  that <code>+</code>(addition) is also valid for numbers, but there is no valid number representation of an array in JavaScript, so addition of strings is used instead.</li>\n<li><code>[] + {}</code> is same as <code>String([]) + String({})</code> which is same as <code>'' + '[object Object]'</code></li>\n<li><code>{} + []</code>. This one deserves more explanation (see Ventero answer). In that case, curly braces are treated not as an object but as an empty block, so it turns out to be same as <code>+[]</code>. Unary <code>+</code> works only with numbers, so the implementation tries to get a number out of <code>[]</code>. First it tries <code>valueOf</code> which in the case of arrays returns the same object, so then it tries the last resort: conversion of a <code>toString</code> result to a number. We may write it as <code>+Number(String([]))</code> which is same as <code>+Number('')</code> which is same as <code>+0</code>.</li>\n<li><code>Array(16).join(\"wat\" - 1)</code> subtraction <code>-</code> works only with numbers, so it's the same as: <code>Array(16).join(Number(\"wat\") - 1)</code>, as <code>\"wat\"</code> can't be converted to a valid number. We receive <code>NaN</code>, and any arithmetic operation on <code>NaN</code> results with <code>NaN</code>, so we have: <code>Array(16).join(NaN)</code>.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>This is more of a comment than an answer, but for some reason I can't comment on your question. I wanted to correct your JSFiddle code. However, I posted this on Hacker News and someone suggested that I repost it here.</p>\n\n<p>The problem in the JSFiddle code is that <code>({})</code> (opening braces inside of parentheses) is not the same as <code>{}</code> (opening braces as the start of a line of code). So when you type <code>out({} + [])</code> you are forcing the <code>{}</code> to be something which it is not when you type <code>{} + []</code>. This is part of the overall 'wat'-ness of Javascript.</p>\n\n<p>The basic idea was simple JavaScript wanted to allow both of these forms:</p>\n\n<pre><code>if (u)\n    v;\n\nif (x) {\n    y;\n    z;\n}\n</code></pre>\n\n<p>To do so, two interpretations were made of the opening brace: 1. it is <em>not required</em> and 2. it can appear <em>anywhere</em>.</p>\n\n<p>This was a wrong move. Real code doesn't have an opening brace appearing in the middle of nowhere, and real code also tends to be more fragile when it uses the first form rather than the second. (About once every other month at my last job, I'd get called to a coworker's desk when their modifications to my code weren't working, and the problem was that they'd added a line to the \"if\" without adding curly braces. I eventually just adopted the habit that the curly braces are always required, even when you're only writing one line.)</p>\n\n<p>Fortunately in many cases eval() will replicate the full wat-ness of JavaScript. The JSFiddle code should read:</p>\n\n<pre><code>function out(code) {\n    function format(x) {\n        return typeof x === \"string\" ?\n            JSON.stringify(x) : x;\n    }   \n    document.writeln('&amp;gt;&amp;gt;&amp;gt; ' + code);\n    document.writeln(format(eval(code)));\n}\ndocument.writeln(\"&lt;pre&gt;\");\nout('[] + []');\nout('[] + {}');\nout('{} + []');\nout('{} + {}');\nout('Array(16).join(\"wat\" + 1)');\nout('Array(16).join(\"wat - 1\")');\nout('Array(16).join(\"wat\" - 1) + \" Batman!\"');\ndocument.writeln(\"&lt;/pre&gt;\");\n</code></pre>\n\n<p>[Also that is the first time I have written document.writeln in many many many years, and I feel a little dirty writing anything involving both document.writeln() and eval().]</p>\n",
                    "is_accepted": false,
                    "score": 26
                }
            ],
            "body": "<p>The <em><a href=\"https://www.destroyallsoftware.com/talks/wat\">'Wat' talk for CodeMash 2012</a></em> basically points out a few bizarre quirks with Ruby and JavaScript.</p>\n\n<p>I have made a JSFiddle of the results at <a href=\"http://jsfiddle.net/fe479/9/\">http://jsfiddle.net/fe479/9/</a>.</p>\n\n<p>The behaviours specific to JavaScript (as I don't know Ruby) are listed below.</p>\n\n<p>I found in the JSFiddle that some of my results didn't correspond with those in the video, and I am not sure why. I am, however, curious to know how JavaScript is handling working behind the scenes in each case.</p>\n\n<pre><code>Empty Array + Empty Array\n[] + []\nresult:\n&lt;Empty String&gt;\n</code></pre>\n\n<p>I am quite curious about the <code>+</code> operator when used with arrays in JavaScript.\nThis matches the video's result.</p>\n\n<pre><code>Empty Array + Object\n[] + {}\nresult:\n[Object]\n</code></pre>\n\n<p>This matches the video's result. What's going on here? Why is this an object. What does the <code>+</code> operator do?</p>\n\n<pre><code>Object + Empty Array\n{} + []\nresult\n[Object]\n</code></pre>\n\n<p>This doesn't match the video. The video suggests that the result is 0, whereas I get [Object].</p>\n\n<pre><code>Object + Object\n{} + {}\nresult:\n[Object][Object]\n</code></pre>\n\n<p>This doesn't match the video either, and how does outputting a variable result in two objects? Maybe my JSFiddle is wrong.</p>\n\n<pre><code>Array(16).join(\"wat\" - 1)\nresult:\nNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaNNaN\n</code></pre>\n\n<p>Doing wat + 1 results in <code>wat1wat1wat1wat1</code>...</p>\n\n<p>I suspect this is just straightforward behaviour that trying to subtract a number from a string results in NaN.</p>\n",
            "last_activity_date": 1414318640,
            "question_id": 9032856,
            "score": 534,
            "tags": [
                "javascript"
            ],
            "title": "What is the explanation for these bizarre JavaScript behaviours mentioned in the &#39;Wat&#39; talk for CodeMash 2012?"
        }
    ]
}
