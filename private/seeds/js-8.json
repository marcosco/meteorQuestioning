{
    "items": [
        {
            "answer_count": 27,
            "answers": [
                {
                    "body": "<p>No, not in general. Firefox implements <code>const</code> but I know IE doesn't.</p>\n\n<hr>\n\n<p><a href=\"http://stackoverflow.com/questions/130396#130399\"><strong>@John</strong></a> points to a common naming practice for consts that has been used for years in other languages, I see no reason why you couldn't use that. Of course that doesn't mean someone will not write over the variable's value anyway. :)</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<pre><code>var MY_CONSTANT = \"some-value\";\n</code></pre>\n\n<p>Nothing's ever constant, but you can use conventions like ALL_CAPS to show that certain values should not be modified.</p>\n",
                    "is_accepted": true,
                    "score": 554
                },
                {
                    "body": "<p>I use <code>const</code> instead of <code>var</code> in my Greasemonkey scripts, but it is because they will run only on Firefox...<br />\nName convention can be indeed the way to go, too (I do both!).</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>For a while, I specified \"constants\" (which still weren't actually constants) in object literals passed through to <code>with()</code> statements. I thought it was so clever. Here's an example:</p>\n\n<pre><code>with ({\n    MY_CONST : 'some really important value'\n}) {\n    alert(MY_CONST);\n}\n</code></pre>\n\n<p>In the past, I also have created a <code>CONST</code> namespace where I would put all of my constants. Again, with the overhead. Sheesh.</p>\n\n<p>Now, I just do <code>var MY_CONST = 'whatever';</code> to <a href=\"http://en.wikipedia.org/wiki/KISS_principle\" rel=\"nofollow\">KISS</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Are you trying to protect the variables against modification?  If so, then you can use a module pattern:</p>\n\n<pre><code>var CONFIG = (function() {\n     var private = {\n         'MY_CONST': '1',\n         'ANOTHER_CONST': '2'\n     };\n\n     return {\n        get: function(name) { return private[name]; }\n    };\n})();\n\nalert('MY_CONST: ' + CONFIG.get('MY_CONST'));  // 1\n\nCONFIG.MY_CONST = '2';\nalert('MY_CONST: ' + CONFIG.get('MY_CONST'));  // 1\n\nCONFIG.private.MY_CONST = '2';                 // error\nalert('MY_CONST: ' + CONFIG.get('MY_CONST'));  // 1\n</code></pre>\n\n<p>Using this approach, the values cannot be modified.  But, you have to use the get() method on CONFIG :(.</p>\n\n<p>If you don't need to strictly protect the variables value, then just do as suggested and use a convention of ALL CAPS.</p>\n",
                    "is_accepted": false,
                    "score": 217
                },
                {
                    "body": "<p>The <code>const</code> keyword is in <a href=\"http://wiki.ecmascript.org/doku.php?id=harmony:const\">the ECMAScript 6 draft</a> but it thus far only enjoys a smattering of browser support: <a href=\"http://kangax.github.io/compat-table/es6/\">http://kangax.github.io/compat-table/es6/</a>. The syntax is:</p>\n\n<pre><code>const constant_name = 0;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 75
                },
                {
                    "body": "<p>IE does support constants, sort of, e.g.:</p>\n\n<pre><code>&lt;script language=\"VBScript\"&gt;\n Const IE_CONST = True\n&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n if (typeof TEST_CONST == 'undefined') {\n    const IE_CONST = false;\n }\n alert(IE_CONST);\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 48
                },
                {
                    "body": "<p>In JavaScript, my preference is to use functions to return constant values.  </p>\n\n<pre><code>function MY_CONSTANT() {\n   return \"some-value\";\n}\n\n\nalert(MY_CONSTANT());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>ECMAScript 5 does introduce <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/defineProperty\"><code>Object.defineProperty</code></a>:</p>\n\n<pre><code>Object.defineProperty (window,'CONSTANT',{ value : 5, writable: false });\n</code></pre>\n\n<p>But it's not widely supported at this moment in time.</p>\n\n<p>See also: <a href=\"http://stackoverflow.com/questions/3830800/object-defineproperty-in-es5\">Object.defineProperty in ES5?</a></p>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>In JavaScript my practice has been to avoid constants as much as I can and use strings instead. Problems with constants appear when you want to expose your constants to the outside world:</p>\n\n<p>For example one could implement the following Date API:</p>\n\n<pre><code>date.add(5, MyModule.Date.DAY).add(12, MyModule.Date.HOUR)\n</code></pre>\n\n<p>But it's much shorter and more natural to simply write:</p>\n\n<pre><code>date.add(5, \"days\").add(12, \"hours\")\n</code></pre>\n\n<p>This way \"days\" and \"hours\" really act like constants, because you can't change from the outside how many seconds \"hours\" represents. But it's easy to overwrite <code>MyModule.Date.HOUR</code>.</p>\n\n<p>This kind of approach will also aid in debugging. If Firebug tells you <code>action === 18</code> it's pretty hard to figure out what it means, but when you see <code>action === \"save\"</code> then it's immediately clear.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can easily equip your script with a mechanism for constants that can be set but not altered.  An attempt to alter them will generate an error.  </p>\n\n<pre><code>/* author Keith Evetts 2009 License: LGPL  \nanonymous function sets up:  \nglobal function SETCONST (String name, mixed value)  \nglobal function CONST (String name)  \nconstants once set may not be altered - console error is generated  \nthey are retrieved as CONST(name)  \nthe object holding the constants is private and cannot be accessed from the outer script directly, only through the setter and getter provided  \n*/\n\n(function(){  \n  var constants = {};  \n  self.SETCONST = function(name,value) {  \n      if (typeof name !== 'string') { throw new Error('constant name is not a string'); }  \n      if (!value) { throw new Error(' no value supplied for constant ' + name); }  \n      else if ((name in constants) ) { throw new Error('constant ' + name + ' is already defined'); }   \n      else {   \n          constants[name] = value;   \n          return true;  \n    }    \n  };  \n  self.CONST = function(name) {  \n      if (typeof name !== 'string') { throw new Error('constant name is not a string'); }  \n      if ( name in constants ) { return constants[name]; }    \n      else { throw new Error('constant ' + name + ' has not been defined'); }  \n  };  \n}())  \n\n\n// -------------  demo ----------------------------  \nSETCONST( 'VAT', 0.175 );  \nalert( CONST('VAT') );\n\n\n//try to alter the value of VAT  \ntry{  \n  SETCONST( 'VAT', 0.22 );  \n} catch ( exc )  {  \n   alert (exc.message);  \n}  \n//check old value of VAT remains  \nalert( CONST('VAT') );  \n\n\n// try to get at constants object directly  \nconstants['DODO'] = \"dead bird\";  // error  \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Sad that IE9 still does not support <code>const</code>. And the reason it's <a href=\"http://blogs.msdn.com/b/ie/archive/2010/08/25/chakra-interoperability-means-more-than-just-standards.aspx\">absurd</a>:</p>\n\n<blockquote>\n  <p>So, what is IE9 doing with const? So\n  far, our decision has been to not\n  support it. It isn\u2019t yet a consensus\n  feature as it has never been available\n  on all browsers.</p>\n  \n  <p>...</p>\n  \n  <p>In the end, it seems like the best\n  long term solution for the web is to\n  leave it out and to wait for\n  standardization processes to run their\n  course.</p>\n</blockquote>\n\n<p>They don't implement it because other browsers didn't implement it correctly?! Too afraid of making it better? Standards definitions or not, a constant is a constant: set once, never changed.</p>\n\n<p>And to all the ideas: Every function can be overwritten (XSS etc.). So there is no difference in <code>var</code> or <code>function(){return}</code>. <code>const</code> is the only real constant.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Okay, this is ugly, but it gives me a constant in Firefox and Chromium, an inconstant constant (WTF?) in Safari and Opera, and a variable in IE.</p>\n\n<p>Of course eval() is evil, but without it, IE throws an error, preventing scripts from running.</p>\n\n<p>Safari and Opera support the const keyword, but <em>you can change the const's value</em>.</p>\n\n<p>In this example, server-side code is writing JavaScript to the page, replacing {0} with a value.</p>\n\n<pre><code>try{\n    // i can haz const?\n    eval(\"const FOO='{0}';\");\n    // for reals?\n    var original=FOO;\n    try{\n        FOO='?NO!';\n    }catch(err1){\n        // no err from Firefox/Chrome - fails silently\n        alert('err1 '+err1);\n    }\n    alert('const '+FOO);\n    if(FOO=='?NO!'){\n        // changed in Sf/Op - set back to original value\n        FOO=original;\n    }\n}catch(err2){\n    // IE fail\n    alert('err2 '+err2);\n    // set var (no var keyword - Chrome/Firefox complain about redefining const)\n    FOO='{0}';\n    alert('var '+FOO);\n}\nalert('FOO '+FOO);\n</code></pre>\n\n<p>What is this good for?  Not much, since it's not cross-browser.  At best, maybe a little peace of mind that at least <em>some</em> browsers won't let bookmarklets or third-party script modify the value.</p>\n\n<p>Tested with Firefox 2, 3, 3.6, 4, Iron 8, Chrome 10, 12, Opera 11, Safari 5, IE 6, 9.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Forgets IE and use the <code>const</code> keyword.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Introducing constants into JavaScript is at best a hack.</p>\n\n<p>A nice way of making persistent and globally accessible values in JavaScript  would be declaring an object literal with some \"read-only\" properties like this:</p>\n\n<pre><code>            my={get constant1(){return \"constant 1\"},\n                get constant2(){return \"constant 2\"},\n                get constant3(){return \"constant 3\"},\n                get constantN(){return \"constant N\"}\n                }\n</code></pre>\n\n<p>you'll have all your constants grouped in one single \"my\" accessory object where you can look for your stored values or anything else you may have decided to put there for that matter. Now let's test if it works: </p>\n\n<pre><code>           my.constant1; &gt;&gt; \"constant 1\" \n           my.constant1 = \"new constant 1\";\n           my.constant1; &gt;&gt; \"constant 1\" \n</code></pre>\n\n<p>As we can see, the \"my.constant1\" property has preserved its original value. You've made yourself some nice 'green' temporary constants...</p>\n\n<p>But of course this will only guard you from accidentally modifying, altering, nullifying, or emptying your property constant value with a direct access as in the given example. </p>\n\n<p>Otherwise I still think that constants are for dummies. \nAnd I still think that exchanging your great freedom for a small corner of deceptive security is the worst trade possible.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I too have had a problem with this. And after quite a while searching for the answer and looking at all the responses by everybody, I think I've come up with a viable solution to this.</p>\n\n<p>It seems that most of the answers that I've come across is using functions to hold the constants. As many of the users of the MANY forums post about, the functions can be easily over written by users on the client side. I was intrigued by Keith Evetts' answer that the constants object can not be accessed by the outside, but only from the functions on the inside.</p>\n\n<p>So I came up with this solution:</p>\n\n<p>Put everything inside an anonymous function so that way, the variables, objects, etc. cannot be changed by the client side. Also hide the 'real' functions by having other functions call the 'real' functions from the inside. I also thought of using functions to check if a function has been changed by a user on the client side. If the functions have been changed, change them back using variables that are 'protected' on the inside and cannot be changed.</p>\n\n<pre><code>/*Tested in: IE 9.0.8; Firefox 14.0.1; Chrome 20.0.1180.60 m; Not Tested in Safari*/\n\n(function(){\n  /*The two functions _define and _access are from Keith Evetts 2009 License: LGPL (SETCONST and CONST).\n    They're the same just as he did them, the only things I changed are the variable names and the text\n    of the error messages.\n  */\n\n  //object literal to hold the constants\n  var j = {};\n\n  /*Global function _define(String h, mixed m). I named it define to mimic the way PHP 'defines' constants.\n    The argument 'h' is the name of the const and has to be a string, 'm' is the value of the const and has\n    to exist. If there is already a property with the same name in the object holder, then we throw an error.\n    If not, we add the property and set the value to it. This is a 'hidden' function and the user doesn't\n    see any of your coding call this function. You call the _makeDef() in your code and that function calls\n    this function.    -    You can change the error messages to whatever you want them to say.\n  */\n  self._define = function(h,m) {\n      if (typeof h !== 'string') { throw new Error('I don\\'t know what to do.'); }\n      if (!m) { throw new Error('I don\\'t know what to do.'); }\n      else if ((h in j) ) { throw new Error('We have a problem!'); }\n      else {\n          j[h] = m;\n          return true;\n    }\n  };\n\n  /*Global function _makeDef(String t, mixed y). I named it makeDef because we 'make the define' with this\n    function. The argument 't' is the name of the const and doesn't need to be all caps because I set it\n    to upper case within the function, 'y' is the value of the value of the const and has to exist. I\n    make different variables to make it harder for a user to figure out whats going on. We then call the\n    _define function with the two new variables. You call this function in your code to set the constant.\n    You can change the error message to whatever you want it to say.\n  */\n  self._makeDef = function(t, y) {\n      if(!y) { throw new Error('I don\\'t know what to do.'); return false; }\n      q = t.toUpperCase();\n      w = y;\n      _define(q, w);\n  };\n\n  /*Global function _getDef(String s). I named it getDef because we 'get the define' with this function. The\n    argument 's' is the name of the const and doesn't need to be all capse because I set it to upper case\n    within the function. I make a different variable to make it harder for a user to figure out whats going\n    on. The function returns the _access function call. I pass the new variable and the original string\n    along to the _access function. I do this because if a user is trying to get the value of something, if\n    there is an error the argument doesn't get displayed with upper case in the error message. You call this\n    function in your code to get the constant.\n  */\n  self._getDef = function(s) {\n      z = s.toUpperCase();\n      return _access(z, s);\n  };\n\n  /*Global function _access(String g, String f). I named it access because we 'access' the constant through\n    this function. The argument 'g' is the name of the const and its all upper case, 'f' is also the name\n    of the const, but its the original string that was passed to the _getDef() function. If there is an\n    error, the original string, 'f', is displayed. This makes it harder for a user to figure out how the\n    constants are being stored. If there is a property with the same name in the object holder, we return\n    the constant value. If not, we check if the 'f' variable exists, if not, set it to the value of 'g' and\n    throw an error. This is a 'hidden' function and the user doesn't see any of your coding call this\n    function. You call the _getDef() function in your code and that function calls this function.\n    You can change the error messages to whatever you want them to say.\n  */\n  self._access = function(g, f) {\n      if (typeof g !== 'string') { throw new Error('I don\\'t know what to do.'); }\n      if ( g in j ) { return j[g]; }\n      else { if(!f) { f = g; } throw new Error('I don\\'t know what to do. I have no idea what \\''+f+'\\' is.'); }\n  };\n\n  /*The four variables below are private and cannot be accessed from the outside script except for the\n    functions inside this anonymous function. These variables are strings of the four above functions and\n    will be used by the all-dreaded eval() function to set them back to their original if any of them should\n    be changed by a user trying to hack your code.\n  */\n  var _define_func_string = \"function(h,m) {\"+\"      if (typeof h !== 'string') { throw new Error('I don\\\\'t know what to do.'); }\"+\"      if (!m) { throw new Error('I don\\\\'t know what to do.'); }\"+\"      else if ((h in j) ) { throw new Error('We have a problem!'); }\"+\"      else {\"+\"          j[h] = m;\"+\"          return true;\"+\"    }\"+\"  }\";\n  var _makeDef_func_string = \"function(t, y) {\"+\"      if(!y) { throw new Error('I don\\\\'t know what to do.'); return false; }\"+\"      q = t.toUpperCase();\"+\"      w = y;\"+\"      _define(q, w);\"+\"  }\";\n  var _getDef_func_string = \"function(s) {\"+\"      z = s.toUpperCase();\"+\"      return _access(z, s);\"+\"  }\";\n  var _access_func_string = \"function(g, f) {\"+\"      if (typeof g !== 'string') { throw new Error('I don\\\\'t know what to do.'); }\"+\"      if ( g in j ) { return j[g]; }\"+\"      else { if(!f) { f = g; } throw new Error('I don\\\\'t know what to do. I have no idea what \\\\''+f+'\\\\' is.'); }\"+\"  }\";\n\n  /*Global function _doFunctionCheck(String u). I named it doFunctionCheck because we're 'checking the functions'\n    The argument 'u' is the name of any of the four above function names you want to check. This function will\n    check if a specific line of code is inside a given function. If it is, then we do nothing, if not, then\n    we use the eval() function to set the function back to its original coding using the function string\n    variables above. This function will also throw an error depending upon the doError variable being set to true\n    This is a 'hidden' function and the user doesn't see any of your coding call this function. You call the\n    doCodeCheck() function and that function calls this function.    -    You can change the error messages to\n    whatever you want them to say.\n  */\n  self._doFunctionCheck = function(u) {\n      var errMsg = 'We have a BIG problem! You\\'ve changed my code.';\n      var doError = true;\n      d = u;\n      switch(d.toLowerCase())\n      {\n           case \"_getdef\":\n               if(_getDef.toString().indexOf(\"z = s.toUpperCase();\") != -1) { /*do nothing*/ }\n               else { eval(\"_getDef = \"+_getDef_func_string); if(doError === true) { throw new Error(errMsg); } }\n               break;\n           case \"_makedef\":\n               if(_makeDef.toString().indexOf(\"q = t.toUpperCase();\") != -1) { /*do nothing*/ }\n               else { eval(\"_makeDef = \"+_makeDef_func_string); if(doError === true) { throw new Error(errMsg); } }\n               break;\n           case \"_define\":\n               if(_define.toString().indexOf(\"else if((h in j) ) {\") != -1) { /*do nothing*/ }\n               else { eval(\"_define = \"+_define_func_string); if(doError === true) { throw new Error(errMsg); } }\n               break;\n           case \"_access\":\n               if(_access.toString().indexOf(\"else { if(!f) { f = g; }\") != -1) { /*do nothing*/ }\n               else { eval(\"_access = \"+_access_func_string); if(doError === true) { throw new Error(errMsg); } }\n               break;\n           default:\n                if(doError === true) { throw new Error('I don\\'t know what to do.'); }\n      }\n  };\n\n  /*Global function _doCodeCheck(String v). I named it doCodeCheck because we're 'doing a code check'. The argument\n    'v' is the name of one of the first four functions in this script that you want to check. I make a different\n    variable to make it harder for a user to figure out whats going on. You call this function in your code to check\n    if any of the functions has been changed by the user.\n  */\n  self._doCodeCheck = function(v) {\n      l = v;\n      _doFunctionCheck(l);\n  };\n}())\n</code></pre>\n\n<p>It also seems that security is really a problem and there is not way to 'hide' you programming from the client side. A good idea for me is to compress your code so that it is really hard for anyone, including you, the programmer, to read and understand it. There is a site you can go to: <a href=\"http://javascriptcompressor.com/\" rel=\"nofollow\">http://javascriptcompressor.com/</a>. (This is not my site, don't worry I'm not advertising.) This is a site that will let you compress and obfuscate Javascript code for free.</p>\n\n<ol>\n<li>Copy all the code in the above script and paste it into the top textarea on the javascriptcompressor.com page.</li>\n<li>Check the Base62 encode checkbox, check the Shrink Variables checkbox.</li>\n<li>Press the Compress button.</li>\n<li>Paste and save it all in a .js file and add it to your page in the head of your page.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>My opinion (works only with objects).</p>\n\n<pre><code>var constants = (function(){\n  var a = 9;\n\n  //GLOBAL CONSTANT (through \"return\")\n  window.__defineGetter__(\"GCONST\", function(){\n    return a;\n  });\n\n  //LOCAL CONSTANT\n  return {\n    get CONST(){\n      return a;\n    }\n  }\n})();\n\nconstants.CONST = 8; //9\nalert(constants.CONST); //9\n</code></pre>\n\n<p>Try! But understand - this is object, but not simple variable.</p>\n\n<p>Try also just:</p>\n\n<pre><code>const a = 9;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>with the \"new\" Object api you can do something like this: </p>\n\n<pre><code>var obj = {};\nObject.defineProperty(obj, 'CONSTANT', {\n  configurable: false\n  enumerable: true,\n  writable: false,\n  value: \"your constant value\"\n});\n</code></pre>\n\n<p>take a look at <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperty\" rel=\"nofollow\">this</a> on the Mozilla MDN for more specifics. It's not a first level variable, as it is attached to an object, but if you have a scope, anything, you can attach it to that. <code>this</code> should work as well. \nSo for example doing this in the global scope will declare a pseudo constant value on the window (which is a really bad idea, you shouldn't declare global vars carelessly)</p>\n\n<pre><code>Object.defineProperty(this, 'constant', {\n  enumerable: true, \n  writable: false, \n  value: 7, \n  configurable: false\n});\n\n&gt; constant\n=&gt; 7\n&gt; constant = 5\n=&gt; 7\n</code></pre>\n\n<p>note: assignment will give you back the assigned value in the console, but the variable's value will not change</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p><code>Rhino.js</code> implements <code>const</code> in addition to what was mentioned above.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Clearly this shows the need for a standardized cross-browser const keyword.</p>\n\n<p>But for now:</p>\n\n<pre><code>var myconst = value;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>Object['myconst'] = value;\n</code></pre>\n\n<p>Both seem sufficient and anything else is like shooting a fly with a bazooka.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Yet there is no exact cross browser predefined way to do it , you can achieve it by controlling the scope of variables as showed on other answers.</p>\n\n<p>But i will suggest to use name space to distinguish from other variables. this will reduce the chance of collision to minimum from other variables.</p>\n\n<p>Proper namespacing like</p>\n\n<pre><code>var iw_constant={\n     name:'sudhanshu',\n     age:'23'\n     //all varibale come like this\n}\n</code></pre>\n\n<p>so while using it will be <code>iw_constant.name</code> or <code>iw_constant.age</code></p>\n\n<p>You can also block adding any new key or changing any key inside iw_constant using Object.freeze method. However its not supported on legacy browser.</p>\n\n<p>ex: </p>\n\n<pre><code>Object.freeze(iw_constant);\n</code></pre>\n\n<p>For older browser you can use <a href=\"http://stackoverflow.com/questions/13117771/javascript-object-doesnt-support-method-freeze\">polyfill</a> for freeze method.</p>\n\n<hr>\n\n<p>If you are ok with calling function following is best cross browser way to define constant. Scoping your object within a self executing function and returning a get function for your constants\nex:</p>\n\n<pre><code>var iw_constant= (function(){\n       var allConstant={\n             name:'sudhanshu',\n             age:'23'\n             //all varibale come like this\n\n       };\n\n       return function(key){\n          allConstant[key];\n       }\n    };\n</code></pre>\n\n<p>//to get the value use\n<code>iw_constant('name')</code> or <code>iw_constant('age')</code></p>\n\n<hr>\n\n<p>** In both example you have to be very careful on name spacing so that your object or function shouldn't be replaced through other library.(If object or function itself wil be replaced your whole constant will go)</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>const keyword available in javscript language but it does not support IE browser. Rest all browser supported.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you don't mind using functions:</p>\n\n<pre><code>var constant = function(val) {\n   return function() {\n        return val;\n    }\n}\n</code></pre>\n\n<p>This approach gives you functions instead of regular variables, but it guarantees<sup>*</sup> that no one can alter the value once it's set.</p>\n\n<pre><code>a = constant(10);\n\na(); // 10\n\nb = constant(20);\n\nb(); // 20\n</code></pre>\n\n<p>I personally find this rather pleasant, specially after having gotten used to this pattern from knockout observables.</p>\n\n<p><sup><sub>*Unless someone redefined the function <code>constant</code> before you called it</sub></sup></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>\"use strict\";\n\nvar constants = Object.freeze({\n    \"\u03c0\": 3.141592653589793 ,\n    \"e\": 2.718281828459045 ,\n    \"i\": Math.sqrt(-1)\n});\n\nconstants.\u03c0\n// -&gt; 3.141592653589793\nconstants.\u03c0 = 3\n// -&gt; TypeError: Cannot assign to read only property '\u03c0' \u2026\nconstants.\u03c0\n// -&gt; 3.141592653589793\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Another alternative is something like:</p>\n\n<pre><code>var constants = {\n      MY_CONSTANT : \"myconstant\",\n      SOMETHING_ELSE : 123\n    }\n  , constantMap = new function ConstantMap() {};\n\nfor(var c in constants) {\n  !function(cKey) {\n    Object.defineProperty(constantMap, cKey, {\n      enumerable : true,\n      get : function(name) { return constants[cKey]; }\n    })\n  }(c);\n}\n</code></pre>\n\n<p>Then simply: <code>var foo = constantMap.MY_CONSTANT</code></p>\n\n<p>If you were to <code>constantMap.MY_CONSTANT = \"bar\"</code> it would have no effect as we're trying to use an assignment operator with a getter, hence <code>constantMap.MY_CONSTANT === \"myconstant\"</code> would remain true.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>An improved version of <a href=\"http://stackoverflow.com/a/131286/704144\">Burke's answer</a> that lets you do <code>CONFIG.MY_CONST</code> instead of <code>CONFIG.get('MY_CONST')</code>. It requires IE9+ or a real web browser.</p>\n\n<pre><code>var CONFIG = (function() {\n     var constants = {\n         'MY_CONST': 1,\n         'ANOTHER_CONST': 2\n     };\n\n     var result = {};\n     for (var name in constants)\n        if (constants.hasOwnProperty(name))\n            Object.defineProperty(result, name, {\n                get: function () { return constants[name]; }\n            });\n\n    return result;\n}());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If it is worth mentioning, you can define constants in <a href=\"http://angularjs.org/\" rel=\"nofollow\">angular</a> using <a href=\"https://docs.angularjs.org/api/auto/service/$provide#constant\" rel=\"nofollow\"><code>$provide.constant()</code></a></p>\n\n<pre><code>angularApp.constant('YOUR_CONSTANT', 'value');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>If not, what's the common practice for specifying variables that are used as constants?</p>\n",
            "last_activity_date": 1421411712,
            "question_id": 130396,
            "score": 565,
            "tags": [
                "javascript",
                "const"
            ],
            "title": "Are there constants in Javascript?"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Here is kind of dirty workaround by creating custom directive that will scrolls to specified element (with hardcoded \"faq\")</p>\n\n<pre><code>app.directive('h3', function($routeParams) {\n  return {\n    restrict: 'E',\n    link: function(scope, element, attrs){        \n        if ('faq'+$routeParams.v == attrs.id) {\n          setTimeout(function() {\n             window.scrollTo(0, element[0].offsetTop);\n          },1);        \n        }\n    }\n  };\n});\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/Po37JFeP5IsNoz5ZycFs?p=preview\" rel=\"nofollow\">http://plnkr.co/edit/Po37JFeP5IsNoz5ZycFs?p=preview</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Try to set a hash prefix for angular routes <code>$locationProvider.hashPrefix('!')</code></p>\n\n<p>Full example:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('app', [])\n  .config(['$routeProvider', '$locationProvider', \n    function($routeProvider, $locationProvider){\n      $routeProvider.when( ... );\n      $locationProvider.hashPrefix('!');\n    }\n  ])\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You're looking for <code>$anchorScroll()</code>.</p>\n\n<p><a href=\"http://docs.angularjs.org/api/ng.%24anchorScroll\">Here's the (crappy) documentation.</a></p>\n\n<p><a href=\"https://github.com/angular/angular.js/blob/master/src/ng/anchorScroll.js\">And here's the source.</a></p>\n\n<p>Basically you just inject it and call it in your controller, and it will scroll you to any element with the id found in <code>$location.hash()</code></p>\n\n<pre><code>app.controller('TestCtrl', function($scope, $location, $anchorScroll) {\n   $scope.scrollTo = function(id) {\n      $location.hash(id);\n      $anchorScroll();\n   }\n});\n\n&lt;a ng-click=\"scrollTo('foo')\"&gt;Foo&lt;/a&gt;\n\n&lt;div id=\"foo\"&gt;Here you are&lt;/div&gt;\n</code></pre>\n\n<p><a href=\"http://plnkr.co/edit/PCO051UJS8EHbdkmFV40?p=preview\">Here is a plunker to demonstrate</a></p>\n\n<p><strong>EDIT: to use this with routing</strong></p>\n\n<p>Set up your angular routing as usual, then just add the following code.</p>\n\n<pre><code>app.run(function($rootScope, $location, $anchorScroll, $routeParams) {\n  //when the route is changed scroll to the proper element.\n  $rootScope.$on('$routeChangeSuccess', function(newRoute, oldRoute) {\n    $location.hash($routeParams.scrollTo);\n    $anchorScroll();  \n  });\n});\n</code></pre>\n\n<p>and your link would look like this:</p>\n\n<pre><code>&lt;a href=\"#/test?scrollTo=foo\"&gt;Test/Foo&lt;/a&gt;\n</code></pre>\n\n<p>Here is a <a href=\"http://plnkr.co/edit/De6bBrkHpojgAbEvHszu\">Plunker demonstrating scrolling with routing and $anchorScroll</a></p>\n",
                    "is_accepted": true,
                    "score": 160
                },
                {
                    "body": "<p>in my case I noticed that the routing logic was kicking in if I modified the location hash. the following trick worked..</p>\n\n<pre><code>$scope.scrollTo = function(id) {\n    var old = $location.hash();\n    $location.hash(id);\n    $anchorScroll();\n    //reset to old to keep any additional routing logic from kicking in\n    $location.hash(old);\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 73
                },
                {
                    "body": "<p>This was my solution using a directive which seems more Angular-y because we're dealing with the DOM:</p>\n\n<p><a href=\"http://plnkr.co/edit/Sl2V4u3tVzsqEj7ttgNi?p=preview\" rel=\"nofollow\">Plnkr over here</a></p>\n\n<p><a href=\"https://github.com/khalilravanna/scrollTo\" rel=\"nofollow\">github</a></p>\n\n<h2>CODE</h2>\n\n<pre><code>angular.module('app', [])\n.directive('scrollTo', function ($location, $anchorScroll) {\n  return function(scope, element, attrs) {\n\n    element.bind('click', function(event) {\n        event.stopPropagation();\n        var off = scope.$on('$locationChangeStart', function(ev) {\n            off();\n            ev.preventDefault();\n        });\n        var location = attrs.scrollTo;\n        $location.hash(location);\n        $anchorScroll();\n    });\n\n  };\n});\n</code></pre>\n\n<h2>HTML</h2>\n\n<pre><code>&lt;ul&gt;\n  &lt;li&gt;&lt;a href=\"\" scroll-to=\"section1\"&gt;Section 1&lt;/a&gt;&lt;/li&gt;\n  &lt;li&gt;&lt;a href=\"\" scroll-to=\"section2\"&gt;Section 2&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1 id=\"section1\"&gt;Hi, I'm section 1&lt;/h1&gt;\n&lt;p&gt;\nZombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis. \n Summus brains sit\u200b\u200b, morbo vel maleficia? De apocalypsi gorger omero undead survivor dictum mauris. \nHi mindless mortuis soulless creaturas, imo evil stalking monstra adventus resi dentevil vultus comedat cerebella viventium. \nNescio brains an Undead zombies. Sicut malus putrid voodoo horror. Nigh tofth eliv ingdead.\n&lt;/p&gt;\n\n&lt;h1 id=\"section2\"&gt;I'm totally section 2&lt;/h1&gt;\n&lt;p&gt;\nZombie ipsum reversus ab viral inferno, nam rick grimes malum cerebro. De carne lumbering animata corpora quaeritis. \n Summus brains sit\u200b\u200b, morbo vel maleficia? De apocalypsi gorger omero undead survivor dictum mauris. \nHi mindless mortuis soulless creaturas, imo evil stalking monstra adventus resi dentevil vultus comedat cerebella viventium. \nNescio brains an Undead zombies. Sicut malus putrid voodoo horror. Nigh tofth eliv ingdead.\n&lt;/p&gt;\n</code></pre>\n\n<p>I used the $anchorScroll service. To counteract the page-refresh that goes along with the hash changing I went ahead and cancelled the locationChangeStart event. This worked for me because I had a help page hooked up to an ng-switch and the refreshes would esentially break the app. </p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>If you always know the route, you can simply append the anchor like this:</p>\n\n<pre><code>href=\"#/route#anchorID\n</code></pre>\n\n<p>where <code>route</code> is the current angular route and <code>anchorID</code> matches an <code>&lt;a id=\"anchorID\"&gt;</code> somewhere on the page</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>You could try to use <a href=\"http://docs.angularjs.org/api/ng.%24anchorScroll\" rel=\"nofollow\">anchorScroll</a>.</p>\n\n<p><a href=\"http://plnkr.co/edit/QeU4oPJ1f0tx5b0tyFFX?p=preview\" rel=\"nofollow\">Example</a></p>\n\n<p>So the controller would be:</p>\n\n<pre><code>app.controller('MainCtrl', function($scope, $location, $anchorScroll, $routeParams) {\n  $scope.scrollTo = function(id) {\n     $location.hash(id);\n     $anchorScroll();\n  }\n});\n</code></pre>\n\n<p>And the view:</p>\n\n<pre><code>&lt;a href=\"\" ng-click=\"scrollTo('foo')\"&gt;Scroll to #foo&lt;/a&gt;\n</code></pre>\n\n<p>...and no secret for the anchor id:</p>\n\n<pre><code>&lt;div id=\"foo\"&gt;\n  This is #foo\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>&lt;a href=\"##faq-1\"&gt;Question 1&lt;/a&gt;\n&lt;a href=\"##faq-2\"&gt;Question 2&lt;/a&gt;\n&lt;a href=\"##faq-3\"&gt;Question 3&lt;/a&gt;\n\n&lt;h3 id=\"faq-1\"&gt;Question 1&lt;/h3&gt;\n&lt;h3 id=\"faq-2\"&gt;Question 2&lt;/h3&gt;\n&lt;h3 id=\"faq-3\"&gt;Question 3&lt;/h3&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>This may be a new attribute for ngView, but I've been able to get it anchor hash links to work with <code>angular-route</code> using the <code>ngView autoscroll</code> attribute and 'double-hashes'. </p>\n\n<p><a href=\"https://docs.angularjs.org/api/ngRoute/directive/ngView\" rel=\"nofollow\" title=\"ngView with autoscroll\">ngView (see autoscroll)</a></p>\n\n<p>(The following code was used with angular-strap)</p>\n\n<pre><code>&lt;!-- use the autoscroll attribute to scroll to hash on $viewContentLoaded --&gt;    \n&lt;div ng-view=\"\" autoscroll&gt;&lt;/div&gt;\n\n&lt;!-- A.href link for bs-scrollspy from angular-strap --&gt;\n&lt;!-- A.ngHref for autoscroll on current route without a location change --&gt;\n&lt;ul class=\"nav bs-sidenav\"&gt;\n  &lt;li data-target=\"#main-html5\"&gt;&lt;a href=\"#main-html5\" ng-href=\"##main-html5\"&gt;HTML5&lt;/a&gt;&lt;/li&gt;\n  &lt;li data-target=\"#main-angular\"&gt;&lt;a href=\"#main-angular\" ng-href=\"##main-angular\" &gt;Angular&lt;/a&gt;&lt;/li&gt;\n  &lt;li data-target=\"#main-karma\"&gt;&lt;a href=\"#main-karma\" ng-href=\"##main-karma\"&gt;Karma&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I got around this in the route logic for my app. </p>\n\n<pre><code>function config($routeProvider) {\n  $routeProvider\n    .when('/', {\n      templateUrl: '/partials/search.html',\n      controller: 'ctrlMain'\n    })\n    .otherwise({\n      // Angular interferes with anchor links, so this function preserves the\n      // requested hash while still invoking the default route.\n      redirectTo: function() {\n        // Strips the leading '#/' from the current hash value.\n        var hash = '#' + window.location.hash.replace(/^#\\//g, '');\n        window.location.hash = hash;\n        return '/' + hash;\n      }\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I was trying to make my Angular app scroll to an anchor opon loading and ran into the URL rewriting rules of $routeProvider.</p>\n\n<p>After long experimentation I settled on this:</p>\n\n<ol>\n<li>register a document.onload event handler from the .run() section of\nthe Angular app module.  </li>\n<li>in the handler find out what the original\nhas anchor tag was supposed to be by doing some string operations.</li>\n<li>override location.hash with the stripped down anchor tag (which\ncauses $routeProvider to immediately overwrite it again with it's\n\"#/\" rule. But that is fine, because Angular is now in sync with\nwhat is going on in the URL 4) call $anchorScroll().</li>\n</ol>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>angular.module(\"bla\",[]).}])\r\n.run(function($location, $anchorScroll){\r\n         $(document).ready(function() {\r\n\t if(location.hash &amp;&amp; location.hash.length&gt;=1)    \t\t{\r\n\t\t\tvar path = location.hash;\r\n\t\t\tvar potentialAnchor = path.substring(path.lastIndexOf(\"/\")+1);\r\n\t\t\tif ($(\"#\" + potentialAnchor).length &gt; 0) {   // make sure this hashtag exists in the doc.                          \r\n\t\t\t    location.hash = potentialAnchor;\r\n\t\t\t    $anchorScroll();\r\n\t\t\t}\r\n\t\t}\t \r\n });</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I am not 100% sure if this works all the time, but in my application this gives me the expected behavior. </p>\n\n<p>Lets say you are on <strong>ABOUT</strong> page and you have the following route:</p>\n\n<pre><code>yourApp.config(['$routeProvider', \n    function($routeProvider) {\n        $routeProvider.\n            when('/about', {\n                templateUrl: 'about.html',\n                controller: 'AboutCtrl'\n            }).\n            otherwise({\n                redirectTo: '/'\n            });\n        }\n]);\n</code></pre>\n\n<p>Now, in you HTML</p>\n\n<pre><code>&lt;ul&gt;\n    &lt;li&gt;&lt;a href=\"#/about#tab1\"&gt;First Part&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#/about#tab2\"&gt;Second Part&lt;/a&gt;&lt;/li&gt;\n    &lt;li&gt;&lt;a href=\"#/about#tab3\"&gt;Third Part&lt;/a&gt;&lt;/li&gt;                      \n&lt;/ul&gt;\n\n&lt;div id=\"tab1\"&gt;1&lt;/div&gt;\n&lt;div id=\"tab2\"&gt;2&lt;/div&gt;\n&lt;div id=\"tab3\"&gt;3&lt;/div&gt;\n</code></pre>\n\n<p><strong>In conclusion</strong></p>\n\n<p>Including the page name before the anchor did the trick for me.\nLet me know about your thoughts.</p>\n\n<p><strong>Downside</strong> </p>\n\n<p>This will re-render the page and then scroll to the anchor.</p>\n\n<p><strong>UPDATE</strong></p>\n\n<p>A better way is to add the following:</p>\n\n<pre><code>&lt;a href=\"#tab1\" onclick=\"return false;\"&gt;First Part&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>On Route change it will scroll to the top of the page.</p>\n\n<pre><code> $scope.$on('$routeChangeSuccess', function () {\n      window.scrollTo(0, 0);\n  });\n</code></pre>\n\n<p>put this code on your controller.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In my mind @slugslog had it, but I would change one thing. I would use replace instead so you don't have to set it back.</p>\n\n<pre><code>$scope.scrollTo = function(id) {\n    var old = $location.hash();\n    $location.hash(id).replace();\n    $anchorScroll();\n};\n</code></pre>\n\n<p><a href=\"https://docs.angularjs.org/guide/$location\" rel=\"nofollow\">Docs</a> Search for \"Replace method\"</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Do any of you know how to nicely handle anchor hash linking in AngularJS?</p>\n\n<p>I have the following markup for a simple FAQ-page</p>\n\n<pre><code>&lt;a href=\"#faq-1\"&gt;Question 1&lt;/a&gt;\n&lt;a href=\"#faq-2\"&gt;Question 2&lt;/a&gt;\n&lt;a href=\"#faq-3\"&gt;Question 3&lt;/a&gt;\n\n&lt;h3 id=\"faq-1\"&gt;Question 1&lt;/h3&gt;\n&lt;h3 id=\"faq-2\"&gt;Question 2&lt;/h3&gt;\n&lt;h3 id=\"fa1-3\"&gt;Question 3&lt;/h3&gt;\n</code></pre>\n\n<p>When clicking on any of the above links AngularJS intercepts and routes me to a completely different page (in my case, a 404-page as there are no routes matching the links.)</p>\n\n<p>My first thought was to create a route matching \"/faq/:chapter\" and in the corresponding controller check $routeParams.chapter after a matching element and then use jQuery to scroll down to it.\nBut then AngularJS shits on me again and just scrolls to the top of the page anyway.</p>\n\n<p>So, anyone here done anything similar in the past and knows a good solution to it?</p>\n\n<p>Edit: Switching to html5Mode should solve my problems but we kinda have to support IE8+ anyway  so I fear it's not an accepted solution :/</p>\n",
            "last_activity_date": 1423079460,
            "question_id": 14712223,
            "score": 129,
            "tags": [
                "javascript",
                "angularjs",
                "anchor",
                "hashtag"
            ],
            "title": "How to handle anchor hash linking in AngularJS"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Since you are open to jQuery, <a href=\"http://andowebsit.es/blog/noteslog.com/post/how-to-fix-the-resize-event-in-ie/\" rel=\"nofollow\">this plugin</a> seems to do the trick.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>$(window).bind('resize', function () { \n\n    alert('resize');\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>jQuery has a <a href=\"http://api.jquery.com/resize/\">built-in method</a> for this:</p>\n\n<pre><code>$(window).resize(function () { /* do something */ });\n</code></pre>\n\n<p>For the sake of UI responsiveness, you might consider using a setTimeout to call your code only after some number of milliseconds, as shown in the following example, inspired by <a href=\"http://snipplr.com/view/6284/jquery--window-on-resize-event/\">this</a>:</p>\n\n<pre><code>function doSomething() {\n    alert(\"I'm done resizing for the moment\");\n};\n\nvar resizeTimer;\n$(window).resize(function() {\n    clearTimeout(resizeTimer);\n    resizeTimer = setTimeout(doSomething, 100);\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 298
                },
                {
                    "body": "<p>I consider the jQuery plugin \"jQuery resize event\" to be the best solution for this as it takes care of throttling the event so that it works the same across all browsers. It's similar to Andrews answer but better since you can hook the resize event to specific elements/selectors as well as the entire window. It opens up new possibilities to write clean code.</p>\n\n<p>The plugin is available <a href=\"http://benalman.com/code/projects/jquery-resize/docs/files/jquery-ba-resize-js.html\" rel=\"nofollow\">here</a></p>\n\n<p>There are performance issues if you add a lot of listeners, but for most usage cases it's perfect.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Sorry to bring up an old thread, but if someone doesn't want to use jQuery you can use this:</p>\n\n<pre><code>function foo(){....};\nwindow.onresize=foo;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>I think you should add further control to this:</p>\n\n<pre><code>    var disableRes = false;\n    var refreshWindow = function() {\n        disableRes = false;\n        location.reload();\n    }\n    var resizeTimer;\n    if (disableRes == false) {\n        jQuery(window).resize(function() {\n            disableRes = true;\n            clearTimeout(resizeTimer);\n            resizeTimer = setTimeout(refreshWindow, 1000);\n        });\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Using jQuery 1.9.1 I just found out that, although technically identical, this did not work in IE10 (but in Firefox):</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// did not work in IE10\n$(function() {\n    $(window).resize(CmsContent.adjustSize);\n});\n</code></pre>\n\n<p>while this worked in both browsers:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// did work in IE10\n$(function() {\n    $(window).bind('resize', function() {\n        CmsContent.adjustSize();\n    };\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><code>jQuery</code> provides <code>$(window).resize()</code> function by default:</p>\n\n<pre><code>&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n// function for resize of div/span elements\nfunction resizeScreen(){\n    // here I am resizing my div class height\n    $(\".rightPanelData\").css('height', ($(window).height()-166));\n    $(\".leftPanelData\").css('height', ($(window).height()-236));\n}\n\n//jQuery window resize call/event\n$(window).resize(function() {\n    //alert('resizing process');\n    resizeScreen();\n});\n&lt;/script&gt; \n</code></pre>\n\n<p>Hope it helps ppl here !</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is the non-jQuery way of tapping into the resize event:</p>\n\n<pre><code>window.addEventListener('resize', function(event){\n  // do stuff here\n});\n</code></pre>\n\n<p>It works on all modern browsers. It does <strong>not</strong> throttle anything for you. <a href=\"http://codepen.io/jondlm/pen/doijJ\">Here is an example</a> of it in action. </p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><strong>hope it will help in jQuery</strong></p>\n\n<p>define a function first, if there is an existing function skip to next step. </p>\n\n<pre><code> function someFun() {\n //use your code\n }\n</code></pre>\n\n<p>browser resize use like these.</p>\n\n<pre><code> $(window).on('resize', function () {\n    someFun();  //call your function.\n });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What is the correct (modern) method for tapping into the window resize event that works in Firefox, <a href=\"http://en.wikipedia.org/wiki/WebKit\">WebKit</a>, and Internet Explorer?</p>\n\n<p>And can you turn both scrollbars on/off?</p>\n",
            "last_activity_date": 1403106544,
            "question_id": 599288,
            "score": 181,
            "tags": [
                "javascript",
                "jquery",
                "cross-browser",
                "resize"
            ],
            "title": "Cross-browser window resize event - JavaScript / jQuery"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>First of all you should use the object literal like this:</p>\n\n<pre><code>var Class = {\n  calc: function (a, b) {\n    return a + b;\n  }\n};\n</code></pre>\n\n<p>This notation is cleaner and also makes it obvious that in Javascript objects are just hashes not something backed from a recipe, like a predefined class.</p>\n\n<p>The difference between definitions is that If you add method to prototype there will be only one method created in memory for all instances. So if you have a generic method and an object that is created/used in multiple instances you should add the method to prototype.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Methods that inherit via the prototype chain can be changed universally for all instances, for example:</p>\n\n<pre><code>function Class () {}\nClass.prototype.calc = function (a, b) {\n    return a + b;\n}\n\n// Create 2 instances:\nvar ins1 = new Class(),\n    ins2 = new Class();\n\n// Test the calc method:\nconsole.log(ins1.calc(1,1), ins2.calc(1,1));\n// -&gt; 2, 2\n\n// Change the prototype method\nClass.prototype.calc = function () {\n    var args = Array.prototype.slice.apply(arguments),\n        res = 0, c;\n\n    while (c = args.shift())\n        res += c;\n\n    return res; \n}\n\n// Test the calc method:\nconsole.log(ins1.calc(1,1,1), ins2.calc(1,1,1));\n// -&gt; 3, 3\n</code></pre>\n\n<p>Notice how changing the method applied to both instances?  This is because <code>ins1</code> and <code>ins2</code> share the same <code>calc()</code> function.  In order to do this with public methods created during construction, you'd have to assign the new method to each instance that has been created, which is an awkward task.  This is because <code>ins1</code> and <code>ins2</code> would have their own, individually created <code>calc()</code> functions. </p>\n\n<p>Another side effect of creating methods inside the constructor is poorer performance.  Each method has to be created every time the constructor function runs.  Methods on the prototype chain are created once and then \"inherited\" by each instance.  On the flip side of the coin, public methods have access to \"private\" variables, which isn't possible with inherited methods.</p>\n\n<p>As for your <code>function Class() {}</code> vs <code>var Class = function () {}</code> question, the former is \"hoisted\" to the top of the current scope before execution.  For the latter, the variable declaration is hoisted, but not the assignment.  For example:</p>\n\n<pre><code>// Error, fn is called before the function is assigned!\nfn();\nvar fn = function () { alert(\"test!\"); } \n\n// Works as expected: the fn2 declaration is hoisted above the call\nfn2();\nfunction fn2() { alert(\"test!\"); }\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 142
                },
                {
                    "body": "<p>The advantage of the prototype approach is efficiency. There is one <code>calc()</code> function object shared between all <code>Class</code> objects (by which I mean objects created by calling the <code>Class</code> constructor). The other way (assigning methods within the constructor) creates a new function object for every <code>Class</code> object, using more memory and taking more processing time when calling the <code>Class</code> constructor. However, this approach does have an advantage: the <code>calc()</code> method has access to local variables within the constructor, which you can use to your advantage:</p>\n\n<pre><code>function Class() {\n    var calcCallCount = 0;\n\n    this.calc = function (a, b) {\n        ++calcCallCount;\n        alert(\"Calc called \" + calcCallCount + \" times\");\n        return a + b;\n    };\n};\n</code></pre>\n\n<p>Regarding <code>var Class = function() {...}</code> versus <code>function Class() {...}</code>, I generally prefer the latter is because it means the function has a name, which can be useful when debugging. The other difference is that the latter version (a <em>function declaration</em>) is hoisted, meaning that it is available everywhere within the scope in which it is defined, not just after the definition. However, <a href=\"http://ejohn.org/blog/javascript-as-a-first-language/\" rel=\"nofollow\">some people</a> prefer to use the former (a <em>function expression</em>) everywhere.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<pre><code>var YourClass = function(){\n  var privateField = \"somevalue\";\n  this.publicField = \"somevalue\";\n  this.instanceMethod1 = function(){\n     //you may access both private and public field from here:\n     //in order to access public field, you must use \"this\":\n     alert(privateField + \"; \" + this.publicField);\n  };\n}\n\nYourClass.prototype.instanceMethod2 = function(){\n  //you may access only public field 2 from this method, but not private fields:\n  alert(this.publicField);\n  //error: drawaback of prototype methods:\n  alert(privateField);  \n};\n</code></pre>\n\n<p>Advantages of prototype methods:</p>\n\n<ol>\n<li><p>When you define methods via prototype, they are shared among all YourClass instances. As a result the total size of such instances is &lt; than if you define methods in constructor; There are tests that show how method definition via prototype decrease the total size of html page and as a result a speed of its loading.</p></li>\n<li><p>another advantage of methods, defined via prototype - is when you use inherited classes, you may override such methods and in the overriden method of the derived class you may invoke the method of base class with the same name, but with methods defined in constructor, you cannot do this.</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I am wondering if there are any advantages of using any of these over the other, and which way should I go?</p>\n\n<p>Constructor approach:</p>\n\n<pre><code>var Class = function () {\n\n    this.calc = function (a, b) {\n        return a + b;\n    };\n\n};\n</code></pre>\n\n<p>Prototype approach:</p>\n\n<pre><code>var Class = function () {};\n\nClass.prototype.calc = function (a, b) {\n    return a + b;\n};\n</code></pre>\n\n<p>I don't like that, using the prototype, method definitions are separated from the class, and I'm not aware if there is any specific reason I should use this over just the first approach.</p>\n\n<p>Also, is there any benefit of using a function literal to define a \"class\", over just function definition:</p>\n\n<pre><code>var Class = function () {};\n</code></pre>\n\n<p>vs</p>\n\n<pre><code>function Class () {};\n</code></pre>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1423568248,
            "question_id": 4508313,
            "score": 89,
            "tags": [
                "javascript",
                "oop",
                "prototype"
            ],
            "title": "Advantages of using prototype, vs defining methods straight in the constructor?"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>Found this interesting....\nYou can give it a try..</p>\n\n<pre><code>function isCapslock(e){\n\n    e = (e) ? e : window.event;\n\n    var charCode = false;\n    if (e.which) {\n        charCode = e.which;\n    } else if (e.keyCode) {\n        charCode = e.keyCode;\n    }\n\n    var shifton = false;\n    if (e.shiftKey) {\n        shifton = e.shiftKey;\n    } else if (e.modifiers) {\n        shifton = !!(e.modifiers &amp; 4);\n    }\n\n    if (charCode &gt;= 97 &amp;&amp; charCode &lt;= 122 &amp;&amp; shifton) {\n        return true;\n    }\n\n    if (charCode &gt;= 65 &amp;&amp; charCode &lt;= 90 &amp;&amp; !shifton) {\n        return true;\n    }\n\n    return false;\n\n}\n</code></pre>\n\n<p>For international characters, additional check can be added for the following keys as needed.  You have to get the keycode range for characters you are interested in, may be by using a keymapping array which will hold all the valid use case keys you are addressing...</p>\n\n<p>uppercase A-Z or '\u00c4', '\u00d6', '\u00dc', \nlowercase a-Z or 0-9 or '\u00e4', '\u00f6', '\u00fc'</p>\n\n<p>The above keys are just sample representation.</p>\n",
                    "is_accepted": true,
                    "score": 55
                },
                {
                    "body": "<p>In <a href=\"http://jquery.com\" rel=\"nofollow\">jQuery</a>:</p>\n\n<pre><code>$('some_element').keypress(function(e){\n       if(e.keyCode == 20){\n             //caps lock was pressed\n       }\n});\n</code></pre>\n\n<p><a href=\"http://stackoverflow.com/questions/348792/how-do-you-tell-if-caps-lock-is-on-using-javascript#348802\">This jQuery plugin</a> (<a href=\"http://plugins.jquery.com/files/jquery.caps.js.txt\" rel=\"nofollow\">code</a>) implements the same idea as in <a href=\"http://stackoverflow.com/questions/348792/how-do-you-tell-if-caps-lock-is-on-using-javascript#348802\">Rajesh's answer</a> a bit more succinctly.</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>You can detect caps lock using \"is letter uppercase and no shift pressed\" using a keypress capture on the document. But then you better be sure that no other keypress handler pops the event bubble before it gets to the handler on the document.</p>\n\n<pre><code>document.onkeypress = function ( e ) {\n  e = e ||\u00a0window.event;\n  var s = String.fromCharCode( e.keyCode || e.which );\n  if ( s.toUpperCase() === s &amp;&amp; !e.shiftKey ) { // incomplete: shift + caps MAY = lowercase\n    // alert('caps is on')\n  }\n}\n</code></pre>\n\n<p>You could grab the event during the capturing phase in browsers that support that, but it seems somewhat pointless to as it won't work on all browsers.</p>\n\n<p>I can't think of any other way of actually detecting caps lock status. The check is simple anyway and if non detectable characters were typed, well... then detecting wasn't necessary.</p>\n\n<p>There was <a href=\"http://24ways.org/2007/capturing-caps-lock\">an article on 24 ways</a> on this last year. Quite good, but lacks international character support (use <code>toUpperCase()</code> to get around that).</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>In jQuery,</p>\n\n<pre><code>$('#example').keypress(function(e) { \n    var s = String.fromCharCode( e.which );\n    if ( s.toUpperCase() === s &amp;&amp; s.toLowerCase() !== s &amp;&amp; !e.shiftKey ) {\n        alert('caps is on');\n    }\n});\n</code></pre>\n\n<p>Avoid the mistake, like the backspace key,  <code>s.toLowerCase() !== s</code> is needed.</p>\n",
                    "is_accepted": false,
                    "score": 95
                },
                {
                    "body": "<p>In JQuery. This covers the event handling in Firefox and will check for both unexpected uppercase and lowercase characters. This presupposes an <code>&lt;input id=\"password\" type=\"password\" name=\"whatever\"/&gt;</code>element and a separate element with id '<code>capsLockWarning</code>' that has the warning we want to show (but is hidden otherwise).</p>\n\n<pre><code>$('#password').keypress(function(e) {\n    e = e || window.event;\n\n    // An empty field resets the visibility.\n    if (this.value === '') {\n        $('#capsLockWarning').hide();\n        return;\n    }\n\n    // We need alphabetic characters to make a match.\n    var character = String.fromCharCode(e.keyCode || e.which);\n    if (character.toUpperCase() === character.toLowerCase()) {\n        return;\n    }\n\n    // SHIFT doesn't usually give us a lowercase character. Check for this\n    // and for when we get a lowercase character when SHIFT is enabled. \n    if ((e.shiftKey &amp;&amp; character.toLowerCase() === character) ||\n        (!e.shiftKey &amp;&amp; character.toUpperCase() === character)) {\n        $('#capsLockWarning').show();\n    } else {\n        $('#capsLockWarning').hide();\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>In this below code it will be show alert when Caps lock on and they press key using shift. </p>\n\n<p>if we return false; then current char will not append to text page.</p>\n\n<pre><code>$('#password').keypress(function(e) { \n    // e.keyCode is not work in FF, SO, it will\n    // automatically get the value of e.which.  \n    var s = String.fromCharCode( e.keyCode || e.which );\n    if ( s.toUpperCase() === s &amp;&amp; s.toLowerCase() !== s &amp;&amp; !e.shiftKey ) {\n            alert('caps is on');\n            return false;\n    }\nelse  if ( s.toUpperCase() !== s) {\n            alert('caps is on and Shiftkey pressed');\n            return false;\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know this is an old topic but thought I would feed back in case it helps others. None of the answers to the question seem to work in IE8. I did however find this code that works in IE8. (Havent tested anything below IE8 yet). This can be easily modified for jQuery if required.</p>\n\n<pre><code>function capsCheck(e,obj){ \n    kc = e.keyCode?e.keyCode:e.which;  \n    sk = e.shiftKey?e.shiftKey:((kc == 16)?true:false);  \n    if(((kc &gt;= 65 &amp;&amp; kc &lt;= 90) &amp;&amp; !sk)||((kc &gt;= 97 &amp;&amp; kc &lt;= 122) &amp;&amp; sk)){\n        document.getElementById('#'+obj.id).style.visibility = 'visible';\n    } \n    else document.getElementById('#'+obj.id).style.visibility = 'hidden';\n}\n</code></pre>\n\n<p>And the function is called through the onkeypress event like this:</p>\n\n<pre><code>&lt;input type=\"password\" name=\"txtPassword\" onkeypress=\"capsCheck(event,this);\" /&gt;\n&lt;div id=\"capsWarningDiv\" style=\"visibility:hidden\"&gt;Caps Lock is on.&lt;/div&gt; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>When you type, if caplock is on, it could automatically convert the current char to lowercase. That way even if caplocks is on, it will not behave like it is on the current page. To inform your users you could display a text saying that caplocks is on, but that the form entries are converted.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>try this out simple code in easy to understand</p>\n\n<p>This is the Script</p>\n\n<pre><code> &lt;script language=\"Javascript\"&gt;\nfunction capLock(e){\n kc = e.keyCode?e.keyCode:e.which;\n sk = e.shiftKey?e.shiftKey:((kc == 16)?true:false);\n if(((kc &gt;= 65 &amp;&amp; kc &lt;= 90) &amp;&amp; !sk)||((kc &gt;= 97 &amp;&amp; kc &lt;= 122) &amp;&amp; sk))\n  document.getElementById('divMayus').style.visibility = 'visible';\n else\n   document.getElementById('divMayus').style.visibility = 'hidden';\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>And the Html</p>\n\n<pre><code>&lt;input type=\"password\" name=\"txtPassword\" onkeypress=\"capLock(event)\" /&gt;\n &lt;div id=\"divMayus\" style=\"visibility:hidden\"&gt;Caps Lock is on.&lt;/div&gt; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Recently there was a <a href=\"http://hashcode.ru/questions/179050/javascript-%D0%B2%D0%BA%D0%BB%D1%8E%D1%87%D0%B5%D0%BD-%D0%BB%D0%B8-caps-lock-%D0%B8%D0%BB%D0%B8-%D0%BD%D0%B5%D1%82-%D0%BD%D0%B0-%D1%81%D0%B0%D0%B9%D1%82%D0%B5\" rel=\"nofollow\">similar question</a> on hashcode.com, and I created a jQuery plugin to deal with it. It also supports the recognition of caps lock on numbers. (On the standard German keyboard layout caps lock has effect on numbers).</p>\n\n<p>You can check the latest version here: <a href=\"https://github.com/azanov/jquery.capsChecker\" rel=\"nofollow\">jquery.capsChecker</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Many existing answers will check for caps lock on when shift is not pressed but will not check for it if you press shift and get lowercase, or will check for that but will not also check for caps lock being off, or will check for that but will consider non-alpha keys as 'off'. Here is an adapted jQuery solution that will show a warning if an alpha key is pressed with caps (shift or no shift), will turn off the warning if an alpha key is pressed without caps, but will not turn the warning off or on when numbers or other keys are pressed.</p>\n\n<pre><code>$(\"#password\").keypress(function(e) { \n    var s = String.fromCharCode( e.which );\n    if ((s.toUpperCase() === s &amp;&amp; s.toLowerCase() !== s &amp;&amp; !e.shiftKey)|| //caps is on\n      (s.toUpperCase() !== s &amp;&amp; s.toLowerCase() === s &amp;&amp; e.shiftKey)) {\n        $(\"#CapsWarn\").show();\n    } else if ((s.toLowerCase() === s &amp;&amp; s.toUpperCase() !== s &amp;&amp; !e.shiftKey)||\n      (s.toLowerCase() !== s &amp;&amp; s.toUpperCase() === s &amp;&amp; e.shiftKey)) { //caps is off\n        $(\"#CapsWarn\").hide();\n    } //else upper and lower are both same (i.e. not alpha key - so do not hide message if already on but do not turn on if alpha keys not hit yet)\n  });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The top answers here didn't work for me for a couple of reasons (un-commented code with a dead link and an incomplete solution). So I spent a few hours trying everyone's out and getting the best I could: here's mine, including jQuery and non-jQuery.</p>\n\n<h2>jQuery</h2>\n\n<p>Note that jQuery normalizes the event object so some checks are missing. I've also narrowed it to all password fields (since that's the biggest reason to need it) and added a warning message. This has been tested in Chrome, Mozilla, Opera, and IE6-8. Stable and catches all capslock states EXCEPT when numbers or spaces are pressed.</p>\n\n<pre><code>/* check for CAPS LOCK on all password fields */\n$(\"input[type='password']\").keypress(function(e) {\n\n    var $warn = $(this).next(\".capsWarn\"); // handle the warning mssg\n    var kc = e.which; //get keycode\n    var isUp = (kc &gt;= 65 &amp;&amp; kc &lt;= 90) ? true : false; // uppercase\n    var isLow = (kc &gt;= 97 &amp;&amp; kc &lt;= 122) ? true : false; // lowercase\n    // event.shiftKey does not seem to be normalized by jQuery(?) for IE8-\n    var isShift = ( e.shiftKey ) ? e.shiftKey : ( (kc == 16) ? true : false ); // shift is pressed\n\n    // uppercase w/out shift or lowercase with shift == caps lock\n    if ( (isUp &amp;&amp; !isShift) || (isLow &amp;&amp; isShift) ) {\n        $warn.show();\n    } else {\n        $warn.hide();\n    }\n\n}).after(\"&lt;span class='capsWarn error' style='display:none;'&gt;Is your CAPSLOCK on?&lt;/span&gt;\");\n</code></pre>\n\n<h2>Without jQuery</h2>\n\n<p>Some of the other jQuery-less solutions lacked IE fallbacks. @Zappa patched it.</p>\n\n<pre><code>document.onkeypress = function ( e ) {\n    e = (e) ? e : window.event;\n\n    var kc = ( e.keyCode ) ? e.keyCode : e.which; // get keycode\n    var isUp = (kc &gt;= 65 &amp;&amp; kc &lt;= 90) ? true : false; // uppercase\n    var isLow = (kc &gt;= 97 &amp;&amp; kc &lt;= 122) ? true : false; // lowercase\n    var isShift = ( e.shiftKey ) ? e.shiftKey : ( (kc == 16) ? true : false ); // shift is pressed -- works for IE8-\n\n    // uppercase w/out shift or lowercase with shift == caps lock\n    if ( (isUp &amp;&amp; !isShift) || (isLow &amp;&amp; isShift) ) {\n        alert(\"CAPSLOCK is on.\"); // do your thing here\n    } else {\n        // no CAPSLOCK to speak of\n    }\n\n}\n</code></pre>\n\n<hr>\n\n<p>Note: Check out the solutions of @Borgar, @Joe Liversedge, and @Zappa, and the plugin developed by @Pavel Azanov, which I have not tried but is a good idea. If someone knows a way to expand the scope beyond A-Za-z, please edit away. Also, jQuery versions of this question are closed as duplicate, so that's why I'm posting both here.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This code detects caps lock no matter the case or if the shift key is pressed:</p>\n\n<pre><code>$('#password').keypress(function(e) { \n    var s = String.fromCharCode( e.which );\n    if ( (s.toUpperCase() === s &amp;&amp; !e.shiftKey) || \n             (s.toLowerCase() === s &amp;&amp; e.shiftKey) ) {\n        alert('caps is on');\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is a solution that in addition to checking state when writing, also toggles warning message each time the Caps-Lock key is pressed (with some limitation). </p>\n\n<pre><code>&lt;input type=\"password\" id=\"password\" /&gt;\n&lt;span class=\"caps-lock-warning\" title=\"Caps lock is on!\"&gt;CAPS&lt;/span&gt;\n&lt;script type=\"text/javascript\"&gt;\n$(function(){ \n  //Initialize to hide caps-lock-warning\n  $('.caps-lock-warning').hide();\n\n  //Sniff for Caps-Lock state\n  $(\"#password\").keypress(function(e) { \n    var s = String.fromCharCode( e.which );\n    if((s.toUpperCase() === s &amp;&amp; s.toLowerCase() !== s &amp;&amp; !e.shiftKey)||\n      (s.toUpperCase() !== s &amp;&amp; s.toLowerCase() === s &amp;&amp; e.shiftKey)) {\n        this.caps = true; // Enables to do something on Caps-Lock keypress\n        $(this).next('.caps-lock-warning').show();\n    } else if((s.toLowerCase() === s &amp;&amp; s.toUpperCase() !== s &amp;&amp; !e.shiftKey)||\n      (s.toLowerCase() !== s &amp;&amp; s.toUpperCase() === s &amp;&amp; e.shiftKey)) {\n        this.caps = false; // Enables to do something on Caps-Lock keypress\n        $(this).next('.caps-lock-warning').hide();\n    }//else else do nothing if not a letter we can use to differentiate\n  });\n\n  //Toggle warning message on Caps-Lock toggle (with some limitation)\n  $(document).keydown(function(e){\n    if(e.which==20){ // Caps-Lock keypress\n      var pass = document.getElementById(\"password\");\n      if(typeof(pass.caps) === 'boolean'){\n        //State has been set to a known value by keypress\n        pass.caps = !pass.caps;\n        $(pass).next('.caps-lock-warning').toggle(pass.caps);\n      }\n    }\n  });\n\n  //Disable on window lost focus (because we loose track of state)\n  $(window).blur(function(e){\n    // If window is inactive, we have no control on the caps lock toggling\n    // so better to re-set state\n    var pass = document.getElementById(\"password\");\n    if(typeof(pass.caps) === 'boolean'){\n      pass.caps = null;\n      $(pass).next('.caps-lock-warning').hide();\n    }\n  });\n});    \n&lt;/script&gt;\n</code></pre>\n\n<p>Note that the caps-lock toggling can only be done if we know the state before it is pressed. The current capslock state is kept with a <code>caps</code> javascript property on the password element. This is set the first time we have a validation of the capslock state by pressing a letter that can be upper/lowercase. If the window loose focus, we no longer have control of the capslock toggling, so we need to reset to unknown state if window loose focus.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>try to use this code.    </p>\n\n<pre><code>$('selectorOnTheInputTextBox').keypress(function (e) {\n        var charCode = e.target.value.charCodeAt(e.target.value.length - 1)\n        var capsOn = \n            e.keyCode &amp;&amp; \n            !e.shiftKey &amp;&amp;\n            !e.ctrlKey &amp;&amp;\n            charCode &gt;= 65 &amp;&amp; \n            charCode &lt;= 90;\n\n            if (capsOn) \n               //action if true\n            else\n               //action if false\n});\n</code></pre>\n\n<p>Good Luck :)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I wrote a library called <a href=\"https://github.com/aaditmshah/capsLock\" rel=\"nofollow\">capsLock</a> which does exactly what you want it to do.</p>\n\n<p>Just include it on your web pages:</p>\n\n<pre><code>&lt;script src=\"https://rawgit.com/aaditmshah/capsLock/master/capsLock.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Then use it as follows:</p>\n\n<pre><code>alert(capsLock.status);\n\ncapsLock.observe(function (status) {\n    alert(status);\n});\n</code></pre>\n\n<p>See the demo: <a href=\"http://jsfiddle.net/3EXMd/\" rel=\"nofollow\">http://jsfiddle.net/3EXMd/</a></p>\n\n<p>The status is updated when you press the Caps Lock key. It only uses the Shift key hack to determine the correct status of the Caps Lock key. Initially the status is <code>false</code>. So beware.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Yet another version, clear and simple, handles shifted capsLock, and not constrained to ascii I think:</p>\n\n<pre><code>document.onkeypress = function (e)\n{\n    e = e || window.event;\n    if (e.charCode === 0 || e.ctrlKey || document.onkeypress.punctuation.indexOf(e.charCode) &gt;= 0)\n        return;\n    var s = String.fromCharCode(e.charCode); // or e.keyCode for compatibility, but then have to handle MORE non-character keys\n    var s2 = e.shiftKey ? s.toUpperCase() : s.toLowerCase();\n    var capsLockOn = (s2 !== s);\n    document.getElementById('capslockWarning').style.display = capsLockOn ? '' : 'none';\n}\ndocument.onkeypress.punctuation = [33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,91,92,93,94,95,96,123,124,125,126];\n</code></pre>\n\n<p><strong>Edit:</strong> Sense of capsLockOn was reversed, doh, fixed.</p>\n\n<p><strong>Edit #2:</strong> After checking this out some more, I've made a few changes, a bit more detailed code unfortunately, but it handles more actions appropriately.</p>\n\n<ul>\n<li><p>Using e.charCode instead of e.keyCode and checking for 0 values skips a lot of non-character keypresses, without coding anything specific to a given language or charset. From my understanding, it's slightly less compatible, so older, non-mainstream, or mobile browsers may not behave as this code expects, but it's worth it, for my situation anyway.</p></li>\n<li><p>Checking against a list of known punctuation codes prevents them from being seen as false negatives, since they're not affected by caps lock. Without this, the caps lock indicator gets hidden when you type any of those punctuation characters. By specifying an excluded set, rather than an included one, it should be more compatible with extended characters. This is the ugliest, special-casiest bit, and there's some chance that non-Western languages have different enough punctuation and/or punctuation codes to be a problem, but again it's worth it IMO, at least for my situation.</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>For jQuery with twitter bootstrap</strong></p>\n\n<p>Check caps locked for the following characters:</p>\n\n<p>uppercase A-Z or '\u00c4', '\u00d6', '\u00dc', '!', '\"', '\u00a7', '$', '%', '&amp;', '/', '(', ')', '=', ':', ';', '*', '''</p>\n\n<p>lowercase a-Z or 0-9 or '\u00e4', '\u00f6', '\u00fc', '.', ',', '+', '#'</p>\n\n<pre><code>/* check for CAPS LOCK on all password fields */\n$(\"input[type='password']\").keypress(function(e) {\n    var kc = e.which; // get keycode\n\n    var isUpperCase = ((kc &gt;= 65 &amp;&amp; kc &lt;= 90) || (kc &gt;= 33 &amp;&amp; kc &lt;= 34) || (kc &gt;= 36 &amp;&amp; kc &lt;= 39) || (kc &gt;= 40 &amp;&amp; kc &lt;= 42) || kc == 47 || (kc &gt;= 58 &amp;&amp; kc &lt;= 59) || kc == 61 || kc == 63 || kc == 167 || kc == 196 || kc == 214 || kc == 220) ? true : false; // uppercase A-Z or '\u00c4', '\u00d6', '\u00dc', '!', '\"', '\u00a7', '$', '%', '&amp;', '/', '(', ')', '=', ':', ';'\n    var isLowerCase = ((kc &gt;= 97 &amp;&amp; kc &lt;= 122) || (kc &gt;= 48 &amp;&amp; kc &lt;= 57) || kc == 35 || (kc &gt;= 43 &amp;&amp; kc &lt;= 44) || kc == 46 || kc == 228 || kc == 223 || kc == 246 || kc == 252) ? true : false; // lowercase a-Z or 0-9 or '\u00e4', '\u00f6', '\u00fc', '.', ','\n\n    // event.shiftKey does not seem to be normalized by jQuery(?) for IE8-\n    var isShift = (e.shiftKey) ? e.shiftKey : ((kc == 16) ? true : false); // shift is pressed\n\n    // uppercase w/out shift or lowercase with shift == caps lock\n    if ((isUpperCase &amp;&amp; !isShift) || (isLowerCase &amp;&amp; isShift)) {\n        $(this).next('.form-control-feedback').show().parent().addClass('has-warning has-feedback').next(\".capsWarn\").show();\n    } else {\n        $(this).next('.form-control-feedback').hide().parent().removeClass('has-warning has-feedback').next(\".capsWarn\").hide();\n    }\n}).after('&lt;span class=\"glyphicon glyphicon-warning-sign form-control-feedback\" style=\"display:none;\"&gt;&lt;/span&gt;').parent().after(\"&lt;span class='capsWarn text-danger' style='display:none;'&gt;Is your CAPSLOCK on?&lt;/span&gt;\");\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/05kofe9q/\" rel=\"nofollow\"><strong>live demo on jsfiddle</strong></a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You could use <a href=\"https://www.google.ro/url?sa=t&amp;rct=j&amp;q=&amp;esrc=s&amp;source=web&amp;cd=3&amp;cad=rja&amp;uact=8&amp;ved=0CC4QFjAC&amp;url=http%3A%2F%2Fcode.stephenmorley.org%2Fjavascript%2Fdetecting-the-caps-lock-key%2F&amp;ei=nDQyVLzhOYmWavPJgMgG&amp;usg=AFQjCNH5CGRbar1ueG0wYQ5kL0fPLxlzLA&amp;sig2=FBTr8S2eXqMgMi9BR45tAw&amp;bvm=bv.76802529,d.d2s\" rel=\"nofollow\">this script</a>. It should work well on Windows even if the Shift key is pressed but it won't work on Mac OS if so.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Based on answer of @joshuahedlund since it worked fine for me.</p>\n\n<p>I made the code a function so it can be reused, and linked it to the body in my case. It can be linked to the password field only if you prefer.</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script language=\"javascript\" type=\"text/javascript\" &gt;\nfunction checkCapsLock(e, divId) { \n    if(e){\n        e = e;\n    } else {\n        e = window.event;\n    }\n    var s = String.fromCharCode( e.which );\n    if ((s.toUpperCase() === s &amp;&amp; s.toLowerCase() !== s &amp;&amp; !e.shiftKey)|| //caps is on\n      (s.toUpperCase() !== s &amp;&amp; s.toLowerCase() === s &amp;&amp; e.shiftKey)) {\n        $(divId).style.display='block';\n    } else if ((s.toLowerCase() === s &amp;&amp; s.toUpperCase() !== s &amp;&amp; !e.shiftKey)||\n      (s.toLowerCase() !== s &amp;&amp; s.toUpperCase() === s &amp;&amp; e.shiftKey)) { //caps is off\n        $(divId).style.display='none';\n   } //else upper and lower are both same (i.e. not alpha key - so do not hide message if already on but do not turn on if alpha keys not hit yet)\n }\n&lt;/script&gt;\n&lt;style&gt;    \n.errorDiv {\n    display: none;\n    font-size: 12px;\n    color: red;\n    word-wrap: break-word;\n    text-overflow: clip;\n    max-width: 200px;\n    font-weight: normal;\n}\n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body  onkeypress=\"checkCapsLock(event, 'CapsWarn');\" &gt;\n...\n&lt;input name=\"password\" id=\"password\" type=\"password\" autocomplete=\"off\"&gt;\n&lt;div id=\"CapsWarn\" class=\"errorDiv\"&gt;Capslock is ON !&lt;/div&gt;\n...\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do you tell if caps lock is on using JavaScript?</p>\n\n<p>One caveat though: I did google it and the best solution I could find was to attach an <code>onkeypress</code> event to every input, then check each time if the letter pressed was uppercase, and if it was, then check if shift was also held down. If it wasn't, therefore caps lock must be on. This feels really dirty and just... <em>wasteful</em> - surely there's a better way than this?</p>\n",
            "last_activity_date": 1424095327,
            "question_id": 348792,
            "score": 122,
            "tags": [
                "javascript",
                "keyboard",
                "capslock"
            ],
            "title": "How do you tell if caps lock is on using JavaScript?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p><strong>NOTE:</strong> I concocted this solution before I was reminded about all the \"special cases\" that can occur in a valid CSV file, like escaped quotes. I'm leaving my answer for those who want something quick and dirty, but I recommend <a href=\"http://stackoverflow.com/a/12289296/901048\">Evan's answer</a> for accuracy.</p>\n\n<hr>\n\n<p>This code will work when your <code>data.txt</code> file is one long string of comma-separated entries, with no newlines:</p>\n\n<p>data.txt:</p>\n\n<pre><code> heading1,heading2,heading3,heading4,heading5,value1_1,...,value5_2\n</code></pre>\n\n<p>javascript:</p>\n\n<pre><code>$(document).ready(function() {\n    $.ajax({\n        type: \"GET\",\n        url: \"data.txt\",\n        dataType: \"text\",\n        success: function(data) {processData(data);}\n     });\n});\n\nfunction processData(allText) {\n    var record_num = 5;  // or however many elements there are in each row\n    var allTextLines = allText.split(/\\r\\n|\\n/);\n    var entries = allTextLines[0].split(',');\n    var lines = [];\n\n    var headings = entries.splice(0,record_num);\n    while (entries.length&gt;0) {\n        var tarr = [];\n        for (var j=0; j&lt;record_num; j++) {\n            tarr.push(headings[j]+\":\"+entries.shift());\n        }\n        lines.push(tarr);\n    }\n    // alert(lines);\n}\n</code></pre>\n\n<p>The following code will work on a \"true\" CSV file with linebreaks between each set of records:</p>\n\n<p>data.txt:</p>\n\n<pre><code>heading1,heading2,heading3,heading4,heading5\nvalue1_1,value2_1,value3_1,value4_1,value5_1\nvalue1_2,value2_2,value3_2,value4_2,value5_2\n</code></pre>\n\n<p>javascript:</p>\n\n<pre><code>$(document).ready(function() {\n    $.ajax({\n        type: \"GET\",\n        url: \"data.txt\",\n        dataType: \"text\",\n        success: function(data) {processData(data);}\n     });\n});\n\nfunction processData(allText) {\n    var allTextLines = allText.split(/\\r\\n|\\n/);\n    var headers = allTextLines[0].split(',');\n    var lines = [];\n\n    for (var i=1; i&lt;allTextLines.length; i++) {\n        var data = allTextLines[i].split(',');\n        if (data.length == headers.length) {\n\n            var tarr = [];\n            for (var j=0; j&lt;headers.length; j++) {\n                tarr.push(headers[j]+\":\"+data[j]);\n            }\n            lines.push(tarr);\n        }\n    }\n    // alert(lines);\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/mblase75/dcqxr/\">http://jsfiddle.net/mblase75/dcqxr/</a></p>\n",
                    "is_accepted": true,
                    "score": 37
                },
                {
                    "body": "<p>Per the accepted answer,</p>\n\n<p>I got this to work by changing the 1 to a 0 here:</p>\n\n<pre><code>for (var i=1; i&lt;allTextLines.length; i++) {\n</code></pre>\n\n<p>changed to</p>\n\n<pre><code>for (var i=0; i&lt;allTextLines.length; i++) {\n</code></pre>\n\n<p>It will compute the a file with one continuous line as having an allTextLines.length of 1. So if the loop starts at 1 and runs as long as it's less than 1, it never runs. Hence the blank alert box.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>No need to write your own...</strong></p>\n\n<p>The <a href=\"http://code.google.com/p/jquery-csv/\">jQuery-CSV</a> library has a function called $.csv.toObjects(csv) that does the mapping automatically.</p>\n\n<p><em>Note: The library is designed to handle any CSV data that is <a href=\"http://tools.ietf.org/html/rfc4180\">RFC 4180</a> compliant, including all of the nasty edge cases that most 'simple' solutions overlook.</em></p>\n\n<p>Like @Blazemonger already stated, first you need to add line breaks to make the data valid CSV.</p>\n\n<p><strong>Using the following dataset:</strong></p>\n\n<pre><code>heading1,heading2,heading3,heading4,heading5\nvalue1_1,value2_1,value3_1,value4_1,value5_1\nvalue1_2,value2_2,value3_2,value4_2,value5_2\n</code></pre>\n\n<p><strong>Use the code:</strong></p>\n\n<pre><code>var data = $.csv.toObjects(csv):\n</code></pre>\n\n<p><strong>The output saved in 'data' will be:</strong></p>\n\n<pre><code>[\n  { heading1:\"value1_1\",heading2:\"value2_1\",heading3:\"value3_1\",heading4:\"value4_1\",heading5:\"value5_1\" } \n  { heading1:\"value1_2\",heading2:\"value2_2\",heading3:\"value3_2\",heading4:\"value4_2\",heading5:\"value5_2\" }\n]\n</code></pre>\n\n<p><em>Note: Technically, the way you wrote the key-value mapping is invalid JavaScript. The objects containing the key-value pairs should be wrapped in brackets.</em></p>\n\n<p>If you want to try it out for yourself, I suggest you take a look at the <a href=\"http://jquery-csv.googlecode.com/git/examples/basic-usage.html\">Basic Usage Demonstration</a> under the 'toObjects()' tab.</p>\n\n<p><em>Disclaimer: I'm the original author of jQuery-CSV.</em></p>\n\n<p><strong>Update:</strong></p>\n\n<p>Edited to use the dataset that the op provided and included a link to the demo where the data can be tested for validity.</p>\n",
                    "is_accepted": false,
                    "score": 64
                },
                {
                    "body": "<p>Don't split on commas -- it won't work for most CSV files, and this question has wayyyy too many views for the asker's kind of input data to apply to everyone. Parsing CSV is kind of scary since there's no truly official standard, and lots of delimited text writers don't consider edge cases.</p>\n\n<p>This question is old, but I believe there's a better solution now that <a href=\"http://papaparse.com\" rel=\"nofollow\">Papa Parse</a> is available. It's a library I wrote, with help from contributors, that parses CSV text or files. It's the only JS library I know of that supports files gigabytes in size. It also handles malformed input gracefully.</p>\n\n<p>1 GB file parsed in 1 minute:\n<img src=\"http://i.stack.imgur.com/aJvc7.png\" alt=\"Parsed 1 GB file in 1 minute\"></p>\n\n<p>(<strong>Update:</strong> With Papa Parse 4, the same file took only about 30 seconds in Firefox. Papa Parse 4 is now <a href=\"http://jsperf.com/javascript-csv-parsers/3\" rel=\"nofollow\">the fastest known CSV parser</a> for the browser.)</p>\n\n<p>Parsing text is very easy:</p>\n\n<pre><code>var data = Papa.parse(csvString);\n</code></pre>\n\n<p>Parsing files is also easy:</p>\n\n<pre><code>Papa.parse(file, {\n    complete: function(results) {\n        console.log(results);\n    }\n});\n</code></pre>\n\n<p>Streaming files is similar (here's an example that streams a remote file):</p>\n\n<pre><code>Papa.parse(\"http://example.com/bigfoo.csv\", {\n    download: true,\n    step: function(row) {\n        console.log(\"Row:\", row.data);\n    },\n    complete: function() {\n        console.log(\"All done!\");\n    }\n});\n</code></pre>\n\n<p>If your web page locks up during parsing, Papa can use web workers to keep your web site reactive.</p>\n\n<p>Papa can auto-detect delimiters and match values up with header columns, if a header row is present. It can also turn numeric values into actual number types. It appropriately parses line breaks and quotes and other weird situations, and even handles malformed input as robustly as possible. I've drawn on inspiration from existing libraries to make Papa, so props to other JS implementations.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Here's a JavaScript function that parses CSV data, accounting for commas found inside quotes.</p>\n\n<pre><code>// Parse a CSV row, accounting for commas inside quotes                   \nfunction parse(row){\n  var insideQuote = false,                                             \n      entries = [],                                                    \n      entry = [];\n  row.split('').forEach(function (character) {                         \n    if(character === '\"') {\n      insideQuote = !insideQuote;                                      \n    } else {\n      if(character == \",\" &amp;&amp; !insideQuote) {                           \n        entries.push(entry.join(''));                                  \n        entry = [];                                                    \n      } else {\n        entry.push(character);                                         \n      }                                                                \n    }                                                                  \n  });\n  entries.push(entry.join(''));                                        \n  return entries;                                                      \n}\n</code></pre>\n\n<p>Example use of the function to parse a CSV file that looks like this:</p>\n\n<pre><code>\"foo, the column\",bar\n2,3\n\"4, the value\",5\n</code></pre>\n\n<p>into arrays:</p>\n\n<pre><code>// csv could contain the content read from a csv file\nvar csv = '\"foo, the column\",bar\\n2,3\\n\"4, the value\",5',\n\n    // Split the input into lines\n    lines = csv.split('\\n'),\n\n    // Extract column names from the first line\n    columnNamesLine = lines[0],\n    columnNames = parse(columnNamesLine),\n\n    // Extract data from subsequent lines\n    dataLines = lines.slice(1),\n    data = dataLines.map(parse);\n\n// Prints [\"foo, the column\",\"bar\"]\nconsole.log(JSON.stringify(columnNames));\n\n// Prints [[\"2\",\"3\"],[\"4, the value\",\"5\"]]\nconsole.log(JSON.stringify(data));\n</code></pre>\n\n<p>Here's how you can transform the data into objects, like <a href=\"https://github.com/mbostock/d3/wiki/CSV\" rel=\"nofollow\">D3's csv parser</a> (which is a solid third party solution):</p>\n\n<pre><code>var dataObjects = data.map(function (arr) {\n  var dataObject = {};\n  columnNames.forEach(function(columnName, i){\n    dataObject[columnName] = arr[i];\n  });\n  return dataObject;\n});\n\n// Prints [{\"foo\":\"2\",\"bar\":\"3\"},{\"foo\":\"4\",\"bar\":\"5\"}]\nconsole.log(JSON.stringify(dataObjects));\n</code></pre>\n\n<p>Here's a <a href=\"http://jsfiddle.net/3jLE2/2/\" rel=\"nofollow\">working fiddle of this code</a>.</p>\n\n<p>Enjoy! --<a href=\"https://github.com/curran/portfolio\" rel=\"nofollow\">Curran</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>My csv data looking like this: </p>\n\n<blockquote>\n  <p>heading1,heading2,heading3,heading4,heading5,value1_1,value2_1,value3_1,value4_1,value5_1,value1_2,value2_2,value3_2,value4_2,value5_2....</p>\n</blockquote>\n\n<p>How to read this data and convert an array like this: </p>\n\n<blockquote>\n  <p>[heading1:value1_1 , heading2:value2_1, heading3 : value3_1, heading4\n  : value4_1, heading5 : value5_1 ],[heading1:value1_2 ,\n  heading2:value2_2, heading3 : value3_2, heading4 : value4_2, heading5\n  : value5_2 ]....</p>\n</blockquote>\n\n<p>Using javascript?? I've tried this code but no luck..!:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var allText =[];\n    var allTextLines = [];\n    var Lines = [];\n\n    var txtFile = new XMLHttpRequest();\n    txtFile.open(\"GET\", \"file://d:/data.txt\", true);\n    txtFile.onreadystatechange = function()\n    {\n        allText = txtFile.responseText;\n        allTextLines = allText.split(/\\r\\n|\\n/);\n    };\n\n    document.write(allTextLines);&lt;br&gt;\n    document.write(allText);&lt;br&gt;\n    document.write(txtFile);&lt;br&gt;\n&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1416788951,
            "question_id": 7431268,
            "score": 53,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "How to read data From *.CSV file using javascript?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>JavaScript code in Chrome extensions can be divided in the following groups:</p>\n\n<ul>\n<li><p><strong>Extension code - Full access to all permitted <a href=\"http://developer.chrome.com/extensions/api_index.html\"><code>chrome.*</code></a> APIs.</strong><br>\nThis includes the <a href=\"http://developer.chrome.com/extensions/background_pages.html\">background page</a>, and all pages which have direct access to it via <a href=\"http://developer.chrome.com/extensions/extension.html#method-getBackgroundPage\"><code>chrome.extension.getBackgroundPage()</code></a>, such as the <a href=\"http://developer.chrome.com/extensions/browserAction.html\">browser pop-ups</a>.</p></li>\n<li><p><strong><a href=\"http://developer.chrome.com/extensions/content_scripts.html\">Content scripts</a> (via the manifest file or <a href=\"http://developer.chrome.com/extensions/tabs.html#method-executeScript\"><code>chrome.tabs.executeScript</code></a>) - <a href=\"http://developer.chrome.com/extensions/extension.html#content%20scripts\">Partial</a> access to some of the <code>chrome</code> APIs</strong>, full access to the page's DOM (<strong>not</strong> to any of the <code>window</code> objects, including frames).<br>\nContent scripts run in a scope between the extension and the page. The global <code>window</code> object of a Content script is distinct from the page/extension's global namespace.</p></li>\n<li><p>Injected scripts (via <a href=\"http://stackoverflow.com/a/9517879/938089?building-a-chrome-extension-inject-code-in-a-page-using-a-content-script\">this method</a> in a Content script) - Full access to all properties in the page. <strong>No access to any of the <code>chrome.*</code> APIs.</strong><br>\nInjected scripts behave as if they were included by the page itself, and are not connected to the extension in any way. See <a href=\"http://stackoverflow.com/a/9517879/938089?building-a-chrome-extension-inject-code-in-a-page-using-a-content-script\">this post</a> to learn more information on the various injection methods. </p></li>\n</ul>\n\n<p>To send a message from the injected script to the content script, events have to be used. See <a href=\"http://stackoverflow.com/q/9602022/938089?chrome-extension-retrieving-gmails-original-message\">this answer</a> for an example. Note: Message transported within an extension from one context to another are <strong>automatically (JSON)-serialised and parsed</strong>.</p>\n\n<hr>\n\n<p>In your case, the code in the background page (<a href=\"http://developer.chrome.com/extensions/tabs.html#event-onUpdated\"><code>chrome.tabs.onUpdated</code></a>) is likely called before the content script <code>script.js</code> is evaluated. So, you'll get a <code>ReferenceError</code>, because <code>init</code> is not .</p>\n\n<p>Also, when you use <code>chrome.tabs.onUpdated</code>, make sure that you test whether the page is fully loaded, because the event fires twice: Before load, and on finish:</p>\n\n<pre><code>//background.html\nchrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {\n    if (changeInfo.status == 'complete') {\n        // Execute some script when the page is fully (DOM) ready\n        chrome.tabs.executeScript(null, {code:\"init();\"});\n    }\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 67
                }
            ],
            "body": "<p>I am trying to get my Chrome Extension to run the function <code>init()</code> whenever a new page is loaded, but I am having trouble trying to understand how to do this. From what I understand, I need to do the following in background.html:</p>\n\n<ol>\n<li>Use <code>chrome.tabs.onUpdated.addListener()</code> to check when the page is\nchanged</li>\n<li>Use <code>chrome.tabs.executeScript</code> to run a script.</li>\n</ol>\n\n<p>This is the code I have:</p>\n\n<pre><code>//background.html\nchrome.tabs.onUpdated.addListener(function(tabId, changeInfo, tab) {\n    chrome.tabs.executeScript(null, {code:\"init();\"});\n});\n\n//script.js\nfunction init() {\n    alert(\"It works!\");\n}\n</code></pre>\n\n<p><strong>I am also wondering if the init() function will have access to my other functions located in other JS files?</strong></p>\n",
            "last_activity_date": 1424200671,
            "question_id": 9915311,
            "score": 25,
            "tags": [
                "javascript",
                "google-chrome-extension",
                "scope",
                "content-script"
            ],
            "title": "Chrome extension code vs Content scripts vs Injected scripts"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Best is to read the <a href=\"http://www.json.org/\">documentation</a>.</p>\n\n<hr>\n\n<p>The main differences: </p>\n\n<ul>\n<li>The <em>keys</em> must be <strong>strings</strong> (i.e. enclosed in double quotes <code>\"</code>) in JSON. </li>\n<li>The values can be either:\n<ul>\n<li>a string</li>\n<li>a number</li>\n<li>an (JSON) object</li>\n<li>an array</li>\n<li><code>true</code></li>\n<li><code>false</code></li>\n<li><code>null</code></li>\n</ul></li>\n</ul>\n\n<hr>\n\n<p>So in your example, it is not JSON because of three reasons:</p>\n\n<ol>\n<li>Your keys are not strings.</li>\n<li>You cannot assign a function as a value to an JSON object.</li>\n<li>You define a JavaScript object. If any, a \"JSON object\" can only be contained in a string. Only because object literal notation and JSON look <em>similar</em>, it does not mean that you can name them interchangeably. See also <a href=\"http://benalman.com/news/2010/03/theres-no-such-thing-as-a-json/\">There's no such thing as a \"JSON Object\"</a>.</li>\n</ol>\n\n<p><em>Edit: Added the most important difference ;))</em></p>\n",
                    "is_accepted": true,
                    "score": 82
                },
                {
                    "body": "<p><a href=\"http://json.org\">JSON</a> has a much more limited syntax including:</p>\n\n<ul>\n<li>Key values must be quoted</li>\n<li>Strings must be quoted with <code>\"</code> and not <code>'</code></li>\n<li>You have a more limited range of values (e.g. no functions allowed)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>As far as I understand the main difference is the <strong><em>flexibility</em></strong>. </p>\n\n<p>JSON is a kind of wrapper on \"JavaScript Object Notation\" which forces users to obey more strict rules for defining the objects. And it does this by limiting the possible object declaration ways provided by JavaScript Object Notation feature.</p>\n\n<p>As a result we have a simpler and more standardized objects which suits better on data-exchange between platforms.</p>\n\n<p>So basically, the newObject in my example above is an object defined by using JavaScript Objeect Notation; but it is not a 'valid' JSON object because it does not follow the rules that JSON standards require.</p>\n\n<p>This link is also quite helpful:\n<a href=\"http://msdn.microsoft.com/en-us/library/bb299886.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/bb299886.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>According to <a href=\"http://www.json.org/js.html\" rel=\"nofollow\">JSON in JavaScript</a>,</p>\n\n<blockquote>\n  <p>JSON is a <a href=\"http://en.wikipedia.org/wiki/Subset\" rel=\"nofollow\">subset</a> of the object\n  literal notation of JavaScript.</p>\n</blockquote>\n\n<p>In other words, valid JSON is also valid JavaScript object literal notation but not necessarily the other way around.</p>\n\n<p>In addition to reading the <a href=\"http://www.json.org/\" rel=\"nofollow\">documentation</a>, as @Filix King suggested, I also suggest playing around with the <a href=\"http://www.jsonlint.com/\" rel=\"nofollow\">JSONLint online JSON validator</a>. That's how I learned that the keys of JSON objects must be strings.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There is really no such thing as a \"JSON Object\".</p>\n\n<p>The JSON spec is a syntax for encoding data as a string.  What people call a \"JSON Object\" ( in javascript ) is really just an ordinary javascript object that has (probably) been de-serialized from a valid JSON string, and can be easily re-serialized as a valid JSON string.  This generally means that it contains only data ( and not functions ).  It also means that there are no dates, because JSON does not have a date type ( probably the most painful thing about JSON ;)</p>\n\n<p>Furthermore, (side-rant...) when people talk about a \"JSON Object\", they almost always mean data that has the \"curly-braces\" at the top-level.  This corresponds nicely to a javascript object.  However, the JSON spec does not require that there be a single \"curly-braces\" object at the top-level of a JSON string.  It is perfectly valid JSON to have a list at the top-level, or even to have just a single value.  So, while every \"JSON Object\" corresponds to valid JSON, not all valid JSON strings correspond to what we would call a \"JSON Object\"! ( because the string could represent a list or an atomic value )</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>Can someone tell me what is the main difference between a JavaScript object defined by using <em>\"Object Literal Notation\"</em> and <em>JSON object</em>?</p>\n\n<p>According to a JavaScript book it says this is an object defined by using <em>Object Notation</em>:</p>\n\n<pre><code>var anObject = {\n    property1 : true,\n    showMessage : function (msg) { alert(msg) }\n};\n</code></pre>\n\n<p>Why isn't it a JSON object in this case? Just because it is not defined by using quotation marks?</p>\n",
            "last_activity_date": 1369152090,
            "question_id": 2904131,
            "score": 67,
            "tags": [
                "javascript",
                "json",
                "object-notation"
            ],
            "title": "What is the difference between JSON and Object Literal Notation?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p><code>setInterval</code> repeats the call, <code>setTimeout</code> only runs it once.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p><code>setInterval</code> fires again and again in <strong>intervals</strong>, while <code>setTimeout</code> only fires once.</p>\n\n<p>See <a href=\"https://developer.mozilla.org/en/DOM/window#Methods\">reference at MDN</a>.</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p><code>setTimeout(expression, timeout);</code> runs the code/function once after the timeout.</p>\n\n<p><code>setInterval(expression, timeout);</code> runs the code/function in intervals, with the length of the timeout between them.</p>\n\n<p>Example:</p>\n\n<pre><code>var intervalID = setInterval(alert, 1000); // Will alert every second.\n// clearInterval(intervalID); // Will clear the timer.\n\nsetTimeout(alert, 1000); // Will alert once, after a second.\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 164
                },
                {
                    "body": "<p><strong>setTimeout():</strong></p>\n\n<p>It is a function that execute a JavaScript statement <code>AFTER</code> x interval.</p>\n\n<pre><code>setTimeout(function () {\n    something();\n}, 1000); // Execute something() 1 second later.\n</code></pre>\n\n<p><strong>setInterval():</strong></p>\n\n<p>It is a function that execute a JavaScript statement <code>EVERY</code> x interval.</p>\n\n<pre><code>setInterval(function () {\n    somethingElse();\n}, 2000); // Execute somethingElse() every 2 seconds.\n</code></pre>\n\n<p>The interval unit is in <code>millisecond</code> for both functions.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<h3>setInterval()</h3>\n\n<p>setInterval is a time interval based code execution method that has the native ability to repeatedly run specified script when the interval is reached. It should not be nested into its callback function by the script author to make it loop, since it loops by default. It will keep firing at the interval unless you call clearInterval().</p>\n\n<p>if you want to loop code for animations or clocks\nThen use setInterval.</p>\n\n<pre><code>function doStuff() {\nalert(\"run your code here when time interval is reached\");\n}\nvar myTimer = setInterval(doStuff, 5000);\n</code></pre>\n\n<h3>setTimeout()</h3>\n\n<p>setTimeout is a time based code execution method that will execute script only one time when the interval is reached, and not repeat again unless you gear it to loop the script by nesting the setTimeout object inside of the function it calls to run. If geared to loop, it will keep firing at the interval unless you call clearTimeout().</p>\n\n<pre><code>function doStuff() {\nalert(\"run your code here when time interval is reached\");\n}\nvar myTimer = setTimeout(doStuff, 5000);\n</code></pre>\n\n<p>if you want something to happen one time after some seconds \nThen use setTimeout... because it only executes one time when the interval is reached.</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>What is the main difference between </p>\n\n<p><strong><a href=\"https://developer.mozilla.org/En/window.setInterval\">setInterval</a></strong></p>\n\n<p>and </p>\n\n<p><strong><a href=\"https://developer.mozilla.org/en/window.setTimeout\">setTimeout</a></strong></p>\n\n<p>in JavaScript? </p>\n",
            "last_activity_date": 1417802786,
            "question_id": 2696692,
            "score": 107,
            "tags": [
                "javascript"
            ],
            "title": "&#39;setInterval&#39; vs &#39;setTimeout&#39;"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p><strong><a href=\"http://code.google.com/p/js-uri/\">js-uri</a></strong> (available on Google Code) takes a string URL and resolves a URI object from it:</p>\n\n<pre><code>var some_uri = new URI(\"http://www.example.com/foo/bar\");\n\nalert(some_uri.authority); // www.example.com\nalert(some_uri);           // http://www.example.com/foo/bar\n\nvar blah      = new URI(\"blah\");\nvar blah_full = blah.resolve(some_uri);\nalert(blah_full);         // http://www.example.com/foo/blah\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<pre><code>var getLocation = function(href) {\n    var l = document.createElement(\"a\");\n    l.href = href;\n    return l;\n};\nvar l = getLocation(\"http://example.com/path\");\nconsole.debug(l.hostname)\n&gt;&gt; \"example.com\"\nconsole.debug(l.pathname)\n&gt;&gt; \"/path\"\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 136
                },
                {
                    "body": "<p>Here is a version that I copied from <a href=\"https://gist.github.com/1847816\" rel=\"nofollow\">https://gist.github.com/1847816</a>, but rewritten so it's easier to read and debug. The purpose of copying the of the anchor data to another variable named \"result\" is because the anchor data is pretty long, and so copying a limited number of values to the result will help simplify the result.</p>\n\n<pre><code>/**\n * See: https://gist.github.com/1847816\n * Parse a URI, returning an object similar to Location\n * Usage: var uri = parseUri(\"hello?search#hash\")\n */\nfunction parseUri(url) {\n\n  var result = {};\n\n  var anchor = document.createElement('a');\n  anchor.href = url;\n\n  var keys = 'protocol hostname host pathname port search hash href'.split(' ');\n  for (keyIndex in keys) {\n    var currentKey = keys[keyIndex]; \n    result[currentKey] = anchor[currentKey];\n  }\n\n  result.toString = function() { return anchor.href; };\n  result.requestUri = result.pathname + result.search;  \n  return result;\n\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>freddiefujiwara's answer is pretty good but I also needed to support relative URLs within Internet Explorer.  I came up with the following solution:</p>\n\n<pre><code>function getLocation(href) {\n    var location = document.createElement(\"a\");\n    location.href = href;\n    // IE doesn't populate all link properties when setting .href with a relative URL,\n    // however .href will return an absolute URL which then can be used on itself\n    // to populate these additional fields.\n    if (location.host == \"\") {\n      location.href = location.href;\n    }\n    return location;\n};\n</code></pre>\n\n<p>Now use it to get the needed properties:</p>\n\n<pre><code>var a = getLocation('http://example.com/aa/bb/');\ndocument.write(a.hostname);\ndocument.write(a.pathname);\n</code></pre>\n\n<p>JSFiddle example: <a href=\"http://jsfiddle.net/6AEAB/\">http://jsfiddle.net/6AEAB/</a></p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>You can also use <a href=\"http://phpjs.org/functions/parse_url/\" rel=\"nofollow\"><code>parse_url()</code></a> function from <a href=\"http://phpjs.org/\" rel=\"nofollow\">php.js</a> project.</p>\n\n<p>Code:</p>\n\n<pre><code>parse_url('http://username:password@hostname/path?arg=value#anchor');\n</code></pre>\n\n<p>Result:</p>\n\n<pre><code>{scheme: 'http', host: 'hostname', user: 'username', pass: 'password', path: '/path', query: 'arg=value', fragment: 'anchor'}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>found here: <a href=\"https://gist.github.com/jlong/2428561\">https://gist.github.com/jlong/2428561</a></p>\n\n<pre><code>var parser = document.createElement('a');\nparser.href = \"http://example.com:3000/pathname/?search=test#hash\";\n\nparser.protocol; // =&gt; \"http:\"\nparser.host;     // =&gt; \"example.com:3000\"\nparser.hostname; // =&gt; \"example.com\"\nparser.port;     // =&gt; \"3000\"\nparser.pathname; // =&gt; \"/pathname/\"\nparser.hash;     // =&gt; \"#hash\"\nparser.search;   // =&gt; \"?search=test\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 60
                },
                {
                    "body": "<p>The AngularJS way - fiddle here: <a href=\"http://jsfiddle.net/PT5BG/4/\" rel=\"nofollow\">http://jsfiddle.net/PT5BG/4/</a></p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Parse URL using AngularJS&lt;/title&gt;\n&lt;/head&gt;\n&lt;body ng-app ng-controller=\"AppCtrl\" ng-init=\"init()\"&gt;\n\n&lt;h3&gt;Parse URL using AngularJS&lt;/h3&gt;\n\nurl: &lt;input type=\"text\" ng-model=\"url\" value=\"\" style=\"width:780px;\"&gt;\n\n&lt;ul&gt;\n    &lt;li&gt;href = {{parser.href}}&lt;/li&gt;\n    &lt;li&gt;protocol = {{parser.protocol}}&lt;/li&gt;\n    &lt;li&gt;host = {{parser.host}}&lt;/li&gt;\n    &lt;li&gt;hostname = {{parser.hostname}}&lt;/li&gt;\n    &lt;li&gt;port = {{parser.port}}&lt;/li&gt;\n    &lt;li&gt;pathname = {{parser.pathname}}&lt;/li&gt;\n    &lt;li&gt;hash = {{parser.hash}}&lt;/li&gt;\n    &lt;li&gt;search = {{parser.search}}&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;script src=\"https://ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js\"&gt;&lt;/script&gt;\n\n&lt;script&gt;\nfunction AppCtrl($scope) {\n\n    $scope.$watch('url', function() {\n        $scope.parser.href = $scope.url;\n    });\n\n    $scope.init = function() {\n        $scope.parser = document.createElement('a');\n        $scope.url = window.location;\n    }\n\n}\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><strong>For those looking for a modern solution that works in IE, Firefox, AND Chrome:</strong></p>\n\n<p><strong>None of these solutions that use a hyperlink element will work the same in chrome.</strong> If you pass an invalid (or blank) url to chrome, it will always return the host where the script is called from. So in IE you will get blank, whereas in Chrome you will get localhost (or whatever). </p>\n\n<p>If you are trying to look at the referrer, this is deceitful. You will want to make sure that the host you get back was in the original url to deal with this:</p>\n\n<pre><code>    function getHostNameFromUrl(url) {\n        // &lt;summary&gt;Parses the domain/host from a given url.&lt;/summary&gt;\n        var a = document.createElement(\"a\");\n        a.href = url;\n\n        // Handle chrome which will default to domain where script is called from if invalid\n        return url.indexOf(a.hostname) != -1 ? a.hostname : '';\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here's a simple function using a regexp that imitates the <code>a</code> tag behavior.</p>\n\n<p>Pros</p>\n\n<ul>\n<li>predictable behaviour (no cross browser issues)</li>\n<li>doesn't need the DOM</li>\n<li>it's really short.</li>\n</ul>\n\n<p>Cons</p>\n\n<ul>\n<li>The regexp is a bit difficult to read</li>\n</ul>\n\n<p>-</p>\n\n<pre><code>function getLocation(href) {\n    var match = href.match(/^(https?\\:)\\/\\/(([^:\\/?#]*)(?:\\:([0-9]+))?)(\\/[^?#]*)(\\?[^#]*|)(#.*|)$/);\n    return match &amp;&amp; {\n        protocol: match[1],\n        host: match[2],\n        hostname: match[3],\n        port: match[4],\n        pathname: match[5],\n        search: match[6],\n        hash: match[7]\n    }\n}\n</code></pre>\n\n<p>-</p>\n\n<pre><code>getLocation(\"http://example.com/\");\n/*\n{\n    \"protocol\": \"http:\",\n    \"host\": \"example.com\",\n    \"hostname\": \"example.com\",\n    \"port\": undefined,\n    \"pathname\": \"/\"\n    \"search\": \"\",\n    \"hash\": \"\",\n}\n*/\n\ngetLocation(\"http://example.com:3000/pathname/?search=test#hash\");\n/*\n{\n    \"protocol\": \"http:\",\n    \"host\": \"example.com:3000\",\n    \"hostname\": \"example.com\",\n    \"port\": \"3000\",\n    \"pathname\": \"/pathname/\",\n    \"search\": \"?search=test\",\n    \"hash\": \"#hash\"\n}\n*/\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>Here's a breakdown of the regular expression</p>\n\n<pre><code>var reURLInformation = new RegExp([\n    '^(https?:)//', // protocol\n    '(([^:/?#]*)(?::([0-9]+))?)', // host (hostname and port)\n    '(/[^?#]*)', // pathname\n    '(\\\\?[^#]*|)', // search\n    '(#.*|)$' // hash\n].join(''));\nvar match = href.match(reURLInformation);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>The modern way:</p>\n\n<pre><code>new URL(\"/aa/bb/\", \"http://example.com/\")\n</code></pre>\n\n<p>Returns an object with properties <code>hostname</code> and <code>pathname</code>, along with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/URLUtils\" rel=\"nofollow\">a few others</a>. The first argument is a relative or absolute URL; if it's relative, then you need to specify the second argument (the base URL).</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Simple and robust solution using the module pattern. This includes a fix for IE where the <code>pathname</code> does not always have a leading forward-slash (<code>/</code>).</p>\n\n<p>I have created a <a href=\"https://gist.github.com/ryankane/718566dba322a952ae9f\" rel=\"nofollow\">Gist</a> along with a <a href=\"http://jsfiddle.net/MrPolywhirl/ded7zd0a/\" rel=\"nofollow\">JSFiddle</a> which offers a more dynamic parser. I recommend you check it out and provide feedback.</p>\n\n<pre><code>var URLParser = (function (document) {\n    var PROPS = 'protocol hostname host pathname port search hash href'.split(' ');\n    var self = function (url) {\n        this.aEl = document.createElement('a');\n        this.parse(url);\n    };\n    self.prototype.parse = function (url) {\n        this.aEl.href = url;\n        if (this.aEl.host == \"\") {\n           this.aEl.href = this.aEl.href;\n        }\n        PROPS.forEach(function (prop) {\n            switch (prop) {\n                case 'hash':\n                    this[prop] = this.aEl[prop].substr(1);\n                    break;\n                default:\n                    this[prop] = this.aEl[prop];\n            }\n        }, this);\n        if (this.pathname.indexOf('/') !== 0) {\n            this.pathname = '/' + this.pathname;\n        }\n        this.requestUri = this.pathname + this.search;\n    };\n    self.prototype.toObj = function () {\n        var obj = {};\n        PROPS.forEach(function (prop) {\n            obj[prop] = this[prop];\n        }, this);\n        obj.requestUri = this.requestUri;\n        return obj;\n    };\n    self.prototype.toString = function () {\n        return this.href;\n    };\n    return self;\n})(document);\n</code></pre>\n\n<h1>Demo</h1>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var URLParser = (function(document) {\r\n  var PROPS = 'protocol hostname host pathname port search hash href'.split(' ');\r\n  var self = function(url) {\r\n    this.aEl = document.createElement('a');\r\n    this.parse(url);\r\n  };\r\n  self.prototype.parse = function(url) {\r\n    this.aEl.href = url;\r\n    if (this.aEl.host == \"\") {\r\n      this.aEl.href = this.aEl.href;\r\n    }\r\n    PROPS.forEach(function(prop) {\r\n      switch (prop) {\r\n        case 'hash':\r\n          this[prop] = this.aEl[prop].substr(1);\r\n          break;\r\n        default:\r\n          this[prop] = this.aEl[prop];\r\n      }\r\n    }, this);\r\n    if (this.pathname.indexOf('/') !== 0) {\r\n      this.pathname = '/' + this.pathname;\r\n    }\r\n    this.requestUri = this.pathname + this.search;\r\n  };\r\n  self.prototype.toObj = function() {\r\n    var obj = {};\r\n    PROPS.forEach(function(prop) {\r\n      obj[prop] = this[prop];\r\n    }, this);\r\n    obj.requestUri = this.requestUri;\r\n    return obj;\r\n  };\r\n  self.prototype.toString = function() {\r\n    return this.href;\r\n  };\r\n  return self;\r\n})(document);\r\n\r\n/* Main */\r\nvar out = document.getElementById('out');\r\nvar urls = [\r\n  'https://www.example.org:5887/foo/bar?a=1&amp;b=2#section-1',\r\n  'ftp://www.files.com:22/folder?id=7'\r\n];\r\nvar parser = new URLParser();\r\nurls.forEach(function(url) {\r\n  parser.parse(url);\r\n  println(out, JSON.stringify(parser.toObj(), undefined, ' '), 0, '#0000A7');\r\n});\r\n\r\n/* Utility functions */\r\nfunction print(el, text, bgColor, fgColor) {\r\n  var span = document.createElement('span');\r\n  span.innerHTML = text;\r\n  span.style['backgroundColor'] = bgColor || '#FFFFFF';\r\n  span.style['color'] = fgColor || '#000000';\r\n  el.appendChild(span);\r\n}\r\nfunction println(el, text, bgColor, fgColor) {\r\n  print(el, text, bgColor, fgColor);\r\n  el.appendChild(document.createElement('br'));\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body {\r\n  background: #444;\r\n}\r\nspan {\r\n  background-color: #fff;\r\n  border: thin solid black;\r\n  display: inline-block;\r\n}\r\n#out {\r\n  display: block;\r\n  font-family: Consolas, Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono, Bitstream Vera Sans Mono, Courier New, monospace, serif;\r\n  font-size: 12px;\r\n  white-space: pre;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div id=\"out\"&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<h1>Output</h1>\n\n<pre><code>{\n \"protocol\": \"https:\",\n \"hostname\": \"www.example.org\",\n \"host\": \"www.example.org:5887\",\n \"pathname\": \"/foo/bar\",\n \"port\": \"5887\",\n \"search\": \"?a=1&amp;b=2\",\n \"hash\": \"section-1\",\n \"href\": \"https://www.example.org:5887/foo/bar?a=1&amp;b=2#section-1\",\n \"requestUri\": \"/foo/bar?a=1&amp;b=2\"\n}\n{\n \"protocol\": \"ftp:\",\n \"hostname\": \"www.files.com\",\n \"host\": \"www.files.com:22\",\n \"pathname\": \"/folder\",\n \"port\": \"22\",\n \"search\": \"?id=7\",\n \"hash\": \"\",\n \"href\": \"ftp://www.files.com:22/folder?id=7\",\n \"requestUri\": \"/folder?id=7\"\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I would like to take a string</p>\n\n<pre><code>var a = \"http://example.com/aa/bb/\"\n</code></pre>\n\n<p>and process it into an object such that</p>\n\n<pre><code>a.hostname == \"example.com\"\n</code></pre>\n\n<p>and</p>\n\n<pre><code>a.pathname == \"/aa/bb\"\n</code></pre>\n",
            "last_activity_date": 1421363397,
            "question_id": 736513,
            "score": 76,
            "tags": [
                "javascript",
                "url"
            ],
            "title": "How do I parse a URL into hostname and path in javascript?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><a href=\"http://www.schillmania.com/projects/soundmanager2/\">http://www.schillmania.com/projects/soundmanager2/</a></p>\n\n<p>SoundManager 2 provides  a easy to use API that allows sound to be played in any modern browser, including IE 6+. If the browser doesn't support HTML5, then it gets help from flash. If you want stricly HTML5 and no flash, there's a setting for that, <code>preferFlash=false</code></p>\n\n<p>It supports 100% Flash-free audio on iPad, iPhone (iOS4) and other HTML5-enabled devices + browsers</p>\n\n<p>Use is as simple as:</p>\n\n<pre><code>&lt;script src=\"soundmanager2.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    // where to find flash SWFs, if needed...\n    soundManager.url = '/path/to/swf-files/';\n\n    soundManager.onready(function() {\n        soundManager.createSound({\n            id: 'mySound',\n            url: '/path/to/an.mp3'\n        });\n\n        // ...and play it\n        soundManager.play('mySound');\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>Here's a demo of it in action: <a href=\"http://www.schillmania.com/projects/soundmanager2/demo/christmas-lights/\">http://www.schillmania.com/projects/soundmanager2/demo/christmas-lights/</a></p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>It's easy, just get your <code>audio</code> element and call the <code>play()</code> method:</p>\n\n<pre><code>document.getElementById('yourAudioTag').play();\n</code></pre>\n\n<p>Check out this example: <a href=\"http://www.storiesinflight.com/html5/audio.html\">http://www.storiesinflight.com/html5/audio.html</a></p>\n\n<p><a href=\"http://blog.gingertech.net/wp-content/uploads/2011/01/LCA_MM_AVProc2011/#slide6\">This site</a> uncovers some of the other cool things you can do such as <code>load()</code>, <code>pause()</code>, and a few other properties of the <code>audio</code> element.</p>\n",
                    "is_accepted": true,
                    "score": 86
                },
                {
                    "body": "<p>If you don't want to mess with html elements:</p>\n\n<pre><code>var audio = new Audio('audio_file.mp3');\naudio.play();\n</code></pre>\n\n<p>If you need more functionality I used <code>howler.js</code> and it was simple and useful: <a href=\"http://goldfirestudios.com/blog/104/howler.js-Modern-Web-Audio-Javascript-Library\">http://goldfirestudios.com/blog/104/howler.js-Modern-Web-Audio-Javascript-Library</a></p>\n",
                    "is_accepted": false,
                    "score": 173
                }
            ],
            "body": "<p>I am making a game with HTML5 and Javascript.</p>\n\n<p>How could I play game audio via Javascript?</p>\n",
            "last_activity_date": 1409189157,
            "question_id": 9419263,
            "score": 77,
            "tags": [
                "javascript",
                "html5",
                "html5-audio"
            ],
            "title": "Playing audio with Javascript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p><a href=\"http://getfirebug.com/docs.html\">Firebug</a> provides a highly detailed profiling report.  It will tell you how long each method invocation takes in a giant (detailed) table.</p>\n\n<pre><code>console.profile([title])\n//also see\nconsole.trace()\n</code></pre>\n\n<p>You need to call <code>console.profileEnd ()</code> to end your profile block. See the console API here: <a href=\"http://getfirebug.com/wiki/index.php/Console_API\">http://getfirebug.com/wiki/index.php/Console_API</a></p>\n\n<p><a href=\"http://www.gscottolson.com/blackbirdjs/\">Blackbird</a> also has a simpler profiler.</p>\n",
                    "is_accepted": true,
                    "score": 49
                },
                {
                    "body": "<p>Firebug+Firefox is a must have.  And IE 8's developer toolbar also has a profiler built in (IE 8 ships with the developer toolbar).</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Safari 4's web inspector also includes a profiler (although the version in the nightlies is improved wrt. recursive function calls).  The Web Inspector also supports Firebug's profiler APIs.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Although Firebug has been mentioned, one additional thing you would want to look at with Firebug is a plugin for Firebug called <a href=\"http://fireunit.org/\"><strong>FireUnit</strong></a>; John Resig talks about it in this blog post:</p>\n\n<blockquote>\n  <p><a href=\"http://ejohn.org/blog/function-call-profiling/\"><strong>JavaScript Function Call Profiling</strong></a></p>\n</blockquote>\n\n<p>Hope that helps.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>For JavaScript, XmlHttpRequest, DOM Access, Rendering Times and Network traffic for IE6, 7 &amp; 8 you can use the FREE<a href=\"http://ajax.dynatrace.com\" rel=\"nofollow\">dynaTrace AJAX Edition</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Chrome's Developer Tools has a built-in profiler. Also, there is a good Chrome extension called <a href=\"https://chrome.google.com/webstore/detail/ognampngfcbddbfemdapefohjiobgbdl\">Speed Tracer</a>.</p>\n",
                    "is_accepted": false,
                    "score": 12
                }
            ],
            "body": "<p>Is there a good profiler for javascript? I know that firebug has some support for profiling code. But I want to determine stats on a longer scale. \nImagine you are building a lot of javascript code and you want to determine what are actually the bottlenecks in the code. At first I want to see profile stats of every javascript function and execution time. Next would be including DOM functions. This combined with actions that slows things down like operation on the rendering tree would be perfect. I think this would give a good impression if the performance is killed in my code, in DOM preparation or in updates to the rendering tree/visual.</p>\n\n<p>Is there something close to what I want? Or what would be the best tool to achieve the most of what I've described? Would it be a self compiled browser plus javascript engine enhanced by profile functionality?</p>\n",
            "last_activity_date": 1382542635,
            "question_id": 855126,
            "score": 66,
            "tags": [
                "javascript",
                "performance",
                "browser",
                "profiling"
            ],
            "title": "What is the best way to profile javascript execution?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Here a good link on <a href=\"http://www.quirksmode.org/js/cookies.html\">Quirksmode</a>.</p>\n\n<pre><code>function createCookie(name,value,days) {\n    if (days) {\n        var date = new Date();\n        date.setTime(date.getTime()+(days*24*60*60*1000));\n        var expires = \"; expires=\"+date.toGMTString();\n    }\n    else var expires = \"\";\n    document.cookie = name+\"=\"+value+expires+\"; path=/\";\n}\n\nfunction readCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(';');\n    for(var i=0;i &lt; ca.length;i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n    }\n    return null;\n}\n\nfunction eraseCookie(name) {\n    createCookie(name,\"\",-1);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Google is your friend, check this out:</p>\n\n<p><a href=\"http://techpatterns.com/downloads/javascript_cookies.php\" rel=\"nofollow\">http://techpatterns.com/downloads/javascript_cookies.php</a></p>\n\n<p>Example:</p>\n\n<pre><code>function Delete_Cookie( name, path, domain ) {\nif ( Get_Cookie( name ) ) document.cookie = name + \"=\" +\n( ( path ) ? \";path=\" + path : \"\") +\n( ( domain ) ? \";domain=\" + domain : \"\" ) +\n\";expires=Thu, 01-Jan-1970 00:00:01 GMT\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>function delete_cookie( name, path, domain ) {\n  if( get_cookie( name ) ) {\n    document.cookie = name + \"=\" +\n      ((path) ? \";path=\"+path:\"\")+\n      ((domain)?\";domain=\"+domain:\"\") +\n      \";expires=Thu, 01 Jan 1970 00:00:01 GMT\";\n  }\n}\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>function delete_cookie( name ) {\n  document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 122
                },
                {
                    "body": "<p>you can do this by setting the date of expiry to yesterday.</p>\n\n<p>My new set of posts about cookies in javsascript could help you.</p>\n\n<p><a href=\"http://www.markusnordhaus.de/2012/01/20/using-cookies-in-javascript-part-1/\">http://www.markusnordhaus.de/2012/01/20/using-cookies-in-javascript-part-1/</a></p>\n\n<p>Setting it to \"-1\" doesn't work. That marks a cookie as a Sessioncookie.</p>\n\n<p>VG Markus</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>would this work? </p>\n\n<pre><code>function eraseCookie(name) {\n    document.cookie = name + '=; Max-Age=0'\n}\n</code></pre>\n\n<p>I know <code>Max-Age</code> causes the cookie to be a session cookie in IE when creating the cookie. Not sure how it works when deleting cookies.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The best answer worked for me, but Firefox keeps all cookies until the end of the session.\nThey are not deleted until you restart your browser.</p>\n\n<p>I don't know if there is a workaround for this.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is my function of creating cookie correct? and how do i delete cookie at the beginning of my program run? is there a simple coding?</p>\n\n<p>function createCookie(name,value,days)</p>\n\n<pre><code>&lt;script&gt;\n    function setCookie(c_name,value,1) {\n    document.cookie = c_name + \"=\" +escape(value);\n    }\n\n    setCookie('cookie_name',mac);\n&lt;/script&gt;\n\n\nfunction eraseCookie(c_name) {\n    createCookie(cookie_name,\"\",-1);\n}\n</code></pre>\n",
            "last_activity_date": 1418721425,
            "question_id": 2144386,
            "score": 80,
            "tags": [
                "javascript",
                "cookies"
            ],
            "title": "javascript - delete cookie"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>I think that would depend on what browser implementation you are refering to.</p>\n\n<p>Every browser type has it's own javascript engine implementation, so it depends.\nYou could check the sourcecode repos for Mozilla and Webkit/Khtml for different implementations.</p>\n\n<p>IE is closed source however, so you may have to ask somebody at microsoft.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The ECMAscript standard does not specify which sort algorithm is to be used. Indeed, different browsers feature different sort algorithms. For example, Mozilla/Firefox's sort() is not <a href=\"http://en.wikipedia.org/wiki/Sorting_algorithm#Stability\">stable</a> (in the sorting sense of the word) when sorting a map. IE's sort() is stable.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>After some more research, it appears, for Mozilla/Firefox, that Array.sort() uses mergesort. See the code <a href=\"http://mxr.mozilla.org/seamonkey/source/js/src/jsarray.c\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you look at this bug <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=224128\">224128</a>, it appears that MergeSort is being used by Mozilla.</p>\n",
                    "is_accepted": true,
                    "score": 38
                },
                {
                    "body": "<p>I've just had a look at the WebKit (Chrome, Safari \u2026) <a href=\"http://trac.webkit.org/browser/trunk/Source/JavaScriptCore/runtime/ArrayPrototype.cpp?rev=138530#L647\">source</a>. Depending on the type of array, different sort methods are used:</p>\n\n<p><a href=\"http://trac.webkit.org/browser/trunk/Source/JavaScriptCore/runtime/JSArray.cpp?rev=138530#L972\">Numeric arrays</a> (or arrays of primitive type) are sorted using the C++ standard library function <a href=\"http://en.cppreference.com/w/cpp/algorithm/qsort\"><code>std::qsort</code></a> which implements some variation of quicksort (usually <a href=\"https://en.wikipedia.org/wiki/Introsort\">introsort</a>).</p>\n\n<p><a href=\"http://trac.webkit.org/browser/trunk/Source/JavaScriptCore/runtime/JSArray.cpp?rev=138530#L1065\">Contiguous arrays of non-numeric type</a> are stringified and sorted using mergesort, if available (to obtain a stable sorting) or <code>qsort</code> if no merge sort is available.</p>\n\n<p>For other types (non-contiguous arrays and presumably for associative arrays) WebKit uses either <a href=\"http://en.wikipedia.org/wiki/Selection_Sort\">selection sort</a> (which they call <a href=\"http://trac.webkit.org/browser/trunk/Source/JavaScriptCore/runtime/ArrayPrototype.cpp?rev=138530#L668\">\u201cmin\u201d sort</a>) or, in some cases, it sorts via an AVL tree. Unfortunately, the documentation here is rather vague so you\u2019d have to trace the code paths to actually see for which types which sort method is used.</p>\n\n<p>And then there are gems like <a href=\"http://trac.webkit.org/browser/trunk/Source/JavaScriptCore/runtime/JSArray.cpp?rev=138530#L1124\">this comment</a>:</p>\n\n<pre><code>// FIXME: Since we sort by string value, a fast algorithm might be to use a\n// radix sort. That would be O(N) rather than O(N log N).\n</code></pre>\n\n<p>\u2013 Let\u2019s just hope that whoever actually \u201cfixes\u201d this has a better understanding of asymptotic runtime than the writer of this comment, and realises that <a href=\"http://stackoverflow.com/a/474040/1968\">radix sort has a slightly more complex runtime description</a> than simply O(N).</p>\n\n<p>(Thanks to phsource for pointing out the error in the original answer.)</p>\n",
                    "is_accepted": false,
                    "score": 97
                }
            ],
            "body": "<p>Which algorithm does the JavaScript <code>Array#sort()</code> function use?  I understand that it can take all manner of arguments and functions to perform different kinds of sorts, I'm simply interested in which algorithm the vanilla sort uses.</p>\n",
            "last_activity_date": 1390918719,
            "question_id": 234683,
            "score": 79,
            "tags": [
                "javascript",
                "algorithm",
                "arrays",
                "sorting"
            ],
            "title": "Javascript Array.sort implementation?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>TRY</p>\n\n<pre><code>String.prototype.lpad = function(padString, length) {\n    var str = this;\n    while (str.length &lt; length)\n        str = padString + str;\n    return str;\n}\n</code></pre>\n\n<p>now test:</p>\n\n<pre><code>var str = \"5\";\nalert(str.lpad(\"0\", 4)); //result \"0005\"\nvar str = \"10\"; // note this is string type\nalert(str.lpad(\"0\", 4)); //result \"0010\"\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/4RWAp/1\"><code>DEMO</code></a></p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<pre><code>function padToFour(number) {\n  if (number&lt;=9999) { number = (\"000\"+number).slice(-4); }\n  return number;\n}\n</code></pre>\n\n<p>Something like that?</p>\n",
                    "is_accepted": false,
                    "score": 84
                },
                {
                    "body": "<p>Not a lot of \"slick\" going on so far:</p>\n\n<pre><code>function pad(n, width, z) {\n  z = z || '0';\n  n = n + '';\n  return n.length &gt;= width ? n : new Array(width - n.length + 1).join(z) + n;\n}\n</code></pre>\n\n<p>When you initialize an array with a number, it creates an array with the <code>length</code> set to that value so that the array appears to contain that many <code>undefined</code> elements. Though some Array instance methods skip array elements without values, <code>.join()</code> doesn't, or at least not completely; it treats them as if their value is the empty string. Thus you get a copy of the zero character (or whatever \"z\" is) between each of the array elements; that's why there's a <code>+ 1</code> in there.</p>\n\n<p>Example usage:</p>\n\n<pre><code>pad(10, 4);      // 0010\npad(9, 4);       // 0009\npad(123, 4);     // 0123\n\npad(10, 4, '-'); // --10\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 187
                },
                {
                    "body": "<p>This is not really 'slick' but it's faster to do integer operations than to do string concatenations for each padding <code>0</code>.</p>\n\n<pre><code>function ZeroPadNumber ( nValue )\n{\n    if ( nValue &lt; 10 )\n    {\n        return ( '000' + nValue.toString () );\n    }\n    else if ( nValue &lt; 100 )\n    {\n        return ( '00' + nValue.toString () );\n    }\n    else if ( nValue &lt; 1000 )\n    {\n        return ( '0' + nValue.toString () );\n    }\n    else\n    {\n        return ( nValue );\n    }\n}\n</code></pre>\n\n<p>This function is also hardcoded to your particular need (4 digit padding), so it's not generic.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For fun, instead of using a loop to create the extra zeros:</p>\n\n<pre><code>function zeroPad(n,length){\n  var s=n+\"\",needed=length-s.length;\n  if (needed&gt;0) s=(Math.pow(10,needed)+\"\").slice(1)+s;\n  return s;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You could do something like this:</p>\n\n<pre><code>function pad ( num, size ) {\n  return ( Math.pow( 10, size ) + ~~num ).toString().substring( 1 );\n}\n</code></pre>\n\n<p>Edit: This was just a basic idea for a function, but to add support for larger numbers (as well as invalid input), this would probably be better:</p>\n\n<pre><code>function pad ( num, size ) {\n  if (num.toString().length &gt;= size) return num;\n  return ( Math.pow( 10, size ) + Math.floor(num) ).toString().substring( 1 );\n}\n</code></pre>\n\n<p>This does 2 things:</p>\n\n<ol>\n<li>If the number is larger than the specified size, it will simply return the number.</li>\n<li>Using <code>Math.floor(num)</code> in place of <code>~~num</code> will support larger numbers.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You did say you had a number-</p>\n\n<pre><code>String.prototype.padZero= function(len, c){\n    var s= '', c= c || '0', len= (len || 2)-this.length;\n    while(s.length&lt;len) s+= c;\n    return s+this;\n}\nNumber.prototype.padZero= function(len, c){\n    return String(this).padZero(len,c);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Since you mentioned it's always gonna have a length of 4, I won't be doing any error checking to make this slick. ;)</p>\n\n<pre><code>function pad(input) {\n    var BASE = \"0000\";\n    return input ? BASE.substr(0, 4 - Math.ceil(input / 10)) + input : BASE;\n}\n</code></pre>\n\n<p>Idea: Simply replace '0000' with number provided... Issue with that is, if <code>input</code> is 0, I need to hard-code it to return '0000' LOL.</p>\n\n<p>Is this slick enough?</p>\n\n<p>JSFiddler: <a href=\"http://jsfiddle.net/Up5Cr/\" rel=\"nofollow\">http://jsfiddle.net/Up5Cr/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Funny, I recently had to do this.</p>\n\n<pre><code>function padDigits(number, digits) {\n    return Array(Math.max(digits - String(number).length + 1, 0)).join(0) + number;\n}\n</code></pre>\n\n<p>Use like:</p>\n\n<pre><code>padDigits(9, 4);  // \"0009\"\npadDigits(10, 4); // \"0010\"\npadDigits(15000, 4); // \"15000\"\n</code></pre>\n\n<p>Not beautiful, but effective.</p>\n",
                    "is_accepted": false,
                    "score": 22
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/1267283/how-can-i-create-a-zerofilled-value-using-javascript\">How can I create a Zerofilled value using JavaScript?</a>  </p>\n</blockquote>\n\n\n\n<p>In javascript, I need to have padding.</p>\n\n<p>For example, if I have the number 9, it will be \"0009\".\nIf I have a number of say 10, it will be \"0010\".\nNotice how it will always contain 4 digits.</p>\n\n<p>One way to do this would be to subtract the number minus 4 to get the number of 0s I need to put.</p>\n\n<p>I was wondering if there was a slicker way of doing this.</p>\n",
            "last_activity_date": 1406205273,
            "question_id": 10073699,
            "score": 89,
            "tags": [
                "javascript",
                "formatting"
            ],
            "title": "Pad a number with leading zeros in JavaScript"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Try moving the OGG source to the top. I've noticed Firefox sometimes gets confused and stops the player when the one it wants to play, OGG, isn't first.</p>\n\n<p>Worth a try.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p><a href=\"http://www.modernizr.com/\">Modernizr</a> worked like a charm for me.</p>\n\n<p>What I did is that I didn't use <code>&lt;source&gt;</code>. Somehow this screwed things up, since the video only worked the first time load() was called. Instead I used the source attribute inside the video tag -> <code>&lt;video src=\"blabla.webm\" /&gt;</code> and used <a href=\"http://www.modernizr.com/\">Modernizr</a> to determine what format the browser supported.</p>\n\n<pre><code>&lt;script&gt;\nvar v = new Array();\n\nv[0] = [\n        \"videos/video1.webmvp8.webm\",\n        \"videos/video1.theora.ogv\",\n        \"videos/video1.mp4video.mp4\"\n        ];\nv[1] = [\n        \"videos/video2.webmvp8.webm\",\n        \"videos/video2.theora.ogv\",\n        \"videos/video2.mp4video.mp4\"\n        ];\nv[2] = [\n        \"videos/video3.webmvp8.webm\",\n        \"videos/video3.theora.ogv\",\n        \"videos/video3.mp4video.mp4\"\n        ];\n\nfunction changeVid(n){\n    var video = document.getElementById('video');\n\n    if(Modernizr.video &amp;&amp; Modernizr.video.webm) {\n        video.setAttribute(\"src\", v[n][0]);\n    } else if(Modernizr.video &amp;&amp; Modernizr.video.ogg) {\n        video.setAttribute(\"src\", v[n][1]);\n    } else if(Modernizr.video &amp;&amp; Modernizr.video.h264) {\n        video.setAttribute(\"src\", v[n][2]);\n    }\n\n    video.load();\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Hopefully this will help you :)</p>\n\n<p>If you don't want to use <a href=\"http://www.modernizr.com/\">Modernizr</a> , you can always use <a href=\"http://www.w3.org/TR/2011/WD-html5-20110113/video.html#dom-navigator-canplaytype\">CanPlayType()</a>.</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>Instead of getting the same video player to load new files, why not erase the entire <code>&lt;video&gt;</code> element and recreate it. Most browsers will automatically load it if the src's are correct.</p>\n\n<p>Example (using <a href=\"http://www.prototypejs.org/\" rel=\"nofollow\">Prototype</a>):</p>\n\n<pre><code>var vid = new Element('video', { 'autoplay': 'autoplay', 'controls': 'controls' });\nvar src = new Element('source', { 'src': 'video.ogg', 'type': 'video/ogg' });\n\nvid.update(src);\nsrc.insert({ before: new Element('source', { 'src': 'video.mp4', 'type': 'video/mp4' }) });\n\n$('container_div').update(vid);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have a similar web app and am not facing that sort of problem at all.  What i do is something like this:</p>\n\n<pre><code>var sources = new Array();\n\nsources[0] = /path/to/file.mp4\nsources[1] = /path/to/another/file.ogg\netc.....\n</code></pre>\n\n<p>then when i want to change the sources i have a function that does something like this:</p>\n\n<pre><code>this.loadTrack = function(track){\nvar mediaSource = document.getElementsByTagName('source')[0];\nmediaSource.src = sources[track];\n\n    var player = document.getElementByTagName('video')[0];\n    player.load();\n\n}\n</code></pre>\n\n<p>I do this so that the user can make their way through a playlist, but you could check for userAgent and then load the appropriate file that way.  I tried using multiple source tags like everyone on the internet suggested, but i found it much cleaner, and much more reliable to manipulate the src attribute of a single source tag.  The code above was written from memory, so i may have glossed over some of hte details, but the general idea is to dynamically change the src attribute of the source tag using javascript, when appropriate.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Using the <code>&lt;source /&gt;</code> tags proved difficult for me in Chrome 14.0.835.202 specifically, although it worked fine for me in FireFox. (This could be my lack of knowledge, but I thought an alternate solution might be useful anyway.)  So, I ended up just using a <code>&lt;video /&gt;</code> tag and setting the src attribute right on the video tag itself.  The <code>canPlayVideo('&lt;mime type&gt;')</code> function was used to determine whether or not the specific browser could play the input video.  The following works in FireFox and Chrome.  </p>\n\n<p>Incidently, both FireFox and Chrome are playing the \"ogg\" format, although Chrome recommends \"webm\".  I put the check for browser support of \"ogg\" first only because other posts have mentioned that FireFox prefers the ogg source first (i.e. <code>&lt;source src=\"...\" type=\"video/ogg\"/&gt;</code> ).  But, I haven't tested (and highly doubt) whether or not it the order in the code makes any difference at all when setting the \"src\" on the video tag.</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;body onload=\"setupVideo();\"&gt;\n    &lt;video id=\"media\" controls=\"true\" preload=\"auto\" src=\"\"&gt;\n    &lt;/video&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p><strong>JavaScript</strong> </p>\n\n<pre><code>function setupVideo() {\n       // You will probably get your video name differently\n       var videoName = \"http://video-js.zencoder.com/oceans-clip.mp4\";\n\n       // Get all of the uri's we support\n       var indexOfExtension = videoName.lastIndexOf(\".\");\n       //window.alert(\"found index of extension \" + indexOfExtension);\n       var extension = videoName.substr(indexOfExtension, videoName.length - indexOfExtension);\n       //window.alert(\"extension is \" + extension);\n       var ogguri = encodeURI(videoName.replace(extension, \".ogv\"));\n       var webmuri = encodeURI(videoName.replace(extension, \".webm\"));\n       var mp4uri = encodeURI(videoName.replace(extension, \".mp4\"));\n       //window.alert(\" URI is \" + webmuri);\n\n\n       // Get the video element\n       var v = document.getElementById(\"media\");\n       window.alert(\" media is \" + v);\n\n       // Test for support\n       if (v.canPlayType(\"video/ogg\")) {\n            v.setAttribute(\"src\", ogguri);\n           //window.alert(\"can play ogg\");\n       }\n       else if (v.canPlayType(\"video/webm\")) {\n           v.setAttribute(\"src\", webmuri);\n           //window.alert(\"can play webm\");\n       }\n       else if (v.canPlayType(\"video/mp4\")) {\n           v.setAttribute(\"src\", mp4uri);\n           //window.alert(\"can play mp4\");\n       }\n       else {\n           window.alert(\"Can't play anything\");\n       }\n\n      v.load();\n      v.play();\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Your original plan sounds fine to me.  You'll probably find more browser quirks dealing with dynamically managing the <code>&lt;source&gt;</code> elements, as indicated here by the W3 spec note:</p>\n\n<blockquote>\n  <p>Dynamically modifying a source element and its attribute when the element is already inserted in a video or audio element will have no effect. To change what is playing, just use the src attribute on the media element directly, possibly making use of the canPlayType() method to pick from amongst available resources. Generally, manipulating source elements manually after the document has been parsed is an unncessarily[sic] complicated approach.</p>\n</blockquote>\n\n<p><a href=\"http://dev.w3.org/html5/spec/Overview.html#the-source-element\">http://dev.w3.org/html5/spec/Overview.html#the-source-element</a></p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>According to <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-video-element.html#the-source-element\" rel=\"nofollow\">the spec</a></p>\n\n<blockquote>\n  <p>Dynamically modifying a source element and its attribute when the\n  element is already inserted in a video or audio element will have no\n  effect. To change what is playing, just use the src attribute on the\n  media element directly, possibly making use of the canPlayType()\n  method to pick from amongst available resources. Generally,\n  manipulating source elements manually after the document has been\n  parsed is an unncessarily complicated approach.</p>\n</blockquote>\n\n<p>So what you are trying to do is apparently not supposed to work.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Yaur: Although what you have copied and pasted is good advice, this does not mean that it is impossible to change the source element of an HTML5 video element elegantly, even in IE9 (or IE8 for that matter).(This solution does NOT involve replacing the entire video element, as it is bad coding practice).</p>\n\n<p>A complete solution to changing/switching videos in HTML5 video tags via javascript can be found <a href=\"http://stackoverflow.com/questions/12151606/setattribute-and-video-src-for-changing-video-tag-source-not-working-in-ie9\">here</a> and is tested in all HTML5 browser (Firefox, Chrome, Safari, IE9, etc).</p>\n\n<p>If this helps, or if you're having trouble, please let me know.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I hated all these answers because they were too short or relied on other frameworks.</p>\n\n<p>Here is \"one\" vanilla JS way of doing this, working in Chrome, please test in other browsers:</p>\n\n<p><a href=\"http://jsfiddle.net/mattdlockyer/5eCEu/2/\">http://jsfiddle.net/mattdlockyer/5eCEu/2/</a></p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;video id=\"video\" width=\"320\" height=\"240\"&gt;&lt;/video&gt;\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>var video = document.getElementById('video');\nvar source = document.createElement('source');\n\nsource.setAttribute('src', 'http://www.tools4movies.com/trailers/1012/Kill%20Bill%20Vol.3.mp4');\n\nvideo.appendChild(source);\nvideo.play();\n\nsetTimeout(function() {  \n    video.pause();\n\n   source.setAttribute('src', 'http://www.tools4movies.com/trailers/1012/Despicable%20Me%202.mp4'); \n\n    video.load();\n    video.play();\n}, 3000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I have been researching this for quite a while and I am trying to do the same thing, so hopefully this will help someone else. I have been using crossbrowsertesting.com and literally testing this in almost every browser known to man. The solution I've got currently works in Opera, Chrome, Firefox 3.5+, IE8+, iPhone 3GS, iPhone 4, iPhone 4s, iPhone 5, iPhone 5s, iPad 1+, Android 2.3+, Windows Phone 8.</p>\n\n<p><strong>Dynamically Changing Sources</strong></p>\n\n<p>Dynamically changing the video is very difficult, and if you want a Flash fallback you will have to remove the video from the DOM/page and re-add it so that Flash will update because Flash will not recognize dynamic updates to Flash vars. If you're going to use JavaScript to change it dynamically, I would completely remove all <code>&lt;source&gt;</code> elements and just use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/HTMLMediaElement#Methods\" rel=\"nofollow\"><code>canPlayType</code></a> to set the <code>src</code> in JavaScript and <code>break</code> or <code>return</code> after the first supported video type and don't forget to dynamically update the flash var mp4. Also, some browsers won't register that you changed the source unless you call <code>video.load()</code>. I believe the issue with <code>.load()</code> you were experiencing can be fixed by first calling <code>video.pause()</code>. Removing and adding video elements can slow down the browser because it continues buffering the removed video, but <a href=\"http://stackoverflow.com/questions/4071872/html5-video-force-abort-of-buffering#answer-13302599\">there's a workaround</a>.</p>\n\n<p><strong>Cross-browser Support</strong></p>\n\n<p>As far as the actual cross-browser portion, I arrived at <a href=\"http://v4e.thewikies.com/\" rel=\"nofollow\">Video For Everybody</a> as well. I already tried the MediaelementJS Wordpress plugin, which turned out to cause a lot more issues than it resolved. I suspect the issues were due to the Wordpress plug-in and not the actually library. I'm trying to find something that works without JavaScript, if possible. So far, what I've come up with is this plain HTML:</p>\n\n<pre><code>&lt;video width=\"300\" height=\"150\" controls=\"controls\" poster=\"http://sandbox.thewikies.com/vfe-generator/images/big-buck-bunny_poster.jpg\" class=\"responsive\"&gt;\n&lt;source src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.ogv\" type=\"video/ogg\" /&gt;\n&lt;source src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4\" type=\"video/mp4\" /&gt;\n&lt;source src=\"http://clips.vorwaerts-gmbh.de/big_buck_bunny.webm\" type=\"video/webm\" /&gt;\n&lt;source src=\"http://alex-watson.net/wp-content/uploads/2014/07/big_buck_bunny.iphone.mp4\" type=\"video/mp4\" /&gt;\n&lt;source src=\"http://alex-watson.net/wp-content/uploads/2014/07/big_buck_bunny.iphone3g.mp4\" type=\"video/mp4\" /&gt;\n&lt;object type=\"application/x-shockwave-flash\" data=\"http://releases.flowplayer.org/swf/flowplayer-3.2.1.swf\" width=\"561\" height=\"297\"&gt;\n    &lt;param name=\"movie\" value=\"http://releases.flowplayer.org/swf/flowplayer-3.2.1.swf\" /&gt;\n    &lt;param name=\"allowFullScreen\" value=\"true\" /&gt;\n    &lt;param name=\"wmode\" value=\"transparent\" /&gt;\n    &lt;param name=\"flashVars\" value=\"config={'playlist':['http://sandbox.thewikies.com/vfe-generator/images/big-buck-bunny_poster.jpg',{'url':'http://clips.vorwaerts-gmbh.de/big_buck_bunny.mp4','autoPlay':false}]}\" /&gt;\n    &lt;img alt=\"No Video\" src=\"http://sandbox.thewikies.com/vfe-generator/images/big-buck-bunny_poster.jpg\" width=\"561\" height=\"297\" title=\"No video playback capabilities, please download the video below\" /&gt;\n&lt;/object&gt;\n&lt;strong&gt;Download video:&lt;/strong&gt;  &lt;a href=\"video.mp4\"&gt;MP4 format&lt;/a&gt; | &lt;a href=\"video.ogv\"&gt;Ogg format&lt;/a&gt; | &lt;a href=\"video.webm\"&gt;WebM format&lt;/a&gt;\n&lt;/video&gt;\n</code></pre>\n\n<p><strong>Important notes</strong>: </p>\n\n<ul>\n<li>Ended up putting the ogg as the first <code>&lt;source&gt;</code> because Mac OS Firefox quits trying to play the video if it encounters an MP4 as the first <code>&lt;source&gt;</code>.</li>\n<li>The correct MIME types are important <em>.ogv</em> files should be <code>video/ogg</code>, <strong>not</strong> <code>video/ogv</code></li>\n<li>If you have HD video, the best transcoder I've found for HD quality OGG files is <a href=\"http://firefogg.org/\" rel=\"nofollow\">Firefogg</a></li>\n<li>The <code>.iphone.mp4</code> file is for iPhone 4+ which will <strong>only</strong> play videos that are MPEG-4 with H.264 Baseline 3 Video and AAC audio. The best transcoder I found for that format is Handbrake, using the <em>iPhone &amp; iPod Touch</em> preset will work on iPhone 4+, but to get iPhone 3GS to work you need to use the <em>iPod</em> preset which has much lower resolution which I added as <code>video.iphone3g.mp4</code>.</li>\n<li>In the future we will be able to use a <code>media</code> attribute on the <code>&lt;source&gt;</code> elements to target mobile devices with media queries, but right now the older Apple and Android devices don't support it well enough.</li>\n</ul>\n\n<p><strong>Edit</strong>:</p>\n\n<ul>\n<li>I'm still using Video For Everybody but now I've transitioned to using FlowPlayer, to control the Flash fallback, which has an awesome <a href=\"http://flash.flowplayer.org/documentation/api/\" rel=\"nofollow\">JavaScript API</a> that can be used to control it.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Just put a div and update the content...</p>\n\n<pre><code>&lt;script&gt;\nfunction setvideo(src) {\n    document.getElementById('div_video').innerHTML = '&lt;video autoplay controls id=\"video_ctrl\" style=\"height: 100px; width: 100px;\"&gt;&lt;source src=\"'+src+'\" type=\"video/mp4\"&gt;&lt;/video&gt;';\n    document.getElementById('video_ctrl').play();\n}\n&lt;/script&gt;\n&lt;button onClick=\"setvideo('video1.mp4');\"&gt;Video1&lt;/button&gt;\n&lt;div id=\"div_video\"&gt; &lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I solved this with this simple method </p>\n\n<pre><code>function changeSource(url) {\n   var video = document.getElementById('video');\n   video.src = url;\n   video.play();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I come with this to change video source dynamically. \"canplay\" event sometime doesn't fire in Firefox so i have added \"loadedmetadata\". Also i pause previous video if there is one...</p>\n\n<pre><code>var loadVideo = function(movieUrl) {\n    console.log('loadVideo()');\n    $videoLoading.show();\n    var isReady = function (event) {\n            console.log('video.isReady(event)', event.type);\n            video.removeEventListener('canplay', isReady);\n            video.removeEventListener('loadedmetadata', isReady);\n            $videoLoading.hide();\n            video.currentTime = 0;\n            video.play();\n        },\n        whenPaused = function() {\n            console.log('video.whenPaused()');\n            video.removeEventListener('pause', whenPaused);\n            video.addEventListener('canplay', isReady, false);\n            video.addEventListener('loadedmetadata', isReady, false); // Sometimes Firefox don't trigger \"canplay\" event...\n            video.src = movieUrl; // Change actual source\n        };\n\n    if (video.src &amp;&amp; !video.paused) {\n        video.addEventListener('pause', whenPaused, false);\n        video.pause();\n    }\n    else whenPaused();\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>i'm trying to build a video player, that works everywhere. so far i'd be going with:</p>\n\n<pre><code>&lt;video&gt;\n    &lt;source src=\"video.mp4\"&gt;&lt;/source&gt;\n    &lt;source src=\"video.ogv\"&gt;&lt;/source&gt;\n    &lt;object data=\"flowplayer.swf\" type=\"application/x-shockwave-flash\"&gt;\n        &lt;param name=\"movie\" value=\"flowplayer.swf\" /&gt;\n        &lt;param name=\"flashvars\" value='config={\"clip\":\"video.mp4\"}' /&gt;\n    &lt;/object&gt;\n&lt;/video&gt;\n</code></pre>\n\n<p>(as seen on several sites, for example <a href=\"http://camendesign.com/code/video_for_everybody\" rel=\"nofollow\">video for everybody</a>)\nso far, so good.</p>\n\n<p>but now i also want some kind of playlist/menu along with the video player, from which i can select other videos. those should be opened within my player right away. so i will have to \"dynamically change the source of the video\" (as seen on <a href=\"http://dev.opera.com/articles/view/everything-you-need-to-know-about-html5-video-and-audio/\" rel=\"nofollow\">dev.opera.com/articles/everything-you-need-to-know-html5-video-audio/</a> - section \"Let's look at another movie\") with javascript. let's forget about the flashplayer (and thus IE) part for the time being, i will try to deal with that later.</p>\n\n<p>so my JS to change the <code>&lt;source&gt;</code> tags should be something like:</p>\n\n<pre><code>&lt;script&gt;\nfunction loadAnotherVideo() {\n    var video = document.getElementsByTagName('video')[0];\n    var sources = video.getElementsByTagName('source');\n    sources[0].src = 'video2.mp4';\n    sources[1].src = 'video2.ogv';\n    video.load();\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>problem is, this doesnt work in all browsers. namely, firefox =O\nthere is a nice page, where you can observe the problem i'm having: <a href=\"http://www.w3.org/2010/05/video/mediaevents.html\" rel=\"nofollow\">http://www.w3.org/2010/05/video/mediaevents.html</a></p>\n\n<p>as soon as i trigger the load() method (in firefox, mind you), the video player dies.</p>\n\n<p>now i have found out that when i don't use multiple <code>&lt;source&gt;</code> tags, but instead just one src attribute within the <code>&lt;video&gt;</code> tag, the whole thing DOES work in firefox.</p>\n\n<p>so my plan is to just use that src attribute and determine the appropriate file using the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/video.html#dom-navigator-canplaytype\" rel=\"nofollow\">canPlayType()</a> function.</p>\n\n<p>am i doing it wrong somehow or complicating things??</p>\n",
            "last_activity_date": 1425264466,
            "question_id": 5235145,
            "score": 42,
            "tags": [
                "javascript",
                "html5",
                "video",
                "load",
                "source"
            ],
            "title": "changing source on html5 video tag"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>check out datejs library <a href=\"http://www.datejs.com/\" rel=\"nofollow\">http://www.datejs.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Just <code>new Date(st);</code></p>\n\n<p>Assuming that it's the proper format.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><code>new Date(2000, 10, 1)</code> will give you \"Wed Nov 01 2000 00:00:00 GMT+0100 (CET)\" </p>\n\n<p>See that 0 for month gives you January</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Pass it as an argument to Date():</p>\n\n<pre><code>var st = \"date in some format\"\nvar dt = new Date(st);\n</code></pre>\n\n<p>You can access the date, month, year using, for example: <code>dt.getMonth()</code>.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><code>Date.parse</code> almost gets you what you want.  It chokes on the <code>am</code>/<code>pm</code> part, but with some hacking you can get it to work:</p>\n\n<pre><code>var str = 'Sun Apr 25, 2010 3:30pm',\n    timestamp;\n\ntimestamp = Date.parse(str.replace(/[ap]m$/i, ''));\n\nif(str.match(/pm$/i) &gt;= 0) {\n    timestamp += 12 * 60 * 60 * 1000;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>See \"Important note\" below.</p>\n\n<p>The best you can do is use the ISO format:  <code>YYYY-MM-DD</code> or <code>YYYY-MM-DDTHH:MM:SS</code></p>\n\n<p>For example:<br>\n<code>new Date('2011-04-11')</code> </p>\n\n<p>or      </p>\n\n<p><code>new Date('2011-04-11T11:51:00')</code></p>\n\n<p>For more Info: <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date\">MDN | Date</a></p>\n\n<p>Edit:</p>\n\n<p>For old Internet Explorer compatibility (IE versions less than 9 do not support ISO format in Date constructor), you should split datetime string representation to it's parts and then you can use constructor using datetime parts, e.g.:  <code>new Date('2011', '04' - 1, '11', '11', '51', '00')</code></p>\n\n<p>Note that the number of the month must be 1 less.</p>\n\n<p><strong>Important note</strong>: </p>\n\n<p>The \"ISO format\" solution doesn't work 100% time. String are sometimes parsed as UTC and sometimes as localtime (based on browser vendor and version). Calling toString returns the local time therefore depending on the users timezone in some cases <code>new Date('2011-04-11')</code> will give you <code>2011-04-10</code>.</p>\n\n<p>Chrome behaves the same as Internet Explorer 9 and Firefox behaves the same as Internet Explorer 10+.</p>\n\n<p><strong>Safer solution:</strong></p>\n\n<p>Safe solution is passing string value with <strong>Z</strong> to be parsed as UTC value e.g. <code>new Date('2011-04-11T10:20:30Z')</code>. Best practice should always be to store dates as UTC and make computations as UTC. Only for presentation they should be presented as local time.</p>\n\n<p><strong>Prefered way - use an appropriate library:</strong></p>\n\n<p>Do not rely on standard JavaScript Date constructor. Take advantage of the library <a href=\"http://momentjs.com/\">Moment.js</a> that allows parsing date with the specified time zone.</p>\n",
                    "is_accepted": true,
                    "score": 144
                },
                {
                    "body": "<p>convert the string into date</p>\n\n<pre><code>var s = new Date('2013-01-17');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var st = \"26.04.2013\";\nvar pattern = /(\\d{2})\\.(\\d{2})\\.(\\d{4})/;\nvar dt = new Date(st.replace(pattern,'$3-$2-$1'));\n</code></pre>\n\n<p>And the output will be:</p>\n\n<pre><code>dt =&gt; Date {Fri Apr 26 2013}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>Unfortunately I found out that </p>\n\n<pre><code>var mydate = new Date('2014-04-03');\nconsole.log(mydate.toDateString());\n</code></pre>\n\n<p>returns \"Wed Apr 02 2014\". I know it's sounds crazy, but it happens for some users.\nThe <strong>bulletproof solution</strong> is the following</p>\n\n<pre><code>var parts ='04/03/2014'.split('/');\n//please put attention to the month (parts[0]), Javascript counts months from 0:\n// January - 0, February - 1, etc\nvar mydate = new Date(parts[2],parts[0]-1,parts[1]); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<pre><code>function stringToDate(_date,_format,_delimiter)\n{\n            var formatLowerCase=_format.toLowerCase();\n            var formatItems=formatLowerCase.split(_delimiter);\n            var dateItems=_date.split(_delimiter);\n            var monthIndex=formatItems.indexOf(\"mm\");\n            var dayIndex=formatItems.indexOf(\"dd\");\n            var yearIndex=formatItems.indexOf(\"yyyy\");\n            var month=parseInt(dateItems[monthIndex]);\n            month-=1;\n            var formatedDate = new Date(dateItems[yearIndex],month,dateItems[dayIndex]);\n            return formatedDate;\n}\n\nstringToDate(\"17/9/2014\",\"dd/MM/yyyy\",\"/\");\nstringToDate(\"9/17/2014\",\"mm/dd/yyyy\",\"/\")\nstringToDate(\"9-17-2014\",\"mm-dd-yyyy\",\"-\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you can use the terrific <a href=\"http://momentjs.com/\" rel=\"nofollow\">moment</a> library (e.g. in an Node.js project) you can easily parse your date using e.g.</p>\n\n<pre><code>var momentDate = moment(\"2014-09-15 09:00:00\");\n</code></pre>\n\n<p>and can access the JS date object via</p>\n\n<pre><code>momentDate ().toDate();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>use this format....</p>\n\n<pre><code>//get current date in javascript\n\n  var currentDate=New Date();\n\n\n// for getting a date from a textbox as string format\n\n   var newDate=document.getElementById(\"&lt;%=textBox1.ClientID%&gt;\").value;\n\n// convert this date to date time\n\n   var MyDate=New Date(newDate);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>ISO 8601-esque datestrings, as excellent as the standard is, are still not widely supported. </p>\n\n<p>This is a great resource to figure out which datestring format you should use: </p>\n\n<p><a href=\"http://dygraphs.com/date-formats.html\" rel=\"nofollow\">http://dygraphs.com/date-formats.html</a></p>\n\n<p>Yes, that means that your datestring could be as simple as  as opposed to </p>\n\n<p><code>\"2014/10/13 23:57:52\"</code>\ninstead of\n<code>\"2014-10-13 23:57:52\"</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Convert to format pt-BR:</p>\n\n<pre><code>    var dateString = \"13/10/2014\";\n    var dataSplit = dateString.split('/');\n    var dateConverted;\n\n    if (dataSplit[2].split(\" \").length &gt; 1) {\n\n        var hora = dataSplit[2].split(\" \")[1].split(':');\n        dataSplit[2] = dataSplit[2].split(\" \")[0];\n        dateConverted = new Date(dataSplit[2], dataSplit[1]-1, dataSplit[0], hora[0], hora[1]);\n\n    } else {\n        dateConverted = new Date(dataSplit[2], dataSplit[1] - 1, dataSplit[0]);\n    }\n</code></pre>\n\n<p>I hope help somebody!!!</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How can I convert a string to date in js?</p>\n\n<pre><code>var st = \"date in some format\"\nvar dt = new date();\n\nvar dt_st= //st in date format same as dt\n</code></pre>\n",
            "last_activity_date": 1425300737,
            "question_id": 5619202,
            "score": 82,
            "tags": [
                "javascript",
                "date"
            ],
            "title": "Converting string to date in js"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>You have to use <code>attachEvent</code> in IE versions prior to IE9. Detect whether <code>addEventListener</code> is defined and use <code>attachEvent</code> if it isn't:</p>\n\n<pre><code>if(_checkbox.addEventListener)\n    _checkbox.addEventListener(\"click\",setCheckedValues,false);\nelse\n    _checkbox.attachEvent(\"onclick\",setCheckedValues);\n//                         ^^ -- onclick, not click\n</code></pre>\n\n<p>Note that <a href=\"http://msdn.microsoft.com/en-us/library/bg182625%28v=vs.85%29.aspx#legacyAPIs\">IE11 will remove <code>attachEvent</code></a>.</p>\n\n<p>See also:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget.addEventListener$revision/650019#Compatibility\">MDN: <code>element.addEventListener</code>: Legacy Internet Explorer and attachEvent</a></li>\n<li><a href=\"http://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx\">MSDN: attachEvent method</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>If you use jQuery you can write:</p>\n\n<pre><code>$( _checkbox ).click( function( e ){ /*process event here*/ } )\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Try:</p>\n\n<pre><code>if (_checkbox.addEventListener) {\n    _checkbox.addEventListener(\"click\", setCheckedValues, false);\n}\nelse {\n    _checkbox.attachEvent(\"onclick\", setCheckedValues);\n}\n</code></pre>\n\n<p><strong>Update::</strong>\nFor Internet Explorer versions prior to IE9, <a href=\"https://msdn.microsoft.com/en-us/library/ms536343%28VS.85%29.aspx\">attachEvent</a> method should be used to register the specified listener to  the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\">EventTarget</a> it is called on, for others <a href=\"https://developer.mozilla.org/en/docs/Web/API/EventTarget.addEventListener\">addEventListener</a> should be used.</p>\n",
                    "is_accepted": true,
                    "score": 127
                },
                {
                    "body": "<p>Mayb it's easier (and has more performance) if you delegate the event handling to another element, for example your table</p>\n\n<pre><code>$('idOfYourTable').on(\"click\", \"input:checkbox\", function(){\n\n});\n</code></pre>\n\n<p>in this way you will have only one event handler, and this will work also for newly added elements. This requires jQuery >= 1.7</p>\n\n<p>Otherwise use delegate()</p>\n\n<pre><code>$('idOfYourTable').delegate(\"input:checkbox\", \"click\", function(){\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>IE doesn't support <code>addEventListener</code> until version 9, so you have to use <code>attachEvent</code>, here's an example:</p>\n\n<pre><code>if (!someElement.addEventListener) {\n    _checkbox.attachEvent(\"onclick\", setCheckedValues);\n}\nelse {\n    _checkbox.addEventListener(\"click\", setCheckedValues, false);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This is also simple  crossbrowser solution:</p>\n\n<pre><code>var addEvent =  window.attachEvent||window.addEventListener;\nvar event = window.attachEvent ? 'onclick' : 'click';\naddEvent(event, function(){\n    alert('Hello!')\n});\n</code></pre>\n\n<p>Instead of 'click' can be any event of course.  </p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>You can use the below addEvent() function to add events for most things but note that for XMLHttpRequest <code>if (el.attachEvent)</code> will fail in IE8, because it doesn't support <code>XMLHttpRequest.attachEvent()</code> so you have to use <code>XMLHttpRequest.onload = function() {}</code> instead.</p>\n\n<pre><code>function addEvent(el, e, f) {\n    if (el.attachEvent) {\n        return el.attachEvent('on'+e, f);\n    }\n    else {\n        return el.addEventListener(e, f, false);\n    }\n}\n\nvar ajax = new XMLHttpRequest();\najax.onload = function(e) {\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've opted for a quick Polyfill based on the above answers:</p>\n\n<pre><code>//# Polyfill\nwindow.addEventListener = window.addEventListener || function (e, f) { window.attachEvent('on' + e, f); };\n\n//# Standard usage\nwindow.addEventListener(\"message\", function(){ /*...*/ }, false);\n</code></pre>\n\n<p>Of course, like the answers above this doesn't ensure that <code>window.attachEvent</code> exists, which may or may not be an issue.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have created a checkbox dynamically. I have used <code>addEventListener</code> to  call a function on click of the checkbox, which works in Google Chrome and Firefox but <strong>doesn't work in Internet Explorer 8</strong>. This is my code:</p>\n\n<pre><code>var _checkbox = document.createElement(\"input\");\n_checkbox.addEventListener(\"click\", setCheckedValues, false);\n</code></pre>\n\n<p><code>setCheckedValues</code> is my event handler.</p>\n",
            "last_activity_date": 1422453742,
            "question_id": 9769868,
            "score": 66,
            "tags": [
                "javascript",
                "internet-explorer-8",
                "addeventlistener"
            ],
            "title": "addEventListener not working in IE8"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>The following function will do it in all major browsers:</p>\n\n<pre><code>function placeCaretAtEnd(el) {\n    el.focus();\n    if (typeof window.getSelection != \"undefined\"\n            &amp;&amp; typeof document.createRange != \"undefined\") {\n        var range = document.createRange();\n        range.selectNodeContents(el);\n        range.collapse(false);\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n    } else if (typeof document.body.createTextRange != \"undefined\") {\n        var textRange = document.body.createTextRange();\n        textRange.moveToElementText(el);\n        textRange.collapse(false);\n        textRange.select();\n    }\n}\n\nplaceCaretAtEnd( document.getElementById(\"content\") );\n</code></pre>\n\n<p>Placing the caret at the start is almost identical: it just requires changing the Boolean passed into the calls to <code>collapse()</code>. Here's an example that creates functions for placing the caret at the start and at the end:</p>\n\n<pre><code>function createCaretPlacer(atStart) {\n    return function(el) {\n        el.focus();\n        if (typeof window.getSelection != \"undefined\"\n                &amp;&amp; typeof document.createRange != \"undefined\") {\n            var range = document.createRange();\n            range.selectNodeContents(el);\n            range.collapse(atStart);\n            var sel = window.getSelection();\n            sel.removeAllRanges();\n            sel.addRange(range);\n        } else if (typeof document.body.createTextRange != \"undefined\") {\n            var textRange = document.body.createTextRange();\n            textRange.moveToElementText(el);\n            textRange.collapse(atStart);\n            textRange.select();\n        }\n    };\n}\n\nvar placeCaretAtStart = createCaretPlacer(true);\nvar placeCaretAtEnd = createCaretPlacer(false);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 89
                }
            ],
            "body": "<p>dummy\noutput in <strong>Chrome</strong>:</p>\n\n<pre><code>&lt;div id=\"content\" contenteditable=\"true\" style=\"border:1px solid #000;width:500px;height:40px;\"&gt;\n    hey\n    &lt;div&gt;what's up?&lt;/div&gt;\n&lt;/div&gt;\n&lt;button id=\"insert_caret\"&gt;&lt;/button&gt;\n</code></pre>\n\n<p>I believe in <strong>FF</strong> it would look something like this:</p>\n\n<pre><code>hey\n&lt;br /&gt;\nwhat's up?\n</code></pre>\n\n<p>and in <strong>IE</strong>:</p>\n\n<pre><code>hey\n&lt;p&gt;what's up?&lt;/p&gt;\n</code></pre>\n\n<p>unfortunately, there is no nice way of making it so that every browser inserts a <code>&lt;br /&gt;</code> instead of a div- or p-tag, or at least I couldn't find anything online.</p>\n\n<hr>\n\n<p>ANYWAY, what I am trying to do now is, when I hit the <strong>button</strong>, I want the caret to be set at the end of the text, so it should look something like this:</p>\n\n<pre><code>hey\nwhat's up?|\n</code></pre>\n\n<p>any way to do this so it works in <strong>all browser</strong>?</p>\n\n<p>example:</p>\n\n<pre><code>$(document).ready(function()\n{\n    $('#insert_caret').click(function()\n    {\n        var ele = $('#content');\n        var length = ele.html().length;\n\n        ele.focus();\n\n        //set caret -&gt; end pos\n     }\n }\n</code></pre>\n",
            "last_activity_date": 1415098478,
            "question_id": 4233265,
            "score": 26,
            "tags": [
                "javascript",
                "html",
                "cross-browser",
                "contenteditable",
                "caret"
            ],
            "title": "contenteditable, set caret at the end of the text (cross-browser)"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>No, it is not possible. You can use a custom javascript alert box.</p>\n\n<p>Found a nice one using jQuery</p>\n\n<p><a href=\"http://labs.abeautifulsite.net/archived/jquery-alerts/demo/\">jQuery Alert Dialogs (Alert, Confirm, &amp; Prompt Replacements)</a></p>\n",
                    "is_accepted": false,
                    "score": 56
                },
                {
                    "body": "<p>You can do this in IE:</p>\n\n<pre><code>&lt;script language=\"VBScript\"&gt;\nSub myAlert(title, content)\n      MsgBox content, 0, title\nEnd Sub\n&lt;/script&gt;\n\n&lt;script type=\"text/javascript\"&gt;\nmyAlert(\"My custom title\", \"Some content\");\n&lt;/script&gt;\n</code></pre>\n\n<p>(Although, I really wish you couldn't.)</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Sigh...no you can't.</p>\n\n<p>Its a security/anti-phishing feature.</p>\n",
                    "is_accepted": true,
                    "score": 149
                },
                {
                    "body": "<p>To answer the questions in terms of how you asked it.</p>\n\n<p>This is actually REALLY easy (in Internet Explorer, at least), i did it in like 17.5 seconds.</p>\n\n<p>If you use the custom script that cxfx provided: (place it in your apsx file)</p>\n\n<pre><code>&lt;script language=\"VBScript\"&gt;\nSub myAlert(title, content)\nMsgBox content, 0, title \nEnd Sub \n&lt;/script&gt;\n</code></pre>\n\n<p>You can then call it just like you called the regular alert. Just modify your code to the following.</p>\n\n<pre><code>Response.Write(\"&lt;script language=JavaScript&gt; myAlert('Message Header Here','Hi select a valid date'); &lt;/script&gt;\");\n</code></pre>\n\n<p>Hope that helps you, or someone else!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Yes you can change it. if you call VBscript function within Javascript.</p>\n\n<p>Here is simple example</p>\n\n<pre><code>&lt;script&gt;\n\nfunction alert_confirm(){\n\n      customMsgBox(\"This is my title\",\"how are you?\",64,0,0,0);\n}\n\n&lt;/script&gt;\n\n\n&lt;script language=\"VBScript\"&gt;\n\nFunction customMsgBox(tit,mess,icon,buts,defs,mode)\n   butVal = icon + buts + defs + mode\n   customMsgBox= MsgBox(mess,butVal,tit)\nEnd Function\n\n&lt;/script&gt;\n\n&lt;html&gt;\n\n&lt;body&gt;\n&lt;a href=\"javascript:alert_confirm()\"&gt;Alert&lt;/a&gt;\n&lt;/body&gt;\n\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Override the javascript window.alert() function.</p>\n\n<pre><code>window.alert = function(title, message){\n    var myElementToShow = document.getElementById(\"someElementId\");\n    myElementToShow.innerHTML = title + \"&lt;/br&gt;\" + message; \n}\n</code></pre>\n\n<p>With this you can create your own <code>alert()</code> function. Create a new 'cool' looking dialog (from some div elements). </p>\n\n<p>Tested working in chrome and webkit, not sure of others.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I think the question was for JavaScript which is compatible with all platforms and browsers and not for VBScript which is a strictly IE and Windows thing so its usage is limited to Windows only</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There's quite a nice 'hack' here - <a href=\"http://stackoverflow.com/a/14565029\">http://stackoverflow.com/a/14565029</a> where you use an iframe with an empty src to generate the alert / confirm message - it doesn't work on Android (for security's sake) - but may suit your scenario.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>When you start up or just join a project based on webapplications, the design of interface is maybe good. Otherwise this should be changed. In order to Web 2.0 applications you will work with dynamic contents, many effects and other stuff. All these things are fine, but no one thought about to style up the JavaScript alert and confirm boxes.\nHere is the they way,.. completely dynamic, JS and CSS driven\nCreate simple html file</p>\n\n<pre><code>&lt;html&gt;\n &lt;head&gt;\n   &lt;title&gt;jsConfirmSyle&lt;/title&gt;\n   &lt;meta http-equiv=\"Content-Style-Type\" content=\"text/css\" /&gt;\n   &lt;meta http-equiv=\"Content-Script-Type\" content=\"text/javascript\" /&gt;\n    &lt;script type=\"text/javascript\" src=\"jsConfirmStyle.js\"&gt;&lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n\n      function confirmation() {\n       var answer = confirm(\"Wanna visit google?\")\n       if (answer){\n       window.location = \"http://www.google.com/\";\n       }\n     }    \n\n    &lt;/script&gt;\n    &lt;style type=\"text/css\"&gt;\n     body {\n      background-color: white;\n      font-family: sans-serif;\n      }\n    #jsconfirm {\n      border-color: #c0c0c0;\n      border-width: 2px 4px 4px 2px;\n      left: 0;\n     margin: 0;\n     padding: 0;\n     position: absolute;\n    top: -1000px;\n    z-index: 100;\n   }\n\n  #jsconfirm table {\n   background-color: #fff;\n   border: 2px groove #c0c0c0;\n   height: 150px;\n   width: 300px;\n  }\n\n   #jsconfirmtitle {\n  background-color: #B0B0B0;\n  font-weight: bold;\n  height: 20px;\n  text-align: center;\n}\n\n #jsconfirmbuttons {\nheight: 50px;\ntext-align: center;\n }\n\n#jsconfirmbuttons input {\nbackground-color: #E9E9CF;\ncolor: #000000;\nfont-weight: bold;\nwidth: 125px;\nheight: 33px;\npadding-left: 20px;\n}\n\n#jsconfirmleft{\nbackground-image: url(left.png);\n}\n\n#jsconfirmright{\nbackground-image: url(right.png);\n }\n &lt; /style&gt;\n  &lt;/head&gt;\n &lt;body&gt;\n&lt;p&gt;&lt;br /&gt;\n&lt;a href=\"#\"\nonclick=\"javascript:showConfirm('Please confirm','Are you really really sure to visit    google?','Yes','http://www.google.com','No','#')\"&gt;JsConfirmStyled&lt;/a&gt;&lt;/p&gt;\n&lt;p&gt;&lt;a href=\"#\" onclick=\"confirmation()\"&gt;standard&lt;/a&gt;&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Then create simple js file name jsConfirmStyle.js. Here is simple js code</p>\n\n<pre><code>ie5=(document.getElementById&amp;&amp;document.all&amp;&amp;document.styleSheets)?1:0;\nnn6=(document.getElementById&amp;&amp;!document.all)?1:0;\n\n xConfirmStart=800;\n yConfirmStart=100;\n\n  if(ie5||nn6) {\n  if(ie5) cs=2,th=30;\n  else cs=0,th=20;\n   document.write(\n    \"&lt;div id='jsconfirm'&gt;\"+\n        \"&lt;table&gt;\"+\n            \"&lt;tr&gt;&lt;td id='jsconfirmtitle'&gt;&lt;/td&gt;&lt;/tr&gt;\"+\n            \"&lt;tr&gt;&lt;td id='jsconfirmcontent'&gt;&lt;/td&gt;&lt;/tr&gt;\"+\n            \"&lt;tr&gt;&lt;td id='jsconfirmbuttons'&gt;\"+\n                \"&lt;input id='jsconfirmleft' type='button' value='' onclick='leftJsConfirm()' onfocus='if(this.blur)this.blur()'&gt;\"+\n                \"&amp;nbsp;&amp;nbsp;\"+\n                \"&lt;input id='jsconfirmright' type='button' value='' onclick='rightJsConfirm()' onfocus='if(this.blur)this.blur()'&gt;\"+\n            \"&lt;/td&gt;&lt;/tr&gt;\"+\n        \"&lt;/table&gt;\"+\n    \"&lt;/div&gt;\"\n  );\n   }\n\n document.write(\"&lt;div id='jsconfirmfade'&gt;&lt;/div&gt;\");\n\n\n function leftJsConfirm() {\n  document.getElementById('jsconfirm').style.top=-1000;\n  document.location.href=leftJsConfirmUri;\n }\nfunction rightJsConfirm() {\ndocument.getElementById('jsconfirm').style.top=-1000;\ndocument.location.href=rightJsConfirmUri;\n }\nfunction confirmAlternative() {\nif(confirm(\"Scipt requieres a better browser!\"))       document.location.href=\"http://www.mozilla.org\";\n}\n\nleftJsConfirmUri = '';\nrightJsConfirmUri = '';\n\n  /**\n   * Show the message/confirm box\n  */\n    function       showConfirm(confirmtitle,confirmcontent,confirmlefttext,confirmlefturi,confirmrighttext,con      firmrighturi)  {\ndocument.getElementById(\"jsconfirmtitle\").innerHTML=confirmtitle;\ndocument.getElementById(\"jsconfirmcontent\").innerHTML=confirmcontent;\ndocument.getElementById(\"jsconfirmleft\").value=confirmlefttext;\ndocument.getElementById(\"jsconfirmright\").value=confirmrighttext;\nleftJsConfirmUri=confirmlefturi;\nrightJsConfirmUri=confirmrighturi;\nxConfirm=xConfirmStart, yConfirm=yConfirmStart;\nif(ie5) {\n    document.getElementById(\"jsconfirm\").style.left='25%';\n    document.getElementById(\"jsconfirm\").style.top='35%';\n}\nelse if(nn6) {\n    document.getElementById(\"jsconfirm\").style.top='25%';\n    document.getElementById(\"jsconfirm\").style.left='35%';\n}\nelse confirmAlternative();\n</code></pre>\n\n<p>}</p>\n\n<p><a href=\"http://shafiqul.wordpress.com/2013/07/11/how-to-change-the-style-of-alert-box/\" rel=\"nofollow\">You can download full Source code from here</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm generating a JavaScript alert with following code in C# .NET page:</p>\n\n<pre><code>Response.Write(\"&lt;script language=JavaScript&gt; alert('Hi select a valid date'); &lt;/script&gt;\");\n</code></pre>\n\n<p>It displays an alert box with the heading title as \"Message from webpage\".</p>\n\n<p>Is it possible to modify the title?</p>\n",
            "last_activity_date": 1409289533,
            "question_id": 1905289,
            "score": 99,
            "tags": [
                "alert",
                "javascript"
            ],
            "title": "How to edit a JavaScript alert box title?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction showStuff(id, text, btn) {\n    document.getElementById(id).style.display = 'block';\n    // hide the lorem ipsum text\n    document.getElementById(text).style.display = 'none';\n    // hide the link\n    btn.style.display = 'none';\n}\n&lt;/script&gt;\n\n\n&lt;td class=\"post\"&gt;\n\n&lt;a href=\"#\" onclick=\"showStuff('answer1', 'text1', this); return false;\"&gt;Edit&lt;/a&gt;\n&lt;span id=\"answer1\" style=\"display: none;\"&gt;\n&lt;textarea rows=\"10\" cols=\"115\"&gt;&lt;/textarea&gt;\n&lt;/span&gt;\n\n&lt;span id=\"text1\"&gt;Lorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum&lt;/span&gt;\n&lt;/td&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 98
                },
                {
                    "body": "<p>You should think JS for behaviour, and CSS for visual candy as much as possible. By changing your HTML a bit :</p>\n\n<pre><code>&lt;td class=\"post\"&gt;\n    &lt;a class=\"p-edit-btn\" href=\"#\" onclick=\"showStuff(this.parentNode);return false;\"&gt;Edit&lt;/a&gt;\n    &lt;span id=\"answer1\" class=\"post-answer\"&gt;\n       &lt;textarea rows=\"10\" cols=\"115\"&gt;&lt;/textarea&gt;\n    &lt;/span&gt;\n    &lt;span class=\"post-text\" id=\"text1\"&gt;Lorem ipsum ... &lt;/span&gt;\n&lt;/td&gt;\n</code></pre>\n\n<p>You'll be able to switch from one view to the other simply using CSS rules :</p>\n\n<pre><code>td.post-editing &gt; a.post-edit-btn,\ntd.post-editing &gt; span.post-text,\ntd.post &gt; span.post-answer\n{\n    display : none;\n}\n</code></pre>\n\n<p>And JS code that switch between the two classes</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction showStuff(aPostTd) {\n    aPostTd.className=\"post-editing\";\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I would like to suggest you the <strong>JQuery</strong> option.</p>\n\n<pre><code>$(\"#item\").toggle();\n$(\"#item\").hide();\n$(\"#item\").show();\n</code></pre>\n\n<p>For example:</p>\n\n<pre><code>$(document).ready(function(){\n   $(\"#item\").click(function(event){\n     //Your actions here\n   });\n });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I also think that jQuery is better. See this:</p>\n\n<pre><code>&lt;script&gt;\n$(document).ready(function(){\n   $(\"#item\").click(function(){\n     $(.post).toggle();\n   });\n });\n&lt;/script&gt;\n</code></pre>\n\n<p>And HTML:</p>\n\n<pre><code>&lt;div class='post'&gt;ABC&lt;/div&gt;\n\n&lt;button id='item'&gt;Toggle Me!&lt;/button&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Use jQuery to switch between the two classes.</p>\n\n<pre><code> &lt;script&gt;\n $(document).ready\n (function(){\n $(\"#item\").click\n (function(){\n $(.post).toggle();\n });\n });\n &lt;/script&gt;\n</code></pre>\n\n<p><a href=\"http://hmtsoft.com\" rel=\"nofollow\">http://hmtsoft.com</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How could I hide the 'Edit'-link after i press it? and also can i hide the lorem ipsum text when I press edit?</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction showStuff(id) {\n    document.getElementById(id).style.display = 'block';\n}\n&lt;/script&gt;\n\n\n&lt;td class=\"post\"&gt;\n\n&lt;a href=\"#\" onclick=\"showStuff('answer1'); return false;\"&gt;Edit&lt;/a&gt;\n&lt;span id=\"answer1\" style=\"display: none;\"&gt;\n&lt;textarea rows=\"10\" cols=\"115\"&gt;&lt;/textarea&gt;\n&lt;/span&gt;\n\nLorem ipsum Lorem ipsum Lorem ipsum Lorem ipsum \n&lt;/td&gt;\n</code></pre>\n",
            "last_activity_date": 1423795415,
            "question_id": 6242976,
            "score": 49,
            "tags": [
                "javascript"
            ],
            "title": "javascript hide/show element"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>The <a href=\"http://en.wikipedia.org/wiki/V8_%28JavaScript_engine%29\">V8</a> debugger released as part of the Google <a href=\"http://code.google.com/p/chromedevtools/\">Chrome Developer Tools</a> can be used to debug Node.js scripts. A detailed explanation of how this works can be found in the <a href=\"https://github.com/joyent/node/wiki/Using-Eclipse-as-Node-Applications-Debugger\">Node.js GitHub wiki</a>.</p>\n\n<p><strike>There is also <a href=\"http://github.com/smtlaissezfaire/ndb\">ndb</a>, a command line debugger written in Node.js itself.</strike></p>\n",
                    "is_accepted": true,
                    "score": 131
                },
                {
                    "body": "<p><a href=\"http://github.com/dannycoates/node-inspector\">node-inspector</a> could save the day! Use it from any browser supporting websockets. Breakpoints, profiler, livecoding etc... It is really awesome.</p>\n\n<p>Install it with</p>\n\n<pre><code>npm install -g node-inspector\n</code></pre>\n\n<p>then run</p>\n\n<pre><code>node-debug app.js\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 604
                },
                {
                    "body": "<p>Node.js version 0.3.4+ has built-in debugging support.</p>\n\n<p><code>node debug script.js</code></p>\n\n<p>Manual: <a href=\"http://nodejs.org/api/debugger.html\">http://nodejs.org/api/debugger.html</a></p>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>There is built-in command line <a href=\"http://vimeo.com/19465332\" rel=\"nofollow\">debugger client</a> within Node.js. Cloud 9 IDE have also pretty nice (visual) <a href=\"http://vimeo.com/16472530\" rel=\"nofollow\">debugger</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you need a powerful logging library for Node.js, <a href=\"https://github.com/baryon/tracer\" rel=\"nofollow\">Tracer https://github.com/baryon/tracer</a> is a better choice.</p>\n\n<p>It outputs log messages with a timestamp, file name, method name, line number, path or call stack, support color console, and support database, file, stream transport easily. I am the author.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I personally use <a href=\"http://www.jetbrains.com/webstorm/\">JetBrains WebStorm</a> as it's the only JavaScript IDE that I've found which is great for both frontend and backend JavaScript.</p>\n\n<p>It works on multiple OS's and has Node.js debugging built-in (as well as a ton of other stuff](<a href=\"http://www.jetbrains.com/webstorm/features/index.html\">http://www.jetbrains.com/webstorm/features/index.html</a>).</p>\n\n<p>My only 'issues'/wishlist items <del>are</del> <strong>were</strong>:</p>\n\n<ol>\n<li><del>It seems to be more resource hungry on Mac than Windows</del> It no longer seems an issue in version 6.</li>\n<li><del>It would be nice if it had Snippet support (like those of <a href=\"http://vimeo.com/41216114\">Sublime Text 2</a> - i.e. type 'fun' and tap 'tab' to put in a function.</del> See @WickyNilliams comment below - With Live Templates you also have snippet support.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>Assuming you have node-inspector installed on your computer (if not, just type 'npm install -g node-inspector') you just have to run:</p>\n\n<pre><code>node-inspector &amp; node --debug-brk scriptFileName.js\n</code></pre>\n\n<p>And paste the URI from the command line into a WebKit (Chrome / Safari) browser.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There are a few tools and ways out there:</p>\n\n<h3><a href=\"http://www.joyent.com/developers/node/debug\">Joyent's Guide</a></h3>\n\n<ul>\n<li>Joyent now maintains their <a href=\"http://www.joyent.com/developers/node/debug\">own debugging guide</a>. It's worth a look.</li>\n</ul>\n\n<h3>Interactive Stack Traces with <a href=\"https://github.com/traceglMPL/tracegl\">traceGL</a></h3>\n\n<ul>\n<li><a href=\"https://github.com/traceglMPL/tracegl\">Guide here</a></li>\n</ul>\n\n<h3>Profiling with <a href=\"https://github.com/bnoordhuis/node-profiler\">Profiler</a></h3>\n\n<ol>\n<li>Install globally <code>npm install -g profiler</code></li>\n<li>Start your process with <code>node --prof</code> this will create a <code>v8.log</code> file</li>\n<li>Build <code>nprof</code> by running <code>~/.nvm/v0.8.22/lib/node_modules/profiler/tools/build-nprof</code></li>\n<li>Run <code>~/.nvm/v0.8.22/lib/node_modules/profiler/nprof</code> this will read the v8.log profile and give you nice ouput.</li>\n</ol>\n\n<h3>CPU and Memory Profiling with <a href=\"https://nodetime.com/\">NodeTime</a></h3>\n\n<ol>\n<li>Install to your application, <code>npm install nodetime</code></li>\n<li>Include in your application, <code>require('nodetime').profile()</code></li>\n<li>Follow the instructions it will output to console</li>\n</ol>\n\n<p>Alternatively, you may want to use <a href=\"https://github.com/baryshev/look\">look</a>, which is based on <code>nodetime</code>, but it doesn't send data to nodetime.com.</p>\n\n<h3>Blink (formerly WebKit) Developer Tools Debugging with <a href=\"https://github.com/node-inspector/node-inspector\">Node Inspector</a></h3>\n\n<ol>\n<li>Install it globally: <code>npm install -g node-inspector</code></li>\n<li>Run your application in debug mode: <code>node-debug your/node/program.js</code> (or attach to a running process: <code>kill -s USR1 &lt;your node process id&gt;</code>)</li>\n<li>In another terminal window run node-inspector: <code>node-inspector</code></li>\n<li>Open <code>http://127.0.0.1:8080/debug?port=5858</code> (or debug remotely by replacing 127.0.0.1 with your host; make sure port 8080 is open).</li>\n</ol>\n\n<h3>Webkit Developer Tools Profiling with <a href=\"https://github.com/c4milo/node-webkit-agent\">Node Webkit Agent</a></h3>\n\n<ol>\n<li>Install to your application, <code>npm install webkit-devtools-agent</code></li>\n<li>Include in your application, <code>agent = require('webkit-devtools-agent')</code></li>\n<li>Activate the agent: <code>kill -SIGUSR2 &lt;your node process id&gt;</code></li>\n<li>Access the agent via the <a href=\"https://github.com/c4milo/node-webkit-agent\">appropriate link</a></li>\n</ol>\n\n<h3>Interactive Cloud9 Debugging</h3>\n\n<ul>\n<li><a href=\"https://docs.c9.io/running_and_debugging_code.html\">Guide here</a></li>\n</ul>\n\n<h3>Heapdumps to WebKit Developer Tools</h3>\n\n<ul>\n<li><a href=\"https://github.com/bnoordhuis/node-heapdump\">Tool and guide here</a></li>\n</ul>\n\n<h3>Logging Libraries that output Debugging Information</h3>\n\n<ul>\n<li><a href=\"https://github.com/bevry/caterpillar\">Caterpillar</a></li>\n<li><a href=\"https://github.com/baryon/tracer\">Tracer</a></li>\n</ul>\n\n<h3>Libraries that enhance stack trace information</h3>\n\n<ul>\n<li><a href=\"https://github.com/mattinsler/longjohn\">Longjohn</a></li>\n</ul>\n\n<h3>Flamegraphs with <a href=\"http://dtrace.org/\">Dtrace</a> and <a href=\"https://github.com/davepacheco/node-stackvis\">StackVis</a></h3>\n\n<ul>\n<li><a href=\"http://blog.nodejs.org/2012/04/25/profiling-node-js/\">Only supported on SmartOS</a></li>\n</ul>\n\n<h3>Flamegraphs with Chrome Developer Tools</h3>\n\n<ul>\n<li><a href=\"https://gist.github.com/balupton/3944017/#comment-829204\">Coming soon</a></li>\n</ul>\n\n<h3>Benchmark</h3>\n\n<ul>\n<li>With <a href=\"http://httpd.apache.org/docs/2.2/programs/ab.html\">Apache Bench</a>: <code>ab -n 100000 -c 1 http://127.0.0.1:9778/</code></li>\n<li>With <a href=\"https://github.com/wg/wrk\">wrk</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 312
                },
                {
                    "body": "<p><a href=\"https://github.com/adobe-research/theseus\">Theseus</a> is a project by Adobe research which lets you debug your Node.js code in their Open Source editor <a href=\"https://github.com/adobe/brackets\">Brackets</a>. It has some interesting features like real-time code coverage, retroactive inspection, asynchronous call tree.</p>\n\n<p><img src=\"http://i.stack.imgur.com/ZXwGD.png\" alt=\"screenshot\"></p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>I put together a short <a href=\"http://www.habdas.org/node-js-debugging-primer/\" rel=\"nofollow\">Node.js debugging primer</a> on using the <a href=\"https://github.com/node-inspector/node-inspector\" rel=\"nofollow\">node-inspector</a> for those who aren't sure where to get started.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There is new open-source Nodeclipse project <a href=\"http://www.nodeclipse.org/\" rel=\"nofollow\">http://www.nodeclipse.org/</a> ( as Eclipse plugin or Enide Studio <a href=\"http://sourceforge.net/projects/nodeclipse/files/\" rel=\"nofollow\">http://sourceforge.net/projects/nodeclipse/files/</a>)</p>\n\n<p><img src=\"http://www.nodeclipse.org/img/Nodeclipse-1-debugging.png\" alt=\"\"></p>\n\n<p>Nodeclipse became #1 in <a href=\"http://www.eclipse.org/community/eclipse_newsletter/2013/december/article2.php\" rel=\"nofollow\">Eclipse Top 10 NEW Plugins for 2013</a></p>\n\n<p>It uses modified V8 debugger (from Google Chrome Developer Tools for Java).</p>\n\n<p>Nodeclipse is free open-source software released at the start of every month <a href=\"http://www.nodeclipse.org/history\" rel=\"nofollow\">http://www.nodeclipse.org/history</a>. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Just for completeness:</p>\n\n<p>PyCharm 3.0 + Node.js Plugin offers awesome dev+run+debug experience.</p>\n\n<p><a href=\"http://www.jetbrains.com/pycharm/webhelp/running-and-debugging-node-js.html#d91029e423\" rel=\"nofollow\">http://www.jetbrains.com/pycharm/webhelp/running-and-debugging-node-js.html#d91029e423</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I would use: <a href=\"https://github.com/spumko/good\" rel=\"nofollow\">GOOD</a> by Walmart labs it will do the job and its very flexible:</p>\n\n<pre><code>var hapi = require('hapi');\nvar good = require('good');\nvar server = hapi.createServer('localhost', 5000,{});\nserver.route({SOME ROUTE HERE});\nserver.start();\n\nvar options = {\nsubscribers: {\n    'console':               ['ops', 'request', 'log', 'error'],\n    'http://localhost/logs': ['log']\n    }\n};\nserver.pack.require('good', options, function (err) {\n\n    if (!err) {\n        console.log('Plugin loaded successfully');\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"https://nodejstools.codeplex.com/\">Node.js Tools for Visual Studio</a> 2012 or 2013 includes a debugger.  The overview <a href=\"http://www.hanselman.com/blog/IntroducingNodejsToolsForVisualStudio.aspx\">here</a> states \"Node.js Tools for Visual Studio includes complete support for debugging node apps.\". Being new to Node.js, but having a background in .NET, I've found this add in to be a great way to debug Node.js applications. </p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<pre><code>node-debug -p 8888 scriptFileName.js\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here in this blog I explain how to use the Node.js console built-in debugger in different scenarios: <a href=\"http://nicosommi.com/?p=284\" rel=\"nofollow\">http://nicosommi.com/?p=284</a> (English and Spanish).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I created a neat little tool called <a href=\"https://github.com/blainesch/pry.js\" rel=\"nofollow\">pry.js</a> that can help you out.</p>\n\n<p>Put a simple statement somewhere in your code, run your script normally and node will halt the current thread giving you access to all your variables and functions. View/edit/delete them at will!</p>\n\n<pre><code>pry = require('pryjs')\n\nclass FizzBuzz\n\n  run: -&gt;\n    for i in [1..100]\n      output = ''\n      eval(pry.it) # magic\n      output += \"Fizz\" if i % 3 is 0\n      output += \"Buzz\" if i % 5 is 0\n      console.log output || i\n\n  bar: -&gt;\n    10\n\nfizz = new FizzBuzz()\nfizz.run()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How do I debug a Node.js server application? Right now I'm mostly using <em>alert debugging</em> with print statements like this:</p>\n\n<pre><code>sys.puts(sys.inspect(someVariable));\n</code></pre>\n\n<p>There must be a better way to debug. I know that <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\">Google Chrome</a> has a command-line debugger. Is this debugger available for Node.js as well?</p>\n",
            "last_activity_date": 1422233472,
            "question_id": 1911015,
            "score": 602,
            "tags": [
                "javascript",
                "node.js",
                "debugging",
                "google-chrome-devtools"
            ],
            "title": "How to debug Node.js applications"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I use <a href=\"http://dev.iceburg.net/jquery/jqModal/\" rel=\"nofollow\">jqModal</a>, easy to use and you can achieve some great effects</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Also checkout <a href=\"http://docs.jquery.com/UI/Dialog\">jQuery UI Dialog</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Using the <a href=\"http://www.asp.net/AJAX/AjaxControlToolkit/Samples/ModalPopup/ModalPopup.aspx\" rel=\"nofollow\">ModalPopup</a> in the AJAX control toolkit is another way you can get this effect.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><strong>EDIT</strong>: The code below shows how to replicate the bars that show at the top of the screen when you get a new badge, first come to the site, etc. For the hovering dialogs that you get when you try to comment too fast, vote for your own question, etc, check out <a href=\"http://stackoverflow.com/questions/758906/how-would-i-implement-stackoverflows-hovering-dialogs\">this question</a> where I show how to do this or  just go straight to the <a href=\"http://jsbin.com/oqale\">example</a>.\n<hr></p>\n\n<p>Here's how Stackoverflow does it:</p>\n\n<p>This is the markup, initially hidden so we can fade it in:</p>\n\n<pre><code>&lt;div id='message' style=\"display: none;\"&gt;\n    &lt;span&gt;Hey, This is my Message.&lt;/span&gt;\n    &lt;a href=\"#\" class=\"close-notify\"&gt;X&lt;/a&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Here are the styles applied:</p>\n\n<pre><code>#message {\n    font-family:Arial,Helvetica,sans-serif;\n    position:fixed;\n    top:0px;\n    left:0px;\n    width:100%;\n    z-index:105;\n    text-align:center;\n    font-weight:bold;\n    font-size:100%;\n    color:white;\n    padding:10px 0px 10px 0px;\n    background-color:#8E1609;\n}\n\n#message span {\n    text-align: center;\n    width: 95%;\n    float:left;\n}\n\n.close-notify {\n    white-space: nowrap;\n    float:right;\n    margin-right:10px;\n    color:#fff;\n    text-decoration:none;\n    border:2px #fff solid;\n    padding-left:3px;\n    padding-right:3px\n}\n\n.close-notify a {\n    color: #fff;\n}\n</code></pre>\n\n<p>And this is javascript (using jQuery):</p>\n\n<pre><code>$(document).ready(function() {\n    $(\"#message\").fadeIn(\"slow\");\n    $(\"#message a.close-notify\").click(function() {\n        $(\"#message\").fadeOut(\"slow\");\n        return false;\n    });\n});\n</code></pre>\n\n<p>And voila. Depending on your page setup you might also want to edit the body margin-top on display.</p>\n\n<p><a href=\"http://jsbin.com/owuje\">Here is a demo of it in action.</a></p>\n",
                    "is_accepted": false,
                    "score": 149
                },
                {
                    "body": "<p>Here's what I found from viewing the StackOverflow source. Hopefully saves some time for someone. \nThe showNotification function is used for all those popup messages. </p>\n\n<pre><code>var showNotification=function(jClicked,msg){master.showErrorPopup(jClicked.parent(),msg)};\nvar showFadingNotification=function(jClicked,msg){master.showErrorPopup(jClicked.parent(),msg,true)};\n\n//master...\nshowErrorPopup: function (e, h, f) {\n    var g = $('&lt;div class=\"error-notification supernovabg\"&gt;&lt;h2&gt;' + h + \"&lt;/h2&gt;\" + (f ? \"\" : \"(click on this box to dismiss)\") + \"&lt;/div&gt;\");\n    var i = function () {\n        g.fadeOutAndRemove()\n    };\n    $(e).append(g);\n    g.click(i).fadeIn(\"fast\");\n    setTimeout(i, (f ? Math.max(2500, h.length * 40) : 1000 * 30))\n}\n</code></pre>\n\n<p>css</p>\n\n<pre><code>.error-notification{z-index:1;cursor:pointer;display:none;position:absolute;padding:15px;-moz-box-shadow:2px 2px 5px #000;-webkit-box-shadow:2px 2px 5px #000;box-shadow:2px 2px 5px #000;}\n.error-notification a{color:inherit;text-decoration:underline;}\n.error-notification li{font-size:110%;padding-top:3px;}\n.supernovabg{color:#fff !important;background-color:#fe7a15 !important;}\n</code></pre>\n\n<p>It's cool how they use the length of the message to set the fading timeout. I didn't realize all the (non-fading style) messages actually fade out after 30 seconds.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Check <a href=\"http://twitter.github.com/bootstrap/\" rel=\"nofollow\">bootstrap</a>. There are some pop-up effects, modals, transitions, alerts, everything based on <code>javascript</code> and <code>css</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I would like to add a popup message like the one that appears on stackoverflow when I am not logged in and I try to use voting buttons.</p>\n\n<p>What is the best method for achieving that?\nIs it done using a jquery library?</p>\n",
            "last_activity_date": 1356648434,
            "question_id": 659199,
            "score": 96,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "css"
            ],
            "title": "How to show popup message like in stackoverflow"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Not that I know of. The DOM is a client side thing (jQuery doesn't parse the HTML, but the DOM).</p>\n\n<p>Here are some current Node.js projects:</p>\n\n<p><a href=\"http://wiki.github.com/ry/node\" rel=\"nofollow\">http://wiki.github.com/ry/node</a></p>\n\n<p>And SimonW's <a href=\"http://github.com/simonw/djangode\" rel=\"nofollow\">djangode</a> is pretty damn cool...</p>\n",
                    "is_accepted": false,
                    "score": -5
                },
                {
                    "body": "<p>An alternative is to use <a href=\"http://documentcloud.github.com/underscore/\" rel=\"nofollow\">Underscore.js</a>.  It should provide what you might have wanted server-side from JQuery.</p>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>No. It's going to be quite a big effort to port a browser environment to node.</p>\n\n<p>Another approach, that I'm currently investigating for unit testing, is to create \"Mock\" version of jQuery that provides callbacks whenever a selector is called.</p>\n\n<p>This way you could unit test your jQuery plugins without actually having a DOM. You'll still have to test in real browsers to see if your code works in the wild, but if you discover browser specific issues, you can easily \"mock\" those in your unit tests as well.</p>\n\n<p>I'll push something to github.com/felixge once it's ready to show.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I believe the answer to this is now yes.<br>\n<a href=\"http://github.com/tmpvar/jsdom/blob/master/example/jquery/run.js\">http://github.com/tmpvar/jsdom/blob/master/example/jquery/run.js</a></p>\n\n<pre><code>var navigator = { userAgent: \"node-js\" };  \nvar jQuery = require(\"./node-jquery\").jQueryInit(window, navigator);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Using <a href=\"http://github.com/tmpvar/jsdom\">jsdom</a> you now can. Just look at their jquery example in the examples directory.</p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p><strong>Update</strong>: (late 2013) The official jQuery team finally took over the management of the <code>jquery</code> package on npm, but omitted any node usage instructions in the README.</p>\n\n<p><strong>An example of usage</strong> can be found at <a href=\"http://github.com/coolaj86/node-jquery\" rel=\"nofollow\">http://github.com/coolaj86/node-jquery</a>.</p>\n\n<p>Since November 4th, 2010, you can simply do this:</p>\n\n<pre><code>npm install jquery\n</code></pre>\n\n<p>This package internally uses the modules <a href=\"https://github.com/tmpvar/jsdom\" rel=\"nofollow\">jsdom</a> and <a href=\"https://github.com/driverdan/node-XMLHttpRequest\" rel=\"nofollow\">xmlhttprequest</a>. The package manager will handle the installing of dependencies. Read the thread <a href=\"http://groups.google.com/group/nodejs/browse_thread/thread/e02619ec7d208d28\" rel=\"nofollow\">here</a>.</p>\n\n<p><strong>Update</strong>: (March 1, 2015) Note that the most recent version of jsdom (>= 4.0.0) does not work with with node.js (it works with io.js).  The example at <a href=\"http://github.com/coolaj86/node-jquery\" rel=\"nofollow\">http://github.com/coolaj86/node-jquery</a> does work in node.js, however, if you install jsdom 3.1.2 instead of the most recent version.</p>\n",
                    "is_accepted": false,
                    "score": 357
                },
                {
                    "body": "<p>Yes you can, using a library I created called nodeQuery <a href=\"https://github.com/tblobaum/nodeQuery\">https://github.com/tblobaum/nodeQuery</a></p>\n\n<pre><code>var Express = require('express')\n    , dnode = require('dnode')\n    , nQuery = require('nodeQuery')\n    , express = Express.createServer();\n\nvar app = function ($) {\n    $.on('ready', function () {\n        // do some stuff to the dom in real-time\n        $('body').append('Hello World');\n        $('body').append('&lt;input type=\"text\" /&gt;');\n        $('input').live('click', function () {\n            console.log('input clicked');\n            // ...\n        });\n    });\n};\n\nnQuery\n    .use(app);\n\nexpress\n    .use(nQuery.middleware)\n    .use(Express.static(__dirname + '/public'))\n    .listen(3000);\n\ndnode(nQuery.middleware).listen(express);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>The module <a href=\"https://github.com/tmpvar/jsdom\" rel=\"nofollow\">jsdom</a> is a great tool. But if you want to evaluate entire pages and do some funky stuff on them server side I suggest running them in their own context:</p>\n\n<pre><code>vm.runInContext\n</code></pre>\n\n<p>So things like <code>require</code> / <code>CommonJS</code> on site will not blow your Node process itself.</p>\n\n<p>You can find documentation <a href=\"http://nodejs.org/api/vm.html\" rel=\"nofollow\">here</a>. Cheers!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>At the time of writing there also is the maintained <a href=\"https://github.com/MatthewMueller/cheerio\">Cheerio</a>.</p>\n\n<blockquote>\n  <p>Fast, flexible, and lean implementation of core jQuery designed\n  specifically for the server.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p><strong>WARNING</strong></p>\n\n<p>This solution, as mentioned by <a href=\"http://stackoverflow.com/users/1333873/golo-roden\">Golo Roden</a> is not <em>correct</em>. It is just a quick fix to help people to have their actual jQuery code running using a Node app structure, but it's not Node philosophy because the jQuery is still running on the client side instead of on the server side. I'm sorry for giving a wrong answer.</p>\n\n<hr>\n\n<p>You can also render Jade with node and put your jQuery code inside. Here is the code of the jade file:</p>\n\n<pre><code>!!! 5\nhtml(lang=\"en\")\n  head\n    title Holamundo!\n    script(type='text/javascript', src='http://code.jquery.com/jquery-1.9.1.js')\n  body\n    h1#headTitle Hello, World\n    p#content This is an example of Jade.\n    script\n      $('#headTitle').click(function() {\n        $(this).hide();\n      });\n      $('#content').click(function() {\n        $(this).hide();\n      });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is it possible to use jQuery selectors/DOM manipulation on the server-side using Node.js?</p>\n",
            "last_activity_date": 1425193910,
            "question_id": 1801160,
            "score": 309,
            "tags": [
                "javascript",
                "jquery",
                "node.js"
            ],
            "title": "Can I use jQuery with Node.js?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Lexical (AKA static) scoping refers to determining a variable's scope based solely on its position within the textual corpus of code. A variable always refers to its top-level environment. It's good to understand it in <a href=\"http://en.wikipedia.org/wiki/Scope%5F%28programming%29#Static%5Fversus%5Fdynamic%5Fscoping\">relation to dynamic scope.</a></p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Scope defines the area, where functions, variables and such are available. The availability of a variable for example is defined within its  the context, let's say the function, file, or object, they are defined in. We usually call these local variables.</p>\n\n<p>The lexical part means that you can derive the scope from reading the source code. </p>\n\n<p>Lexical scope is also known as static scope.</p>\n\n<p>Dynamic scope defines global variables that can be called or referenced from anywhere after being defined. Sometimes they are called global variables, even though global variables in most programmin languages are of lexical scope. This means, it can be derived from reading the code that the variable is available in this context. Maybe one has to follow a uses or includes clause to find the instatiation or definition, but the code/compiler knows about the variable in this place.</p>\n\n<p>In dynamic scoping, by contrast, you search in the local function first, then you search in the function that called the local function, then you search in the function that called that function, and so on, up the call stack. \"Dynamic\" refers to change, in that the call stack can be different every time a given function is called, and so the function might hit different variables depending on where it is called from. (see <a href=\"http://c2.com/cgi/wiki?DynamicScoping\">here</a>)</p>\n\n<p>To see an interesting example for dynamic scope see <a href=\"http://www.gnu.org/software/guile/manual/html%5Fnode/Lexical-Scope.html\">here</a>.</p>\n\n<p>For further details see <a href=\"http://en.wikipedia.org/wiki/Scope%5F%28programming%29\">here</a> and <a href=\"http://whatis.techtarget.com/definition/0,,sid9%5Fgci295434,00.html\">here</a>.</p>\n\n<p><strong>Some examples in Delphi/Object Pascal</strong></p>\n\n<p>Delphi has lexical scope.</p>\n\n<pre><code>unit Main;\nuses aUnit;  // makes available all variables in interface section of aUnit\n\ninterface\n\n  var aGlobal: string; // global in the scope of all units that use Main;\n  type \n    TmyClass = class\n      strict private aPrivateVar: Integer; // only known by objects of this class type\n                                    // lexical: within class definition, \n                                    // reserved word private   \n      public aPublicVar: double;    // known to everyboday that has access to a \n                                    // object of this class type\n    end;\n\nimplementation\n\n  var aLocalGlobal: string; // known to all functions following \n                            // the definition in this unit    \n\nend.\n</code></pre>\n\n<p>The closest Delphi gets to dynamic scope is the RegisterClass()/GetClass() function pair. For its use see <a href=\"http://stackoverflow.com/questions/701049/is-there-a-way-to-instantiate-a-class-by-its-name-in-delphi/701080#701080\">here</a>.</p>\n\n<p>Let's say that the time RegisterClass([TmyClass]) is called to register a certain class cannot be predicted by reading the code (it gets called in a button click method called by the user), code calling GetClass('TmyClass') will get a result or not. The call to RegisterClass() does not have to be in the lexical scope of the unit using GetClass();</p>\n\n<p>Another possibility for dynamic scope are <a href=\"http://blogs.embarcadero.com/andreanolanusse/2008/07/17/tiburon-anonymous-methods/\">anonymous methods</a> (closures) in Delphi 2009, as they know the variables of their calling function. It does not follow the calling path from there recursively and therefore is not fully dynamic.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>I understand them through examples :)</p>\n\n<p>First, Lexical Scope (also called Static Scope), in C-like syntax:</p>\n\n<pre><code>void fun()\n{\n    int x = 5;\n\n    void fun2()\n    {\n        printf(\"%d\", x);\n    }\n}\n</code></pre>\n\n<p>Every inner level can access its outer levels.</p>\n\n<p>There is another way, called Dynamic Scope used by first implementation of Lisp,\nagain in C-like Syntax:</p>\n\n<pre><code>void fun()\n{\n    printf(\"%d\", x);\n}\n\nvoid dummy1()\n{\n    int x = 5;\n\n    fun();\n}\n\nvoid dummy2()\n{\n    int x = 10;\n\n    fun();\n}\n</code></pre>\n\n<p>Here <code>fun</code> can either access <code>x</code> in <code>dummy1</code> or <code>dummy2</code>, or any <code>x</code> in any function that call <code>fun</code> with <code>x</code> declared in it.</p>\n\n<pre><code>dummy1();\n</code></pre>\n\n<p>will print 5</p>\n\n<pre><code>dummy2();\n</code></pre>\n\n<p>will print 10</p>\n\n<p>The first one is called static because it can be deduced at compile-time, the second is called dynamic because the outer scope is dynamic and depends on the chain call of the functions.</p>\n\n<p>I find static scoping easier for the eye. Most languages went this way eventually even Lisp (can do both, right?). Dynamic scoping is like passing references of all variables to the called function.</p>\n\n<p>An example of why the compiler can not deduce the outer dynamic scope of a function, consider our last example, if we write something like this:</p>\n\n<pre><code>if(/* some condition */)\n    dummy1();\nelse\n    dummy2();\n</code></pre>\n\n<p>The call chain depends on a run time condition. If it is true, then the call chain looks like:</p>\n\n<pre><code>dummy1 --&gt; fun()\n</code></pre>\n\n<p>If the condition is false:</p>\n\n<pre><code>dummy2 --&gt; fun()\n</code></pre>\n\n<p>The outer scope of fun in both cases is the caller <em>plus the caller of the caller and so on</em>.</p>\n\n<p>Just to mention that C language does not allow nested functions nor dynamic scoping.</p>\n",
                    "is_accepted": true,
                    "score": 228
                },
                {
                    "body": "<p>Lets try the shortest possible definition:</p>\n\n<p><strong>Lexical Scoping</strong> (aka <strong>Closure</strong>) defines how variable names are resolved in nested functions: <strong>inner functions contain the scope of parent functions even if the parent function has returned</strong>.</p>\n\n<p>That's all there is to it! To help myself understand what this means, I wrote an in depth blog post about <strong>function scope and lexical scoping</strong> in JavaScript which can be found <a href=\"http://pierrespring.com/2010/05/11/function-scope-and-lexical-scoping/\">here</a>. Maybe this could serve someone else too.</p>\n",
                    "is_accepted": false,
                    "score": 63
                },
                {
                    "body": "<p>Lexical scoping: Variables declared outside of a function are global variables and are visible everywhere in a JavaScript program. Variables declared inside a function have function scope and are visible only to code that appears inside that function.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>var scope = \"I am global\";\nfunction whatismyscope(){\n   var scope = \"I am just a local\";\n   function func() {return scope;}\n   return func;\n}\n\nwhatismyscope()()\n</code></pre>\n\n<p>The above code will return \"I am just a local\". It will not return \"I am a global\". Because the function func() counts where is was originally defined which is under the scope of function whatismyscope.</p>\n\n<p>It will not bother from whatever it is being called(the global scope/from within another function even), that's why global scope value I am global will not be printed.</p>\n\n<p>This is called laxical scoping where \"<em>functions are executed using the scope chain that was in effect when they were defined</em>\" - according to JavaScript Definition Guide.</p>\n\n<p>Lexical scope is a very very powerful concept. </p>\n\n<p>Hope this helps..:)</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I love the fully featured, language-agnostic answers from folks like @Arak. Since this question was tagged JavaScript though, I'd like to chip in some uses cases and notes very specific to this language.</p>\n\n<p>Particularly, there's an example I think we deal with a lot JS, and that's making a decision about how to scope callbacks. This applies to promises, event handlers, and more.</p>\n\n<h2><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20&amp;%20closures/ch2.md#chapter-2-lexical-scope\" rel=\"nofollow\">Lexical</a></h2>\n\n<p>Here is what you might term <code>Lexical Scoping</code> of callbacks in JavaScript:</p>\n\n<pre><code>var downloadManager = {\n  initialize: function() {\n    var _this = this; // Set up `_this` for lexical access\n    $('.downloadLink').on('click', function () {\n      _this.startDownload();\n    });\n  },\n  startDownload: function(){\n    this.thinking = true;\n    // request the file from the server and bind more callbacks for when it returns success or failure\n  }\n  //...\n};\n</code></pre>\n\n<h2>Bound</h2>\n\n<p>Another way to scope is to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" rel=\"nofollow\"><code>Function.prototype.bind</code></a>:</p>\n\n<pre><code>var downloadManager = {\n  initialize: function() {\n    $('.downloadLink').on('click', function () {\n      this.startDownload();\n    }.bind(this)); // create a function object bound to `this`\n  }\n//...\n</code></pre>\n\n<p>These methods are, as far as I know, behaviorally equivalent.</p>\n\n<p>In javascript our choices for scoping are:</p>\n\n<ul>\n<li>as-is (no scope adjustment)</li>\n<li>lexical <code>var _this = this</code></li>\n<li>bound <code>callback.bind(this)</code></li>\n</ul>\n\n<p>It's worth noting, I think, that JavaScript <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/scope%20%26%20closures/apA.md#appendix-a-dynamic-scope\" rel=\"nofollow\">doesn't really have dynamic scoping</a>. <code>.bind</code> adjusts the <code>this</code> keyword, and that's close, but not technically the same.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Lexical scope means that a function looks up variables in the context where it was defined, and not in the scope immediately around it. </p>\n\n<p>Look at how lexical scope works in Lisp if you want more detail. The selected answer by Kyle Cronin in <a href=\"http://stackoverflow.com/questions/463463/dynamic-and-lexical-variables-in-common-lisp\">Dynamic and Lexical variables in Common Lisp</a> is a lot clearer than the answers here. </p>\n\n<p>Coincidentally I only learned about this in a Lisp class, and it happens to apply in JS as well.</p>\n\n<p>I ran this code in chrome's console.</p>\n\n<pre><code>// javascript               equivalent Lisp\nvar x = 5;                //(setf x 5)\nconsole.debug(x);         //(print x)\nfunction print_x(){       //(defun print-x () \n    console.debug(x);     //    (print x)\n}                         //)\n(function(){              //(let  \n    var x = 10;           //    ((x 10))\n    console.debug(x);     //    (print x)\n    print_x();            //    (print-x)\n})();                     //)\n</code></pre>\n\n<p>output:</p>\n\n<pre><code>5\n10\n5 \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There is an important part of the conversation surrounding Lexical and Dynamic Scoping that is missing: a plain explanation of the <em>lifetime</em> of the scoped variable - or <em>when</em> the variable can be accessed. </p>\n\n<p>Dynamic scoping only very loosely corresponds to \"global\" scoping in the way that we traditionally think about it (the reason I bring up the comparison between the two is that it has already been <a href=\"http://stackoverflow.com/questions/1047454/what-is-lexical-scope/1047479#1047479\">mentioned</a> - and I don't particularly like the <a href=\"http://c2.com/cgi/wiki?DynamicScoping\" rel=\"nofollow\">linked</a> article's explanation); it is probably best we don't make the comparison between global and dynamic - though supposedly, according to the linked article, \"...[it] is useful as a substitute for globally scoped variables.\"</p>\n\n<p>So, in plain English, what's the important distinction between the two scoping mechanisms?</p>\n\n<p>Lexical scoping has been defined very well throughout the answers above: lexically scoped variables are available - or, accessible - at the local level of the function in which it was defined.</p>\n\n<p>However - as it is not the focus of the OP - dynamic scoping has not received a great deal of attention and the attention the attention it has received means it probably needs a bit more (that's not a criticism of other answers, but rather a \"oh, that answer made we wish there was a bit more\"). So, here's a little bit more:</p>\n\n<p>Dynamic scoping means that a variable is accessible to the larger program during the lifetime of the function call - or, while the function is executing. Really, Wikipedia actually does a nice job with the <a href=\"http://en.wikipedia.org/wiki/Scope_%28computer_science%29#Lexical_scoping_vs._dynamic_scoping\" rel=\"nofollow\">explanation of the difference</a> between the two. So as not to obfuscate it, here is the text that describes dynamic scoping:</p>\n\n<blockquote>\n  <p>...[I]n dynamic scoping (or dynamic scope), if a variable name's scope is a\n  certain function, then its scope is the time-period during which the\n  function is executing: while the function is running, the variable\n  name exists, and is bound to its variable, but after the function\n  returns, the variable name does not exist.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want a brief intro to lexical scope</p>\n",
            "last_activity_date": 1424611357,
            "question_id": 1047454,
            "score": 215,
            "tags": [
                "javascript",
                "lexical-scope"
            ],
            "title": "What is lexical scope?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<pre><code>$(document).keydown(function(e){\n    if (e.keyCode == 37) { \n       alert( \"left pressed\" );\n       return false;\n    }\n});\n</code></pre>\n\n<p>Character codes:</p>\n\n<blockquote>\n  <p>37 - left</p>\n  \n  <p>38 - up</p>\n  \n  <p>39 - right</p>\n  \n  <p>40 - down</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 415
                },
                {
                    "body": "<p>You can use the keyCode of the arrow keys (37, 38, 39 and 40 for left, up, right and down):</p>\n\n<pre><code>$('.selector').keydown(function (e) {\n  var keyCode = e.keyCode || e.which,\n      arrow = {left: 37, up: 38, right: 39, down: 40 };\n\n  switch (keyCode) {\n    case arrow.left:\n      //..\n    break;\n    case arrow.up:\n      //..\n    break;\n    case arrow.right:\n      //..\n    break;\n    case arrow.down:\n      //..\n    break;\n  }\n});\n</code></pre>\n\n<p>Check the above example <a href=\"http://jsbin.com/opibu\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 89
                },
                {
                    "body": "<p>Are you sure jQuery.HotKeys doesn't support the arrow keys? I've messed around with their demo before and observed left, right, up, and down working when I tested it in IE7, Firefox 3.5.2, and Google Chrome 2.0.172...</p>\n\n<p><strong>EDIT</strong>: It appears jquery.hotkeys has been relocated to Github: <a href=\"https://github.com/jeresig/jquery.hotkeys\" rel=\"nofollow\">https://github.com/jeresig/jquery.hotkeys</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>This is a bit late, but HotKeys has a very major bug which causes events to get executed multiple times if you attach more than one hotkey to an element.  Just use plain jQuery.</p>\n\n<pre><code>$(element).keydown(function(ev) {\n    if(ev.which == $.ui.keyCode.DOWN) {\n        // your code\n        ev.preventDefault();\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Instead of using <code>return false;</code> as in the examples above, you can use <code>e.preventDefault();</code> which does the same but is easier to understand and read.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here's the most clean solution: </p>\n\n<pre><code>$(document).keydown(function(e) {\n    switch(e.which) {\n        case 37: // left\n        break;\n\n        case 38: // up\n        break;\n\n        case 39: // right\n        break;\n\n        case 40: // down\n        break;\n\n        default: return; // exit this handler for other keys\n    }\n    e.preventDefault(); // prevent the default action (scroll / move caret)\n});\n</code></pre>\n\n<p>Put your custom code for the arrow keys between the corresponding <code>case</code> and <code>break</code> lines. </p>\n\n<p><br/></p>\n\n<p>Other answers use <code>e.keyCode</code>, but note that this is not supported in all browsers. <code>e.which</code> is normalized by jQuery, so it works everywhere. Also, don't end with <code>return false</code> because it prevents any other handlers from being fired. </p>\n\n<p>For a pure javascript approach, replace the first two lines with:</p>\n\n<pre><code>document.onkeydown = function(e) {\n    e = e || window.event;\n    switch(e.which || e.keyCode) {\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 227
                },
                {
                    "body": "<p>I've simply combined the best bits from the other answers:</p>\n\n<pre><code>$(document).keydown(function(e){\n    switch(e.which) {\n        case $.ui.keyCode.LEFT:\n        // your code here\n        break;\n\n        case $.ui.keyCode.UP:\n        // your code here\n        break;\n\n        case $.ui.keyCode.RIGHT:\n        // your code here\n        break;\n\n        case $.ui.keyCode.DOWN:\n        // your code here\n        break;\n\n        default: return; // allow other keys to be handled\n    }\n\n    // prevent default action (eg. page moving up/down)\n    // but consider accessibility (eg. user may want to use keys to choose a radio button)\n    e.preventDefault();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>You can use KeyboardJS. I wrote the library for tasks just like this.</p>\n\n<pre><code>KeyboardJS.on('up', function() { console.log('up'); });\nKeyboardJS.on('down', function() { console.log('down'); });\nKeyboardJS.on('left', function() { console.log('right'); });\nKeyboardJS.on('right', function() { console.log('left'); });\n</code></pre>\n\n<p>Checkout the library here => <a href=\"http://robertwhurst.github.com/KeyboardJS/\">http://robertwhurst.github.com/KeyboardJS/</a></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>A terse solution using plain Javascript (thanks to Sygmoral for suggested improvements):</p>\n\n<pre><code>document.onkeydown = function(e) {\n    switch (e.keyCode) {\n        case 37:\n            alert('left');\n            break;\n        case 39:\n            alert('right');\n            break;\n    }\n};\n</code></pre>\n\n<p>Also see <a href=\"http://stackoverflow.com/a/17929007/1397061\">http://stackoverflow.com/a/17929007/1397061</a>.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can use jQuery bind:</p>\n\n<pre><code>$(window).bind('keydown', function(e){\n\n    if (e.keyCode==37) {\n        console.log ('left');\n    } else if (e.keyCode==38) {\n        console.log ('up');\n    } else if (e.keyCode==39) {\n        console.log ('right');\n    } else if (e.keyCode==40) {\n        console.log ('down');\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>With coffee &amp; Jquery</p>\n\n<pre><code>  $(document).on 'keydown', (e) -&gt;\n    switch e.which\n      when 37 then console.log('left key')\n      when 38 then console.log('up key')\n      when 39 then console.log('right key')\n      when 40 then console.log('down key')\n    e.preventDefault()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can check wether an <code>arrow key</code> is pressed by:</p>\n\n<pre><code>$(document).keydown(function(e){\n    if (e.keyCode &gt; 36 &amp;&amp; e.keyCode &lt; 41) { \n       alert( \"arrowkey pressed\" );\n       return false;\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How do I go about binding a function to left and right arrow keys in Javascript and/or jQuery? I looked at the js-hotkey plugin for jQuery (wraps the built-in bind function to add an argument to recognize specific keys), but it doesn't seem to support arrow keys.</p>\n",
            "last_activity_date": 1424807769,
            "question_id": 1402698,
            "score": 237,
            "tags": [
                "javascript",
                "jquery",
                "keyboard"
            ],
            "title": "Binding arrow keys in JS/jQuery"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Same here people, this works perfect btw in Chrome (stable, dev and canary) just not in FF and Safari.  It also works perfect on my iPhone and iPad (Safari!).  This might be due to the relative newness of this feature (i.e. it is a bug).  I spend almost a week on this now and I just cannot get it to work on those browsers</p>\n\n<p>Here's what I found:</p>\n\n<p>The first time you call getCurrentPosition it works perfect.  Any subsequent call never returns, i.e. it does not fire the successCallback or the errorCallback functions.  I added a few position options to my call to prove my point:</p>\n\n<pre><code> navigator.geolocation.getCurrentPosition(successCallback, errorCallback,  {timeout: 10000});\n</code></pre>\n\n<p>and it times out every time (after the first successful call).  I thought I could fix it with maximumAge, but that doesn't seem to be working as it is suppose to work either:</p>\n\n<pre><code>navigator.geolocation.getCurrentPosition(successCallback, errorCallback,  {maximumAge:60000, timeout: 2000});\n</code></pre>\n\n<p>this should prevent actually calling the getCurrentPosition function if you call it within 60 seconds, but it ignores this (however, this could be due because I actually refresh my page to trigger the second call, not sure if this is persistent accross calls)</p>\n\n<p>btw, even <a href=\"http://code.google.com/apis/maps/documentation/javascript/examples/map-geolocation.html\">google's examples</a> fail on these browsers which leads me to believe that this are indeed browser bugs, try it, load it twice in Safari and it won't work the second time.</p>\n\n<p>If anybody finds a solution for this, PLEASE let me know :-)</p>\n\n<p>Cheers.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I have been having <strong>exactly</strong> the same problem, and finding almost no information online about it. Nothing at all in the books. Finally I found this sober query on stackoverflow and (ha!) it was the final impetus I needed to set up an account here.</p>\n\n<p>And I have a partial answer, but alas not a complete one.</p>\n\n<p>First of all, realise that the <strong>default timeout</strong> for getCurrentPosition is <strong>infinite</strong>(!). That means that your error handler will <strong>never be called</strong> if getCurrentPosition hangs somewhere on the back end.</p>\n\n<p>To ensure that you get a timeout, add the optional third parameter to your call to getCurrentPosition, for example, if you want the user to wait no more than 10 seconds before giving them a clue what is happening, use:</p>\n\n<pre><code>navigator.geolocation.getCurrentPosition(successCallback,errorCallback,{timeout:10000});\n</code></pre>\n\n<p>Secondly, I have experienced quite different reliability in different contexts. Here at home, I get a callback within a second or two, although the accuracy is poor.</p>\n\n<p>At work however, I experience quite bizarre variations in behavior: Geolocation works on some computers all the time (IE excepted, of course), others only work in chrome and safari but not firefox (gecko issue?), others work once, then subsequently fail - and the pattern changes from hour to hour, from day to day. Sometimes you have a 'lucky' computer, sometimes not. Perhaps slaughtering goats at full moon would help?</p>\n\n<p>I have not been able to fathom this, but I suspect that <strong>the back end infrastructure is more uneven than advertised</strong> in the various gung-ho books and websites that are pushing this feature. I really wish that they would be a bit more straight about how flakey this feature is, and <strong>how important that timeout setting is, if you want your error handler to work properly</strong>.</p>\n\n<p>I have been trying to teach this stuff to students today, and had the embarassing situation where my own computer (on the projector and several large screens) was failing silently, whereas about 80% of the students were getting a result almost instantly (using the exact same wireless network). It's very difficult to resolve these issues when my students are also making typos and other gaffes, and when my own pc is also failing.</p>\n\n<p>Anyway, I hope this helps some of you guys. Thanks for the sanity check!</p>\n",
                    "is_accepted": false,
                    "score": 154
                },
                {
                    "body": "<p>You don't get an error message because it has no timeout by default (At least i think). I have had the same problem with firefox only for me firefox always gives an timeout. You can set a timeout yourself like this.</p>\n\n<p>I have set the maximum age to Infinity to make sure that is not problem. My function works great in chrome but i get a timeout everytime in firefox.</p>\n\n<pre><code>    navigator.geolocation.getCurrentPosition(\n        function(position) {\n            //do succes handling\n        },\n        function errorCallback(error) {\n            //do error handling\n        },\n        {\n            maximumAge:Infinity,\n            timeout:5000\n        }\n    );\n</code></pre>\n\n<p>I recommend to watch your errors carefully. Be expected for everything. Have a backup plan for everything. I use some default values or values from my database myself in case both google geolocations and navigator geolocations fails.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I have been having similar issues, and have been looking into the possibility that browsers have limits on how often getCurrentPosition can be called.  It seems I can often get a location, but if i refresh the page right away it will time out.  If I wait for a bit, I can usually get a location again.  This usually happens with FF.  In Chrome and Safari, I have not yet noticed getCurrentPosition timing out.  Just a thought...</p>\n\n<p>Although I cannot find any documentation to support this, it was a conclusion I came to after much testing.  Perhaps someone else has has some info about that?</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is the hacky way that I am getting around this, at least it works in all current browsers (on Windows, I don't own a Mac):</p>\n\n<pre><code>if (navigator.geolocation) {\n    var location_timeout = setTimeout(\"geolocFail()\", 10000);\n\n    navigator.geolocation.getCurrentPosition(function(position) {\n        clearTimeout(location_timeout);\n\n        var lat = position.coords.latitude;\n        var lng = position.coords.longitude;\n\n        geocodeLatLng(lat, lng);\n    }, function(error) {\n        clearTimeout(location_timeout);\n        geolocFail();\n    });\n} else {\n    // Fallback for no geolocation\n    geolocFail();\n}\n</code></pre>\n\n<p>This will also work if someone clicks the close or chooses no or chooses the Never Share option on Firefox.</p>\n\n<p>Clunky, but it works.</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>here is my solution thanks to a closure :</p>\n\n<pre><code>  function geoloc(success, fail){\n    var is_echo = false;\n    if(navigator &amp;&amp; navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        function(pos) {\n          if (is_echo){ return; }\n          is_echo = true;\n          success(pos.coords.latitude,pos.coords.longitude);\n        }, \n        function() {\n          if (is_echo){ return; }\n          is_echo = true;\n          fail();\n        }\n      );\n    } else {\n      fail();\n    }\n  }\n\n  function success(lat, lng){\n    alert(lat + \" , \" + lng);\n  }\n  function fail(){\n    alert(\"failed\");\n  }\n\n  geoloc(success, fail);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This works for me every time:</p>\n\n<pre><code>navigator.geolocation.getCurrentPosition(getCoor, errorCoor, {maximumAge:60000, timeout:5000, enableHighAccuracy:true});\n</code></pre>\n\n<p>Though it isn't very accurate. The funny thing is that on the same device if I run this it puts me off about 100 meters (every time), but if I go to google's maps it finds my location exactly. So although I think the enableHighAccuracy: true helps it to work consistently, it doesn't seem to make it any more accurate...</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>So I was running into the same thing. I tried the timeout solution which worked but not reliably. I found that if you just call it twice the location is refreshed properly</p>\n\n<pre><code>function getLocation(callback)\n{   \n    if(navigator.geolocation)\n    {\n        navigator.geolocation.getCurrentPosition(function(position)\n        {\n            navigator.geolocation.getCurrentPosition(callback, function(){},{maximumAge:0, timeout:10000});\n        },function(){}, {maximumAge:0, timeout:10000});\n    }\n    return true;\n}\n</code></pre>\n\n<p>this of course is a little slower but I have not had it give me the wrong position once. I have had it hit the timeout a few times and not return anything but other then that it works great. I know this is still a little hacky and I am looking forward to someone finding the real solution.</p>\n\n<p>Or if you want to make sure it is going to keep trying until you want to give up you could try something like this.</p>\n\n<pre><code>//example\n$(document).ready(function(){\n    getLocation(function(position){\n        //do something cool with position\n        console.log(position);\n    });\n});\n\n\nvar GPSTimeout = 10; //init global var NOTE: I noticed that 10 gives me the quickest result but play around with this number to your own liking\n\n\n//function to be called where you want the location with the callback(position)\nfunction getLocation(callback)\n{   \n    if(navigator.geolocation)\n    {\n        var clickedTime = (new Date()).getTime(); //get the current time\n        GPSTimeout = 10; //reset the timeout just in case you call it more then once\n        ensurePosition(callback, clickedTime); //call recursive function to get position\n    }\n    return true;\n}\n\n//recursive position function\nfunction ensurePosition(callback, timestamp)\n{\n    if(GPSTimeout &lt; 6000)//set at what point you want to just give up\n    {\n        //call the geolocation function\n        navigator.geolocation.getCurrentPosition(\n            function(position) //on success\n        {\n                //if the timestamp that is returned minus the time that was set when called is greater then 0 the position is up to date\n            if(position.timestamp - timestamp &gt;= 0)\n                {\n                    GPSTimeout = 10; //reset timeout just in case\n                    callback(position); //call the callback function you created\n                }\n                else //the gps that was returned is not current and needs to be refreshed\n                {\n                    GPSTimeout += GPSTimeout; //increase the timeout by itself n*2\n                    ensurePosition(callback, timestamp); //call itself to refresh\n                }\n            },\n            function() //error: gps failed so we will try again\n            {\n                GPSTimeout += GPSTimeout; //increase the timeout by itself n*2\n                ensurePosition(callback, timestamp);//call itself to try again\n            },\n            {maximumAge:0, timeout:GPSTimeout}\n        )\n    }       \n}\n</code></pre>\n\n<p>I probably have some typeos and some spelling errors in here but I hope you get the idea. Let me know if anyone has questions or if someone finds something better.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I noticed this problem recently myself, and I'm not sure how it comes about but it would appear sometimes firefox gets stuck on something loaded in cache. After clearing cache and restarting firefox it appears to function again.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I finally found a working version for firefox, chrome &amp; default navigator in android (4.2 tested only):</p>\n\n<pre><code>function getGeoLocation() {\n        var options = null;\n        if (navigator.geolocation) {\n            if (browserChrome) //set this var looking for Chrome un user-agent header\n                options={enableHighAccuracy: false, maximumAge: 15000, timeout: 30000};\n            else\n                options={maximumAge:Infinity, timeout:0};\n            navigator.geolocation.getCurrentPosition(getGeoLocationCallback,\n                    getGeoLocationErrorCallback,\n                   options);\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><a href=\"https://github.com/gwilson/getAccurateCurrentPosition\" rel=\"nofollow\">This library</a> adds a desiredAccuracy and maxWait option to geolocation calls, which means it will keep trying to get a position until the accuracy is within a specified range. </p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>So I have a pretty simple bit of JS using the navigator.geolocation.getCurrentPosition jammy.</p>\n\n<pre><code>$(document).ready(function(){\n  $(\"#business-locate, #people-locate\").click(function() {\n    navigator.geolocation.getCurrentPosition(foundLocation, noLocation);\n  });\n\n  navigator.geolocation.getCurrentPosition(foundLocation, noLocation);\n\n  function foundLocation(position) {\n    var lat = position.coords.latitude;\n    var lon = position.coords.longitude;\n    var userLocation = lat + ', ' + lon;\n    $(\"#business-current-location, #people-current-location\").remove();\n    $(\"#Near-Me\")\n      .watermark(\"Current Location\")\n      .after(\"&lt;input type='hidden' name='business-current-location' id='business-current-location' value='\"+userLocation+\"' /&gt;\");\n    $(\"#people-Near-Me\")\n      .watermark(\"Current Location\")\n      .after(\"&lt;input type='hidden' name='people-current-location' id='people-current-location' value='\"+userLocation+\"' /&gt;\");\n  }\n  function noLocation() {\n    $(\"#Near-Me\").watermark(\"Could not find location\");\n    $(\"#people-Near-Me\").watermark(\"Could not find location\");\n  }\n})//end DocReady\n</code></pre>\n\n<p>Basically what's happening here is we get the current position, if it's obtained, two \"watermarks\" are placed in two fields that say \"Current Position\" and two hidden fields are created with the lat-long data as their value (they're removed in the beginning so they don't get duplicated every time). There are also two buttons that have a click function tied to them that do the same thing.\nUnfortunately, every third time or so, it works.\nWhat's the problem here???</p>\n",
            "last_activity_date": 1415870067,
            "question_id": 3397585,
            "score": 92,
            "tags": [
                "javascript",
                "jquery",
                "geolocation"
            ],
            "title": "navigator.geolocation.getCurrentPosition sometimes works sometimes doesn&#39;t"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>You're looking for the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/IndexOf\"><code>indexOf</code> method</a><br>\nFor example:</p>\n\n<pre><code>var index = array.indexOf(item);\narray.splice(index, 1);\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/IndexOf#Compatibility\">Note that you'll need to add it for IE.</a></p>\n",
                    "is_accepted": false,
                    "score": 406
                },
                {
                    "body": "<p><code>indexOf</code> is an option, but it's implementation is basically searching the entire array for the value, so execution time grows with array size. (so it is in every browser I guess, I only checked Firefox).</p>\n\n<p>I haven't got an IE6 around to check, but I'd call it a safe bet that you can check at least a million array items per second this way on almost any client machine. If [array size]*[searches per second] may grow bigger than a million you should consider a different implementation.</p>\n\n<p>Basically you can use an object to make an index for your array, like so:</p>\n\n<pre><code>var index={'three':0, 'seven':1, 'eleven':2};\n</code></pre>\n\n<p>Any sane JavaScript environment will create a searchable index for such objects so that you can quickly translate a key into a value, no matter how many properties the object has.</p>\n\n<p>This is just the basic method, depending on your need you may combine several objects and/or arrays to make the same data quickly searchable for different properties. If you specify your exact needs I can suggest a more specific data structure.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>This can be a global function  or a method of a custom object, if you aren't allowed to add to native prototypes. It removes all of the items from the array that match any of the arguments.</p>\n\n<pre><code>Array.prototype.remove = function() {\n    var what, a = arguments, L = a.length, ax;\n    while (L &amp;&amp; this.length) {\n        what = a[--L];\n        while ((ax = this.indexOf(what)) !== -1) {\n            this.splice(ax, 1);\n        }\n    }\n    return this;\n};\n\nvar ary = ['three', 'seven', 'eleven'];\n\nary.remove('seven');\n\n/*  returned value: (Array)\nthree,eleven\n*/\n</code></pre>\n\n<p>To make it a global-</p>\n\n<pre><code>function removeA(arr) {\n    var what, a = arguments, L = a.length, ax;\n    while (L &gt; 1 &amp;&amp; arr.length) {\n        what = a[--L];\n        while ((ax= arr.indexOf(what)) !== -1) {\n            arr.splice(ax, 1);\n        }\n    }\n    return arr;\n}\nvar ary = ['three', 'seven', 'eleven'];\nremoveA(ary, 'seven');\n\n\n/*  returned value: (Array)\nthree,eleven\n*/\n</code></pre>\n\n<p>And to take care of IE8 and below-</p>\n\n<pre><code>if(!Array.prototype.indexOf) {\n    Array.prototype.indexOf = function(what, i) {\n        i = i || 0;\n        var L = this.length;\n        while (i &lt; L) {\n            if(this[i] === what) return i;\n            ++i;\n        }\n        return -1;\n    };\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 188
                },
                {
                    "body": "<p>Check out this way:</p>\n\n<pre><code>for(var i in ary){\n    if(ary[i]=='seven'){\n        ary.splice(i,1);\n        break;\n        }\n}\n</code></pre>\n\n<p>and in a function:</p>\n\n<pre><code>function removeItem(array, item){\n    for(var i in array){\n        if(array[i]==item){\n            array.splice(i,1);\n            break;\n            }\n    }\n}\n\nremoveItem(ary, 'seven');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<pre><code>var index = array.indexOf('item');\n\nif(index!=-1){\n\n   array.splice(index, 1);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<pre><code>var remove = function(array, value) {\n    var index = null;\n\n    while ((index = array.indexOf(value)) !== -1)\n        array.splice(index, 1);\n\n    return array;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can use <a href=\"http://underscorejs.org/#first\">underscore.js</a>. It really makes things simple.</p>\n\n<p>In your case the code that you will have to write is:</p>\n\n<pre><code>_.without(['three','seven','eleven'], 'seven');\n</code></pre>\n\n<p>and the result will be ['three','eleven'].</p>\n\n<p>It reduces the code that you write.</p>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>I tried using the function method from jbaron above but found that I needed to keep the original array intact for use later, and creating a new array like this:</p>\n\n<pre><code>var newArray = referenceArray;\n</code></pre>\n\n<p>apparently creates by reference instead of value because when I removed an element from newArray the referenceArray also had it removed.  So I decided to create a new array each time like this:</p>\n\n<pre><code>function newArrRemoveItem(array, item, newArray){\n    for(var i = 0; i &lt; array.length; i++) {\n        if(array[i]!=item){\n            newArray.push(array[i]);\n        }\n    }\n}\n</code></pre>\n\n<p>Then I use it like this in another function:</p>\n\n<pre><code>var vesselID = record.get('VesselID');\nvar otherVessels = new Array();\nnewArrRemoveItem(vesselArr,vesselID,otherVessels);\n</code></pre>\n\n<p>Now the vesselArr remains intact while each time I execute the above code the otherVessels array includes all but the latest vesselID element.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a version that uses jQuery's <a href=\"http://api.jquery.com/jQuery.inArray/\">inArray function</a>:</p>\n\n<pre><code>var index = $.inArray(item, array);\narray.splice(index, 1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<pre><code>Array.prototype.remove=function(v){\n    delete this[this.indexOf(v)]\n};\n</code></pre>\n\n<p>then , if : you have </p>\n\n<pre><code>var myarray=[\"3\",\"24\",\"55\",\"2\"];\nmyarray.remove(\"55\");\n</code></pre>\n\n<p>Result will be : </p>\n\n<blockquote>\n  <p>[\"3\",\"24\",\"2\"];</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>CoffeeScript+jQuery variant:</p>\n\n<pre><code>arrayRemoveItemByValue = (arr,value) -&gt;\n  r=$.inArray(value, arr)\n  unless r==-1\n    arr.splice(r,1)\n  # return\n  arr\n\nconsole.log arrayRemoveItemByValue(['2','1','3'],'3')\n</code></pre>\n\n<p>it remove only one, not all.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>One-liner will do it,</p>\n\n<pre><code>var ary = ['three', 'seven', 'eleven'];\n\n// remove item 'seven' from array\nary.filter(function(e){return e!=='seven'})\n\n    ==&gt; [\"three\", \"eleven\"]\n\nIn ECMA6 (arrow function syntax):\nary.filter(e =&gt; e!=='seven')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Removing all matching elements from the array (rather than just the first as seems to be the most common answer here):</p>\n\n<pre><code>while ($.inArray(item, array) &gt; -1) {\n    array.splice( $.inArray(item, array), 1 );\n}\n</code></pre>\n\n<p>I used jQuery for the heavy lifting, but you get the idea if you want to go native.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>//This function allows remove even array from array\nvar removeFromArr = function(arr, elem) { \n    var i, len = arr.length, new_arr = [],\n    sort_fn = function (a, b) { return a - b; };\n    for (i = 0; i &lt; len; i += 1) {\n        if (typeof elem === 'object' &amp;&amp; typeof arr[i] === 'object') {\n            if (arr[i].toString() === elem.toString()) {\n                continue;\n            } else {                    \n                if (arr[i].sort(sort_fn).toString() === elem.sort(sort_fn).toString()) {\n                    continue;\n                }\n            }\n        }\n        if (arr[i] !== elem) {\n            new_arr.push(arr[i]);\n        }\n    }\n    return new_arr;\n}\n</code></pre>\n\n<p><strong>Example of using</strong></p>\n\n<pre><code>var arr = [1, '2', [1 , 1] , 'abc', 1, '1', 1];\nremoveFromArr(arr, 1);\n//[\"2\", [1, 1], \"abc\", \"1\"]\n\nvar arr = [[1, 2] , 2, 'a', [2, 1], [1, 1, 2]];\nremoveFromArr(arr, [1,2]);\n//[2, \"a\", [1, 1, 2]]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Another variation:</p>\n\n<pre><code>if (!Array.prototype.removeArr) {\n    Array.prototype.removeArr = function(arr) {\n        if(!Array.isArray(arr)) arr=[arr];//let's be nice to people who put a non-array value here.. that could be me!\n        var that = this;\n        if(arr.length){\n            var i=0;\n            while(i&lt;that.length){\n                if(arr.indexOf(that[i])&gt;-1){\n                    that.splice(i,1);\n                }else i++;\n            }\n        }\n        return that;\n    }\n}\n</code></pre>\n\n<p>It's indexOf() inside a loop again, but on the assumption that the array to remove is small relative to the array to be cleaned; every removal shortens the while loop.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Please do not use the variant with <code>delete</code> - it makes a hole in the array as it does not re-index the elements after the deleted item.</p>\n\n<pre><code>&gt; Array.prototype.remove=function(v){\n...     delete this[this.indexOf(v)]\n... };\n[Function]\n&gt; var myarray=[\"3\",\"24\",\"55\",\"2\"];\nundefined\n&gt; myarray.remove(\"55\");\nundefined\n&gt; myarray\n[ '3', '24', , '2' ]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What you're after is filter</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter</a></p>\n\n<p>This will allow you to do the following:</p>\n\n<pre><code>var ary = ['three', 'seven', 'eleven'];\nvar aryWithoutSeven = ary.filter(function(value) { return value != 'seven' });\nconsole.log(aryWithoutSeven); // returns ['three', 'eleven']\n</code></pre>\n\n<p>This was also noted in this thread somewhere else:  <a href=\"http://stackoverflow.com/a/20827100/293492\">http://stackoverflow.com/a/20827100/293492</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I used the most voted option and created a function that would clean one array of words using another array of unwanted words: </p>\n\n<pre><code>function cleanArrayOfSpecificTerms(array,unwantedTermsArray) {\n  $.each(unwantedTermsArray, function( index, value ) {\n    var index = array.indexOf(value);\n    if (index &gt; -1) {\n      array.splice(index, 1);        \n    }\n  });\n  return array;\n}\n</code></pre>\n\n<p>To use, do the following: </p>\n\n<pre><code>var notInclude = ['Not','No','First','Last','Prior','Next', 'dogs','cats'];\nvar splitTerms = [\"call\", \"log\", \"dogs\", \"cats\", \"topic\", \"change\", \"pricing\"];\n\ncleanArrayOfSpecificTerms(splitTerms,notInclude)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there a method to be able to remove an item from an JavaScript array like from this array:</p>\n\n<pre><code>var ary = ['three', 'seven', 'eleven'];\n</code></pre>\n\n<p>And I do an function like whereas:</p>\n\n<pre><code>removeItem('seven', ary);\n</code></pre>\n\n<p>I've looked into <code>splice()</code> but that only removes by the position number, where I need something to remove an item by its value.</p>\n",
            "last_activity_date": 1423584379,
            "question_id": 3954438,
            "score": 185,
            "tags": [
                "javascript",
                "arrays"
            ],
            "title": "Remove item from array by value"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>It's the <code>for...in statement</code> (<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/for...in\">MDN</a>, <a href=\"http://es5.github.io/#x12.6.4\">ECMAScript spec</a>).</p>\n\n<p>You can read it as \"<strong>FOR</strong> every property <strong>IN</strong> the <code>obj</code> object, assign each property to the <strong>PROPT</strong> variable in turn\".</p>\n",
                    "is_accepted": false,
                    "score": 139
                },
                {
                    "body": "<p>It's just a <code>for...in</code> loop. Check out <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Statements/for...in\">the documentation at Mozilla</a>.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>Your <code>for</code> loop is iterating over all of the properties of the object <code>obj</code>. <code>propt</code> is defined in the first line of your for loop. It is a string that is a name of a property of the <code>obj</code> object. In the first iteration of the loop, <code>propt</code> would be \"name\".</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Objects in JavaScript are collections of properties and can therefore be looped in a for each statement. </p>\n\n<p>You should think of <code>obj</code> as an key value collection.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>for (property in object) {\n  ...\n} \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Iterating over properties requires this additional <code>hasOwnProperty</code> check: </p>\n\n<pre><code>for (var property in object) {\n    if (object.hasOwnProperty(property)) {\n        // do stuff\n    }\n}\n</code></pre>\n\n<p>It's necessary because an object's prototype contains additional properties for the object which are technically part of the object. These additional properties are inherited from the base object class, but are still properties of <code>object</code>.</p>\n\n<p><code>hasOwnProperty</code> simply checks to see if this is a property specific to this class, and not one inherited from the base class.</p>\n",
                    "is_accepted": true,
                    "score": 490
                },
                {
                    "body": "<p>It's worth mentioning that as of JavaScript 1.8.5 you can use <code>Object.keys(obj)</code> to get an Array of properties defined on the object itself \n(ones that return true for <code>obj.hasOwnProperty(key)</code>).</p>\n\n<p>This is better (and readable) than using for-in loop.</p>\n\n<p>Its supported on these browsers: </p>\n\n<ul>\n<li>Firefox (Gecko): 4 (2.0)</li>\n<li>Chrome: 5</li>\n<li>Internet Explorer: 9</li>\n</ul>\n\n<p>See <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/keys\">the Mozilla Developer Network <strong>Object.keys()</strong>'s reference</a> for futher information.</p>\n",
                    "is_accepted": false,
                    "score": 124
                }
            ],
            "body": "<pre><code>var obj = {\n    name: \"Simon\",\n    age: \"20\",\n    clothing: {\n        style: \"simple\",\n        isDouche: false\n    }\n}\n\nfor(var propt in obj){\n    alert(propt + ': ' + obj[propt]);\n}\n</code></pre>\n\n<p>How does the variable <code>propt</code> represent the properties of the object? It's not a built-in method, or property. Then why does it come up with every property in the object?</p>\n\n<p>I hope I'm not asking stupid questions, I couldn't find any answers.</p>\n",
            "last_activity_date": 1421665178,
            "question_id": 8312459,
            "score": 350,
            "tags": [
                "javascript"
            ],
            "title": "Iterate through object properties"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Return <code>false</code> to prevent the keystroke from continuing.</p>\n",
                    "is_accepted": false,
                    "score": 57
                },
                {
                    "body": "<p>In addition to return false as <a href=\"#699074\">Jason Cohen mentioned</a>.  You may have to also preventDefault</p>\n\n<pre><code>e.preventDefault();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 154
                },
                {
                    "body": "<p>Is there any reason you have to hook and test for the enter key? </p>\n\n<p>Couldn't you simply add a      </p>\n\n<pre><code>&lt;input type=\"submit\" /&gt;\n</code></pre>\n\n<p>to your form and have it naturally be submitted when enter is pushed? You could even then hook the form's <code>onsubmit</code> action and call a validation function from there if you wanted...</p>\n\n<p>You could even use the <code>onsubmit</code> as a test to see if your form is being submitted, but it won't work if you call <code>form.submit()</code>.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>Don't know if it will help, but you can try simulating a submit button click, instead of directly submitting the form. I have the following code in production, and it works fine:</p>\n\n<pre><code>    $('.input').keypress(function(e) {\n        if(e.which == 13) {\n            jQuery(this).blur();\n            jQuery('#submit').focus().click();\n        }\n    });\n</code></pre>\n\n<p>Note: <strong>jQuery('#submit').focus()</strong> makes the button animate when enter is pressed.</p>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>Also to maintain accessibility, you should use this to determine your keycode:</p>\n\n<pre><code>c = e.which ? e.which : e.keyCode;\n\nif (c == 13) ...\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I use now </p>\n\n<pre><code>$(\"form\").submit(function(event)\n</code></pre>\n\n<p>At first I added an eventhandler to the submit button which produced an error for me.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can also simply add <code>onsubmit=\"return false\"</code> to the form code in the page to prevent the default behaviour.</p>\n\n<p>Then hook (<code>.bind</code> or <code>.live</code>) the form's <code>submit</code> event to any function with jQuery in the javascript file.</p>\n\n<p>Here's a sample code to help:</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;form id=\"search_form\" onsubmit=\"return false\"&gt;\n   &lt;input type=\"text\" id=\"search_field\"/&gt;\n   &lt;input type=\"button\" id=\"search_btn\" value=\"SEARCH\"/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><strong>Javascript + jQuery</strong></p>\n\n<pre><code>$(document).ready(function() {\n\n    $('#search_form').live(\"submit\", function() {\n        any_function()\n    });\n});\n</code></pre>\n\n<p>This is working as of 2011-04-13, with Firefox 4.0 and jQuery 1.4.3</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p><strong>//try this code below; \n //hope it can help;</strong></p>\n\n<pre><code>    var form =  document.formname;\n\nif($(form).length &gt; 0)\n{\n    $(form).keypress(function (e){\n        code = e.keyCode ? e.keyCode : e.which;\n          if(code.toString() == 13) \n          {\n             formsubmit();\n          }\n    })\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<pre><code>$('.input').keypress(function (e) {\n  if (e.which == 13) {\n    $('form#login').submit();\n    return false;    //&lt;---- Add this line\n  }\n});\n</code></pre>\n\n<p>NOTE: You accepted bendewey's answer, but it is incorrect with its description of e.preventDefault(). Check out this stackoverflow answer:\n<a href=\"http://stackoverflow.com/questions/1357118/event-preventdefault-vs-return-false\">event.preventDefault() vs. return false</a></p>\n\n<p>Essentially, \"return false\" is the same as calling <code>e.preventDefault</code> and <code>e.stopPropagation()</code>.</p>\n",
                    "is_accepted": false,
                    "score": 111
                },
                {
                    "body": "<p>Here's a way to do this as a JQuery plugin (in case you want to re-use the functionality):</p>\n\n<pre><code>$.fn.onEnterKey =\n    function( closure ) {\n        $(this).keypress(\n            function( event ) {\n                var code = event.keyCode ? event.keyCode : event.which;\n\n                if (code == 13) {\n                    closure();\n                    return false;\n                }\n            } );\n    }\n</code></pre>\n\n<p>Now if you want to decorate an  with this type of functionality it's as simple as this:</p>\n\n<pre><code>$('#your-input-id').onEnterKey(\n    function() {\n        // Do stuff here\n    } );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Just adding for easy implementation. You can simply make a form and then make the submit button hidden:</p>\n\n<p>For example:</p>\n\n<pre><code>&lt;form action=\"submit.php\" method=\"post\"&gt;\nName : &lt;input type=\"text\" name=\"test\"&gt;\n&lt;input type=\"submit\" style=\"display: none;\"&gt;\n&lt;/form&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is my code:</p>\n\n<pre><code>  $(\"#txtMessage\").on( \"keypress\", function(event) {\n    if (event.which == 13 &amp;&amp; !event.shiftKey) {\n        event.preventDefault();\n        $(\"#frSendMessage\").submit();\n    }\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a bog-standard login form - an email text field, a password field and a submit button on an AIR project that's using HTML/jQuery.  When I hit Enter on the form, the entire form's contents vanish, but the form isn't submitted.  Does anyone know if this is a Webkit issue (Adobe AIR uses Webkit for HTML), or if I've bunged things up?</p>\n\n<p>I tried: </p>\n\n<pre><code>$('.input').keypress(function (e) {\n  if (e.which == 13) {\n    $('form#login').submit();\n  }\n});\n</code></pre>\n\n<p>But that neither stopped the clearing behavior, or submitted the form.  There's no action associated with the form - could that be the issue?  Can I put a javascript function in the action?</p>\n",
            "last_activity_date": 1406542869,
            "question_id": 699065,
            "score": 233,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "webkit",
                "html-form"
            ],
            "title": "Submitting a form on &#39;Enter&#39; with jQuery?"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p><a href=\"http://docs.jquery.com/Attributes/val#val\">jQuery's documentation</a> states:</p>\n\n<blockquote>\n  <p>[jQuery.val] checks, or selects, all the radio buttons, checkboxes, and select options that match the set of values.</p>\n</blockquote>\n\n<p>This behavior is in jQuery versions 1.2 and above.</p>\n\n<p>You most likely want this:</p>\n\n<pre><code>$(\"._statusDDL\").val('2');\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 561
                },
                {
                    "body": "<p>Just try with </p>\n\n<pre><code>$(\"._statusDDL\").val(\"2\");\n</code></pre>\n\n<p>and not with </p>\n\n<pre><code>$(\"._statusDDL\").val(2);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>How are you loading the values into the drop down list or determining which value to select? If you are doing this using Ajax, then the reason you need the delay before the selection occurs could be because the values were not loaded in at the time that the line in question executed.  This would also explain why it worked when you put an alert statement on the line before setting the status since the alert action would give enough of a delay for the data to load.</p>\n\n<p>If you are using one of jQuery's Ajax methods, you can specify a callback function and then put <code>$(\"._statusDDL\").val(2);</code> into your callback function.</p>\n\n<p>This would be a more reliable way of handling the issue since you could be sure that the method executed when the data was ready, even if it took longer than 300&nbsp;ms.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just an FYI, you don't need to use CSS classes to accomplish this.</p>\n\n<p>You can write the following line of code to get the correct control name on the client:</p>\n\n<pre><code>$(\"#&lt;%= statusDDL.ClientID %&gt;\").val(\"2\");\n</code></pre>\n\n<p>ASP.NET will render the control ID correctly inside the jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Just a note - I've been using wildcard selectors in jQuery to grab items that are obfuscated by ASP.NET CLient IDs - this might help you too:</p>\n\n<pre><code>&lt;asp:DropDownList id=\"MyDropDown\" runat=\"server\" /&gt;\n\n$(\"[id* = 'MyDropDown']\").append(\"&lt;option value='-1'&gt;&amp;nbsp;&lt;/option&gt;\"); //etc\n</code></pre>\n\n<p>Note the id* wildcard- this will find your element even if the name is \"ctl00$ctl00$ContentPlaceHolder1$ContentPlaceHolder1$MyDropDown\"</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<blockquote>\n  <p>So I changed it so that now it\n  executes after a 300 miliseconds using\n  setTimeout. Seems to be working now.</p>\n</blockquote>\n\n<p>I have run into this many times when loading data from an Ajax call.  I too use .NET, and it takes time to get adjusted to the clientId when using the jQuery selector. To correct the problem that you're having and to avoid having to add a <code>setTimeout</code> property, you can simply put \"<code>async: false</code>\" in the Ajax call, and it will give the DOM enough time to have the objects back that you are adding to the select. A small sample below:</p>\n\n<pre><code>$.ajax({\n    type: \"POST\",\n    url: document.URL + '/PageList',\n    data: \"{}\",\n    async: false,\n    contentType: \"application/json; charset=utf-8\",\n    dataType: \"json\",\n    success: function (response) {\n        var pages = (typeof response.d) == 'string' ? eval('(' + response.d + ')') : response.d;\n\n        $('#locPage' + locId).find('option').remove();\n\n        $.each(pages, function () {\n            $('#locPage' + locId).append(\n                $('&lt;option&gt;&lt;/option&gt;').val(this.PageId).html(this.Name)\n            );\n        });\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>&lt;asp:DropDownList id=\"MyDropDown\" runat=\"server\" /&gt;\n</code></pre>\n\n<p>Use <code>$(\"select[name$='MyDropDown']\").val()</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use an extend function to get client ids, like so:</p>\n\n<pre><code>$.extend({\n    clientID: function(id) {\n        return $(\"[id$='\" + id + \"']\");\n    }\n});\n</code></pre>\n\n<p>Then you can call ASP.NET controls in jQuery like this:</p>\n\n<pre><code>$.clientID(\"_statusDDL\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Another option is to set the control param ClientID=\"Static\" in .net and then you can access the object in JQuery by the ID you set.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>After looking at some solutions, this worked for me.</p>\n\n<p>I have one drop-down list with some values and I want to select the same value from another drop-down list... So first I put in a variable the <code>selectIndex</code> of my first drop-down.</p>\n\n<pre><code>var indiceDatos = $('#myidddl')[0].selectedIndex;\n</code></pre>\n\n<p>Then, I select that index on my second drop-down list.</p>\n\n<pre><code>$('#myidddl2')[0].selectedIndex = indiceDatos;\n</code></pre>\n\n<p><strong>Note:</strong></p>\n\n<p>I guess this is the shortest, reliable, general and elegant solution.</p>\n\n<p>Because in my case, I'm using selected option's data attribute instead of value attribute.\nSo if you do not have unique value for each option, above method is the shortest and sweet!!</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>With hidden field you need to use like this:</p>\n\n<pre><code>$(\"._statusDDL\").val(2);\n$(\"._statusDDL\").change();\n</code></pre>\n\n<p>or</p>\n\n<pre><code>$(\"._statusDDL\").val(2).change();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>These solutions seem to assume that each item in your drop down lists has a <strong>val()</strong> value relating to their position in the drop down list.</p>\n\n<p>Things are a little more complicated if this isn't the case.</p>\n\n<p>To <strong>read</strong> the selected index of a drop down list, you would use this:</p>\n\n<pre><code>$(\"#dropDownList\").prop(\"selectedIndex\");\n</code></pre>\n\n<p>To <strong>set</strong> the selected index of a drop down list, you would use this:</p>\n\n<pre><code>$(\"#dropDownList\").prop(\"selectedIndex\", 1);\n</code></pre>\n\n<p>Note that the <strong>prop()</strong> feature requires JQuery v1.6 or later.</p>\n\n<p>Let's see how you would use these two functions.  </p>\n\n<p>Supposing you had a drop down list of month names.</p>\n\n<pre><code>&lt;select id=\"listOfMonths\"&gt;\n  &lt;option id=\"JAN\"&gt;January&lt;/option&gt;\n  &lt;option id=\"FEB\"&gt;February&lt;/option&gt;\n  &lt;option id=\"MAR\"&gt;March&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>You could add a \"Previous Month\" and \"Next Month\" button, which looks at the currently selected drop down list item, and changes it to the previous/next month:</p>\n\n<pre><code>&lt;button id=\"btnPrevMonth\" title=\"Prev\" onclick=\"btnPrevMonth_Click();return false;\" /&gt;\n&lt;button id=\"btnNextMonth\" title=\"Next\" onclick=\"btnNextMonth_Click();return false;\" /&gt;\n</code></pre>\n\n<p>And here's the JavaScript which these buttons would run:</p>\n\n<pre><code>function btnPrevMonth_Click() {\n    var selectedIndex = $(\"#listOfMonths\").prop(\"selectedIndex\");\n    if (selectedIndex &gt; 0) {\n        $(\"#listOfMonths\").prop(\"selectedIndex\", selectedIndex - 1);\n    }\n}\nfunction btnNextMonth_Click() {\n    //  Note:  the JQuery \"prop\" function requires JQuery v1.6 or later\n    var selectedIndex = $(\"#listOfMonths\").prop(\"selectedIndex\");\n    var itemsInDropDownList = $(\"#listOfMonths option\").length;\n\n    //  If we're not already selecting the last item in the drop down list, then increment the SelectedIndex\n    if (selectedIndex &lt; (itemsInDropDownList - 1)) {\n        $(\"#listOfMonths\").prop(\"selectedIndex\", selectedIndex + 1);\n    }\n}\n</code></pre>\n\n<p>The following site is also useful, for showing how to populate a drop down list with JSON data:</p>\n\n<p><a href=\"http://mikesknowledgebase.com/pages/Services/WebServices-Page8.htm\">http://mikesknowledgebase.com/pages/Services/WebServices-Page8.htm</a></p>\n\n<p>Phew !!</p>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>&lt;asp:DropDownList ID=\"DropUserType\" ClientIDMode=\"Static\" runat=\"server\"&gt;\n     &lt;asp:ListItem Value=\"1\" Text=\"aaa\"&gt;&lt;/asp:ListItem&gt;\n     &lt;asp:ListItem Value=\"2\" Text=\"bbb\"&gt;&lt;/asp:ListItem&gt;\n&lt;/asp:DropDownList&gt;\n</code></pre>\n\n<p><strong>ClientIDMode=\"Static\"</strong></p>\n\n<pre><code>$('#DropUserType').val('1');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I know this is a old question and the above solutions works fine except in some cases.</p>\n\n<p>Like  </p>\n\n<pre><code>&lt;select id=\"select_selector\"&gt;\n&lt;option value=\"1\"&gt;Item1&lt;/option&gt;\n&lt;option value=\"2\"&gt;Item2&lt;/option&gt;\n&lt;option value=\"3\"&gt;Item3&lt;/option&gt;\n&lt;option value=\"4\" selected=\"selected\"&gt;Item4&lt;/option&gt;\n&lt;option value=\"5\"&gt;Item5&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>So Item 4 will show as \"Selected\" in the browser and now you want to change the value as 3 and show \"Item3\" as selected instead of Item4.So as per the above solutions,if you use </p>\n\n<pre><code>jQuery(\"#select_selector\").val(3);\n</code></pre>\n\n<p>You will see that Item 3 as selected in browser.But when you process the data either in php or asp , you will find the selected value as \"4\".The reason is that , your html will look like this.</p>\n\n<pre><code>&lt;select id=\"select_selector\"&gt;\n&lt;option value=\"1\"&gt;Item1&lt;/option&gt;\n&lt;option value=\"2\"&gt;Item2&lt;/option&gt;\n&lt;option value=\"3\" selected=\"selected\"&gt;Item3&lt;/option&gt;\n&lt;option value=\"4\" selected=\"selected\"&gt;Item4&lt;/option&gt;\n&lt;option value=\"5\"&gt;Item5&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>and it gets the last value as \"4\" in sever side language.</p>\n\n<p>SO MY FINAL SOLUTION ON THIS REGARD</p>\n\n<pre><code>newselectedIndex = 3;\njQuery(\"#select_selector option:selected\").removeAttr(\"selected\");\njQuery(\"#select_selector option[value='\"+newselectedIndex +\"']\").attr('selected', 'selected');  \n</code></pre>\n\n<p><strong>EDIT</strong>: Add single quote around \"+newselectedIndex+\" so that the same functionality can be used for non-numerical values.</p>\n\n<p>So what I do is actually ,removed the selected attribute and then make the new one as selected.</p>\n\n<p>I would appreciate comments on this from senior programmers like @strager , @y0mbo , @ISIK and others </p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a drop-down list with known values.  What I'm trying to do is set the drop down list to a particular value that I know exists using jQuery.  Using regular JavaScript, I would do something like:</p>\n\n<pre><code>ddl = document.getElementById(\"ID of element goes here\");\nddl.value = 2; // 2 being the value I want to set it to.\n</code></pre>\n\n<p>However, I need to do this with jQuery, because I'm using a CSS class for my selector (stupid <a href=\"http://en.wikipedia.org/wiki/ASP.NET\">ASP.NET</a> client ids...).</p>\n\n<p>Here are a few things I've tried:</p>\n\n<pre><code>$(\"._statusDDL\").val(2); // Doesn't find 2 as a value.\n$(\"._statusDDL\").children(\"option\").val(2) // Also failed.\n</code></pre>\n\n<p>How can I do it with jQuery?</p>\n\n<p><strong>Update</strong></p>\n\n<p>So as it turns out, I had it right the first time with:</p>\n\n<pre><code>$(\"._statusDDL\").val(2);\n</code></pre>\n\n<p>When I put an alert just above it it works fine, but when I remove the alert and let it run at full speed, I get the error</p>\n\n<blockquote>\n  <p>Could not set the selected property. Invalid Index</p>\n</blockquote>\n\n<p>I'm not sure if it's a bug with jQuery or Internet Explorer 6 (I'm guessing Internet Explorer 6), but it's terribly annoying.</p>\n",
            "last_activity_date": 1424302899,
            "question_id": 499405,
            "score": 398,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Change the selected value of a drop-down list with jQuery"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>There are jQuery events like <strong>keyup</strong> and <strong>keypress</strong> which you can use with input HTML Elements.\nYou could additionally use the <strong>blur()</strong> event.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>// .blur is triggered when element loses focus</p>\n\n<pre><code>$('#target').blur(function() {\n  alert($(this).val());\n});\n</code></pre>\n\n<p>// To trigger manually use:</p>\n\n<pre><code>$('#target').blur();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want the event to be fired whenever something is changed within the element then you could use the <a href=\"http://api.jquery.com/keyup/\" rel=\"nofollow\">keyup</a> event.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>UPDATED for clarification and example</strong></p>\n\n<p>examples: <a href=\"http://jsfiddle.net/pxfunc/5kpeJ/\">http://jsfiddle.net/pxfunc/5kpeJ/</a></p>\n\n<p><strong>Method 1. <code>input</code> event</strong></p>\n\n<p>In modern browsers use the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/common-input-element-attributes.html#event-input-input\"><code>input</code></a> event.  This event will fire when the user is typing into a text field, pasting, undoing, basically anytime the value changed from one value to another.</p>\n\n<p>In jQuery do that like this</p>\n\n<pre><code>$('#someInput').bind('input', function() { \n    $(this).val() // get the current value of the input field.\n});\n</code></pre>\n\n<p>starting with jQuery 1.7, replace <code>bind</code> with <code>on</code>:</p>\n\n<pre><code>$('#someInput').on('input', function() { \n    $(this).val() // get the current value of the input field.\n});\n</code></pre>\n\n<p><strong>Method 2. <code>keyup</code> event</strong></p>\n\n<p>For older browsers use the <code>keyup</code> event (this will fire once a key on the keyboard has been released, this event can give a sort of false positive because when \"w\" is released the input value is changed and the <code>keyup</code> event fires, but also when the \"shift\" key is released the <code>keyup</code> event fires but no change has been made to the input.).  Also this method doesn't fire if the user right-clicks and pastes from the context menu:</p>\n\n<pre><code>$('#someInput').keyup(function() {\n    $(this).val() // get the current value of the input field.\n});\n</code></pre>\n\n<p><strong>Method 3. Timer (<code>setInterval</code> or <code>setTimeout</code>)</strong></p>\n\n<p>To get around the limitations of <code>keyup</code> you can set a timer to periodically check the value of the input to determine a change in value.  You can use <code>setInterval</code> or <code>setTimeout</code> to do this timer check.  See the marked answer on this SO question: <a href=\"http://stackoverflow.com/q/6139954/222714\">jQuery textbox change event</a> or see the fiddle for a working example using <code>focus</code> and <code>blur</code> events to start and stop the timer for a specific input field</p>\n",
                    "is_accepted": true,
                    "score": 186
                },
                {
                    "body": "<p>If you've got HTML5:</p>\n\n<ul>\n<li><code>oninput</code> (fires only when a change actually happens, but does so immediately)</li>\n</ul>\n\n<p>Otherwise you need to check for all these events which might indicate a change to the input element's value:</p>\n\n<ul>\n<li><code>onchange</code> </li>\n<li><code>onkeyup</code> (<strong>not</strong> <code>keydown</code> or <code>keypress</code> as the input's value won't have the new keystroke in it yet)</li>\n<li><code>onpaste</code> (when supported)</li>\n</ul>\n\n<p>and maybe:</p>\n\n<ul>\n<li><code>onmouseup</code> (I'm not sure about this one)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>This covers every change to an input using jQuery 1.7 and above:</p>\n\n<pre><code>$(\".inputElement\").on(\"input\", null, null, callbackFunction);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>With HTML5 and without using jQuery, you can using the <a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/input\"><code>input</code> event</a>:</p>\n\n<pre><code>var input = document.querySelector('input');\n\ninput.addEventListener('input', function()\n{\n    console.log('input changed to: ', input.value);\n});\n</code></pre>\n\n<p>This will fire each time the input's text changes.</p>\n\n<p>Supported in IE9+ and other browsers.</p>\n\n<p>Try it live in a <a href=\"http://jsfiddle.net/drewnoakes/eqemx218/\">jsFiddle here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>When using jquery <code>.change</code> on an <code>input</code> the event will only be fired when the input loses focus</p>\n\n<p>In my case, I need to make a call to the service (check if value is valid) as soon as the input value is changed. How could I accomplish this?</p>\n",
            "last_activity_date": 1416922208,
            "question_id": 6458840,
            "score": 97,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "On input change event?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>I don't believe this is possible - there is no ability to set the timezone on a Date object after it is created.</p>\n\n<p>And in a way this makes sense - conceptually (if perhaps not in implementation); per <a href=\"http://en.wikipedia.org/wiki/Unix_timestamp\">http://en.wikipedia.org/wiki/Unix_timestamp</a> (emphasis mine):</p>\n\n<blockquote>\n  <p>Unix time, or POSIX time, is a system for describing instants in time, defined as the number of seconds elapsed since midnight <strong>Coordinated Universal Time (UTC)</strong> of Thursday, January 1, 1970.</p>\n</blockquote>\n\n<p>Once you've constructed one it will represent a certain point in \"real\" time.  The time zone is only relevant when you want to convert that abstract time point into a human-readable string.</p>\n\n<p>Thus it makes sense you would only be able to change the actual time the Date represents in the constructor.  Sadly it seems that there is no way to pass in an explicit timezone - and the constructor you are calling (arguably correctly) translates your \"local\" time variables into GMT when it stores them canonically - so there is no way to use the <code>int, int, int</code> constructor for GMT times.</p>\n\n<p>On the plus side, it's trivial to just use the constructor that takes a String instead.  You don't even have to convert the numeric month into a String (on Firefox at least), so I was hoping a naive implementation would work.  However, after trying it out it works successfully in Firefox, Chrome, and Opera but fails in Konqueror (\"Invalid Date\") , Safari (\"Invalid Date\") and IE (\"NaN\").  I suppose you'd just have a lookup array to convert the month to a string, like so:</p>\n\n<pre><code>var months = [ '', 'January', 'February', ..., 'December'];\n\nfunction createGMTDate(xiYear, xiMonth, xiDate) {\n   return new Date(months[xiMonth] + ' ' + xiDate + ', ' + xiYear + ' 00:00:00 GMT');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>any mileage in </p>\n\n<pre><code>var d = new Date(xiYear, xiMonth, xiDate).toLocaleString();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>using .setUTCHours() it would be possible to actually set dates in UTC-time, which would allow you to use UTC-times throughout the system.</p>\n\n<p><strike>You cannot set it using UTC in the constructor though, unless you specify a date-string.</strike></p>\n\n<p>Using <code>new Date(Date.UTC(year, month, day, hour, minute, second))</code> you can create a Date-object from a specific UTC time.</p>\n",
                    "is_accepted": true,
                    "score": 201
                },
                {
                    "body": "<p>I believe you need the <strong>createDateAsUTC</strong> function (please compare with <strong>convertDateToUTC</strong>)</p>\n\n<pre><code>function createDateAsUTC(date) {\n    return new Date(Date.UTC(date.getFullYear(), date.getMonth(), date.getDate(), date.getHours(), date.getMinutes(), date.getSeconds()));\n    }\n\nfunction convertDateToUTC(date) { \n    return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds()); \n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>If you want to deal with the slightly different, but related, problem of creating a Javascript Date object from year, month, day, ..., <em>including timezone</em> \u2013 that is, if you want to parse a string into a Date \u2013 then you apparently have to do an infuriatingly complicated dance:</p>\n\n<pre><code>// parseISO8601String : string -&gt; Date\n// Parse an ISO-8601 date, including possible timezone,\n// into a Javascript Date object.\n//\n// Test strings: parseISO8601String(x).toISOString()\n// \"2013-01-31T12:34\"              -&gt; \"2013-01-31T12:34:00.000Z\"\n// \"2013-01-31T12:34:56\"           -&gt; \"2013-01-31T12:34:56.000Z\"\n// \"2013-01-31T12:34:56.78\"        -&gt; \"2013-01-31T12:34:56.780Z\"\n// \"2013-01-31T12:34:56.78+0100\"   -&gt; \"2013-01-31T11:34:56.780Z\"\n// \"2013-01-31T12:34:56.78+0530\"   -&gt; \"2013-01-31T07:04:56.780Z\"\n// \"2013-01-31T12:34:56.78-0330\"   -&gt; \"2013-01-31T16:04:56.780Z\"\n// \"2013-01-31T12:34:56-0330\"      -&gt; \"2013-01-31T16:04:56.000Z\"\n// \"2013-01-31T12:34:56Z\"          -&gt; \"2013-01-31T12:34:56.000Z\"\nfunction parseISO8601String(dateString) {\n    var timebits = /^([0-9]{4})-([0-9]{2})-([0-9]{2})T([0-9]{2}):([0-9]{2})(?::([0-9]*)(\\.[0-9]*)?)?(?:([+-])([0-9]{2})([0-9]{2}))?/;\n    var m = timebits.exec(dateString);\n    var resultDate;\n    if (m) {\n        var utcdate = Date.UTC(parseInt(m[1]),\n                               parseInt(m[2])-1, // months are zero-offset (!)\n                               parseInt(m[3]),\n                               parseInt(m[4]), parseInt(m[5]), // hh:mm\n                               (m[6] &amp;&amp; parseInt(m[6]) || 0),  // optional seconds\n                               (m[7] &amp;&amp; parseFloat(m[7])*1000) || 0); // optional fraction\n        // utcdate is milliseconds since the epoch\n        if (m[9] &amp;&amp; m[10]) {\n            var offsetMinutes = parseInt(m[9]) * 60 + parseInt(m[10]);\n            utcdate += (m[8] === '+' ? -1 : +1) * offsetMinutes * 60000;\n        }\n        resultDate = new Date(utcdate);\n    } else {\n        resultDate = null;\n    }\n    return resultDate;\n}\n</code></pre>\n\n<p>That is, you create a 'UTC time' using the date without timezone (so you know what locale it's in, namely the UTC 'locale', and it's not defaulted to the local one), and then manually apply the indicated timezone offset.</p>\n\n<p>Wouldn't it have been nice if someone had actually <em>thought</em> about the Javascript date object for more than, oooh, five minutes....</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>var d = new Date(xiYear, xiMonth, xiDate);\nd.setTime( d.getTime() + d.getTimezoneOffset()*60*1000 );\n</code></pre>\n\n<p>When this date object is deserialized, you might get the information you expect.</p>\n",
                    "is_accepted": false,
                    "score": 54
                },
                {
                    "body": "<p>Best Solution I have seen from this came from </p>\n\n<p><a href=\"http://www.codingforums.com/archive/index.php/t-19663.html\" rel=\"nofollow\">http://www.codingforums.com/archive/index.php/t-19663.html</a></p>\n\n<p>Print Time Function</p>\n\n<pre><code>&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n//borrowed from echoecho\n//http://www.echoecho.com/ubb/viewthread.php?tid=2362&amp;pid=10482&amp;#pid10482\nworkDate = new Date()\nUTCDate = new Date()\nUTCDate.setTime(workDate.getTime()+workDate.getTimezoneOffset()*60000)\n\nfunction printTime(offset) {\n    offset++;\n    tempDate = new Date()\n    tempDate.setTime(UTCDate.getTime()+3600000*(offset))\n    timeValue = ((tempDate.getHours()&lt;10) ? (\"0\"+tempDate.getHours()) : (\"\"+tempDate.getHours()))\n    timeValue += ((tempDate.getMinutes()&lt;10) ? (\"0\"+tempDate.getMinutes()) : tempDate.getMinutes())\n    timeValue += \" hrs.\"\n    return timeValue\n    }\n    var now = new Date()\n    var seed = now.getTime() % 0xfffffff\n    var same = rand(12)\n&lt;/script&gt;\n\nBanff, Canada:\n&lt;script language=\"JavaScript\"&gt;document.write(printTime(\"-7\"))&lt;/script&gt;\n</code></pre>\n\n<p>Full Code Example</p>\n\n<pre><code>&lt;html&gt;\n\n&lt;head&gt;\n&lt;script language=\"javascript\" type=\"text/javascript\"&gt;\n//borrowed from echoecho\n//http://www.echoecho.com/ubb/viewthread.php?tid=2362&amp;pid=10482&amp;#pid10482\nworkDate = new Date()\nUTCDate = new Date()\nUTCDate.setTime(workDate.getTime()+workDate.getTimezoneOffset()*60000)\n\nfunction printTime(offset) {\noffset++;\ntempDate = new Date()\ntempDate.setTime(UTCDate.getTime()+3600000*(offset))\ntimeValue = ((tempDate.getHours()&lt;10) ? (\"0\"+tempDate.getHours()) : (\"\"+tempDate.getHours()))\ntimeValue += ((tempDate.getMinutes()&lt;10) ? (\"0\"+tempDate.getMinutes()) : tempDate.getMinutes())\ntimeValue += \" hrs.\"\nreturn timeValue\n}\nvar now = new Date()\nvar seed = now.getTime() % 0xfffffff\nvar same = rand(12)\n&lt;/script&gt;\n\n&lt;/head&gt;\n\n&lt;body&gt;\nBanff, Canada:\n&lt;script language=\"JavaScript\"&gt;document.write(printTime(\"-7\"))&lt;/script&gt;\n&lt;br&gt;\nMichigan:\n&lt;script language=\"JavaScript\"&gt;document.write(printTime(\"-5\"))&lt;/script&gt;\n&lt;br&gt;\nGreenwich, England(UTC):\n&lt;script language=\"JavaScript\"&gt;document.write(printTime(\"-0\"))&lt;/script&gt;\n&lt;br&gt;\nTokyo, Japan:\n&lt;script language=\"JavaScript\"&gt;document.write(printTime(\"+9\"))&lt;/script&gt;\n&lt;br&gt;\nBerlin, Germany:\n&lt;script language=\"JavaScript\"&gt;document.write(printTime(\"+1\"))&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><a href=\"http://sugarjs.com/\" rel=\"nofollow\">Sugar.js</a> is worth investigating. Here's a blog post about their handling of UTC: <a href=\"http://blog.sugarjs.com/post/31463273939/v1-3-4-better-utc-date-handling\" rel=\"nofollow\">http://blog.sugarjs.com/post/31463273939/v1-3-4-better-utc-date-handling</a>.</p>\n\n<p>While it doesn't to everything, it's likely to be much closer than a native Date object.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>getTimeZoneOffset is minus for UTC + z. </p>\n\n<pre><code>var d = new Date(xiYear, xiMonth, xiDate);\nif(d.getTimezoneOffset() &gt; 0){\n    d.setTime( d.getTime() + d.getTimezoneOffset()*60*1000 );\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This may help someone, put UTC at the end of what you pass in to the new constructor</p>\n\n<p>At least in chrome you can say <code>var date = new Date(\"2014-01-01 11:00:00 UTC\")</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know this is old but if it helps you could use moment and moment time zone.  If you haven't seen them take a look.  </p>\n\n<p><a href=\"http://momentjs.com/timezone/\" rel=\"nofollow\">http://momentjs.com/timezone/</a></p>\n\n<p><a href=\"http://momentjs.com/\" rel=\"nofollow\">http://momentjs.com/</a></p>\n\n<p>two really handy time manipulation libraries.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>One line solution </p>\n\n<pre><code>new Date(new Date(1422524805305).getTime() - 330*60*1000)\n</code></pre>\n\n<p>Instead of 1422524805305, use the timestamp in milliseconds\nInstead of 330, use your timezone offset in minutes wrt. GMT (eg India +5:30 is 5*60+30 = 330 minutes)</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a web page with three dropdowns for day, month and year. If I use the JavaScript Date constructor that takes numbers then I get a Date object for my current timezone:</p>\n\n<pre><code>new Date(xiYear, xiMonth, xiDate)\n</code></pre>\n\n<p>Give the correct date but it thinks that date is GMT+01:00 due to daylight savings time.</p>\n\n<p>The problem here is that I then give this Date to an Ajax method and when the date is deserialised on the server it has been converted to GMT and so lost an hour which moves the day back by one.\nNow I could just pass the day, month, and year individually into the Ajax method but it seems that there ought to be a better way.</p>\n\n<p>The accepted answer pointed me in the right direction, however just using <code>setUTCHours</code> by itself changed:</p>\n\n<pre><code>Apr 5th 00:00 GMT+01:00 \n</code></pre>\n\n<p>to</p>\n\n<pre><code>Apr 4th 23:00 GMT+01:00\n</code></pre>\n\n<p>I then also had to set the UTC date, month and year to end up with</p>\n\n<pre><code>Apr 5th 01:00 GMT+01:00\n</code></pre>\n\n<p>which is what I wanted</p>\n",
            "last_activity_date": 1422525362,
            "question_id": 439630,
            "score": 148,
            "tags": [
                "javascript",
                "timezone"
            ],
            "title": "How do you create a JavaScript Date object with a set timezone without using a string representation"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>A basic implementation which you'll need to adapt would look something like this:</p>\n\n<pre><code>function insertParam(key, value)\n{\n    key = encodeURI(key); value = encodeURI(value);\n\n    var kvp = document.location.search.substr(1).split('&amp;');\n\n    var i=kvp.length; var x; while(i--) \n    {\n        x = kvp[i].split('=');\n\n        if (x[0]==key)\n        {\n            x[1] = value;\n            kvp[i] = x.join('=');\n            break;\n        }\n    }\n\n    if(i&lt;0) {kvp[kvp.length] = [key,value].join('=');}\n\n    //this will reload the page, it's likely better to store this until finished\n    document.location.search = kvp.join('&amp;'); \n}\n</code></pre>\n\n<p>This is approximately twice as fast as a regex or search based solution, but that depends completely on the length of the querystring and the index of any match</p>\n\n<hr>\n\n<p>the slow regex method I benchmarked against for completions sake (approx +150% slower)</p>\n\n<pre><code>function insertParam2(key,value)\n{\n    key = encodeURI(key); value = encodeURI(value);\n\n    var s = document.location.search;\n    var kvp = key+\"=\"+value;\n\n    var r = new RegExp(\"(&amp;|\\\\?)\"+key+\"=[^\\&amp;]*\");\n\n    s = s.replace(r,\"$1\"+kvp);\n\n    if(!RegExp.$1) {s += (s.length&gt;0 ? '&amp;' : '?') + kvp;};\n\n    //again, do what you will here\n    document.location.search = s;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 84
                },
                {
                    "body": "<p>This was my own attempt, but I'll use the answer by annakata as it seems much cleaner:</p>\n\n<pre><code>function AddUrlParameter(sourceUrl, parameterName, parameterValue, replaceDuplicates)\n{\n    if ((sourceUrl == null) || (sourceUrl.length == 0)) sourceUrl = document.location.href;\n    var urlParts = sourceUrl.split(\"?\");\n    var newQueryString = \"\";\n    if (urlParts.length &gt; 1)\n    {\n    \tvar parameters = urlParts[1].split(\"&amp;\");\n    \tfor (var i=0; (i &lt; parameters.length); i++)\n    \t{\n    \t\tvar parameterParts = parameters[i].split(\"=\");\n    \t\tif (!(replaceDuplicates &amp;&amp; parameterParts[0] == parameterName))\n    \t\t{\n    \t\t\tif (newQueryString == \"\")\n    \t\t\t\tnewQueryString = \"?\";\n    \t\t\telse\n    \t\t\t\tnewQueryString += \"&amp;\";\n    \t\t\tnewQueryString += parameterParts[0] + \"=\" + parameterParts[1];\n    \t\t}\n    \t}\n    }\n    if (newQueryString == \"\")\n    \tnewQueryString = \"?\";\n    else\n    \tnewQueryString += \"&amp;\";\n    newQueryString += parameterName + \"=\" + parameterValue;\n\n    return urlParts[0] + newQueryString;\n}\n</code></pre>\n\n<p>Also, I found this jQuery plugin from another post on stackoverflow, and if you need more flexibility you could use that:\n<a href=\"http://plugins.jquery.com/project/query-object\" rel=\"nofollow\">http://plugins.jquery.com/project/query-object</a></p>\n\n<p>I would think the code would be (haven't tested): </p>\n\n<pre><code>return $.query.parse(sourceUrl).set(parameterName, parameterValue).toString();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I have a 'class' that does this and here it is:</p>\n\n<pre><code>function QS(){\n    this.qs = {};\n    var s = location.search.replace( /^\\?|#.*$/g, '' );\n    if( s ) {\n        var qsParts = s.split('&amp;');\n        var i, nv;\n        for (i = 0; i &lt; qsParts.length; i++) {\n            nv = qsParts[i].split('=');\n            this.qs[nv[0]] = nv[1];\n        }\n    }\n}\n\nQS.prototype.add = function( name, value ) {\n    if( arguments.length == 1 &amp;&amp; arguments[0].constructor == Object ) {\n        this.addMany( arguments[0] );\n        return;\n    }\n    this.qs[name] = value;\n}\n\nQS.prototype.addMany = function( newValues ) {\n    for( nv in newValues ) {\n        this.qs[nv] = newValues[nv];\n    }\n}\n\nQS.prototype.remove = function( name ) {\n    if( arguments.length == 1 &amp;&amp; arguments[0].constructor == Array ) {\n        this.removeMany( arguments[0] );\n        return;\n    }\n    delete this.qs[name];\n}\n\nQS.prototype.removeMany = function( deleteNames ) {\n    var i;\n    for( i = 0; i &lt; deleteNames.length; i++ ) {\n        delete this.qs[deleteNames[i]];\n    }\n}\n\nQS.prototype.getQueryString = function() {\n    var nv, q = [];\n    for( nv in this.qs ) {\n        q[q.length] = nv+'='+this.qs[nv];\n    }\n    return q.join( '&amp;' );\n}\n\nQS.prototype.toString = QS.prototype.getQueryString;\n\n//examples\n//instantiation\nvar qs = new QS;\nalert( qs );\n\n//add a sinle name/value\nqs.add( 'new', 'true' );\nalert( qs );\n\n//add multiple key/values\nqs.add( { x: 'X', y: 'Y' } );\nalert( qs );\n\n//remove single key\nqs.remove( 'new' )\nalert( qs );\n\n//remove multiple keys\nqs.remove( ['x', 'bogus'] )\nalert( qs );\n</code></pre>\n\n<p>I have overridden the toString method so there is no need to call QS::getQueryString, you can use QS::toString or, as I have done in the examples just rely on the object being coerced into a string. </p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Ok here I compare Two functions, one made by myself (regExp) and another one made by (annakata).</p>\n\n<p>Split array:</p>\n\n<pre><code>function insertParam(key, value)\n{\n    key = escape(key); value = escape(value);\n\n    var kvp = document.location.search.substr(1).split('&amp;');\n\n    var i=kvp.length; var x; while(i--) \n    {\n        x = kvp[i].split('=');\n\n        if (x[0]==key)\n        {\n                x[1] = value;\n                kvp[i] = x.join('=');\n                break;\n        }\n    }\n\n    if(i&lt;0) {kvp[kvp.length] = [key,value].join('=');}\n\n    //this will reload the page, it's likely better to store this until finished\n    return \"&amp;\"+kvp.join('&amp;'); \n}\n</code></pre>\n\n<p>Regexp method:</p>\n\n<pre><code>function addParameter(param, value)\n{\n    var regexp = new RegExp(\"(\\\\?|\\\\&amp;)\" + param + \"\\\\=([^\\\\&amp;]*)(\\\\&amp;|$)\");\n    if (regexp.test(document.location.search)) \n        return (document.location.search.toString().replace(regexp, function(a, b, c, d)\n        {\n                return (b + param + \"=\" + value + d);\n        }));\n    else \n        return document.location.search+ param + \"=\" + value;\n}\n</code></pre>\n\n<p>Testing case:</p>\n\n<pre><code>time1=(new Date).getTime();\nfor (var i=0;i&lt;10000;i++)\n{\naddParameter(\"test\",\"test\");\n}\ntime2=(new Date).getTime();\nfor (var i=0;i&lt;10000;i++)\n{\ninsertParam(\"test\",\"test\");\n}\n\ntime3=(new Date).getTime();\n\nconsole.log((time2-time1)+\" \"+(time3-time2));\n</code></pre>\n\n<p>It seems that even with simplest solution (when regexp use only test and do not enter .replace function) it is still slower than spliting... Well. Regexp is kinda slow but... uhh...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Thank you all for your contribution. I used <strong>annakata</strong> code and modified to also include the case where there is no query string in the url at all.\nHope this would help.</p>\n\n<pre><code>function insertParam(key, value) {\n        key = escape(key); value = escape(value);\n\n        var kvp = document.location.search.substr(1).split('&amp;');\n        if (kvp == '') {\n            document.location.search = '?' + key + '=' + value;\n        }\n        else {\n\n            var i = kvp.length; var x; while (i--) {\n                x = kvp[i].split('=');\n\n                if (x[0] == key) {\n                    x[1] = value;\n                    kvp[i] = x.join('=');\n                    break;\n                }\n            }\n\n            if (i &lt; 0) { kvp[kvp.length] = [key, value].join('='); }\n\n            //this will reload the page, it's likely better to store this until finished\n            document.location.search = kvp.join('&amp;');\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>Here's a vastly simplified version, making tradeoffs for legibility and fewer lines of code instead of micro-optimized performance (and we're talking about a few miliseconds difference, realistically... due to the nature of this (operating on the current document's location), this will most likely be ran once on a page).</p>\n\n<pre><code>/**\n* Add a URL parameter (or changing it if it already exists)\n* @param {search} string  this is typically document.location.search\n* @param {key}    string  the key to set\n* @param {val}    string  value \n*/\nvar addUrlParam = function(search, key, val){\n  var newParam = key + '=' + val,\n      params = '?' + newParam;\n\n  // If the \"search\" string exists, then build params from it\n  if (search) {\n    // Try to replace an existance instance\n    params = search.replace(new RegExp('[\\?&amp;]' + key + '[^&amp;]*'), '$1' + newParam);\n\n    // If nothing was replaced, then add the new param to the end\n    if (params === search) {\n      params += '&amp;' + newParam;\n    }\n  }\n\n  return params;\n};\n</code></pre>\n\n<p>You would then use this like so:</p>\n\n<pre><code>document.location.pathname + addUrlParam(document.location.search, 'foo', 'bar');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>This is very simple solution. Its doesn't control parameter existence, and it doesn't change existing value. It adds your parameter to end, so you can get latest value in your back-end code.</p>\n\n<pre><code>function addParameterToURL(param){\n    _url = location.href;\n    _url += (_url.split('?')[1] ? '&amp;':'?') + param;\n    return _url;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I like the answer of Mehmet Fatih Y\u0131ld\u0131z even he did not answer the whole question.</p>\n\n<p>In the same line as his answer, I use this code:</p>\n\n<p>\"Its doesn't control parameter existence, and it doesn't change existing value. It adds your parameter to the end\"</p>\n\n<pre><code>  /** add a parameter at the end of the URL. Manage '?'/'&amp;', but not the existing parameters.\n   *  does escape the value (but not the key)\n   */\n  function addParameterToURL(_url,_key,_value){\n      var param = _key+'='+escape(_value);\n\n      var sep = '&amp;';\n      if (_url.indexOf('?') &lt; 0) {\n        sep = '?';\n      } else {\n        var lastChar=_url.slice(-1);\n        if (lastChar == '&amp;') sep='';\n        if (lastChar == '?') sep='';\n      }\n      _url += sep + param;\n\n      return _url;\n  }\n</code></pre>\n\n<p>and the tester:</p>\n\n<pre><code>  /*\n  function addParameterToURL_TESTER_sub(_url,key,value){\n    //log(_url);\n    log(addParameterToURL(_url,key,value));\n  }\n\n  function addParameterToURL_TESTER(){\n    log('-------------------');\n    var _url ='www.google.com';\n    addParameterToURL_TESTER_sub(_url,'key','value');\n    addParameterToURL_TESTER_sub(_url,'key','Text Value');\n    _url ='www.google.com?';\n    addParameterToURL_TESTER_sub(_url,'key','value');\n    _url ='www.google.com?A=B';\n    addParameterToURL_TESTER_sub(_url,'key','value');\n    _url ='www.google.com?A=B&amp;';\n    addParameterToURL_TESTER_sub(_url,'key','value');\n    _url ='www.google.com?A=1&amp;B=2';\n    addParameterToURL_TESTER_sub(_url,'key','value');\n\n  }//*/\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var MyApp = new Class();\n\nMyApp.extend({\n    utility: {\n        queryStringHelper: function (url) {\n            var originalUrl = url;\n            var newUrl = url;\n            var finalUrl;\n            var insertParam = function (key, value) {\n                key = escape(key);\n                value = escape(value);\n\n                //The previous post had the substr strat from 1 in stead of 0!!!\n                var kvp = newUrl.substr(0).split('&amp;');\n\n                var i = kvp.length;\n                var x;\n                while (i--) {\n                    x = kvp[i].split('=');\n\n                    if (x[0] == key) {\n                        x[1] = value;\n                        kvp[i] = x.join('=');\n                        break;\n                    }\n                }\n\n                if (i &lt; 0) {\n                    kvp[kvp.length] = [key, value].join('=');\n                }\n\n                finalUrl = kvp.join('&amp;');\n\n                return finalUrl;\n            };\n\n            this.insertParameterToQueryString = insertParam;\n\n            this.insertParams = function (keyValues) {\n                for (var keyValue in keyValues[0]) {\n                    var key = keyValue;\n                    var value = keyValues[0][keyValue];\n                    newUrl = insertParam(key, value);\n                }\n                return newUrl;\n            };\n\n            return this;\n        }\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>May be this can be another good solution, this new version replace the parameter if already exists.</p>\n\n<pre><code>function addParam(url, param, value) {\n   var a = document.createElement('a'), regex = /[?&amp;]([^=]+)=([^&amp;]*)/g;\n   var match, str = []; a.href = url; value=value||\"\";\n   while (match = regex.exec(a.search))\n       if (encodeURIComponent(param) != match[1]) str.push(match[1] + \"=\" + match[2]);\n   str.push(encodeURIComponent(param) + \"=\" + encodeURIComponent(value));\n   a.search = (a.search.substring(0,1) == \"?\" ? \"\" : \"?\") + str.join(\"&amp;\");\n   return a.href;\n}\n\nurl = \"http://www.example.com#hashme\";\nnewurl = addParam(url, \"ciao\", \"1\");\nalert(newurl);\n</code></pre>\n\n<p><strong>And please note that parameters should be encoded before being appended in query string.</strong></p>\n\n<p><a href=\"http://jsfiddle.net/bknE4/60/\" rel=\"nofollow\">http://jsfiddle.net/bknE4/60/</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If you're messing around with urls in links or somewhere else, you may have to take the hash into account as well. Here's a fairly simple to understand solution. Probably not the <em>FASTEST</em>  since it uses a regex... but in 99.999% of cases, the difference really doesn't matter! </p>\n\n<pre><code>function addQueryParam( url, key, val ){\n    var parts = url.match(/([^?#]+)(\\?[^#]*)?(\\#.*)?/);\n    var url = parts[1];\n    var qs = parts[2] || '';\n    var hash = parts[3] || '';\n\n    if ( !qs ) {\n        return url + '?' + key + '=' + encodeURIComponent( val ) + hash;\n    } else {\n        var qs_parts = qs.substr(1).split(\"&amp;\");\n        var i;\n        for (i=0;i&lt;qs_parts.length;i++) {\n            var qs_pair = qs_parts[i].split(\"=\");\n            if ( qs_pair[0] == key ){\n                qs_parts[ i ] = key + '=' + encodeURIComponent( val );\n                break;\n            }\n        }\n        if ( i == qs_parts.length ){\n            qs_parts.push( key + '=' + encodeURIComponent( val ) );\n        }\n        return url + '?' + qs_parts.join('&amp;') + hash;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Check out <a href=\"https://github.com/derek-watson/jsUri\" rel=\"nofollow\">https://github.com/derek-watson/jsUri</a></p>\n\n<p>Uri and query string manipulation in javascript.</p>\n\n<p>This project incorporates the excellent parseUri regular expression library by Steven Levithan. You can safely parse URLs of all shapes and sizes, however invalid or hideous.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I would go with <a href=\"https://github.com/Mikhus/jsurl\" rel=\"nofollow\">this</a> small but complete library to handle urls in js:</p>\n\n<p><a href=\"https://github.com/Mikhus/jsurl\" rel=\"nofollow\">https://github.com/Mikhus/jsurl</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is what I do. Using my editParams() function, you can add, remove, or change any parameter, then use the built in replaceState() function to update the URL:</p>\n\n<pre><code>window.history.replaceState('object or string', 'Title', 'page.html' + editParams('enable', 'true'));\n\n\n// background functions below:\n\n// add/change/remove URL parameter\n// use a value of false to remove parameter\n// returns a url-style string\nfunction editParams (key, value) {\n  key = encodeURI(key);\n\n  var params = getSearchParameters();\n\n  if (Object.keys(params).length === 0) {\n    if (value !== false)\n      return '?' + key + '=' + encodeURI(value);\n    else\n      return '';\n  }\n\n  if (value !== false)\n    params[key] = encodeURI(value);\n  else\n    delete params[key];\n\n  if (Object.keys(params).length === 0)\n    return '';\n\n  return '?' + $.map(params, function (value, key) {\n    return key + '=' + value;\n  }).join('&amp;');\n}\n\n// Get object/associative array of URL parameters\nfunction getSearchParameters () {\n  var prmstr = window.location.search.substr(1);\n  return prmstr !== null &amp;&amp; prmstr !== \"\" ? transformToAssocArray(prmstr) : {};\n}\n\n// convert parameters from url-style string to associative array\nfunction transformToAssocArray (prmstr) {\n  var params = {},\n      prmarr = prmstr.split(\"&amp;\");\n\n  for (var i = 0; i &lt; prmarr.length; i++) {\n    var tmparr = prmarr[i].split(\"=\");\n    params[tmparr[0]] = tmparr[1];\n  }\n  return params;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In a web application that makes use of AJAX calls, I need to submit a request but add a parameter to the end of the URL, for example:</p>\n\n<p>Original URL: </p>\n\n<blockquote>\n  <p><a href=\"http://server/myapp.php?id=10\">http://server/myapp.php?id=10</a></p>\n</blockquote>\n\n<p>Resulting URL:</p>\n\n<blockquote>\n  <p><a href=\"http://server/myapp.php?id=10\">http://server/myapp.php?id=10</a><strong>&amp;enabled=true</strong></p>\n</blockquote>\n\n<p>Looking for a JavaScript function which parses the URL looking at each parameter, then adds the new parameter or updates the value if one already exists.</p>\n",
            "last_activity_date": 1413481346,
            "question_id": 486896,
            "score": 65,
            "tags": [
                "javascript",
                "url",
                "parsing",
                "parameters",
                "query-string"
            ],
            "title": "Adding a parameter to the URL with JavaScript"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>I think you want the <a href=\"http://plugins.jquery.com/query-object/\">query plugin</a>.</p>\n\n<p>E.g.:</p>\n\n<pre><code>window.location.search = jQuery.query.set(\"rows\", 10);\n</code></pre>\n\n<p>This will work regardless of the current state of rows.</p>\n",
                    "is_accepted": false,
                    "score": 52
                },
                {
                    "body": "<p>Ben Alman has a good jquery querystring/url plugin <a href=\"http://benalman.com/docs/code/files/javascript/jquery/jquery-ba-url-js.html\">here</a> that allows you to manipulate the querystring easily.</p>\n\n<p>As requested - </p>\n\n<p>Goto his test page <a href=\"http://benalman.com/code/test/js-jquery-url-querystring.html?a=X&amp;b=Y&amp;c=Z#n=1&amp;o=2&amp;p=3\">here</a> </p>\n\n<p>In firebug enter the following into the console </p>\n\n<p><code>jQuery.param.querystring(window.location.href, 'a=3&amp;newValue=100');</code></p>\n\n<p>It will return you the following amended url string</p>\n\n<blockquote>\n  <p><a href=\"http://benalman.com/code/test/js-jquery-url-querystring.html?a=3&amp;b=Y&amp;c=Z&amp;newValue=100#n=1&amp;o=2&amp;p=3\">http://benalman.com/code/test/js-jquery-url-querystring.html?a=3&amp;b=Y&amp;c=Z&amp;newValue=100#n=1&amp;o=2&amp;p=3</a></p>\n</blockquote>\n\n<p>Notice the a querystring value for a has changed from X to 3 and it has added the new value.</p>\n\n<p>You can then use the new url string however you wish e.g \nusing document.location = newUrl or change an anchor link etc</p>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p>Would a viable alternative to String manipulation be to set up an html <code>form</code> and just modify the value of the <code>rows</code> element?</p>\n\n<p>So, with <code>html</code> that is something like</p>\n\n<pre><code>&lt;form id='myForm' target='site.fwx'&gt;\n    &lt;input type='hidden' name='position' value='1'/&gt;\n    &lt;input type='hidden' name='archiveid' value='5000'/&gt;\n    &lt;input type='hidden' name='columns' value='5'/&gt;\n    &lt;input type='hidden' name='rows' value='20'/&gt;\n    &lt;input type='hidden' name='sorting' value='ModifiedTimeAsc'/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>With the following JavaScript to submit the form</p>\n\n<pre><code>var myForm = document.getElementById('myForm');\nmyForm.rows.value = yourNewValue;\nmyForm.submit();\n</code></pre>\n\n<p>Probably not suitable for all situations, but might be nicer than parsing the URL string.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>you can do it via normal JS also</p>\n\n<pre><code>var url = document.URL\nvar newAdditionalURL = \"\";\nvar tempArray = url.split(\"?\");\nvar baseURL = tempArray[0];\nvar aditionalURL = tempArray[1]; \nvar temp = \"\";\nif(aditionalURL)\n{\nvar tempArray = aditionalURL.split(\"&amp;\");\nfor ( var i in tempArray ){\n    if(tempArray[i].indexOf(\"rows\") == -1){\n            newAdditionalURL += temp+tempArray[i];\n                temp = \"&amp;\";\n            }\n        }\n}\nvar rows_txt = temp+\"rows=10\";\nvar finalURL = baseURL+\"?\"+newAdditionalURL+rows_txt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>I wrote a little helper function that works with any select.  All you need to do is add the class \"redirectOnChange\" to any select element, and this will cause the page to reload with a new/changed querystring parameter, equal to the id and value of the select, e.g:</p>\n\n<pre><code>&lt;select id=\"myValue\" class=\"redirectOnChange\"&gt; \n    &lt;option value=\"222\"&gt;test222&lt;/option&gt;\n    &lt;option value=\"333\"&gt;test333&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>The above example would add \"?myValue=222\" or \"?myValue=333\" (or using \"&amp;\" if other params exist), and reload the page.</p>\n\n<p>jQuery:</p>\n\n<pre><code>$(document).ready(function () {\n\n    //Redirect on Change\n    $(\".redirectOnChange\").change(function () {\n        var href = window.location.href.substring(0, window.location.href.indexOf('?'));\n        var qs = window.location.href.substring(window.location.href.indexOf('?') + 1, window.location.href.length);\n        var newParam = $(this).attr(\"id\") + '=' + $(this).val();\n\n        if (qs.indexOf($(this).attr(\"id\") + '=') == -1) {\n            if (qs == '') {\n                qs = '?'\n            }\n            else {\n                qs = qs + '&amp;'\n            }\n            qs = qs + newParam;\n\n        }\n        else {\n            var start = qs.indexOf($(this).attr(\"id\") + \"=\");\n            var end = qs.indexOf(\"&amp;\", start);\n            if (end == -1) {\n                end = qs.length;\n            }\n            var curParam = qs.substring(start, end);\n            qs = qs.replace(curParam, newParam);\n        }\n        window.location.replace(href + '?' + qs);\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I've extended Sujoy's code to make up a function.</p>\n\n<pre><code>/**\n * http://stackoverflow.com/a/10997390/11236\n */\nfunction updateURLParameter(url, param, paramVal){\n    var newAdditionalURL = \"\";\n    var tempArray = url.split(\"?\");\n    var baseURL = tempArray[0];\n    var additionalURL = tempArray[1];\n    var temp = \"\";\n    if (additionalURL) {\n        tempArray = additionalURL.split(\"&amp;\");\n        for (i=0; i&lt;tempArray.length; i++){\n            if(tempArray[i].split('=')[0] != param){\n                newAdditionalURL += temp + tempArray[i];\n                temp = \"&amp;\";\n            }\n        }\n    }\n\n    var rows_txt = temp + \"\" + param + \"=\" + paramVal;\n    return baseURL + \"?\" + newAdditionalURL + rows_txt;\n}\n</code></pre>\n\n<p>Function Calls:</p>\n\n<pre><code>var newURL = updateURLParameter(window.location.href, 'locId', 'newLoc');\n    newURL = updateURLParameter(newURL, 'resId', 'newResId');\n</code></pre>\n\n<p>Updated version that also take care of the anchors on the URL. </p>\n\n<pre><code>function updateURLParameter(url, param, paramVal)\n{\n    var TheAnchor = null;\n    var newAdditionalURL = \"\";\n    var tempArray = url.split(\"?\");\n    var baseURL = tempArray[0];\n    var additionalURL = tempArray[1];\n    var temp = \"\";\n\n    if (additionalURL) \n    {\n        var tmpAnchor = additionalURL.split(\"#\");\n        var TheParams = tmpAnchor[0];\n            TheAnchor = tmpAnchor[1];\n        if(TheAnchor)\n            additionalURL = TheParams;\n\n        tempArray = additionalURL.split(\"&amp;\");\n\n        for (i=0; i&lt;tempArray.length; i++)\n        {\n            if(tempArray[i].split('=')[0] != param)\n            {\n                newAdditionalURL += temp + tempArray[i];\n                temp = \"&amp;\";\n            }\n        }        \n    }\n    else\n    {\n        var tmpAnchor = baseURL.split(\"#\");\n        var TheParams = tmpAnchor[0];\n            TheAnchor  = tmpAnchor[1];\n\n        if(TheParams)\n            baseURL = TheParams;\n    }\n\n    if(TheAnchor)\n        paramVal += \"#\" + TheAnchor;\n\n    var rows_txt = temp + \"\" + param + \"=\" + paramVal;\n    return baseURL + \"?\" + newAdditionalURL + rows_txt;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>Another variation on Sujoy's answer.  Just changed the variable names &amp; added a namespace wrapper:</p>\n\n<pre><code>window.MyNamespace = window.MyNamespace  || {};\nwindow.MyNamespace.Uri = window.MyNamespace.Uri || {};\n\n(function (ns) {\n\n    ns.SetQueryStringParameter = function(url, parameterName, parameterValue) {\n\n        var otherQueryStringParameters = \"\";\n\n        var urlParts = url.split(\"?\");\n\n        var baseUrl = urlParts[0];\n        var queryString = urlParts[1];\n\n        var itemSeparator = \"\";\n        if (queryString) {\n\n            var queryStringParts = queryString.split(\"&amp;\");\n\n            for (var i = 0; i &lt; queryStringParts.length; i++){\n\n                if(queryStringParts[i].split('=')[0] != parameterName){\n\n                    otherQueryStringParameters += itemSeparator + queryStringParts[i];\n                    itemSeparator = \"&amp;\";\n                }\n            }\n        }\n\n        var newQueryStringParameter = itemSeparator + parameterName + \"=\" + parameterValue;\n\n        return baseUrl + \"?\" + otherQueryStringParameters + newQueryStringParameter;\n    };\n\n})(window.MyNamespace.Uri);\n</code></pre>\n\n<p>Useage is now:</p>\n\n<pre><code>var changedUrl = MyNamespace.Uri.SetQueryStringParameter(originalUrl, \"CarType\", \"Ford\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You can use this my library to do the job: <a href=\"https://github.com/Mikhus/jsurl\" rel=\"nofollow\">https://github.com/Mikhus/jsurl</a></p>\n\n<pre><code>var url = new Url('site.fwx?position=1&amp;archiveid=5000&amp;columns=5&amp;rows=20&amp;sorting=ModifiedTimeAsc');\nurl.query.rows = 10;\nalert( url);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Quick little solution in pure js, no plugins needed:</p>\n\n<pre><code>  function replaceQueryParam(param, newval, search) {\n    var regex = new RegExp(\"([?;&amp;])\" + param + \"[^&amp;;]*[;&amp;]?\")\n    var query = search.replace(regex, \"$1\").replace(/&amp;$/, '')\n    return (query.length &gt; 2 ? query + \"&amp;\" : \"?\") + param + \"=\" + newval\n }\n</code></pre>\n\n<p>Call it like this:</p>\n\n<pre><code> window.location = '/mypage' + replaceQueryParam('rows', 55, window.location.search)\n</code></pre>\n\n<p>Or, if you want to stay on the same page and replace multiple params:</p>\n\n<pre><code> var str = window.location.search\n str = replaceQueryParam('rows', 55, str)\n str = replaceQueryParam('cols', 'no', str)\n window.location = window.location.pathname + str\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>To answer my own question 4 years later, after having learned a lot. Especially that you shouldn't use jQuery for everything. I've created a simple module that can parse/stringify a query string. This makes it easy to modify the query string.</p>\n\n<p>You can use <a href=\"https://github.com/sindresorhus/query-string\">query-string</a> as follows:</p>\n\n<pre><code>// parse the query string into an object\nvar q = queryString.parse(location.search);\n// set the `row` property\nq.rows = 10;\n// convert the object to a query string\n// and overwrite the existing query string\nlocation.search = queryString.stringify(q);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 24
                },
                {
                    "body": "<p>I too have written a <a href=\"https://github.com/ryanburnette/Qurl\" rel=\"nofollow\">library for getting and setting URL query parameters in JavaScript</a>.</p>\n\n<p>Here is an example of its usage.</p>\n\n<pre><code>var url = Qurl.create()\n  , query\n  , foo\n  ;\n</code></pre>\n\n<p>Get query params as an object, by key, or add/change/remove.</p>\n\n<pre><code>// returns { foo: 'bar', baz: 'qux' } for ?foo=bar&amp;baz=qux\nquery = url.query();\n\n// get the current value of foo\nfoo = url.query('foo');\n\n// set ?foo=bar&amp;baz=qux\nurl.query('foo', 'bar');\nurl.query('baz', 'qux');\n\n// unset foo, leaving ?baz=qux\nurl.query('foo', false); // unsets foo\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I was looking for the same thing and found: <a href=\"https://github.com/medialize/URI.js\" rel=\"nofollow\">https://github.com/medialize/URI.js</a> which is quite nice :)</p>\n\n<p>-- Update</p>\n\n<p>I found a better package: <a href=\"https://www.npmjs.org/package/qs\" rel=\"nofollow\">https://www.npmjs.org/package/qs</a> it also deals with arrays in get params.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is what I do. Using my editParams() function, you can add, remove, or change any parameter, then use the built in replaceState() function to update the URL:</p>\n\n<pre><code>window.history.replaceState('object or string', 'Title', 'page.html' + editParams('sorting', ModifiedTimeAsc));\n\n\n// background functions below:\n\n// add/change/remove URL parameter\n// use a value of false to remove parameter\n// returns a url-style string\nfunction editParams (key, value) {\n  key = encodeURI(key);\n\n  var params = getSearchParameters();\n\n  if (Object.keys(params).length === 0) {\n    if (value !== false)\n      return '?' + key + '=' + encodeURI(value);\n    else\n      return '';\n  }\n\n  if (value !== false)\n    params[key] = encodeURI(value);\n  else\n    delete params[key];\n\n  if (Object.keys(params).length === 0)\n    return '';\n\n  return '?' + $.map(params, function (value, key) {\n    return key + '=' + value;\n  }).join('&amp;');\n}\n\n// Get object/associative array of URL parameters\nfunction getSearchParameters () {\n  var prmstr = window.location.search.substr(1);\n  return prmstr !== null &amp;&amp; prmstr !== \"\" ? transformToAssocArray(prmstr) : {};\n}\n\n// convert parameters from url-style string to associative array\nfunction transformToAssocArray (prmstr) {\n  var params = {},\n      prmarr = prmstr.split(\"&amp;\");\n\n  for (var i = 0; i &lt; prmarr.length; i++) {\n    var tmparr = prmarr[i].split(\"=\");\n    params[tmparr[0]] = tmparr[1];\n  }\n  return params;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here I have taken Adil Malik's answer and fixed the 3 issues I identified with it.</p>\n\n<pre><code>/**\n * Adds or updates a URL parameter.\n *\n * @param {string} url  the URL to modify\n * @param {string} param  the name of the parameter\n * @param {string} paramVal  the new value for the parameter\n * @return {string}  the updated URL\n */\nself.setParameter = function (url, param, paramVal){\n  // http://stackoverflow.com/a/10997390/2391566\n  var parts = url.split('?');\n  var baseUrl = parts[0];\n  var oldQueryString = parts[1];\n  var newParameters = [];\n  if (oldQueryString) {\n    var oldParameters = oldQueryString.split('&amp;');\n    for (var i = 0; i &lt; oldParameters.length; i++) {\n      if(oldParameters[i].split('=')[0] != param) {\n        newParameters.push(oldParameters[i]);\n      }\n    }\n  }\n  if (paramVal !== '' &amp;&amp; paramVal !== null &amp;&amp; typeof paramVal !== 'undefined') {\n    newParameters.push(param + '=' + encodeURI(paramVal));\n  }\n  if (newParameters.length &gt; 0) {\n    return baseUrl + '?' + newParameters.join('&amp;');\n  } else {\n    return baseUrl;\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>THe elegant way and Since your question is tagged <a href=\"/questions/tagged/javascript\" class=\"post-tag\" title=\"show questions tagged 'javascript'\" rel=\"tag\">javascript</a> not external library : </p>\n\n<pre><code>\"http://example.com/ff?a=1&amp;b=3&amp;y=rir\".urlParams() //==&gt; {a:1,b:3,y:'riri'}\n\"http://example.com/ff?a=1&amp;b=3&amp;y=riri\".urlParams('y')// ==&gt; 'riri'\n\"http://example.com/ff?a=1&amp;b=3&amp;y=riri\".urlParams('a',99) //==&gt; http://example.com/ff?a=99&amp;b=3&amp;y=kiki\n</code></pre>\n\n<h1>Syntax:</h1>\n\n<pre><code>   url.urlParams() // 0 arguement  : return params in object  i.e:{p1:val1,p2,val2}\n   url.urlParams(p2) // 1 arguement  : return value of param passed as argument . i.e:val2\n   url.urlParams(p2,val4) // 2 arguments : set new val for param\n</code></pre>\n\n<hr>\n\n<p>If you love this programming paradigm , just add <strong>this line</strong> at the top of JS code: </p>\n\n<pre><code>String.prototype.urlParams=function(e,t){var n;var r=\"\";var i=$(\"&lt;a /&gt;\").attr(\"href\",this)[0];var s,o=/\\+/g,u=/([^&amp;=]+)=?([^&amp;]*)/g,a=function(e){return decodeURIComponent(e.replace(o,\" \"))},f=i.search.substring(1);n={};while(s=u.exec(f))n[a(s[1])]=a(s[2]);if(!e&amp;&amp;!t){return n}else if(e&amp;&amp;!t){return n[e]}else{n[e]=t;var l=[];for(var c in n){l.push(encodeURIComponent(c)+\"=\"+encodeURIComponent(n[c]))}if(l.length&gt;0){r=\"?\"+l.join(\"&amp;\")}return i.origin+i.pathname+r}}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                }
            ],
            "body": "<p>I have this URL:</p>\n\n<pre><code>site.fwx?position=1&amp;archiveid=5000&amp;columns=5&amp;rows=20&amp;sorting=ModifiedTimeAsc\n</code></pre>\n\n<p>what I need is to be able to change the 'rows' url param value to something i specify, lets say 10. And if the 'rows' doesn't exist, I need to add it to the end of the url and add the value i've already specified (10).</p>\n",
            "last_activity_date": 1415858646,
            "question_id": 1090948,
            "score": 84,
            "tags": [
                "javascript",
                "url",
                "query-string",
                "url-parameters",
                "url-parsing"
            ],
            "title": "Change URL parameters"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Just declare it outside the functions, and assign values inside the functions. Something like:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    var offsetfrommouse = [10, -20];\n    var displayduration = 0;\n    var obj_selected = 0;\n    var trailimage = null ;  // GLOBAL VARIABLE\n    function makeObj(address) {\n        trailimage = [address, 50, 50];  //ASSIGN VALUE\n</code></pre>\n\n<p>Or simply removing \"var\" from your variable name inside function also makes it global, but it is better to declare it outside once for cleaner code. This will also work:</p>\n\n<pre><code>var offsetfrommouse = [10, -20];\nvar displayduration = 0;\nvar obj_selected = 0;\n\nfunction makeObj(address) {\n    trailimage = [address, 50, 50];  //GLOBAL VARIABLE , ASSIGN VALUE\n</code></pre>\n\n<p>I hope this example explains more: <a href=\"http://jsfiddle.net/qCrGE/\" rel=\"nofollow\">http://jsfiddle.net/qCrGE/</a></p>\n\n<pre><code>var globalOne = 3;\ntestOne();\n\nfunction testOne()\n{\n    globalOne += 2;\n    alert(\"globalOne is : \" + globalOne );\n    globalOne += 1;\n}\n\nalert(\"outside globalOne is : \" + globalOne);\n\ntestTwo();\n\nfunction testTwo()\n{\n    globalTwo = 20;\n    alert(\"globalTwo is \" + globalTwo);\n    globalTwo += 5;\n}\n\nalert(\"outside globalTwo is :\" + globalTwo);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Just declare </p>\n\n<pre><code>var trialImage;\n</code></pre>\n\n<p>outside. Then</p>\n\n<pre><code>function makeObj(address) {\n    trialImage = [address, 50, 50];\n..\n..\n}\n</code></pre>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Within the scope of a function leaving <code>var</code> away assigns a 'global' variable, that is to say, a variable that exists in the global namespace (<code>window</code>). Global variables thus are properties of <code>window</code>, which mean you can define them as <code>window[varname]</code> and simply check for there existence using <code>if (window[varname]) { ... }</code>. So in your case:</p>\n\n<pre><code>if (!window.trailimage) {\n  trailimage = [10, -20];\n  //or\n  window.trailimage = [10, -20];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>No, you can't. Just declare the variable outside the function. You don't have to declare it at the same time as you assign the value:</p>\n\n<pre><code>var trailimage;\nfunction makeObj(address) {\n  trailimage = [address, 50, 50];\n</code></pre>\n\n<p>Edit: edit.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Yes, as the others have said, you can use <code>var</code> at global scope (outside of all functions) to declare a global variable:</p>\n\n<pre><code>&lt;script&gt;\nvar yourGlobalVariable;\nfunction foo() {\n    // ...\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Alternately, you can assign to a property on <code>window</code>:</p>\n\n<pre><code>&lt;script&gt;\nfunction foo() {\n    window.yourGlobalVariable = ...;\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>...because in browsers, all global variables are properties of the <code>window</code> object.</p>\n\n<p>(There's also <a href=\"http://blog.niftysnippets.org/2008/03/horror-of-implicit-globals.html\">the horror of implicit globals</a>, but don't do it on purpose and do your best to avoid doing it by accident, perhaps by using ES5's <code>\"use strict\"</code>.)</p>\n\n<p>All that said: I'd avoid global variables if you possibly can (and you almost certainly can). As I mentioned, they end up being properties of <code>window</code>, and <code>window</code> is already <a href=\"http://www.w3.org/TR/Window/\"><em>plenty crowded enough</em></a> what with all elements with an <code>id</code> (and many with just a <code>name</code>) being dumped in it (and regardless that upcoming specification, IE dumps just about anything with a <code>name</code> on there).</p>\n\n<p>Instead, wrap your code in a scoping function and use variables local to that scoping function, and make your other functions closures within it:</p>\n\n<pre><code>&lt;script&gt;\n(function() { // Begin scoping function\n    var yourGlobalVariable; // Global to your code, invisible outside the scoping function\n    function foo() {\n        // ...\n    }\n})();         // End scoping function\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 244
                },
                {
                    "body": "<p>It is very simple define the trailimage variable outside the function and set its value in makeObj function. Now you can access its value from anywhere.</p>\n\n<pre><code>var offsetfrommouse = [10, -20];\nvar displayduration = 0;\nvar obj_selected = 0;\nvar trailimage;\nfunction makeObj(address) {\n      trailimage = [address, 50, 50];\n      ....\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>if you are making a startup function, you can define global functions and variables in such way:</p>\n\n<pre><code>function(globalScope)\n{\n     //define something\n     globalScope.something() { \n         alert(\"It works\");\n     };\n}(this)\n</code></pre>\n\n<p>Because the function is invoked globally with this argument, this is global scope here.\nSo, the something should be a global thing.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>One thing that no one said literally :)\nIn javascript You don't declare vars. You ONLY define them :)</p>\n\n<p>EDIT/UPDATE: If you read the comments there's a nice discussion around this particular \"naming convention\" (?) </p>\n\n<p>Whenever you have strong typing You have declaration:</p>\n\n<p><code>int myVar;</code> // when you declare the type of your var</p>\n\n<p>and definition</p>\n\n<p><code>int myVar = 10;</code> // when you define the value</p>\n\n<p>EDIT: Here is the additonal wikipedia post that supports my point: <a href=\"http://en.wikipedia.org/wiki/Declaration_(computer_programming)#Declarations_and_Definitions\" rel=\"nofollow\">http://en.wikipedia.org/wiki/Declaration_(computer_programming)#Declarations_and_Definitions</a></p>\n\n<p>...and to answer the main question. DEFINE variable before your function. This will work and it will comply to the good practice of declaring your variables at the top of the scope :)</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Nowadays, there's also the option of using the WebStorage API </p>\n\n<pre><code>localStorage.foo = 42;\n</code></pre>\n\n<p>or</p>\n\n<pre><code>sessionStorage.bar = 21;\n</code></pre>\n\n<p>Performancewise, I'm not sure whether it is noticeably slower than storing values in variables.</p>\n\n<p>Widespread browser support as stated in</p>\n\n<pre><code>http://caniuse.com/namevalue-storage\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>    var Global = 'Global';\n\n    function LocalToGlobalVariable() {\n\n    //This creates a local variable.\n\n    var Local = '5';\n\n    //Doing this makes the variable available for one session\n    //(a page refresh - Its the session not local)\n\n    sessionStorage.LocalToGlobalVar = Local;\n\n    // It can be named anything as long as the sessionStorage references the local variable.\n    // Otherwise it won't work\n    //This refreshes the page to make the variable take effect instead of the last variable set.\n\n    location.reload(false);\n    };\n\n    //This calls the variable outside of the function for whatever use you want.\n\n    sessionStorage.LocalToGlobalVar;\n</code></pre>\n\n<p>I realize there is probably a lot of syntax errors in this but its the general idea... Thanks so much LayZee for pointing this out... You can find what a local and session Storage is at <a href=\"http://www.w3schools.com/html/html5_webstorage.asp\" rel=\"nofollow\">http://www.w3schools.com/html/html5_webstorage.asp</a>. I have needed the same thing for my code and this was a really good idea.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is it possible to define a global variable in a JavaScript function?</p>\n\n<p>I want use the <code>trailimage</code> variable (declared in the <code>makeObj</code> function) in other functions.</p>\n\n<pre><code>&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n    &lt;head id=\"Head1\" runat=\"server\"&gt;\n        &lt;title&gt;&lt;/title&gt;\n        &lt;script type=\"text/javascript\"&gt;\n            var offsetfrommouse = [10, -20];\n            var displayduration = 0;\n            var obj_selected = 0;\n            function makeObj(address) {\n                **var trailimage = [address, 50, 50];**\n                document.write('&lt;img id=\"trailimageid\" src=\"' + trailimage[0] + '\" border=\"0\"  style=\" position: absolute; visibility:visible; left: 0px; top: 0px; width: ' + trailimage[1] + 'px; height: ' + trailimage[2] + 'px\"&gt;');\n                obj_selected = 1;\n            }\n\n            function truebody() {\n                return (!window.opera &amp;&amp; document.compatMode &amp;&amp; document.compatMode != \"BackCompat\") ? document.documentElement : document.body;\n            }\n            function hidetrail() {\n                var x = document.getElementById(\"trailimageid\").style;\n                x.visibility = \"hidden\";\n                document.onmousemove = \"\";\n            }\n            function followmouse(e) {\n                var xcoord = offsetfrommouse[0];\n                var ycoord = offsetfrommouse[1];\n                var x = document.getElementById(\"trailimageid\").style;\n                if (typeof e != \"undefined\") {\n                    xcoord += e.pageX;\n                    ycoord += e.pageY;\n                }\n                else if (typeof window.event != \"undefined\") {\n                    xcoord += truebody().scrollLeft + event.clientX;\n                    ycoord += truebody().scrollTop + event.clientY;\n                }\n                var docwidth = 1395;\n                var docheight = 676;\n                if (xcoord + trailimage[1] + 3 &gt; docwidth || ycoord + trailimage[2] &gt; docheight) {\n                    x.display = \"none\";\n                    alert(\"inja\");\n                }\n                else\n                    x.display = \"\";\n                x.left = xcoord + \"px\";\n                x.top = ycoord + \"px\";\n            }\n\n            if (obj_selected = 1) {\n                alert(\"obj_selected = true\");\n                document.onmousemove = followmouse;\n                if (displayduration &gt; 0)\n                    setTimeout(\"hidetrail()\", displayduration * 1000);\n            }\n        &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;form id=\"form1\" runat=\"server\"&gt;\n        &lt;img alt=\"\" id=\"house\" src=\"Pictures/sides/right.gif\" style=\"z-index: 1; left: 372px;\n            top: 219px; position: absolute; height: 138px; width: 120px\" onclick=\"javascript:makeObj('Pictures/sides/sides-not-clicked.gif');\" /&gt;\n        &lt;/form&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1416655609,
            "question_id": 5786851,
            "score": 138,
            "tags": [
                "javascript"
            ],
            "title": "Define global variable in a JavaScript function"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p><a href=\"http://www.webdevelopersnotes.com/tutorials/javascript/global_local_variables_scope_javascript.php3\">They are not the same.</a></p>\n\n<p>Undeclared variable (without <code>var</code>) are treated as properties of the global object.  (Usually the <code>window</code> object, unless you're in a <code>with</code> block)  </p>\n\n<p>Variables declared with <code>var</code> are normal local variables, and are not visible outside the function they're declared in.  (Note that Javascript does not have block scope)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>They mean different things.\nIf you use <code>var</code> the variable is declared within the scope you are in (e.g. of the function). If you don't use <code>var</code>, the variable bubbles up through the layers of scope until it encounters a variable by the given name or the global object (window, if you are doing it in the browser), where it then attaches. It is then <em>very similar</em> to a global variable. However, it can still be deleted with <code>delete</code> (most likely by someone else's code who also failed to use <code>var</code>). If you use <code>var</code> in the global scope, the variable is <em>truly global</em> and cannot be deleted.</p>\n\n<p>This is, in my opinion, one of the most dangerous issues with javascript, and should be deprecated, or at least raise warnings over warnings. The reason is, it's easy to forget <code>var</code> and have by accident a common variable name bound to the global object. This produces weird and difficult to debug behavior.</p>\n",
                    "is_accepted": true,
                    "score": 242
                },
                {
                    "body": "<p><code>var</code> is optional. <code>var</code> puts a variable in local scope. If a variable is defined without <code>var</code>, it is in global scope <strike>and not deletable</strike>.</p>\n\n<h3>edit</h3>\n\n<p>I thought that the non-deletable part was true at some point in time with a certain environment. I must have dreamed it.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Nope, they are not equivalent.</p>\n\n<p>With <code>myObj = 1;</code> you are using a global variable.</p>\n\n<p>The latter declaration create a variable local to the scope you are using.</p>\n\n<p>Try the following code to understand the differences:</p>\n\n<pre><code>external = 5;\nfunction firsttry() {\n  var external = 6;\n  alert(\"first Try: \" + external);\n}\n\nfunction secondtry() {\n  external = 7;\n  alert(\"second Try: \" + external);\n}\n\nalert(external); // Prints 5\nfirsttry(); // Prints 6\nalert(external); // Prints 5\nsecondtry(); // Prints 7\nalert(external); // Prints 7\n</code></pre>\n\n<p>The second function alters the value of the global variable \"external\", but the first function doesn't.</p>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p>The var keyword in Javascript is there for a purpose.</p>\n\n<p>If you declare a variable without the var keyword, like this:</p>\n\n<pre><code>myVar = 100;\n</code></pre>\n\n<p>It becomes a global variable that can be accessed from any part of your script. If you did not do it intentionally or are not aware of it, it can cause you pain if you re-use the variable name at another place in your javascript.</p>\n\n<p>If you declare the variable with the var keyword, like this:</p>\n\n<pre><code>var myVar = 100;\n</code></pre>\n\n<p>It is local to the scope ({] - braces, function, file, depending on where you placed it).</p>\n\n<p>This a safer way to treat variables. So unless you are doing it on purpose try to declare variable with the var keyword and not without.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Consider this question asked at StackOverflow today:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/2485032/simple-javascript-question/2485053\">Simple Javascript question</a></p>\n\n<p>A good test and a <strong>practical example</strong> is what happens in the above scenario...<br>\nThe developer used the name of the JavaScript function in one of his variables.</p>\n\n<p><strong>What's the problem with the code?</strong><br>\nThe code only works the first time the user clicks the button.</p>\n\n<p><strong>What's the solution?</strong><br>\nAdd the <code>var</code> keyword before the variable name.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There's a bit more to it than just local vs global.  Global variables created with <code>var</code> are different than those created without.  Consider this:</p>\n\n<pre><code>var foo = 1; // declared properly\nbar = 2; // implied global\nwindow.baz = 3; // global via window object\n</code></pre>\n\n<p>Based on the answers so far, these global variables, <code>foo</code>, <code>bar</code>, and <code>baz</code> are all equivalent.  This is <strong>not</strong> the case.  Global variables made with <code>var</code> are (correctly) assigned the internal <code>[[DontDelete]]</code> property, such that they cannot be deleted.</p>\n\n<pre><code>delete foo; // false\ndelete bar; // true\ndelete baz; // true\n\nfoo; // 1\nbar; // ReferenceError\nbaz; // ReferenceError\n</code></pre>\n\n<p>This is why you should <strong>always</strong> use <code>var</code>, even for global variables.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>This is one of the tricky parts of Javascript, but also one of its core features. A variable declared with <code>var</code> \"begins its life\" right where you declare it. If you leave out the <code>var</code>, it's like you're talking about a variable that you have used before.</p>\n\n<pre><code>var foo = 'first time use';\nfoo = 'second time use';\n</code></pre>\n\n<p>With regards to scope, it is <strong><em>not</em></strong> true that variables automatically become global. Rather, Javascript will traverse up the scope chain to see if you have used the variable before. If it finds an instance of a variable of the same name used before, it'll use that and whatever scope it was declared in. If it doesn't encounter the variable anywhere it'll eventually hit the global object (<code>window</code> in a browser) and will attach the variable to it.</p>\n\n<pre><code>var foo = \"I'm global\";\nvar bar = \"So am I\";\n\nfunction () {\n    var foo = \"I'm local, the previous 'foo' didn't notice a thing\";\n    var baz = \"I'm local, too\";\n\n    function () {\n        var foo = \"I'm even more local, all three 'foos' have different values\";\n        baz = \"I just changed 'baz' one scope higher, but it's still not global\";\n        bar = \"I just changed the global 'bar' variable\";\n        xyz = \"I just created a new global variable\";\n    }\n}\n</code></pre>\n\n<p>This behavior is really powerful when used with nested functions and callbacks. Learning about what <code>functions</code> are and how scope works is the most important thing in Javascript.</p>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<p>There's so much confusion around this subject, and none of the existing answers cover everything clearly and directly.  Here are some examples with comments inline.</p>\n\n<pre><code>//this is a declaration\nvar foo;\n\n//this is an assignment\nbar = 3;\n\n//this is a declaration and an assignment\nvar dual = 5;\n</code></pre>\n\n<p>A declaration sets a DontDelete flag.  An assignment does not.</p>\n\n<p>A declaration ties that variable to the current scope.</p>\n\n<p>A variable assigned but not declared will look for a scope to attach itself to.  That means it will traverse up the food-chain of scope until a variable with the same name is found.  If none is found, it will be attached to the top-level scope (which is commonly referred to as global).</p>\n\n<pre><code>function example(){\n  //is a member of the scope defined by the function example\n  var foo;\n\n  //this function is also part of the scope of the function example\n  var bar = function(){\n     foo = 12; // traverses scope and assigns example.foo to 12\n  }\n}\n\nfunction something_different(){\n     foo = 15; // traverses scope and assigns global.foo to 15\n}\n</code></pre>\n\n<p>For a very clear description of what is happening, this <a href=\"http://perfectionkills.com/understanding-delete/\">analysis of the delete function</a> covers variable instantiation and assignment extensively.  </p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p><em>Var</em> doesn't let you, the programmer, declare a variable because Javascript doesn't have variables. Javascript has objects. <em>Var</em> declares a name to an undefined object, explicitly. Assignment assigns a name as a handle to an object that has been given a value.</p>\n\n<p>Using <em>var</em> tells the Javacript interpreter two things:</p>\n\n<ol>\n<li><strong>not to use</strong> <em>delegation</em> reverse traversal look up value for the name, instead use this one</li>\n<li><strong>not to delete</strong> the name</li>\n</ol>\n\n<p>Omission of <em>var</em> tells the Javacript interpreter to use the first-found previous instance of an object with the same name. </p>\n\n<p>Var as a keyword arose from a poor decision by the language designer much in the same way that Javascript as a name arose from a poor decision. </p>\n\n<p>ps. Study the code examples above.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Check out this Fiddle: <a href=\"http://jsfiddle.net/GWr6Z/2/\" rel=\"nofollow\">http://jsfiddle.net/GWr6Z/2/</a></p>\n\n<pre><code>function doMe(){\n\na = \"123\"; // will be global\nvar b = \"321\"; // local to doMe\nalert(\"a:\"+a+\"  --  b:\"+b);\n\nb = \"something else\"; // still local (not global)\nalert(\"a:\"+a+\"  --  b:\"+b);\n\n};\n\n\ndoMe()\nalert(\"a:\"+a+\"  --  b:\"+b); // `b` will not be defined, check console.log\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I just found the answer from a forum referred by one of my colleague. Thanks in advance to him. If you declare a variable outside a function, it's always global. No matter if you use var keyword or not. But, if you declare the variable inside a function, it has a big difference. Inside a function, if you declare the variable using var keyword, it will be local, but if you declare the variable without var keyword, it will be global. It can overwrite your previously declared variables. - See more at: <a href=\"http://forum.webdeveloperszone.com/question/what-is-the-difference-between-using-var-keyword-or-not-using-var-during-variable-declaration/#sthash.xNnLrwc3.dpuf\" rel=\"nofollow\">http://forum.webdeveloperszone.com/question/what-is-the-difference-between-using-var-keyword-or-not-using-var-during-variable-declaration/#sthash.xNnLrwc3.dpuf</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is \"var\" optional?</p>\n\n<pre><code>myObj = 1;\n</code></pre>\n\n<p>same as ?</p>\n\n<pre><code>var myObj = 1;\n</code></pre>\n\n<p>I found they both work from my test, I assume <code>var</code> is optional. Is that right?</p>\n",
            "last_activity_date": 1424096635,
            "question_id": 2485423,
            "score": 148,
            "tags": [
                "javascript"
            ],
            "title": "Is using &#39;var&#39; to declare variables optional?"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Absolutely position divs over the text area with a z-index higher and give these divs a transparent gif background graphic.</p>\n\n<p>Note after a bit more thought - You'd need to have these 'covers' be linked so clicking on them would take you to where the tab was supposed to, which means you could/should do this with the anchor element set to display:box, width and height set as well as the transparent background image.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>images can be selected too.\nthere are limits to using javascript to deselect text, as it might happen even in places where you want to select.  To ensure a rich and successful career, steer clear of all requirements that need ability to influence or manage the browser beyond the ordinary... unless, of course, they are paying you extremely well.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For firefox you can apply the CSS declaration \"-moz-user-select\" to \"none\"\nCheck out their docs: <a href=\"http://developer.mozilla.org/En/CSS/-moz-user-select\">http://developer.mozilla.org/En/CSS/-moz-user-select</a></p>\n\n<p>It's a \"preview\" of the future \"user-select\" as they say, so maybe opera or webkit-based browsers will support that. I also recall finding something for IE, but don't remember what :).</p>\n\n<p>Anyway, unless it's a specific situation where text-selecting makes some dynamic functionality fail, you shouldn't really override what users are expecting from a webpage, and that is being able to select any text they want.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;\n\n/***********************************************\n* Disable Text Selection script- \u00a9 Dynamic Drive DHTML code library (www.dynamicdrive.com)\n* This notice MUST stay intact for legal use\n* Visit Dynamic Drive at http://www.dynamicdrive.com/ for full source code\n\n***********************************************/\n\n\nfunction disableSelection(target){\n\n    if (typeof target.onselectstart!=\"undefined\") //IE route\n        target.onselectstart=function(){return false}\n\n    else if (typeof target.style.MozUserSelect!=\"undefined\") //Firefox route\n        target.style.MozUserSelect=\"none\"\n\n    else //All other route (ie: Opera)\n        target.onmousedown=function(){return false}\n\n    target.style.cursor = \"default\"\n}\n\n\n\n//Sample usages\n//disableSelection(document.body) //Disable text selection on entire body\n//disableSelection(document.getElementById(\"mydiv\")) //Disable text selection on element with id=\"mydiv\"\n\n\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>EDIT</strong></p>\n\n<p>Code apparently comes from <a href=\"http://www.dynamicdrive.com\">http://www.dynamicdrive.com</a></p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>A good rule of thumb: Don't put text on the internet that you don't want copied.</p>\n\n<p>Edit: Didn't read the problem correctly.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>&lt;div onselectstart=\"return false\"&gt;some stuff&lt;/div&gt;\n</code></pre>\n\n<p>Simple, but effective... works in current versions of all major browsers.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>If it looks bad you can use CSS to change the appearance of selected sections.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For an example of why it might be desirable to suppress selection, see <a href=\"http://simile.mit.edu/timeline/\" rel=\"nofollow\">SIMILE TImeline</a>, which uses drag-and-drop to explore  the timeline, during which accidental vertical mouse movement causes the labels to be highlighted unexpectedly, which looks weird.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I'm finding some level of success with the CSS described here <a href=\"http://www.quirksmode.org/css/selection.html\">http://www.quirksmode.org/css/selection.html</a>:</p>\n\n<pre><code>::selection {\n    background-color: transparent;\n}\n</code></pre>\n\n<p>It took care of most of the issues I was having with some ThemeRoller <code>ul</code> elements in an AIR application (WebKit engine). Still getting a small (approx. 15 x 15) patch of nothingness that gets selected, but half the page was being selected before.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>For Safari, <code>-khtml-user-select: none</code>, just like Mozilla's <code>-moz-user-select</code> (or, in JavaScript, <code>target.style.KhtmlUserSelect=\"none\";</code>).</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The following works in Firefox interestingly enough if I remove the write line it doesn't work.\nAnyone have any insight why the write line is needed.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\ndocument.write(\".\");\ndocument.body.style.MozUserSelect='none';\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Any JavaScript or CSS method is easily circumvented with Firebug (like Flickr's case).</p>\n\n<p>You can use the <a href=\"http://www.quirksmode.org/css/selection.html\" rel=\"nofollow\"><code>::selection</code> pseudo-element</a> in CSS to alter the highlight color.</p>\n\n<p>If the tabs are links and the <a href=\"http://stackoverflow.com/questions/71074/how-to-remove-firefoxs-dotted-outline-on-buttons-as-well-as-links\">dotted rectangle in active state</a> is of concern, you can remove that too (consider usability of course).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In most browsers, this can be achieved using CSS:</p>\n\n<pre><code>*.unselectable {\n   -moz-user-select: -moz-none;\n   -khtml-user-select: none;\n   -webkit-user-select: none;\n\n   /*\n     Introduced in IE 10.\n     See http://ie.microsoft.com/testdrive/HTML5/msUserSelect/\n   */\n   -ms-user-select: none;\n   user-select: none;\n}\n</code></pre>\n\n<p>For IE &lt; 10 and Opera, you will need to use the <code>unselectable</code> attribute of the element you wish to be unselectable. You can set this using an attribute in HTML:</p>\n\n<pre><code>&lt;div id=\"foo\" unselectable=\"on\" class=\"unselectable\"&gt;...&lt;/div&gt;\n</code></pre>\n\n<p>Sadly this property isn't inherited, meaning you have to put an attribute in the start tag of every element inside the <code>&lt;div&gt;</code>. If this is a problem, you could instead use JavaScript to do this recursively for an element's descendants:</p>\n\n<pre><code>function makeUnselectable(node) {\n    if (node.nodeType == 1) {\n        node.setAttribute(\"unselectable\", \"on\");\n    }\n    var child = node.firstChild;\n    while (child) {\n        makeUnselectable(child);\n        child = child.nextSibling;\n    }\n}\n\nmakeUnselectable(document.getElementById(\"foo\"));\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 142
                },
                {
                    "body": "<p>No one here and posted an answer with all of the correct css variations, so here it is:</p>\n\n<pre><code>-webkit-touch-callout: none;\n-webkit-user-select: none;\n-khtml-user-select: none;\n-moz-user-select: none;\n-ms-user-select: none;\nuser-select: none;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<blockquote>\n  <p>\"If your content is really interesting, then there is little you can\n  ultimately do to protect it\"</p>\n</blockquote>\n\n<p>That's true, but most copying, in my experience, has nothing to do with \"ultimately\" or geeks or determined plagiarists or anything like that. It's usually casual copying by clueless people, and even a simple, easily defeated protection (easily defeated by folks like us, that is) works quite well to stop them. They don't know anything about \"view source\" or caches or anything else... heck, they don't even know what a web browser is or that they're using one.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There are many occasions when turning off selectability enhances the user experience.</p>\n\n<p>For instance allowing the user to copy a block of text on the page without copying the text of any interface elements associated with it (that would become interspersed within the text being copied).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's a sass mixin (scss) for those interested, compass/css3 doesn't seem to have a user-select mixin.</p>\n\n<pre><code>// @usage use within a rule\n// ex. img {@include user-select(none);}\n// @param assumed valid user-select value\n@mixin user-select($value)\n{\n    &amp; {\n        -webkit-touch-callout: $value;\n        -webkit-user-select: $value;\n        -khtml-user-select: $value;\n        -moz-user-select: $value;\n        -ms-user-select: $value;\n        user-select: $value;\n    }\n}\n</code></pre>\n\n<p>Tho compass would do it in a more robust way, i.e. only add support for venders you've chosen.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I'm building an html UI with some text elements, such as tab names, which look bad when selected.  Unfortunately, it's very easy for a user to double-click a tab name, which selects it by default in many browsers.</p>\n\n<p>I might be able to solve this with a javascript trick (I'd like to see those answers, too) -- but I'm really hoping there's something in css/html directly that works across all browsers.</p>\n",
            "last_activity_date": 1362643683,
            "question_id": 69430,
            "score": 84,
            "tags": [
                "javascript",
                "html",
                "css",
                "cross-browser",
                "textselection"
            ],
            "title": "Is there a way to make text unselectable on an html page?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>According to the state machine diagram on the <a href=\"http://www.json.org/\">JSON website</a>, only escaped double-quote characters are allowed, not single-quotes. Single quote characters do not need to be escaped:</p>\n\n<p><img src=\"http://i.stack.imgur.com/15Kqv.gif\" alt=\"http://www.json.org/string.gif\"></p>\n\n<p><br />\n<b>Update</b> - More information for those that are interested:</p>\n\n<hr />\n\n<p>Douglas Crockford does not specifically say why the JSON specification does not allow escaped single quotes within strings. However, during his discussion of JSON in <a href=\"http://oreilly.com/javascript/excerpts/javascript-good-parts/json.html\">Appendix E of JavaScript: The Good Parts</a>, he writes:</p>\n\n<blockquote>\n  <p>JSON's design goals were to be minimal, portable, textual, and a subset of JavaScript. The less we need to agree on in order to interoperate, the more easily we can interoperate.</p>\n</blockquote>\n\n<p>So perhaps he decided to only allow strings to be defined using double-quotes since this is one less rule that all JSON implementations must agree on. As a result, it is impossible for a single quote character within a string to accidentally terminate the string, because by definition a string can only be terminated by a double-quote character. Hence there is no need to allow escaping of a single quote character in the formal specification.</p>\n\n<p><hr />\nDigging a little bit deeper, Crockford's <a href=\"http://www.json.org/java/index.html\">org.json</a> implementation of JSON for Java is more permissible and <em>does</em> allow single quote characters:</p>\n\n<blockquote>\n  <p>The texts produced by the toString methods strictly conform to the JSON syntax rules. The constructors are more forgiving in the texts they will accept:</p>\n  \n  <p>...</p>\n  \n  <ul>\n  <li>Strings may be quoted with ' (single quote).</li>\n  </ul>\n</blockquote>\n\n<p>This is confirmed by the <a href=\"https://github.com/douglascrockford/JSON-java/blob/master/JSONTokener.java\">JSONTokener</a> source code. The <code>nextString</code> method accepts escaped single quote characters and treats them just like double-quote characters:</p>\n\n<pre><code>public String nextString(char quote) throws JSONException {\n    char c;\n    StringBuffer sb = new StringBuffer();\n    for (;;) {\n        c = next();\n        switch (c) {\n\n        ...\n\n        case '\\\\':\n            c = this.next();\n            switch (c) {\n\n            ...\n\n            case '\"':\n            case '\\'':\n            case '\\\\':\n            case '/':\n                sb.append(c);\n                break;\n        ...\n</code></pre>\n\n<p>At the top of the method is an informative comment:</p>\n\n<blockquote>\n  <p>The formal JSON format does not allow strings in single quotes, but an implementation is allowed to accept them.</p>\n</blockquote>\n\n<p>So some implementations will accept single quotes - but you should not rely on this. Many popular implementations are quite restrictive in this regard and will reject JSON that contains single quoted strings and/or escaped single quotes.</p>\n\n<hr />\n\n<p>Finally to tie this back to the original question, <a href=\"http://code.jquery.com/jquery-latest.js\"><code>jQuery.parseJSON</code></a> first attempts to use the browser's native JSON parser or a loaded library such as <a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\">json2.js</a> where applicable (which on a side note is the library the jQuery logic is based on if <code>JSON</code> is not defined). Thus jQuery can only be as permissive as that underlying implementation:</p>\n\n<pre><code>parseJSON: function( data ) {\n    ...\n\n    // Attempt to parse using the native JSON parser first\n    if ( window.JSON &amp;&amp; window.JSON.parse ) {\n        return window.JSON.parse( data );\n    }\n\n    ...\n\n    jQuery.error( \"Invalid JSON: \" + data );\n},\n</code></pre>\n\n<p>As far as I know these implementations only adhere to the official JSON specification and do not accept single quotes, hence neither does jQuery.</p>\n",
                    "is_accepted": true,
                    "score": 214
                },
                {
                    "body": "<p>Interesting. How are you generating your JSON on the server end? Are you using a library function (such as <code>json_encode</code> in PHP), or are you building the JSON string by hand?</p>\n\n<p>The only thing that grabs my attention is the escape apostrophe (<code>\\'</code>). Seeing as you're using double quotes, as you indeed should, there is no need to escape single quotes. I can't check if that is indeed the cause for your jQuery error, as I haven't updated to version 1.4.1 myself yet.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you need a single quote inside of a string, since \\' is undefined by the spec, use <code>\\u0027</code>   see <a href=\"http://www.utf8-chartable.de/\">http://www.utf8-chartable.de/</a> for all of them</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>When You are sending a single quote in a query</p>\n\n<pre><code>empid = \" T'via\"\nempid =escape(empid)\n</code></pre>\n\n<p>When You get the value including a single quote</p>\n\n<pre><code>var xxx  = request.QueryString(\"empid\")\nxxx= unscape(xxx)\n</code></pre>\n\n<p>If you want to search/ insert the value which includes a single quote in a query\nxxx=Replace(empid,\"'\",\"''\")</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I understand where the problem lies and when I look at the specs its clear that unescaped single quotes should be parsed correctly.</p>\n\n<p>I am using jquery`s jQuery.parseJSON function to parse the JSON string but still getting the parse error when there is a single quote in the data that is prepared with json_encode.</p>\n\n<p>Could it be a mistake in my implementation that looks like this (PHP - server side):</p>\n\n<pre><code>$data = array();\n\n$elem = array();\n$elem['name'] = 'Erik';\n$elem['position'] = 'PHP Programmer';\n$data[] = json_encode($elem);\n\n$elem = array();\n$elem['name'] = 'Carl';\n$elem['position'] = 'C Programmer';\n$data[] = json_encode($elem);\n\n$jsonString = \"[\" . implode(\", \", $data) . \"]\";\n</code></pre>\n\n<p>The final step is that I store the JSON encoded string into an JS variable:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nemployees = jQuery.parseJSON('&lt;?=$marker; ?&gt;');\n&lt;/script&gt;\n</code></pre>\n\n<p>If I use \"\" instead of '' it still throws an error.</p>\n\n<p><strong>SOLUTION:</strong></p>\n\n<p>The only thing that worked for me was to use bitmask JSON_HEX_APOS to convert the single quotes like this:</p>\n\n<pre><code>json_encode($tmp, JSON_HEX_APOS);\n</code></pre>\n\n<p>Is there another way of tackle this issue? Is my code wrong or poorly written?</p>\n\n<p>Thanks</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Striking a similar issue using CakePHP to output a Javascript scriptblock using PHP's native json_encode. $contractorCompanies contains values that have single quotation marks and as explained above and expected json_encode($contractorCompanies) doesn't escape them because its valid JSON.</p>\n\n<pre><code>&lt;?php $this-&gt;Html-&gt;scriptBlock(\"var contractorCompanies = jQuery.parseJSON( '\".(json_encode($contractorCompanies).\"' );\"); ?&gt;\n</code></pre>\n\n<p>By adding addslashes() around the JSON encoded string you then escape the quotation marks allowing Cake / PHP to echo the correct javascript to the browser. JS errors disappear.</p>\n\n<pre><code>&lt;?php $this-&gt;Html-&gt;scriptBlock(\"var contractorCompanies = jQuery.parseJSON( '\".addslashes(json_encode($contractorCompanies)).\"' );\"); ?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm making requests to my server using <code>jQuery.post()</code> and my server is returning JSON objects (like <code>{ \"var\": \"value\", ... }</code>. However, if any of the values contains a single quote (properly escaped like <code>\\'</code>), jQuery fails to parse an otherwise valid JSON string. Here's an example of what I mean (done in Chrome's Console):</p>\n\n<p><img src=\"http://i498.photobucket.com/albums/rr348/Znupi2/Screenshot-1.png\" alt=\"Chrome Console\"></p>\n\n<p>Is this normal? Is there no way to properly pass a single quote via JSON?</p>\n",
            "last_activity_date": 1422343057,
            "question_id": 2275359,
            "score": 121,
            "tags": [
                "javascript",
                "ajax",
                "json",
                "jquery"
            ],
            "title": "jQuery single quote in JSON response"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<pre><code>$('body').click(function(){ alert('test' )})\n\nvar foo = $.data( $('body').get(0), 'events' ).click\n// you can query $.data( object, 'events' ) and get an object back, then see what events are attached to it.\n\n$.each( foo, function(i,o) {\n    alert(i) // guid of the event\n    alert(o) // the function definition of the event handler\n});\n</code></pre>\n\n<p>You can inspect by feeding the object reference ( not the jQuery object though ) to $.data, and for the second argument feed 'events' and that will return an object populated with all the events such as 'click'. You can loop through that object and see what the event handler does.</p>\n",
                    "is_accepted": true,
                    "score": 95
                },
                {
                    "body": "<p>use <strong><a href=\"http://www.codenothing.com/archives/jquery/event-filter/\">jquery event filter</a></strong></p>\n\n<p>you can use it like this</p>\n\n<pre><code>$(\"a:Event(click)\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I wrote a plugin called <strong><a href=\"http://github.com/sebastien-p/jquery.hasEventListener\" rel=\"nofollow\">hasEventListener</a></strong> which exactly does that.</p>\n\n<p>Hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You may use:</p>\n\n<pre><code>$(\"#foo\").unbind('click');\n</code></pre>\n\n<p>to make sure all click events are unbinded, then attach your event</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Below code will provide you with all the click events on given selector:</p>\n\n<pre><code>jQuery(selector).data('events').click\n</code></pre>\n\n<p>You can iterate over it using each or for ex. check the length for validation like:</p>\n\n<pre><code>jQuery(selector).data('events').click.length\n</code></pre>\n\n<p>Thought it would help someone. :)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's how to check if any event exists for an element</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.8.0/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script&gt;\n    $(function() {\n        $(\"#textDiv\").click(function() {\n            //Event Handling\n        });\n        var events = $._data(document.getElementById('textDiv'), \"events\");\n        var hasEvents = (events != null);\n    });\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"textDiv\"&gt;Text&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I ended up doing this</p>\n\n<pre><code>typeof ($('#mySelector').data('events').click) == \"object\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have answered to similar question here: \n<a href=\"http://stackoverflow.com/questions/1236067/test-if-event-handler-is-bound-to-an-element-in-jquery/24855970#24855970\">hasHandlers() helper</a></p>\n\n<p>Work with jQuery >= v1.11.0</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is there a way to check if an event exists in jQuery? I'm working on a plugin that uses custom namespaced events, and would like to be able to check if the event is binded to an element or not.</p>\n",
            "last_activity_date": 1405900145,
            "question_id": 1515069,
            "score": 112,
            "tags": [
                "javascript",
                "jquery",
                "javascript-events",
                "event-triggers"
            ],
            "title": "jQuery check if event exists on element"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<pre><code>var item = items[Math.floor(Math.random()*items.length)];\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 414
                },
                {
                    "body": "<pre><code>var rndval=items[Math.floor(Math.random()*items.length)];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>var random = items[Math.floor(Math.random()*items.length)]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>jQuery is JavaScript! It's just a JavaScript framework. So to find a random item, just use plain old JavaScript, for example,</p>\n\n<pre><code>var randomItem = items[Math.floor(Math.random()*items.length)]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>var items = Array(523,3452,334,31,...5346);\n\nfunction rand(min, max) {\n  var offset = min;\n  var range = (max - min) + 1;\n\n  var randomNumber = Math.floor( Math.random() * range) + offset;\n  return randomNumber;\n}\n\n\nrandomNumber = rand(0, items.length - 1);\n\nrandomItem = items[randomNumber];\n</code></pre>\n\n<p>credit: <a href=\"http://www.earn-web-cash.com/2008/02/24/random-number-function/\">http://www.earn-web-cash.com/2008/02/24/random-number-function/</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you really <em>must</em> use jQuery to solve this problem:</p>\n\n<pre><code>(function($) {\n    $.rand = function(arg) {\n        if ($.isArray(arg)) {\n            return arg[$.rand(arg.length)];\n        } else if (typeof arg === \"number\") {\n            return Math.floor(Math.random() * arg);\n        } else {\n            return 4;  // chosen by fair dice roll\n        }\n    };\n})(jQuery);\n\nvar items = [523, 3452, 334, 31, ..., 5346];\nvar item = $.rand(items);\n</code></pre>\n\n<p>This plugin will return a random element if given an array, or a value from [0 .. n) given a number, or given anything else, a guaranteed random value!</p>\n\n<p>For extra fun, the array return is generated by calling the function recursively based on the array's length :)</p>\n\n<p>Working demo at <a href=\"http://jsfiddle.net/2eyQX/\">http://jsfiddle.net/2eyQX/</a></p>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>An alternate way would be to add a method to the Array prototype:</p>\n\n<pre><code> Array.prototype.random = function (length) {\n       return this[Math.floor((Math.random()*length))];\n }\n\n var teams = ['patriots', 'colts', 'jets', 'texans', 'ravens', 'broncos']\n var chosen_team = teams.random(teams.length)\n alert(chosen_team)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use underscore (or loDash :)):</p>\n\n<pre><code>var randomArray = [\n   '#cc0000','#00cc00', '#0000cc'\n];\n\n// use _.sample\nvar randomElement = _.sample(randomArray);\n\n// manually use _.random\nvar randomElement = randomArray[_.random(randomArray.length-1)];\n</code></pre>\n\n<p>Or to shuffle an entire array:</p>\n\n<pre><code>// use underscore's shuffle function\nvar firstRandomElement = _.shuffle(randomArray)[0];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>// 1. Random shuffle items\nitems.sort(function() {return 0.5 - Math.random()})\n\n// 2. Get first item\nvar item = items[1]\n</code></pre>\n\n<p>Shorter:</p>\n\n<pre><code>var item = items.sort(function() {return 0.5 - Math.random()})[1];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>Array.prototype.random = function () {\n  return this[Math.random() * this.length | 0];\n};\n\nArray.prototype.pick = function (i) {\n  return this.splice(i &gt;= 0 ? i : Math.random() * this.length | 0, 1)[0];\n};\n\nArray.prototype.shuffle = function () {\n  for (var i = this.length; i &gt; 0; --i)\n    this.push(this.splice(Math.random() * i | 0, 1)[0]);\n  return this;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Here's yet another way:</p>\n\n<pre><code>function rand(items){\n    return items[~~(Math.random() * items.length)];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>1. solution: define Array prototype</strong></p>\n\n<pre><code>Array.prototype.random = function () {\n  return this[Math.floor((Math.random()*this.length))];\n}\n</code></pre>\n\n<p>that will work on inline arrays</p>\n\n<pre><code>[2,3,5].random()\n</code></pre>\n\n<p>and of course predefined arrays</p>\n\n<pre><code>list = [2,3,5]\nlist.random()\n</code></pre>\n\n<p><strong>2. solution: define custom function that accepts list and returns element</strong></p>\n\n<pre><code>    get_random = function (list) {\n      return list[Math.floor((Math.random()*list.length))];\n    } \n\n    get_random([2,3,5])\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<pre><code>var items = Array(523,3452,334,31,...5346);\n</code></pre>\n\n<p>How do I get random item from <code>items</code>?</p>\n\n<p>I am using jQuery, so answers involving jQuery are welcome.</p>\n",
            "last_activity_date": 1418812278,
            "question_id": 5915096,
            "score": 171,
            "tags": [
                "javascript",
                "arrays",
                "random"
            ],
            "title": "Get random item from JavaScript array"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>This is from the lovely javascript-library mootools:</p>\n\n<pre><code>if (obj.nodeName){\n    switch (obj.nodeType){\n    case 1: return 'element';\n    case 3: return (/\\S/).test(obj.nodeValue) ? 'textnode' : 'whitespace';\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I think that what you have to do is make a thorough check of some properties that will always be in a dom element, but their combination won't <em>most likely</em> be in another object, like so:</p>\n\n<pre><code>var isDom = function (inp) {\n    return inp &amp;&amp; inp.tagName &amp;&amp; inp.nodeName &amp;&amp; inp.ownerDocument &amp;&amp; inp.removeAttribute;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could try appending it to a real DOM node...</p>\n\n<pre><code>function isDom(obj)\n{\n    var elm = document.createElement('div');\n    try\n    {\n        elm.appendChild(obj);\n    }\n    catch (e)\n    {\n        return false;\n    }\n\n    return true;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This might be of interest:</p>\n\n<pre><code>function isElement(obj) {\n  try {\n    //Using W3 DOM2 (works for FF, Opera and Chrom)\n    return obj instanceof HTMLElement;\n  }\n  catch(e){\n    //Browsers not supporting W3 DOM2 don't have HTMLElement and\n    //an exception is thrown and we end up here. Testing some\n    //properties that all elements have. (works on IE7)\n    return (typeof obj===\"object\") &amp;&amp;\n      (obj.nodeType===1) &amp;&amp; (typeof obj.style === \"object\") &amp;&amp;\n      (typeof obj.ownerDocument ===\"object\");\n  }\n}\n</code></pre>\n\n<p>It's part of the <a href=\"http://www.w3.org/TR/2003/REC-DOM-Level-2-HTML-20030109/html.html\">DOM, Level2</a></p>\n\n<p><strong>Update 2</strong>: This is how I implemented it in my own library:\n(The previous code didn't work in Chrome because Node and HTMLElement are functions instead of the expected object. This code is tested in FF3, IE7, Chrome 1 and Opera 9)</p>\n\n<pre><code>//Returns true if it is a DOM node\nfunction isNode(o){\n  return (\n    typeof Node === \"object\" ? o instanceof Node : \n    o &amp;&amp; typeof o === \"object\" &amp;&amp; typeof o.nodeType === \"number\" &amp;&amp; typeof o.nodeName===\"string\"\n  );\n}\n\n//Returns true if it is a DOM element    \nfunction isElement(o){\n  return (\n    typeof HTMLElement === \"object\" ? o instanceof HTMLElement : //DOM2\n    o &amp;&amp; typeof o === \"object\" &amp;&amp; o !== null &amp;&amp; o.nodeType === 1 &amp;&amp; typeof o.nodeName===\"string\"\n);\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 114
                },
                {
                    "body": "<p>In Firefox, you can use the <code>instanceof Node</code>. That <code>Node</code> is defined in <a href=\"http://www.w3.org/TR/2000/WD-DOM-Level-1-20000929/level-one-core.html#ID-1950641247\" rel=\"nofollow\">DOM1</a>.</p>\n\n<p>But that is not that easy in IE.</p>\n\n<ol>\n<li>\"instanceof ActiveXObject\" only can tell that it is a native object.</li>\n<li>\"typeof document.body.appendChild=='object'\" tell that it may be DOM object, but also can be something else have same function.</li>\n</ol>\n\n<p>You can only ensure it is DOM element by using DOM function and catch if any exception. However, it may have side effect (e.g. change object internal state/performance/memory leak)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>All solutions above and below (my solution including) suffer from possibility of being incorrect, especially on IE &mdash; it is quite possible to (re)define some objects/methods/properties to mimic a DOM node rendering the test invalid.</p>\n\n<p>So usually I use the duck-typing-style testing: I test specifically for things I use. For example, if I want to clone a node I test it like this:</p>\n\n<pre><code>if(typeof node == \"object\" &amp;&amp; \"nodeType\" in node &amp;&amp;\n   node.nodeType === 1 &amp;&amp; node.cloneNode){\n  // most probably this is a DOM node, we can clone it safely\n  clonedNode = node.cloneNode(false);\n}\n</code></pre>\n\n<p>Basically it is a little sanity check + the direct test for a method (or a property) I am planning to use.</p>\n\n<p>Incidentally the test above is a good test for DOM nodes on all browsers. But if you want to be on the safe side always check the presence of methods and properties and verify their types.</p>\n\n<p><strong>EDIT:</strong> IE uses ActiveX objects to represent nodes, so their properties do not behave as true JavaScript object, for example:</p>\n\n<pre><code>console.log(typeof node.cloneNode);              // object\nconsole.log(node.cloneNode instanceof Function); // false\n</code></pre>\n\n<p>while it should return \"function\" and <code>true</code> respectively. The only way to test methods is to see if the are defined.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>old thread, but here's an updated possibility for <strong>ie8 and ff3.5</strong> users:</p>\n\n<pre><code>function isHTMLElement(o){\n    return (o.constructor.toString().search(/\\object HTML.+Element/)&gt;-1)?true:false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Perhaps this is an alternative? Tested in Opera 11, FireFox 6, Internet Explorer 8, Safari 5 and Google Chrome 16.</p>\n\n<pre><code>function isDOMNode(v) {\n  if ( v===null ) return false;\n  if ( typeof v!=='object' ) return false;\n  if ( !('nodeName' in v) ) return false; \n\n  var nn = v.nodeName;\n  try {\n    // DOM node property nodeName is readonly.\n    // Most browsers throws an error...\n    v.nodeName = 'is readonly?';\n  } catch (e) {\n    // ... indicating v is a DOM node ...\n    return true;\n  }\n  // ...but others silently ignore the attempt to set the nodeName.\n  if ( v.nodeName===nn ) return true;\n  // Property nodeName set (and reset) - v is not a DOM node.\n  v.nodeName = nn;\n\n  return false;\n}\n</code></pre>\n\n<p>Function won't be fooled by e.g. this </p>\n\n<pre><code>isDOMNode( {'nodeName':'fake'} ); // returns false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var isElement = function(e){\n    try{\n        // if e is an element attached to the DOM, we trace its lineage and use native functions to confirm its pedigree\n        var a = [e], t, s, l = 0, h = document.getElementsByTagName('HEAD')[0], ht = document.getElementsByTagName('HTML')[0];\n        while(l!=document.body&amp;&amp;l!=h&amp;&amp;l.parentNode) l = a[a.push(l.parentNode)-1];\n        t = a[a.length-1];\n        s = document.createElement('SCRIPT');   // safe to place anywhere and it won't show up\n        while(a.length&gt;1){  // assume the top node is an element for now...\n            var p = a.pop(),n = a[a.length-1];\n            p.insertBefore(s,n);\n        }\n        if(s.parentNode)s.parentNode.removeChild(s);\n        if(t!=document.body&amp;&amp;t!=h&amp;&amp;t!=ht)\n            // the top node is not attached to the document, so we don't have to worry about it resetting any dynamic media\n            // test the top node\n            document.createElement('DIV').appendChild(t).parentNode.removeChild(t);\n        return e;\n    }\n    catch(e){}\n    return null;\n}\n</code></pre>\n\n<p>I tested this on Firefox, Safari, Chrome, Opera and IE9. I couldn't find a way to hack it.<br>\nIn theory, it tests every ancestor of the proposed element, as well as the element itself, by inserting a script tag before it.<br>\nIf its first ancestor traces back to a known element, such as <code>&lt;html&gt;</code>, <code>&lt;head&gt;</code> or <code>&lt;body&gt;</code>, and it hasn't thrown an error along the way, we have an element.<br>\nIf the first ancestor is not attached to the document, we create an element and attempt to place the proposed element inside of it, (and then remove it from the new element).<br>\nSo it either traces back to a known element, successfully attaches to a known element or fails.<br>\nIt returns the element or null if it is not an element.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You can see if the object or node in question returns a string type.</p>\n\n<pre><code>typeof (array).innerHTML === \"string\" =&gt; false\ntypeof (object).innerHTML === \"string\" =&gt; false\ntypeof (number).innerHTML === \"string\" =&gt; false\ntypeof (text).innerHTML === \"string\" =&gt; false\n\n//any DOM element will test as true\ntypeof (HTML object).innerHTML === \"string\" =&gt; true\ntypeof (document.createElement('anything')).innerHTML === \"string\" =&gt; true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is what I figured out:</p>\n\n<pre><code>var isHTMLElement = (function () {\n    if (\"HTMLElement\" in window) {\n        // Voil\u00e0. Quick and easy. And reliable.\n        return function (el) {return el instanceof HTMLElement;};\n    } else if ((document.createElement(\"a\")).constructor) {\n        // We can access an element's constructor. So, this is not IE7\n        var ElementConstructors = {}, nodeName;\n        return function (el) {\n            return el &amp;&amp; typeof el.nodeName === \"string\" &amp;&amp;\n                 (el instanceof ((nodeName = el.nodeName.toLowerCase()) in ElementConstructors \n                    ? ElementConstructors[nodeName] \n                    : (ElementConstructors[nodeName] = (document.createElement(nodeName)).constructor)))\n        }\n    } else {\n        // Not that reliable, but we don't seem to have another choice. Probably IE7\n        return function (el) {\n            return typeof el === \"object\" &amp;&amp; el.nodeType === 1 &amp;&amp; typeof el.nodeName === \"string\";\n        }\n    }\n})();\n</code></pre>\n\n<p>To improve performance I created a self-invoking function that tests the browser's capabilities only once and assigns the appropriate function accordingly. </p>\n\n<p>The first test should work in most modern browsers and was already discussed here. It just tests if the element is an instance of <code>HTMLElement</code>. Very straightforward.</p>\n\n<p>The second one is the most interesting one. This is its core-functionality:</p>\n\n<pre><code>return el instanceof (document.createElement(el.nodeName)).constructor\n</code></pre>\n\n<p>It tests whether el is an instance of the construcor it pretends to be. To do that, we need access to an element's contructor. That's why we're testing this in the if-Statement. IE7 for example fails this, because <code>(document.createElement(\"a\")).constructor</code> is <code>undefined</code> in IE7.</p>\n\n<p>The problem with this approach is that <code>document.createElement</code> is really not the fastest function and could easily slow down your application if you're testing a lot of elements with it. To solve this, I  decided to cache the constructors. The object <code>ElementConstructors</code> has nodeNames as keys with its corresponding constructors as values. If a constructor is already cached, it uses it from the cache, otherwise it creates the Element, caches its constructor for future access and then tests against it.</p>\n\n<p>The third test is the unpleasant fallback. It tests whether el is an <code>object</code>, has a <code>nodeType</code> property set to <code>1</code> and a string as <code>nodeName</code>. This is not very reliable of course, yet the vast majority of users shouldn't even fall back so far.</p>\n\n<p>This is the most reliable approach I came up with while still keeping performance as high as possible.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The easiest and cross-browser way to detect if an element is part of HTML DOM is as below:</p>\n\n<pre><code>function inHTMLDom(myelement){\n    if(myelement.ownerDocument.documentElement.tagName.toLowerCase()==\"html\"){\n        return true;\n    }else{\n        return false;\n    }\n}\n\ninHTMLDom(&lt;your element&gt;); // &lt;your element&gt;:element you are interested in checking.\n</code></pre>\n\n<p>tested in IE6,IE7,IE8,IE9,IE10,FF,Chrome,Safari,Opera.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>here's a trick using jQuery</p>\n\n<pre><code>var obj = {};\nvar element = document.getElementById('myId'); // or simply $(\"#myId\")\n\n$(obj).html() == undefined // true\n$(element).html() == undefined // false\n</code></pre>\n\n<p>so putting it in a function:</p>\n\n<pre><code>function isElement(obj){\n\n   return (typeOf obj === 'object' &amp;&amp; !($(obj).html() == undefined));\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>The using the root detection found <a href=\"http://stackoverflow.com/questions/223991/how-can-i-get-the-window-object-that-an-html-node-belongs-to-using-javascript\" title=\"how-can-i-get-the-window-object-that-an-html-node-belongs-to\">here</a>, we can determine whether e.g. <em>alert</em> is a member of the object's root, which is then likely to be a window:</p>\n\n<pre><code>function isInAnyDOM(o) { \n  return (o !== null) &amp;&amp; !!(o.ownerDocument &amp;&amp; (o.ownerDocument.defaultView || o.ownerDocument.parentWindow).alert); // true|false\n}\n</code></pre>\n\n<p>To determine whether the object is the current window is even simpler:</p>\n\n<pre><code>function isInCurrentDOM(o) { \n  return (o !== null) &amp;&amp; !!o.ownerDocument &amp;&amp; (window === (o.ownerDocument.defaultView || o.ownerDocument.parentWindow)); // true|false\n}\n</code></pre>\n\n<p>This seems to be less expensive than the try/catch solution in the opening thread.</p>\n\n<p>Don P</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>var IsPlainObject = function ( obj ) { return obj instanceof Object &amp;&amp; ! ( obj instanceof Function || obj.toString( ) !== '[object Object]' || obj.constructor.name !== 'Object' ); },\n    IsDOMObject = function ( obj ) { return obj instanceof EventTarget; },\n    IsDOMElement = function ( obj ) { return obj instanceof Node; },\n    IsListObject = function ( obj ) { return obj instanceof Array || obj instanceof NodeList; },\n</code></pre>\n\n<p>// In fact I am more likely t use these inline, but sometimes it is good to have these shortcuts for setup code</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Test if <code>obj</code> inherits from <a href=\"https://developer.mozilla.org/en/docs/Web/API/Node\" rel=\"nofollow\">Node</a>.</p>\n\n<pre><code>if (obj instanceof Node){\n    // obj is a DOM Object\n}\n</code></pre>\n\n<p>Node is a basic <a href=\"https://developer.mozilla.org/en-US/docs/DOM/DOM_Reference\" rel=\"nofollow\">Interface</a> from which HTMLElement and Text inherit.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Not to hammer on this or anything but for ES5-compliant browsers why not just:</p>\n\n<pre><code>function isDOM(e) {\n  return (/HTML(?:.*)Element/).test(Object.prototype.toString.call(e).slice(8, -1));\n}\n</code></pre>\n\n<p>Won't work on TextNodes and not sure about Shadow DOM or DocumentFragments etc. but <em>will</em> work on almost all HTML tag elements.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This could be helpful: <strong><a href=\"http://jherax.github.io/#isdom-object\" rel=\"nofollow\">isDOM</a></strong></p>\n\n<pre><code>//-----------------------------------\n// Determines if the @obj parameter is a DOM element\nfunction isDOM (obj) {\n    // DOM, Level2\n    if (\"HTMLElement\" in window) {\n        return (!!obj &amp;&amp; obj instanceof HTMLElement);\n    }\n    // Older browsers\n    return (!!obj &amp;&amp; typeof obj === \"object\" &amp;&amp; obj.nodeType === 1 &amp;&amp; !!obj.nodeName);\n}\n</code></pre>\n\n<p>In the code above, we use the <strong>double negation</strong> operator to get the boolean value of the object passed as argument, this way we ensure that each expression evaluated in the conditional statement be boolean, taking advantage of the <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Logical_Operators#Short-Circuit_Evaluation\" rel=\"nofollow\">Short-Circuit Evaluation</a></strong>, thus the function returns <code>true</code> or <code>false</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>How about <a href=\"https://lodash.com/docs#isElement\" rel=\"nofollow\">Lo-Dash's <code>_.isElement</code></a>?</p>\n\n<pre><code>$ npm install lodash.iselement\n</code></pre>\n\n<p>And in the code:</p>\n\n<pre><code>var isElement = require(\"lodash.iselement\");\nisElement(document.body);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For the ones using Angular:</p>\n\n<pre><code>angular.isElement\n</code></pre>\n\n<p><a href=\"https://docs.angularjs.org/api/ng/function/angular.isElement\" rel=\"nofollow\">https://docs.angularjs.org/api/ng/function/angular.isElement</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm trying to get:</p>\n\n<pre><code>document.createElement('div')  //=&gt; true\n{tagName: 'foobar something'}  //=&gt; false\n</code></pre>\n\n<p>In my own scripts, I used to just use this since I never needed <code>tagName</code> as a property:</p>\n\n<pre><code>if (!object.tagName) throw ...;\n</code></pre>\n\n<p>So for the 2nd object, I came up with the following as a quick solution -- which mostly works. ;)</p>\n\n<p>Problem is, it depends on browsers enforcing read-only properties, which not all do.</p>\n\n<pre><code>function isDOM(obj) {\n  var tag = obj.tagName;\n  try {\n    obj.tagName = '';  // read-only for DOM, should throw exception\n    obj.tagName = tag; // restore for normal objects\n    return false;\n  } catch (e) {\n    return true;\n  }\n}\n</code></pre>\n\n<p>Does anyone know a good substitute?</p>\n",
            "last_activity_date": 1419942122,
            "question_id": 384286,
            "score": 83,
            "tags": [
                "javascript",
                "dom",
                "object"
            ],
            "title": "Javascript isDOM -- How do you check if a Javascript Object is a DOM Object?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Have you considered using jQuery to avoid all the browser detection?  With jQuery, it would be as simple as:</p>\n\n<pre><code>$(\"#mytest1\").click();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>Here's what I cooked up. It's pretty simple, but it works:</p>\n\n<pre><code>function eventFire(el, etype){\n  if (el.fireEvent) {\n    el.fireEvent('on' + etype);\n  } else {\n    var evObj = document.createEvent('Events');\n    evObj.initEvent(etype, true, false);\n    el.dispatchEvent(evObj);\n  }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 87
                },
                {
                    "body": "<p>The top answer is the best!  However, it was not triggering mouse events for me in Firefox when etype = 'click' :(</p>\n\n<pre><code>function eventFire(el, etype){\n  if (el.fireEvent) {\n    el.fireEvent('on' + etype);\n  } else {\n    var evObj = document.createEvent('MouseEvents');\n    evObj.initEvent(etype, true, false);\n    var canceled = !el.dispatchEvent(evObj);\n    if (canceled) {\n      // A handler called preventDefault.\n      console.log(\"automatic click canceled\");\n    } else {\n      // None of the handlers called preventDefault.\n    } \n  }\n}\n</code></pre>\n\n<p>So - I changed the document.createEvent to 'MouseEvents' and that fixed the problem. The extra code is to test whether or not another bit of code was interfering with the event, and if it was cancelled I would log that to console.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What about something simple like:</p>\n\n<pre><code>document.getElementById('elementID').click();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I'm just wondering how I can use JavaScript to simulate a click on an element.</p>\n\n<p>Currently I have: </p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction simulateClick(control)\n{\n    if (document.all)\n    {\n        control.click();\n    }\n    else\n    {\n        var evObj = document.createEvent('MouseEvents');\n        evObj.initMouseEvent('click', true, true, window, 1, 12, 345, 7, 220, false, false, true, false, 0, null );\n        control.dispatchEvent(evObj);\n    }\n}\n&lt;/script&gt;\n\n&lt;a href=\"http://www.google.com\" id=\"mytest1\"&gt;test 1&lt;/a&gt;&lt;br&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    simulateClick(document.getElementById('mytest1'));\n&lt;/script&gt;\n</code></pre>\n\n<p>But it's not working :(</p>\n\n<p>Any ideas?</p>\n",
            "last_activity_date": 1410519993,
            "question_id": 2705583,
            "score": 45,
            "tags": [
                "javascript"
            ],
            "title": "How to simulate a click with JavaScript?"
        },
        {
            "answer_count": 32,
            "answers": [
                {
                    "body": "<p>You can re-enable the select object on submit.</p>\n\n<p><strong>EDIT</strong>: i.e., normally disabling the select tag (with the disabled attribute) and then re-enabling it automatically just before submiting the form:</p>\n\n<p>Example with jQuery:</p>\n\n<ul>\n<li><p>To disable it:</p>\n\n<pre><code>$('#yourSelect').attr('disabled', true);\n</code></pre></li>\n<li><p>To re-enable it before submission so that GET / POST data is included:</p>\n\n<pre><code>$('#yourForm').on('submit', function() {\n    $('#yourSelect').attr('disabled', false);\n});\n</code></pre></li>\n</ul>\n\n<p>In addition, you could it with every disabled input or select:</p>\n\n<pre><code>$('#yourForm').on('submit', function() {\n    $('input, select').attr('disabled', false);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>You should keep the <code>select</code> element <code>disabled</code> but also add another hidden <code>input</code> with the same name and value.</p>\n\n<p>If you reenable your SELECT, you should copy it's value to the hidden input in an onchange event.</p>\n",
                    "is_accepted": true,
                    "score": 187
                },
                {
                    "body": "<p>Rather than the select itself, you could disable all of the options except for the currently selected option.  This gives the appearance of a working drop-down, but only the option you want passed in is a valid selection.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;select id=\"countries\" onfocus=\"this.defaultIndex=this.selectedIndex;\" onchange=\"this.selectedIndex=this.defaultIndex;\"&gt;\n&lt;option value=\"1\"&gt;Country1&lt;/option&gt;\n&lt;option value=\"2\"&gt;Country2&lt;/option&gt;\n&lt;option value=\"3\"&gt;Country3&lt;/option&gt;\n&lt;option value=\"4\"&gt;Country4&lt;/option&gt;\n&lt;option value=\"5\"&gt;Country5&lt;/option&gt;\n&lt;option value=\"6\"&gt;Country6&lt;/option&gt;\n&lt;option value=\"7\" selected=\"selected\"&gt;Country7&lt;/option&gt;\n&lt;option value=\"8\"&gt;Country8&lt;/option&gt;\n&lt;option value=\"9\"&gt;Country9&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>Tested and working in IE 6, 7 &amp; 8b2, Firefox 2 &amp; 3, Opera 9.62, Safari 3.2.1 for Windows and Google Chrome.</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>If the select dropdown is read-only since birth and does not need to change at all, perhaps you should use another control instead? Like a simple <code>&lt;div&gt;</code> (plus hidden form field) or an <code>&lt;input type=\"text\"&gt;</code>?</p>\n\n<p><strong>Added:</strong> If the dropdown is not read-only all the time and JavaScript is used to enable/disable it, then this is still a solution - just modify the DOM on-the-fly.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I was able to get this to work to create a readonly select options control using JavaScript.  I had to hide the select box and create a new hidden field.  I've placed the code on my website for anyone to use as a reference.  HTML Readonly Select: <a href=\"http://www.codepug.com/readonlySelect.html\" rel=\"nofollow\">http://www.codepug.com/readonlySelect.html</a></p>\n\n<p>Cheers,\n--X\n.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Following on from Grant Wagners suggestion; here is a jQuery snippet that does it with handler functions instead of direct onXXX attributes:</p>\n\n<pre><code>var readonlySelect = function(selector, makeReadonly) {\n\n    $(selector).filter(\"select\").each(function(i){\n        var select = $(this);\n\n        //remove any existing readonly handler\n        if(this.readonlyFn) select.unbind(\"change\", this.readonlyFn);\n        if(this.readonlyIndex) this.readonlyIndex = null;\n\n        if(makeReadonly) {\n            this.readonlyIndex = this.selectedIndex;\n            this.readonlyFn = function(){\n                this.selectedIndex = this.readonlyIndex;\n            };\n            select.bind(\"change\", this.readonlyFn);\n        }\n    });\n\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Set the select disabled when you plan for it to be read-only and then remove the disabled attribute just before submitting the form.</p>\n\n<pre><code>// global variable to store original event/handler for save button\nvar form_save_button_func = null;\n\n// function to get jQuery object for save button\nfunction get_form_button_by_id(button_id) {\n    return jQuery(\"input[type=button]#\"+button_id);\n}\n\n// alter value of disabled element\nfunction set_disabled_elem_value(elem_id, value)  {\n    jQuery(\"#\"+elem_id).removeAttr(\"disabled\");\n    jQuery(\"#\"+elem_id).val(value);\n    jQuery(\"#\"+elem_id).attr('disabled','disabled');\n}\n\nfunction set_form_bottom_button_save_custom_code_generic(msg) {\n    // save original event/handler that was either declared\n    // through javascript or html onclick attribute\n    // in a global variable\n    form_save_button_func = get_form_button_by_id('BtnSave').prop('onclick'); // jQuery 1.6\n    //form_save_button_func = get_form_button_by_id('BtnSave').prop('onclick'); // jQuery 1.7\n\n    // unbind original event/handler (can use any of following statements below)\n    get_form_button_by_value('BtnSave').unbind('click');\n    get_form_button_by_value('BtnSave').removeAttr('onclick');\n\n    // alternate save code which also calls original event/handler stored in global variable\n    get_form_button_by_value('BtnSave').click(function(event){\n        event.preventDefault();\n        var confirm_result = confirm(msg);\n        if (confirm_result) {\n            if (jQuery(\"form.anyForm\").find('input[type=text], textarea, select').filter(\".disabled-form-elem\").length &gt; 0) {\n                jQuery(\"form.anyForm\").find('input[type=text], textarea, select').filter(\".disabled-form-elem\").removeAttr(\"disabled\");\n            }\n\n            // disallow further editing of fields once save operation is underway\n            // by making them readonly\n            // you can also disallow form editing by showing a large transparent\n            // div over form such as loading animation with \"Saving\" message text\n            jQuery(\"form.anyForm\").find('input[type=text], textarea, select').attr('ReadOnly','True');\n\n            // now execute original event/handler\n            form_save_button_func();\n        }\n    });\n}\n\n$(document).ready(function() {\n    // if you want to define save button code in javascript then define it now\n\n    // code below for record update\n    set_form_bottom_button_save_custom_code_generic(\"Do you really want to update this record?\");\n    // code below for new record\n    //set_form_bottom_button_save_custom_code_generic(\"Do you really want to create this new record?\");\n\n    // start disabling elements on form load by also adding a class to identify disabled elements\n    jQuery(\"input[type=text]#phone\").addClass('disabled-form-elem').attr('disabled','disabled');\n    jQuery(\"input[type=text]#fax\").addClass('disabled-form-elem').attr('disabled','disabled');\n    jQuery(\"select#country\").addClass('disabled-form-elem').attr('disabled','disabled');\n    jQuery(\"textarea#address\").addClass('disabled-form-elem').attr('disabled','disabled');\n\n    set_disabled_elem_value('phone', '123121231');\n    set_disabled_elem_value('fax', '123123123');\n    set_disabled_elem_value('country', 'Pakistan');\n    set_disabled_elem_value('address', 'address');\n\n}); // end of $(document).ready function\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I resolved it with jquery:</p>\n\n<pre><code>      $(\"select.myselect\").bind(\"focus\", function(){\n        if($(this).hasClass('readonly'))\n        {\n          $(this).blur();   \n          return;\n        }\n      });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Below worked for me :</p>\n\n<pre><code>$('select[name=country]').attr(\"disabled\", \"disabled\"); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>html solution:</p>\n\n<blockquote>\n  <p><code>&lt;select onfocus=\"this.blur();\"&gt;</code></p>\n</blockquote>\n\n<p>javascript ones:</p>\n\n<blockquote>\n  <p><code>selectElement.addEventListener(\"focus\", selectElement.blur, true);</code>\n  <code>selectElement.attachEvent(\"focus\", selectElement.blur); //thanks, IE</code></p>\n</blockquote>\n\n<p>to remove:</p>\n\n<blockquote>\n  <p><code>selectElement.removeEventListener(\"focus\", selectElement.blur, true);</code>\n  <code>selectElement.detachEvent(\"focus\", selectElement.blur); //thanks, IE</code></p>\n</blockquote>\n\n<p>edit: added remove methods</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I managed it by hiding the select box and showing a <code>span</code> in its place with only informational value. On the event of disabling the <code>.readonly</code> class, we need also to remove the <code>.toVanish</code> elements and show the <code>.toShow</code> ones.</p>\n\n<pre><code> $( '.readonly' ).live( 'focus', function(e) {\n                $( this ).attr( 'readonly', 'readonly' )\n                if( $( this ).get(0).tagName == 'SELECT' ) {\n                    $( this ).before( '&lt;span class=\"toVanish readonly\" style=\"border:1px solid; padding:5px\"&gt;' \n                            + $( this ).find( 'option:selected' ).html() + '&lt;/span&gt;' )\n                    $( this ).addClass( 'toShow' )\n                    $( this ).hide()\n            }\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In IE I was able to defeat the onfocus=>onblur approach by double-clicking.\nBut remembering the value and then restoring it in the onchange event seems to handle that issue.</p>\n\n<pre><code>&lt;select onfocus=\"this.oldvalue=this.value;this.blur();\" onchange=\"this.value=this.oldvalue;\"&gt;\n....\n&lt;/select&gt;\n</code></pre>\n\n<p>You can do similar without expando properties by using a javascript variable.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Yet another more contemporary option (no pun intended) is to disable all the options of the select element other then the selected one. </p>\n\n<p>note however that this is an HTML 4.0 feature\nand ie 6,7,8 beta 1 seem to not respect this.</p>\n\n<p><a href=\"http://www.gtalbot.org/BrowserBugsSection/MSIE7Bugs/OptionDisabledSupport.html\">http://www.gtalbot.org/BrowserBugsSection/MSIE7Bugs/OptionDisabledSupport.html</a></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Simple jQuery solution</p>\n\n<pre><code>jQuery('select.readonly option:not(:selected)').attr('disabled',true);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Here's an attempt to use a custom jQuery function to achieve the functionality (as mentioned here):</p>\n\n<pre><code>$(function(){\n\n $.prototype.toggleDisable = function(flag) {\n    // prepare some values\n    var selectId = $(this).attr('id');\n    var hiddenId = selectId + 'hidden';\n    if (flag) {\n      // disable the select - however this will not submit the value of the select\n      // a new hidden form element will be created below to compensate for the \n      // non-submitted select value \n      $(this).attr('disabled', true);\n\n      // gather attributes\n      var selectVal = $(this).val();\n      var selectName = $(this).attr('name');\n\n      // creates a hidden form element to submit the value of the disabled select\n      $(this).parents('form').append($('&lt;input&gt;&lt;/input&gt;').\n        attr('type', 'hidden').\n        attr('id', hiddenId).\n        attr('name', selectName).\n        val(selectVal) );\n    } else {\n      // remove the newly-created hidden form element\n      $(this).parents('form').remove(hiddenId);\n      // enable back the element\n      $(this).removeAttr('disabled');\n    }\n  }\n\n  // Usage\n  // $('#some_select_element').toggleDisable(true);\n  // $('#some_select_element').toggleDisable(false);\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are using jquery validate, you can do the following below, I used the disabled attribute without a problem:</p>\n\n<pre><code>$(function(){\n    $('#myform').validate({\n        submitHandler:function(form){\n            $('select').removeAttr('disabled');\n            form.submit();\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>One simple server-side approach is to remove all the options except the one that you want to be selected. Thus, in Zend Framework 1.12, if $element is a Zend_Form_Element_Select:</p>\n\n<pre><code> $value =  $element-&gt;getValue();\n $options = $element-&gt;getAttrib('options');\n $sole_option = array($value =&gt; $options[$value]);\n $element-&gt;setAttrib('options', $sole_option);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In an option you can use <code>disabled=\"disabled\"</code>, instead of on the select itself</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>In addition to disabling the options that should not be selectable i wanted to actually make them dissapear from the list, but still be able to enable them should i need to later:</p>\n\n<pre><code>$(\"select[readonly]\").find(\"option:not(:selected)\").hide().attr(\"disabled\",true);\n</code></pre>\n\n<p>This finds all select elements with a readonly attribute, then finds all options inside those selects that are not selected, then it hides them and disables them.</p>\n\n<p>It is important to separate the jquery query in 2 for performance reasons, because jquery reads them from right to left, the code: </p>\n\n<pre><code>$(\"select[readonly] option:not(:selected)\")\n</code></pre>\n\n<p>will first find all unselected options in the document and then filter those that are inside selects with a readonly attribute.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Simply, remove the disabled attribute before submit the form.</p>\n\n<pre><code>    $('form').submit(function () {\n        $(\"#Id_Unidade\").attr(\"disabled\", false);\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Had same problem and found very useful property of form - <code>submitdisabledcontrols</code>.</p>\n\n<p>Set that to True and disabled inputs are now <code>POST</code>.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<pre>\n    var selectedOpt;//initialize var\n    var newIdForHidden;//initialize var\n    $('.disabledOnEdit').focusin(function(){\n        selectedOpt = $(this).find(\":selected\").val();\n        newIdForHidden = $(this).attr('id')+'Hidden';\n        //alert(selectedOpt+','+newIdForHidden);\n        $(this).append('');\n        $(this).find('input.hiddenSelectedOpt').attr('id',newIdForHidden).val(selectedOpt);\n    });\n    $('.disabledOnEdit').focusout(function(){\n        var oldSelectedValue=$(this).find('input.hiddenSelectedOpt').val();\n        $(this).val(oldSelectedValue);\n    });\n</pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you disable a form field, this won't be send when form is submitted. \nSo if you need a <code>readonly</code> that works like <code>disabled</code> but sending values do this :</p>\n\n<p>After any change in readonly properties of an element.</p>\n\n<pre><code>$('select.readonly option:not(:selected)').attr('disabled',true);\n\n$('select:not([readonly]) option').removeAttr('disabled');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>We could also use this </p>\n\n<p>Disable all except the selected option:</p>\n\n<pre><code>&lt;select&gt;\n&lt;option disabled=\"disabled\"&gt;1&lt;/option&gt;\n&lt;option selected=\"selected\"&gt;2&lt;/option&gt;\n&lt;option disabled=\"disabled\"&gt;3&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>This way the dropdown still works (and submits its value) but the user can not select another value.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Simple CSS solution:</p>\n\n<pre><code>select[readonly]{\n    background: #eee;\n    cursor:no-drop;\n}\n\nselect[readonly] option{\n    display:none;\n}\n</code></pre>\n\n<p>This results in Select to be gray with nice \"disable\" cursor on hover<br>\nand on select the list of options is \"empty\" so you can not change its value.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>another way of doing a <code>readOnly</code> attribute to a <code>select</code> element is by using <code>css</code></p>\n\n<p>you could do like :</p>\n\n<pre><code>$('#selection').css('pointer-events','none');\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/be1mgdh0/\"><strong>DEMO</strong></a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>This is the best solution I have found:</p>\n\n<pre><code>$(\"#YourSELECTIdHere option:not(:selected)\").prop(\"disabled\", true);\n</code></pre>\n\n<p>The code above <strong><em>disables</em></strong> all other options not selected while keeping the selected option enabled. Doing so the selected option will make it into the post-back data.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>select multiple does not respond nearly as well to the above code suggestions. With MUCH sledgehammering and kludging, I ended up with this:</p>\n\n<pre><code>var thisId=\"\";\nvar thisVal=\"\";\nfunction selectAll(){\n    $(\"#\"+thisId+\" option\").each(function(){\n        if(!$(this).prop(\"disabled\"))$(this).prop(\"selected\",true);\n    });\n    $(\"#\"+thisId).prop(\"disabled\",false);\n}\n$(document).ready(function(){\n    $(\"select option:not(:selected)\").attr('disabled',true);\n    $(\"select[multiple]\").focus(function(){\n        thisId=$(this).prop(\"id\");\n        thisVal=$(this).val();\n        $(this).prop(\"disabled\",true).blur();\n        setTimeout(\"selectAll();\",200);\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The smartest way of doing this is, IMHO, normally disabling the select tag (with the <code>disabled</code> attribute) and then re-enabling it automatically just before submiting the form:</p>\n\n<p>Example with jQuery:</p>\n\n<ol>\n<li><p>To disable it:</p>\n\n<pre><code>$('#yourSelect').attr('disabled', true);\n</code></pre></li>\n<li><p>To re-enable it before submission so that GET / POST data is included:</p>\n\n<pre><code>$('#yourForm').on('submit', function() {\n    $('#yourSelect').attr('disabled', false);\n});\n</code></pre></li>\n</ol>\n\n<p>In addition, you could it with every disabled input or select:</p>\n\n<pre><code>    $('#yourForm').on('submit', function() {\n        $('input, select').attr('disabled', false);\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is the simplest and best solution.\nYou will set a readolny attr on your select, or anyother attr like data-readonly, and do the following</p>\n\n<pre><code>$(\"select[readonly]\").live(\"focus mousedown mouseup click\",function(e){\n    e.preventDefault();\n    e.stopPropagation();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>very simple. First store  value in variable. Then on change event set value to stored variable that holds initial value of </p>\n\n<p>I have a  whose name is mapping. Then my code will be as follows;</p>\n\n<pre><code>$(\"document\").ready(function(){ \n    var mapping=$(\"select[name=mapping]\").val();\n    $(\"select[name=mapping]\").change(function(){\n        $(\"select[name=mapping]\").val(mapping);\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>According to HTML specs, the <code>select</code> tag in HTML doesn't have a <code>readonly</code> attribute, only a <code>disabled</code> attribute. So if you want to keep the user from changing the dropdown, you have to use <code>disabled</code>.</p>\n\n<p>The only problem is that disabled HTML form inputs don't get included in the POST / GET data.</p>\n\n<p>What's the best way to emulate the <code>readonly</code> attribute for a <code>select</code> tag, and still get the POST data?</p>\n",
            "last_activity_date": 1418716780,
            "question_id": 368813,
            "score": 198,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "HTML form readonly SELECT tag/input"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<blockquote>\n  <p>Is something like this possible?</p>\n</blockquote>\n\n<p>No. All you can do is detect the mouse going into the iframe, and potentially (though not reliably) when it comes back out (ie. trying to work out the difference between the pointer passing over the ad on its way somewhere else versus lingering on the ad).</p>\n\n<blockquote>\n  <p>I imagine a scenario where there is an invisible div on top of the iframe and the the div will just then pass the click event to the iframe.</p>\n</blockquote>\n\n<p>Nope, there is no way to fake a click event.</p>\n\n<p>By catching the mousedown you'd prevent the original click from getting to the iframe. If you could determine when the mouse button was about to be pressed you could try to get the invisible div out of the way so that the click would go through... but there is also no event that fires just before a mousedown.</p>\n\n<p>You could try to guess, for example by looking to see if the pointer has come to rest, guessing a click might be about to come. But it's totally unreliable, and if you fail you've just lost yourself a click-through.</p>\n",
                    "is_accepted": true,
                    "score": 27
                },
                {
                    "body": "<p>The following code will show you if the user click/hover or move out of the iframe:-</p>\n\n<pre><code>&lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\"&gt;\n&lt;title&gt;Detect IFrame Clicks&lt;/title&gt;\n&lt;script type=\"text/javascript\"&gt;\n    $(document).ready(function() {\n        var isOverIFrame = false;\n\n        function processMouseOut() {\n            log(\"IFrame mouse &gt;&gt; OUT &lt;&lt; detected.\");\n            isOverIFrame = false;\n            top.focus();\n        }\n\n        function processMouseOver() {\n            log(\"IFrame mouse &gt;&gt; OVER &lt;&lt; detected.\");\n            isOverIFrame = true;\n        }\n\n        function processIFrameClick() {\n            if(isOverIFrame) {\n                // replace with your function\n                log(\"IFrame &gt;&gt; CLICK &lt;&lt; detected. \");\n            }\n        }\n\n        function log(message) {\n            var console = document.getElementById(\"console\");\n            var text = console.value;\n            text = text + message + \"\\n\";\n            console.value = text;\n        }\n\n        function attachOnloadEvent(func, obj) {\n            if(typeof window.addEventListener != 'undefined') {\n                window.addEventListener('load', func, false);\n            } else if (typeof document.addEventListener != 'undefined') {\n                document.addEventListener('load', func, false);\n            } else if (typeof window.attachEvent != 'undefined') {\n                window.attachEvent('onload', func);\n            } else {\n                if (typeof window.onload == 'function') {\n                    var oldonload = onload;\n                    window.onload = function() {\n                        oldonload();\n                        func();\n                    };\n                } else {\n                    window.onload = func;\n                }\n            }\n        }\n\n        function init() {\n            var element = document.getElementsByTagName(\"iframe\");\n            for (var i=0; i&lt;element.length; i++) {\n                element[i].onmouseover = processMouseOver;\n                element[i].onmouseout = processMouseOut;\n            }\n            if (typeof window.attachEvent != 'undefined') {\n                top.attachEvent('onblur', processIFrameClick);\n            }\n            else if (typeof window.addEventListener != 'undefined') {\n                top.addEventListener('blur', processIFrameClick, false);\n            }\n        }\n\n        attachOnloadEvent(init);\n    });\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;iframe src=\"www.google.com\" width=\"100%\" height=\"1300px\"&gt;&lt;/iframe&gt;\n&lt;br&gt;&lt;/br&gt;\n&lt;br&gt;&lt;/br&gt;\n&lt;form name=\"form\" id=\"form\" action=\"\"&gt;&lt;textarea name=\"console\"\nid=\"console\" style=\"width: 100%; height: 300px;\" cols=\"\" rows=\"\"&gt;&lt;/textarea&gt;\n&lt;button name=\"clear\" id=\"clear\" type=\"reset\"&gt;Clear&lt;/button&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>You need to replace the src in the iframe with your own link. Hope this'll help.\nRegards,\nMo.</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>Mohammed Radwan,\nYour solution is elegant. To detect iframe clicks in Firefox and IE, you can use a simple method with document.activeElement and a timer, however... I have searched all over the interwebs for a method to detect clicks on an iframe in Chrome and Safari. At the brink of giving up, I find your answer. Thank you, sir!</p>\n\n<p>Some tips:\nI have found your solution to be more reliable when calling the init() function directly, rather than through attachOnloadEvent(). Of course to do that, you must call init() only after the iframe html. So it would look something like:</p>\n\n<pre><code>&lt;script&gt;\nvar isOverIFrame = false;\nfunction processMouseOut() {\n    isOverIFrame = false;\n    top.focus();\n}\nfunction processMouseOver() { isOverIFrame = true; }\nfunction processIFrameClick() {\n    if(isOverIFrame) {\n    //was clicked\n    }\n}\n\nfunction init() {\n    var element = document.getElementsByTagName(\"iframe\");\n    for (var i=0; i&lt;element.length; i++) {\n        element[i].onmouseover = processMouseOver;\n        element[i].onmouseout = processMouseOut;\n    }\n    if (typeof window.attachEvent != 'undefined') {\n        top.attachEvent('onblur', processIFrameClick);\n    }\n    else if (typeof window.addEventListener != 'undefined') {\n        top.addEventListener('blur', processIFrameClick, false);\n    }\n}\n&lt;/script&gt;\n\n&lt;iframe src=\"http://google.com\"&gt;&lt;/iframe&gt;\n\n&lt;script&gt;init();&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I believe you can do something like:</p>\n\n<pre><code>$('iframe').contents().click(function(){function to record click here });\n</code></pre>\n\n<p>using jQuery to accomplish this.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Based on Mohammed Radwan's answer I came up with the following jQuery solution. Basically what it does is keep track of what iFrame people are hovering. Then if the window blurs that most likely means the user clicked the iframe banner.</p>\n\n<p>the iframe should be put in a div with an id, to make sure you know which iframe the user clicked on:</p>\n\n<pre><code>&lt;div class='banner' bannerid='yyy'&gt;\n    &lt;iframe src='http://somedomain.com/whatever.html'&gt;&lt;/iframe&gt;\n&lt;div&gt;\n</code></pre>\n\n<p>so:</p>\n\n<pre><code>$(document).ready( function() {\n    var overiFrame = -1;\n    $('iframe').hover( function() {\n        overiFrame = $(this).closest('.banner').attr('bannerid');\n    }, function() {\n        overiFrame = -1\n    });\n</code></pre>\n\n<p>...\nthis keeps overiFrame at -1 when no iFrames are hovered, or the 'bannerid' set in the wrapping div when an iframe is hovered. All you have to do is check if 'overiFrame' is set when the window blurs, like so:\n...</p>\n\n<pre><code>    $(window).blur( function() {\n        if( overiFrame != -1 )\n            $.post('log.php', {id:overiFrame}); /* example, do your stats here */\n    });\n});\n</code></pre>\n\n<p>Very elegant solution with a minor downside: if a user presses ALT-F4 when hovering the mouse over an iFrame it will log it as a click. This only happened in FireFox though, IE, Chrome and Safari didn't register it. </p>\n\n<p>Thanks again Mohammed, very useful solution!</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>This definitely works if the iframe is from the same domain as your parent site. I have not tested it for cross-domain sites.</p>\n\n<pre><code>$(window.frames['YouriFrameId']).click(function(event){  /* do something here  */ });\n$(window.frames['YouriFrameId']).mousedown(function(event){ /* do something here */ });\n$(window.frames['YouriFrameId']).mouseup(function(event){ /* do something here */ });\n</code></pre>\n\n<p>Without jQuery you could try something like this, but again I have not tried this.</p>\n\n<pre><code>window.frames['YouriFrameId'].onmousedown = function() { do something here }\n</code></pre>\n\n<p>You can even filter your results:</p>\n\n<pre><code>$(window.frames['YouriFrameId']).mousedown(function(event){   \n  var eventId = $(event.target).attr('id');      \n  if (eventId == 'the-id-you-want') {\n   //  do something\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>see <a href=\"http://jsfiddle.net/kU3Tw/\">http://jsfiddle.net/kU3Tw/</a> for my long winded solution that doesn't work reliably in IE</p>\n\n<pre><code>        $(window).on('blur',function(e) {    \n            if($(this).data('mouseIn') != 'yes')return;\n            $('iframe').filter(function(){\n                return $(this).data('mouseIn') == 'yes';\n            }).trigger('iframeclick');    \n        });\n\n        $(window).mouseenter(function(){\n            $(this).data('mouseIn', 'yes');\n        }).mouseleave(function(){\n            $(this).data('mouseIn', 'no');\n        });\n\n        $('iframe').mouseenter(function(){\n            $(this).data('mouseIn', 'yes');\n            $(window).data('mouseIn', 'yes');\n        }).mouseleave(function(){\n            $(this).data('mouseIn', null);\n        });\n\n        $('iframe').on('iframeclick', function(){\n            console.log('Clicked inside iframe');\n            $('#result').text('Clicked inside iframe'); \n        });\n        $(window).on('click', function(){\n            console.log('Clicked inside window');\n            $('#result').text('Clicked inside window'); \n        }).blur(function(){\n            console.log('window blur');\n        });\n\n        $('&lt;input type=\"text\" style=\"position:absolute;opacity:0;height:0px;width:0px;\"/&gt;').appendTo(document.body).blur(function(){\n                $(window).trigger('blur');\n            }).focus();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You can achieve this by using the blur event on window element.</p>\n\n<p>Here is a jQuery plugin for tracking click on iframes (it will fire a custom callback function when an iframe is clicked) :\n<a href=\"https://github.com/finalclap/iframeTracker-jquery\" rel=\"nofollow\">https://github.com/finalclap/iframeTracker-jquery</a></p>\n\n<p>Use it like this :</p>\n\n<pre><code>jQuery(document).ready(function($){\n    $('.iframe_wrap iframe').iframeTracker({\n        blurCallback: function(){\n            // Do something when iframe is clicked (like firing an XHR request)\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can do this to bubble events to parent document:</p>\n\n<pre><code>$('iframe').load(function() {\n    var eventlist = 'click dblclick \\\n                    blur focus focusin focusout \\\n                    keydown keypress keyup \\\n                    mousedown mouseenter mouseleave mousemove mouseover mouseout mouseup mousemove \\\n                    touchstart touchend touchcancel touchleave touchmove';\n\n    var iframe = $('iframe').contents().find('html');\n\n    // Bubble events to parent\n    iframe.on(eventlist, function(event) {\n        $('html').trigger(event);\n    });\n});\n</code></pre>\n\n<p>Just extend the eventlist for more events.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I ran into a situation where I had to track clicks on a social media button pulled in through an iframe. A new window would be opened when the button was clicked. Here was my solution:</p>\n\n<pre><code>var iframeClick = function () {\n    var isOverIframe = false,\n    windowLostBlur = function () {\n        if (isOverIframe === true) {\n            // DO STUFF\n            isOverIframe = false;\n        }\n    };\n    jQuery(window).focus();\n    jQuery('#iframe').mouseenter(function(){\n        isOverIframe = true;\n        console.log(isOverIframe);\n    });\n    jQuery('#iframe').mouseleave(function(){\n        isOverIframe = false;\n        console.log(isOverIframe);\n    });\n    jQuery(window).blur(function () {\n        windowLostBlur();\n    });\n};\niframeClick();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is certainly possible. This works in Chrome, Firefox, and IE 11 (and probably others).</p>\n\n<pre><code>focus();\nvar listener = addEventListener('blur', function() {\n    if(document.activeElement = document.getElementById('iframe')) {\n        // clicked\n    }\n    removeEventListener(listener);\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/QcAee/\" rel=\"nofollow\">JSFiddle</a></p>\n\n<hr>\n\n<p>Caveat: This only detects the first click. As I understand, that is all you want.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I understand that it is not possible to tell what the user is doing inside an <code>iframe</code> if it is cross domain.  What I would like to do is track if the user clicked at all in the <code>iframe</code>.  I imagine a scenario where there is an invisible <code>div</code> on top of the <code>iframe</code> and the the <code>div</code> will just then pass the click event to the <code>iframe</code>.  </p>\n\n<p>Is something like this possible?  If it is, then how would I go about it?  The <code>iframes</code> are ads, so I have no control over the tags that are used.</p>\n",
            "last_activity_date": 1398204562,
            "question_id": 2381336,
            "score": 33,
            "tags": [
                "javascript",
                "iframe",
                "javascript-events",
                "advertising",
                "click-tracking"
            ],
            "title": "Detect Click into Iframe using JavaScript"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>you can only focus required textbox an insert the text there. there is no way to find out where focus is AFAIK (maybe interating over all DOM nodes?). </p>\n\n<p>check this stackoverflow - it has a solution for you:\n<a href=\"http://stackoverflow.com/questions/497094/how-do-i-find-out-which-javascript-element-has-focus\">http://stackoverflow.com/questions/497094/how-do-i-find-out-which-javascript-element-has-focus</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Use this, from <a href=\"http://web.archive.org/web/20110102112946/http://www.scottklarr.com/topic/425/how-to-insert-text-into-a-textarea-where-the-cursor-is/\">here</a>:</p>\n\n<pre><code>function insertAtCaret(areaId,text) {\n    var txtarea = document.getElementById(areaId);\n    var scrollPos = txtarea.scrollTop;\n    var strPos = 0;\n    var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ? \n        \"ff\" : (document.selection ? \"ie\" : false ) );\n    if (br == \"ie\") { \n        txtarea.focus();\n        var range = document.selection.createRange();\n        range.moveStart ('character', -txtarea.value.length);\n        strPos = range.text.length;\n    }\n    else if (br == \"ff\") strPos = txtarea.selectionStart;\n\n    var front = (txtarea.value).substring(0,strPos);  \n    var back = (txtarea.value).substring(strPos,txtarea.value.length); \n    txtarea.value=front+text+back;\n    strPos = strPos + text.length;\n    if (br == \"ie\") { \n        txtarea.focus();\n        var range = document.selection.createRange();\n        range.moveStart ('character', -txtarea.value.length);\n        range.moveStart ('character', strPos);\n        range.moveEnd ('character', 0);\n        range.select();\n    }\n    else if (br == \"ff\") {\n        txtarea.selectionStart = strPos;\n        txtarea.selectionEnd = strPos;\n        txtarea.focus();\n    }\n    txtarea.scrollTop = scrollPos;\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&lt;textarea id=\"textareaid\"&gt;&lt;/textarea&gt;\n&lt;a href=\"#\" onclick=\"insertAtCaret('textareaid','text to insert');return false;\"&gt;Click Here to Insert&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 83
                },
                {
                    "body": "<p>I think you could use the following JavaScript to track the last-focused textbox:</p>\n\n<pre><code>&lt;script&gt;\nvar holdFocus;\n\nfunction updateFocus(x)\n{\n    holdFocus = x;\n}\n\nfunction appendTextToLastFocus(text)\n{\n    holdFocus.value += text;\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>&lt;input type=\"textbox\" onfocus=\"updateFocus(this)\" /&gt;\n&lt;a href=\"#\" onclick=\"appendTextToLastFocus('textToAppend')\" /&gt;\n</code></pre>\n\n<p>A previous solution (props to gclaghorn) uses textarea and calculates the position of the cursor too, so it may be better for what you want. On the other hand, this one would be more lightweight, if that's what you're looking for.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The code above didn't work for me in IE. Here's some code based on <a href=\"http://stackoverflow.com/questions/946534\">Insert text into textarea with jQuery</a></p>\n\n<p>I took out the getElementById so I could reference the element in a different way.</p>\n\n<pre><code>function insertAtCaret(element, text) {\n    if (document.selection) {\n        element.focus();\n        var sel = document.selection.createRange();\n        sel.text = text;\n        element.focus();\n    } else if (element.selectionStart || element.selectionStart === 0) {\n        var startPos = element.selectionStart;\n        var endPos = element.selectionEnd;\n        var scrollTop = element.scrollTop;\n        element.value = element.value.substring(0, startPos) + text + element.value.substring(endPos, element.value.length);\n        element.focus();\n        element.selectionStart = startPos + text.length;\n        element.selectionEnd = startPos + text.length;\n        element.scrollTop = scrollTop;\n    } else {\n        element.value += text;\n        element.focus();\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p><a href=\"https://github.com/localhost/jquery-fieldselection\" rel=\"nofollow\">This jQuery plugin</a> gives you a pre-made way of selection/caret manipulation.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>How to insert some Text to current cursor position of a TextBox through JQuery and JavaScript</p>\n\n<p>Process</p>\n\n<ol>\n<li>Find the Current Cursor Position</li>\n<li>Get the Text to be Copied</li>\n<li>Set the Text Over there</li>\n<li>Update the Cursor position </li>\n</ol>\n\n<p>Here I have 2 TextBoxes and a Button. I have to Click on a certain position on a textbox and then click on the button to paste the text from the \nother textbox to the the position of the previous textbox.</p>\n\n<p>Main issue here is that getting the current cursor position where we will paste the text.</p>\n\n<pre><code>//Textbox on which to be pasted\n&lt;input type=\"text\" id=\"txtOnWhichToBePasted\" /&gt;\n\n//Textbox from where to be pasted\n&lt;input type=\"text\" id=\"txtFromWhichToBePasted\" /&gt;\n\n\n//Button on which click the text to be pasted\n&lt;input type=\"button\" id=\"btnInsert\" value=\"Insert\"/&gt;\n\n\n&lt;script type=\"text/javascript\"&gt;\n\n$(document).ready(function () {\n    $('#btnInsert').bind('click', function () {\n            var TextToBePasted = $('#txtFromWhichToBePasted').value;\n            var ControlOnWhichToBePasted = $('#txtOnWhichToBePasted');\n\n            //Paste the Text\n            PasteTag(ControlOnWhichToBePasted, TextToBePasted);\n        });\n    });\n\n//Function Pasting The Text\nfunction PasteTag(ControlOnWhichToBePasted,TextToBePasted) {\n    //Get the position where to be paste\n\n    var CaretPos = 0;\n    // IE Support\n    if (document.selection) {\n\n        ControlOnWhichToBePasted.focus();\n        var Sel = document.selection.createRange();\n\n        Sel.moveStart('character', -ctrl.value.length);\n\n        CaretPos = Sel.text.length;\n    }\n    // Firefox support\n    else if (ControlOnWhichToBePasted.selectionStart || ControlOnWhichToBePasted.selectionStart == '0')\n        CaretPos = ControlOnWhichToBePasted.selectionStart;\n\n    //paste the text\n    var WholeString = ControlOnWhichToBePasted.value;\n    var txt1 = WholeString.substring(0, CaretPos);\n    var txt2 = WholeString.substring(CaretPos, WholeString.length);\n    WholeString = txt1 + TextToBePasted + txt2;\n    var CaretPos = txt1.length + TextToBePasted.length;\n    ControlOnWhichToBePasted.value = WholeString;\n\n    //update The cursor position \n    setCaretPosition(ControlOnWhichToBePasted, CaretPos);\n}\n\nfunction setCaretPosition(ControlOnWhichToBePasted, pos) {\n\n    if (ControlOnWhichToBePasted.setSelectionRange) {\n        ControlOnWhichToBePasted.focus();\n        ControlOnWhichToBePasted.setSelectionRange(pos, pos);\n    }\n    else if (ControlOnWhichToBePasted.createTextRange) {\n        var range = ControlOnWhichToBePasted.createTextRange();\n        range.collapse(true);\n        range.moveEnd('character', pos);\n        range.moveStart('character', pos);\n        range.select();\n    }\n}\n\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The accepted answer didn't work for me on Internet Explorer 9.\nI checked it and the browser detection was not working properly, it detected <strong>ff</strong> (firefox) when i was at Internet Explorer.</p>\n\n<p>I just did this change: </p>\n\n<pre><code>if ($.browser.msie) \n</code></pre>\n\n<p>Instead of:</p>\n\n<pre><code>if (br == \"ie\") { \n</code></pre>\n\n<p>The resulting code is this one:</p>\n\n<pre><code>function insertAtCaret(areaId,text) {\n    var txtarea = document.getElementById(areaId);\n    var scrollPos = txtarea.scrollTop;\n    var strPos = 0;\n    var br = ((txtarea.selectionStart || txtarea.selectionStart == '0') ? \n        \"ff\" : (document.selection ? \"ie\" : false ) );\n\n    if ($.browser.msie) { \n        txtarea.focus();\n        var range = document.selection.createRange();\n        range.moveStart ('character', -txtarea.value.length);\n        strPos = range.text.length;\n    }\n    else if (br == \"ff\") strPos = txtarea.selectionStart;\n\n    var front = (txtarea.value).substring(0,strPos);  \n    var back = (txtarea.value).substring(strPos,txtarea.value.length); \n    txtarea.value=front+text+back;\n    strPos = strPos + text.length;\n    if (br == \"ie\") { \n        txtarea.focus();\n        var range = document.selection.createRange();\n        range.moveStart ('character', -txtarea.value.length);\n        range.moveStart ('character', strPos);\n        range.moveEnd ('character', 0);\n        range.select();\n    }\n    else if (br == \"ff\") {\n        txtarea.selectionStart = strPos;\n        txtarea.selectionEnd = strPos;\n        txtarea.focus();\n    }\n    txtarea.scrollTop = scrollPos;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Maybe a shorter version, <a href=\"http://jsfiddle.net/NaHTw/4/\">http://jsfiddle.net/NaHTw/4/</a> would be easier to understand? </p>\n\n<pre><code>jQuery(\"#btn\").on('click', function() {\n    var caretPos = document.getElementById(\"txt\").selectionStart;\n    var textAreaTxt = jQuery(\"#txt\").val();\n    var txtToAdd = \"stuff\";\n    jQuery(\"#txt\").val(textAreaTxt.substring(0, caretPos) + txtToAdd + textAreaTxt.substring(caretPos) );\n});\n</code></pre>\n\n<p>I wrote this in response to <a href=\"http://stackoverflow.com/questions/15976574/how-to-add-a-text-to-a-textbox-from-the-current-position-of-the-pointer-with-jqu\">How to add a text to a textbox from the current position of the pointer with jquery?</a></p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>The approved answer from George Claghorn worked great for simply inserting text at the cursor position.  If the user had selected text though, and you want that text to be replaced, you need to make a small change when setting the 'back' variable.</p>\n\n<p>Also, if you don't need to support older versions of IE, modern versions support textarea.selectionStart, so you can take out all of the browser detection, and IE-specific code.</p>\n\n<p>Here is a simplified version that works for Chrome and IE11 at least, and handles replacing selected text.</p>\n\n<pre><code>function insertAtCaret(areaId, text) {\n    var txtarea = document.getElementById(areaId);\n    var scrollPos = txtarea.scrollTop;\n    var caretPos = txtarea.selectionStart;\n\n    var front = (txtarea.value).substring(0, caretPos);\n    var back = (txtarea.value).substring(txtarea.selectionEnd, txtarea.value.length);\n    txtarea.value = front + text + back;\n    caretPos = caretPos + text.length;\n    txtarea.selectionStart = caretPos;\n    txtarea.selectionEnd = caretPos;\n    txtarea.focus();\n    txtarea.scrollTop = scrollPos;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a page with  a lot of textboxes. When someone clicks a link, i want a word or two to be inserted where the cursor is, or appended to the textbox which has the focus.</p>\n\n<p>For example, if the cursor/focus is on a textbox saying 'apple' and he clicks a link saying '[email]', then i want the textbox to say, 'apple bob@example.com'.</p>\n\n<p>How can I do this? Is this even possible, since what if the focus is on a radio/dropdown/non textbox element? Can the last focused on textbox be remembered?</p>\n",
            "last_activity_date": 1423864870,
            "question_id": 1064089,
            "score": 62,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Inserting a text where cursor is using Javascript/jquery"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>You can retrieve the height of the <code>IFRAME</code>'s content by using:\n<code>contentWindow.document.body.scrollHeight</code></p>\n\n<p>After the <code>IFRAME</code> is loaded, you can then change the height by doing the following:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n  function iframeLoaded() {\n      var iFrameID = document.getElementById('idIframe');\n      if(iFrameID) {\n            // here you can make the height, I delete it first, then I make it again\n            iFrameID.height = \"\";\n            iFrameID.height = iFrameID.contentWindow.document.body.scrollHeight + \"px\";\n      }   \n  }\n&lt;/script&gt;   \n</code></pre>\n\n<p>Then, on the <code>IFRAME</code> tag, you hook up the handler like this:</p>\n\n<pre><code>&lt;iframe id=\"idIframe\" onload=\"iframeLoaded()\" ...\n</code></pre>\n\n<p>I had a situation a while ago where I additionally needed to call <code>iframeLoaded</code> from the <code>IFRAME</code> itself after a form-submission occurred within. You can accomplish that by doing the following within the <code>IFRAME</code>'s content scripts:</p>\n\n<pre><code>parent.iframeLoaded();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 58
                },
                {
                    "body": "<pre><code>$(document).height() // - $('body').offset().top\n</code></pre>\n\n<p>and / or</p>\n\n<pre><code>$(window).height()\n</code></pre>\n\n<p>See Stack Overflow question <em><a href=\"http://stackoverflow.com/questions/806402\">How to get the height of a body element</a></em>.</p>\n\n<p>Try this to find the height of the body in jQuery:</p>\n\n<pre><code>if $(\"body\").height()\n</code></pre>\n\n<p>It doesn't have a value if <a href=\"http://en.wikipedia.org/wiki/Firebug_%28software%29\" rel=\"nofollow\">Firebug</a>. Perhaps that's the problem.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A slightly improved answer to Aristos...</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n  function resizeIframe(iframe) {\n    iframe.height = iframe.contentWindow.document.body.scrollHeight + \"px\";\n  }\n&lt;/script&gt;  \n</code></pre>\n\n<p>Then declare in your iframe as follows:</p>\n\n<pre><code>&lt;iframe onload=\"resizeIframe(this)\" ...\n</code></pre>\n\n<p>There are two minor improvements:</p>\n\n<ol>\n<li>You don't need to get the element via document.getElementById - as you already have it in the onload callback.</li>\n<li>There's no need to set the <code>iframe.height = \"\"</code> if you're going to reassign it in the very next statement. Doing so actually incurs an overhead as you're dealing with a DOM element.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>I found the answer from Troy didn't work. This is the same code reworked for ajax:</p>\n\n<pre><code>$.ajax({                                      \n    url: 'data.php',    \n    dataType: 'json',                             \n\n    success: function(data)\n    {\n        // Put the data onto the page\n\n        // Resize the iframe\n        var iframe = $(window.top.document).find(\"#iframe\");\n        iframe.height( iframe[0].contentDocument.body.scrollHeight+'px' );\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To add to the chunk of window that seems to cut off at the bottom, especially when you don't have scrolling I used:</p>\n\n<pre><code>function resizeIframe(iframe) {\n    var addHeight = 20; //or whatever size is being cut off\n    iframe.height = iframe.contentWindow.document.body.scrollHeight + addHeight + \"px\";\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There are four different properties you can look at to get the height of the content in an iFrame.</p>\n\n<pre><code>document.documentElement.scrollHeight\ndocument.documentElement.offsetHeight\ndocument.body.scrollHeight\ndocument.body.offsetHeight\n</code></pre>\n\n<p>Sadly they can all give different answers and these are inconsistant between browsers. If you set the body margin to 0 then the <code>document.body.offsetHeight</code> gives the best answer. To get the correct value try this function; which is taken from the <strong><a href=\"https://github.com/davidjbradshaw/iframe-resizer\" rel=\"nofollow\">iframe-resizer</a></strong> library that also looks after keeping the iFrame the correct size when the content changes,or the browser is resized.</p>\n\n<pre><code>function getIFrameHeight(){\n    function getComputedBodyStyle(prop) {\n        function getPixelValue(value) {\n            var PIXEL = /^\\d+(px)?$/i;\n\n            if (PIXEL.test(value)) {\n                return parseInt(value,base);\n            }\n\n            var \n                style = el.style.left,\n                runtimeStyle = el.runtimeStyle.left;\n\n            el.runtimeStyle.left = el.currentStyle.left;\n            el.style.left = value || 0;\n            value = el.style.pixelLeft;\n            el.style.left = style;\n            el.runtimeStyle.left = runtimeStyle;\n\n            return value;\n        }\n\n        var \n            el = document.body,\n            retVal = 0;\n\n        if (document.defaultView &amp;&amp; document.defaultView.getComputedStyle) {\n            retVal =  document.defaultView.getComputedStyle(el, null)[prop];\n        } else {//IE8 &amp; below\n            retVal =  getPixelValue(el.currentStyle[prop]);\n        } \n\n        return parseInt(retVal,10);\n    }\n\n    return document.body.offsetHeight +\n        getComputedBodyStyle('marginTop') +\n        getComputedBodyStyle('marginBottom');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I found that the accepted answer didn't suffice, since X-FRAME-OPTIONS: Allow-From <a href=\"https://developer.mozilla.org/en-US/docs/HTTP/X-Frame-Options\">isn't supported in safari or chrome</a>.  Went with a different approach instead, found in a <a href=\"http://benvinegar.github.io/seamless-talk/#/1\">presentation</a> given by Ben Vinegar from Disqus.  The idea is to add an event listener to the parent window, and then inside the iframe, use window.postMessage to send an event to the parent telling it to do something (resize the iframe).</p>\n\n<p>So in the parent document, add an event listener:</p>\n\n<pre><code>window.addEventListener('message', function(e) {\n  var $iframe = jQuery(\"#myIframe\");\n  var eventName = e.data[0];\n  var data = e.data[1];\n  switch(eventName) {\n    case 'setHeight':\n      $iframe.height(data);\n      break;\n  }\n}, false);\n</code></pre>\n\n<p>And inside the iframe, write a function to post the message:</p>\n\n<pre><code>function resize() {\n  var height = document.getElementsByTagName(\"html\")[0].scrollHeight;\n  window.parent.postMessage([\"setHeight\", height], \"*\"); \n}\n</code></pre>\n\n<p>Finally, inside the iframe, add an onLoad to the body tag to fire the resize function:</p>\n\n<pre><code>&lt;body onLoad=\"resize();\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                }
            ],
            "body": "<p>loading an aspx web page in an iframe . The content in the Iframe can be of more height than the iframe's height. The iframe should not have scroll bars.</p>\n\n<p>I have a wrapper 'div' tag inside the iframe which basically is all the content.  I wrote some Jquery to make the resize happen :</p>\n\n<pre><code>$(\"#TB_window\", window.parent.document).height($(\"body\").height() + 50);\n</code></pre>\n\n<p>where\n'TB_window' is the div in which the 'Iframe' is contained.</p>\n\n<p>'body' - the body tag of the aspx in the iframe.</p>\n\n<p>This script is attached to the iframe content. i am getting the TB_window element from the parent page. while this works fine on Chrome, but the TB_window collapses in firefox. I am really confused/lost on why that happens.</p>\n\n<p>Any help is highly appreciated</p>\n",
            "last_activity_date": 1425163325,
            "question_id": 9162933,
            "score": 47,
            "tags": [
                "javascript",
                "jquery",
                "asp.net",
                "iframe"
            ],
            "title": "make iframe height dynamic based on content inside- JQUERY/Javascript"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p><a href=\"http://www.mcfedries.com/JavaScript/DaysBetween.asp\">Here's a function</a> that does this:</p>\n\n<pre><code>function days_between(date1, date2) {\n\n    // The number of milliseconds in one day\n    var ONE_DAY = 1000 * 60 * 60 * 24\n\n    // Convert both dates to milliseconds\n    var date1_ms = date1.getTime()\n    var date2_ms = date2.getTime()\n\n    // Calculate the difference in milliseconds\n    var difference_ms = Math.abs(date1_ms - date2_ms)\n\n    // Convert back to days and return\n    return Math.round(difference_ms/ONE_DAY)\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Googling \"number of days between two dates javascript\" produces <a href=\"http://www.vijayjoshi.org/2008/10/24/faq-calculate-number-of-days-between-two-dates-in-javascript/\">this great snippet</a> (actually all the top results are relevant to your question):</p>\n\n<pre><code>var oneDay = 24*60*60*1000; // hours*minutes*seconds*milliseconds\nvar firstDate = new Date(2008,01,12);\nvar secondDate = new Date(2008,01,22);\n\nvar diffDays = Math.round(Math.abs((firstDate.getTime() - secondDate.getTime())/(oneDay)));\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 137
                },
                {
                    "body": "<p>Adjusted to allow  for daylight saving differences. try this:</p>\n\n<pre><code>  function daysBetween(date1, date2) {\n\n // adjust diff for for daylight savings\n var hoursToAdjust = Math.abs(date1.getTimezoneOffset() /60) - Math.abs(date2.getTimezoneOffset() /60);\n // apply the tz offset\n date2.addHours(hoursToAdjust); \n\n    // The number of milliseconds in one day\n    var ONE_DAY = 1000 * 60 * 60 * 24\n\n    // Convert both dates to milliseconds\n    var date1_ms = date1.getTime()\n    var date2_ms = date2.getTime()\n\n    // Calculate the difference in milliseconds\n    var difference_ms = Math.abs(date1_ms - date2_ms)\n\n    // Convert back to days and return\n    return Math.round(difference_ms/ONE_DAY)\n\n}\n\n// you'll want this addHours function too \n\nDate.prototype.addHours= function(h){\n    this.setHours(this.getHours()+h);\n    return this;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have written this solution for another post who asked, how to calculate the difference between two dates, so I share what I have prepared:</p>\n\n<pre><code>// Here are the two dates to compare\nvar date1 = '2011-12-24';\nvar date2 = '2012-01-01';\n\n// First we split the values to arrays date1[0] is the year, [1] the month and [2] the day\ndate1 = date1.split('-');\ndate2 = date2.split('-');\n\n// Now we convert the array to a Date object, which has several helpful methods\ndate1 = new Date(date1[0], date1[1], date1[2]);\ndate2 = new Date(date2[0], date2[1], date2[2]);\n\n// We use the getTime() method and get the unixtime (in milliseconds, but we want seconds, therefore we divide it through 1000)\ndate1_unixtime = parseInt(date1.getTime() / 1000);\ndate2_unixtime = parseInt(date2.getTime() / 1000);\n\n// This is the calculated difference in seconds\nvar timeDifference = date2_unixtime - date1_unixtime;\n\n// in Hours\nvar timeDifferenceInHours = timeDifference / 60 / 60;\n\n// and finaly, in days :)\nvar timeDifferenceInDays = timeDifferenceInHours  / 24;\n\nalert(timeDifferenceInDays);\n</code></pre>\n\n<p>You can skip some steps in the code, I have written it so to make it easy to understand.</p>\n\n<p>You'll find a running example here: <a href=\"http://jsfiddle.net/matKX/\" rel=\"nofollow\">http://jsfiddle.net/matKX/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's what I use.  If you just subtract the dates, it won't work across the Daylight Savings Time Boundary (eg April 1 to April 30 or Oct 1 to Oct 31).  This drops all the hours to make sure you get a day and eliminates any DST problem by using UTC.</p>\n\n<pre><code>var nDays = (    Date.UTC(EndDate.getYear(), EndDate.getMonth(), EndDate.getDate()) -\n                 Date.UTC(StartDate.getYear(), StartDate.getMonth(), StartDate.getDate())) / 86400000;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>From my little date difference calculator:</p>\n\n<pre><code>var startDate = new Date(2000, 1-1, 1);  // 2000-01-01\nvar endDate =   new Date();              // Today\n\n// Calculate the difference of two dates in total days\nfunction diffDays(d1, d2)\n{\n  var ndays;\n  var tv1 = d1.valueOf();  // msec since 1970\n  var tv2 = d2.valueOf();\n\n  ndays = (tv2 - tv1) / 1000 / 86400;\n  ndays = Math.round(ndays - 0.5);\n  return ndays;\n}\n</code></pre>\n\n<p>So you would call:</p>\n\n<pre><code>var nDays = diffDays(startDate, endDate);\n</code></pre>\n\n<p>(Full source at <a href=\"http://david.tribble.com/src/javascript/jstimespan.html\" rel=\"nofollow\">http://david.tribble.com/src/javascript/jstimespan.html</a>.)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is my implementation:</p>\n\n<pre><code>function daysBetween(one, another) {\n  return Math.round(Math.abs((+one) - (+another))/8.64e7);\n}\n</code></pre>\n\n<p><code>+&lt;date&gt;</code> does the type coercion to the integer representation and has the same effect as <code>&lt;date&gt;.getTime()</code> and <code>8.64e7</code> is the number of milliseconds in a day.     </p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I am calculating the number of days between the 'from' and 'to' date. For example, if the from date is 13/04/2010 and the to date is 15/04/2010 the result should be 2. How do I get the result using JavaScript? </p>\n",
            "last_activity_date": 1398411314,
            "question_id": 2627473,
            "score": 63,
            "tags": [
                "javascript"
            ],
            "title": "How to calculate the number of days between two dates using JavaScript? "
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>It does nothing because no events have been bound to the event.  If I recall correctly, jQuery maintains its own list of event handlers that are bound to NodeLists for performance and other purposes.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you look at the code for the <code>$.click</code> function I'll bet there is a conditional statement that checks to see if the element has listeners registered for the<code>click</code> event before it proceeds.  Why not just get the <code>href</code> attribute from the link and manually change the page location?</p>\n\n<pre><code> window.location.href = $('a').attr('href');\n</code></pre>\n\n<p>EDIT: Here is why it doesn't click through, from the <code>trigger</code> function, jQuery source for version 1.3.2:</p>\n\n<pre><code> // Handle triggering native .onfoo handlers (and on links since we don't call .click() for links)\n\tif ( (!elem[type] || (jQuery.nodeName(elem, 'a') &amp;&amp; type == \"click\")) &amp;&amp; elem[\"on\"+type] &amp;&amp; elem[\"on\"+type].apply( elem, data ) === false )\n\t\tevent.result = false;\n\n\t// Trigger the native events (except for clicks on links)\n\tif ( !bubbling &amp;&amp; elem[type] &amp;&amp; !event.isDefaultPrevented() &amp;&amp; !(jQuery.nodeName(elem, 'a') &amp;&amp; type == \"click\") ) {\n\t\tthis.triggered = true;\n\t\ttry {\n\t\t\telem[ type ]();\n\t\t// prevent IE from throwing an error for some hidden elements\n\t\t} catch (e) {}\n\t}\n</code></pre>\n\n<p>After it calls handlers (if there are any) jQuery triggers an event on the object. However it only calls native handlers for click events if the element is not a link.  I guess this was done purposefully for some reason.  This should be true though whether an event handler is defined or not, so I'm not sure why in your case attaching an event handler caused the native <code>onClick</code> handler to be called. You'll have to do what I did and step through the execution to see where it is being called.</p>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<p>Click handlers on anchor tags are a special case in jQuery.</p>\n\n<p>I think you might be getting confused between the anchor's onclick event (known by the browser) and the click event of the jQuery object which wraps the DOM's notion of the anchor tag.</p>\n\n<p>You can download the jQuery 1.3.2 source <a href=\"http://code.google.com/p/jqueryjs/downloads/detail?name=jquery-1.3.2.js\" rel=\"nofollow\">here</a>.</p>\n\n<p>The relevant sections of the source are lines 2643-2645 (I have split this out to multiple lines to make it easier to comprehend):</p>\n\n<pre><code>// Handle triggering native .onfoo handlers (and on links since we don't call .click() for links)\nif (\n     (!elem[type] || (jQuery.nodeName(elem, 'a') &amp;&amp; type == \"click\")) &amp;&amp; \n       elem[\"on\"+type] &amp;&amp; \n       elem[\"on\"+type].apply( elem, data ) === false\n   )\n     event.result = false;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Interesting, this is probably a \"feature request\" (ie bug) for jQuery. The jQuery click event only triggers the click action (called onClick event on the DOM) on the element if you bind a jQuery event to the element. You should go to jQuery mailing lists ( <a href=\"http://docs.jquery.com/Discussion\">http://docs.jquery.com/Discussion</a> ) and report this. This might be the wanted behavior, but I don't think so.</p>\n\n<p>EDIT:</p>\n\n<p>I did some testing and what you said is wrong, even if you bind a function to an 'a' tag it still doesn't take you to the website specified by the href attribute. Try the following code:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n\n&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3/jquery.min.js\"&gt;&lt;/script&gt;\n &lt;script&gt;\n  $(document).ready(function() {\n   /* Try to dis-comment this:\n   $('#a').click(function () {\n    alert('jQuery.click()');\n    return true;\n   });\n   */\n  });\n  function button_onClick() {\n   $('#a').click();\n  }\n  function a_onClick() {\n   alert('a_onClick');\n  }\n &lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\n &lt;input type=\"button\" onclick=\"button_onClick()\"&gt;\n &lt;br&gt;\n &lt;a id='a' href='http://www.google.com' onClick=\"a_onClick()\"&gt; aaa &lt;/a&gt;\n\n&lt;/body&gt;\n&lt;/html&gt; \n</code></pre>\n\n<p>It never goes to google.com unless you directly click on the link (with or without the commented code). Also notice that even if you bind the click event to the link it still doesn't go purple once you click the button. It only goes purple if you click the link directly.</p>\n\n<p>I did some research and it seems that the .click is not suppose to work with 'a' tags because the browser does not suport \"fake clicking\" with javascript. I mean, you can't \"click\" an element with javascript. With 'a' tags you can trigger its onClick event but the link won't change colors (to the visited link color, the default is purple in most browsers). So it wouldn't make sense to make the $().click event work with 'a' tags since the act of going to the href attribute is not a part of the onClick event, but hardcoded in the browser.</p>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p>If you need this feature for one case or very few casses. (you'r whole app is not requiring this feature) I would rather leave jQuery as is (for many reasons, including being able to update to newer versions, CDN etc.) and have the following workaround:</p>\n\n<pre><code>// For modren Browsers\n$(ele).trigger(\"click\");\n\n// Relaying on Paul Irish's conditional class names http://bit.ly/HWIpAp (via HTML5 Boilerplate http://bit.ly/HUzi3I) where each IE version gets a class of its Version\n$(\"html.ie7\").length &amp;&amp; (function(){\n    var eleOnClickattr = $(ele).attr(\"onclick\") \n    eval(eleOnClickattr);\n  })()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Another option is of course to just use vanilla javascript : </p>\n\n<pre><code>$(\"#a_link\")[0].click();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 134
                },
                {
                    "body": "<p>Trigger a Hyperlink  element that is inside the element you want to hookup the jquery .click()</p>\n\n<pre><code>&lt;div class=\"TopicControl\"&gt;\n    &lt;div class=\"articleImage\"&gt;\n       &lt;a href=\"\"&gt;&lt;img src=\"\" alt=\"\"&gt;&lt;/a&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>In your script you hookup to the main container you want the click event on. Then you use standard jquery methodology to find the element (type,class,id) and fire the click. What happens is jquery enters a recursive function to fire the click and you break the recursive function by takeing the event 'e' and stopPropagation() function and return false because you don't want jquery to do anything else but fire the link.</p>\n\n<pre><code>$('.TopicControl').click(function (event) {\n         $(this).find('a').click();\n        event.stopPropagation();\n        return false;\n     });\n</code></pre>\n\n<p>Alternative solution is to wrap the containers in the  element and place 's as containers inside instead of 's. Set the spans to display block to conform with w3c standards.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>JS/jQuery doesn't support the default behavior of links \"clicked\" programmatically.</p>\n\n<p>What you can do is create a form and submit it. This way you don't have to use <code>window.location</code> or <code>window.open</code>, which are often blocked as unwanted popups by browsers. </p>\n\n<p>This script has 2 different methods: one that tries to open 3 new tabs/windows (it opens only 1 in IE and Chrome, more info below) and one that fires a custom event on link click.</p>\n\n<p>Here is how:</p>\n\n<h3>HTML</h3>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script src=\"jquery-1.9.1.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n    &lt;script src=\"script.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;button id=\"testbtn\"&gt;Test&lt;/button&gt;&lt;br&gt;&lt;br&gt;\n\n    &lt;a href=\"https://google.nl\"&gt;GOOGLE&lt;/a&gt;&lt;br&gt;\n    &lt;a href=\"http://en.wikipedia.org/wiki/Main_Page\"&gt;WIKI&lt;/a&gt;&lt;br&gt;\n    &lt;a href=\"http://stackoverflow.com/\"&gt;SO&lt;/a&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h3>jQuery (script.js)</h3>\n\n<pre><code>$(function()\n{ \n    // Try to open all 3 links by pressing the button\n    // - Firefox opens all 3 links\n    // - Chrome only opens 1 of them without popup warning\n    // - IE only opens 1 of them WITH popup warning\n    $(\"#testbtn\").on(\"click\", function()\n    {\n        $(\"a\").each(function()\n        {\n            var form = $(\"&lt;form&gt;&lt;/form&gt;\");\n            form.attr(\n            {\n                id     : \"formform\",\n                action : $(this).attr(\"href\"),\n                method : \"GET\",\n                // Open in new window/tab\n                target : \"_blank\"\n            });\n\n            $(\"body\").append(form);\n            $(\"#formform\").submit();\n            $(\"#formform\").remove();\n        });\n    });\n\n    // Or click the link and fire a custom event \n    // (open your own window without following the link itself)\n    $(\"a\").on(\"click\", function()\n    {\n        var form = $(\"&lt;form&gt;&lt;/form&gt;\");\n        form.attr(\n        {\n            id     : \"formform\",\n            // The location given in the link itself\n            action : $(this).attr(\"href\"), \n            method : \"GET\",\n            // Open in new window/tab\n            target : \"_blank\"              \n        });\n\n        $(\"body\").append(form);\n        $(\"#formform\").submit();\n        $(\"#formform\").remove();\n\n        // Prevent the link from opening normally\n        return false;\n    });\n\n});\n</code></pre>\n\n<p>What it does is for each link element:</p>\n\n<ol>\n<li>Create a form</li>\n<li>Give it attributes</li>\n<li>Append it to the DOM so it can be submitted</li>\n<li>Submit it</li>\n<li>Remove the form from the DOM, removing all traces *Insert evil laugh*</li>\n</ol>\n\n<p>Now you have a new tab/window loading <code>\"https://google.nl\"</code> (or any URL you want, just replace it). Unfortunately when you try to open more than one window this way, you get an <code>Popup blocked</code> messagebar when trying to open the second one (the first one is still opened).</p>\n\n<hr>\n\n<p>More info on how I got to this method is found here: </p>\n\n<p><a href=\"http://stackoverflow.com/questions/11735889/opening-new-window-tab-without-using-window-open-or-window-location-href\">Opening new window/tab without using <code>window.open</code> or <code>window.location.href</code></a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I have a timer in my javascript which needs to emulate clicking a link to go to another page once the time elapses. To do this I'm using jquery's click() function. I have used $().trigger() and window.location also, and I can make it work as intended with all three.</p>\n\n<p>I've observed some weird behavior with click() and I'm trying to understand what happens and why.</p>\n\n<p>I'm using Firefox for everything I describe in this question, but I am also interested in what other browsers will do with this.</p>\n\n<p>If I have not used <code>$('a').bind('click',fn)</code> or <code>$('a').click(fn)</code> to set an event handler, then calling $('a').click() seems to do nothing at all. It does not call the browser's default handler for this event, as the browser does not load the new page.</p>\n\n<p>However, if I set an event handler first, then it works as expected, even if the event handler does nothing.</p>\n\n<pre><code>$('a').click(function(){return true;}).click();\n</code></pre>\n\n<p>This loads the new page as if I had clicked the a myself.</p>\n\n<p>So my question is twofold: Is this weird behavior because I'm doing something wrong somewhere? and Why does calling click() do nothing with the default behavior if I haven't created a handler of my own?</p>\n\n<p>EDIT:</p>\n\n<p>As Hoffman determined when he tried to duplicate my results, the outcome I described above doesn't actually happen. I'm not sure what caused the events I observed yesterday, but I'm certain today that it was not what I described in the question.</p>\n\n<p>So the answer is that you can't \"fake\" clicks in the browser and that all jquery does is call your event handler. You can still use window.location to change page, and that works fine for me.</p>\n",
            "last_activity_date": 1412948967,
            "question_id": 1694595,
            "score": 91,
            "tags": [
                "javascript",
                "jquery",
                "firefox",
                "events",
                "click"
            ],
            "title": "Can I call jquery click() to follow an &lt;a&gt; link if I haven&#39;t bound an event handler to it with bind or click already?"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>The best solution I have found is:</p>\n\n<pre><code>this.focus();\nself.opener=this;\nself.close();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>From <a href=\"http://blogs.x2line.com/al/articles/350.aspx\" rel=\"nofollow\">here</a>:</p>\n\n<pre><code>&lt;a href=\"javascript:window.opener='x';window.close();\"&gt;Close&lt;/a&gt;\n</code></pre>\n\n<p>You need to set <code>window.opener</code> to something, otherwise it complains.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The browser is complaining because you're using JavaScript to close a window that wasn't opened with JavaScript, i.e. <code>window.open('foo.html');</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>window.opener=window;\nwindow.close();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>My friend... there is a way but \"hack\" does not begin to describe it. You have to basically exploit a bug in IE 6 &amp; 7. </p>\n\n<p>Works every time!</p>\n\n<p>Instead of calling <code>window.close()</code>, redirect to another page. </p>\n\n<p>Opening Page:</p>\n\n<pre><code>alert(\"No whammies!\");\nwindow.open(\"closer.htm\", '_self');\n</code></pre>\n\n<p>Redirect to another page. This fools IE into letting you close the browser on this page. </p>\n\n<p>Closing Page:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    window.close();\n&lt;/script&gt;\n</code></pre>\n\n<p>Awesome huh?!</p>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<pre><code>window.open('', '_self', ''); window.close();\n</code></pre>\n\n<p>This works for me.</p>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>In the body tag:</p>\n\n<pre><code>&lt;body onload=\"window.open('', '_self', '');\"&gt;\n</code></pre>\n\n<p>To close the window:</p>\n\n<pre><code>&lt;a href=\"javascript:window.close();\"&gt;\n</code></pre>\n\n<p>Tested on Safari 4.0.5, FF for Mac 3.6, IE 8.0, and FF for Windows 3.5</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>For security reasons, a window can only be closed in JavaScript if it was opened by JavaScript. In order to close the window, you must open a new window with <code>_self</code> as the target, which will overwrite your current window, and then close that one (which you can do since it was opened via JavaScript).</p>\n\n<pre><code>window.open('', '_self', '');\nwindow.close();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Create a JavaScript function</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function closeme() {\n        window.open('', '_self', '');\n        window.close();\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>Now write this code and call the above JavaScript function</p>\n\n<pre><code>&lt;a href=\"Help.aspx\" target=\"_blank\" onclick=\"closeme();\"&gt;Help&lt;/a&gt;\n</code></pre>\n\n<p>Or simply:</p>\n\n<pre><code>&lt;a href=\"\" onclick=\"closeme();\"&gt;close&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This works in Chrome 26, Internet Explorer 9 and Safari 5.1.7 (<strong>without</strong> the use of a helper page, ala Nick's answer):</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    window.open('javascript:window.open(\"\", \"_self\", \"\");window.close();', '_self');\n&lt;/script&gt;\n</code></pre>\n\n<p>The nested <code>window.open</code> is to make IE not display the <em>Do you want to close this window</em> prompt.</p>\n\n<p>Unfortunately it is impossible to get Firefox to close the window.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Here is Javascript function which I use to close browser without Prompt or Warning, it can also be called from Flash.\nIt should be in html file.</p>\n\n<pre><code>    function closeWindows() {\n         var browserName = navigator.appName;\n         var browserVer = parseInt(navigator.appVersion);\n         //alert(browserName + \" : \"+browserVer);\n\n         //document.getElementById(\"flashContent\").innerHTML = \"&lt;br&gt;&amp;nbsp;&lt;font face='Arial' color='blue' size='2'&gt;&lt;b&gt; You have been logged out of the Game. Please Close Your Browser Window.&lt;/b&gt;&lt;/font&gt;\";\n\n         if(browserName == \"Microsoft Internet Explorer\"){\n             var ie7 = (document.all &amp;&amp; !window.opera &amp;&amp; window.XMLHttpRequest) ? true : false;  \n             if (ie7)\n             {  \n               //This method is required to close a window without any prompt for IE7 &amp; greater versions.\n               window.open('','_parent','');\n               window.close();\n             }\n            else\n             {\n               //This method is required to close a window without any prompt for IE6\n               this.focus();\n               self.opener = this;\n               self.close();\n             }\n        }else{  \n            //For NON-IE Browsers except Firefox which doesnt support Auto Close\n            try{\n                this.focus();\n                self.opener = this;\n                self.close();\n            }\n            catch(e){\n\n            }\n\n            try{\n                window.open('','_self','');\n                window.close();\n            }\n            catch(e){\n\n            }\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Because of the security enhancements in IE, we can't close a window unless it is opened by a script. So the walk around will be to let the browser thinks that this page is opened using a script then closing the window. Below is the implementation.</p>\n\n<p>Try this, it Works like a charm!<br>\n<strong><em><a href=\"http://www.dotnetbull.com/2011/12/closing-window-without-prompt-in.html\" rel=\"nofollow\">javascript close current window without prompt IE</a></em></strong></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction closeWP() {\n var Browser = navigator.appName;\n var indexB = Browser.indexOf('Explorer');\n\n if (indexB &gt; 0) {\n    var indexV = navigator.userAgent.indexOf('MSIE') + 5;\n    var Version = navigator.userAgent.substring(indexV, indexV + 1);\n\n    if (Version &gt;= 7) {\n        window.open('', '_self', '');\n        window.close();\n    }\n    else if (Version == 6) {\n        window.opener = null;\n        window.close();\n    }\n    else {\n        window.opener = '';\n        window.close();\n    }\n\n }\nelse {\n    window.close();\n }\n}\n&lt;/script&gt;\n</code></pre>\n\n<h2><a href=\"http://www.dotnetbull.com/2011/12/closing-window-without-prompt-in.html\" rel=\"nofollow\">javascript close current window without prompt IE</a></h2>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Scripts are <em>not allowed</em> to close a window that a user opened. This is considered a security risk. Though it isn't in any standard, all browser vendors follow this (<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window.close\">Mozilla docs</a>). If this happens in some browsers, it's a security bug that (ideally) gets patched very quickly.</p>\n\n<p>None of the hacks in the answers on this question work any longer, and if someone would come up with another dirty hack, eventually it will stop working as well.</p>\n\n<p>I suggest you don't waste energy fighting this and embrace the method that the browser so helpfully gives you &mdash; <em>ask</em> the user before you seemingly crash their page.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Place the following code in the ASPX.</p>\n\n<pre><code>&lt;script language=javascript&gt;\nfunction CloseWindow() \n{\n    window.open('', '_self', '');\n    window.close();\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Place the following code in the code behind button click event.</p>\n\n<pre><code>string myclosescript = \"&lt;script language='javascript' type='text/javascript'&gt;CloseWindow();&lt;/script&gt;\";\n\nPage.ClientScript.RegisterStartupScript(GetType(), \"myclosescript\", myclosescript);\n</code></pre>\n\n<p>If you dont have any processing before close then you can directly put the following code in the ASPX itself in the button click tag.</p>\n\n<pre><code>OnClientClick=\"CloseWindow();\"\n</code></pre>\n\n<p>Hope this helps.</p>\n\n<p>Thanks,</p>\n\n<pre><code>Kamleshkumar Gujarathi\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How can I close a browser window without receiving the <em>Do you want to close this window</em> prompt?</p>\n\n<p>The prompt occurs when I use the <code>window.close();</code> function.</p>\n",
            "last_activity_date": 1415706263,
            "question_id": 57854,
            "score": 40,
            "tags": [
                "javascript"
            ],
            "title": "How can I close a browser window without receiving the &quot;Do you want to close this window&quot; prompt?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>I am a big fan of the proposed HTML 5 solution (<code>data-</code> prefixed attributes). Edit: I'd add that there are probably better examples for the use of custom attributes. For instance, data that a custom application will use that have no analogue in standard attributes (eg. customization for event handlers based on something that can't necessarily be expressed in a className or id).</p>\n",
                    "is_accepted": true,
                    "score": 39
                },
                {
                    "body": "<p>My personal feeling in your example is that the span route is more appropriate, as it meets the standards of the XHTML specification.  However, i can see an argment for custom attributes, but I think they add a level of confusion that isn't needed.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Another option would be to define something like this in Javascript:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nvar link_titles = {link1: \"Title 1\", link2: \"Title 2\"};\n&lt;/script&gt;\n</code></pre>\n\n<p>Then you can use this later in your Javascript code, assuming your link has an ID that corresponds to the ID in this hashtable.</p>\n\n<p>It doesn't have the disadvantages of the other two methods: no non-standard attributes nor the ugly hidden span.</p>\n\n<p>The disadvantage is that it might a bit of an overkill for things as simple as your example. But for more complex scenarios, where you have more data to pass, it's a good choice. Especially considering that the data is being passed as JSON, so you can pass complex objects with ease.</p>\n\n<p>Also, you keep data separate from the formatting, which is a good thing for maintainability.</p>\n\n<p>You can even have something like this (which you can't really do with the other methods):</p>\n\n<pre><code>var poi_types = {1: \"City\", 2: \"Restaurant\"};\nvar poi = {1: {lat: X, lng: Y, name: \"Beijing\", type: 1}, 2: {lat: A, lng: B, name: \"Hatsune\", type: 2}};\n</code></pre>\n\n<p>...</p>\n\n<pre><code>&lt;a id=\"poi-2\" href=\"/poi/2/\"&gt;Hatsune&lt;/a&gt;\n</code></pre>\n\n<p>And since you most probably use some server-side programming language, this hash table should be trivial to generate dynamically (just serialize it to JSON and spit it in the header section of the page).</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Well in this case, the optimal solution is </p>\n\n<pre><code>&lt;a href=\"#\" alt=\"\" title=\"Title of My Pop-up\"&gt;click&lt;/a&gt;\n</code></pre>\n\n<p>and using title attribute.</p>\n\n<p>Sometimes I break the spec if I really need it. But rarely, and only for good reason.</p>\n\n<p>EDIT: Not sure why the -1, but I was pointing out that sometimes you think you need to break spec, when you don't.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I've been racking my brain over this as well.  I like the readability of non-standard attributes, but I don't like that it will break standard.  The hidden span example is compliant, but it is not very readable.  What about this:</p>\n\n<pre><code>&lt;a href=\"#\" alt=\"\" title=\"\" rel=\"{popup_title:'Title of My Pop-up'}\"&gt;click&lt;/a&gt;\n</code></pre>\n\n<p>Here the code is very readable, because of JSON's key/value pair notation.  You can tell that this is meta data that belongs link just by looking at it.  The only flaw I can see beside hijacking the \"rel\" attribute is that this would get messy for complex objects.  I really like that idea of \"data-\" prefixed attributes mentioned above.  Do any current browsers support this? </p>\n\n<p>Here is something else to think about.  How much impact does not compliant code have on SEO?</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Custom attributes provide a convenient way to carry extra data to the client side. Dojo Toolkit is doing this regularly and it has been pointed (<a href=\"http://www.sitepen.com/blog/2008/10/27/debunking-dojo-toolkit-myths/\">Debunking Dojo Toolkit Myths</a>) out that:</p>\n\n<blockquote>\n  <p>Custom attributes have always been\n  valid HTML, they just don\u2019t validate\n  when tested against a DTD. [...] The\n  HTML specification states that any\n  attribute not recognized is to be\n  ignored by the HTML rendering engine\n  in user agents, and Dojo optionally\n  takes advantage of this to improve\n  ease of development.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>You could nest hidden input elements INSIDE the anchor element</p>\n\n<pre><code>&lt;a id=\"anchor_id\"&gt;\n  &lt;input type=\"hidden\" class=\"articleid\" value=\"5\"&gt;\n  Link text here\n&lt;/a&gt;\n</code></pre>\n\n<p>Then you can easily pull the data out by</p>\n\n<pre><code>$('#anchor_id .articleid').val()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Why not declaring the popup_title attribute in a custom DTD ? This solves the problem with validation. I do this with every non-standard elements, attributes and values and thank this validation shows me only real problems with my code. This makes also any browser errors less possible with such HTML.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>My solution in the end was to hide additional data in the id tag separated by some sort of delimiter (one underscore is a space, two is the end of that arg), the second arg there is an id:</p>\n\n<pre><code>&lt;a href=\"#\" class=\"article\" id=\"Title_of_My_Pop-up__47\"&gt;click&lt;/a&gt;\n</code></pre>\n\n<p>Ugly, and it assumes you're not already using the id tag for something else, but it is compliant across every browser.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>HTML (or maybe just XHTML?) is relatively strict when it comes to non-standard attributes on tags. If they aren't part of the spec, then your code is considered non-compliant.</p>\n\n<p>Non-standard attributes can be fairly useful for passing along meta-data to Javascript however. For instance, if a link is suppose to show a popup, you can set the name of the popup in an attribute:</p>\n\n<pre><code>&lt;a href=\"#null\" class=\"popup\" title=\"See the Popup!\" \n   popup_title=\"Title for My Popup\"&gt;click me&lt;/a&gt;\n</code></pre>\n\n<p>Alternatively, you can store the title for the popup in a hidden element, like a span:</p>\n\n<pre><code>&lt;style&gt;\n    .popup .title { display: none; }\n&lt;/style&gt;\n&lt;a href=\"#null\" title=\"See the Popup!\" class=\"popup\"&gt;\n    click me\n    &lt;span class=\"title\"&gt;Title for My Popup&lt;/span&gt;\n&lt;/a&gt;\n</code></pre>\n\n<p>I am torn however as to which should be a preferred method. The first method is more concise and, I'm guessing, doesn't screw with search engines and screen readers as much. Conversely, the second option makes storing large amounts of data easier and is thus, more versatile. It is also standards compliant.</p>\n\n<p>I am curious what this communities thoughts are. How do you handle a situation like this? Does the simplicity of the first method outweigh the potential downsides (if there are any)?</p>\n",
            "last_activity_date": 1349965428,
            "question_id": 209428,
            "score": 76,
            "tags": [
                "javascript",
                "html",
                "standards"
            ],
            "title": "Non-Standard Attributes on HTML Tags. Good Thing? Bad Thing? Your Thoughts?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p><a href=\"http://api.jquery.com/live/\"><code>.live()</code></a> requires you run the selector immediately, unless you're using the result it's very wasteful.  The event handler here is attached to <code>document</code>, so all event of that type from any elements bubbling must be checked.  Here's a usage example:</p>\n\n<pre><code>$(\".myClass\").live(\"click\", function() { alert(\"Hi\"); });\n</code></pre>\n\n<p>Note that the statement <code>$(\".myClass\")</code> ran that selector to find all elements with that class <em>even though we don't care about them</em>, all we <em>wanted</em> was the string <code>\".myClass\"</code> to match <em>later</em> when <code>click</code> events bubble up to <code>document</code>.</p>\n\n<hr>\n\n<p><a href=\"http://api.jquery.com/delegate/\"><code>.delegate()</code></a> actually uses <code>.live()</code> internally, but with a context.  The selector is <em>not</em> run immediately, so it's more efficient already, and it doesn't attach to <code>document</code> (though it can) it's much more local...and all those <em>other</em> events from other element trees you don't care about are never even checked when bubbled...again more efficient.  Here's a usage example:</p>\n\n<pre><code>$(\"#myTable\").delegate(\"td\", \"click\", function() { alert(\"Hi\"); });\n</code></pre>\n\n<p>Now what happened here? We ran <code>$(\"#myTable\")</code> to get the element to attach to (admittedly more expensive than <code>document</code>, but we're <em>using</em> the result.  Then we attach an event handler to that (or those in other cases) elements.  Only <code>clicks</code> from <em>within</em> that element are checked against the <code>\"td\"</code> selector when they happen, not from <em>everywhere</em> like <code>.live()</code> does (since <em>everything</em> is inside <code>document</code>).</p>\n",
                    "is_accepted": true,
                    "score": 52
                },
                {
                    "body": "<p><em>delegate()</em> maps to <em>live()</em> in the jQuery code.  The main difference is that <em>live()</em> is called on an element for which you wish to delegate the events to a different element.  <em>live()</em> will delegate these events to the <em>document</em> object.  </p>\n\n<p><em>delegate()</em>, on the other hand allows you to set which element events are delegated to by passing a selector.  Events that bubble up to that element are handled if the originating element matches the selector.  </p>\n\n<p>As @NickCraver <a href=\"http://stackoverflow.com/questions/4204316/jquery-live-vs-delegate/4204349#4204349\">mentioned</a>, <em>delegate()</em> performs better than live because it doesn't necessarily capture events from every element on the page, and it doesn't query the selector right away.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>From jQuery Documentation:</p>\n\n<blockquote>\n  <p>As of jQuery 1.7, the .live() method is deprecated. Use .on() to attach event handlers. Users of older versions of jQuery should use .delegate() in preference to .live().</p>\n</blockquote>\n\n<p><a href=\"http://api.jquery.com/live/\" rel=\"nofollow\">http://api.jquery.com/live/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Live Method:</p>\n\n<pre><code>$(\"#mymethod\").live(\"click\", function() { alert(\"It checks the entire DOM\"); });\n</code></pre>\n\n<p>Live Method Checks #mymethod in Entire DOM (Sometimes it will take time based on your DOM Contents)</p>\n\n<p>Delegate Method:</p>\n\n<pre><code>$('.mycontainer').delegate('#mymethod','click',function() { alert('Checks only in mycontainer portion') });\n</code></pre>\n\n<p>Delagate does not search your whole DOM it searches only in your mycontainer portion.(Improve Performance)</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm using jQuery in my web application. While reading its documentation I read about <code>live()</code> and <code>delegate()</code>. Although they have explained both methods, I don't understand the exact difference between them. Also not sure about which method is ideal in which scenario.</p>\n\n<p>Please help me to get clear understanding of these methods.</p>\n\n<p>Thanks</p>\n",
            "last_activity_date": 1418644814,
            "question_id": 4204316,
            "score": 44,
            "tags": [
                "javascript",
                "live",
                "jquery"
            ],
            "title": "jQuery: live() vs delegate()"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>well, you can very quickly test the click dispatch via jQuery like so</p>\n\n<pre><code>$('#link-id').click();\n</code></pre>\n\n<p>If you're still having problem with click respecting the target, you can always do this</p>\n\n<pre><code>$('#link-id').click( function( event, anchor )\n{\n  window.open( anchor.href, anchor.target, '' );\n  event.preventDefault();\n  return false;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Quoted from <a href=\"https://developer.mozilla.org/en/DOM/element.click\">https://developer.mozilla.org/en/DOM/element.click</a></p>\n\n<blockquote>\n  <p>The click method is intended to be used with INPUT elements of type button, checkbox, radio, reset or submit. Gecko does not implement the click method on other elements that might be expected to respond to mouse\u2013clicks such as links (A elements), nor will it necessarily fire the click event of other elements.</p>\n  \n  <p>Non\u2013Gecko DOMs may behave differently. </p>\n</blockquote>\n\n<p>Unfortunately it sounds like you have already discovered the best solution to your problem.</p>\n\n<p>As a side note, I agree that your solution seems less than ideal, but if you encapsulate the functionality inside a method (much like JQuery would do) it is not so bad.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Here is a complete test case that simulates the <code>click</code> event, calls all handlers attached (however they have been attached), maintains the <code>\"target\"</code> attribute (<code>\"srcElement\"</code> in IE), bubbles like a normal event would, and emulates IE's recursion-prevention. Tested in FF 2, Chrome 2.0, Opera 9.10 and of course IE (6):</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n&lt;script&gt;\nfunction fakeClick(event, anchorObj) {\n  if (anchorObj.click) {\n    anchorObj.click()\n  } else if(document.createEvent) {\n    if(event.target !== anchorObj) {\n      var evt = document.createEvent(\"MouseEvents\"); \n      evt.initMouseEvent(\"click\", true, true, window, \n          0, 0, 0, 0, 0, false, false, false, false, 0, null); \n      var allowDefault = anchorObj.dispatchEvent(evt);\n      // you can check allowDefault for false to see if\n      // any handler called evt.preventDefault().\n      // Firefox will *not* redirect to anchorObj.href\n      // for you. However every other browser will.\n    }\n  }\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;div onclick=\"alert('Container clicked')\"&gt;\n  &lt;a id=\"link\" href=\"#\" onclick=\"alert((event.target || event.srcElement).innerHTML)\"&gt;Normal link&lt;/a&gt;\n&lt;/div&gt;\n\n&lt;button type=\"button\" onclick=\"fakeClick(event, document.getElementById('link'))\"&gt;\n  Fake Click on Normal Link\n&lt;/button&gt;\n\n&lt;br /&gt;&lt;br /&gt;\n\n&lt;div onclick=\"alert('Container clicked')\"&gt;\n    &lt;div onclick=\"fakeClick(event, this.getElementsByTagName('a')[0])\"&gt;&lt;a id=\"link2\" href=\"#\" onclick=\"alert('foo')\"&gt;Embedded Link&lt;/a&gt;&lt;/div&gt;\n&lt;/div&gt;\n\n&lt;button type=\"button\" onclick=\"fakeClick(event, document.getElementById('link2'))\"&gt;Fake Click on Embedded Link&lt;/button&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><a href=\"http://jsbin.com/iyadi\">Demo here.</a></p>\n\n<p>It avoids recursion in non-IE browsers by inspecting the event object that is initiating the simulated click, by inspecting the <code>target</code> attribute of the event (which <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-bubbling\">remains unchanged during propagation</a>).</p>\n\n<p>Obviously IE does this internally holding a reference to its <a href=\"http://www.w3.org/TR/DOM-Level-2-Events/events.html#Events-flow-bubbling\">global <code>event</code> object</a>. DOM level 2 defines no such global variable, so for that reason the simulator must pass in its local copy of <code>event</code>.</p>\n",
                    "is_accepted": true,
                    "score": 51
                }
            ],
            "body": "<p>I know this is similar to <a href=\"http://stackoverflow.com/questions/980709/javascript-invoking-click-event-of-an-anchor-tag-from-javascript\">this question</a> and <a href=\"http://stackoverflow.com/questions/603556/how-to-navigate-href-in-anchor-tag-via-javascript\">this question</a>, but given solutions didn't address the \"target\" property.</p>\n\n<p>I want to simulate a click to an anchor tag with all extras like correct target handling.</p>\n\n<p>There seems to be a \"<a href=\"http://www.w3schools.com/htmldom/met%5Fbutton%5Fclick.asp\">click()</a>\" method for anchor's DOM object but not all browsers support that. Firefox throws this error:</p>\n\n<blockquote>\n  <p>Error: anchorObj.click is not a function</p>\n</blockquote>\n\n<p>It also works strangely on Opera 10 and Konqueror, causing infinite clicks to happen when it's called inside onclick handler of a surrounding div. I guess only IE8 works fine with it. Anyway I don't want it since major browsers mostly have problems with it. </p>\n\n<p>I found this alternate solution for Firefox in Mozilla forums:</p>\n\n<pre><code>var evt = document.createEvent(\"MouseEvents\"); \nevt.initMouseEvent(\"click\", true, true, window, \n    0, 0, 0, 0, 0, false, false, false, false, 0, null); \nanchorObj.dispatchEvent(evt);\n</code></pre>\n\n<p>This seems too ugly and cumbersome for me. I don't know how compatible it is and I want to avoid writing browser specific code as much as possible.</p>\n\n<p>I can't use location.href = anchorObj.href; because it doesn't handle \"target\" attribute. I can do some hard coding based on target's value but I'd like to avoid that as well.</p>\n\n<p>There is suggestion of switching to JQuery but I'm not sure how well it handles target property either since I haven't worked with it before.</p>\n",
            "last_activity_date": 1389135181,
            "question_id": 1421584,
            "score": 32,
            "tags": [
                "javascript",
                "html",
                "dom"
            ],
            "title": "How can I simulate a click to an anchor tag?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I use the following method:</p>\n\n<pre><code>function htmlDecode(input){\n  var e = document.createElement('div');\n  e.innerHTML = input;\n  return e.childNodes.length === 0 ? \"\" : e.childNodes[0].nodeValue;\n}\n\nhtmlDecode(\"&amp;lt;img src='myimage.jpg'&amp;gt;\"); \n// returns \"&lt;img src='myimage.jpg'&gt;\"\n</code></pre>\n\n<p>Basically I create a DOM element programmatically, assign the encoded HTML to its innerHTML and retrieve the nodeValue from the text node created on the innerHTML insertion.</p>\n\n<p>It will work cross-browser accepting all the <a href=\"http://www.w3.org/TR/html4/sgml/entities.html\">HTML Character Entities</a>.</p>\n\n<p>EDIT: The old version of this code did not work on IE with blank inputs, as evidenced <a href=\"http://jsfiddle.net/HsNDj/5/\">here on jsFiddle</a> (view in IE). The version above works with all inputs.</p>\n",
                    "is_accepted": true,
                    "score": 83
                },
                {
                    "body": "<p>Not a direct response to your question, but wouldn't it be better for your RPC to return some structure (be it XML or JSON or whatever) with those image data (urls in your example) inside that structure? </p>\n\n<p>Then you could just parse it in your javascript and build the <code>&lt;img&gt;</code> using javascript itself.</p>\n\n<p>The structure you recieve from RPC could look like:</p>\n\n<pre><code>{\"img\" : [\"myimage.jpg\", \"myimage2.jpg\"]}\n</code></pre>\n\n<p>I think it's better this way, as injecting a code that comes from external source into your page doesn't look very secure. Imaging someone hijacking your XML-RPC script and putting something you wouldn't want in there (even some javascript...) </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you're using jQuery:</p>\n\n<pre><code>function htmlDecode(value){ \n  return $('&lt;div/&gt;').html(value).text(); \n}\n</code></pre>\n\n<p>Otherwise, use <a href=\"http://www.strictly-software.com/htmlencode\">Strictly Software's Encoder Object</a>, which has an excellent <code>htmlDecode()</code> function.</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>Chris answer is nice &amp; elegant but it fails if value is <em>undefined</em>. Just simple improvement makes it solid:</p>\n\n<pre><code>function htmlDecode(value) {\n   return (typeof value === 'undefined') ? '' : $('&lt;div/&gt;').html(value).text();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>if you can put your image in a container, then it's even easier:</p>\n\n<p><strong>HTML:</strong></p>\n\n<pre><code>&lt;div class=\"container\"&gt;\n    &lt;img src='myimage.jpg'&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>jQuery:</strong></p>\n\n<pre><code>$(\".container\").html($(\".container\").text());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>CMS' answer works fine, unless the HTML you want to unescape is very long, longer than 65536 chars. Because then in Chrome the inner HTML gets split into many child nodes, each one at most 65536 long, and you need to concatenate them. This function works also for very long strings:</p>\n\n<pre><code>function unencodeHtmlContent(escapedHtml) {\n  var elem = document.createElement('div');\n  elem.innerHTML = escapedHtml;\n  var result = '';\n  // Chrome splits innerHTML into many child nodes, each one at most 65536.\n  // Whereas FF creates just one single huge child node.\n  for (var i = 0; i &lt; elem.childNodes.length; ++i) {\n    result = result + elem.childNodes[i].nodeValue;\n  }\n  return result;\n}\n</code></pre>\n\n<p>See this answer about <code>innerHTML</code> max length for more info: <a href=\"http://stackoverflow.com/a/27545633/694469\">http://stackoverflow.com/a/27545633/694469</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have some Javascript code that communicates with an XML-RPC backend.\nThe XML-RPC returns strings of the form:</p>\n\n<pre><code>&lt;img src='myimage.jpg'&gt;\n</code></pre>\n\n<p>However, when I use the Javascript to insert the strings into HTML, they render literally. I don't see an image, I literally see the string:</p>\n\n<pre><code>&lt;img src='myimage.jpg'&gt;\n</code></pre>\n\n<p>My guess is that the HTML is being escaped over the XML-RPC channel.</p>\n\n<p>How can I unescape the string in Javascript? I tried the techniques on this page, unsuccessfully: <a href=\"http://paulschreiber.com/blog/2008/09/20/javascript-how-to-unescape-html-entities/\">http://paulschreiber.com/blog/2008/09/20/javascript-how-to-unescape-html-entities/</a></p>\n\n<p>What are other ways to diagnose the issue?</p>\n",
            "last_activity_date": 1418905049,
            "question_id": 1912501,
            "score": 43,
            "tags": [
                "javascript",
                "html",
                "escaping",
                "xml-rpc"
            ],
            "title": "Unescape HTML entities in Javascript?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>I think you're looking for <code>console.dir()</code>.</p>\n\n<p><code>console.log()</code> doesn't do what you want because it prints a reference to the object, and by the time you pop it open, it's changed. <code>console.dir</code> prints a directory of the properties in the object at the time you call it.</p>\n\n<p>The JSON idea below is a good one; you could even go on to parse the JSON string and get a browsable object like what .dir() would give you:</p>\n\n<p><code>console.log(JSON.parse(JSON.stringify(obj)));</code></p>\n",
                    "is_accepted": true,
                    "score": 46
                },
                {
                    "body": "<p>That <code>&gt; Object</code> in the console, isn't only showing the current state. It actually is deferring reading the object and it's properties until you expand it.</p>\n\n<p>For example,</p>\n\n<pre><code>var test = {a: true}\nconsole.log(test);\nsetTimeout(function () {\n    test.a = false; \n    console.log(test);\n}, 4000);\n</code></pre>\n\n<p>Then expand the first call, it will be correct, if you do it before the second <code>console.log</code> returns</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>What I usually do if I want to see it's state at the time it was logged is I just convert it to a JSON string.</p>\n\n<pre><code>console.log(JSON.stringify(a));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>You can create a snapshot of an object at a certain point in time with <a href=\"http://api.jquery.com/jQuery.extend/\" rel=\"nofollow\"><code>jQuery.extend</code></a></p>\n\n<pre><code>console.log($.extend({}, test));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>using Xeon06's hint, you may parse his JSON in an object, and here is the log function I now use to dump my objects : </p>\n\n<pre><code>function odump(o){\n   console.log($.parseJSON(JSON.stringify(o)));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I defined an utility:</p>\n\n<pre><code>function MyLog(text) {\n    console.log(JSON.stringify(text));\n}\n</code></pre>\n\n<p>and when I want to log on console I simply do:</p>\n\n<pre><code>MyLog(\"hello console!\");\n</code></pre>\n\n<p>It works very well!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I may be shot for suggesting this, but this can be taken one step further. We can directly extend the console object itself to make it more clear.</p>\n\n<pre><code>console.logObject = function(o) {\n  (JSON.stringify(o));\n}\n</code></pre>\n\n<p>I don't know if this will cause some type of library collision/nuclear meltdown/rip in the spacetime continuum. But it works beautifully in my qUnit tests. :)</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p><code>console.log</code> will show the object at the last state of execution, not at the state when <code>console.log</code> was called.</p>\n\n<p>I have to clone the object just to output it via <code>console.log</code> to get the state of the object at that line.</p>\n\n<p>How can I change the default behavior of console.log? (<em>Error console in safari, no add-on</em>)</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>var test = {a: true}\nconsole.log(test); // {a: false}\ntest.a = false; \nconsole.log(test); // {a: false}\n</code></pre>\n",
            "last_activity_date": 1398115897,
            "question_id": 7389069,
            "score": 40,
            "tags": [
                "javascript",
                "debugging",
                "console",
                "logging",
                "clone"
            ],
            "title": "console.log object at current state"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Improvise. Subtract JavaScript <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date\"><code>Date</code></a> objects to get their difference:</p>\n\n<pre><code>// use a constant date (e.g. 2000-01-01) and the desired time to initialize two dates\n\nvar date1 = new Date(2000, 0, 1,  9, 0); // 9:00 AM\nvar date2 = new Date(2000, 0, 1, 17, 0); // 5:00 PM\n\n// the following is to handle cases where the times are on the opposite side of\n// midnight e.g. when you want to get the difference between 9:00 PM and 5:00 AM\n\nif (date2 &lt; date1) {\n    date2.setDate(date2.getDate() + 1);\n}\n\nvar diff = date2 - date1;\n\n// 28800000 milliseconds (8 hours)\n</code></pre>\n\n<hr>\n\n<p>You can then convert milliseconds to hour, minute and seconds like this:</p>\n\n<pre><code>var msec = diff;\nvar hh = Math.floor(msec / 1000 / 60 / 60);\nmsec -= hh * 1000 * 60 * 60;\nvar mm = Math.floor(msec / 1000 / 60);\nmsec -= mm * 1000 * 60;\nvar ss = Math.floor(msec / 1000);\nmsec -= ss * 1000;\n// diff = 28800000 =&gt; hh = 8, mm = 0, ss = 0, msec = 0\n</code></pre>\n\n<hr>\n\n<p>You can convert time as string to 24-hour format like this:</p>\n\n<pre><code>function parseTime(s) {\n    var part = s.match(/(\\d+):(\\d+)(?: )?(am|pm)?/i);\n    var hh = parseInt(part[1], 10);\n    var mm = parseInt(part[2], 10);\n    var ap = part[3] ? part[3].toUpperCase() : null;\n    if (ap === \"AM\") {\n        if (hh == 12) {\n            hh = 0;\n        }\n    }\n    if (ap === \"PM\") {\n        if (hh != 12) {\n            hh += 12;\n        }\n    }\n    return { hh: hh, mm: mm };\n}\nparseTime(\"12:00 AM\"); // {hh:  0, mm: 0}\nparseTime(\"12:00 PM\"); // {hh: 12, mm: 0}\nparseTime(\"01:00 PM\"); // {hh: 13, mm: 0}\nparseTime(\"23:00\");    // {hh: 23, mm: 0}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>A good solution is avaliable at </p>\n\n<p><a href=\"http://blogs.digitss.com/javascript/calculate-datetime-difference-simple-javascript-code-snippet/\" rel=\"nofollow\">http://blogs.digitss.com/javascript/calculate-datetime-difference-simple-javascript-code-snippet/</a> </p>\n\n<p>gives the output in your desired differnece format of </p>\n\n<p>days :  hours : minutes : seconds . </p>\n\n<p>A slightly modified version of that code is shown below</p>\n\n<pre><code> var vdaysdiff; // difference of the dates\n   var vhourDiff;\n   var vmindiff;\n   var vsecdiff;\n\n   vdaysdiff = Math.floor(diff/1000/60/60/24);  // in days\n   diff -= vdaysdiff*1000*60*60*24;\n\n   vhourDiff = Math.floor(diff/1000/60/60);  // in hours\n   diff -= vhourDiff*1000*60*60;\n\n   vmindiff = Math.floor(diff/1000/60); // in minutes\n   diff -= vmindiff*1000*60;\n\n   vsecdiff= Math.floor(diff/1000);  // in seconds\n\n   //Text formatting\n   var hourtext = '00';\n   if (hourDiff &gt; 0){ hourtext = String(hourDiff);}\n   if (hourtext.length == 1){hourtext = '0' + hourtext};                                                              \n\n   var mintext = '00';                           \n   if (mindiff &gt; 0){ mintext = String(mindiff);}\n   if (mintext.length == 1){mintext = '0' + mintext};\n\n  //shows output as HH:MM ( i needed shorter duration)\n   duration.value= hourtext + ':' + mintext;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><strong>Here is my rendition....</strong></p>\n\n<pre><code>function get_time_difference(earlierDate, laterDate) \n{\n    var oDiff = new Object();\n\n    //  Calculate Differences\n    //  -------------------------------------------------------------------  //\n    var nTotalDiff = laterDate.getTime() - earlierDate.getTime();\n\n    oDiff.days = Math.floor(nTotalDiff / 1000 / 60 / 60 / 24);\n    nTotalDiff -= oDiff.days * 1000 * 60 * 60 * 24;\n\n    oDiff.hours = Math.floor(nTotalDiff / 1000 / 60 / 60);\n    nTotalDiff -= oDiff.hours * 1000 * 60 * 60;\n\n    oDiff.minutes = Math.floor(nTotalDiff / 1000 / 60);\n    nTotalDiff -= oDiff.minutes * 1000 * 60;\n\n    oDiff.seconds = Math.floor(nTotalDiff / 1000);\n    //  -------------------------------------------------------------------  //\n\n    //  Format Duration\n    //  -------------------------------------------------------------------  //\n    //  Format Hours\n    var hourtext = '00';\n    if (oDiff.days &gt; 0){ hourtext = String(oDiff.days);}\n    if (hourtext.length == 1){hourtext = '0' + hourtext};\n\n    //  Format Minutes\n    var mintext = '00';\n    if (oDiff.minutes &gt; 0){ mintext = String(oDiff.minutes);}\n    if (mintext.length == 1) { mintext = '0' + mintext };\n\n    //  Format Seconds\n    var sectext = '00';\n    if (oDiff.seconds &gt; 0) { sectext = String(oDiff.seconds); }\n    if (sectext.length == 1) { sectext = '0' + sectext };\n\n    //  Set Duration\n    var sDuration = hourtext + ':' + mintext + ':' + sectext;\n    oDiff.duration = sDuration;\n    //  -------------------------------------------------------------------  //\n\n    return oDiff;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This function returns a string with the difference from a datetime string and the current datetime.</p>\n\n<pre><code>function get_time_diff( datetime )\n{\n    var datetime = typeof datetime !== 'undefined' ? datetime : \"2014-01-01 01:02:03.123456\";\n\n    var datetime = new Date( datetime ).getTime();\n    var now = new Date().getTime();\n\n    if( isNaN(datetime) )\n    {\n        return \"\";\n    }\n\n    console.log( datetime + \" \" + now);\n\n    if (datetime &lt; now) {\n        var milisec_diff = now - datetime;\n    }else{\n        var milisec_diff = datetime - now;\n    }\n\n    var days = Math.floor(milisec_diff / 1000 / 60 / (60 * 24));\n\n    var date_diff = new Date( milisec_diff );\n\n    return days + \" Days \"+ date_diff.getHours() + \" Hours \" + date_diff.getMinutes() + \" Minutes \" + date_diff.getSeconds() + \" Seconds\";\n}\n</code></pre>\n\n<p>Tested in the Google Chrome <code>console</code> (press F12)</p>\n\n<pre><code>get_time_diff()\n1388534523123 1375877555722\n\"146 Days 12 Hours 49 Minutes 27 Seconds\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>When i tried the difference between same time stamp it gave 0 Days 5 Hours 30 Minutes </p>\n\n<p>so to get it exactly i have subtracted 5 hours and 30 min</p>\n\n<pre><code>function get_time_diff( datetime )\n{\nvar datetime = typeof datetime !== 'undefined' ? datetime : \"2014-01-01 01:02:03.123456\";\n\nvar datetime = new Date(datetime).getTime();\nvar now = new Date().getTime();\n\nif( isNaN(datetime) )\n{\n    return \"\";\n}\n\nconsole.log( datetime + \" \" + now);\n\nif (datetime &lt; now) {\n    var milisec_diff = now - datetime;\n}else{\n    var milisec_diff = datetime - now;\n}\n\nvar days = Math.floor(milisec_diff / 1000 / 60 / (60 * 24));\n\nvar date_diff = new Date( milisec_diff );\n\nreturn days + \"d \"+ (date_diff.getHours() - 5) + \"h \" + (date_diff.getMinutes() - 30) + \"m\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is an addition to <strong>dmd733</strong>'s answer. I fixed the bug with Day duration (well I hope I did, haven't been able to test every case). </p>\n\n<p>I also quickly added a String property to the result that holds the general time passed (sorry for the bad nested ifs!!). For example if used for UI and indicating when something was updated (like a RSS feed). Kind of out of place but nice-to-have:</p>\n\n<pre><code>function getTimeDiffAndPrettyText(oDatePublished) {\n\n  var oResult = {};\n\n  var oToday = new Date();\n\n  var nDiff = oToday.getTime() - oDatePublished.getTime();\n\n  // Get diff in days\n  oResult.days = Math.floor(nDiff / 1000 / 60 / 60 / 24);\n  nDiff -= oResult.days * 1000 * 60 * 60 * 24;\n\n  // Get diff in hours\n  oResult.hours = Math.floor(nDiff / 1000 / 60 / 60);\n  nDiff -= oResult.hours * 1000 * 60 * 60;\n\n  // Get diff in minutes\n  oResult.minutes = Math.floor(nDiff / 1000 / 60);\n  nDiff -= oResult.minutes * 1000 * 60;\n\n  // Get diff in seconds\n  oResult.seconds = Math.floor(nDiff / 1000);\n\n  // Render the diffs into friendly duration string\n\n  // Days\n  var sDays = '00';\n  if (oResult.days &gt; 0) {\n      sDays = String(oResult.days);\n  }\n  if (sDays.length === 1) {\n      sDays = '0' + sDays;\n  }\n\n  // Format Hours\n  var sHour = '00';\n  if (oResult.hours &gt; 0) {\n      sHour = String(oResult.hours);\n  }\n  if (sHour.length === 1) {\n      sHour = '0' + sHour;\n  }\n\n  //  Format Minutes\n  var sMins = '00';\n  if (oResult.minutes &gt; 0) {\n      sMins = String(oResult.minutes);\n  }\n  if (sMins.length === 1) {\n      sMins = '0' + sMins;\n  }\n\n  //  Format Seconds\n  var sSecs = '00';\n  if (oResult.seconds &gt; 0) {\n      sSecs = String(oResult.seconds);\n  }\n  if (sSecs.length === 1) {\n      sSecs = '0' + sSecs;\n  }\n\n  //  Set Duration\n  var sDuration = sDays + ':' + sHour + ':' + sMins + ':' + sSecs;\n  oResult.duration = sDuration;\n\n  // Set friendly text for printing\n  if(oResult.days === 0) {\n\n      if(oResult.hours === 0) {\n\n          if(oResult.minutes === 0) {\n              var sSecHolder = oResult.seconds &gt; 1 ? 'Seconds' : 'Second';\n              oResult.friendlyNiceText = oResult.seconds + ' ' + sSecHolder + ' ago';\n          } else { \n              var sMinutesHolder = oResult.minutes &gt; 1 ? 'Minutes' : 'Minute';\n              oResult.friendlyNiceText = oResult.minutes + ' ' + sMinutesHolder + ' ago';\n          }\n\n      } else {\n          var sHourHolder = oResult.hours &gt; 1 ? 'Hours' : 'Hour';\n          oResult.friendlyNiceText = oResult.hours + ' ' + sHourHolder + ' ago';\n      }\n  } else { \n      var sDayHolder = oResult.days &gt; 1 ? 'Days' : 'Day';\n      oResult.friendlyNiceText = oResult.days + ' ' + sDayHolder + ' ago';\n  }\n\n  return oResult;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How would you check time difference from two text-boxes in Javascript?</p>\n",
            "last_activity_date": 1418488169,
            "question_id": 1787939,
            "score": 24,
            "tags": [
                "javascript",
                "date",
                "datetime"
            ],
            "title": "Check time difference in Javascript"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p><a href=\"https://github.com/douglascrockford/JSON-js/blob/master/json2.js\" rel=\"nofollow\">JSON.stringify</a> will take a javascript object and turn it into a string. I bet though that if you create a Javascript object like</p>\n\n<pre><code>var jsonData = {\n    address: 'address',\n    address1: 'address1',\n    address2: 'address2'\n};\n</code></pre>\n\n<p>and then pass in jsonData as 'data' in the ajax call, then it will convert the object to json text for you.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Get yourself a jquery plugin that can convert any javascript object to json.  For example:</p>\n\n<p><a href=\"http://plugins.jquery.com/project/json\" rel=\"nofollow\">http://plugins.jquery.com/project/json</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I would create a javascript object and then call JSON.stringify to turn it into valid JSON.  You can download it from  <a href=\"http://www.json.org/\" rel=\"nofollow\">here</a>.</p>\n\n<p>You could do something like this:</p>\n\n<pre><code>var address= {};\n\naddress[\"Address1\"] = \"your val\";\naddress[\"Address2\"] = \"your val\";\naddress[\"City\"] = \"your val\";\naddress[\"State\"] = \"your val\";\naddress[\"Zip\"] = \"your val\";\n\n$.ajax({\n    type: \"POST\",\n    contentType: \"application/json; charset=utf-8\",\n    url: \"http://bmccorm-xp/HBUpsAddressValidation/AddressValidation.asmx/ValidateAddress\",\n    data: JSON.stringify(address),\n    dataType: \"json\",\n    success: function(response){\n        alert(response);\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You need to pass it like this:</p>\n\n<pre><code>$.ajax({\n  type: \"POST\",\n  url: \"WebService.asmx/WebMethodName\",\n  data: \"{'fname':'dave', 'lname':'ward'}\",\n  contentType: \"application/json; charset=utf-8\",\n  dataType: \"json\"\n});\n</code></pre>\n\n<p>Have a look at this article for more details: <a href=\"http://encosia.com/2008/06/05/3-mistakes-to-avoid-when-using-jquery-with-aspnet-ajax/\" rel=\"nofollow\">3 mistakes to avoid when using jQuery with ASP.NET AJAX</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>All apologies if this answer comes too late, or is a duplication.</p>\n\n<p>From what I understand, it appears as though you're trying to send just the string of a JSON object. Try building an object and then working with its properties and sending it in as it is.</p>\n\n<p>Example:</p>\n\n<pre><code>address = new Object();\naddress.Address = new Object();\naddress.Address.Address1 = \"123 Main Street\";\naddress.Address.Address2 = \"\";\naddress.Address.City = \"New York\";\naddress.Address.State = \"NY\";\naddress.Address.Zip = \"10000\";\naddress.Address.AddressClassification = null;\n$.ajax({\n    type: \"POST\",\n    contentType: \"application/json; charset=utf-8\",\n    url: \"http://bmccorm-xp/HBUpsAddressValidation/AddressValidation.asmx/ValidateAddress\",\n    data: address,\n    dataType: \"json\",\n    success: function(response){\n        alert(response);\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Your problem breaks down into two parts:</p>\n\n<h3>Creating the JSON string</h3>\n\n<p>Your JSON in your quoted code is perfectly valid. But being hand-crafted is a pain. As others have called out, the easiest way to do this is to create a Javascript object and then <a href=\"http://www.json.org/js.html\"><code>JSON.stringify</code></a> it. Example:</p>\n\n<pre><code>var data = {\n    \"Address\": {\n        \"Address1\": \"123 Main Street\",\n        \"Address2\": null,\n        \"City\": \"New York\",\n        \"State\": \"NY\",\n        \"Zip\": \"10000\",\n        \"AddressClassification\": null\n    }\n};\ndata = JSON.stringify(data);\n</code></pre>\n\n<p>The first step above creates an object using Javascript object literal notation, which is a superset of JSON (as used above, it actually is the same as JSON, but ignore that). The second bit takes that object and converts it to a string.</p>\n\n<p>Of course, the values above are literal strings, which is unlikely. Here's what it would look like if you had each of those values in a variable:</p>\n\n<pre><code>var data = {\n    \"Address\": {\n        \"Address1\": address1,\n        \"Address2\": address2,\n        \"City\": city,\n        \"State\": state,\n        \"Zip\": zip,\n        \"AddressClassification\": null\n    }\n};\ndata = JSON.stringify(data);\n</code></pre>\n\n<p>Either way, now you have the string.</p>\n\n<h3>Sending the JSON string to the web service</h3>\n\n<p>You need to find out is whether the web service is expecting the JSON-formatted data to <em>be</em> the POST body, or if it's expecting the JSON data to be the value of a parameter in the more common name=value URL-encoded POST data. I would tend to expect the former, because the web service seems specifically designed to work with JSON-formatted data.</p>\n\n<p>If it's supposed to <em>be</em> the POST body, well, I've never done that with jQuery, and what you have quoted looks correct to me reading the docs. If it's not working, I'd double-check that your object structure is really what they're expecting to see. For instance, if it's just validating a single address, I wonder if it's expecting to receive <em>just</em> an Address object, rather than an object containing an Address object, e.g.:</p>\n\n<pre><code>{\n    \"Address1\": \"123 Main Street\",\n    \"Address2\": null,\n    \"City\": \"New York\",\n    \"State\": \"NY\",\n    \"Zip\": \"10000\",\n    \"AddressClassification\": null\n}\n</code></pre>\n\n<p>If it's supposed to be the value of a parameter in boring old URL-encoded multipart form data, then:</p>\n\n<pre><code>$.ajax({\n    type: \"POST\",\n    url: \"http://bmccorm-xp/HBUpsAddressValidation/AddressValidation.asmx/ValidateAddress\",\n    data: \"paramname=\" + encodeURIComponent(data),\n    dataType: \"json\",\n    success: function(response){\n        alert(response);\n    }\n})\n</code></pre>\n\n<p>I've removed the <code>contentType</code> so jQuery will fall back to its default (\"application/x-www-form-urlencoded\") and ensured the string we created above is properly encoded in that content type. You'll need to find out the <code>paramname</code> to use (perhaps \"Address\" and see my earlier comment about sending just the address, rather than an object containing an address child object?).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The answer is very easy and based on my previous posts <a href=\"http://stackoverflow.com/questions/2670147/can-i-return-json-from-an-asmx-web-service-if-the-contenttype-is-not-json/2671583#2671583\">http://stackoverflow.com/questions/2670147/can-i-return-json-from-an-asmx-web-service-if-the-contenttype-is-not-json/2671583#2671583</a> and <a href=\"http://stackoverflow.com/questions/2651091/jquery-ajax-call-to-httpget-webmethod-c-not-working/2656543#2656543\">http://stackoverflow.com/questions/2651091/jquery-ajax-call-to-httpget-webmethod-c-not-working/2656543#2656543</a>.</p>\n\n<p>The data should be JSON-encoded. You should separate encode every input parameter. Because you have only one parameter you should do like following:</p>\n\n<p>first construct you data as native JavaScript data like:</p>\n\n<pre><code>var myData = {Address: {Address1:\"address data 1\",\n                        Address2:\"address data 2\",\n                        City: \"Bonn\",\n                        State: \"NRW\",\n                        Zip: \"53353\",\n                        {Code: 123,\n                         Description: \"bla bla\"}}};\n</code></pre>\n\n<p>then give as a parameter of ajax request <code>{request:$.toJSON(myData)}</code></p>\n\n<pre><code>$.ajax({\n    type: \"POST\",\n    contentType: \"application/json; charset=utf-8\",\n    url: \"http://bmccorm-xp/HBUpsAddressValidation/AddressValidation.asmx/ValidateAddress\",\n    data: {request:$.toJSON(myData)},\n    dataType: \"json\",\n    success: function(response){\n        alert(response);\n    }\n})\n</code></pre>\n\n<p>instead of $.toJSON which come from the JSON plugin you can use another version (JSON.stringify) from <a href=\"http://www.json.org/\">http://www.json.org/</a></p>\n\n<p>If your WebMethod had parameters like</p>\n\n<pre><code>public Response ValidateAddress(Request request1, Request myRequest2)\n</code></pre>\n\n<p>the value of <code>data</code> parameter of the <code>ajax</code> call should be like</p>\n\n<pre><code>data: {request1:$.toJSON(myData1), myRequest2:$.toJSON(myData2)}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>data: {request1:JSON.stringify(myData1), myRequest2:JSON.stringify(myData2)}\n</code></pre>\n\n<p>if you prefer another version of JSON encoder.</p>\n",
                    "is_accepted": true,
                    "score": 10
                }
            ],
            "body": "<p>After trying to format my JSON data by hand in javascript and failing miserably, I realized there's probably a better way.  Here's what the code for the web service method and relevant classes looks like in C#:</p>\n\n<pre><code>[WebMethod]\npublic Response ValidateAddress(Request request)\n{\n    return new test_AddressValidation().GenerateResponse(\n        test_AddressValidation.ResponseType.Ambiguous);\n}\n\n...\n\npublic class Request\n{\n    public Address Address;\n}\n\npublic class Address\n{\n    public string Address1;\n    public string Address2;\n    public string City;\n    public string State;\n    public string Zip;\n    public AddressClassification AddressClassification;\n}\n\npublic class AddressClassification\n{\n    public int Code;\n    public string Description;\n}\n</code></pre>\n\n<p>The web service works great with using SOAP/XML, but I can't seem to get a valid response using javascript and jQuery because the message I get back from the server has a problem with my hand-coded JSON.  </p>\n\n<p>I can't use the jQuery <code>getJSON</code> function because the request requires HTTP POST, so I'm using the lower-level <code>ajax</code> function instead:</p>\n\n<pre><code>$.ajax({\n    type: \"POST\",\n    contentType: \"application/json; charset=utf-8\",\n    url: \"http://bmccorm-xp/HBUpsAddressValidation/AddressValidation.asmx/ValidateAddress\",\n    data: \"{\\\"Address\\\":{\\\"Address1\\\":\\\"123 Main Street\\\",\\\"Address2\\\":null,\\\"City\\\":\\\"New York\\\",\\\"State\\\":\\\"NY\\\",\\\"Zip\\\":\\\"10000\\\",\\\"AddressClassification\\\":null}}\",\n    dataType: \"json\",\n    success: function(response){\n        alert(response);\n    }\n})\n</code></pre>\n\n<p>The <code>ajax</code> function is submitting everything specified in <code>data:</code>, which is where my problem is.  How do I build a properly formatted JSON object in javascript so I can plug it in to my <code>ajax</code> call like so: </p>\n\n<pre><code>data: theRequest\n</code></pre>\n\n<p>I'll eventually be pulling data out of text inputs in forms, but for now hard-coded test data is fine.  </p>\n\n<p><strong>How do I build a properly formatted JSON object to send to the web service?</strong></p>\n\n<hr>\n\n<p><em>UPDATE: It turns out that the problem with my request wasn't the formatting of the JSON, as T.J. pointed out, but rather that my JSON text didn't conform to requirements of the web service.  Here's a valid JSON request based on the code in the WebMethod:</em></p>\n\n<pre><code>'{\"request\":{\"Address\":{\"Address1\":\"123 Main Street\",\"Address2\":\"suite 20\",\"City\":\"New York\",\"State\":\"NY\",\"Zip\":\"10000\",\"AddressClassification\":null}}}'\n</code></pre>\n\n<p>This brought up another question: <a href=\"http://stackoverflow.com/questions/2738321/when-is-case-sensitivity-important-in-json-requests-to-asp-net-web-services-asmx\">When is case sensitivity important in JSON requests to ASP.NET web services (ASMX)?</a></p>\n",
            "last_activity_date": 1272554594,
            "question_id": 2737525,
            "score": 13,
            "tags": [
                "c#",
                "javascript",
                "jquery",
                "web-services",
                "json"
            ],
            "title": "How do I build a JSON object to send to an AJAX WebService?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>I recently asked about this and it is behaviour by design. When a tab is inactive, only at a maximum of once per second the function is called.</p>\n\n<p>Perhaps this helps:\n<a href=\"http://stackoverflow.com/questions/5927284/how-can-i-make-setinterval-also-work-when-a-tab-is-inactive-in-chrome\">How can I make setInterval also work when a tab is inactive in Chrome?</a></p>\n\n<p>Code change:\n<a href=\"http://codereview.chromium.org/6577021\">http://codereview.chromium.org/6577021</a></p>\n",
                    "is_accepted": true,
                    "score": 26
                },
                {
                    "body": "<p>I updated my jQuery core to 1.9.1, and it solved the Interval discrepancy in inactive tabs. I would try that first, then look into other code override options.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I was testing the accuracy of <code>setTimeout</code> using <a href=\"http://testbed.nicon.nl/timeouttest/\">this test</a>. Now I noticed that (as expected) <code>setTimeout</code> is not very accurate but for most appliances not dramatically inaccurate. Now if I run the test in in Chrome and let it run in a background tab (so, switching to another tab and browse on there), returning to the test and inspecting te results (if the test finished) they are dramatically changed. It looks like the timeouts have been running a lot slower. Tested in FF4 or IE9 this didn't occur.</p>\n\n<p>So it looks like Chrome suspends or at least slows down javascript execution in a tab that has no focus. Couldn't find much on the net on the subject. It would mean that we can't run background tasks, like for example checking periodically on a server using XHR calls and <code>setInterval</code> (I suspect to see the same behavior for <code>setInterval</code>, will write a test if time is with me).</p>\n\n<p>Has anyone encountered this? Would there be there a workaround for this suspension/slowing down? Would you call it a bug and should I file it as such?</p>\n",
            "last_activity_date": 1373563767,
            "question_id": 6032429,
            "score": 37,
            "tags": [
                "javascript",
                "google-chrome",
                "tabs",
                "settimeout"
            ],
            "title": "Chrome: timeouts/interval suspended in background tabs?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>For security reasons, you can only get the url for as long as the contents of the iframe, and the referencing javascript, are served from the same domain. As long as that is true, something like this will work:</p>\n\n<pre><code>document.getElementById(\"iframe_id\").contentWindow.location.href\n</code></pre>\n\n<p>If the two domains are mismatched, you'll run into cross site reference scripting security restrictions.</p>\n\n<p>See also <a href=\"http://stackoverflow.com/questions/44359/how-do-i-get-the-current-location-of-an-iframe\">answers to a similar question</a>.</p>\n",
                    "is_accepted": true,
                    "score": 41
                },
                {
                    "body": "<p>If your iframe is from another domain, (cross domain), the other answers are not going to help you... you will simply need to use this:</p>\n\n<pre><code>var currentUrl = document.referrer;\n</code></pre>\n\n<p>and - here you've got the main url!</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>Is there a simple way to get the current URL from an iframe?</p>\n\n<p>The viewer would going through multiple sites. \nI'm guessing I would be using something in javascript.</p>\n",
            "last_activity_date": 1351424217,
            "question_id": 938180,
            "score": 24,
            "tags": [
                "javascript",
                "url",
                "iframe"
            ],
            "title": "Get current URL from IFRAME"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<pre><code>function read_file(file, delete_after) {\n    delete_after = delete_after || \"my default here\";\n    //rest of code\n}\n</code></pre>\n\n<p>This assigns to <code>delete_after</code> the value of <code>delete_after</code> if it is not a <em>falsey</em> value otherwise it assigns the string <code>\"my default here\"</code>. For more detail, check out <a href=\"http://javascript.crockford.com/survey.html\">Doug Crockford's survey of the language and check out the section on Operators</a>.</p>\n\n<p>This approach does not work if you want to pass in a <em>falsey</em> value i.e. <code>false</code>, <code>null</code>, <code>undefined</code>, <code>0</code> or <code>\"\"</code>. If you require <em>falsey</em> values to be passed in you would need to use the method in <a href=\"http://stackoverflow.com/questions/894860/how-do-i-make-a-default-value-for-a-parameter-to-a-javascript-function/894877#894877\">Tom Ritter's answer</a>.</p>\n\n<p>When dealing with a number of parameters to a function, it is often useful to allow the consumer to pass the parameter arguments in an object and then <em>merge</em> these values with an object that contains the default values for the function</p>\n\n<pre><code>function read_file(values) {\n    values = merge({ \n        delete_after : \"my default here\"\n    }, values || {});\n\n    // rest of code\n}\n\n// simple implementation based on $.extend() from jQuery\nfunction merge() {\n    var obj, name, copy,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length;\n\n    for (; i &lt; length; i++) {\n        if ((obj = arguments[i]) != null) {\n            for (name in obj) {\n                copy = obj[name];\n\n                if (target === copy) {\n                    continue;\n                }\n                else if (copy !== undefined) {\n                    target[name] = copy;\n                }\n            }\n        }\n    }\n\n    return target;\n};\n</code></pre>\n\n<p>to use</p>\n\n<pre><code>// will use the default delete_after value\nread_file({ file: \"my file\" }); \n\n// will override default delete_after value\nread_file({ file: \"my file\", delete_after: \"my value\" }); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 305
                },
                {
                    "body": "<p>There are a lot of ways, but this is my preferred method - it lets you pass in anything you want, including false or null. (<code>typeof null == \"object\"</code>)</p>\n\n<pre><code> function foo(a, b)\n {\n   a = typeof a !== 'undefined' ? a : 42;\n   b = typeof b !== 'undefined' ? b : 'default_b';\n   ...\n }\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1414
                },
                {
                    "body": "<p>I find something simple like this to be much more concise and readable personally.</p>\n\n<pre><code>function pick(arg, def) {\n   return (typeof arg == 'undefined' ? def : arg);\n}\n\nfunction myFunc(x) {\n  x = pick(x, 'my default');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 86
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/148901/is-there-a-better-way-to-do-optional-function-parameters-in-javascript\">Is there a better way to do optional function parameters in Javascript?</a>  </p>\n</blockquote>\n\n<p>I would like a JavaScript function to have optional arguments which I set a default on, which gets used if the value isn't defined.  In ruby you can do it like this:</p>\n\n<pre><code>def read_file(file, delete_after = false)\n  # code\nend\n</code></pre>\n\n<p>Does this work in JavaScript?</p>\n\n<pre><code>function read_file(file, delete_after = false) {\n  // Code\n}\n</code></pre>\n",
            "last_activity_date": 1360676278,
            "question_id": 894860,
            "score": 790,
            "tags": [
                "javascript",
                "function",
                "arguments",
                "default"
            ],
            "title": "Set a default parameter value for a JavaScript function"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>In JavaScript, <code>null</code> is an object. There's another value for things that don't exist, <code>undefined</code>. The DOM returns <code>null</code> for almost all cases where it fails to find some structure in the document, but in JavaScript itself <code>undefined</code> is the value used.</p>\n\n<p>Second, no, there is not a direct equivalent. If you really want to check for <code>null</code>, do:</p>\n\n<pre><code>if (null == yourvar) // With casting\nif (null === yourvar) // Without casting\n</code></pre>\n\n<p>If you want to check if a variable exists</p>\n\n<pre><code>if (typeof yourvar != 'undefined') // Any scope\nif (window['varname'] != undefined) // Global scope\nif (window['varname'] != void 0) // Old browsers\n</code></pre>\n\n<p>If you know the variable exists, but don't know if there's any value\nstored in it:</p>\n\n<pre><code>if (undefined != yourvar)\nif (void 0 != yourvar) // For older browsers\n</code></pre>\n\n<p>If you want to know if a member exists independent of whether it has been assigned a value or not:</p>\n\n<pre><code>if ('membername' in object) // With inheritance\nif (object.hasOwnProperty('membername')) // Without inheritance\n</code></pre>\n\n<p>If you want to to know whether a variable autocasts to true:</p>\n\n<pre><code>if(variablename)\n</code></pre>\n\n<p>I probably forgot some method as well...</p>\n\n<p><a href=\"http://lists.evolt.org/archive/Week-of-Mon-20050214/099714.html\">Source</a></p>\n",
                    "is_accepted": true,
                    "score": 899
                },
                {
                    "body": "<p>Technically, the proper solution is (I believe):</p>\n\n<pre><code>typeof x === \"undefined\"\n</code></pre>\n\n<p>You can sometimes get lazy and use</p>\n\n<pre><code>x == null\n</code></pre>\n\n<p>but that allows both an undefined variable x, and a variable x containing null, to return true.</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>An even easier and more shorthand version would be:</p>\n\n<pre><code>if (!x) {\n   //Undefined\n}\n</code></pre>\n\n<p>OR</p>\n\n<pre><code>if (typeof x !== \"undefined\") {\n    //Do something since x is defined.\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I've often done:</p>\n\n<pre><code>function doSomething(variable)\n{\n    var undef;\n\n    if(variable === undef)\n    {\n         alert('Hey moron, define this bad boy.');\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>The only way to truly test if a variable is <code>undefined</code> is to do the following. Remember, undefined is an object in JavaScript.</p>\n\n<pre><code>if (typeof someVar === 'undefined') {\n  // Your variable is undefined\n}\n</code></pre>\n\n<p>Some of the other solutions in this thread will lead you to believe a variable is undefined even though it has been defined (with a value of NULL or 0, for instance).</p>\n",
                    "is_accepted": false,
                    "score": 176
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/27509/detecting-an-undefined-object-property-in-javascript\">Detecting an undefined object property in JavaScript</a>  </p>\n</blockquote>\n\n\n\n<p>I wanted to check whether the variable is defined or not. For example, the following throws a not-defined error  </p>\n\n<pre><code>alert( x );\n</code></pre>\n\n<p>How can I catch this error?</p>\n",
            "last_activity_date": 1416750243,
            "question_id": 858181,
            "score": 393,
            "tags": [
                "javascript",
                "variables",
                "undefined"
            ],
            "title": "How to check a not-defined variable in JavaScript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>It will return undefined.</p>\n\n<pre><code>var aa = {hello: \"world\"};\nalert( aa[\"hello\"] );      // popup box with \"world\"\nalert( aa[\"goodbye\"] );    // popup boc with \"undefined\"\n</code></pre>\n\n<p>undefined is a special constant value.  So you can say, e.g.</p>\n\n<pre><code>// note the three equal signs so that null won't be equal to undefined\nif( aa[\"goodbye\"] === undefined ) {\n    // do something\n}\n</code></pre>\n\n<p>This is probably the best way to check for missing keys.  However, as is pointed out in a comment below, it's theoretically possible that you'd want to have the actual value be <code>undefined</code>.  I've never needed to do this and can't think of a reason offhand why I'd ever want to, but just for the sake of completeness, you can use the <code>in</code> operator</p>\n\n<pre><code>// this works even if you have {\"goodbye\": undefined}\nif( \"goodbye\" in aa ) {\n    // do something\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 70
                },
                {
                    "body": "<p>Actually, checking for undefined-ness is not an accurate way of testing whether a key exists. What if the key exists but the value is actually <code>undefined</code>?</p>\n\n<pre><code>var obj = { key: undefined };\nobj[\"key\"] != undefined // false, but the key exists!\n</code></pre>\n\n<p>You should instead use the <code>in</code> operator:</p>\n\n<pre><code>\"key\" in obj // true, regardless of the actual value\n</code></pre>\n\n<p>If you want to check if a key doesn't exist, remember to use parenthesis:</p>\n\n<pre><code>!(\"key\" in obj) // true if \"key\" doesn't exist in object\n!\"key\" in obj   // ERROR!  Equivalent to \"false in obj\"\n</code></pre>\n\n<p>Or, if you want to particularly test for properties of the object instance (and not inherited properties), use <code>hasOwnProperty</code>:</p>\n\n<pre><code>obj.hasOwnProperty(\"key\") // true\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1238
                },
                {
                    "body": "<pre><code>\"key\" in obj\n</code></pre>\n\n<p>Is likely testing only object attribute values that are very different from array keys</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Three ways to check if a property is present in a javascript object:</p>\n\n<ol>\n<li><strong>!!obj.theProperty</strong><br>\nWill convert value to bool. returns TRUE for all but the 'false' value</li>\n<li><strong>'theProperty' in obj</strong><br>\nWill return true if the property exists, no matter its value (even empty)</li>\n<li><strong>obj.hasOwnProperty('theProperty')</strong><br>\nDoes not check the prototype chain. (since all objects have the 'toString' method, 1 and 2 will return true on it, while 3 can return false on it.)</li>\n</ol>\n\n<p>Reference: <a href=\"http://book.mixu.net/node/ch5.html\" rel=\"nofollow\">http://book.mixu.net/node/ch5.html</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<h1>quick answer</h1>\n\n<blockquote>\n  <p>How do I check if a particular key exists in a JavaScript object or array?\n  If a key doesn't exist and I try to access it, will it return false? Or throw an error?</p>\n</blockquote>\n\n<p>Accessing directly a missing property using (associative) array style or object style will return an <em>undefined</em> constant.</p>\n\n<h2>The slow and reliable <em>in</em> operator and <em>hasOwnProperty</em> method</h2>\n\n<p>As people have already mentioned here, you could have an object with a property associated with an \"undefined\" constant. </p>\n\n<pre><code> var bizzareObj = {valid_key:  undefined};\n</code></pre>\n\n<p>In that case, you will have to use <em>hasOwnProperty</em> or <em>in</em> operator to know if the key is really there. But, <em>but at what price?</em></p>\n\n<p>so, I tell you...</p>\n\n<p><em>in</em> operator and <em>hasOwnProperty</em> are \"methods\" that use Property Descriptor mechanism in Javascript (similar to Java reflection in the Java language).</p>\n\n<p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-8.10\" rel=\"nofollow\">http://www.ecma-international.org/ecma-262/5.1/#sec-8.10</a></p>\n\n<blockquote>\n  <p>The Property Descriptor type is used to explain the manipulation and reification of named property attributes. Values of the Property Descriptor type are records composed of named fields where each field\u2019s name is an attribute name and its value is a corresponding attribute value as specified in 8.6.1. In addition, any field may be present or absent.</p>\n</blockquote>\n\n<p>On the other hand, calling an object method or key will use Javascript [[Get]] mechanism. That is far way faster!</p>\n\n<h2>benchmark</h2>\n\n<p><a href=\"http://jsperf.com/checking-if-a-key-exists-in-a-javascript-array\" rel=\"nofollow\">http://jsperf.com/checking-if-a-key-exists-in-a-javascript-array</a></p>\n\n<p><img src=\"http://oi61.tinypic.com/qxscxf.jpg\" alt=\"Comparing key access in JS\">.</p>\n\nUsing <em>in</em> operator\n\n<pre><code>var result = \"Impression\" in array;\n</code></pre>\n\n<p>The result was </p>\n\n<pre><code>12,931,832 \u00b10.21% ops/sec      92% slower \n</code></pre>\n\nUsing hasOwnProperty\n\n<pre><code>var result = array.hasOwnProperty(\"Impression\")\n</code></pre>\n\n<p>The result was</p>\n\n<pre><code>16,021,758 \u00b10.45% ops/sec     91% slower\n</code></pre>\n\nAccessing elements directly (brackets style)\n\n<pre><code>var result = array[\"Impression\"] === undefined\n</code></pre>\n\n<p>The result was</p>\n\n<pre><code>168,270,439 \u00b10.13 ops/sec     0.02% slower \n</code></pre>\n\nAccessing elements directly (object style)\n\n<pre><code>var result = array.Impression  === undefined;\n</code></pre>\n\n<p>The result was</p>\n\n<pre><code>168,303,172 \u00b10.20%     fastest\n</code></pre>\n\n<h2>Final Advise</h2>\n\n<p>Avoid objects with undefined values. Check directly whenever possible. Otherwise, use <em>in</em> operator or <em>hasOwnProperty</em> method.</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>If you are using <a href=\"http://underscorejs.org/\">underscore.js</a> library then object/array operations become simple. </p>\n\n<p>In your case _.has method can be used. Example:</p>\n\n<pre><code>yourArray = {age: \"10\"}\n\n_.has(yourArray, \"age\")\n</code></pre>\n\n<p>returns <strong>true</strong> </p>\n\n<p>But,</p>\n\n<pre><code>_.has(yourArray, \"invalidKey\")\n</code></pre>\n\n<p>returns <strong>false</strong></p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>How do I check if a particular key exists in a JavaScript object or array?</p>\n\n<p>If a key doesn't exist and I try to access it, will it return false? Or throw an error?</p>\n",
            "last_activity_date": 1425030397,
            "question_id": 1098040,
            "score": 825,
            "tags": [
                "javascript",
                "arrays",
                "object"
            ],
            "title": "Checking if an array key exists in a JavaScript object or array?"
        },
        {
            "answer_count": 22,
            "answers": [
                {
                    "body": "<pre><code>location.reload();\n</code></pre>\n\n<p>Should work on all browsers even without jQuery</p>\n",
                    "is_accepted": false,
                    "score": 215
                },
                {
                    "body": "<pre><code>$('#something').click(function() {\n    location.reload();\n});\n</code></pre>\n\n<p>Like mplungjan explained in the comment below, the <code>reload()</code> function takes an optional parameter that can be set to <code>true</code> to reload from the server rather than the cache. The parameter defaults to <code>false</code>, so by default the page reloads from the browser's cache.</p>\n",
                    "is_accepted": true,
                    "score": 1515
                },
                {
                    "body": "<p>Lots of ways will work, I suppose:</p>\n\n<ul>\n<li><code>window.location.reload();</code></li>\n<li><code>history.go(0);</code></li>\n<li><code>window.location.href=window.location.href;</code></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 94
                },
                {
                    "body": "<p>The question should be,</p>\n\n<p><strong>How to refresh a page with <em><a href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a></em></strong></p>\n\n<pre><code>window.location.href = window.location.href; //This is a possibility\nwindow.location.reload(); //Another possiblity\nhistory.go(0); //And another\n</code></pre>\n\n<p>You're spoiled for choice.</p>\n",
                    "is_accepted": false,
                    "score": 39
                },
                {
                    "body": "<p>To reload a page with jQuery, do:</p>\n\n<pre><code>$.ajax({\n    url: \"\",\n    context: document.body,\n    success: function(s,x){\n        $(this).html(s);\n    }\n});\n</code></pre>\n\n<p>The approach here that I used was Ajax jQuery. I tested it that worked on <a href=\"http://en.wikipedia.org/wiki/Google_Chrome\">Chrome</a> 13. Then I put the code in the handler that will trigger the reload. The <a href=\"http://en.wikipedia.org/wiki/Uniform_Resource_Locator\">URL</a> is <code>\"\"</code>, which means <strong><em>this page</em></strong>.</p>\n",
                    "is_accepted": false,
                    "score": 96
                },
                {
                    "body": "<p>It is better to use </p>\n\n<pre><code>window.location = window.location.pathname;\n</code></pre>\n\n<p>instead of <code>window.location.reload()</code>; Some of the browsers like Firefox opens ConfirmBox for resend.If you reload after post request.</p>\n",
                    "is_accepted": false,
                    "score": 55
                },
                {
                    "body": "<pre><code>window.location.reload();\nhistory.go(0);\n</code></pre>\n\n<p>The above snippets will show an alert box to confirm, but the below code doesn't:</p>\n\n<pre><code>window.location.href=window.location.href;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<pre><code>$('#ID').click(function() {\n    location.reload();\n});\n</code></pre>\n\n<p>Simplest way to reload page.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>There are <strike>multiple</strike> unlimited ways to refresh a page with JavaScript:</p>\n\n<ol>\n<li><code>location.reload()</code></li>\n<li><code>history.go(0)</code></li>\n<li><code>location.href = location.href</code></li>\n<li><code>location.href = location.pathname</code></li>\n<li><code>location.replace(location.pathname)</code></li>\n<li><p><code>location.reload(false)</code> </p>\n\n<blockquote>\n  <p>If we needed to pull the document from\n   the web-server again (such as where the document contents\n   change dynamically) we would pass the argument as <code>true</code>.</p>\n</blockquote></li>\n</ol>\n\n<p>You can continue the list being creative:</p>\n\n<ul>\n<li><code>window.location = window.location</code></li>\n<li><code>window.self.window.self.window.window.location = window.location</code></li>\n<li><a href=\"http://www.phpied.com/files/location-location/location-location.html\">...and other 534 ways</a></li>\n</ul>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var methods = [\r\n  \"location.reload()\",\r\n  \"history.go(0)\",\r\n  \"location.href = location.href\",\r\n  \"location.href = location.pathname\",\r\n  \"location.replace(location.pathname)\",\r\n  \"location.reload(false)\"\r\n];\r\n\r\nvar $body = $(\"body\");\r\nfor (var i = 0; i &lt; methods.length; ++i) {\r\n  (function(cMethod) {\r\n    $body.append($(\"&lt;button&gt;\", {\r\n      text: cMethod\r\n    }).on(\"click\", function() {\r\n      eval(cMethod); // don't blame me for using eval\r\n    }));\r\n  })(methods[i]);\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>button {\r\n  background: #2ecc71;\r\n  border: 0;\r\n  color: white;\r\n  font-weight: bold;\r\n  font-family: \"Monaco\", monospace;\r\n  padding: 10px;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n  transition: background-color 0.5s ease;\r\n}\r\nbutton:hover {\r\n  background: #27ae60;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js\"&gt;&lt;/script&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 62
                },
                {
                    "body": "<p>The jQuery <code>Load</code> function can also perform a page refresh:</p>\n\n<pre><code>$('body').load('views/file.html', function () {\n    $(this).fadeIn(5000);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You may want to use</p>\n\n<pre><code>location.reload(forceGet)\n</code></pre>\n\n<p><code>forceGet</code> is a Boolean and Optional.</p>\n\n<p>Default is false which reloads the page from the cache.</p>\n\n<p>Set this paramter to true if you want to force the browser to get the page from the server\nto get rid of cache as well.</p>\n\n<p>or just</p>\n\n<pre><code>location.reload()\n</code></pre>\n\n<p>if you want quick and easy with caching.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p><code>window.location.reload()</code> will reload from the server and will load all your data, scripts, images, etc again. So if you just want to refresh the HTML, the <code>window.location = document.URL</code> will return much quicker and with less traffic. But it will not reload the page if there is a hash (#) in the URL</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>location.reload();\n</code></pre>\n\n<p>For all browsers and simple method.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><em>You can perform this task without using jQuery by <code>window.location.reload();</code>. As there are many ways to do this but I think it is the appropriate way to reload the same docuemnt with javascript. Here is the explaination</em></p>\n\n<p>Javascript <strong>window.location</strong> object can be used </p>\n\n<ul>\n<li>Get the current page address (URL). </li>\n<li>To redirect the browser to other page.</li>\n<li>To reload the same page.</li>\n</ul>\n\n<p><strong>window</strong> -- The window object in java-script represents an open window in a browser. </p>\n\n<p><strong>location</strong> -- The location object in java script holds information about the current URL.</p>\n\n<p>The location object is like a fragment of the window object and is called up through the <strong>window.location</strong> property.</p>\n\n<p><strong>Location Objects</strong> has three methods -- </p>\n\n<ol>\n<li><strong>assign()</strong>      Used to load a new document</li>\n<li><strong>reload()</strong>      Used to reloads the current document.    </li>\n<li><strong>replace()</strong>    Used to replace the current document with a new one</li>\n</ol>\n\n<p>So here we need to use <strong>reload()</strong> because it can help us in reloading  the same document.</p>\n\n<p>So use it like <code>window.location.reload();</code></p>\n\n<p><a href=\"http://jsfiddle.net/agrawalnikhil/4FhHA/\">Online Demo jsfiddle</a></p>\n\n<p><em>To ask your browser to retrieve the page directly from the server not from the cache, you can pass a true parameter to location.reload():</em> </p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;Refresh a page in jQuery&lt;/title&gt;\n        &lt;script type=\"text/javascript\" src=\"jquery-1.3.2.min.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body&gt;\n        &lt;button id=\"PageRefresh\"&gt;Refresh a Page in jQuery&lt;/button&gt;\n\n        &lt;script type=\"text/javascript\"&gt;\n            $('#PageRefresh').click(function() {\n                location.reload();\n            });\n        &lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>  $(document).ready(function() {\n     setTimeout($(function(){location.reload();}), 10000); .\n  });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>setTimeout(function(){\n window.location.reload();\n}, 5000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can use\n<code>location.reload();</code>\nor just reload the page again\n<code>location.replace('http://page url')</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As WoIIe commented, jQuery is a javascript framework for \"EASY\" DOM-manipulation and event-binding. That would mean a more simplified utility of the actual JavaScript. Most of the people have already listed all the methods in JavaScript to reload the page. They are all simply one liner which does not need to be simplified again.</p>\n\n<p>So the answer would be simply you can't refresh the page using jQuery. But still if you want to use as a jQuery, then extend it and write a reload method.</p>\n\n<pre><code>$.extend({\n    reloadPage : function(bool){\n      window.location.reload(bool);\n    }\n});\n</code></pre>\n\n<p>Then you can use it like below to reload the page.</p>\n\n<pre><code>$.reloadPage(true);\n</code></pre>\n\n<p>Example: <a href=\"http://jsfiddle.net/z7yopwhv/\" rel=\"nofollow\">http://jsfiddle.net/z7yopwhv/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Most simple and the best way to do this using simple JavaScript is;</p>\n\n<p>location.reload();</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You don't really need <strong>jQuery</strong> for this. You can do it with <strong>JavaScript</strong>. Here are some options:</p>\n\n<pre><code> - location = location\n - location = location.href\n - location = window.location\n - location = self.location\n - location = window.location.href\n - location = self.location.href\n - location = location['href']\n - location = window['location']\n - location = window['location'].href\n - location = window['location']['href']\n</code></pre>\n\n<p>Actually you have more than <a href=\"http://www.phpied.com/files/location-location/location-location.html\" rel=\"nofollow\">500 ways</a> of doing this.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>location.reload(); \n</code></pre>\n\n<p>The <code>reload()</code> is a method used to reload the current page in your Browser. It has the same function as the reload button in your Browser.\nBy default, this method reloads from the <code>cache</code>, but it can be forced to reload the page from server by setting the <code>forceGet</code> parameter to true: </p>\n\n<pre><code>location.reload(true);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How can I refresh a page with jQuery?</p>\n",
            "last_activity_date": 1423046329,
            "question_id": 5404839,
            "score": 813,
            "tags": [
                "javascript",
                "jquery",
                "refresh",
                "reload"
            ],
            "title": "How can I refresh a page with jQuery?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>With only one level of inheritance, your example may not let you see the real benefits of <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/create\"><code>Object.create</code></a>.</p>\n\n<p>This methods allows you to easily implement <em>differential inheritance</em>, where objects can directly inherit from other objects.</p>\n\n<p>On your <code>userB</code> example, I don't think that your <code>init</code> method should be public or even exist, if you call again this method on an existing object instance, the <code>id</code> and <code>name</code> properties will change.</p>\n\n<p><code>Object.create</code> lets you initialize object properties using its second argument, e.g.:</p>\n\n<pre><code>var userB = {\n  sayHello: function() {\n    console.log('Hello '+ this.name);\n  }\n};\n\nvar bob = Object.create(userB, {\n  'id' : {\n    value: MY_GLOBAL.nextId(),\n    enumerable:true // writable:false, configurable(deletable):false by default\n  },\n  'name': {\n    value: 'Bob',\n    enumerable: true\n  }\n});\n</code></pre>\n\n<p>As you can see, the properties can be initialized on the second argument of <code>Object.create</code>, with an object literal using a syntax similar to the used by the <code>Object.defineProperties</code> and <code>Object.defineProperty</code> methods.</p>\n\n<p>It lets you set the property attributes (<code>enumerable</code>, <code>writable</code>, or <code>configurable</code>), which can be really useful.</p>\n",
                    "is_accepted": true,
                    "score": 137
                },
                {
                    "body": "<p>You have to make a custom <code>Object.create()</code> function. One that addresses Crockfords concerns and also calls your init function.</p>\n\n<p>This will work:</p>\n\n<pre><code>var userBPrototype = {\n    init: function(nameParam) {\n        this.name = nameParam;\n    },\n    sayHello: function() {\n        console.log('Hello '+ this.name);\n    }\n};\n\n\nfunction UserB(name) {\n    function F() {};\n    F.prototype = userBPrototype;\n    var f = new F;\n    f.init(name);\n    return f;\n}\n\nvar bob = UserB('bob');\nbob.sayHello();\n</code></pre>\n\n<p>Here UserB is like Object.create, but adjusted for our needs.</p>\n\n<p>If you want, you can also call:</p>\n\n<pre><code>var bob = new UserB('bob');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Object.create is not yet standard on several browsers, for example IE8, Opera v11.5, Konq 4.3 do not have it. You can use Douglas Crockford's version of Object.create for those browsers but this doesn't include the second 'initialisation object' parameter used in CMS's answer.</p>\n\n<p>For cross browser code one way to get object initialisation in the meantime is to customise Crockford's Object.create. Here is one method:-</p>\n\n<pre><code>Object.build = function(o) {\n   var initArgs = Array.prototype.slice.call(arguments,1)\n   function F() {\n      if((typeof o.init === 'function') &amp;&amp; initArgs.length) {\n         o.init.apply(this,initArgs)\n      }\n   }\n   F.prototype = o\n   return new F()\n}\n</code></pre>\n\n<p>This maintains Crockford prototypal inheritance, and also checks for any init method in the object, then runs it with your parameter(s), like say new man('John','Smith'). Your code then becomes:-</p>\n\n<pre><code>MY_GLOBAL = {i: 1, nextId: function(){return this.i++}}  // For example\n\nvar userB = {\n    init: function(nameParam) {\n        this.id = MY_GLOBAL.nextId();\n        this.name = nameParam;\n    },\n    sayHello: function() {\n        console.log('Hello '+ this.name);\n    }\n};\nvar bob = Object.build(userB, 'Bob');  // Different from your code\nbob.sayHello();\n</code></pre>\n\n<p>So bob inherits the sayHello method and now has own properties id=1 and name='Bob'. These properties are both writable and enumerable of course. This is also a much simpler way to initialise than for ECMA Object.create especially if you aren't concerned about the writable, enumerable and configurable attributes.</p>\n\n<p>For initialisation without an init method the following Crockford mod could be used:-</p>\n\n<pre><code>Object.gen = function(o) {\n   var makeArgs = arguments \n   function F() {\n      var prop, i=1, arg, val\n      for(prop in o) {\n         if(!o.hasOwnProperty(prop)) continue\n         val = o[prop]\n         arg = makeArgs[i++]\n         if(typeof arg === 'undefined') break\n         this[prop] = arg\n      }\n   }\n   F.prototype = o\n   return new F()\n}\n</code></pre>\n\n<p>This fills the userB own properties, in the order they are defined, using the Object.gen parameters from left to right after the userB parameter. It uses the for(prop in o) loop so, by ECMA standards, the order of property enumeration cannot be guaranteed the same as the order of property definition. However, several code examples tested on (4) major browsers show they are the same, provided the hasOwnProperty filter is used, and sometimes even if not.</p>\n\n<pre><code>MY_GLOBAL = {i: 1, nextId: function(){return this.i++}};  // For example\n\nvar userB = {\n   name: null,\n   id: null,\n   sayHello: function() {\n      console.log('Hello '+ this.name);\n   }\n}\n\nvar bob = Object.gen(userB, 'Bob', MY_GLOBAL.nextId());\n</code></pre>\n\n<p>Somewhat simpler I would say than Object.build since userB does not need an init method. Also userB is not specifically a constructor but looks like a normal singleton object. So with this method you can construct and initialise from normal plain objects.</p>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>You could make the <code>init</code> method return <code>this</code>, and then chain the calls together, like this:</p>\n\n<pre><code>var userB = {\n    init: function(nameParam) {\n        this.id = MY_GLOBAL.nextId();\n        this.name = nameParam;\n        return this;\n    },\n    sayHello: function() {\n        console.log('Hello '+ this.name);\n    }\n};\n\nvar bob = Object.create(userB).init('Bob');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Another possible usage of Object.create is to clone immutable objects in a <a href=\"http://jsperf.com/object-clone\" rel=\"nofollow\">cheap and effective way</a>.</p>\n\n<pre><code>var anObj = {\n    a: \"test\",\n    b: \"jest\"\n};\n\nvar bObj = Object.create(anObj);\n\nbObj.b = \"gone\"; // replace an existing (by masking prototype)\nbObj.c = \"brand\"; // add a new to demonstrate it is actually a new obj\n\n// now bObj is {a: test, b: gone, c: brand}\n</code></pre>\n\n<p><strong>Notes</strong>: The above snippet creates a clone of an source object (aka not a reference, as in cObj = aObj). It benefits over the copy-properties method (see <a href=\"http://jsperf.com/object-clone\" rel=\"nofollow\">1</a>), in that it does not copy object member properties. Rather it creates another -destination- object with it's prototype set on the source object. Moreover when properties are modified on the dest object, they are created \"on the fly\", masking the prototype's (src's) properties.This constitutes a fast an effective way of cloning immutable objects.</p>\n\n<p>The caveat here is that this applies to source objects that should not be modified after creation (immutable). If the source object is modified after creation, all the clone's unmasked properties will be modified, too.</p>\n\n<p>Fiddle here(http://jsfiddle.net/y5b5q/1/) (needs Object.create capable browser).</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There is really no advantage in using Object.create(...) over new object.</p>\n\n<p>Those advocating this method generally state rather ambiguous advantages: <a href=\"http://stackoverflow.com/questions/7505546\">\"scalability\"</a>, or \"<a href=\"http://www.adobe.com/devnet/html5/articles/javascript-object-creation.html\">more natural to JavaScript</a>\" etc. </p>\n\n<p>However, I have yet to see a concrete example that shows that Object.create has <em>any</em> advantages over using new. On the contrary there are known problems with it. <a href=\"http://elsamman.com/?p=32\">Sam Elsamman describes what happens when there are nested objects and Object.create(...) is used</a>:</p>\n\n<pre><code>    var Animal = {\n        traits: {},\n    }\n    var lion = Object.create(Animal);\n    lion.traits.legs = 4;\n    var bird = Object.create(Animal);\n    bird.traits.legs = 2;\n    alert(lion.traits.legs) // shows 2!!!\n</code></pre>\n\n<p>This occurs because Object.create(...) advocates a practice where <em>data</em> is used to create new objects; here the Animal datum becomes part of the prototype of lion and bird, and causes problems as it is shared. When using new the prototypal inheritance is explicit:</p>\n\n<pre><code>     function Animal() {\n        this.traits = {};\n    }\n\n    function Lion() { }\n    Lion.prototype = new Animal();\n    function Bird() { }\n    Bird.prototype = new Animal();\n\n    var lion = new Lion();\n    lion.traits.legs = 4;\n    var bird = new Bird();\n    bird.traits.legs = 2;\n    alert(lion.traits.legs) // now shows 4\n</code></pre>\n\n<p>Regarding, the optional property attributes that are passed into Object.create(...), these can be added using <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/defineProperties\">Object.defineProperties(...)</a>.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>The advantage is that <code>Object.create</code> is typically slower than <code>new</code> on most browsers</p>\n\n<p><a href=\"http://jsperf.com/object-create-vs-constructor-vs-object-literal/49\" rel=\"nofollow\">In this jsperf example</a>, in a Chromium, browser <code>new</code> is <strong>30 times as fast</strong> as <code>Object.create(obj)</code> although both are pretty fast. This is all pretty strange because new does more things (like invoking a constructor) where Object.create should be just creating a new Object with the passed in object as a prototype (secret link in Crockford-speak)</p>\n\n<p>Perhaps the browsers have not caught up in making <code>Object.create</code> more efficient (perhaps they are basing it on <code>new</code> under the covers ... even in native code)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>One sentence:</p>\n\n<p><code>new Computer()</code> will cause the constructor function <code>Computer(){}</code> to run for one time, while <code>Object.create(Computer.prototype)</code> wont.</p>\n\n<p>All the advantages are based on this point. </p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>Javascript 1.9.3 / ECMAScript 5 introduces <code>Object.create</code>, which Douglas Crockford amongst others has been <a href=\"http://javascript.crockford.com/prototypal.html\">advocating</a> for a long time. How do I replace <code>new</code> in the code below with <code>Object.create</code>?</p>\n\n<pre><code>var UserA = function(nameParam) {\n    this.id = MY_GLOBAL.nextId();\n    this.name = nameParam;\n}\nUserA.prototype.sayHello = function() {\n    console.log('Hello '+ this.name);\n}\nvar bob = new UserA('bob');\nbob.sayHello();\n</code></pre>\n\n<p>(Assume MY_GLOBAL.nextId exists).</p>\n\n<p>The best I can come up with is:</p>\n\n<pre><code>var userB = {\n    init: function(nameParam) {\n        this.id = MY_GLOBAL.nextId();\n        this.name = nameParam;\n    },\n    sayHello: function() {\n        console.log('Hello '+ this.name);\n    }\n};\nvar bob = Object.create(userB);\nbob.init('Bob');\nbob.sayHello();\n</code></pre>\n\n<p>There doesn't seem to be any advantage, so I think I'm not getting it. I'm probably being too neo-classical. How should I use <code>Object.create</code> to create user 'bob'?</p>\n",
            "last_activity_date": 1423809149,
            "question_id": 2709612,
            "score": 191,
            "tags": [
                "javascript",
                "constructor",
                "new-operator",
                "object-create"
            ],
            "title": "Using &quot;Object.create&quot; instead of &quot;new&quot;"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>That <code>~~</code> is a double NOT bitwise operator.</p>\n\n<p>It is used as a <a href=\"http://rocha.la/JavaScript-bitwise-operators-in-practice\">faster substitute for <code>Math.floor()</code></a>.</p>\n",
                    "is_accepted": true,
                    "score": 281
                },
                {
                    "body": "<pre><code>~(5.5)   // =&gt; -6\n~(-6)    // =&gt; 5\n~~5.5    // =&gt; 5  (same as Math.floor(5.5))\n~~(-5.5) // =&gt; -5 (NOT the same as Math.floor(-5.5), which would give -6 )\n</code></pre>\n\n<p>For more info, see:</p>\n\n<ul>\n<li><a href=\"http://dreaminginjavascript.wordpress.com/2008/07/04/28/\">http://dreaminginjavascript.wordpress.com/2008/07/04/28/</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>It hides the intention of the code.</p>\n\n<p>It's two single tilde operators, so it does a bitwise complement (bitwise not) twice. The operations take out each other, so the only remaining effect is the conversion that is done before the first operator is applied, i.e. converting the value to an integer number.</p>\n\n<p>Some use it as a faster alternative to <code>Math.floor</code>, but the speed difference is not that dramatic, and in most cases it's just micro optimisation. Unless you have a piece of code that really needs to be optimised, you should use code that descibes what it does instead of code that uses a side effect of a non-operation.</p>\n\n<h3>Update 2011-08:</h3>\n\n<p>With optimisation of the JavaScript engine in browsers, the performance for operators and functions change. With current browsers, using <code>~~</code> instead of <code>Math.floor</code> is somewhat faster in some browsers, and not faster at all in some browsers. If you really need that extra bit of performance, you would need to write different optimised code for each browser.</p>\n\n<p>See: <a href=\"http://jsperf.com/tilde-vs-floor\">tilde vs floor</a></p>\n",
                    "is_accepted": false,
                    "score": 73
                },
                {
                    "body": "<p>The diffrence is very simple:</p>\n\n<p><strong>Long version</strong></p>\n\n<p>If you want to have better readability, use <code>Math.floor</code>. But if you want to minimize it, use tilde <code>~~</code>.</p>\n\n<p>There are a lot of sources on the internet saying <code>Math.floor</code> is faster, but sometimes <code>~~</code>. I would not recommend you think about speed because it is not going to be noticed when running the code. Maybe in tests etc, but no human can see a diffrence here. What would be faster is to use <code>~~</code> for a faster load time.</p>\n\n<p><strong>Short version</strong></p>\n\n<p><code>~~</code> is shorter/takes less space. <code>Math.floor</code> improves the readability. Sometimes tilde is faster, sometimes <code>Math.floor</code> is faster, but it is not noticeable.</p>\n",
                    "is_accepted": false,
                    "score": 12
                }
            ],
            "body": "<p>I'm seeing this in some code, and I have no idea what it does:</p>\n\n<pre><code>var jdn = function(y, m, d) {\n  var tmp = (m &lt;= 2 ? -1 : 0);\n  return ~~((1461 * (y + 4800 + tmp)) / 4) + \n         ~~((367 * (m - 2 - 12 * tmp)) / 12) - \n         ~~((3 * ((y + 4900 + tmp) / 100)) / 4) + \n         d - 2483620;\n};\n</code></pre>\n\n<p>What's the <code>~~</code> operator do?</p>\n",
            "last_activity_date": 1395353198,
            "question_id": 5971645,
            "score": 225,
            "tags": [
                "javascript"
            ],
            "title": "What is the &quot;double tilde&quot; (~~) operator in JavaScript?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>you could trigger a <code>click</code> event on the corresponding tab link:</p>\n\n<pre><code>$(document).ready(function(){\n\n  if(window.location.hash != \"\") {\n      $('a[href=\"' + window.location.hash + '\"]').click()\n  }\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>Here is my solution to the problem, a bit late perhaps. But it could maybe help others:</p>\n\n<pre><code>// Javascript to enable link to tab\nvar url = document.location.toString();\nif (url.match('#')) {\n    $('.nav-tabs a[href=#'+url.split('#')[1]+']').tab('show') ;\n} \n\n// Change hash for page-reload\n$('.nav-tabs a').on('shown', function (e) {\n    window.location.hash = e.target.hash;\n})\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 196
                },
                {
                    "body": "<p>While the JavaScript solution provided may work, I went a slightly different way that requires no additional JavaScript, but does require logic in your view.  You create a link with a standard URL parameter, like:</p>\n\n<pre><code>&lt;a href = \"http://link.to.yourpage?activeTab=home\"&gt;My Link&lt;/a&gt;\n</code></pre>\n\n<p>Then you simply detect the value of activeTab to write 'class=\"active\"' in the appropriate <code>&lt;li&gt;</code></p>\n\n<p>Pseudocode (implement accordingly in your language).  Note I've set 'home' tab as a default active if no parameter provided in this example.</p>\n\n<pre><code>$activetabhome = (params.activeTab is null or params.activeTab == 'home') ? 'class=\"active\"' : '';\n$activetabprofile = (params.activeTab == 'profile') ? 'class=\"active\"' : '';\n\n&lt;li $activetabhome&gt;&lt;a href=\"#home\"&gt;Home&lt;/a&gt;&lt;/li&gt;\n&lt;li $activetabprofile&gt;&lt;a href=\"#profile\"&gt;Profile&lt;/a&gt;&lt;/li&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p><strong>UPDATE</strong></p>\n\n<p>For Bootstrap 3, change <code>.on('shown', ...)</code> to <code>.on('shown.bs.tab', ....)</code></p>\n\n<hr>\n\n<p>This is based off of <a href=\"http://stackoverflow.com/a/9393768/662581\">@dubbe</a> answer and this <a href=\"http://stackoverflow.com/a/1511522/662581\">SO accepted answer</a>.  It handles the issue with <code>window.scrollTo(0,0)</code> not working correctly. The problem is that when you replace the url hash on tab shown, the browser will scroll to that hash since its an element on the page. To get around this, add a prefix so the hash doesn't reference an actual page element</p>\n\n<pre><code>// Javascript to enable link to tab\nvar hash = document.location.hash;\nvar prefix = \"tab_\";\nif (hash) {\n    $('.nav-tabs a[href='+hash.replace(prefix,\"\")+']').tab('show');\n} \n\n// Change hash for page-reload\n$('.nav-tabs a').on('shown', function (e) {\n    window.location.hash = e.target.hash.replace(\"#\", \"#\" + prefix);\n});\n</code></pre>\n\n<p><strong>Example of use</strong></p>\n\n<p>If you have tab-pane with id=\"mytab\" you need to put your link like this:</p>\n\n<pre><code>&lt;a href=\"yoursite.com/#tab_mytab\"&gt;Go to Specific Tab &lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 120
                },
                {
                    "body": "<pre><code>$(function(){\n  var hash = window.location.hash;\n  hash &amp;&amp; $('ul.nav a[href=\"' + hash + '\"]').tab('show');\n});\n</code></pre>\n\n<p>This code from <a href=\"http://github.com/twitter/bootstrap/issues/2415#issuecomment-4450768\" rel=\"nofollow\">http://github.com/twitter/bootstrap/issues/2415#issuecomment-4450768</a> worked for me perfectly.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I would suggest you use the code provided by Bootstrap authors on their <a href=\"https://github.com/twbs/bootstrap/issues/2415\" rel=\"nofollow\">issue tracker on GitHub</a>:</p>\n\n<pre><code>var hash = location.hash\n  , hashPieces = hash.split('?')\n  , activeTab = $('[href=' + hashPieces[0] + ']');\nactiveTab &amp;&amp; activeTab.tab('show');\n</code></pre>\n\n<p>You can find on the link to the issue more information about why they didn't choose to support that.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This code selects the right tab depending on the #hash and adds the right #hash when a tab is clicked. (this uses jquery)</p>\n\n<p>In Coffeescript :</p>\n\n<pre><code>$(document).ready -&gt;\n    if location.hash != ''\n        $('a[href=\"'+location.hash+'\"]').tab('show')\n\n    $('a[data-toggle=\"tab\"]').on 'shown', (e) -&gt;\n        location.hash = $(e.target).attr('href').substr(1)\n</code></pre>\n\n<p>or in JS :</p>\n\n<pre><code>$(document).ready(function() {\n    if (location.hash !== '') $('a[href=\"' + location.hash + '\"]').tab('show');\n    return $('a[data-toggle=\"tab\"]').on('shown', function(e) {\n      return location.hash = $(e.target).attr('href').substr(1);\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is what i did, really simple, and provided your tab links have an ID associated with them you can get the href attribute and pass that over to the function that shows the tab contents:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n        jQuery(document).ready(function() {\n            var hash = document.location.hash;\n            var prefix = \"tab_\";\n            if (hash) {\n                var tab = jQuery(hash.replace(prefix,\"\")).attr('href');\n                jQuery('.nav-tabs a[href='+tab+']').tab('show');\n            }\n        });\n        &lt;/script&gt;\n</code></pre>\n\n<p>Then in your url you can add the hash as something like: #tab_tab1, the 'tab_' part is removed from the hash itself so the ID of the actual tab link in the nav-tabs (tabid1) is placed after this, so your url would look something like: www.mydomain.com/index.php#tab_tabid1.</p>\n\n<p>This works perfect for me and hope it helps someone else :-)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I just had this issue, but needed to handle multiple tab levels. The code is rather ugly (see comments), but does its job: <a href=\"https://gist.github.com/JensRantil/4721860\" rel=\"nofollow\">https://gist.github.com/JensRantil/4721860</a> Hopefully someone else will find it useful (and feel free to propose better solutions!).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>@flynfish + @Ztyx solution that I use for nested tabs:</p>\n\n<pre><code>    handleTabLinks();\n\n    function handleTabLinks() {\n        if(window.location.hash == '') {\n            window.location.hash = window.location.hash + '#_';\n        }\n        var hash = window.location.hash.split('#')[1];\n        var prefix = '_';\n        var hpieces = hash.split('/');\n        for (var i=0;i&lt;hpieces.length;i++) {\n            var domelid = hpieces[i].replace(prefix,'');\n            var domitem = $('a[href=#' + domelid + '][data-toggle=tab]');\n            if (domitem.length &gt; 0) {\n                domitem.tab('show');\n            }\n        }\n        $('a[data-toggle=tab]').on('shown', function (e) {\n            if ($(this).hasClass('nested')) {\n                var nested = window.location.hash.split('/');\n                window.location.hash = nested[0] + '/' + e.target.hash.split('#')[1];\n            } else {\n                window.location.hash = e.target.hash.replace('#', '#' + prefix);\n            }\n        });\n    }\n</code></pre>\n\n<p>childrens should have class=\"nested\"</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This is an improved implementation of dubbe's solution which prevent scrolling.</p>\n\n<pre><code>// Javascript to enable link to tab\nvar url = document.location.toString();\nif (url.match('#')) {\n    $('.nav-tabs a[href=#'+url.split('#')[1]+']').tab('show') ;\n} \n\n// With HTML5 history API, we can easily prevent scrolling!\n$('.nav-tabs a').on('shown', function (e) {\n    if(history.pushState) {\n        history.pushState(null, null, e.target.hash); \n    } else {\n        window.location.hash = e.target.hash; //Polyfill for old browsers\n    }\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>This is my solution to handle nested tabs. \nI just added a function to check if the active tab has a parent tab to be activated.\nThis is the function:</p>\n\n<pre><code>function activateParentTab(tab) {\n    $('.tab-pane').each(function() {\n        var cur_tab = $(this);\n        if ( $(this).find('#' + tab).length &gt; 0 ) {\n            $('.nav-tabs a[href=#'+ cur_tab.attr('id') +']').tab('show');\n            return false;\n        }\n    });\n}\n</code></pre>\n\n<p>And can be called like this (Based on @flynfish's solution):</p>\n\n<pre><code>var hash = document.location.hash;\nvar prefix = \"\";\nif (hash) {\n    $('.nav-tabs a[href='+hash.replace(prefix,\"\")+']').tab('show');\n    activateParentTab(hash);\n} \n\n// Change hash for page-reload\n$('.nav-tabs a').on('shown', function (e) {\n    window.location.hash = e.target.hash.replace(\"#\", \"#\" + prefix);\n});\n</code></pre>\n\n<p>This solution works pretty fine to me at the moment.\nHope this can be useful for someone else ;)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This works in Bootstrap 3 and improves dubbe and flynfish 's 2 top answers by integrating GarciaWebDev 's answer as well (which allows for url parameters after the hash and is straight from Bootstrap authors on the github issue tracker):</p>\n\n<pre><code>// Javascript to enable link to tab\nvar hash = document.location.hash;\nvar prefix = \"tab_\";\n\nif (hash) {\n    hash = hash.replace(prefix,'');\n    var hashPieces = hash.split('?');\n    activeTab = $('.nav-tabs a[href=' + hashPieces[0] + ']');\n    activeTab &amp;&amp; activeTab.tab('show');\n} \n\n// Change hash for page-reload\n$('.nav-tabs a').on('shown', function (e) {\n    window.location.hash = e.target.hash.replace(\"#\", \"#\" + prefix);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I am not a big fan of if...else; so I took a simpler approach.</p>\n\n<pre><code>$(document).ready(function(event) {\n    $('ul.nav.nav-tabs a:first').tab('show'); // Select first tab\n    $('ul.nav.nav-tabs a[href=\"'+ window.location.hash+ '\"]').tab('show'); // Select tab by name if provided in location hash\n    $('ul.nav.nav-tabs a[data-toggle=\"tab\"]').on('shown', function (event) {    // Update the location hash to current tab\n        window.location.hash= event.target.hash;\n    })\n});\n</code></pre>\n\n<ol>\n<li>Pick a default tab (usually the first)</li>\n<li>Switch to tab (if such an element is indeed present; let jQuery handle it); Nothing happens if a wrong hash is specified</li>\n<li>[Optional] Update the hash if another tab is manually chosen</li>\n</ol>\n\n<p>Doesn't address scrolling to requested hash; but <strong>should</strong> it?</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I had to modify some bits for this to work for me.\nI am using Bootstrap 3 and jQuery 2</p>\n\n<pre><code>// Javascript to enable link to tab\nvar hash = document.location.hash;\nvar prefix = \"!\";\nif (hash) {\n    hash = hash.replace(prefix,'');\n    var hashPieces = hash.split('?');\n    activeTab = $('[role=\"tablist\"] a[href=' + hashPieces[0] + ']');\n    activeTab &amp;&amp; activeTab.tab('show');\n}\n\n// Change hash for page-reload\n$('[role=\"tablist\"] a').on('shown.bs.tab', function (e) {\n    window.location.hash = e.target.hash.replace(\"#\", \"#\" + prefix);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm developing a web page in which I'm using Twitter's Bootstrap Framework and their <a href=\"http://twitter.github.com/bootstrap/javascript.html#tabs\">Bootstrap Tabs JS</a>. It works great except for a few minor issues, one of which is I do not know how go directly to  a specific tab from an external link. For example:</p>\n\n<pre><code>&lt;a href=\"facility.php#home\"&gt;Home&lt;/a&gt;\n&lt;a href=\"facility.php#notes\"&gt;Notes&lt;/a&gt;\n</code></pre>\n\n<p>should go to the Home tab and the Notes tab respectively <strong>when clicked on the links from an external page</strong></p>\n",
            "last_activity_date": 1423912591,
            "question_id": 7862233,
            "score": 112,
            "tags": [
                "javascript",
                "html",
                "tabs",
                "twitter-bootstrap"
            ],
            "title": "Twitter Bootstrap Tabs: Go to Specific Tab on Page Reload or Hyperlink"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>Try this: <a href=\"http://jsfiddle.net/xA5B7/\">http://jsfiddle.net/xA5B7/</a></p>\n\n<pre><code>var MyDate = new Date();\nvar MyDateString;\n\nMyDate.setDate(MyDate.getDate() + 20);\n\nMyDateString = ('0' + MyDate.getDate()).slice(-2) + '/'\n             + ('0' + (MyDate.getMonth()+1)).slice(-2) + '/'\n             + MyDate.getFullYear();\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT:</strong></p>\n\n<p>To explain, <code>.slice(-2)</code> gives us the <em>last</em> two characters of the string.</p>\n\n<p>So no matter what, we can add <code>\"0\"</code> to the day or month, and just ask for the last two since those are always the two we want.</p>\n\n<p>So if the <code>MyDate.getMonth()</code> returns <code>9</code>, it will be:</p>\n\n<pre><code>(\"0\" + \"9\") // Giving us \"09\"\n</code></pre>\n\n<p>so adding <code>.slice(-2)</code> on that gives us the last two characters which is:</p>\n\n<pre><code>(\"0\" + \"9\").slice(-2)\n\"09\"\n</code></pre>\n\n<p>But if <code>MyDate.getMonth()</code> returns <code>10</code>, it will be:</p>\n\n<pre><code>(\"0\" + \"10\") // Giving us \"010\"\n</code></pre>\n\n<p>so adding <code>.slice(-2)</code> gives us the last two characters, or:</p>\n\n<pre><code>(\"0\" + \"10\").slice(-2)\n\"10\"\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 471
                },
                {
                    "body": "<pre><code>Number.prototype.padZero= function(len){\n var s= String(this), c= '0';\n len= len || 2;\n while(s.length &lt; len) s= c + s;\n return s;\n}\n</code></pre>\n\n<p>//in use:</p>\n\n<pre><code>(function(){\n var myDate= new Date(), myDateString;\n myDate.setDate(myDate.getDate()+10);\n\n myDateString= [myDate.getDate().padZero(),\n (myDate.getMonth()+1).padZero(),\n myDate.getFullYear()].join('/');\n\n alert(myDateString);\n})()\n\n/*  value: (String)\n09/09/2010\n*/\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>var MyDate = new Date();\nvar MyDateString = '';\nMyDate.setDate(MyDate.getDate());\nvar tempoMonth = (MyDate.getMonth()+1);\nvar tempoDate = (MyDate.getDate());\nif (tempoMonth &lt; 10) tempoMonth = '0' + tempoMonth;\nif (tempoDate &lt; 10) tempoDate = '0' + tempoDate;\nMyDateString = tempoDate + '/' + tempoMonth + '/' + MyDate.getFullYear();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is an example from the <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date#Example.3A_ISO_8601_formatted_dates\">Date object docs</a> on the Mozilla Developer Network using a custom \"pad\" function, without having to extend Javascript's Number prototype. The handy function they give as an example is</p>\n\n<pre><code>function pad(n){return n&lt;10 ? '0'+n : n}\n</code></pre>\n\n<p>And below is it being used in context.</p>\n\n<pre><code>/* use a function for the exact format desired... */\nfunction ISODateString(d){\n    function pad(n){return n&lt;10 ? '0'+n : n}\n    return d.getUTCFullYear()+'-'\n    + pad(d.getUTCMonth()+1)+'-'\n    + pad(d.getUTCDate())+'T'\n    + pad(d.getUTCHours())+':'\n    + pad(d.getUTCMinutes())+':'\n    + pad(d.getUTCSeconds())+'Z'\n}\n\nvar d = new Date();\nconsole.log(ISODateString(d)); // prints something like 2009-09-28T19:03:12Z\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<pre><code>function formatDate(jsDate){\n  // add leading zeroes to jsDate when days or months are &lt; 10.. \n  // i.e.\n  //     formatDate(new Date(\"1/3/2013\") \n  // returns\n  //    \"01/03/2103\"\n  ////////////////////\n  return (jsDate.getDate()&lt;10?(\"0\"+jsDate.getDate()):jsDate.getDate()) + \"/\" + \n      ((jsDate.getMonth()+1)&lt;10?(\"0\"+(jsDate.getMonth()+1)):(jsDate.getMonth()+1)) + \"/\" + \n      jsDate.getFullYear();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The following aims to extract configuration, hook into <code>Date.protoype</code> and apply configuration. </p>\n\n<p>I've used an <code>Array</code> to store time chunks and when I <code>push()</code> <code>this</code> as a <code>Date</code> object, it returns me the length to iterate. When I'm done, I can use <code>join</code> on the <code>return</code> value.</p>\n\n<p>This seems to work pretty fast: 0.016ms</p>\n\n<pre><code>// Date protoype\nDate.prototype.formatTime = function (options) {\n    var i = 0,\n        time = [],\n        len = time.push(this.getHours(), this.getMinutes(), this.getSeconds());\n\n    for (; i &lt; len; i += 1) {\n        var tick = time[i];\n        time[i] = tick &lt; 10 ? options.pad + tick : tick;\n    }\n\n    return time.join(options.separator);\n};\n\n// Setup output\nvar cfg = {\n    fieldClock: \"#fieldClock\",\n    options: {\n        pad: \"0\",\n        separator: \":\",\n        tick: 1000\n    }\n};\n\n// Define functionality\nfunction startTime() {\n    var clock = $(cfg.fieldClock),\n        now = new Date().formatTime(cfg.options);\n\n    clock.val(now);\n    setTimeout(startTime, cfg.options.tick);\n}\n\n// Run once\nstartTime();\n</code></pre>\n\n<p><strong>demo:</strong> <a href=\"http://jsfiddle.net/tive/U4MZ3/\" rel=\"nofollow\">http://jsfiddle.net/tive/U4MZ3/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could use ternary operator to format the date like an \"if\" statement.</p>\n\n<p>For example:</p>\n\n<pre><code>var MyDate = new Date();\nMyDate.setDate(MyDate.getDate()+10);\nvar MyDateString = (MyDate.getDate() &lt; 10 ? '0' + MyDate.getDate() : MyDate.getDate()) + '/' + ((d.getMonth()+1) &lt; 10 ? '0' + (d.getMonth()+1) : (d.getMonth()+1)) + '/' + MyDate.getFullYear();\n</code></pre>\n\n<p>So</p>\n\n<pre><code>(MyDate.getDate() &lt; 10 ? '0' + MyDate.getDate() : MyDate.getDate())\n</code></pre>\n\n<p>would be similar to an if statement, where if the getDate() returns a value less than 10, then return a '0' + the Date, or else return the date if greater than 10 (since we do not need to add the leading 0).  Same for the month.</p>\n\n<p>Edit:\nForgot that getMonth starts with 0, so added the +1 to account for it.  Of course you could also just say d.getMonth() &lt; 9 :, but I figured using the +1 would help make it easier to understand.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I wrapped the correct answer of this question in a function that can add multiple leading zero's but defaults to adding 1 zero.</p>\n\n<pre><code>function zeroFill(nr, depth){\n  depth = (depth === undefined)? 1 : depth;\n\n  var zero = \"0\";\n  for (var i = 0; i &lt; depth; ++i) {\n    zero += \"0\";\n  }\n\n  return (zero + nr).slice(-(depth + 1));\n}\n</code></pre>\n\n<p>for working with numbers only and not more than 2 digits, this is also an approach:</p>\n\n<pre><code>function zeroFill(i) {\n    return (i &lt; 10 ? '0' : '') + i\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can define a \"str_pad\" function (as in php):</p>\n\n<pre><code>function str_pad(n) {\n    return String(\"00\" + n).slice(-2);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've created this script to calculate the date for 10 days in advance in the format of dd/mm/yyyy:</p>\n\n<pre><code>var MyDate = new Date();\nvar MyDateString = new Date();\nMyDate.setDate(MyDate.getDate()+10);\nMyDateString = MyDate.getDate() + '/' + (MyDate.getMonth()+1) + '/' + MyDate.getFullYear();\n</code></pre>\n\n<p>I need to have the date appear with leading zeroes on the day and month component by way of adding these rules to the script. I can't seem to get it to work.</p>\n\n<pre><code>if (MyDate.getMonth &lt; 10)getMonth = '0' + getMonth;\n</code></pre>\n\n<p>and</p>\n\n<pre><code>if (MyDate.getDate &lt;10)get.Date = '0' + getDate;\n</code></pre>\n\n<p>If someone could show me where to insert these into the script I would be really appreciative.</p>\n",
            "last_activity_date": 1426166273,
            "question_id": 3605214,
            "score": 139,
            "tags": [
                "javascript"
            ],
            "title": "Javascript add leading zeroes to date"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>JavaScript has an <a href=\"http://www.w3schools.com/jsref/jsref%5Feval.asp\"><code>eval</code></a> function that evaluates a string and executes it as code:</p>\n\n<pre><code>eval(settings.functionName + '(' + t.parentNode.id + ')');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<pre><code>eval(\"javascript code\");\n</code></pre>\n\n<p>it is extensively used when dealing with <a href=\"http://www.json.org/js.html\" rel=\"nofollow\">JSON</a>.</p>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>If <code>settings.functionName</code> is already a function, you could do this:</p>\n\n<pre><code>settings.functionName(t.parentNode.id);\n</code></pre>\n\n<p>Otherwise this should also work if <code>settings.functionName</code> is just the name of the function:</p>\n\n<pre><code>if (typeof window[settings.functionName] == \"function\") {\n    window[settings.functionName](t.parentNode.id);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>window[settings.functionName](t.parentNode.id);\n</code></pre>\n\n<p>No need for an eval()</p>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<p>Seeing as I hate eval, and I am <a href=\"http://blogs.msdn.com/ericlippert/archive/2003/11/01/53329.aspx\">not alone</a>:</p>\n\n<pre><code>var fn = window[settings.functionName];\nif(typeof fn === 'function') {\n    fn(t.parentNode.id);\n}\n</code></pre>\n\n<p><strong>Edit:</strong> In reply to @Mahan's comment:\nIn this particular case, <code>settings.functionName</code> would be <code>\"clickedOnItem\"</code>. This would, at runtime translate <code>var fn = window[settings.functionName];</code> into <code>var fn = window[\"clickedOnItem\"]</code>, which would obtain a reference to <code>function clickedOnItem (nodeId) {}</code>. Once we have a reference to a function inside a variable, we can call this function by \"calling the variable\", i.e. <code>fn(t.parentNode.id)</code>, which equals <code>clickedOnItem(t.parentNode.id)</code>, which was what the OP wanted.</p>\n\n<p>More full example:</p>\n\n<pre><code>/* Somewhere: */\nwindow.settings = {\n  /* [..] Other settings */\n  functionName: 'clickedOnItem'\n  /* , [..] More settings */\n};\n\n/* Later */\nfunction clickedOnItem (nodeId) {\n  /* Some cool event handling code here */\n}\n\n/* Even later */\nvar fn = window[settings.functionName]; \n/* note that settings.functionName could also be written\n   as window.settings.functionName. In this case, we use the fact that window\n   is the implied scope of global variables. */\nif(typeof fn === 'function') {\n    fn(t.parentNode.id);\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 207
                },
                {
                    "body": "<p>eval() is the function you need to do that, but I'd advise trying one of these things to minimize the use of eval. Hopefully one of them will make sense to you.</p>\n\n<p><strong>Store the function</strong></p>\n\n<p>Store the function as a function, not as a string, and use it as a function later. Where you actually store the function is up to you.</p>\n\n<pre><code>var funcForLater = clickedOnItem;\n\n// later is now\nfuncForLater(t.parentNode.id);\n</code></pre>\n\n<p>or</p>\n\n<pre><code>someObject.funcForLater = clickedOnItem;    \n// later is now    \n(someObject.funcForLater)(t.parentNode.id);\n</code></pre>\n\n<p><strong>Store function name</strong></p>\n\n<p>Even if you have to store the function name as a string, you can minimize complexity by doing</p>\n\n<pre><code>(eval(settings.functionName))(t.parentNode.id);\n</code></pre>\n\n<p>which minimizes the amount of Javascript you have to construct and eval.</p>\n\n<p><strong>Dictionary of handlers</strong></p>\n\n<p>Put all of the action functions you might need into an object, and call them dictionary-style using the string.</p>\n\n<pre><code>// global\nitemActions = { click: clickedOnItem, rightClick: rightClickedOnItem /* etc */ };\n\n// Later...\nvar actionName = \"click\"; // Or wherever you got the action name\nvar actionToDo = itemActions[actionName];\nactionToDo(t.parentNode.id);\n</code></pre>\n\n<p>(Minor note: If instead here you used syntax <code>itemActions[actionName](t.parentNode.id);</code> then the function would be called as a method of <code>itemActions</code>.)</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>While I like the first answer and I hate eval, I'd like to add that there's another way (similar to eval) so if you can go around it and not use it, you better do. But in some cases you may want to call some javascript code before or after some ajax call and if you have this code in a custom attribute instead of ajax you could use this:</p>\n\n<pre><code>    var executeBefore = $(el).attr(\"data-execute-before-ajax\");\n    if (executeBefore != \"\") {\n        var fn = new Function(executeBefore);\n        fn();\n    }\n</code></pre>\n\n<p>Or eventually store this in a function cache if you may need to call it multiple times. </p>\n\n<p>Again - don't use eval or this method if you have another way to do that.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>This took me a while to figure out, as the conventional <code>window['someFunctionName']()</code> did not work for me at first.  The names of my functions were being pulled as an AJAX response from a database.  Also, for whatever reason, my functions were declared outside of the scope of the window, so in order to fix this I had to rewrite the functions I was calling from</p>\n\n<pre><code>function someFunctionName() {}\n</code></pre>\n\n<p>to</p>\n\n<pre><code>window.someFunctionName = function() {}\n</code></pre>\n\n<p>and from there I could call <code>window['someFunctionName']()</code> with ease.  I hope this helps someone!</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I prefer to use something like this:</p>\n\n<pre><code>window.callbackClass['newFunctionName'] = function(data) { console.log(data) };\n...\nwindow.callbackClass['newFunctionName'](data);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In javascript that uses the CommonJS spec, like node.js for instance you can do what I show below. Which is pretty handy for accessing a variable by a string even if its not defined on the <code>window</code> object. If there is a class named <code>MyClass</code>, defined within a CommonJS module named MyClass.js</p>\n\n<pre><code>// MyClass.js\nvar MyClass = function() {\n    // I do stuff in here. Probably return an object\n    return {\n       foo: \"bar\"\n    }\n}\n\nmodule.exports = MyClass;\n</code></pre>\n\n<p>You can then do this nice bit o witchcraft from another file called MyOtherFile.js</p>\n\n<pre><code>// MyOtherFile.js\n\nvar myString = \"MyClass\";\n\nvar MyClass = require(myString);\nvar obj = new MyClass();\n\nconsole.log(obj.foo); // returns \"bar\"\n</code></pre>\n\n<p>One more reason why CommonJS is such a pleasure.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a more generic way to do the same, while supporting scopes :</p>\n\n<pre><code>// Get function from string, with or without scopes (by Nicolas Gauthier)\nwindow.getFunctionFromString = function(string)\n{\n    var scope = window;\n    var scopeSplit = string.split('.');\n    for (i = 0; i &lt; scopeSplit.length - 1; i++)\n    {\n        scope = scope[scopeSplit[i]];\n\n        if (scope == undefined) return;\n    }\n\n    return scope[scopeSplit[scopeSplit.length - 1]];\n}\n</code></pre>\n\n<p>Hope it can help some people out.</p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>Based on Nicolas Gauthier answer:</p>\n\n<pre><code>var strng = 'someobj.someCallback';\nvar data = 'someData';\n\nvar func = window;\nvar funcSplit = strng.split('.');\nfor(i = 0;i &lt; funcSplit.length;i++){\n   //We maybe can check typeof and break the bucle if typeof != function\n   func = func[funcSplit[i]];\n}\nfunc(data);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I wanted to be able to take a function name as a string, call it, AND pass an argument to the function. I couldn't get the selected answer for this question to do that, but this <a href=\"http://stackoverflow.com/questions/5818313/javascript-equivalent-of-phps-call-user-func\">answer</a> explained it exactly, and here is a short demo.</p>\n\n<pre><code>function test_function(argument)    {\n    alert('This function ' + argument); \n}\n\nfunctionName = 'test_function';\n\nwindow[functionName]('works!');\n</code></pre>\n\n<p>This also works with multiple arguments.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I got a string like:</p>\n\n<pre><code>settings.functionName + '(' + t.parentNode.id + ')';\n</code></pre>\n\n<p>that I want to translate into a function call like so:</p>\n\n<pre><code>clickedOnItem(IdofParent);\n</code></pre>\n\n<p>This of course will have to be done in javascript.  When I do an alert on <code>settings.functionName + '(' + t.parentNode.id + ')';</code> it seems to get everything correct.  I just need to call the function that it would translate into.</p>\n\n<p>Legend:</p>\n\n<pre><code>settings.functionName = clickedOnItem\n\nt.parentNode.id = IdofParent\n</code></pre>\n",
            "last_activity_date": 1424572492,
            "question_id": 912596,
            "score": 146,
            "tags": [
                "javascript",
                "function"
            ],
            "title": "How to turn a String into a javascript function call?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>see: <a href=\"http://www.alistapart.com/articles/getoutbindingsituations\">http://www.alistapart.com/articles/getoutbindingsituations</a></p>\n\n<p><code>self</code> is being used to maintain a reference to the original <code>this</code> even as the context is changing. It's a technique often used in event handlers (especially in closures).</p>\n",
                    "is_accepted": true,
                    "score": 236
                },
                {
                    "body": "<p>The variable is captured by the inline functions defined in the method. <code>this</code> in the function will refer to another object. This way, you can make the function hold a reference to the <code>this</code> in the outer scope.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Yes, you'll see it everywhere. It's often \"that=this;\".</p>\n\n<p>See how \"self\" is used inside functions called by events? Those would have their own context, so self is used to hold the \"this\" that came into Note().</p>\n\n<p>The reason \"self\" is still available to the functions, even though they can only execute after the Note() function has finished executing, is that inner functions get the context of the outer function due to \"closure.\"</p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>It should also be noted there is an alternative Proxy pattern for maintaining a reference to the original <code>this</code> in a callback if you dislike the <code>var self = this</code> idiom.  </p>\n\n<p>As a function can be called with a given context by using <code>function.apply</code> or <code>function.call</code>, you can write a wrapper that returns a function that calls your function with <code>apply</code> or <code>call</code> using the given context.  See jQuery's <code>proxy</code> function for an implementation of this pattern.  Here is an example of using it:</p>\n\n<p><code>var wrappedFunc = $.proxy(this.myFunc, this);</code></p>\n\n<p><code>wrappedFunc</code> can then be called and will have your version of <code>this</code> as the context.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>I think the variable name 'self' should not be used this way anymore, since morden browsers provide a global variable <code>self</code> pointing to the global object of either a normal window or a WebWorker.</p>\n\n<p>To avoid confusion and potential conflicts, you can write <code>var thiz = this</code> or <code>var that = this</code>instead.</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>Actually self is a reference to window (<code>window.self</code>) therefore when you say <code>var self = 'something'</code> you override a window reference to itself - because self exist in window object. </p>\n\n<p>This is why most developers prefer <code>var that = this</code> over <code>var self = this;</code> </p>\n\n<p>Anyway; <code>var that = this;</code> is not in line with the good practice ... presuming that your code will be revised / modified later by other developers you should use the most common programming standards in respect with developer community </p>\n\n<p>Therefore you should use something like var <code>oldThis</code> / <code>var oThis</code> / etc - to be clear in your scope // ..is not that much but will save few seconds and few brain cycles</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As mentioned several times above, 'self' is simply being used to keep a reference to 'this' prior to entering the funcition. Once in the function 'this' refers to something else.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I saw the following in the source for <a href=\"http://webkit.org/misc/DatabaseExample.html\">WebKit HTML 5 SQL Storage Notes Demo</a>:    </p>\n\n<pre><code>function Note() {\n  var self = this;\n\n  var note = document.createElement('div');\n  note.className = 'note';\n  note.addEventListener('mousedown', function(e) { return self.onMouseDown(e) }, false);\n  note.addEventListener('click', function() { return self.onNoteClick() }, false);\n  this.note = note;\n  // ...\n}\n</code></pre>\n\n<p>The author uses <em>self</em> in some places (the function body) and <em>this</em> in other places (the bodies of functions defined in the argument list of methods).  What's going on?  Now that I've noticed it once, will I start seeing it everywhere?</p>\n",
            "last_activity_date": 1419702853,
            "question_id": 962033,
            "score": 180,
            "tags": [
                "javascript",
                "scope",
                "closures"
            ],
            "title": "What underlies this JavaScript idiom: var self = this?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>The <code>constructor</code> property makes absolutely no practical difference to anything internally. It's only any use if your code explicitly uses it. For example, you may decide you need each of your objects to have a reference to the actual constructor function that created it; if so, you'll need to set the <code>constructor</code> property explicitly when you set up inheritance by assigning an object to a constructor function's <code>prototype</code> property, as in your example.</p>\n",
                    "is_accepted": true,
                    "score": 35
                },
                {
                    "body": "<p>Step one is to understand what <code>constructor</code> and <code>prototype</code> are all about. It's not difficult, but one has to let go of \"inheritance\" in the classical sense.</p>\n\n<p><strong>The constructor</strong></p>\n\n<p>The <code>constructor</code> property <strong>does not</strong> cause any particular effects in your program, except that you can look at it to see which function was used in conjunction with the operator <code>new</code> to create your object. If you typed <code>new Bar()</code> it will be <code>Bar</code> and you typed <code>new Foo</code>it will be <code>Foo</code>.</p>\n\n<p><strong>The prototype</strong></p>\n\n<p>The <code>prototype</code> property is used for lookup in case the object in question does not have the property asked for. If you write <code>x.attr</code>, JavaScript will try to find <code>attr</code> among <code>x</code>'s attributes. If it cant find it, it will look in <code>x.__proto__</code>. If it's not there either, it will look in <code>x.__proto__.__proto__</code> and so on as long as <code>__proto__</code> is defined.</p>\n\n<p>So what is <code>__proto__</code>and what has it got to do with <code>prototype</code>? Shortly put, <code>prototype</code> is for \"types\" while <code>__proto__</code> is for \"instances\". (I say that with quotation marks because there's not really any difference between types and instances). When you write <code>x = new MyType()</code>, what happens (among other things) is that <code>x.__proto___</code> is set to <code>MyType.prototype</code>.</p>\n\n<p><strong>The question</strong></p>\n\n<p>Now, the above should be all you need to derive what your own example means, but to try and answer your actual question; \"why write something like\":</p>\n\n<p><code>Bar.prototype.constructor = Bar;</code></p>\n\n<p>I personally have never seen it and I find it a little silly, but in the context you've given it will mean that the <code>Bar.prototype</code>-object (created by using <code>new Foo(42)</code>) will pose as have being created by <code>Bar</code> rather than <code>Foo</code>. I suppose the idea is some make something similar to C++/Java/C#-like languages where a type-lookup (the <code>constructor</code> property) will always yield the most specific type rather than the type of the more generic object further up in the prototype-chain.</p>\n\n<p>My advice: don't think very much about \"inheritance\" in JavaScript. The concepts of interfaces and mixins makes more sense. And don't check objects for their types. Check for the required properties instead (\"if it walks like a duck and quacks like a duck, it's a duck\").</p>\n\n<p>Trying to force JavaScript into a classical inheritance model, when all that it has is the prototype-mechanism as described above, is what causes the confusion. The many people that suggested to manually set the <code>constructor</code>-property probably tried to do just that. Abstractions are fine, but this manual assignment of the constructor property is not very idiomatic usage of JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 73
                },
                {
                    "body": "<p>one case to use constructor:</p>\n\n<ol>\n<li><p>this is one of the common realization of inheritance:</p>\n\n<pre><code>Function.prototype.extend = function(superClass,override) {\n    var f = new Function();\n    f.prototype = superClass.prototype;\n    var p = this.prototype = new f();\n    p.constructor = this;\n    this.superclass = superClass.prototype;\n    ...\n};\n</code></pre></li>\n<li><p>this <code>new f()</code> would not call the constructor of superClass,so when you create a subClass,maybe you need call the superClass at first,like this:</p>\n\n<pre><code>SubClass = function() {\n    SubClass.superClass.constructor.call(this);\n};\n</code></pre></li>\n</ol>\n\n<p>so the constructor property make sense here.</p>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>Trying to bend by head around Javascript's take on OO...and, like many others, running into confusion about the <code>constructor</code> property. In particular, the significance of the <code>constructor</code> property, as I can't seem to make it have any effect. E.g.:</p>\n\n<pre><code>function Foo(age) {\n    this.age = age;\n}\n\nfunction Bar() {\n    this.name = \"baz\"; \n}\n\nBar.prototype = new Foo(42); \nvar b = new Bar;    \n\nalert(b.constructor); // \"Foo\". That's OK because we inherit `Foo`'s prototype.\nalert(b.name);        // \"baz\". Shows that Bar() was called as constructor.\nalert(b.age);         // \"42\", inherited from `Foo`.\n</code></pre>\n\n<p>In the above example, the object <code>b</code> seems to have had the right constructor called (<code>Bar</code>) &ndash; and it inherits the age property from <code>Foo</code>. So why do many people suggest this as a necessary step:</p>\n\n<pre><code>Bar.prototype.constructor = Bar;\n</code></pre>\n\n<p>Clearly, the right <code>Bar</code> constructor <em>was</em> called when constructing <code>b</code>, so what impact does this prototype property have? I am curious to know what practical difference it actually makes to have the constructor property set 'correctly'\u2014as I can't see it having any affect on which constructor is actually called after an object is created.</p>\n",
            "last_activity_date": 1362722057,
            "question_id": 4012998,
            "score": 73,
            "tags": [
                "javascript",
                "prototype",
                "constructor"
            ],
            "title": "What it the significance of the Javascript constructor property?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>The following may be of interest. Not fully sure of its adoption by modern browsers, but it should do what you need it to do:</p>\n\n<p><a href=\"http://www.w3.org/TR/DOM-Level-2-Style/\" rel=\"nofollow\">http://www.w3.org/TR/DOM-Level-2-Style/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Although I'm not sure why you want to create CSS classes with JavaScript, here is an option:</p>\n\n<pre><code>var style = document.createElement('style');\nstyle.type = 'text/css';\nstyle.innerHTML = '.cssClass { color: #F00; }';\ndocument.getElementsByTagName('head')[0].appendChild(style);\n\ndocument.getElementById('someElementId').className = 'cssClass';\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 141
                },
                {
                    "body": "<p>YUI has by far the best <a href=\"http://developer.yahoo.com/yui/stylesheet/\">stylesheet utility</a> I have seen out there. I encourage you to check it out, but here's a taste:</p>\n\n<pre><code>// style element or locally sourced link element\nvar sheet = YAHOO.util.StyleSheet(YAHOO.util.Selector.query('style',null,true));\n\nsheet = YAHOO.util.StyleSheet(YAHOO.util.Dom.get('local'));\n\n\n// OR the id of a style element or locally sourced link element\nsheet = YAHOO.util.StyleSheet('local');\n\n\n// OR string of css text\nvar css = \".moduleX .alert { background: #fcc; font-weight: bold; } \" +\n\t\t  \".moduleX .warn  { background: #eec; } \" +\n\t\t  \".hide_messages .moduleX .alert, \" +\n\t\t  \".hide_messages .moduleX .warn { display: none; }\";\n\nsheet = new YAHOO.util.StyleSheet(css);\n</code></pre>\n\n<p>There are obviously other much simpler ways of changing styles on the fly such as those suggested here. If they make sense for your problem, they might be best, but there are definitely reasons why modifying css is a better solution. The most obvious case is when you need to modify a large number of elements. The other major case is if you need your style changes to involve the cascade. Using the dom to modify an element will always have a higher priority. Its the sledgehammer approach and is equivalent to using the style attribute directly on the html element. That is not always the desired effect.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Found a better solution, which <strong>works across all browsers.</strong><br>\nUses document.styleSheet to add or replace rules. Accepted answer is short and handy but this works across IE8 and less too.  </p>\n\n<pre><code>function createCSSSelector(selector, style) {\n    if(!document.styleSheets) {\n        return;\n    }\n\n    if(document.getElementsByTagName(\"head\").length == 0) {\n        return;\n    }\n\n    var stylesheet;\n    var mediaType;\n    if(document.styleSheets.length &gt; 0) {\n        for( i = 0; i &lt; document.styleSheets.length; i++) {\n            if(document.styleSheets[i].disabled) {\n                continue;\n            }\n            var media = document.styleSheets[i].media;\n            mediaType = typeof media;\n\n            if(mediaType == \"string\") {\n                if(media == \"\" || (media.indexOf(\"screen\") != -1)) {\n                    styleSheet = document.styleSheets[i];\n                }\n            } else if(mediaType == \"object\") {\n                if(media.mediaText == \"\" || (media.mediaText.indexOf(\"screen\") != -1)) {\n                    styleSheet = document.styleSheets[i];\n                }\n            }\n\n            if( typeof styleSheet != \"undefined\") {\n                break;\n            }\n        }\n    }\n\n    if( typeof styleSheet == \"undefined\") {\n        var styleSheetElement = document.createElement(\"style\");\n        styleSheetElement.type = \"text/css\";\n\n        document.getElementsByTagName(\"head\")[0].appendChild(styleSheetElement);\n\n        for( i = 0; i &lt; document.styleSheets.length; i++) {\n            if(document.styleSheets[i].disabled) {\n                continue;\n            }\n            styleSheet = document.styleSheets[i];\n        }\n\n        var media = styleSheet.media;\n        mediaType = typeof media;\n    }\n\n    if(mediaType == \"string\") {\n        for( i = 0; i &lt; styleSheet.rules.length; i++) {\n            if(styleSheet.rules[i].selectorText &amp;&amp; styleSheet.rules[i].selectorText.toLowerCase() == selector.toLowerCase()) {\n                styleSheet.rules[i].style.cssText = style;\n                return;\n            }\n        }\n\n        styleSheet.addRule(selector, style);\n    } else if(mediaType == \"object\") {\n        var styleSheetLength = (styleSheet.cssRules) ? styleSheet.cssRules.length : 0;\n        for( i = 0; i &lt; styleSheetLength; i++) {\n            if(styleSheet.cssRules[i].selectorText &amp;&amp; styleSheet.cssRules[i].selectorText.toLowerCase() == selector.toLowerCase()) {\n                styleSheet.cssRules[i].style.cssText = style;\n                return;\n            }\n        }\n\n        styleSheet.insertRule(selector + \"{\" + style + \"}\", styleSheetLength);\n    }\n}\n</code></pre>\n\n<p>Function is used as follows.  </p>\n\n<pre><code>createCSSSelector('.mycssclass', 'display:none');\n</code></pre>\n\n<p>Note that even though function name is createClass it actually creates a selector. So dont forget to add .(period) before your class name.\nNo need to mention that you can create other selectors too with this function.<br>\nFound here <a href=\"http://www.happycode.info/create-css-classes-with-javascript/\" rel=\"nofollow\">http://www.happycode.info/create-css-classes-with-javascript/</a></p>\n",
                    "is_accepted": false,
                    "score": 47
                },
                {
                    "body": "<p>As of IE 9. You can now load a text file and set a style.innerHTML property. So essentially you can now load a css file through ajax (and get the callback) and then just set the text inside of a style tag like this.</p>\n\n<p>This works in other browsers, not sure how far back. But as long as you don't need to support IE8 then it would work.</p>\n\n<pre><code>// RESULT: doesn't work in IE8 and below. Works in IE9 and other browsers.\n$(document).ready(function() {\n    // we want to load the css as a text file and append it with a style.\n    $.ajax({\n        url:'myCss.css',\n        success: function(result) {\n            var s = document.createElement('style');\n            s.setAttribute('type', 'text/css');\n            s.innerHTML = result;\n            document.getElementsByTagName(\"head\")[0].appendChild(s);\n        },\n        fail: function() {\n            alert('fail');\n        }\n    })\n});\n</code></pre>\n\n<p>and then you can have it pull an external file like the myCss.css</p>\n\n<pre><code>.myClass { background:#F00; }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There is a light jQuery plugin which allows to generate CSS declarations: <a href=\"https://github.com/kajic/jquery-injectCSS\">jQuery-injectCSS</a></p>\n\n<p>In fact, it uses <a href=\"http://jss-lang.org/\">JSS</a> (CSS described by JSON), but it's quite easy to handle in order to generate dynamic css stylesheets.</p>\n\n<pre><code>$.injectCSS({\n    \"#test\": {\n        height: 123\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<h1>Using google closure:</h1>\n\n<p>you can just use the ccsom module:</p>\n\n<pre><code>goog.require('goog.cssom');\nvar css_node = goog.cssom.addCssText('.cssClass { color: #F00; }');\n</code></pre>\n\n<p>The javascript code attempts to be cross browser when putting the css node into the document head.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Short answer, this is compatible \"on all browsers\" (specifically, IE8/7):</p>\n\n<pre><code>function createClass(name,rules){\n    var style = document.createElement('style');\n    style.type = 'text/css';\n    document.getElementsByTagName('head')[0].appendChild(style);\n    if(!(style.sheet||{}).insertRule) \n        (style.styleSheet || style.sheet).addRule(name, rules);\n    else\n        style.sheet.insertRule(name+\"{\"+rules+\"}\",0);\n}\ncreateClass('.whatever',\"background-color: green;\");\n</code></pre>\n\n<p>And this final bit applies the class to an element:</p>\n\n<pre><code>function applyClass(name,element,doRemove){\n    if(typeof element.valueOf() == \"string\"){\n        element = document.getElementById(element);\n    }\n    if(!element) return;\n    if(doRemove){\n        element.className = element.className.replace(new RegExp(\"\\\\b\"+name+\"\\\\b\",\"g\");\n    }else{\n        element.className = element.className + \" \"+name;\n    }\n}\n</code></pre>\n\n<p>Here's a little test page as well: <a href=\"https://gist.github.com/shadybones/9816763\" rel=\"nofollow\">https://gist.github.com/shadybones/9816763</a></p>\n\n<p>The key little bit is the fact that style elements have a \"styleSheet\"/\"sheet\" property which you can use to to add/remove rules on.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here is Vishwanath's solution slightly rewritten with comments :</p>\n\n<pre><code>function setStyle(cssRules, aSelector, aStyle){\n    for(var i = 0; i &lt; cssRules.length; i++) {\n        if(cssRules[i].selectorText &amp;&amp; cssRules[i].selectorText.toLowerCase() == aSelector.toLowerCase()) {\n            cssRules[i].style.cssText = aStyle;\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction createCSSSelector(selector, style) {\n    var doc = document;\n    var allSS = doc.styleSheets;\n    if(!allSS) return;\n\n    var headElts = doc.getElementsByTagName(\"head\");\n    if(!headElts.length) return;\n\n    var styleSheet, media, iSS = allSS.length; // scope is global in a function\n    /* 1. search for media == \"screen\" */\n    while(iSS){ --iSS;\n        if(allSS[iSS].disabled) continue; /* dont take into account the disabled stylesheets */\n        media = allSS[iSS].media;\n        if(typeof media == \"object\")\n            media = media.mediaText;\n        if(media == \"\" || media=='all' || media.indexOf(\"screen\") != -1){\n            styleSheet = allSS[iSS];\n            iSS = -1;   // indication that media==\"screen\" was found (if not, then iSS==0)\n            break;\n        }\n    }\n\n    /* 2. if not found, create one */\n    if(iSS != -1) {\n        var styleSheetElement = doc.createElement(\"style\");\n        styleSheetElement.type = \"text/css\";\n        headElts[0].appendChild(styleSheetElement);\n        styleSheet = doc.styleSheets[allSS.length]; /* take the new stylesheet to add the selector and the style */\n    }\n\n    /* 3. add the selector and style */\n    switch (typeof styleSheet.media) {\n    case \"string\":\n        if(!setStyle(styleSheet.rules, selector, style));\n            styleSheet.addRule(selector, style);\n        break;\n    case \"object\":\n        if(!setStyle(styleSheet.cssRules, selector, style));\n            styleSheet.insertRule(selector + \"{\" + style + \"}\", styleSheet.cssRules.length);\n        break;\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to create a CSS stylesheet class dynamically in JavaScript and assign it to some HTML elements like - div, table, span, tr, etc and to some controls like asp:Textbox, Dropdownlist and datalist.</p>\n\n<p>Is it possible?</p>\n\n<p>It would be nice with a sample.</p>\n",
            "last_activity_date": 1425482513,
            "question_id": 1720320,
            "score": 103,
            "tags": [
                "javascript",
                "css",
                "stylesheet"
            ],
            "title": "How to dynamically create CSS class in JavaScript and apply?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Webkit based browsers (like Google Chrome or Safari) has built-in developer tools. In Chrome you can open it <code>Menu-&gt;Tools-&gt;Developer Tools</code>. The <code>Network</code> tab allows you to see all information about every request and response:</p>\n\n<p><img src=\"http://i.stack.imgur.com/8w860.png\" alt=\"enter image description here\"></p>\n\n<p>In the bottom of the picture you can see that I've filtered request down to <code>XHR</code> - these are requests made by javascript code.</p>\n\n<p><em>Tip: log is cleared every time you load a page, at the bottom of the picture, the black dot button will preserve log.</em></p>\n\n<p>After analyzing requests and responses you can simulate these requests from your web-crawler and extract valuable data. In many cases it will be easier to get your data than parsing HTML, because that data does not contain presentation logic and is formatted to be accessed by javascript code.</p>\n\n<p>Firefox has similar extension, it is called <a href=\"http://getfirebug.com/\" rel=\"nofollow\">firebug</a>. Some will argue that firebug is even more powerful but I like the simplicity of webkit.</p>\n",
                    "is_accepted": true,
                    "score": 26
                },
                {
                    "body": "<p>Here is a simple example of using scrapy with ajax request.\nLet see the site <a href=\"http://www.rubin-kazan.ru/guestbook.html\">http://www.rubin-kazan.ru/guestbook.html</a> All messages are loaded with an ajax request. My goal is to fetch this messages with all their attributes (author, date, ...).</p>\n\n<p><img src=\"http://i.stack.imgur.com/wDyus.png\" alt=\"enter image description here\"></p>\n\n<p>When I analyse the source code of the page I can't see all these messages because the web page use ajax technology. But I can with Firebug from Mozila Firefox (or an analogy instrument in other browser) to analyse the Http request that generate the messages on the web page.\n<img src=\"http://i.stack.imgur.com/Adgu9.png\" alt=\"enter image description here\"></p>\n\n<p>For this purpose I don't reload all page but only the part of page that contain messages. For this purpose I click an arbitrary number of page on the bottom <img src=\"http://i.stack.imgur.com/CCqK6.png\" alt=\"enter image description here\">and I observe the HTTP request that is responsible about message body\n<img src=\"http://i.stack.imgur.com/oSQMQ.png\" alt=\"enter image description here\"></p>\n\n<p>After finish I analyse the headers of request (I must quote that this url I'll extract from source page from var section, see the code below).\n<img src=\"http://i.stack.imgur.com/L7XCL.png\" alt=\"enter image description here\"></p>\n\n<p>and the form data content of request (the Http method is \"Post\")</p>\n\n<p><img src=\"http://i.stack.imgur.com/t8Cvi.png\" alt=\"enter image description here\"></p>\n\n<p>and the content of response, which is an Json file,</p>\n\n<p><img src=\"http://i.stack.imgur.com/CxKDT.png\" alt=\"enter image description here\"></p>\n\n<p>which present all information I'm looking for.</p>\n\n<p>From now I must implement all this knowledge in scrapy. Let's define the spider for this purpose.</p>\n\n<pre><code>  class spider(BaseSpider):\n      name = 'RubiGuesst'\n      start_urls = ['http://www.rubin-kazan.ru/guestbook.html']\n\n    def parse(self, response):\n      url_list_gb_messages = re.search(r'url_list_gb_messages=\"(.*)\"', response.body).group(1)\n      yield FormRequest('http://www.rubin-kazan.ru' + url_list_gb_messages, callback=self.RubiGuessItem, formdata={'page': str(page + 1), 'uid': ''})\n    def RubiGuessItem(self, response):\n       json_file = response.body\n</code></pre>\n\n<p>In parse function I have the response for first request.\nIn RubiGuessItem I have the json file with all information. </p>\n\n<p>I hope this response will help you. Best regards.</p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>Many times when crawling we run into problems where content that is rendered on the page is generated with Javascript and therefore scrapy is unable to crawl for it (eg. ajax requests, jQuery craziness).</p>\n\n<p>However, if you use Scrapy along with the web testing framework Selenium then we are able to crawl anything displayed in a normal web browser.</p>\n\n<p>Some things to note:</p>\n\n<ul>\n<li><p>You must have the Python version of Selenium RC installed for this to work, and you must have set up Selenium properly.  Also this is just a template crawler.  You could get much crazier and more advanced with things but I just wanted to show the basic idea.  As the code stands now you will be doing two requests for any given url.  One request is made by Scrapy and the other is made by Selenium.  I am sure there are ways around this so that you could possibly just make Selenium do the one and only request but I did not bother to implement that and by doing two requests you get to crawl the page with Scrapy too.</p></li>\n<li><p>This is quite powerful because now you have the entire rendered DOM available for you to crawl and you can still use all the nice crawling features in Scrapy.  This will make for slower crawling of course but depending on how much you need the rendered DOM it might be worth the wait.</p>\n\n<pre><code>from scrapy.contrib.spiders import CrawlSpider, Rule\nfrom scrapy.contrib.linkextractors.sgml import SgmlLinkExtractor\nfrom scrapy.selector import HtmlXPathSelector\nfrom scrapy.http import Request\n\nfrom selenium import selenium\n\nclass SeleniumSpider(CrawlSpider):\n    name = \"SeleniumSpider\"\n    start_urls = [\"http://www.domain.com\"]\n\n    rules = (\n        Rule(SgmlLinkExtractor(allow=('\\.html', )), callback='parse_page',follow=True),\n    )\n\n    def __init__(self):\n        CrawlSpider.__init__(self)\n        self.verificationErrors = []\n        self.selenium = selenium(\"localhost\", 4444, \"*chrome\", \"http://www.domain.com\")\n        self.selenium.start()\n\n    def __del__(self):\n        self.selenium.stop()\n        print self.verificationErrors\n        CrawlSpider.__del__(self)\n\n    def parse_page(self, response):\n        item = Item()\n\n        hxs = HtmlXPathSelector(response)\n        #Do some XPath selection with Scrapy\n        hxs.select('//div').extract()\n\n        sel = self.selenium\n        sel.open(response.url)\n\n        #Wait for javscript to load in Selenium\n        time.sleep(2.5)\n\n        #Do some crawling of javascript created content with Selenium\n        sel.get_text(\"//div\")\n        yield item\n\n# Snippet imported from snippets.scrapy.org (which no longer works)\n# author: wynbennett\n# date  : Jun 21, 2011\n</code></pre></li>\n</ul>\n\n<p>Reference: <a href=\"http://snipplr.com/view/66998/\">http://snipplr.com/view/66998/</a></p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Another solution would be to implement a download handler or download handler middleware. The following is an example of middleware using selenium with headless phantomjs webdriver:</p>\n\n<pre><code>class JsDownload(object):\n\n@check_spider_middleware\ndef process_request(self, request, spider):\n    driver = webdriver.PhantomJS(executable_path='D:\\phantomjs.exe')\n    driver.get(request.url)\n    return HtmlResponse(request.url, encoding='utf-8', body=driver.page_source.encode('utf-8'))\n</code></pre>\n\n<p>I wanted to ability to tell different spiders which middleware to use so I implemented this wrapper:</p>\n\n<pre><code>def check_spider_middleware(method):\n@functools.wraps(method)\ndef wrapper(self, request, spider):\n    msg = '%%s %s middleware step' % (self.__class__.__name__,)\n    if self.__class__ in spider.middleware:\n        spider.log(msg % 'executing', level=log.DEBUG)\n        return method(self, request, spider)\n    else:\n        spider.log(msg % 'skipping', level=log.DEBUG)\n        return None\n\nreturn wrapper\n</code></pre>\n\n<p>settings.py:</p>\n\n<pre><code>DOWNLOADER_MIDDLEWARES = {'MyProj.middleware.MiddleWareModule.MiddleWareClass': 500}\n</code></pre>\n\n<p>for wrapper to work all spiders must have at minimum:</p>\n\n<pre><code>middleware = set([])\n</code></pre>\n\n<p>to include a middleware:</p>\n\n<pre><code>middleware = set([MyProj.middleware.ModuleName.ClassName])\n</code></pre>\n\n<p>The main advantage to implementing it this way rather than in the spider is that you only end up making one request. In A T's solution for example: The download handler processes the request and then hands off the response to the spider. The spider then makes a brand new request in it's parse_page function -- That's two requests for the same content.</p>\n\n<p>Cheers!</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I handle the ajax request by using Selenium and the Firefox web driver. It is not that fast if you need the crawler as a daemon, but much better than any manual solution. I wrote a short tutorial here for reference: <a href=\"http://www.6020peaks.com/2014/12/how-to-scrape-hidden-web-data-with-python/\" rel=\"nofollow\">http://www.6020peaks.com/2014/12/how-to-scrape-hidden-web-data-with-python/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have recently been learning Python and am dipping my hand into building a web-scraper.  It's nothing fancy at all; its only purpose is to get the data off of a betting website and have this data put into Excel.</p>\n\n<p>Most of the issues are solvable and I'm having a good little mess around. However I'm hitting a massive hurdle over one issue. If a site loads a table of horses and lists current betting prices this information is not in any source file. The clue is that this data is live sometimes, with the numbers being updated obviously from some remote server. The HTML on my PC simply has a hole where their servers are pushing through all the interesting data that I need.</p>\n\n<p>Now my experience with dynamic web content is low, so this thing is something I'm having trouble getting my head around. </p>\n\n<p>I think Java or Javascript is a key, this pops up often. </p>\n\n<p>The scraper is simply a odds comparison engine.  Some sites have APIs but I need this for those that don't. I'm using the scrapy library with Python 2.7</p>\n\n<p>I do apologize if this question is too open-ended. In short, my question is: how can scrapy be used to scrape this dynamic data so that I can use it?  So that I can scrape this betting odds data in real-time?</p>\n\n<p>Cheers people :)</p>\n",
            "last_activity_date": 1423836676,
            "question_id": 8550114,
            "score": 34,
            "tags": [
                "javascript",
                "python",
                "ajax",
                "screen-scraping",
                "scrapy"
            ],
            "title": "Can scrapy be used to scrape dynamic content from websites that are using AJAX?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>The only way I can think of doing this is by doing something like alert('you have a new message') when the message is received. This will flash the taskbar if the window is minimized, but it will also open a dialog box, which you may not want.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Why not take the approach that GMail uses and show the number of messages in the page title?</p>\n\n<p>Sometimes users don't want to be distracted when a new message arrives.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<blockquote>\n  <p><i>These users do want to be distracted when a new message arrives.</i></p>\n</blockquote>\n\n<p>It sounds like you're writing an app for an internal company project. </p>\n\n<p>You might want to investigate writing a small windows app in .net which adds a notify icon and can then do fancy popups or balloon popups or whatever, when they get new messages.</p>\n\n<p>This isn't overly hard and I'm sure if you ask SO 'how do I show a tray icon' and 'how do I do pop up notifications' you'll get some great answers :-)</p>\n\n<p>For the record, I'm pretty sure that (other than using an alert/prompt dialog box) you can't flash the taskbar in JS, as this is heavily windows specific, and JS really doesn't work like that. You may be able to use some IE-specific windows activex controls, but then you inflict IE upon your poor users. Don't do that :-(</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>you could change the title of the web page with each new message to alert the user. I did this for a browser chat client and most users thought it worked well enough. </p>\n\n<pre><code>document.title = \"[user] hello world\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>My \"user interface\" response is: Are you sure <em>your users</em> want their browsers flashing, or do <em>you think</em> that's what they want? If I were the one using your software, I know I'd be annoyed if these alerts happened very often and got in my way.</p>\n\n<p>If you're sure you want to do it this way, use a javascript alert box. That's what Google Calendar does for event reminders, and they probably put some thought into it.</p>\n\n<p>A web page really isn't the best medium for need-to-know alerts. If you're designing something along the lines of \"ZOMG, the servers are down!\" alerts, automated e-mails or SMS messages to the right people might do the trick.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You may want to try window.focus() - but it may be annoying if the screen switches around</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>this won't make the taskbar button flash in changing colours, but the title will blink on and off until they move the mouse. This should work cross platform, and even if they just have it in a different tab.</p>\n\n<pre><code>newExcitingAlerts = (function () {\n  var oldTitle = document.title;\n  var msg = \"New!\";\n  var timeoutId;\n  var blink = function() { document.title = document.title == msg ? ' ' : msg; };\n  var clear = function() {\n    clearInterval(timeoutId);\n    document.title = oldTitle;\n    window.onmousemove = null;\n    timeoutId = null;\n  };\n  return function () {\n    if (!timeoutId) {\n      timeoutId = setInterval(blink, 1000);\n      window.onmousemove = clear;\n    }\n  };\n}());\n</code></pre>\n\n<hr>\n\n<p><em>Update</em>: You may want to look at using <a href=\"http://www.paulund.co.uk/html5-notifications\" rel=\"nofollow\">HTML5 notifications</a>.</p>\n",
                    "is_accepted": true,
                    "score": 67
                },
                {
                    "body": "<p>Supposedly you can do this on windows with the growl for windows javascript API:</p>\n\n<p><a href=\"http://ajaxian.com/archives/growls-for-windows-and-a-web-notification-api\" rel=\"nofollow\">http://ajaxian.com/archives/growls-for-windows-and-a-web-notification-api</a></p>\n\n<p>Your users will have to install growl though.</p>\n\n<p>Eventually this is going to be part of google gears, in the form of the NotificationAPI:</p>\n\n<p><a href=\"http://code.google.com/p/gears/wiki/NotificationAPI\" rel=\"nofollow\">http://code.google.com/p/gears/wiki/NotificationAPI</a></p>\n\n<p>So I would recommend using the growl approach for now, falling back to window title updates if possible, and already engineering in attempts to use the Gears Notification API, for when it eventually becomes available.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>AFAIK, there is no good way to do this with consistency. I was writing an IE only web-based IM client. We ended up using window.focus(), which works most of the time. Sometimes it will actually cause the window to steal focus from the foreground app, which can be really annoying.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've made a <a href=\"http://heyman.info/jquery-title-alert/\">jQuery plugin</a> for the purpose of blinking notification messages in the browser title bar. You can specify different options like blinking interval, duration, if the blinking should stop when the window/tab gets focused, etc. The plugin works in Firefox, Chrome, Safari, IE6, IE7 and IE8.</p>\n\n<p>Here is an example on how to use it:</p>\n\n<pre><code>$.titleAlert(\"New mail!\", {\n    requireBlur:true,\n    stopOnFocus:true,\n    interval:600\n});\n</code></pre>\n\n<p>If you're not using jQuery, you might still want to look at the <a href=\"http://github.com/heyman/jquery-titlealert\">source code</a> (there are a few quirky bugs and edge cases that you need to work around when doing title blinking if you want to fully support all major browsers).</p>\n",
                    "is_accepted": false,
                    "score": 44
                }
            ],
            "body": "<p>How do I make a user's browser blink/flash/highlight in the task bar using JavaScript? For example, if I make an AJAX request every 10 seconds to see if the user has any new messages on the server, I want the user to know it right away, even if he is using another application at the time.</p>\n\n<p><em>Edit: These users do want to be distracted when a new message arrives.</em></p>\n",
            "last_activity_date": 1419387586,
            "question_id": 37122,
            "score": 81,
            "tags": [
                "javascript",
                "browser"
            ],
            "title": "Make Browser Window Blink in Task Bar"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p><a href=\"http://www.google.com/search?q=JavaScript%2BAES\">Googling \"JavaScript AES\"</a> has found several examples. The first one that popped up is designed to explain the algorithm as well as provide a solution:</p>\n\n<p><a href=\"http://www.movable-type.co.uk/scripts/aes.html\">Movable Type Scripts: AES</a></p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p><a href=\"http://www.movable-type.co.uk/scripts/aes.html\" rel=\"nofollow\">http://www.movable-type.co.uk/scripts/aes.html</a> library may be of some help.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>JSAES is a powerful implementation of AES in JavaScript.\n<a href=\"http://point-at-infinity.org/jsaes/\">http://point-at-infinity.org/jsaes/</a></p>\n",
                    "is_accepted": true,
                    "score": 37
                },
                {
                    "body": "<p>Here's <a href=\"http://cheeso.members.winisp.net/AES-Encryption.htm\">a demonstration page</a> that uses slowAES. </p>\n\n<p><a href=\"http://code.google.com/p/slowaes\">slowAES</a> was easy to use. Logically designed.  Reasonable OO packaging.  Supports knobs and levers like IV and Encryption mode.  Good compatibility with .NET/C#.  The name is tongue-in-cheek; it's called \"<strong>slow</strong> AES\" because it's not implemented in C++.  But in my tests it was not impractically slow.</p>\n\n<p>It lacks an ECB mode. Also lacks a CTR mode, although you could build one pretty easily given an ECB mode, I guess.</p>\n\n<p>It is solely focused on encryption. A nice complementary class that does <a href=\"http://www.ietf.org/rfc/rfc2898.txt\">RFC2898</a>-compliant password-based key derivation, in Javascript, is <a href=\"http://anandam.name/pbkdf2/\">available from Anandam</a>.  This pair of libraries works well with the analogous .NET classes.  Good interop. Though, in contrast to SlowAES, the Javascript PBKDF2 is noticeably slower than the <a href=\"http://msdn.microsoft.com/en-us/library/system.security.cryptography.rfc2898derivebytes.aspx\">Rfc2898DeriveBytes</a> class when generating keys.  </p>\n\n<p>It's not surprising that technically there is good interop, but the key point for me was the model adopted by SlowAES is familiar and easy to use. I found some of the other Javascript libraries for AES to be hard to understand and use.  For example, in some of them I couldn't find the place to set the IV, or the mode (CBC, ECB, etc).  Things were not where I expected them to be.   SlowAES was not like that. The properties were right where I expected them to be. It was easy for me to pick up, having been familiar with the Java and .NET crypto programming models.</p>\n\n<p>Anandam's PBKDF2 was not quite on that level. It supported only a single call to DeriveBytes function, so if you need to derive both a key and an IV from a password, this library won't work, unchanged.  Some slight modification, and it is working just fine for that purpose.  </p>\n\n<p><strong>EDIT</strong>: I put together <a href=\"http://cheeso.members.winisp.net/srcview.aspx?dir=AES-example\">an example</a> of packaging <a href=\"http://code.google.com/p/slowaes\">SlowAES</a> and a modified version of Anandam's <a href=\"http://anandam.name/pbkdf2/\">PBKDF2</a> into Windows Script Components.  Using this AES with a password-derived key shows good interop with the .NET RijndaelManaged class. </p>\n\n<p><strong>EDIT2</strong>: <a href=\"http://cheeso.members.winisp.net/AES-Encryption.htm\">the demo page</a> shows how to use this AES encryption from a web page.  Using the same inputs (iv, key, mode, etc) supported in .NET gives you good interop with the .NET Rijndael class. You can do a \"view source\" to get the javascript for that page.</p>\n\n<p><strong>EDIT3</strong><br>\na late addition: <a href=\"http://www.matasano.com/articles/javascript-cryptography/\">Javascript Cryptography considered harmful.</a> Worth the read.</p>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>In my searches for AES encryption i found this from some Standford students.  Claims to be fastest out there. Supports CCM, OCB, GCM and Block encryption.\n<a href=\"http://crypto.stanford.edu/sjcl/\" rel=\"nofollow\">http://crypto.stanford.edu/sjcl/</a></p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>Recently I had the need to perform some encryption/decryption interoperability between javascript and python.</p>\n\n<p>Specifically... </p>\n\n<p>1) Using AES to encrypt in javascript and decrypt in python (Google App Engine)\n2) Using RSA to encrypt in javascript and decrypt in python (Google App Engine)\n3) Using pycrypto</p>\n\n<p>I found lots and lots of different versions of RSA and AES floating around the web and \nthey were all different in their approach but I did not find a good example of end to end javascript and python interoperability.</p>\n\n<p>Eventually I managed to cobble together something that suited my needs after a lot of trial and error.</p>\n\n<p>Anyhow I knocked up an example of a js/webapp talking to a google app engine hosted python server that uses AES and public key and private key RSA stuff.</p>\n\n<p>I though I'd include it here by link in case it will be of some use to others who need to accomplish the same thing.</p>\n\n<p><a href=\"http://www.ipowow.com/files/aesrsademo.tar.gz\">http://www.ipowow.com/files/aesrsademo.tar.gz</a></p>\n\n<p>and see <strong>demo</strong> at rsa-aes-demo DOT appspot DOT com</p>\n\n<p>edit: look at the browser console output and also view source to get some hints and useful messages as to what's going on in the <strong>demo</strong></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p><a href=\"http://www.movable-type.co.uk/scripts/aes.html\" rel=\"nofollow\">http://www.movable-type.co.uk/scripts/aes.html</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you are trying to use javascript to avoid using SSL, think again. There are many half-way measures, but <strong>only</strong> SSL provides secure communication. Javascript encryption libraries can help against a certain set of attacks, but not a true man-in-the-middle attack.</p>\n\n<p>If you are looking for SSL for google app engine on a custom domain, take a look at <a href=\"http://wwwizer.com/\" rel=\"nofollow\">wwwizer.com</a>.</p>\n\n<p>The following post explains how to create attempt secure communication with javascript and how to get it wrong:\n<a href=\"http://stackoverflow.com/questions/5145147/use-javascript-encryption-module-instead-of-ssl-https/9930665#9930665\">Use JavaScript encryption module instead of SSL/HTTPS</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This post is now old, but the <a href=\"http://code.google.com/p/crypto-js/\" rel=\"nofollow\">crypto-js</a>, may be now the most complete javascript encryption library.</p>\n\n<p><a href=\"http://code.google.com/p/crypto-js/\" rel=\"nofollow\">CryptoJS</a> is a collection of cryptographic algorithms implemented in JavaScript. \nIt includes the following cyphers: AES-128, AES-192, AES-256, DES, Triple DES, Rabbit, RC4, RC4Drop and hashers: MD5, RIPEMD-160, SHA-1, SHA-256, SHA-512, SHA-3 with 224, 256, 384, or 512 bits. </p>\n\n<p>You may want to look at their <a href=\"http://code.google.com/p/crypto-js/#Quick-start_Guide\" rel=\"nofollow\">Quick-start Guide</a> which is also the reference for the following node.js port.</p>\n\n<p><a href=\"https://npmjs.org/package/node-cryptojs-aes\" rel=\"nofollow\">node-cryptojs-aes</a> is a node.js port of <a href=\"http://code.google.com/p/crypto-js/\" rel=\"nofollow\">crypto-js</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>There is also a Stanford free lib as an alternative to Cryptojs</p>\n\n<p><a href=\"http://crypto.stanford.edu/sjcl/\" rel=\"nofollow\">http://crypto.stanford.edu/sjcl/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Another solution w/AES-256 support: <a href=\"https://github.com/digitalbazaar/forge\" rel=\"nofollow\">https://github.com/digitalbazaar/forge</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is the only solution that worked for me:</p>\n\n<p><a href=\"http://www.hanewin.net/encrypt/aes/aes.htm\" rel=\"nofollow\">http://www.hanewin.net/encrypt/aes/aes.htm</a></p>\n\n<p>It's pretty basic, but simple to use and seems to work well.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Judging from my own experience, <a href=\"https://github.com/vibornoff/asmcrypto.js\" rel=\"nofollow\">asmcrypto.js</a> provides the fastest AES implementation in JavaScript (especially in Firefox since it can fully leverage asm.js there).</p>\n\n<p>From the readme:</p>\n\n<blockquote>\n<pre><code>Chrome/31.0\nSHA256: 51 MiB/s (9 times faster than SJCL and CryptoJS)\nAES-CBC: 47 MiB/s (13 times faster than CryptoJS and 20 times faster than SJCL)\n\nFirefox/26.0\nSHA256: 144 MiB/s (5 times faster than CryptoJS and 20 times faster than SJCL)\nAES-CBC: 81 MiB/s (3 times faster than CryptoJS and 8 times faster than SJCL)\n</code></pre>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Try <a href=\"https://github.com/vibornoff/asmcrypto.js\" rel=\"nofollow\">asmcrypto.js</a> \u2014 it's really fast.</p>\n\n<p>PS: I'm an author and I can answer your questions if any.\nAlso I'd be glad to get some feedback :)</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>Is there a library available for AES 256-bits encryption in Javascript?</p>\n",
            "last_activity_date": 1414519982,
            "question_id": 793812,
            "score": 64,
            "tags": [
                "javascript",
                "encryption",
                "aes"
            ],
            "title": "Javascript AES encryption"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<pre><code>var temp = \"This is a string.\";\n\n// the g in the regular expression says to search the whole string \n// rather than just find the first occurrence\nvar count = (temp.match(/is/g) || []).length;\n\nalert(count);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 273
                },
                {
                    "body": "<pre><code>function countInstances(string, word) {\n   var substrings = string.split(word);\n   return substrings.length - 1;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>You can use <code>match</code> to define such function:</p>\n\n<pre><code>String.prototype.count = function(search) {\n    var m = this.match(new RegExp(search.toString().replace(/(?=[.\\\\+*?[^\\]$(){}\\|])/g, \"\\\\\"), \"g\"));\n    return m ? m.length:0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Just code-golfing the above solution :-)</p>\n\n<p><code>alert(\"This is a string.\" + match(/is/g).length);</code></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>/** Function count the occurrences of substring in a string;\n * @param {String} string   Required. The string;\n * @param {String} subString    Required. The string to search for;\n * @param {Boolean} allowOverlapping    Optional. Default: false;\n */\nfunction occurrences(string, subString, allowOverlapping){\n\n    string+=\"\"; subString+=\"\";\n    if(subString.length&lt;=0) return string.length+1;\n\n    var n=0, pos=0;\n    var step=(allowOverlapping)?(1):(subString.length);\n\n    while(true){\n        pos=string.indexOf(subString,pos);\n        if(pos&gt;=0){ n++; pos+=step; } else break;\n    }\n    return(n);\n}\n</code></pre>\n\n<p>I've made a benchmark test and my function is more then 10 times faster then the regexp match function posted by gumbo.\nIn my test string is 25 chars length. with 2 occurences of the character 'o'.\nI executed 1 000 000 times in Safari.</p>\n\n<p><strong>Safari 5.1</strong></p>\n\n<p>Benchmark> Total time execution: 5617 ms (regexp)</p>\n\n<p>Benchmark> Total time execution: 881 ms  (my function 6.4x faster)</p>\n\n<p><strong>Firefox 4</strong></p>\n\n<p>Benchmark> Total time execution: 8547 ms (Rexexp)</p>\n\n<p>Benchmark> Total time execution:  634 ms  (my function 13.5x faster)</p>\n\n<hr>\n\n<p>Edit: changes I've made</p>\n\n<ul>\n<li><p>cached substring length</p></li>\n<li><p>added type-casting to string.</p></li>\n<li><p>added optional 'allowOverlapping' parameter</p></li>\n<li><p>fixed correct output for \"\" empty substring case.</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 85
                },
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>function countString(str, search){\n    var count=0;\n    var index=str.indexOf(search);\n    while(index!=-1){\n        count++;\n        index=str.indexOf(search,index+1);\n    }\n    return count;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can try this:</p>\n\n<pre><code>var theString = \"This is a string.\";\ntheString.split(\"is\").length - 1;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I think the purpose for regex is much different from <code>indexOf</code>.\n<code>indexOf</code> simply find the occurance of a certain string while in regex you can use wildcards like <code>[A-Z]</code> which means it will find <strong>any</strong> capital character in the word without stating the actual character.</p>\n\n<p>Example:</p>\n\n<pre><code>var index=\"This is a string\".indexOf(\"is\");\nvar length=\"This is a string\".match(/[a-z]/g).length; \n// where [a-z] is a regex wildcard expression thats why its slower\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Super duper old, but I needed to do something like this today and only thought to check SO afterwards. Works pretty fast for me.</p>\n\n<pre><code>String.prototype.count = function(substr,start,overlap) {\n    overlap = overlap || false;\n    start = start || 0;\n\n    var count = 0, \n        offset = overlap ? 1 : substr.length;\n\n    while((start = this.indexOf(substr, start) + offset) !== (offset - 1))\n        ++count;\n    return count;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>My solution:</p>\n\n<pre><code>function countOcurrences(str, value){\n   var regExp = new RegExp(value, \"gi\");\n   return str.match(regExp) ? str.match(regExp).length : 0;  \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Here is the fastest function!</p>\n\n<p>Why is it faster?</p>\n\n<ul>\n<li>Doesn't check char by char (with 1 exception)</li>\n<li>Uses a while and increments 1 var (the char count var) vs. a for loop checking the length and incrementing 2 vars (usually var i and a var with the char count)</li>\n<li>Uses WAY less vars</li>\n<li>Doesn't use regex!</li>\n<li>Uses an (hopefully) highly optimized function</li>\n<li><p>All operations are as combined as they can be, avoiding slowdowns due to multiple operations</p>\n\n<pre><code>String.prototype.timesCharExist=function(c){var t=0,l=0,c=(c+'')[0];while(l=this.indexOf(c,l)+1)++t;return t};\n</code></pre></li>\n</ul>\n\n<p>Here is a slower and more readable version:</p>\n\n<pre><code>    String.prototype.timesCharExist = function ( chr ) {\n        var total = 0, last_location = 0, single_char = ( chr + '' )[0];\n        while( last_location = this.indexOf( single_char, last_location ) + 1 )\n        {\n            total = total + 1;\n        }\n        return total;\n    };\n</code></pre>\n\n<p>This one is slower because of the counter, long var names and misuse of 1 var.</p>\n\n<p>To use it, you simply do this:</p>\n\n<pre><code>    'The char \"a\" only shows up twice'.timesCharExist('a');\n</code></pre>\n\n<p><strong>Edit: (2013/12/16)</strong></p>\n\n<p>DON'T use with Opera 12.16 or older! it will take almost 2.5x more than the regex solution!</p>\n\n<p>On chrome, this solution will take between 14ms and 20ms for 1,000,000 characters.</p>\n\n<p>The regex solution takes 11-14ms for the same amount.</p>\n\n<p>Using a function (outside <code>String.prototype</code>) will take about 10-13ms.</p>\n\n<p>Here is the code used:</p>\n\n<pre><code>    String.prototype.timesCharExist=function(c){var t=0,l=0,c=(c+'')[0];while(l=this.indexOf(c,l)+1)++t;return t};\n\n    var x=Array(100001).join('1234567890');\n\n    console.time('proto');x.timesCharExist('1');console.timeEnd('proto');\n\n    console.time('regex');x.match(/1/g).length;console.timeEnd('regex');\n\n    var timesCharExist=function(x,c){var t=0,l=0,c=(c+'')[0];while(l=x.indexOf(c,l)+1)++t;return t;};\n\n    console.time('func');timesCharExist(x,'1');console.timeEnd('func');\n</code></pre>\n\n<p>The result of all the solutions should be 100,000!</p>\n\n<p>Note: if you want this function to count more than 1 char, change where is <code>c=(c+'')[0]</code> into <code>c=c+''</code></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Try it</p>\n\n<pre><code>&lt;?php \n$str = \"33,33,56,89,56,56\";\necho substr_count($str, '56');\n?&gt;\n\n&lt;script type=\"text/javascript\"&gt;\nvar temp = \"33,33,56,89,56,56\";\nvar count = temp.match(/56/g);  \nalert(count.length);\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The non-regex version:</p>\n\n<pre><code>var string = \"This is a string.\";\nvar count = 0;\nfor(var i=0; i &lt; string.length; i++){\n    if(string.charAt(i) == 'i'){\n        ++count; \n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>       var myString = \"This is a string.\";\n        var foundAtPosition = 0;\n        var Count = 0;\n        while (foundAtPosition != -1)\n        {\n            foundAtPosition = myString.indexOf(\"is\",foundAtPosition);\n            if (foundAtPosition != -1)\n            {\n                Count++;\n                foundAtPosition++;\n            }\n        }\n        document.write(\"There are \" + Count + \" occurrences of the word IS\");\n</code></pre>\n\n<p>Refer :- <a href=\"http://bit.ly/1yT1nAf\" rel=\"nofollow\">count a substring appears in the string</a> for step by step explanation.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>For anyone that finds this thread in the future, note that the accepted answer will not always return the correct value if you generalize it, since it will choke on regex operators like <code>$</code> and <code>.</code>. Here's a better version, that can handle <em>any</em> needle:</p>\n\n<pre><code>function occurrences (haystack, needle) {\n  _needle = needle\n    .replace(/\\[/g, '\\\\[')\n    .replace(/\\]/g, '\\\\]')\n  return (\n    haystack.match(new RegExp('[' + _needle + ']', 'g')) || []\n  ).length\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How can I count the number of times a particular string occurs in another string. For example, this is what I am trying to do in Javascript:</p>\n\n<pre><code>var temp = \"This is a string.\";\nalert(temp.count(\"is\")); //should output '2'\n</code></pre>\n",
            "last_activity_date": 1425163969,
            "question_id": 4009756,
            "score": 138,
            "tags": [
                "javascript",
                "regex",
                "string"
            ],
            "title": "How to count string occurrence in string?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Well, it appears that instead of creating a true multidimensional array, you've created an array of (almost) JavaScript Objects. Try defining your arrays like this -></p>\n\n<pre><code>var array = [ [id,name,value], [id,name,value] ]\n</code></pre>\n\n<p>Hopefully that helps!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>//This will sort your array\nfunction SortByName(a, b){\n  var aName = a.name.toLowerCase();\n  var bName = b.name.toLowerCase(); \n  return ((aName &lt; bName) ? -1 : ((aName &gt; bName) ? 1 : 0));\n}\n\narray.sort(SortByName);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 198
                },
                {
                    "body": "<pre><code>//objects\nvar array = [{id:'12', name:'Smith', value:1},{id:'13', name:'Jones', value:2}];\narray.sort(function(a, b){\n    var a1= a.name, b1= b.name;\n    if(a1== b1) return 0;\n    return a1&gt; b1? 1: -1;\n});\n\n//arrays\nvar array =[ ['12', ,'Smith',1],['13', 'Jones',2]];\narray.sort(function(a, b){\n    var a1= a[1], b1= b[1];\n    if(a1== b1) return 0;\n    return a1&gt; b1? 1: -1;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/sort\">sort method</a> contains an optional argument to pass a custom compare function.</p>\n\n<p>Assuming you wanted an array of arrays:</p>\n\n<pre><code>var arr = [[3, \"Mike\", 20],[5, \"Alex\", 15]];\n\nfunction compareName(a, b)\n{\n\n  if (a[1] &lt; b[1]) return -1;\n  if (a[1] &gt; b[1]) return 1;\n  return 0;\n}\narr.sort(compareName);\n</code></pre>\n\n<p>Otherwise if you wanted an array of objects, you could do:</p>\n\n<pre><code>function compareName(a, b)\n{\n\n  if (a.name &lt; b.name) return -1;\n  if (a.name &gt; b.name) return 1;\n  return 0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<pre><code>var array = [[1, \"grape\", 42], [2, \"fruit\", 9]];\n\narray.sort(function(a, b)\n{\n    // a and b will here be two objects from the array\n    // thus a[1] and b[1]\u00a0will equal the names\n\n    // if they are equal, return 0 (no sorting)\n    if (a[1] == b[1]) { return 0; }\n    if (a[1] &gt; b[1])\n    {\n        // if a should come after b, return 1\n        return 1;\n    }\n    else\n    {\n        // if b should come after a, return -1\n        return -1;\n    }\n});\n</code></pre>\n\n<p>The <code>sort</code> function takes an additional argument, a function that takes two arguments. This function should return <code>-1</code>, <code>0</code> or <code>1</code> depending on which of the two arguments should come first in the sorting. <a href=\"http://www.w3schools.com/jsref/jsref_sort.asp\">More info</a>.</p>\n\n<p>I also fixed a syntax error in your multidimensional array.</p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<pre><code>data.sort(function(a,b) \n{\n   return a.val - b.val;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I have an array of objects:</p>\n\n<pre><code>var array = [(id, name, value),(id, name, value)]; //and so on\n</code></pre>\n\n<p>How do I get the array to be sorted in ascending order of the atribute name <code>(array[i][1])</code>?</p>\n\n<p>I've tried to do this: <code>array[i][1].sort()</code>, but that doesn't work.</p>\n\n<p>Please help me!</p>\n\n<p>Edit: the array can contain more than two objects! It can contain hundreds.</p>\n\n<p><strong>Edit:</strong>\nWhy is this question marked as a duplicate, when it was asked 2 years before the \"duplicated\" question?</p>\n",
            "last_activity_date": 1415346512,
            "question_id": 5503900,
            "score": 105,
            "tags": [
                "javascript",
                "jquery",
                "sorting",
                "multidimensional-array"
            ],
            "title": "How to sort an array of objects with jquery or javascript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>There is no way to change the printer settings, margins, or any other browser setting, temporarily or permanently, from CSS or JavaScript.</p>\n\n<p>While this is unfortunate for your genuine requirement, these restrictions are the reason why 95%+ of the web users keep JavaScript enabled in their browsers. (<a href=\"http://www.w3schools.com/browsers/browsers_stats.asp\">Browser Statistics</a>)</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Since you mentioned \"within their browser\" and firefox, if you are using Internet Explorer, you can disable the page header/footer by temporarily setting of the value in the registry, see <a href=\"http://www.codeproject.com/KB/miscctrl/tips.aspx#tip3.8.2\" rel=\"nofollow\">here</a> for an example. AFAIK I have not heard of a way to do this within other browsers. Both Daniel's and Mickel's answers seems to collide with each other, I guess that there could be a similar setting somewhere in the registry for firefox to remove headers/footers or customize them. Have you checked it out?</p>\n\n<p>Hope this helps and Happy holidays,\nBest regards,\nTom.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The CSS standard enables some advanced formatting you can try:<br>\nThere is a <code>@page</code> directive in css that enables some formatting that applies only to paged media (like paper). See <a href=\"http://www.w3.org/TR/1998/REC-CSS2-19980512/page.html\">http://www.w3.org/TR/1998/REC-CSS2-19980512/page.html</a>.</p>\n\n<p>Downside is that behavior in different browsers is not consistent. Safari still does not support setting printer page margin at all, but all the other major browsers now support it.</p>\n\n<p>With the <code>@page</code> directive, you can specify printer margin of the page (which is not the same as normal css margin of a html element):</p>\n\n<pre><code>&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Print Test&lt;/title&gt;\n    &lt;style type=\"text/css\" media=\"print\"&gt;\n        @page \n        {\n            size: auto;   /* auto is the current printer page size */\n            margin: 0mm;  /* this affects the margin in the printer settings */\n        }\n\n        body \n        {\n            background-color:#FFFFFF; \n            border: solid 1px black ;\n            margin: 0px;  /* the margin on the content before printing */\n       }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div&gt;Top line&lt;/div&gt;\n  &lt;div&gt;Line 2&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>This does not work in <strong>Firefox 3.6</strong>, <strong>IE 7</strong>, <strong>Safari 5.1.7</strong> or <strong>Google Chrome 4.1</strong>.</p>\n\n<p>Setting the @page margin does have effect in <strong>IE 8</strong>, <strong>Opera 10</strong>, <strong>Google Chrome 21</strong> and <strong>Firefox 19</strong>.<br>\nAlthough the page margins are set correctly for your content in these browsers, the behavior is not ideal in trying to solve the hiding of the header/footer.  </p>\n\n<h2>This is how it behaves in different browsers:</h2>\n\n<ul>\n<li><p>In <strong>Internet Explorer</strong>, the margin is actually set to 0mm in the settings for this printing, and if you do Preview you will get 0mm as default, but the user can change it in the preview.<br>\nYou will see that the page content actually are <em>positioned</em> correctly, but the browser print header and footer is shown with non-transparent background, and so effectively hiding the page content at that position. </p></li>\n<li><p>In <strong>Firefox</strong> newer versions, it is <em>positioned</em> correctly, but both the header/footer text and content text is displayed, so it looks like a bad mix of browser header text and your page content.</p></li>\n<li><p>In <strong>Opera</strong>, the page content hides the header when using a non-transparent background in the standard css and the header/footer position conflicts with content. Quite good, but looks strange if margin is set to a small value that causes the header to be partially visible. Also the page margin is not set properly.</p></li>\n<li><p>In <strong>Chrome</strong> newer versions, the browser header and footer is hidden if the @page margin is set so small that the header/footer position conflicts with content. In my opinion, this is exactly how this should behave.</p></li>\n</ul>\n\n<p>So the conclusion is that <strong>Crome</strong> has the best implementation of this in respect to hiding the header/footer. </p>\n",
                    "is_accepted": true,
                    "score": 59
                },
                {
                    "body": "<p>Anthony, </p>\n\n<p>It's unfortunate that so many people didn't understand your question. I have a similar request from a client who wants to have the header, page numbers, and html footer removed. In this case, the client is presenting an HTML page that can double as a formal certificate. The added URL, page, and, header, are irrellevant and lead to a less-than-pleasing final product. In some ways, it just looks cheap. </p>\n\n<p>Media=Print has not been able to disable these browser defaults. The only workaround is to tell the user to click the \"Gear\" button and toggle those items on/off. Seriously, I had no idea I could do that for 20 years (and we think the typical user will have a clue to click the toggle button?).</p>\n\n<p>If CSS supports Media=Print, it should support the ability to control the entire end-user print experience. I appreciate that the browsers provide the added fields, but, why not allow CSS to control the overall print experience-if that is what's desired. An 90%solutution could be 100% with three more fields! A simple: </p>\n\n<pre><code>#BrowserPrintDefaults{display:none} \n</code></pre>\n\n<p>would suffice. </p>\n\n<p>Again, it's not a matter whether or not the end-user wants to print it out or not (maybe your client is very private and doesn't want printed URLs floating around. Or maybe a executive team uses a private collaboration sites?). Glad to defend the end-user, but if somebody is seeking an answer, don't respond saying it's the right of the end-user to show or hide. Sometimes it's the right of the client paying the bills.</p>\n\n<p>So....without hacking the registry or forcing the user to toggle settings in print preview, anyone find an answer?</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>As @Awe had said above, this is the solution, that is confirmed to work in Chrome!!</p>\n\n<p>Just make sure this is INSIDE the header tags:</p>\n\n<pre><code>&lt;head&gt;\n&lt;style type=\"text/css\" media=\"print\"&gt;\n    @page \n    {\n        size: auto;   /* auto is the initial value */\n        margin: 0mm;  /* this affects the margin in the printer settings */\n    }\n\n    body \n    {\n        background-color:#FFFFFF; \n        border: solid 1px black ;\n        margin: 0px;  /* this affects the margin on the content before sending to printer */\n   }\n&lt;/style&gt;\n&lt;/head&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>@page margin:0mm now works in Firefox 19.0a2 (2012-12-07).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In the newest versions of Firefox, you can add a <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=743252\"><code>mozNoMarginBoxes</code></a> attribute to the <code>&lt;html&gt;</code> tag to prevent the URL, page numbers and other things Firefox adds to the page margin from being printed.</p>\n\n<p>It is working in Firefox 29 and onwards. <a href=\"/q/23779105/1419007\" title=\"What does the mozNoMarginBoxes attribute in PDF.js do?\">You can see a screen shot of the difference here</a>, or <a href=\"https://bug743252.bugzilla.mozilla.org/attachment.cgi?id=714383\">see here for a live example.</a></p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>try is coding work 100% to me: \n<strong>FOR</strong> <strong>Landscape:</strong></p>\n\n<pre><code>&lt;head&gt;\n&lt;style type=\"text/css\"&gt;\n\n@page{\n        size: auto A4 landscape;\n        margin: 3mm;\n     }\n\n&lt;/style&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p><strong>FOR</strong> <strong>Portait:</strong></p>\n\n<pre><code>&lt;head&gt;\n&lt;style type=\"text/css\"&gt;\n\n@page{\n       size: auto;\n       margin: 3mm;\n     }\n\n&lt;/style&gt;\n&lt;/head&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have seen this question asked in a couple of different ways on SO and several other websites, but most of them are either too specific or out-of-date. I'm hoping someone can provide a definitive answer here without pandering to speculation.</p>\n\n<p>Is there a way, either with CSS or javascript, to change the default printer settings when someone prints within their browser? And of course by \"prints from their browser\" I mean some form of HTML, not PDF or some other plug-in reliant mime-type.</p>\n\n<p>Please note:</p>\n\n<p>If some browsers offer this and others don't (or if you only know how to do it for some browsers) I welcome browser-specific solutions.</p>\n\n<p>Similarly, if you know of a mainstream browser that has specific restrictions against EVER doing this, that is also helpful, but some fairly up-to-date documentation would be appreciated. (simply saying \"that goes against XYZ's security policy\" isn't very convincing when XYZ has made significant changes in said policy in the last three years).</p>\n\n<p>Finally, when I say \"change default print settings\" I don't mean forever, just for my page, and I am referring specifically to print margins, headers, and footers.</p>\n\n<p>I am very aware that CSS offers the option of changing the page orientation as well as the page margins. One of the many struggles is with Firefox. If I set the page margins to 1 inch, it ADDS this to the half inch it already puts into place.</p>\n\n<p>I very much want to reduce the usage of PDFs on my client's site, but the infringement on presentation (as well as the lack of reliability) are their main concern.</p>\n",
            "last_activity_date": 1425622346,
            "question_id": 1960939,
            "score": 76,
            "tags": [
                "javascript",
                "html",
                "css",
                "browser",
                "printing"
            ],
            "title": "Disabling browser print options (headers, footers, margins) from page?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>The best place for it is just before you need it an no sooner. </p>\n\n<p>Also, depending on your users physical location, using a service like Amazon's S3 service may help users download it from a server physically closer to them than your server.</p>\n\n<p>Is your js script a commonly used lib like jQuery or prototype? if so, there are a number of companies, like google and yahoo, that have tools to provide these files for you on a distributed network.</p>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>The Yahoo! Exceptional Performance team recommend <a href=\"http://developer.yahoo.com/performance/rules.html#js_bottom\">placing scripts at the bottom of your page</a> because of the way browsers download components.</p>\n\n<p>Of course <a href=\"#196708\">Levi's comment</a> \"just before you need it and no sooner\" is really the correct answer, i.e. \"it depends\".</p>\n",
                    "is_accepted": true,
                    "score": 92
                },
                {
                    "body": "<p>I tend to avoid putting Javascript within the HTML pages themselves unless it's absolutely certain it can never be used by another page.  Almost all of my Javascript is therefore stored in JS files which are referenced in the HTML thus:</p>\n\n<pre><code>&lt;script src=\"my_javascript.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>It also makes the separation of code/markup cleaner for me.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>With 100k of Javascript, you should never put it inside the file. Use an external script Javascript file. There's no chance in hell you'll only ever use this amount of code in only one HTML page. Likely you're asking where you should load the Javascript file, for this you've received satisfactory answers already.</p>\n\n<p>But I'd like to point out that commonly, modern browsers accept <strong>gzip</strong>ped Javascript files! Just gzip the <code>x.js</code> file to <code>x.js.gz</code>, and point to that in the <code>src</code> attribute. It doesn't work on the local filesystem, you need a webserver for it to work. But the savings in transferred bytes can be enormous.</p>\n\n<p>I've successfully tested it in Firefox 3, MSIE 7, Opera 9, and Google Chrome. It apparently doesn't work this way in Safari 3.</p>\n\n<p>For more info, see <a href=\"http://joseph.randomnetworks.com/archives/2006/07/13/compressed-javascript/\">this blog post</a>, and another <a href=\"http://schroepl.net/projekte/mod_gzip/browser.htm\">very ancient page</a> that nevertheless is useful because it points out that the webserver can detect whether a browser can accept gzipped Javascript, or not. If your server side can dynamically choose to send the gzipped or the plain text, you can make the page usable in all web browsers.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>The answer is depends how you are using the objects of javascript. As already pointed loading the javascript files at footer rather than header certainly improves the performance but care should be taken that the objects which are used are initialized later than they are loaded at footer. One more way is load the 'js' files placed in folder\nwhich will be available to all the files.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Like others have said, it should most likely go in an external file. I prefer to include such files at the end of the &lt;head /&gt;. This method is more human friendly than machine friendly, but that way I always know where the JS is. It is just not as readable to include script files anywhere else (imho).</p>\n\n<p>I you really need to squeeze out every last ms then you probably should do what Yahoo says.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Using <a href=\"http://stevesouders.com/cuzillion/\" rel=\"nofollow\">cuzillion</a> you can test the affect on page load of different placement of script tags using different methods: inline, external, \"HTML tags\", \"document.write\", \"JS DOM element\", \"iframe\", and \"XHR eval\". See the <a href=\"http://stevesouders.com/cuzillion/help.php\" rel=\"nofollow\">help</a> for an explanation of the differences. It can also test stylesheets, images and iframes.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Putting the javascript at the top would seem neater, but functionally, its better to go after the HTML.  That way, your javascript won't run and try to reference HTML elements before they are loaded.  This sort of problem often only becomes apparent when you load the page over an actual internet connection, especially a slow one.</p>\n\n<p>You could also try to dynamically load the javascript by adding a header element from other javascript code, although that only makes sense if you aren't using all of the code all the time.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>As a rule of thumb, the best place to put <code>&lt;script&gt;</code> tags is the bottom of the page, just before <code>&lt;/body&gt;</code> tag. Something like this:</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;My awesome page&lt;/title&gt;\n\n        &lt;!-- CSS --&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"...\"&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"...\"&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"...\"&gt;\n        &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"...\"&gt;\n\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;!-- Content content content --&gt;\n\n        &lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"...\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"...\"&gt;&lt;/script&gt;\n        &lt;script type=\"text/javascript\" src=\"...\"&gt;&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h1><strong>Why?</strong></h1>\n\n<blockquote>\n  <p>The problem caused by scripts is that they block parallel downloads. The HTTP/1.1 specification suggests that browsers download no more than two components in parallel per hostname. If you serve your images from multiple hostnames, you can get more than two downloads to occur in parallel. While a script is downloading, however, the browser won't start any other downloads, even on different hostnames. <em><a href=\"https://developer.yahoo.com/performance/rules.html\">More...</a></em></p>\n</blockquote>\n\n<h1><strong>CSS</strong></h1>\n\n<p>A little bit off-topic, but... Put stylesheets at the top.</p>\n\n<blockquote>\n  <p>While researching performance at Yahoo!, we discovered that moving stylesheets to the document HEAD makes pages appear to be loading faster. This is because putting stylesheets in the HEAD allows the page to render progressively. <em><a href=\"https://developer.yahoo.com/performance/rules.html\">More...</a></em></p>\n</blockquote>\n\n<h1><strong>Further reading</strong></h1>\n\n<p>Yahoo have released a really cool guide that lists best practices to speed up a website. Definitely worth reading:\n<a href=\"https://developer.yahoo.com/performance/rules.html\">https://developer.yahoo.com/performance/rules.html</a></p>\n",
                    "is_accepted": false,
                    "score": 12
                }
            ],
            "body": "<p>Say I have a fairly hefty javascript <strong>file*</strong>, packed down to roughly 100kb or so, where's the best place to put this in the HTML?</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;!-- here? --&gt;\n    &lt;link rel=\"stylesheet\" href=\"stylez.css\" type=\"text/css\" /&gt;\n    &lt;!-- here? --&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;!-- here? --&gt;\n    &lt;p&gt;All the page content ...&lt;/p&gt;\n    &lt;!-- or here? --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Will there be any functional difference between each of the options?</p>\n\n<p>*that is, it's an external file that would be linked in via <code>&lt;script src=\"...\"&gt;</code>, not pasted into the HTML itself.</p>\n",
            "last_activity_date": 1404913461,
            "question_id": 196702,
            "score": 80,
            "tags": [
                "javascript",
                "html",
                "optimization"
            ],
            "title": "Where to place Javascript in a HTML file?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>The 405 response is a \"Method not allowed\" response. It sounds like your server isn't properly configured to handle CORS preflight requests. You need to do two things:</p>\n\n<p>1) Enable IIS7 to respond to HTTP OPTIONS requests. You are getting the 405 because IIS7 is rejecting the OPTIONS request. I don't know how to do this as I'm not familiar with IIS7, but there are probably others on Stack Overflow who do.</p>\n\n<p>2) Configure your application to respond to CORS preflight requests. You can do this by adding the following two lines underneath the <code>Access-Control-Allow-Origin</code> line in the <code>&lt;customHeaders&gt;</code> section:</p>\n\n<pre><code>&lt;add name=\"Access-Control-Allow-Methods\" value=\"GET,PUT,POST,DELETE\" /&gt;\n&lt;add name=\"Access-Control-Allow-Headers\" value=\"Content-Type\" /&gt;\n</code></pre>\n\n<p>You may have to add other values to the <code>Access-Control-Allow-Headers</code> section based on what headers your request is asking for. Do you have the sample code for making a request?</p>\n\n<p>You can learn more about CORS and CORS preflight here: <a href=\"http://www.html5rocks.com/en/tutorials/cors/\">http://www.html5rocks.com/en/tutorials/cors/</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>It is likely a case of IIS 7 'handling' the HTTP OPTIONS response instead of your application specifying it.  To determine this, in IIS7, </p>\n\n<ol>\n<li><p>Go to your site's Handler Mappings.      </p></li>\n<li><p>Scroll down to 'OPTIONSVerbHandler'.  </p></li>\n<li><p>Change the 'ProtocolSupportModule' to 'IsapiHandler'</p></li>\n<li><p>Set the executable:\n%windir%\\Microsoft.NET\\Framework\\v4.0.30319\\aspnet_isapi.dll</p></li>\n</ol>\n\n<p>Now, your config entries above should kick in when an HTTP OPTIONS verb is sent.</p>\n\n<p>Alternatively you can respond to the HTTP OPTIONS verb in your BeginRequest method.</p>\n\n<pre><code>    protected void Application_BeginRequest(object sender,EventArgs e)\n    {\n        HttpContext.Current.Response.AddHeader(\"Access-Control-Allow-Origin\", \"*\");\n\n        if(HttpContext.Current.Request.HttpMethod == \"OPTIONS\")\n        {\n            //These headers are handling the \"pre-flight\" OPTIONS call sent by the browser\n            HttpContext.Current.Response.AddHeader(\"Access-Control-Allow-Methods\", \"GET, POST, PUT, DELETE\");\n            HttpContext.Current.Response.AddHeader(\"Access-Control-Allow-Headers\", \"Content-Type, Accept\");\n            HttpContext.Current.Response.AddHeader(\"Access-Control-Max-Age\", \"1728000\" );\n            HttpContext.Current.Response.End();\n        }\n\n    }\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 37
                },
                {
                    "body": "<p>I found the information found at <a href=\"http://help.infragistics.com/Help/NetAdvantage/jQuery/2013.1/CLR4.0/html/igOlapXmlaDataSource_Configuring_IIS_for_Cross_Domain_OLAP_Data.html\">http://help.infragistics.com/Help/NetAdvantage/jQuery/2013.1/CLR4.0/html/igOlapXmlaDataSource_Configuring_IIS_for_Cross_Domain_OLAP_Data.html</a> to be very helpful in setting up HTTP OPTIONS for a WCF service in IIS 7.</p>\n\n<p>I added the following to my web.config and then moved the OPTIONSVerbHandler in the IIS 7 'hander mappings' list to the top of the list. I also gave the OPTIONSVerbHander read access by double clicking the hander in the handler mappings section then on 'Request Restrictions' and then clicking on the access tab.</p>\n\n<p>Unfortunately I quickly found that IE doesn't seem to support adding headers to their <a href=\"http://msdn.microsoft.com/en-us/library/ie/cc288060%28v=vs.85%29.aspx\">XDomainRequest</a> object (setting the Content-Type to text/xml and adding a SOAPAction header).</p>\n\n<p>Just wanted to share this as I spent the better part of a day looking for how to handle it.</p>\n\n<pre><code>&lt;system.webServer&gt;\n    &lt;httpProtocol&gt;\n        &lt;customHeaders&gt;\n            &lt;add name=\"Access-Control-Allow-Origin\" value=\"*\" /&gt;\n            &lt;add name=\"Access-Control-Allow-Methods\" value=\"GET,POST,OPTIONS\" /&gt;\n            &lt;add name=\"Access-Control-Allow-Headers\" value=\"Content-Type, soapaction\" /&gt;\n        &lt;/customHeaders&gt;\n    &lt;/httpProtocol&gt;\n&lt;/system.webServer&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I can't post comments so I have to put this in a separate answer, but it's related to the accepted answer by Shah.</p>\n\n<p>I initially followed Shahs answer (thank you!) by re configuring the OPTIONSVerbHandler in IIS, but my settings were restored when I redeployed my application.</p>\n\n<p>I ended up removing the OPTIONSVerbHandler in my Web.config instead.</p>\n\n<pre><code>&lt;handlers&gt;\n    &lt;remove name=\"OPTIONSVerbHandler\"/&gt;\n&lt;/handlers&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Elaborating from DavidG response which is really near of what is required for a basic solution:</p>\n\n<ul>\n<li><p>First, configure the OPTIONSVerbHandler to execute before .Net handlers. </p>\n\n<ol>\n<li>In IIS console, select \"Handler Mappings\" (either on server level or site level; beware that on site level it will redefine all the handlers for your site and ignore any change done on server level after that; and of course on server level, this could break other sites if they need their own handling of options verb). </li>\n<li>In Action pane, select \"View ordered list...\" Seek OPTIONSVerbHandler, and move it up (lots of clicks...).</li>\n</ol>\n\n<p>You can also do this in web.config by redefining all handlers under <code>&lt;system.webServer&gt;&lt;handlers&gt;</code> (<code>&lt;clear&gt;</code> then <code>&lt;add ...&gt;</code> them back, this is what does the IIS console for you) (By the way, there is no need to ask for \"read\" permission on this handler.)</p></li>\n<li><p>Second, configure custom http headers for your cors needs, such as:</p>\n\n<pre><code>&lt;system.webServer&gt;\n  &lt;httpProtocol&gt;\n    &lt;customHeaders&gt;\n      &lt;add name=\"Access-Control-Allow-Origin\" value=\"*\"/&gt;\n      &lt;add name=\"Access-Control-Allow-Headers\" value=\"Content-Type\"/&gt;\n      &lt;add name=\"Access-Control-Allow-Methods\" value=\"POST,GET,OPTIONS\"/&gt;\n    &lt;/customHeaders&gt;\n  &lt;/httpProtocol&gt;\n&lt;/system.webServer&gt;\n</code></pre>\n\n<p>You can also do this in IIS console.</p></li>\n</ul>\n\n<p>This is a basic solution since it will send cors headers even on request which does not requires it. But with WCF, it looks like being the simpliest one.</p>\n\n<p>With MVC or webapi, we could instead handle OPTIONS verb and cors headers by code (either \"manually\" or with built-in support available in latest version of webapi).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>With ASP.net Web API 2 install Microsoft ASP.NET Cross Origin support via nuget.</p>\n\n<p><a href=\"http://enable-cors.org/server_aspnet.html\" rel=\"nofollow\">http://enable-cors.org/server_aspnet.html</a></p>\n\n<pre><code>public static void Register(HttpConfiguration config)\n{\n var enableCorsAttribute = new EnableCorsAttribute(\"http://mydomain.com\",\n                                                   \"Origin, Content-Type, Accept\",\n                                                   \"GET, PUT, POST, DELETE, OPTIONS\");\n        config.EnableCors(enableCorsAttribute);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I recently ran into with posting Javascript requests to another domain.  By default XHR  posting to other domains is not allowed.</p>\n\n<p>Following the instructions from <a href=\"http://enable-cors.org/\">http://enable-cors.org/</a>, I enabled this on the other domain.</p>\n\n<pre><code>&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n&lt;configuration&gt;\n &lt;system.webServer&gt;\n  &lt;httpProtocol&gt;\n    &lt;customHeaders&gt;\n      &lt;add name=\"Access-Control-Allow-Origin\" value=\"*\" /&gt;\n      &lt;add name=\"Access-Control-Allow-Methods\" value=\"GET,PUT,POST,DELETE,OPTIONS\" /&gt;\n      &lt;add name=\"Access-Control-Allow-Headers\" value=\"Content-Type\" /&gt;\n    &lt;/customHeaders&gt;\n  &lt;/httpProtocol&gt;\n &lt;/system.webServer&gt;\n&lt;/configuration&gt;\n</code></pre>\n\n<p><img src=\"http://i.stack.imgur.com/xmx7u.png\" alt=\"enter image description here\"></p>\n\n<p>Everything works fine now, however it is still return a 405 response before sending back the working 200 response.</p>\n\n<pre><code>Request URL:http://testapi.nottherealsite.com/api/Reporting/RunReport\nRequest Method:OPTIONS\nStatus Code:405 Method Not Allowed\nRequest Headersview source\nAccept:*/*\nAccept-Charset:ISO-8859-1,utf-8;q=0.7,*;q=0.3\nAccept-Encoding:gzip,deflate,sdch\nAccept-Language:en-GB,en-US;q=0.8,en;q=0.6\nAccess-Control-Request-Headers:origin, content-type, accept\nAccess-Control-Request-Method:POST\nConnection:keep-alive\nHost:testapi.nottherealsite.com\nOrigin:http://test.nottherealsite.com\nReferer:http://test.nottherealsite.com/Reporting\nUser-Agent:Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.89 Safari/537.1\nResponse Headersview source\nAccess-Control-Allow-Headers:Content-Type\nAccess-Control-Allow-Methods:GET,PUT,POST,DELETE,OPTIONS\nAccess-Control-Allow-Origin:*\nAllow:POST\nCache-Control:private\nContent-Length:1565\nContent-Type:text/html; charset=utf-8\nDate:Tue, 18 Sep 2012 14:26:06 GMT\nServer:Microsoft-IIS/7.5\nX-AspNet-Version:4.0.30319\nX-Powered-By:ASP.NET\n</code></pre>\n\n<p>Update: 3/02/2014</p>\n\n<p>There is a recently updated article in MSDN magazine. Detailing CORS Support in ASP.NET Web API 2.</p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/magazine/dn532203.aspx\">http://msdn.microsoft.com/en-us/magazine/dn532203.aspx</a></p>\n",
            "last_activity_date": 1408786570,
            "question_id": 12458444,
            "score": 37,
            "tags": [
                "javascript",
                "iis-7",
                "xmlhttprequest",
                "cors"
            ],
            "title": "enabling cross-origin resource sharing on IIS7"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You could set an interval that runs every 500 ms or so, along the lines of the following:</p>\n\n<pre><code>var curOffset, oldOffset;\noldOffset = $(window).scrollTop();\nvar $el = $('.slides_layover'); // cache jquery ref\nsetInterval(function() {\n  curOffset = $(window).scrollTop();\n  if(curOffset != oldOffset) {\n    // they're scrolling, remove your class here if it exists\n    if($el.hasClass('showing_layover')) $el.removeClass('showing_layover');\n  } else {\n    // they've stopped, add the class if it doesn't exist\n    if(!$el.hasClass('showing_layover')) $el.addClass('showing_layover');\n  }\n  oldOffset = curOffset;\n}, 500);\n</code></pre>\n\n<p>I haven't tested this code, but the principle should work.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<h1>Using jQuery throttle / debounce</h1>\n\n<p><a href=\"http://benalman.com/projects/jquery-throttle-debounce-plugin/\" rel=\"nofollow\">jQuery debounce</a> is a nice one for problems like this. <a href=\"http://jsfiddle.net/hYsRh/4/\" rel=\"nofollow\">jsFidlle</a></p>\n\n<pre><code>$(window).scroll($.debounce( 250, true, function(){\n    $('#scrollMsg').html('SCROLLING!');\n}));\n$(window).scroll($.debounce( 250, function(){\n    $('#scrollMsg').html('DONE!');\n}));\n</code></pre>\n\n<p>The second parameter is the \"at_begin\" flag. Here I've shown how to execute code both at \"scroll start\" and \"scroll finish\".</p>\n\n<h1>Using Lodash</h1>\n\n<p>As suggested by Barry P, <a href=\"http://jsfiddle.net/barrypeterson/zzghqk62/\" rel=\"nofollow\">jsFiddle</a>, <a href=\"http://underscorejs.org/\" rel=\"nofollow\">underscore</a> or <a href=\"https://lodash.com/\" rel=\"nofollow\">lodash</a> also have a debounce, each with slightly different apis.</p>\n\n<pre><code>$(window).scroll(_.debounce(function(){\n    $('#scrollMsg').html('SCROLLING!');\n}, 150, { 'leading': true, 'trailing': false }));\n\n$(window).scroll(_.debounce(function(){\n    $('#scrollMsg').html('STOPPED!');\n}, 150));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>Rob W suggected I check out another post here on stack that was essentially a similar post to my original one. Which reading through that I found a link to a site:</p>\n\n<p><a href=\"http://james.padolsey.com/javascript/special-scroll-events-for-jquery/\" rel=\"nofollow\">http://james.padolsey.com/javascript/special-scroll-events-for-jquery/</a></p>\n\n<p>This actually ended up helping solve my problem very nicely after a little tweaking for my own needs, but over all helped get a lot of the guff out of the way and saved me about 4 hours of figuring it out on my own.</p>\n\n<p>Seeing as this post seems to have some merit, I figured I would come back and provide the code found originally on the link mentioned, just in case the author ever decided to go a different direction with the site and ended up taking down the link.</p>\n\n<pre><code>(function(){\n\n    var special = jQuery.event.special,\n        uid1 = 'D' + (+new Date()),\n        uid2 = 'D' + (+new Date() + 1);\n\n    special.scrollstart = {\n        setup: function() {\n\n            var timer,\n                handler =  function(evt) {\n\n                    var _self = this,\n                        _args = arguments;\n\n                    if (timer) {\n                        clearTimeout(timer);\n                    } else {\n                        evt.type = 'scrollstart';\n                        jQuery.event.handle.apply(_self, _args);\n                    }\n\n                    timer = setTimeout( function(){\n                        timer = null;\n                    }, special.scrollstop.latency);\n\n                };\n\n            jQuery(this).bind('scroll', handler).data(uid1, handler);\n\n        },\n        teardown: function(){\n            jQuery(this).unbind( 'scroll', jQuery(this).data(uid1) );\n        }\n    };\n\n    special.scrollstop = {\n        latency: 300,\n        setup: function() {\n\n            var timer,\n                    handler = function(evt) {\n\n                    var _self = this,\n                        _args = arguments;\n\n                    if (timer) {\n                        clearTimeout(timer);\n                    }\n\n                    timer = setTimeout( function(){\n\n                        timer = null;\n                        evt.type = 'scrollstop';\n                        jQuery.event.handle.apply(_self, _args);\n\n                    }, special.scrollstop.latency);\n\n                };\n\n            jQuery(this).bind('scroll', handler).data(uid2, handler);\n\n        },\n        teardown: function() {\n            jQuery(this).unbind( 'scroll', jQuery(this).data(uid2) );\n        }\n    };\n\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>$(window).scroll(function() {\n    clearTimeout($.data(this, 'scrollTimer'));\n    $.data(this, 'scrollTimer', setTimeout(function() {\n        // do something\n        console.log(\"Haven't scrolled in 250ms!\");\n    }, 250));\n});\n</code></pre>\n\n<p><strong>Update</strong></p>\n\n<p>I wrote an <em>extension</em> to enhance jQuery's default <code>on</code>-event-handler. It attaches an event handler function for one or more events to the selected elements and calls the handler function if the event was not triggered for a given interval. This is useful if you want to fire a callback only after a delay, like the resize event, or such.</p>\n\n<p>It is important to check the github-repo for updates!</p>\n\n<p><strong><a href=\"https://github.com/yckart/jquery.unevent.js\">https://github.com/yckart/jquery.unevent.js</a></strong></p>\n\n<pre><code>;(function ($) {\n    var on = $.fn.on, timer;\n    $.fn.on = function () {\n        var args = Array.apply(null, arguments);\n        var last = args[args.length - 1];\n\n        if (isNaN(last) || (last === 1 &amp;&amp; args.pop())) return on.apply(this, args);\n\n        var delay = args.pop();\n        var fn = args.pop();\n\n        args.push(function () {\n            var self = this, params = arguments;\n            clearTimeout(timer);\n            timer = setTimeout(function () {\n                fn.apply(self, params);\n            }, delay);\n        });\n\n        return on.apply(this, args);\n    };\n}(this.jQuery || this.Zepto));\n</code></pre>\n\n<p>Use it like any other <code>on</code> or <code>bind</code>-event handler, except that you can pass an extra parameter as a last:</p>\n\n<pre><code>$(window).on('scroll', function(e) {\n    console.log(e.type + '-event was 250ms not triggered');\n}, 250);\n</code></pre>\n\n<p><a href=\"http://yckart.github.com/jquery.unevent.js/\">http://yckart.github.com/jquery.unevent.js/</a></p>\n\n<p>(this demo uses <code>resize</code> instead of <code>scroll</code>, but who cares?!)</p>\n",
                    "is_accepted": true,
                    "score": 82
                },
                {
                    "body": "<pre><code>function scrolled() {\n    //do by scroll start\n    $(this).off('scroll')[0].setTimeout(function(){\n        //do by scroll end\n        $(this).on('scroll',scrolled);\n    }, 500)\n}\n$(window).on('scroll',scrolled);\n</code></pre>\n\n<p>very small Version with start and end ability</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I agreed with some of the comments above that listening for a timeout wasn't accurate enough as that will trigger when you stop moving the scroll bar for long enough instead of when you stop scrolling. I think a better solution is to listen for the user letting go of the mouse (mouseup) as soon as they start scrolling:</p>\n\n<pre><code>$(window).scroll(function(){\n    $('#scrollMsg').html('SCROLLING!');\n    var stopListener = $(window).mouseup(function(){ // listen to mouse up\n        $('#scrollMsg').html('STOPPED SCROLLING!');\n        stopListner(); // Stop listening to mouse up after heard for the first time \n    });\n});\n</code></pre>\n\n<p>and an example of it working can be seen in <a href=\"http://jsfiddle.net/TheoI/gFJwG/1/\" rel=\"nofollow\">this JSFiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Ok this is something that I've used before.\nBasically you look a hold a ref to the last <code>scrollTop()</code>. \nOnce your timeout clears, you check the current <code>scrollTop()</code> and if they are the same, you are done scrolling.</p>\n\n<pre><code>$(window).scroll((e) -&gt;\n  clearTimeout(scrollTimer)\n  $('header').addClass('hidden')\n\n  scrollTimer = setTimeout((() -&gt;\n    if $(this).scrollTop() is currentScrollTop\n      $('header').removeClass('hidden') \n  ), animationDuration)\n\n  currentScrollTop = $(this).scrollTop()\n)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It works for chrome and firefox, maybe for some other browsers:</p>\n\n<pre><code> var scrolling;\n $(document).scroll(function() {\n    scrolling = true;\n }\n\n $(document).mouseup(function() {\n    if (scrolling) {\n      //do something\n      scrolling = false;\n    }\n });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>please check below link it may help.\n<a href=\"http://www.w3schools.com/jquerymobile/event_scrollstop.asp\" rel=\"nofollow\">http://www.w3schools.com/jquerymobile/event_scrollstop.asp</a> $(document).on(\"scrollstop\",function(){\n  alert(\"Stopped scrolling!\");\n});</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>Ok with this.. </p>\n\n<pre><code>$(window).scroll(function()\n{\n    $('.slides_layover').removeClass('showing_layover');\n    $('#slides_effect').show();\n});\n</code></pre>\n\n<p>I can tell when someone is scrolling from what i understand. So with that I am trying to figure out how to catch when someone has stopped. From the above example you can see I am removing a class from a set of elements while the scrolling is occurring. However, I want to put that class back on when the user stops scrolling.</p>\n\n<p>The reason for this is I am intent on having a layover show while the page is scrolling to give the page a special effect I am attempting to work on. But the one class I am trying to remove while scrolling conflicts with that effect as its a transparency effect to some nature.</p>\n",
            "last_activity_date": 1423725595,
            "question_id": 9144560,
            "score": 28,
            "tags": [
                "javascript",
                "jquery",
                "javascript-events",
                "scroll"
            ],
            "title": "jQuery scroll() detect when user stops scrolling"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Looks like <a href=\"http://getfirebug.com/\">Firebug</a> (Firefox add-on) has the answer:</p>\n\n<ul>\n<li>open Firebug</li>\n<li>right click the element in HTML tab</li>\n<li>click <code>Log Events</code></li>\n<li>enable Console tab</li>\n<li>click Persist in Console tab (otherwise Console tab will clear after the page is reloaded)</li>\n<li>select <code>Closed</code> (manually)</li>\n<li><p>there will be something like this in Console tab:</p>\n\n<pre><code>...\nmousemove clientX=1097, clientY=292\npopupshowing\nmousedown clientX=1097, clientY=292\nfocus\nmouseup clientX=1097, clientY=292\nclick clientX=1097, clientY=292\nmousemove clientX=1096, clientY=293\n...\n</code></pre></li>\n</ul>\n\n<p>Source: <a href=\"http://haineault.com/blog/74/\">Firebug Tip: Log Events</a></p>\n",
                    "is_accepted": true,
                    "score": 73
                },
                {
                    "body": "<p>Just thought I'd add that you can do this in Chrome as well:</p>\n\n<p><kbd>Ctrl</kbd> + <kbd>Shift</kbd> + <kbd>I</kbd> (Developer Tools) > Sources> Event Listener Breakpoints (on the right).</p>\n\n<p>You can also view all events that have already been attached by simply right clicking on the element and then browsing its properties (the panel on the right).</p>\n\n<p>For example: \n<li>Right click on the upvote button to the left</li>\n<li>Select inspect element</li>\n<li>Collapse the styles section (section on the far right - double chevron)</li>\n<li> Expand the event listeners option</li>\n<li>Now you can see the events bound to the upvote</li></p>\n\n<p>Not sure if it's quite as powerful as the firebug option, but has been enough for most of my stuff.</p>\n\n<p>Another option that is a bit different but surprisingly awesome is Visual Event: \n<a href=\"http://www.sprymedia.co.uk/article/Visual+Event+2\" rel=\"nofollow\">http://www.sprymedia.co.uk/article/Visual+Event+2</a></p>\n\n<p>It highlights all of the elements on a page that have been bound and has popovers showing the functions that are called. Pretty nifty for a bookmark! There's a Chrome plugin as well if that's more your thing - not sure about other browsers.</p>\n\n<p><a href=\"http://stackoverflow.com/users/608497/anonymousandrew%20%22AnonymousAndrew\">AnonymousAndrew</a> has also pointed out <code>monitorEvents(window);</code> <a href=\"http://stackoverflow.com/a/19793663/522859\">here</a></p>\n",
                    "is_accepted": false,
                    "score": 42
                },
                {
                    "body": "<p>Regarding Chrome, checkout the monitorEvents() via the command line API.</p>\n\n<ul>\n<li>Open the console via Menu > Tools > JavaScript Console. </li>\n<li>Enter <code>monitorEvents(window);</code></li>\n<li><p>View the console flooded with events</p>\n\n<pre><code>...\nmousemove MouseEvent {dataTransfer: ...}\nmouseout MouseEvent {dataTransfer: ...}\nmouseover MouseEvent {dataTransfer: ...}\nchange Event {clipboardData: ...}\n...\n</code></pre></li>\n</ul>\n\n<p>There are other examples in the <a href=\"https://developers.google.com/chrome-developer-tools/docs/console#monitoring_events\">documentation</a>. I'm guessing this feature was added after the previous answer.</p>\n",
                    "is_accepted": false,
                    "score": 11
                }
            ],
            "body": "<p>I have a select list:</p>\n\n<pre><code>&lt;select id=\"filter\"&gt;\n  &lt;option value=\"Open\" selected=\"selected\"&gt;Open&lt;/option&gt;\n  &lt;option value=\"Closed\"&gt;Closed&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>When I select <code>Closed</code> the page reloads. In this case it shows closed tickets (instead of opened). It works fine when I do it manually.</p>\n\n<p>The problem is that the page does not reload when I select <code>Closed</code> with <a href=\"http://watir.com/\">Watir</a>:</p>\n\n<pre><code>browser.select_list(:id =&gt; \"filter\").select \"Closed\"\n</code></pre>\n\n<p>That usually means that some JavaScript event is not fired. I can fire events with Watir:</p>\n\n<pre><code>browser.select_list(:id =&gt; \"filter\").fire_event \"onclick\"\n</code></pre>\n\n<p>but I need to know which event to fire.</p>\n\n<p>Is there a way to find out which events are defined for an element?</p>\n",
            "last_activity_date": 1421914873,
            "question_id": 3787555,
            "score": 54,
            "tags": [
                "javascript",
                "events",
                "javascript-events",
                "watir",
                "browser-automation"
            ],
            "title": "How to find out which JavaScript events fired?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>You won't be able to access the URL <code>http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml</code> from a file deployed at <code>http://run.jsbin.com</code> due to the <a href=\"http://en.wikipedia.org/wiki/Same-origin_policy\">same-origin policy</a>.</p>\n\n<p><br></p>\n\n<p>As the source (origin) page and the target URL are at different domains, your code is actually attempting to make a <strong><a href=\"http://en.wikipedia.org/wiki/Cross-origin_resource_sharing\">Cross-domain (CORS)</a> request</strong>, not an ordinary <code>GET</code>.</p>\n\n<p>In a few words, the same-origin policy enforces that browsers only allow Ajax calls to services in the <strong>same domain</strong> as the HTML page.</p>\n\n<p><br></p>\n\n<p><strong>Example:</strong> A page in <code>http://www.example.com/myPage.html</code> can only directly request services that are in <code>http://www.example.com</code>, like <code>http://www.example.com/testservice/etc</code>. If the service is in other domain, the browser won't make the direct call (as you'd expect). Instead, it will try to make a CORS request.</p>\n\n<p>To put it shortly, to perform a CORS request, your browser:</p>\n\n<ul>\n<li>Will first send an <code>OPTION</code> request to the target URL</li>\n<li>And then <strong>only if</strong> the server response to that <code>OPTION</code> contains the <a href=\"http://enable-cors.org/server.html\">adequate headers (<strong><code>Access-Control-Allow-Origin</code> is one of them</strong>)</a> to allow the CORS request, the browse will perform the call (almost exactly the way it would if the HTML page was at the same domain).\n<ul>\n<li>If the expected headers don't come, the browser simply gives up (like it did to you).</li>\n</ul></li>\n</ul>\n\n<p><strong>How to solve it?</strong> The simplest way is to enable CORS (enable the necessary headers) on the server.</p>\n\n<p>If you don't have server-side access to the service, you can also mirror it, and include de necessary headers there.</p>\n",
                    "is_accepted": true,
                    "score": 89
                },
                {
                    "body": "<p>There's a kind of hack-tastic way to do it if you have php enabled on your server. Change this line:</p>\n\n<pre><code>url:   'http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml',\n</code></pre>\n\n<p>to this line:</p>\n\n<pre><code>url: '/path/to/phpscript.php',\n</code></pre>\n\n<p>and then in the php script (if you have permission to use the file_get_contents() function):</p>\n\n<pre><code>&lt;?php\n\nheader('Content-type: application/xml');\necho file_get_contents(\"http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml\");\n\n?&gt;\n</code></pre>\n\n<p>Php doesn't seem to mind if that url is from a different origin. Like I said, this is a hacky answer, and I'm sure there's something wrong with it, but it works for me.</p>\n\n<p>Edit:\nIf you want to cache the result in php, here's the php file you would use:</p>\n\n<pre><code>&lt;?php\n\n$cacheName = 'somefile.xml.cache';\n// generate the cache version if it doesn't exist or it's too old!\n$ageInSeconds = 3600; // one hour\nif(!file_exists($cacheName) || filemtime($cacheName) &gt; time() + $ageInSeconds) {\n  $contents = file_get_contents('http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml');\n  file_put_contents($cacheName, $contents);\n}\n\n$xml = simplexml_load_file($cacheName);\n\nheader('Content-type: application/xml');\necho $xml;\n\n?&gt;\n</code></pre>\n\n<p>Caching code take from <a href=\"http://stackoverflow.com/questions/6907265/how-to-cache-xml-file-in-php\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 15
                }
            ],
            "body": "<p>I am working on this personal project of mine just for fun where I want to read an xml file which is located at <a href=\"http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml\">http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml</a>  and parse the xml and use it to convert values between the currencies. </p>\n\n<p>So far I have come up with the code below which is pretty basic in order to read the xml but I get the following error.</p>\n\n<blockquote>\n  <p>XMLHttpRequest cannot load <em>*</em>*. No 'Access-Control-Allow-Origin'\n  header is present on the requested resource. Origin\n  '<a href=\"http://run.jsbin.com\">http://run.jsbin.com</a>' is therefore not allowed access.</p>\n</blockquote>\n\n<pre><code>$(document).ready( \n    function() {     \n        $.ajax({          \n            type:  'GET',\n            url:   'http://www.ecb.europa.eu/stats/eurofxref/eurofxref-daily.xml',\n            dataType: 'xml',              \n            success: function(xml){\n                alert('aaa');\n            }\n         });\n    }\n);\n</code></pre>\n\n<p>I don't see anything wrong with my code so I am hoping someone could point out what I am doing wrong with my code and how I could fix it. </p>\n",
            "last_activity_date": 1399397886,
            "question_id": 19821753,
            "score": 37,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "xml-parsing"
            ],
            "title": "jQuery xml error &#39; No &#39;Access-Control-Allow-Origin&#39; header is present on the requested resource.&#39;"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<pre><code>// Bracket Notation\n\"Test String1\"[6]\n\n// Real Implementation\n\"Test String1\".charAt(6)\n</code></pre>\n\n<p><strong>It is a bad idea to use brackets, for these reasons (<a href=\"http://blog.vjeux.com/2009/javascript/dangerous-bracket-notation-for-strings.html\">Source</a>):</strong> </p>\n\n<blockquote>\n  <p><strong>This notation does not work in IE7.</strong>\n  The first code snippet will return\n  undefined in IE7. If you happen to use\n  the bracket notation for strings all\n  over your code and you want to migrate\n  to .charAt(pos), this is a real pain:\n  Brackets are used all over your code\n  and there's no easy way to detect if\n  that's for a string or an\n  array/object.</p>\n  \n  <p><strong>You can't set the character using this notation.</strong> As there is no warning of\n  any kind, this is really confusing and\n  frustrating. If you were using the\n  .charAt(pos) function, you would not\n  have been tempted to do it.</p>\n</blockquote>\n\n<p>Basically, it's a shortcut notation that is not fully implemented across all browsers.</p>\n\n<p>Note, you are not able to write characters using either method. However, that functionality is a bit easier to understand with the .charAt() function which, in most languages, is a read-only function.</p>\n",
                    "is_accepted": true,
                    "score": 115
                },
                {
                    "body": "<p>From <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String#Character_access\">MDC</a>:</p>\n\n<blockquote>\n  <p>There are two ways to access an individual character in a string. The first is the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/charAt\"><code>charAt</code></a> method:</p>\n\n<pre><code>return 'cat'.charAt(1); // returns \"a\"\n</code></pre>\n  \n  <p>The other way is to treat the string as an array, where each index corresponds to an individual character:</p>\n\n<pre><code>return 'cat'[1]; // returns \"a\"\n</code></pre>\n  \n  <p><strong>The second way (treating the string as an array) is not part of ECMAScript 3; it's a JavaScript and ECMAScript 5 feature (and not supported in all browsers).</strong></p>\n  \n  <p>In both cases, attempting to set an individual character won't work. Trying to set a character through charAt results in an error, while trying to set a character via indexing does not throw an error, but the string itself is unchanged.</p>\n</blockquote>\n\n<p>So, as you might have figured out by now, <code>charAt()</code> is better from a compatibility perspective.</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>String.charAt() is the standard and it works in all the browsers.\nIn non-IE browsers you may use bracket notation to access characters but IE doesn't support it. (Not sure whether they have implemented that with the latest versions).</p>\n\n<p>If somebody really wants to use bracket notication. It's wise to convert the string to char array in order to make it compatible with any browser.</p>\n\n<pre><code>var testString = \"Hello\"; \nvar charArr = myString.split(''); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Very interesting outcome when you test the string index accessor vs the <code>charAt()</code> method. Seems Chrome is the only browser that likes <code>charAt</code> more.</p>\n\n<p><a href=\"http://jsperf.com/charat-vs-index/2\">CharAt vs index 1</a></p>\n\n<p><a href=\"http://jsperf.com/array-index-vs-string-charat/2\">ChartAt vs index 2</a></p>\n\n<p><a href=\"http://jsperf.com/charat-vs-array/3\">ChartAt vs index 3</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>Is there any reason I should use <code>string.charAt(x)</code> instead of the bracket notation <code>string[x]</code>?</p>\n",
            "last_activity_date": 1374610497,
            "question_id": 5943726,
            "score": 94,
            "tags": [
                "javascript",
                "string"
            ],
            "title": "string.charAt(x) or string[x]?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>You can use an object to hold the results:</p>\n\n<pre><code>var arr = [5, 5, 5, 2, 2, 2, 2, 2, 9, 4];\nvar counts = {};\n\nfor(var i = 0; i&lt; arr.length; i++) {\n    var num = arr[i];\n    counts[num] = counts[num] ? counts[num]+1 : 1;\n}\n</code></pre>\n\n<p>So, now your counts object can tell you what the count is for a particular number:</p>\n\n<pre><code>console.log(counts[5]); // logs '3'\n</code></pre>\n\n<p>If you want to get an array of members, just use the <code>keys()</code> functions</p>\n\n<pre><code>keys(counts); // returns [\"5\", \"2\", \"9\", \"4\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>Don't use two arrays for the result, use an object:</p>\n\n<pre><code>a      = [5, 5, 5, 2, 2, 2, 2, 2, 9, 4];\nresult = { };\nfor(i = 0; i &lt; a.length; ++i) {\n    if(!result[a[i]])\n        result[a[i]] = 0;\n    ++result[a[i]];\n}\n</code></pre>\n\n<p>Then <code>result</code> will look like:</p>\n\n<pre><code>{\n    2: 5,\n    4: 1,\n    5: 3,\n    9: 1\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Here you go: </p>\n\n<pre><code>function foo(arr) {\n    var a = [], b = [], prev;\n\n    arr.sort();\n    for ( var i = 0; i &lt; arr.length; i++ ) {\n        if ( arr[i] !== prev ) {\n            a.push(arr[i]);\n            b.push(1);\n        } else {\n            b[b.length-1]++;\n        }\n        prev = arr[i];\n    }\n\n    return [a, b];\n}\n</code></pre>\n\n<p><strong>Live demo:</strong> <a href=\"http://jsfiddle.net/simevidas/bnACW/\">http://jsfiddle.net/simevidas/bnACW/</a></p>\n",
                    "is_accepted": true,
                    "score": 14
                },
                {
                    "body": "<p>Check out the code below.</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\n// array with values\nvar ar = [5, 5, 5, 2, 2, 2, 2, 2, 9, 4];\n\nvar Unique = []; // we'll store a list of unique values in here\nvar Counts = []; // we'll store the number of occurances in here\n\nfor(var i in ar)\n{\n    var Index = ar[i];\n    Unique[Index] = ar[i];\n    if(typeof(Counts[Index])=='undefined')  \n        Counts[Index]=1;\n    else\n        Counts[Index]++;\n}\n\n// remove empty items\nUnique = Unique.filter(function(){ return true});\nCounts = Counts.filter(function(){ return true});\n\nalert(ar.join(','));\nalert(Unique.join(','));\nalert(Counts.join(','));\n\nvar a=[];\n\nfor(var i=0; i&lt;Unique.length; i++)\n{\n    a.push(Unique[i] + ':' + Counts[i] + 'x');\n}\nalert(a.join(', '));\n\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could extend the Array prototype, like this:</p>\n\n<pre><code>Array.prototype.frequencies = function() {\n    var l = this.length, result = {all:[]};\n    while (l--){\n       result[this[l]] = result[this[l]] ? ++result[this[l]] : 1;\n    }\n    // all pairs (label, frequencies) to an array of arrays(2)\n    for (var l in result){\n       if (result.hasOwnProperty(l) &amp;&amp; l !== 'all'){\n          result.all.push([ l,result[l] ]);\n       }\n    }\n    return result;\n};\n\nvar freqs = [5, 5, 5, 2, 2, 2, 2, 2, 9, 4].frequencies();\nalert(freqs[2]); //=&gt; 5\n// or\nvar freqs = '1,1,2,one,one,2,2,22,three,four,five,three,three,five'\n             .split(',')\n             .frequencies();\nalert(freqs.three); //=&gt; 3\n</code></pre>\n\n<p>Alternatively you can utilize <code>Array.map</code>:</p>\n\n<pre><code>  Array.prototype.frequencies  = function () {\n    var freqs = {sum: 0}; \n    this.map( function (a){ \n        if (!(a in this)) { this[a] = 1; } \n        else { this[a] += 1; }\n        this.sum += 1;\n        return a; }, freqs\n    );\n    return freqs;\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>var a = [5, 5, 5, 2, 2, 2, 2, 2, 9, 4].reduce(function (acc, curr) {\n  if (typeof acc[curr] == 'undefined') {\n    acc[curr] = 1;\n  } else {\n    acc[curr] += 1;\n  }\n\n  return acc;\n}, {});\n\n// a == {2: 5, 4: 1, 5: 3, 9: 1}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>Array.prototype.getItemCount = function(item) {\n    var counts = {};\n    for(var i = 0; i&lt; this.length; i++) {\n        var num = this[i];\n        counts[num] = counts[num] ? counts[num]+1 : 1;\n    }\n    return counts[item] || 0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can make this a lot easier by extending your arrays with a <code>count</code> function. It works kind of like Rails\u2019 <code>Array#count</code>, if you\u2019re familiar with it.</p>\n\n<pre><code>Array.prototype.count = function(obj){\n    var count = this.length;\n    if(typeof(obj) !== \"undefined\"){\n        var array = this.slice(0), count = 0; // clone array and reset count\n        for(i = 0; i &lt; array.length; i++){\n            if(array[i] == obj){\n                count++;\n            }\n        }\n    }\n    return count;\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var array = ['a', 'a', 'b', 'c'];\narray.count('a'); // =&gt; 2\narray.count('b'); // =&gt; 1\narray.count('d'); // =&gt; 0\narray.count(); // =&gt; 4\n</code></pre>\n\n<p><a href=\"https://gist.github.com/zykadelic/5069223#file-array-count-js\" rel=\"nofollow\">Source (gist)</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's just something light and easy for the eyes...</p>\n\n<pre><code>function count(a,i){\n var result = 0;\n for(var o in a)\n  if(a[o] == i)\n   result++;\n return result;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you are using underscore you can go the functional route</p>\n\n<pre><code>a = ['foo', 'foo', 'bar'];\n\nvar results = _.reduce(a,function(counts,key){ counts[key]++; return counts },\n                  _.object( _.map( _.uniq(a), function(key) { return [key, 0] })))\n</code></pre>\n\n<p>so your first array is</p>\n\n<pre><code>_.keys(results)\n</code></pre>\n\n<p>and the second array is</p>\n\n<pre><code>_.values(results)\n</code></pre>\n\n<p>most of this will default to native javascript functions if they are available </p>\n\n<p>demo : <a href=\"http://jsfiddle.net/dAaUU/\">http://jsfiddle.net/dAaUU/</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I think this is the simplest way how to count occurrences with same value in array.</p>\n\n<pre><code>var a = [true, false, false, false];\na.filter(function(value){\n    return value === false;\n}).length\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If using underscore or lodash, this is the simplest thing to do:</p>\n\n<pre><code>_.countBy(array, _.identity);\n</code></pre>\n\n<p>Such that:</p>\n\n<pre><code>_.countBy([5, 5, 5, 2, 2, 2, 2, 2, 9, 4], _.identity)\n=&gt; Object {2: 5, 4: 1, 5: 3, 9: 1}\n</code></pre>\n\n<p>As pointed out by others, you can then execute the <code>_.keys()</code> and <code>_.values()</code> functions on the result to get just the unique numbers, and their occurrences, respectively. But in my experience, the original object is much easier to deal with.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you favour a single liner.</p>\n\n<p><code>arr.reduce(function(countMap, word) {countMap[word] = ++countMap[word] || 1;return countMap}, {});</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In Javascript, I'm trying to take an initial array of number values and count the elements inside it. Ideally, the result would be two new arrays, the first specifying each unique element, and the second containing the number of times each element occurs. However, I'm open to suggestions on the format of the output.</p>\n\n<p>For example, if the initial array was:</p>\n\n<pre><code>5, 5, 5, 2, 2, 2, 2, 2, 9, 4\n</code></pre>\n\n<p>Then two new arrays would be created. The first would contain the name of each unique element:</p>\n\n<pre><code>5, 2, 9, 4\n</code></pre>\n\n<p>The second would contain the number of times that element occurred in the initial array:</p>\n\n<pre><code>3, 5, 1, 1\n</code></pre>\n\n<p>Because the number 5 occurs three times in the initial array, the number 2 occurs five times and 9 and 4 both appear once.</p>\n\n<p>I've searched a lot for a solution, but nothing seems to work, and everything I've tried myself has wound up being ridiculously complex. Any help would be appreciated!</p>\n\n<p>Thanks :)</p>\n",
            "last_activity_date": 1425386815,
            "question_id": 5667888,
            "score": 29,
            "tags": [
                "javascript",
                "arrays",
                "count",
                "element"
            ],
            "title": "Counting occurences of Javascript array elements"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>You need to use <a href=\"http://www.w3schools.com/htmldom/met_win_settimeout.asp\">setTimeout</a> and pass it a callback function. The reason you can't use sleep in javascript is because you'd block the entire page from doing anything in the meantime. Not a good plan. Use Javascript's event model and stay happy. Don't fight it!</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>There is the </p>\n\n<pre><code>setTimeout( function_reference, timeoutMillis );\n</code></pre>\n\n<p>function which can be passed the time after which the function will be executed.</p>\n",
                    "is_accepted": true,
                    "score": 70
                },
                {
                    "body": "<p>You can also use <a href=\"http://www.devguru.com/Technologies/ecmascript/quickref/win_setinterval.html\">window.setInterval()</a> to run some code repeatedly at a regular interval.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Just to expand a little... You can execute code directly in the setTimeout call, but as <a href=\"http://stackoverflow.com/questions/24849/is-there-some-way-to-introduce-a-delay-in-javascript#24850\" rel=\"nofollow\">@patrick</a> says, you normally assign a callback function, like this. The time is milliseconds</p>\n\n<pre><code>setTimeout(func, 4000);\nfunction func() {\n    alert('Do stuff here');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>Just to add to what everyone else have said about setTimeout:\nIf you want to call a function with a parameter in the future, you need to set up some anonymous function calls. </p>\n\n<p>You need to pass the function as an argument for it to be called later. In effect this means without brackets behind the name. The following will call the alert at once, and it will display 'Hello world':</p>\n\n<pre><code>var a = \"world\";\nsetTimeout(alert(\"Hello \" + a), 2000);\n</code></pre>\n\n<p>To fix this you can either put the name of a function (as Flubba has done) or you can use an anonymous function. If you need to pass a parameter, then you have to use an anonymous function.</p>\n\n<pre><code>var a = \"world\";\nsetTimeout(function(){alert(\"Hello \" + a)}, 2000);\na = \"Stack Overflow\";\n</code></pre>\n\n<p>But if you run that code you will notice that after 2 seconds the popup will say 'Hello Stack Overflow'. This is because the value of the variable a has changed in those two seconds. To get it to say 'Hello world' after two seconds, you need to use the following code snippet:</p>\n\n<pre><code>function callback(a){\n    return function(){\n    \talert(\"Hello \" + a);\n    }\n}\nvar a = \"world\";\nsetTimeout(callback(a), 2000);\na = \"Stac Overflow\";\n</code></pre>\n\n<p>It will wait 2 seconds and then popup 'Hello world'.</p>\n",
                    "is_accepted": false,
                    "score": 121
                },
                {
                    "body": "<p>To add on the earlier comments, I would like to say the following : </p>\n\n<p>The <code>setTimeout()</code> function in JavaScript does not pause execution of the script per se, but merely tells the compiler to execute the code sometime in the future.</p>\n\n<p>There isn't a function that can actually pause execution built into JavaScript. However, you can write your own function that does something like an unconditional loop till the time is reached by using the <code>Date()</code> function and adding the time interval you need.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If you really want to have a blocking (synchronous) <code>delay</code> function (for whatsoever), why not do something like this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function delay(ms) {\n        var cur_d = new Date();\n        var cur_ticks = cur_d.getTime();\n        var ms_passed = 0;\n        while(ms_passed &lt; ms) {\n            var d = new Date();  // Possible memory leak?\n            var ticks = d.getTime();\n            ms_passed = ticks - cur_ticks;\n            // d = null;  // Prevent memory leak?\n        }\n    }\n\n    alert(\"2 sec delay\")\n    delay(2000);\n    alert(\"done ... 500 ms delay\")\n    delay(500);\n    alert(\"done\");\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you only need to test a delay you can use this:</p>\n\n<pre><code>function delay(ms) {\n   ms += new Date().getTime();\n   while (new Date() &lt; ms){}\n}\n</code></pre>\n\n<p>And then if you want to delay for 2 second you do:</p>\n\n<pre><code>delay(2000);\n</code></pre>\n\n<p>Might not be the best for production though. More on that in the comments</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there some function like <code>delay()</code> or <code>wait()</code> for delaying executing of the JavaScript code for a specific number of milliseconds?</p>\n",
            "last_activity_date": 1419067901,
            "question_id": 24849,
            "score": 77,
            "tags": [
                "javascript"
            ],
            "title": "Is there some way to introduce a delay in javascript?"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p><strong>Edit:</strong>\nA hacky way to do it would be to create a variable that keeps track of focus for every element you care about. So, if you care that 'myInput' lost focus, set a variable to it on focus.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n   var lastFocusedElement;\n&lt;/script&gt;\n&lt;input id=\"myInput\" onFocus=\"lastFocusedElement=this;\" /&gt;\n</code></pre>\n\n<p>Original Answer:\nYou can pass 'this' to the function.</p>\n\n<pre><code>&lt;input id=\"myInput\" onblur=\"function(this){\n   var theId = this.id; // will be 'myInput'\n}\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This way:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    function yourFunction(element) {\n        alert(element);\n    }\n&lt;/script&gt;\n&lt;input id=\"myinput\" onblur=\"yourFunction(this)\"&gt;\n</code></pre>\n\n<p>Or if you attach the listener via JavaScript (jQuery in this example):</p>\n\n<pre><code>var input = $('#myinput').blur(function() {\n    alert(this);\n});\n</code></pre>\n\n<p><strong>Edit</strong>: sorry. I misread the question.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Don't attach it that way, because the browsers behave differently. Use a library that handles browser differences for you, like <a href=\"http://developer.yahoo.com/yui/event/\" rel=\"nofollow\">YUI's Event</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;input id=\"myinput\" onblur=\"alert(this.id);\"&gt;&lt;/input&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>i think it's not possibe,\nwith IE you can try to use <code>window.event.toElement</code>, but it dosn't work with firefox!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Hmm... In Firefox, you can use <code>explicitOriginalTarget</code> to pull the element that was clicked on. I expected <code>toElement</code> to do the same for IE, but it does not appear to work... However, you can pull the newly-focused element from the document:</p>\n\n<pre><code>function showBlur(ev)\n{\n   var target = ev.explicitOriginalTarget||document.activeElement;\n   document.getElementById(\"focused\").value = \n      target ? target.id||target.tagName||target : '';\n}\n\n...\n\n&lt;button id=\"btn1\" onblur=\"showBlur(event)\"&gt;Button 1&lt;/button&gt;\n&lt;button id=\"btn2\" onblur=\"showBlur(event)\"&gt;Button 2&lt;/button&gt;\n&lt;button id=\"btn3\" onblur=\"showBlur(event)\"&gt;Button 3&lt;/button&gt;\n&lt;input id=\"focused\" type=\"text\" disabled=\"disabled\" /&gt;\n</code></pre>\n\n<hr>\n\n<p><strong>Caveat:</strong> This technique does <em>not</em> work for focus changes caused by <em>tabbing</em> through fields with the keyboard, and does not work at all in Chrome or Safari. The big problem with using <code>activeElement</code> (except in IE) is that it is not consistently updated until <em>after</em> the <code>blur</code> event has been processed, and may have no valid value at all during processing! This can be mitigated with a variation on <a href=\"http://stackoverflow.com/questions/121499/when-onblur-occurs-how-can-i-find-out-which-element-focus-went-to/128452#128452\">the technique Michiel ended up using</a>:</p>\n\n<pre><code>function showBlur(ev)\n{\n  // Use timeout to delay examination of activeElement until after blur/focus \n  // events have been processed.\n  setTimeout(function()\n  {\n    var target = document.activeElement;\n    document.getElementById(\"focused\").value = \n      target ? target.id||target.tagName||target : '';\n  }, 1);\n}\n</code></pre>\n\n<p>This should work in most modern browsers (tested in Chrome, IE, and Firefox), with the caveat that Chrome does not set focus on buttons that are <em>clicked</em> (vs. tabbed to). </p>\n",
                    "is_accepted": true,
                    "score": 43
                },
                {
                    "body": "<p>Can you reverse what you're checking and when?  That is if you remeber what was blurred last:</p>\n\n<pre><code>&lt;input id=\"myInput\" onblur=\"lastBlurred=this;\"&gt;&lt;/input&gt;\n</code></pre>\n\n<p>and then in the onClick for your span, call function() with both objects:</p>\n\n<pre><code>&lt;span id=\"mySpan\" onClick=\"function(lastBlurred, this);\"&gt;Hello World&lt;/span&gt;\n</code></pre>\n\n<p>Your function could then decide whether or not to trigger the Ajax.AutoCompleter control. The function has the clicked object <em>and</em> the blurred object. The onBlur has already happened so it won't make the suggestions disappear.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I suggest using global variables blurfrom and blurto.  Then, configure all elements you care about to assign their position in the DOM to the variable blurfrom when they lose focus.  Additionally, configure them so that gaining focus sets the variable blurto to <em>their</em> position in the DOM.  Then, you could use another function altogether to analyze the blurfrom and blurto data.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I solved it eventually with a timeout on the onblur event (thanks to the advice of a friend who is not StackOverflow):</p>\n\n<pre><code>&lt;input id=\"myInput\" onblur=\"setTimeout(function() {alert(clickSrc);},200);\"&gt;&lt;/input&gt;\n&lt;span onclick=\"clickSrc='mySpan';\" id=\"mySpan\"&gt;Hello World&lt;/span&gt;\n</code></pre>\n\n<p>Works both in FF and IE. </p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I am also trying to make Autocompleter ignore blurring if a specific element clicked and have a working solution, but for only Firefox due to explicitOriginalTarget</p>\n\n<pre><code>Autocompleter.Base.prototype.onBlur = Autocompleter.Base.prototype.onBlur.wrap( \n    \tfunction(origfunc, ev) {\n    \t\tif ($(this.options.ignoreBlurEventElement)) {\n    \t\t\tvar newTargetElement = (ev.explicitOriginalTarget.nodeType == 3 ? ev.explicitOriginalTarget.parentNode : ev.explicitOriginalTarget);\n    \t\t\tif (!newTargetElement.descendantOf($(this.options.ignoreBlurEventElement))) {\n    \t\t\t\treturn origfunc(ev);\n    \t\t\t}\n    \t\t}\n    \t}\n    );\n</code></pre>\n\n<p>This code wraps default onBlur method of Autocompleter and checks if ignoreBlurEventElement parameters is set. if it is set, it checks everytime to see if clicked element is ignoreBlurEventElement or not. If it is, Autocompleter does not cal onBlur, else it calls onBlur. The only problem with this is that it only works in Firefox because explicitOriginalTarget property is Mozilla specific . Now I am trying to find a different way than using explicitOriginalTarget. The solution you have mentioned requires you to add onclick behaviour manually to the element. If I can't manage to solve explicitOriginalTarget issue, I guess I will follow your solution.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>keep in mind, that the solution with explicitOriginalTarget does not work for text-input-to-text-input jumps.</p>\n\n<p>try to replace buttons with the following text-inputs and you will see the difference:</p>\n\n<pre><code>&lt;input id=\"btn1\" onblur=\"showBlur(event)\" value=\"text1\"&gt;\n&lt;input id=\"btn2\" onblur=\"showBlur(event)\" value=\"text2\"&gt;\n&lt;input id=\"btn3\" onblur=\"showBlur(event)\" value=\"text3\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It's possible to use mousedown event of document instead of blur:</p>\n\n<pre><code>$(document).mousedown(function(){\n  if ($(event.target).attr(\"id\") == \"mySpan\") {\n    // some process\n  }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I've been playing with this same feature and found out that FF, IE, Chrome and Opera have the ability to provide the source element of an event.  I haven't tested Safari but my guess is it might have something similar.</p>\n\n<pre><code>$('#Form').keyup(function (e) {\n    var ctrl = null;\n    if (e.originalEvent.explicitOriginalTarget) { // FF\n        ctrl = e.originalEvent.explicitOriginalTarget;\n    }\n    else if (e.originalEvent.srcElement) { // IE, Chrome and Opera\n        ctrl = e.originalEvent.srcElement;\n    }\n    //...\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Use something like this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var myVar = null;\n</code></pre>\n\n<p>And then inside your function:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>myVar = fldID;\n</code></pre>\n\n<p>And then:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>setTimeout(setFocus,1000)\n</code></pre>\n\n<p>And then:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function setFocus(){ document.getElementById(fldID).focus(); }\n</code></pre>\n\n<p>Final code:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function somefunction(){\n            var myVar = null;\n\n            myVar = document.getElementById('myInput');\n\n            if(myVar.value=='')\n                setTimeout(setFocusOnJobTitle,1000);\n            else\n                myVar.value='Success';\n        }\n        function setFocusOnJobTitle(){\n            document.getElementById('myInput').focus();\n        }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;label id=\"jobTitleId\" for=\"myInput\"&gt;Job Title&lt;/label&gt;\n&lt;input id=\"myInput\" onblur=\"somefunction();\"&gt;&lt;/input&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I do not like using timeout when coding javascript so I would do it the opposite way of Michiel Borkent. (Did not try the code behind but you should get the idea).</p>\n\n<pre><code>&lt;input id=\"myInput\" onblur=\"blured = this.id;\"&gt;&lt;/input&gt;\n&lt;span onfocus = \"sortOfCallback(this.id)\" id=\"mySpan\"&gt;Hello World&lt;/span&gt;\n</code></pre>\n\n<p>In the head something like that</p>\n\n<pre><code>&lt;head&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function sortOfCallback(id){\n            bluredElement = document.getElementById(blured);\n            // Do whatever you want on the blured element with the id of the focus element\n\n\n        }\n\n    &lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><br>\nI think its easily possible via jquery by passing the reference of the field causing the onblur event in \"this\".<br>\nFor e.g.</p>\n\n<pre><code>&lt;input type=\"text\" id=\"text1\" onblur=\"showMessageOnOnblur(this)\"&gt;\n\nfunction showMessageOnOnblur(field){\n    alert($(field).attr(\"id\"));\n}\n</code></pre>\n\n<p>Thanks<br>\nMonika</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Suppose I attach an onblur function to an html input box like this:</p>\n\n<pre><code>&lt;input id=\"myInput\" onblur=\"function() { ... }\"&gt;&lt;/input&gt;\n</code></pre>\n\n<p>Is there a way to get the ID of the element which caused the onblur event to fire (the element which was clicked) inside the function? How?</p>\n\n<p>For example, suppose I have a span like this:</p>\n\n<pre><code>&lt;span id=\"mySpan\"&gt;Hello World&lt;/span&gt;\n</code></pre>\n\n<p>If I click the span right after the input element has focus, the input element will lose its focus. How does the function know that it was <code>mySpan</code> that was clicked?</p>\n\n<p>PS: If the onclick event of the span would occur before the onblur event of the input element my problem would be solved, because I could set some status value indicating a specific element had been clicked.</p>\n\n<p>PPS: The background of this problem is that I want to trigger an Ajax.AutoCompleter control externally (from a clickable element) to show its suggestions, without the suggestions disappearing immediately because of the onblur event on the input element. So I want to check in the OnBlur function if one specific element has been clicked, and if so, ignore the blur event. </p>\n",
            "last_activity_date": 1413565555,
            "question_id": 121499,
            "score": 68,
            "tags": [
                "javascript",
                "events"
            ],
            "title": "When onblur occurs, how can I find out which element focus went *to*?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Yes, Date.parse is not consistent for different browsers.  You could:</p>\n\n<ul>\n<li>Use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Date/UTC\">Date.UTC</a> instead, which breaks up the date-string into separate inputs</li>\n<li>Use a wrapper library like <a href=\"http://docs.jquery.com/UI/Datepicker/parseDate\">jQuery's parseDate</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><a href=\"http://en.wikipedia.org/wiki/ISO_8601\" rel=\"nofollow\">ISO 8601</a> date formats were added with <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\" rel=\"nofollow\">ECMAScript-262</a> v5. So if a browser is not v5 compatible, you simply cannot <em>expect</em> to be capable of handling ISO 8601 formats.</p>\n\n<p>Browsers not being v5 compatible may use any implementation specific date formats they want. Most of them do at least support <a href=\"http://www.rfc-editor.org/rfc/rfc822.txt\" rel=\"nofollow\">RFC822</a>/<a href=\"http://www.rfc-editor.org/rfc/rfc1123.txt\" rel=\"nofollow\">RFC1123</a> date formats, though. Example:</p>\n\n<pre><code>var d = Date.parse(\"Wed, 26 Apr 2011 13:16:50 GMT+0200\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Some older browsers return the <strong>wrong</strong> date (and not NaN)if you parse an ISO date string.</p>\n\n<p>You can use your own method across all browsers, or use Date.parse if it is implemented correctly-\ncheck a known timestamp.</p>\n\n<pre><code>Date.fromISO= (function(){\n    var diso= Date.parse('2011-04-26T13:16:50Z');\n    if(diso=== 1303823810000) return function(s){\n        return new Date(Date.parse(s));\n    }\n    else return function(s){\n        var day, tz, \n        rx= /^(\\d{4}\\-\\d\\d\\-\\d\\d([tT][\\d:\\.]*)?)([zZ]|([+\\-])(\\d\\d):(\\d\\d))?$/, \n        p= rx.exec(s) || [];\n        if(p[1]){\n            day= p[1].split(/\\D/).map(function(itm){\n                return parseInt(itm, 10) || 0;\n            });\n            day[1]-= 1;\n            day= new Date(Date.UTC.apply(Date, day));\n            if(!day.getDate()) return NaN;\n            if(p[5]){\n                tz= parseInt(p[5], 10)*60;\n                if(p[6]) tz += parseInt(p[6], 10);\n                if(p[4]== \"+\") tz*= -1;\n                if(tz) day.setUTCMinutes(day.getUTCMinutes()+ tz);\n            }\n            return day;\n        }\n        return NaN;\n    }\n})()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>As mentioned previously ISO 8601 style dates were added in ECMAScript version 5, where implementation is not consistent, and not available in all browsers.  There are a <a href=\"https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js\" rel=\"nofollow\">number</a> <a href=\"http://frugalcoder.us/post/2010/01/07/EcmaScript-5s-Date-Extensions.aspx\" rel=\"nofollow\">of</a> script stubs available, but you may wish to simply add your own Date.parse* method.</p>\n\n<pre><code>(function() {\n  //ISO-8601 Date Matching\n  var reIsoDate = /^(\\d{4})-(\\d{2})-(\\d{2})((T)(\\d{2}):(\\d{2})(:(\\d{2})(\\.\\d*)?)?)?(Z)?$/;\n  Date.parseISO = function(val) {\n    var m;\n\n    m = typeof val === 'string' && val.match(reIsoDate);\n    if (m) return new Date(Date.UTC(+m[1], +m[2] - 1, +m[3], +m[6] || 0, +m[7] || 0, +m[9] || 0, parseInt((+m[10]) * 1000) || 0));\n\n    return null;\n  }\n\n  //MS-Ajax Date Matching\n  var reMsAjaxDate = /^\\\\?\\/Date\\((\\-?\\d+)\\)\\\\?\\/$/;\n  Date.parseAjax = function(val) {\n    var m;\n\n    m = typeof val === 'string' && val.match(reMsAjaxDate);\n    if (m) return new Date(+m[1]);\n\n    return null;\n  }\n}();</code></pre>\n\n<p>I use the above method for JSON.parse hydration of dates...</p>\n\n<pre><code>JSON.parse(text, function(key, val) {\n  return Date.parseISO(val) || Date.parseAjax(val) || val;\n});</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I say shim it only if needed via a few tests,</p>\n\n<p>here is one I already written:</p>\n\n<pre><code>(function() {\n\nvar d = window.Date,\n    regexIso8601 = /^(\\d{4}|\\+\\d{6})(?:-(\\d{2})(?:-(\\d{2})(?:T(\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{1,3})(?:Z|([\\-+])(\\d{2}):(\\d{2}))?)?)?)?$/;\n\nif (d.parse('2011-11-29T15:52:30.5') !== 1322581950500 ||\n    d.parse('2011-11-29T15:52:30.52') !== 1322581950520 ||\n    d.parse('2011-11-29T15:52:18.867') !== 1322581938867 ||\n    d.parse('2011-11-29T15:52:18.867Z') !== 1322581938867 ||\n    d.parse('2011-11-29T15:52:18.867-03:30') !== 1322594538867 ||\n    d.parse('2011-11-29') !== 1322524800000 ||\n    d.parse('2011-11') !== 1320105600000 ||\n    d.parse('2011') !== 1293840000000) {\n\n    d.__parse = d.parse;\n\n    d.parse = function(v) {\n\n        var m = regexIso8601.exec(v);\n\n        if (m) {\n            return Date.UTC(\n                m[1],\n                (m[2] || 1) - 1,\n                m[3] || 1,\n                m[4] - (m[8] ? m[8] + m[9] : 0) || 0,\n                m[5] - (m[8] ? m[8] + m[10] : 0) || 0,\n                m[6] || 0,\n                ((m[7] || 0) + '00').substr(0, 3)\n            );\n        }\n\n        return d.__parse.apply(this, arguments);\n\n    };\n}\n\nd.__fromString = d.fromString;\n\nd.fromString = function(v) {\n\n    if (!d.__fromString || regexIso8601.test(v)) {\n        return new d(d.parse(v));\n    }\n\n    return d.__fromString.apply(this, arguments);\n};\n\n})();\n</code></pre>\n\n<p>and in your code just always use <code>Date.fromString(...)</code> instead of <code>new Date(...)</code></p>\n\n<p><strong>test a browser to see if the shim will be used:</strong></p>\n\n<p><a href=\"http://jsbin.com/efivib/1/edit\">http://jsbin.com/efivib/1/edit</a></p>\n\n<p><strong>works in all major browsers, used these references:</strong></p>\n\n<p><a href=\"http://dev.w3.org/html5/spec/common-microsyntaxes.html\">http://dev.w3.org/html5/spec/common-microsyntaxes.html</a></p>\n\n<p><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15\">http://www.ecma-international.org/ecma-262/5.1/#sec-15.9.1.15</a></p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/ff743760(v=vs.94).aspx\">http://msdn.microsoft.com/en-us/library/windows/apps/ff743760(v=vs.94).aspx</a></p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/wz6stk2z(v=vs.94).aspx\">http://msdn.microsoft.com/en-us/library/windows/apps/wz6stk2z(v=vs.94).aspx</a></p>\n\n<p><a href=\"http://msdn.microsoft.com/en-us/library/windows/apps/k4w173wk(v=vs.94).aspx\">http://msdn.microsoft.com/en-us/library/windows/apps/k4w173wk(v=vs.94).aspx</a></p>\n\n<p>!- microsoft connect requires a log in to view:</p>\n\n<p>IE9 was failing on milliseconds with digit counts other than 3: (fixed in IE10)\n<a href=\"https://connect.microsoft.com/IE/feedback/details/723740/date-parse-and-new-date-fail-on-valid-formats\">https://connect.microsoft.com/IE/feedback/details/723740/date-parse-and-new-date-fail-on-valid-formats</a></p>\n\n<p>IE10 is still (as of 1/17/2013) failing when the time zone is omitted (according to ECMA, this should defalt to Z or UTC, not local):\n<a href=\"https://connect.microsoft.com/IE/feedback/details/776783/date-parse-and-new-date-fail-on-valid-formats\">https://connect.microsoft.com/IE/feedback/details/776783/date-parse-and-new-date-fail-on-valid-formats</a> </p>\n\n<p><strong>-- Read this if you care about where the standard is now / going in the future and why I can't get the IE team to recognize that their IE10 implementation is technically incorrect:</strong></p>\n\n<p>ECMAScript-262 v6.0 is going to move to the slightly more iso8601 compliant version of \"if time zone indicator is omitted, assume local time\"... so now there is a discrepancy, this implementation, chrome, mobile safari and opera all follow ECMAScript-262 v5.1, whereas IE10, firefox, desktop safari all seem to be following the more iso8601 compliant ECMAScript-262 v6.0 specification... this is confusing to say the least. When chrome or mobile safari pull the trigger and move to the ES6 implementation, I think this implementation should go with it leaving ES5.1 in the minority. I've read that this is listed in the \"errata\" of version 5.1 though I haven't found it.  I'm more of the opinion that it's a little early to be pulling the trigger on ES6 just yet, but I'm also of the opinion that code needs to be practical, not ideal and move to where the browser makers move to.  That said, it seems to be a 50/50 decision right now, so below is the \"future\" version of this code...</p>\n\n<p>I should also mention that either version of the code will normalize \"non-compliant\" browsers to match the behavior of the other one, since that's what shims do ;)</p>\n\n<p><strong>HERE IS AN ADAPTED VERSION COMPATIBLE WITH ECMAScript-262 v6.0 (JavaScript Future)</strong></p>\n\n<p>see relevant sections here: (this is the only online html version of the spec I could find) <a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-15.9.1.15\">http://people.mozilla.org/~jorendorff/es6-draft.html#sec-15.9.1.15</a></p>\n\n<pre><code>(function() {\n\n    var d = window.Date,\n        regexIso8601 = /^(\\d{4}|\\+\\d{6})(?:-(\\d{2})(?:-(\\d{2})(?:T(\\d{2}):(\\d{2}):(\\d{2})\\.(\\d{1,})(Z|([\\-+])(\\d{2}):(\\d{2}))?)?)?)?$/,\n        lOff, lHrs, lMin;\n\n    if (d.parse('2011-11-29T15:52:30.5') !== 1322599950500 ||\n        d.parse('2011-11-29T15:52:30.52') !== 1322599950520 ||\n        d.parse('2011-11-29T15:52:18.867') !== 1322599938867 ||\n        d.parse('2011-11-29T15:52:18.867Z') !== 1322581938867 ||\n        d.parse('2011-11-29T15:52:18.867-03:30') !== 1322594538867 ||\n        d.parse('2011-11-29') !== 1322524800000 ||\n        d.parse('2011-11') !== 1320105600000 ||\n        d.parse('2011') !== 1293840000000) {\n\n        d.__parse = d.parse;\n\n        lOff = -(new Date().getTimezoneOffset());\n        lHrs = Math.floor(lOff / 60);\n        lMin = lOff % 60;\n\n        d.parse = function(v) {\n\n            var m = regexIso8601.exec(v);\n\n            if (m) {\n                return Date.UTC(\n                    m[1],\n                    (m[2] || 1) - 1,\n                    m[3] || 1,\n                    m[4] - (m[8] ? m[9] ? m[9] + m[10] : 0 : lHrs) || 0,\n                    m[5] - (m[8] ? m[9] ? m[9] + m[11] : 0 : lMin) || 0,\n                    m[6] || 0,\n                    ((m[7] || 0) + '00').substr(0, 3)\n                );\n            }\n\n            return d.__parse.apply(this, arguments);\n\n        };\n    }\n\n    d.__fromString = d.fromString;\n\n    d.fromString = function(v) {\n\n        if (!d.__fromString || regexIso8601.test(v)) {\n            return new d(d.parse(v));\n        }\n\n        return d.__fromString.apply(this, arguments);\n    };\n\n})();\n</code></pre>\n\n<p>hope this helps -ck</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>The ES5 spec deviates from the ISO8601 spec, especially when it comes to the treatment of dates without a timezone indicator / offset. There is a bug ticket at <a href=\"https://bugs.ecmascript.org/show_bug.cgi?id=112\" rel=\"nofollow\">https://bugs.ecmascript.org/show_bug.cgi?id=112</a> describing the problem and it looks like it will be fixed in ES6.</p>\n\n<p>For now, I recommend looking at <a href=\"https://github.com/csnover/js-iso8601\" rel=\"nofollow\">https://github.com/csnover/js-iso8601</a> for a cross-browser implementation. I use <a href=\"https://github.com/csnover/js-iso8601/tree/lax\" rel=\"nofollow\">https://github.com/csnover/js-iso8601/tree/lax</a> which doesn't conform to the ES5 spec but has better interoperability with other JSON serialisation libraries such as JSON.NET.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I had this issue today. I found <a href=\"http://momentjs.com/\">momentjs</a> was a good way of parsing ISO 8601 dates in a cross browser manor.</p>\n\n<p>momentjs can also be used to output the date in a different format.</p>\n",
                    "is_accepted": true,
                    "score": 12
                },
                {
                    "body": "<p>Microsoft Sharepoint 2013 is ALSO using a different notation eg \"2013-04-30T22:00:00Z\" </p>\n\n<p>If you want to use the REST services from sharepoint 2013 in combination with Internet Explorer 8 ( IE8 ) , then the solution from ckozl is NOT working. \nYoull get the NaN</p>\n\n<p>change the regex line TO:</p>\n\n<pre><code>regexIso8601 = /^(\\d{4}|\\+\\d{6})(?:-(\\d{2})(?:-(\\d{2})(?:T(\\d{2}):(\\d{2}):(\\d{2})(\\.(\\d{1,3}))?(?:Z|([\\-+])(\\d{2}):(\\d{2}))?)?)?)?$/;\n</code></pre>\n\n<p>this will make the microseconds bit optional !</p>\n\n<p>cheerio, Leo</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Simple function to parse ISO8601 date format in any browser:</p>\n\n<pre><code>function dateFromISO8601(isoDateString) {\n  var parts = isoDateString.match(/\\d+/g);\n  var isoTime = Date.UTC(parts[0], parts[1] - 1, parts[2], parts[3], parts[4], parts[5]);\n  var isoDate = new Date(isoTime);\n\n  return isoDate;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I found ckozl answer really useful and interesting, but the regexp is not perfect and it didn't work in my case.</p>\n\n<p>Apart from the fact that dates without minutes, secs or milisecs are not parsed, ISO 8501 spec says that the '-' and ':' separators are optional, so \"2013-12-27\" and \"20131227\" are both valid. In my case, this is important because I'm setting the server date and time in a JavaScript variable from PHP:</p>\n\n<pre><code>var serverDate = new Date(Date.parse(\"&lt;?php date(DateTime::ISO8601); ?&gt;\"));\n</code></pre>\n\n<p>This code generates something like this:</p>\n\n<pre><code>&lt;script&gt;\nvar serverDate = new Date(Date.parse(\"2013-12-27T15:27:34+0100\"));\n&lt;/script&gt;\n</code></pre>\n\n<p>The important part is the time zone designator \"+0100\" where the ':' is missing. Although Firefox parses that string correctly, IE (11) fails (if the ':' is added, then IE also works). The headache  about the zonetime and the ECMAScript specifications described by ckozl is unimportant in my case, because PHP always add the time zone designator.</p>\n\n<p>The RegExp I'm using, instead of that one from ckozl is:</p>\n\n<pre><code>var regexIso8601 = /^(\\d{4}|\\+\\d{6})(?:-?(\\d{2})(?:-?(\\d{2})(?:T(\\d{2})(?::?(\\d{2})(?::?(\\d{2})(?:(?:\\.|,)(\\d{1,}))?)?)?(Z|([\\-+])(\\d{2})(?::?(\\d{2}))?)?)?)?)?$/;\n</code></pre>\n\n<p>Keep in mind that this regexp is not perfect either. ISO 8501 allows week specification (2007-W01-1 for monday, 1 Jan 2007), or decimal fractions in hours and minutes (18.50 for 18:30:00, or 18:30.25 for 18:30:15). But they are quite unusual.</p>\n\n<p>P.D. This answer should be, I imagine, a comment to the original chozl answer, but I do not have reputation enough :(</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I failed to parse an ISO-8601 date \"2011-04-26T13:16:50Z\" on IE8 and Safari 5, but it worked on Chrome 10, FF4. Support seems to be quite mixed? </p>\n\n<p>Does anyone know the actual status of which browsers can parse this format? I assume IE6, and 7 will fail too.</p>\n\n<pre><code>var d = Date.parse(\"2011-04-26T13:16:50Z\");\n</code></pre>\n",
            "last_activity_date": 1395246658,
            "question_id": 5802461,
            "score": 37,
            "tags": [
                "javascript",
                "internet-explorer",
                "datetime",
                "safari"
            ],
            "title": "JavaScript: Which browsers support parsing of ISO-8601 Date String with Date.parse"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>If this <code>javascript</code> runs in a browser then you can access the object like this:</p>\n\n<pre><code>window['obj']['a']['b'] = 5\n</code></pre>\n\n<p>So given the string <code>\"obj.a.b\"</code> you have to split the it by <code>.</code>:</p>\n\n<pre><code>var s = \"obj.a.b\"\nvar e = s.split(\".\")\nwindow[e[0]][e[1]][e[2]] = 5\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>To obtain the value, consider:</p>\n\n<pre><code>function ref(obj, str) {\n    str = str.split(\".\");\n    for (var i = 0; i &lt; str.length; i++)\n        obj = obj[str[i]];\n    return obj;\n}\n\nvar obj = { a: { b: 1, c : { d : 3, e : 4}, f: 5 } }\nstr = 'a.c.d'\nref(obj, str) // 3\n</code></pre>\n\n<p>or in a more fancy way, using <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/Reduce\">reduce</a>:</p>\n\n<pre><code>function ref(obj, str) {\n    return str.split(\".\").reduce(function(o, x) { return o[x] }, obj);\n}\n</code></pre>\n\n<p>Returning an assignable reference to an object member is not possible in javascript, you'll have to use a function like the following:</p>\n\n<pre><code>function set(obj, str, val) {\n    str = str.split(\".\");\n    while (str.length &gt; 1)\n        obj = obj[str.shift()];\n    return obj[str.shift()] = val;\n}\n\nvar obj = { a: { b: 1, c : { d : 3, e : 4}, f: 5 } }\nstr = 'a.c.d'\nset(obj, str, 99)\nconsole.log(obj.a.c.d) // 99\n</code></pre>\n\n<p>or use <code>ref</code> given above to obtain the reference to the containing object and then apply the <code>[]</code> operator to it:</p>\n\n<pre><code>parts = str.split(/\\.(?=[^.]+$)/)  // Split \"foo.bar.baz\" into [\"foo.bar\", \"baz\"]\nref(obj, parts[0])[parts[1]] = 99\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 45
                },
                {
                    "body": "<pre><code>var obj = { a : { b: 1, c: 2 } };\nwalkObject(obj,\"a.b\"); // 1\n\nfunction walkObject( obj, path ){\n  var parts = path.split(\".\"), i=0, part;\n  while (obj &amp;&amp; (part=parts[i++])) obj=obj[part];\n  return obj;\n}\n</code></pre>\n\n<p>Or if you like your code terse:</p>\n\n<pre><code>function walkObject( o, path ){\n  for (var a,p=path.split('.'),i=0; o&amp;&amp;(a=p[i++]); o=o[a]);\n  return o;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Similar to thg435's answer, but with argument checks and supports nest levels where one of the ancestor levels isn't yet defined or isn't an object.</p>\n\n<pre><code>setObjByString = function(obj, str, val) {\n    var keys, key;\n    //make sure str is a string with length\n    if (!str || !str.length || Object.prototype.toString.call(str) !== \"[object String]\") {\n        return false;\n    }\n    if (obj !== Object(obj)) {\n        //if it's not an object, make it one\n        obj = {};\n    }\n    keys = str.split(\".\");\n    while (keys.length &gt; 1) {\n        key = keys.shift();\n        if (obj !== Object(obj)) {\n            //if it's not an object, make it one\n            obj = {};\n        }\n        if (!(key in obj)) {\n            //if obj doesn't contain the key, add it and set it to an empty object\n            obj[key] = {};\n        }\n        obj = obj[key];\n    }\n    return obj[keys[0]] = val;\n};\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var obj;\nsetObjByString(obj, \"a.b.c.d.e.f\", \"hello\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Consider this object in javascript,</p>\n\n<pre><code>var obj = { a : { b: 1, c: 2 } };\n</code></pre>\n\n<p>given the string \"obj.a.b\" how can I get the object this refers to, so that I may alter its value? i.e. I want to be able to do something like</p>\n\n<pre><code>obj.a.b = 5;\nobj.a.c = 10;\n</code></pre>\n\n<p>where \"obj.a.b\" &amp; \"obj.a.c\" are strings (not obj references).\nI came across <a href=\"http://stackoverflow.com/questions/6393943/convert-javascript-string-in-dot-notation-into-an-object-reference\">this post</a> where I can get the value the dot notation string is referring to obj but what I need is a way I can get at the object itself?</p>\n\n<p>The nesting of the object may be even deeper than this. i.e. maybe</p>\n\n<pre><code>var obj = { a: { b: 1, c : { d : 3, e : 4}, f: 5 } }\n</code></pre>\n",
            "last_activity_date": 1370624115,
            "question_id": 10934664,
            "score": 22,
            "tags": [
                "javascript",
                "object",
                "dot-notation"
            ],
            "title": "Convert string in dot notation to get the object reference"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>You could write a separate function to set up the timeout:</p>\n\n<pre><code>function doTimer(str, delay) {\n  setTimeout(function() { alert(str); }, delay);\n}\n</code></pre>\n\n<p>Then just call that from the loop:</p>\n\n<pre><code>var delay = 1000;\nfor(var i=0;i&lt;strings.length;i++) {\n    doTimer(strings[i], delay);\n    delay += 1000;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>This is the very frequently repeated \"how do I use a loop variable in a closure\" problem.</p>\n\n<p>The canonical solution is to call a function which returns a function that's bound to the current value of the loop variable:</p>\n\n<pre><code>var strings = [ \"hello\", \"world\" ];\nvar delay = 1000;\nfor(var i=0;i&lt;strings.length;i++) {\n    setTimeout(\n        (function(s) {\n            return function() {\n                alert(s);\n            }\n        })(strings[i]), delay);\n    delay += 1000;\n}\n</code></pre>\n\n<p>The outer definition <code>function(s) { ... }</code> creates a new scope where <code>s</code> is bound to the current value of the supplied parameter - i.e. <code>strings[i]</code> - where it's available to the <em>inner</em> scope.</p>\n",
                    "is_accepted": true,
                    "score": 25
                },
                {
                    "body": "<p>Just add a scope around the setTimeout call:</p>\n\n<pre><code>var strings = [ \"hello\", \"world\" ];\nvar delay = 1000;\nfor(var i=0;i&lt;strings.length;i++) {\n    (function(s){\n        setTimeout( function(){alert(s);}, delay);\n    })(strings[i]);\n    delay += 1000;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<pre><code>var strings = [ \"hello\", \"world\" ];\nvar delay = 1000;\nfor(var i=0;i&lt;strings.length;i++) {\n    setTimeout( new Function('alert(strings[i]);'), delay);\n    delay += 1000;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>Although not as backward compatible as some of the other answers, thought I'd throw up another option.. this time using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind\" rel=\"nofollow\">bind()</a>!</p>\n\n<pre><code>var strings = [ \"hello\", \"world\" ];\nvar delay = 1000;\nfor(var i=0;i&lt;strings.length;i++) {\n    setTimeout(alert.bind(this, strings[i]), delay);\n    delay += 1000;\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/a59EK/\" rel=\"nofollow\">View demo of it in action</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to use setTimeout to execute an anonymous function that I pass information into and I'm having trouble. This (hard-coded version) would work just fine:</p>\n\n<pre><code>setTimeout(function(){alert(\"hello\");},1000);\nsetTimeout(function(){alert(\"world\");},2000);\n</code></pre>\n\n<p>But I'm trying to take the hello and world from an array and pass them into the function without (a) using global variables, and (2) using eval. I know how I could do it using globals or eval, but how can I do it without. Here is what I'd like to do (but I know it won't work):</p>\n\n<pre><code>var strings = [ \"hello\", \"world\" ];\nvar delay = 1000;\nfor(var i=0;i&lt;strings.length;i++) {\n    setTimeout( function(){alert(strings[i]);}, delay);\n    delay += 1000;\n}\n</code></pre>\n\n<p>Of course strings[i] will be out of context. How can I pass strings[i] into that anonymous function without eval or globals?</p>\n",
            "last_activity_date": 1374012359,
            "question_id": 6425062,
            "score": 14,
            "tags": [
                "javascript",
                "settimeout"
            ],
            "title": "Passing functions to setTimeout in a loop: always the last value?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>I currently found that they are in different in syntax:</p>\n\n<p><code>function{}();</code> (without parens) doesn't work, because when JS is in <code>Statement</code> and saw <code>function</code> keyword, it's expecting a function declaration, which does not allow <code>()</code> at the end.</p>\n\n<pre><code> Statement ::= FuncDecl ;\n FuncDecl ::= function Ident_optional ( ArgList ) { Block }\n</code></pre>\n\n<p>and <code>function{ }()</code> makes the parse chokes when it's expecting <code>Statement</code>'s <code>;</code></p>\n\n<p>The first form seems easier to type than the second one.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>There is no difference between the two, so far as the compiler is concerned. However, will find that the <code>(function () {}())</code> style is recommended in Douglas Crockford\u2019s JavaScript <a href=\"http://javascript.crockford.com/code.html\" rel=\"nofollow\">code conventions</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>As far as differences go, it is really just syntactic sugar. Somewhat equivalent to: \"do you like jQuery() or $()?\" Both can be compiled, executed, and used interchangeably (AFAIK).</p>\n\n<p>From the code samples I have seen thus far, more people seem to follow the Crockford code convention:</p>\n\n<pre><code>(function() { ... }()); \n</code></pre>\n\n<p>Personally, I prefer the <code>(function(){})();</code> convention because it is more apparent to me that the function is self-executing; I'm also a big user of jQuery and that's the convention used in jQuery source.</p>\n\n<p>Additionally, it is considered good practice to use parens to enclose your self-executing function, regardless of which form you choose to go with.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There is no practical difference in those two forms, but from a <em>grammatical</em> point of view the difference between the two is that <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_11.1.6\">The Grouping Operator</a> - the parentheses - will hold in the first example a <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_11.2\"><code>CallExpression</code></a>, that includes the <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_11.2.5\"><code>FunctionExpression</code></a>:</p>\n\n<pre>\n               CallExpression\n                |         |\n       FunctionExpression |\n                |         |\n                V         V\n    (function() {       }());\n    ^                      ^\n    |--PrimaryExpression --|\n\n</pre>\n\n<p>In the second example, we have first a whole <code>CallExpression</code>, that holds the <code>FunctionExpression</code>:</p>\n\n<pre>\n          PrimaryExpression\n                |\n         FunctionExpression\n                |\n                V\n    (function() {       })();\n    ^                      ^\n    |--  CallExpression  --|\n\n</pre>\n",
                    "is_accepted": true,
                    "score": 27
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/3384504/location-of-parenthesis-for-auto-executing-anonymous-javascript-functions\">Location of parenthesis for auto-executing anonymous JavaScript functions?</a>  </p>\n</blockquote>\n\n\n\n<p>Sometimes I see:</p>\n\n<pre><code>(function() { ... }()); \n</code></pre>\n\n<p>and sometimes I see:</p>\n\n<pre><code>(function() { ... })(); \n</code></pre>\n\n<p>I see both forms with and without arguments. They <strong><a href=\"http://jsfiddle.net/hDMmC/\">both</a></strong>  <strong><a href=\"http://jsfiddle.net/WZ3X2/\">execute</a></strong> the anonymous function.</p>\n\n<p>Is there a difference between the two forms? Are there any compelling reasons to use one form over the other?</p>\n",
            "last_activity_date": 1285710660,
            "question_id": 3783007,
            "score": 16,
            "tags": [
                "javascript",
                "anonymous-function"
            ],
            "title": "Is there a difference between (function() {...}()); and (function() {...})();?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Same as in other languages:</p>\n\n<ul>\n<li><code>++x</code> (pre-increment) means \"increment the variable; the value of the expression is the final value\"</li>\n<li><code>x++</code> (post-increment) means \"remember the original value, then increment the variable; the value of the expression is the original value\"</li>\n</ul>\n\n<p>Now when used as a standalone statement, they mean the same thing:</p>\n\n<pre><code>x++;\n++x;\n</code></pre>\n\n<p>The difference comes when you use the value of the expression elsewhere. For example:</p>\n\n<pre><code>x = 0;\ny = array[x++]; // This will get array[0]\n\nx = 0;\ny = array[++x]; // This will get array[1]\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 47
                },
                {
                    "body": "<p>As I understand them if you use them standalone they do the same thing. If you try to output the result of them as an expression then they may differ. Try alert(i++) as compared to alert(++i) to see the difference. i++ evaluates to i before the addition and ++i does the addition before evaluating.</p>\n\n<p>See <a href=\"http://jsfiddle.net/xaDC4/\">http://jsfiddle.net/xaDC4/</a> for an example.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<ul>\n<li><code>++x</code> increments the value, then evaluates and stores it.</li>\n<li><code>x++</code> evaluates the value, then increments and stores it.</li>\n</ul>\n\n<pre class=\"lang-js prettyprint-override\"><code>var n = 0, m = 0;\n\nalert(n++); /* Shows 0, then stores n = 1 */\nalert(++m); /* Shows 1, then stores m = 1 */\n</code></pre>\n\n<p>Note that there are slight performance benefits to using <code>++x</code> where possible, because you read the variable, modify it, then evaluate and store it. Versus the <code>x++</code> operator where you read the value, evaluate it, modify it, then store it.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I was thinking about this yesterday reading <a href=\"http://stackoverflow.com/questions/3457967/what-belongs-in-an-educational-tool-to-demonstrate-the-unwarranted-assumptions-pe/3458154#3458154\">this response</a> to the question about <a href=\"http://stackoverflow.com/questions/3457967/what-belongs-in-an-educational-tool-to-demonstrate-the-unwarranted-assumptions-pe\">bad assumptions in C/C++</a>.  In all cases, can we guarantee that Javascript behaves this way?  Or do you think it's bad practice to use the increment statement within a more complex statement at all?</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>In Javascript you can use <code>++</code> operator before or after the variable name.  What, if any, are the differences between these ways of incrementing a variable?</p>\n",
            "last_activity_date": 1402331504,
            "question_id": 3469885,
            "score": 29,
            "tags": [
                "javascript",
                "increment",
                "unary-operator"
            ],
            "title": "++someVariable Vs. someVariable++ in Javascript"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>The Unary <code>+</code> operator converts its operand to Number type.\nThe Unary <code>-</code> operator converts its operand to Number type, and then negates it.\n(per the <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf\">ECMAScript spec</a>)</p>\n\n<p>In practice, Unary <code>-</code> is used for simply putting negative numbers in normal expressions, e.g.:</p>\n\n<pre><code>var x = y * -2.0;\n</code></pre>\n\n<p>That's the unary minus operator at work. The Unary <code>+</code> is equivalent to the Number() constructor called as a function, as implied by the spec.</p>\n\n<p>I can only speculate on the history, but the unary +/- operators behave similarly in many C-derived languages. I suspect the Number() behavior is the addition to the language here. </p>\n",
                    "is_accepted": true,
                    "score": 44
                }
            ],
            "body": "<p>If Unary +/- operators are used to perform conversions as the Number() casting function, then why do we need unary operators? Whats the special need of these unary operators? </p>\n",
            "last_activity_date": 1301239181,
            "question_id": 5450076,
            "score": 27,
            "tags": [
                "javascript"
            ],
            "title": "Whats the significant use of Unary Plus and Minus operators?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<blockquote>\n  <p>I have 3 buttons with same id ...</p>\n</blockquote>\n\n<p>You have invalid HTML, you can't have more than one element in a page with the same <code>id</code>.</p>\n\n<p><a href=\"http://www.w3.org/TR/html401/struct/global.html#h-7.5.2\">Quoting the spec</a>:  </p>\n\n<blockquote>\n  <p><em>7.5.2 <strong>Element identifiers: the id and class attributes</em></strong>   </p>\n  \n  <p><strong>id = name [CS]</strong><br>\n  This attribute assigns a name to an element. This name must be unique in a document.</p>\n</blockquote>\n\n<p><strong>Solution</strong>: change from <code>id</code> to <code>class</code>,</p>\n\n<pre><code>&lt;button type=\"button\" class=\"btn btn-primary xyz\" value=\"1\"&gt;XYZ1&lt;/button&gt;\n&lt;button type=\"button\" class=\"btn btn-primary xyz\" value=\"2\"&gt;XYZ2&lt;/button&gt;\n&lt;button type=\"button\" class=\"btn btn-primary xyz\" value=\"3\"&gt;XYZ3&lt;/button&gt;\n</code></pre>\n\n<p>And the <strong>jQuery code</strong>:</p>\n\n<pre><code>$(\".xyz\").click(function(){\n    alert(this.value);\n    // No need for jQuery :$(this).val() to get the value of the input.\n});\n</code></pre>\n\n<blockquote>\n  <p>But it works only for the first button</p>\n</blockquote>\n\n<p>jQuery <code>#id</code> selector <a href=\"http://api.jquery.com/id-selector/\">docs</a>:</p>\n\n<blockquote>\n  <p>Each id value must be used only once within a document. <strong>If more than one element has been assigned the same ID, queries that use that ID will only select the first matched element in the DOM.</strong> This behavior should not be relied on, however; a document with more than one element using the same ID is invalid.</p>\n</blockquote>\n\n<p>If you look at the jQuery source you can see when you call <code>$</code> with an id selecor-(<code>$(\"#id\")</code>), jQuery calls the native javascript <code>document.getElementById</code> function:</p>\n\n<pre><code>// HANDLE: $(\"#id\")\n} else {\n    elem = document.getElementById( match[2] );\n}\n</code></pre>\n\n<p>Though, in the <a href=\"http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-getElBId\">spec</a> of <code>document.getElementById</code> they didn't mention it must return the first value, this is how most of (maybe all?) the browsers implemented it.</p>\n\n<p><strong><a href=\"http://jsfiddle.net/CAnxW/\">DEMO</a></strong></p>\n",
                    "is_accepted": true,
                    "score": 24
                },
                {
                    "body": "<p>ID means \"Identifier\" and is valid only once per document. Since your HTML is wrong at this point, some browsers pick the first, some the last occuring element with that ID.</p>\n\n<p>Change ids for names would be a good step. </p>\n\n<p>Then use <code>$('button[name=\"xyz\"]').click(function(){</code></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>you can't have the same id bcoz id is unique in page html this is your fault ,so change it to class or other attribute name.</p>\n\n<pre><code>$('attributename').click(function(){ alert($(this).attr(attributename))});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>From my experience, if you use <code>$('button#xyz')</code> selector instead it will work. That's a hack, but it's still invalid HTML.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have 3 buttons with same id, I need to get each button value when he's being clicked.</p>\n\n<pre><code>&lt;button id=\"xyz\" type=\"button\" class=\"btn btn-primary\" value=\"1\"&gt;XYZ1&lt;/button&gt;\n&lt;button id=\"xyz\" type=\"button\" class=\"btn btn-primary\" value=\"2\"&gt;XYZ2&lt;/button&gt;\n&lt;button id=\"xyz\" type=\"button\" class=\"btn btn-primary\" value=\"3\"&gt;XYZ3&lt;/button&gt;\n</code></pre>\n\n<p>Here is my current <code>jQuery</code> script:</p>\n\n<pre><code>$(\"#xyz\").click(function(){\n      var xyz = $(this).val();\n      alert(xyz);\n});\n</code></pre>\n\n<p>But it works only for the first button, clicking on the other buttons are being ignored.</p>\n",
            "last_activity_date": 1401016292,
            "question_id": 11114622,
            "score": 8,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "jQuery id selector works only for the first element"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>It's called the 'ternary' or 'conditional' operator.</p>\n\n<p><strong>Example</strong></p>\n\n<blockquote>\n  <p>The ?: operator can be used as a\n  shortcut for an if...else statement.\n  It is typically used as part of a\n  larger expression where an if...else\n  statement would be awkward. For\n  example:</p>\n</blockquote>\n\n<pre><code>var now = new Date();\nvar greeting = \"Good\" + ((now.getHours() &gt; 17) ? \" evening.\" : \" day.\");\n</code></pre>\n\n<blockquote>\n  <p>The example creates a string\n  containing \"Good evening.\" if it is\n  after 6pm. The equivalent code using\n  an if...else statement would look as\n  follows:</p>\n</blockquote>\n\n<pre><code>var now = new Date();\nvar greeting = \"Good\";\nif (now.getHours() &gt; 17)\n   greeting += \" evening.\";\nelse\n   greeting += \" day.\";\n</code></pre>\n\n<p>From <a href=\"http://msdn.microsoft.com/en-us/library/be21c7hw%28v=vs.94%29.aspx\" rel=\"nofollow\">MSDN JS documentation</a>.</p>\n\n<p>Basically it's a shorthand conditional statement.</p>\n\n<p>Also see: </p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1788917/javascript-ternary-operator\">Javascript Ternary operator</a></li>\n<li><a href=\"http://en.wikipedia.org/wiki/?%3a\" rel=\"nofollow\">Wikipedia</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This is a one-line shorthand for an if-then statement. It is called a ternary operator or a conditional operator.</p>\n\n<p>Here is an example of code that could be shortened with the conditional operator:</p>\n\n<pre><code>if(userIsYoungerThan21) {\n  serveGrapeJuice();\n}\nelse {\n  serveWine();\n}\n</code></pre>\n\n<p>This can be shortened with the <code>?:</code> like so:</p>\n\n<pre><code>userIsYoungerThan21 ? serveGrapeJuice() : serveWine();\n</code></pre>\n\n<p>In Javascript conditional operator can evaluate to an expression, not just a statement:</p>\n\n<pre><code>var userType = userIsYoungerThan18 ? \"Minor\" : \"Adult\";\nserveDrink(userIsYoungerThan21 ? \"Grape Juice\" : \"Wine\");\n</code></pre>\n\n<p>They can even be chained:</p>\n\n<pre><code>userIsYoungerThan4 ? serveMilk() : userIsYoungerThan21 ? serveGrapeJuice() : serveWine();\n</code></pre>\n\n<p>Be careful, though, or you will end up with convoluted code like this:</p>\n\n<pre><code>var k = a ? (b ? (c ? d : e) : (d ? e : f)) : f ? (g ? h : i) : j;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>It's a little hard to google when all you have are symbols ;) The terms to use are \"javascript conditional operator\".</p>\n\n<p>If you see any more funny symbols in Javascript, you should try looking up Javascript's operators first: <a href=\"https://developer.mozilla.org/en/JavaScript/Reference#Operators\" rel=\"nofollow\">MDC's list of operators</a>. The one exception you're likely to encounter is the <a href=\"http://stackoverflow.com/questions/4856156/what-does-js-mean\"><code>$</code> symbol</a>.</p>\n\n<p>To answer your question, <strong>conditional operators</strong> replace simple if statements. An example is best:</p>\n\n<pre><code>var insurancePremium = age &gt; 21 ? 100 : 200;\n</code></pre>\n\n<p>Instead of:</p>\n\n<pre><code>var insurancePremium;\n\nif (age &gt; 21) {\n    insurancePremium = 100;\n} else {\n    insurancePremium = 200;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>z = (x == y ? 1 : 2);\n</code></pre>\n\n<p>is equivalent to</p>\n\n<pre><code>if (x == y)\n    z = 1;\nelse\n    z = 2;\n</code></pre>\n\n<p>except, of course, it's shorter.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It's called the <code>ternary operator</code>. For some more info, here's another question I answered regarding this:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/5392255/how-to-write-an-if-else-statement-without-else/5392271#5392271\">How to write an IF else statement without &#39;else&#39;</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It is called the ternary operator</p>\n\n<pre><code>tmp = (foo==1 ? true : false);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It's an <code>if statement</code> all on one line.</p>\n\n<p>So </p>\n\n<pre><code>var x=1;\n(x == 1) ? y=\"true\" : y=\"false\";\nalert(y);\n</code></pre>\n\n<p>The expression to be evaluated is in the <code>( )</code></p>\n\n<p>If it matches true, execute the code after the <code>?</code></p>\n\n<p>If it matches false, execute the code after the <code>:</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Ternary operator syntax :<br>\n           condition ? result1 : result2;</p>\n\n<p>See below sample code for ternary operator,it is more like if-else </p>\n\n<pre><code>        var x = 30;\n        var y = 20;\n\n        if (x &gt; y) {\n            result = \"good job\";\n                    }\n              else {\n                  result = 20;\n                    }\n\n     //Below is the above code written using the ternary operator\n           result = x &gt; y ? \"good job\" : 20;\n</code></pre>\n\n<p>If x is greater than y it displays good job,else 20.</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>Can someone please explain to me in simple words what is  the <code>?:</code> (ternary) operator and how to use it?</p>\n",
            "last_activity_date": 1419356250,
            "question_id": 6259982,
            "score": 7,
            "tags": [
                "javascript",
                "ternary-operator"
            ],
            "title": "JS How to use the ?: (ternary) operator"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>The method doesn't exist in IE6. If you want to select elements by class and don't want to use a library, you simply have to loop through all elements in the page and check for the class in their <code>className</code> property.</p>\n\n<pre><code>function getElementsByClassName(className) {\n  var found = [];\n  var elements = document.getElementsByTagName(\"*\");\n  for (var i = 0; i &lt; elements.length; i++) {\n    var names = elements[i].className.split(' ');\n    for (var j = 0; j &lt; names.length; j++) {\n      if (names[j] == className) found.push(elements[i]);\n    }\n  }\n  return found;\n}\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/kYdex/1/\" rel=\"nofollow\">http://jsfiddle.net/kYdex/1/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>IE6, Netscape 6+, Firefox, and Opera 7+ copy the following script in your page:</p>\n\n<pre><code>document.getElementsByClassName = function(cl) {\n  var retnode = [];\n  var elem = this.getElementsByTagName('*');\n  for (var i = 0; i &lt; elem.length; i++) {\n    if((' ' + elem[i].className + ' ').indexOf(' ' + cl + ' ') &gt; -1) retnode.push(elem[i]);\n  }\n  return retnode;\n}; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This <a href=\"http://robertnyman.com/2008/05/27/the-ultimate-getelementsbyclassname-anno-2008/\" rel=\"nofollow\">solution</a> may help. This is a custom <code>getElementsByClassName</code> function implemented in pure javascript, that works in IE.</p>\n\n<p>Essentially what this script is doing is probing, one by one, all possible options and picks the best one available. These options are:</p>\n\n<ol>\n<li>Native <code>document.getElementsByClassName</code> function.</li>\n<li><code>document.evaluate</code> function, which allows evaluation of XPath queries.</li>\n<li>Traversing the DOM tree.</li>\n</ol>\n\n<p>Of course the first one is the best performance-wise, however the latter should be available everywhere including IE 6.</p>\n\n<p>Usage example, which is also available on the page, looks like this:</p>\n\n<pre><code>getElementsByClassName(\"col\", \"div\", document.getElementById(\"container\")); \n</code></pre>\n\n<p>So the function allows 3 parameters: class (required), tag name (optional, searches for all tags if not specified), root element (optional, document if not specified).</p>\n",
                    "is_accepted": true,
                    "score": 6
                },
                {
                    "body": "<p>Internet Explorer 8 and older does not support <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.getElementsByClassName\" rel=\"nofollow\"><code>getElementsByClassName()</code></a>. If you only need a solution for IE8, it supports <a href=\"https://developer.mozilla.org/en/docs/Web/API/Document.querySelectorAll\" rel=\"nofollow\"><code>querySelectorAll()</code></a>, you can use one of these instead. For older IEs you have to provide your own implementation, and for some other ancient browsers that support it you can also use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/document.evaluate\" rel=\"nofollow\"><code>evaluate()</code></a> which runs XPath expressions.</p>\n\n<p><a href=\"https://gist.github.com/eikes/2299607\" rel=\"nofollow\">This code</a> provides a <code>document.getElementsByClassName</code> method if it does not exist yet using the methods I've described:</p>\n\n<pre><code>if (!document.getElementsByClassName) {\n  document.getElementsByClassName = function(search) {\n    var d = document, elements, pattern, i, results = [];\n    if (d.querySelectorAll) { // IE8\n      return d.querySelectorAll(\".\" + search);\n    }\n    if (d.evaluate) { // IE6, IE7\n      pattern = \".//*[contains(concat(' ', @class, ' '), ' \" + search + \" ')]\";\n      elements = d.evaluate(pattern, d, null, 0, null);\n      while ((i = elements.iterateNext())) {\n        results.push(i);\n      }\n    } else {\n      elements = d.getElementsByTagName(\"*\");\n      pattern = new RegExp(\"(^|\\\\s)\" + search + \"(\\\\s|$)\");\n      for (i = 0; i &lt; elements.length; i++) {\n        if ( pattern.test(elements[i].className) ) {\n          results.push(elements[i]);\n        }\n      }\n    }\n    return results;\n  }\n}\n</code></pre>\n\n<p>If you don't like something about it, you can use your favorite search engine to find a different one.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know you ask to don't use jQuery, but using jQuery will give you one of the most elegant solutions.\nJust add this function at your javascript code:</p>\n\n<pre><code>function defineGetElementsByClassName()\n{\n    // define 'getElementsByClassName' - isn't supported in IE web browser\n    if (!document.getElementsByClassName)\n    {\n        document.getElementsByClassName = \n           function (className) \n           { \n               return this.querySelectorAll(\".\" + className); }\n           }\n}\n\ndefineGetElementsByClassName();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>The following code:</p>\n\n<pre><code>var borderTds = document.getElementsByClassName('leftborder');\n</code></pre>\n\n<p>gives me an error message in Internet Explorer 6, 7 and 8: </p>\n\n<blockquote>\n  <p>Object does not support this method</p>\n</blockquote>\n\n<p>How can I select elements by their class in these browsers?</p>\n\n<p>I prefer not to use JQuery.</p>\n",
            "last_activity_date": 1424342111,
            "question_id": 6584635,
            "score": 7,
            "tags": [
                "javascript",
                "internet-explorer-8",
                "internet-explorer-7",
                "internet-explorer-6",
                "dom-traversal"
            ],
            "title": "getElementsByClassName() doesn&#39;t work in old Internet Explorers like IE6, IE7, IE8"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>I use the <a href=\"https://chrome.google.com/extensions/detail/chklaanhfefbnpoihckbnefhakgolnmc\" rel=\"nofollow\">JSONView Chrome extension</a> (it is as pretty as it gets :):</p>\n\n<p>Edit: added <code>jsonreport.js</code></p>\n\n<p>I've also released an online stand-alone JSON pretty print viewer, jsonreport.js, that provides a human readable HTML5 report you can use to view any JSON data.</p>\n\n<p>You can read more about the format in <em><a href=\"https://github.com/ServiceStack/ServiceStack/wiki/HTML5ReportFormat\" rel=\"nofollow\">New JavaScript HTML5 Report Format</a></em>.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Douglas Crockford's JSON in JavaScript library will pretty print JSON via the stringify method.</p>\n\n<p>You may also find the answers to this older question useful: <a href=\"http://stackoverflow.com/questions/352098/how-to-pretty-print-json-script\">How to pretty-print JSON script?</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you use net.sf.json, you can pretty print as follows (using a 4 space indentation):</p>\n\n<pre><code>JSONObject work = JSONObject.fromObject(\"{\\\"hi\\\":\\\"there\\\",\\\"more\\\":\\\"stuff\\\"}\");\nlog.info(\"WORK=\"+work.toString(4));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify\">pretty-printing is implemented natively in JSON.stringify()</a></strong>. The third argument enabled pretty printing and sets the spacing to use :</p>\n\n<pre><code>var str = JSON.stringify(obj, null, 2); // spacing level = 2\n</code></pre>\n\n<p>If you need syntax highlighting, you might use some regex magic like so:</p>\n\n<pre><code>function syntaxHighlight(json) {\n    if (typeof json != 'string') {\n         json = JSON.stringify(json, undefined, 2);\n    }\n    json = json.replace(/&amp;/g, '&amp;amp;').replace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;');\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n        var cls = 'number';\n        if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n                cls = 'key';\n            } else {\n                cls = 'string';\n            }\n        } else if (/true|false/.test(match)) {\n            cls = 'boolean';\n        } else if (/null/.test(match)) {\n            cls = 'null';\n        }\n        return '&lt;span class=\"' + cls + '\"&gt;' + match + '&lt;/span&gt;';\n    });\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/KJQ9K/554/\">See in in action here (jsfiddle)</a></p>\n\n<p><strong>or full snipped provided here :</strong></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>function output(inp) {\r\n    document.body.appendChild(document.createElement('pre')).innerHTML = inp;\r\n}\r\n\r\nfunction syntaxHighlight(json) {\r\n    json = json.replace(/&amp;/g, '&amp;amp;').replace(/&lt;/g, '&amp;lt;').replace(/&gt;/g, '&amp;gt;');\r\n    return json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\r\n        var cls = 'number';\r\n        if (/^\"/.test(match)) {\r\n            if (/:$/.test(match)) {\r\n                cls = 'key';\r\n            } else {\r\n                cls = 'string';\r\n            }\r\n        } else if (/true|false/.test(match)) {\r\n            cls = 'boolean';\r\n        } else if (/null/.test(match)) {\r\n            cls = 'null';\r\n        }\r\n        return '&lt;span class=\"' + cls + '\"&gt;' + match + '&lt;/span&gt;';\r\n    });\r\n}\r\n\r\nvar obj = {a:1, 'b':'foo', c:[false,'false',null, 'null', {d:{e:1.3e5,f:'1.3e5'}}]};\r\nvar str = JSON.stringify(obj, undefined, 4);\r\n\r\noutput(str);\r\noutput(syntaxHighlight(str));</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>pre {outline: 1px solid #ccc; padding: 5px; margin: 5px; }\r\n.string { color: green; }\r\n.number { color: darkorange; }\r\n.boolean { color: blue; }\r\n.null { color: magenta; }\r\n.key { color: red; }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": true,
                    "score": 1122
                },
                {
                    "body": "<p>For debugging purpose I use:</p>\n\n<pre>\nconsole.debug(\"%o\", data);\n</pre>\n\n<ul>\n<li><a href=\"https://getfirebug.com/wiki/index.php/Console_API\" rel=\"nofollow\">https://getfirebug.com/wiki/index.php/Console_API</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/DOM/console\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/DOM/console</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>User Pumbaa80's answer is great if you have an object you want pretty printed. If you have a valid JSON string that you want to pretty printed, you can tweak his answer with:</p>\n\n<pre><code>var jsonString = '{\"some\":\"json\"}';\nvar jsonPretty = JSON.stringify(JSON.parse(jsonString),null,2);  \n</code></pre>\n\n<p>This builds a JSON object from the string, and then converts it back to a string using JSON stringify's pretty print.</p>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>Based on Pumbaa80's answer I have modified the code to use the console.log colours (working on Chrome for sure) and not HTML. Output can be seen inside console. You can edit the _variables inside the function adding some more styling.</p>\n\n<pre><code>function JSONstringify(json) {\n    if (typeof json != 'string') {\n        json = JSON.stringify(json, undefined, '\\t');\n    }\n\n    var \n        arr = [],\n        _string = 'color:green',\n        _number = 'color:darkorange',\n        _boolean = 'color:blue',\n        _null = 'color:magenta',\n        _key = 'color:red';\n\n    json = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {\n        var style = _number;\n        if (/^\"/.test(match)) {\n            if (/:$/.test(match)) {\n                style = _key;\n            } else {\n                style = _string;\n            }\n        } else if (/true|false/.test(match)) {\n            style = _boolean;\n        } else if (/null/.test(match)) {\n            style = _null;\n        }\n        arr.push(style);\n        arr.push('');\n        return '%c' + match + '%c';\n    });\n\n    arr.unshift(json);\n\n    console.log.apply(console, arr);\n}\n</code></pre>\n\n<p>Here is a bookmarklet you can use:</p>\n\n<pre><code>javascript:function JSONstringify(json) {if (typeof json != 'string') {json = JSON.stringify(json, undefined, '\\t');}var arr = [],_string = 'color:green',_number = 'color:darkorange',_boolean = 'color:blue',_null = 'color:magenta',_key = 'color:red';json = json.replace(/(\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?|\\b(true|false|null)\\b|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?)/g, function (match) {var style = _number;if (/^\"/.test(match)) {if (/:$/.test(match)) {style = _key;} else {style = _string;}} else if (/true|false/.test(match)) {style = _boolean;} else if (/null/.test(match)) {style = _null;}arr.push(style);arr.push('');return '%c' + match + '%c';});arr.unshift(json);console.log.apply(console, arr);};void(0);\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>var obj = {a:1, 'b':'foo', c:[false,null, {d:{e:1.3e5}}]};\nJSONstringify(obj);\n</code></pre>\n\n<p>Edit: I just tried to escape the % symbol with this line, after the variables declaration:</p>\n\n<pre><code>json = json.replace(/%/g, '%%');\n</code></pre>\n\n<p>But I find out that Chrome is not supporting % escaping in the console. Strange... Maybe this will work in the future.</p>\n\n<p>Cheers!</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I ran into an issue today with @Pumbaa80's code. I'm trying to apply JSON syntax highlighting to data that I'm rendering in a <a href=\"http://lhorie.github.io/mithril/\" rel=\"nofollow\">Mithril</a> view, so I need to create DOM nodes for everything in the JSON.stringify output.</p>\n\n<p>I split the really long regex into its component parts as well.</p>\n\n<pre class=\"lang-coffee prettyprint-override\"><code>render_json = (data) -&gt;\n  # wraps JSON data in span elements so that syntax highlighting may be\n  # applied. Should be placed in a `whitespace: pre` context\n  if typeof(data) isnt 'string'\n    data = JSON.stringify(data, undefined, 2)\n  unicode =     /\"(\\\\u[a-zA-Z0-9]{4}|\\\\[^u]|[^\\\\\"])*\"(\\s*:)?/\n  keyword =     /\\b(true|false|null)\\b/\n  whitespace =  /\\s+/\n  punctuation = /[,.}{\\[\\]]/\n  number =      /-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/\n\n  syntax = '(' + [unicode, keyword, whitespace,\n            punctuation, number].map((r) -&gt; r.source).join('|') + ')'\n  parser = new RegExp(syntax, 'g')\n\n  nodes = data.match(parser) ? []\n  select_class = (node) -&gt;\n    if punctuation.test(node)\n      return 'punctuation'\n    if /^\\s+$/.test(node)\n      return 'whitespace'\n    if /^\\\"/.test(node)\n      if /:$/.test(node)\n        return 'key'\n      return 'string'\n\n    if /true|false/.test(node)\n      return 'boolean'\n\n     if /null/.test(node)\n       return 'null'\n     return 'number'\n  return nodes.map (node) -&gt;\n    cls = select_class(node)\n    return Mithril('span', {class: cls}, node)\n</code></pre>\n\n<p>Code in context on Github <a href=\"https://github.com/justjake/squidwork/blob/f0ed0a2dd25f5182ae792da0695e46ec86a665f9/squidwork/web/monitor/templates/app.coffee#L48\" rel=\"nofollow\">here</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I recommend using <strong><a href=\"https://highlightjs.org\" rel=\"nofollow\">HighlightJS</a></strong>. It uses the <strong>same principle</strong> as the accepted answer, but works also for <strong>many other languages</strong>, and has <strong>many pre-defined colour schemes</strong>. If using <a href=\"http://requirejs.org/\" rel=\"nofollow\">RequireJS</a>, you can generate a compatible module with</p>\n\n<pre><code>python3 tools/build.py -tamd json xml &lt;specify other language here&gt;\n</code></pre>\n\n<p>Generation relies on Python3 and Java. Add <code>-n</code> to generate a non-minified version.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How can I display JSON in an easy-to-read (for human readers) format? I'm looking primarily for indentation and whitespace, with perhaps even colors / font-styles / etc.</p>\n",
            "last_activity_date": 1424356402,
            "question_id": 4810841,
            "score": 438,
            "tags": [
                "javascript",
                "json",
                "pretty-print"
            ],
            "title": "How can I pretty-print JSON using JavaScript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>One thing to note is that ngModel is <em>required</em> for ngOptions to work... note the <code>ng-model=\"blah\"</code> which is saying \"set $scope.blah to the selected value\".</p>\n\n<p>Try this:</p>\n\n<pre><code>&lt;select ng-model=\"blah\" ng-options=\"item.ID as item.Title for item in items\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>Here's more from Angular's documentation (if you haven't seen it):</p>\n\n<blockquote>\n  <p>for array data sources:</p>\n  \n  <ul>\n  <li>label for value in array</li>\n  <li>select as label for value in array</li>\n  <li>label group by group for value in array\n  = select as label group by group for value in array</li>\n  </ul>\n  \n  <p>for object data sources:</p>\n  \n  <ul>\n  <li>label for (key , value) in object</li>\n  <li>select as label for (key , value) in object</li>\n  <li>label group by group for (key, value) in object</li>\n  <li>select as label group by group for (key, value) in object</li>\n  </ul>\n</blockquote>\n\n<hr>\n\n<h2>EDIT: For some clarification on option tag values in Angular</h2>\n\n<p>When you use <code>ng-options</code>, <strong>the values of option tags written out by ng-options will always be the index of the array item the option tag relates to</strong>. This is because Angular actually allows you to select entire objects with select controls, and not just primitive types. For example:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>app.controller('MainCtrl', function($scope) {\n   $scope.items = [\n     { id: 1, name: 'foo' },\n     { id: 2, name: 'bar' },\n     { id: 3, name: 'blah' }\n   ];\n});\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div ng-controller=\"MainCtrl\"&gt;\n   &lt;select ng-model=\"selectedItem\" ng-options=\"item as item.name for item in items\"&gt;&lt;/select&gt;\n   &lt;pre&gt;{{selectedItem | json}}&lt;/pre&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The above will allow you to select an entire object into <code>$scope.selectedItem</code> directly. <strong>The point is, with Angular, you don't need to worry about what's in your option tag. Let Angular handle that, you should only care about what's in your model in your scope.</strong></p>\n\n<p><a href=\"http://plnkr.co/edit/SxIvt4KThWLtWvh3PnOh?p=preview\">Here is a plunker demonstrating the behavior above, and showing the html written out</a></p>\n\n<hr>\n\n<h2>EDIT 2: Dealing with the default option:</h2>\n\n<p>There are a few things I've failed to mention above relating to the default option.</p>\n\n<p><strong>Selecting first option and removing the empty option:</strong></p>\n\n<p>You can do this by adding a simple <code>ng-init</code> that sets the model (from <code>ng-model</code>) to the first element in the items your repeating in <code>ng-options</code>:</p>\n\n<pre><code>&lt;select ng-init=\"foo = foo || items[0]\" ng-model=\"foo\" ng-options=\"item as item.name for item in items\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>Note: this could get a little crazy if foo happens to be initialized properly to something \"falsy\". In that case, you'll want to handle the initialization of foo in your controller, most likely.</p>\n\n<p><strong>Customizing the default option:</strong></p>\n\n<p>This is a little different, here all you need to do is add an option tag as a child of your select, with an empty value attribute, then customize it's inner text:</p>\n\n<pre><code>&lt;select ng-model=\"foo\" ng-options=\"item as item.name for item in items\"&gt;\n   &lt;option value=\"\"&gt;Nothing selected&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>Note: that in this case the \"empty\" option will stay there even after you select a different option. This isn't the case for the default behavior of selects under Angular.</p>\n\n<p><strong>A customized default option that hides after a selection is made:</strong></p>\n\n<p>If you wanted your customized default option to go away after you select a value, you can add an ng-hide attribute to your default option:</p>\n\n<pre><code>&lt;select ng-model=\"foo\" ng-options=\"item as item.name for item in items\"&gt;\n   &lt;option value=\"\" ng-if=\"foo\"&gt;Select something to remove me.&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 394
                },
                {
                    "body": "<p>I'm learning angularjs and was struggling with selection as well. I know this question is already answered but wanted to share some more code nevertheless. </p>\n\n<p>In my test I have two listboxes: car makes and car models. Models list is disabled until some make is selected. If selection in makes listbox is later reset (set to 'Select Make') then models listbox becomes disabled again AND its selection is reset as well (to 'Select Model'). Makes are retrieved as resource while models are just hard-coded.</p>\n\n<p>Makes JSON:</p>\n\n<pre><code>[\n{\"code\": \"0\", \"name\": \"Select Make\"},\n{\"code\": \"1\", \"name\": \"Acura\"},\n{\"code\": \"2\", \"name\": \"Audi\"}\n]\n</code></pre>\n\n<p>services.js:</p>\n\n<pre><code>angular.module('makeServices', ['ngResource']).\nfactory('Make', function($resource){\n    return $resource('makes.json', {}, {\n        query: {method:'GET', isArray:true}\n    });\n});\n</code></pre>\n\n<p>HTML file:</p>\n\n<pre><code>&lt;div ng:controller=\"MakeModelCtrl\"&gt;\n  &lt;div&gt;Make&lt;/div&gt;\n  &lt;select id=\"makeListBox\" \n      ng-model=\"make.selected\" \n      ng-options=\"make.code as make.name for make in makes\"\n      ng-change=\"makeChanged(make.selected)\"&gt;\n  &lt;/select&gt;\n\n  &lt;div&gt;Model&lt;/div&gt;\n  &lt;select id=\"modelListBox\"\n     ng-disabled=\"makeNotSelected\"\n     ng-model=\"model.selected\"\n     ng-options=\"model.code as model.name for model in models\"&gt;\n  &lt;/select&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>controllers.js:</p>\n\n<pre><code>function MakeModelCtrl($scope)\n{\n    $scope.makeNotSelected = true;\n    $scope.make = {selected: \"0\"};\n    $scope.makes = Make.query({}, function (makes) {\n         $scope.make = {selected: makes[0].code};\n    });\n\n    $scope.makeChanged = function(selectedMakeCode) {\n        $scope.makeNotSelected = !selectedMakeCode;\n        if ($scope.makeNotSelected)\n        {\n            $scope.model = {selected: \"0\"};\n        }\n    };\n\n    $scope.models = [ \n      {code:\"0\", name:\"Select Model\"}, \n      {code:\"1\", name:\"Model1\"}, \n      {code:\"2\", name:\"Model2\"} \n    ];\n    $scope.model = {selected: \"0\"};\n}\n</code></pre>\n\n<p>Hope it makes sense and will help to somebody.</p>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<p>In Coffeescript:    </p>\n\n<pre><code>#directive\napp.directive('select2',-&gt;\n        templateUrl: 'partials/select.html'\n        restrict: 'E'\n        transclude: 1\n        replace: 1\n        scope:\n            options: '='\n            model: '='\n        link: (scope, el, atr)-&gt;\n            el.bind 'change', -&gt;\n                console.log this.value\n                scope.model = parseInt(this.value)\n                console.log scope\n                scope.$apply()\n    )\n&lt;!--html partial--&gt;\n&lt;select&gt;\n&lt;option ng-repeat='o in options'\n    value='{{$index}}' ng-bind='o'&gt;&lt;/option&gt;\n&lt;/select&gt;\n&lt;!--html usage--&gt;\n&lt;select2 options='mnuOffline' model='offlinePage.toggle' &gt;&lt;/select2&gt;\n&lt;!--conclusion--&gt;\n&lt;p&gt;Sometimes its much easier to create your own directive..&lt;/p&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I highly recommend using Select2 (<a href=\"http://ivaynberg.github.io/select2/#basics\" rel=\"nofollow\">http://ivaynberg.github.io/select2/#basics</a>) because it will handle this for you.  There is even a directive for angular (<a href=\"https://github.com/angular-ui/ui-select2\" rel=\"nofollow\">https://github.com/angular-ui/ui-select2</a>). </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For some reason Angular allows get's me confused. Their docs are pretty horrible on this. More good examples of variations would be welcome.</p>\n\n<p>Anyway, I have a slight variation on Ben Lesh's answer.</p>\n\n<p>My data collections looks like this:</p>\n\n<pre><code>items =\n[\n   { key:\"AD\",value:\"Andorra\" }\n,  { key:\"AI\",value:\"Anguilla\" }\n,  { key:\"AO\",value:\"Angola\" }\n ...etc..\n]\n</code></pre>\n\n<p>Now this :</p>\n\n<pre><code>&lt;select ng-model=\"countries\" ng-options=\"item.key as item.value for item in items\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>still resulted in the options value to be the index (0,1,2...etc).</p>\n\n<p>Adding Track By fixed it for me:</p>\n\n<pre><code>&lt;select ng-model=\"blah\" ng-options=\"item.value for item in items track by item.key\"&gt;&lt;/select&gt;\n</code></pre>\n\n<p>I reckon it happens more often that you want to add a array of objects into an select list, so I am going to remember this one!</p>\n\n<p>Thanks all for assisting.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Altually there is a pure angular solution developed by <strong>QuantumUI</strong>.</p>\n\n<p>You can find more examples and documentations here</p>\n\n<p><a href=\"http://angularui.net/appdoc/documents/quantumui/select/\" rel=\"nofollow\">http://angularui.net/appdoc/documents/quantumui/select/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have read about it in other posts but couldn't figure out. \nI have array:</p>\n\n<pre><code>$scope.items = [\n   {ID: '000001', Title: 'Chicago'},\n   {ID: '000002', Title: 'New York'},\n   {ID: '000003', Title: 'Washington'},\n];\n</code></pre>\n\n<p>I want to render this</p>\n\n<pre><code>&lt;select&gt;\n  &lt;option value=\"000001\"&gt;Chicago&lt;/option&gt;\n  &lt;option value=\"000002\"&gt;New York&lt;/option&gt;\n  &lt;option value=\"000003\"&gt;Washington&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>And also I want to select option with ID=000002.</p>\n\n<p>I have read this <a href=\"http://docs.angularjs.org/api/ng.directive%3aselect\">http://docs.angularjs.org/api/ng.directive:select</a> and tried but can't figure out.</p>\n",
            "last_activity_date": 1425897191,
            "question_id": 13047923,
            "score": 181,
            "tags": [
                "javascript",
                "angularjs"
            ],
            "title": "Working with select using Angular&#39;s ng-options"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>You may want to use the <a href=\"http://api.jquery.com/appendTo/\"><code>appendTo</code></a> function (which adds to the end of the element):</p>\n\n<pre><code>$(\"#source\")\n    .appendTo(\"#destination\");\n</code></pre>\n\n<p>Alternatively you could use the <a href=\"http://api.jquery.com/prependTo/\"><code>prependTo</code></a> function (which adds to the beginning of the element):</p>\n\n<pre><code>$(\"#source\")\n    .prependTo(\"#destination\");\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 914
                },
                {
                    "body": "<p>no way good using appendTo or prependTo; it is much more practical invoke jquery method before() and after()</p>\n",
                    "is_accepted": false,
                    "score": -27
                },
                {
                    "body": "<p>I just used:</p>\n\n<blockquote>\n  <p>$('#source').prependTo('#destination');</p>\n</blockquote>\n\n<p>Which I grabbed from:\n<a href=\"http://www.elated.com/articles/jquery-removing-replacing-moving-elements/\">http://www.elated.com/articles/jquery-removing-replacing-moving-elements/</a></p>\n",
                    "is_accepted": false,
                    "score": 78
                },
                {
                    "body": "<h1>Append</h1>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p><em><strong>if the <code>div</code> where you want to put your <code>element</code> has content inside, and you want the <code>element</code> to show <code>after the main content</code> use:</em></strong></p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<pre><code>  $(\"#element\").append($(\"#other_element\"));\n</code></pre>\n\n<h1>Prepend</h1>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p><em><strong>if the <code>div</code> where you want to put your <code>element</code> has content inside, and you want to show the <code>element</code>  <code>before the main content</code> use:</em></strong></p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<pre><code>$(\"#element\").prepend($(\"#other_element\"));\n</code></pre>\n\n<h1>Put inside and replace content</h1>\n\n<blockquote>\n  <blockquote>\n    <blockquote>\n      <p><em><strong>if the <code>div</code> where you want to put your <code>element</code> <code>has NO content</code> you can use both <code>append()</code> or <code>prepend()</code> but you can use better:</em></strong></p>\n    </blockquote>\n  </blockquote>\n</blockquote>\n\n<pre><code>$(\"#element\").html(\"&lt;div&gt; my div will be putted inside #element &lt;/div&gt;\");\n</code></pre>\n\n<h1>Cloning , then append, prepend, put inside</h1>\n\n<p><em><strong>if you want to <code>clone</code> an <code>element</code> and <code>prepend</code> or <code>append</code> or <code>put</code> that inside replacing content, you can first do:</em></strong></p>\n\n<pre><code>var _elementClone = $(\"#element\").clone(); \n</code></pre>\n\n<p>or</p>\n\n<pre><code>var _elementClone = $(\"#element\").html();\n</code></pre>\n\n<p>then, you can choose from :</p>\n\n<pre><code>$(\"#mydiv\").html(_elementClone); //this will replace #mydiv content with the element cloned\n\n$(\"#mydiv\").append(_elementClone); //this will append cloned element to the #mydiv content\n\n$(\"#mydiv\").prepend(_elementClone);//this will prepend cloned  element to the #mydiv content\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>you may also try </p>\n\n<blockquote>\n  <p>$(\"#destination\").html($(\"#source\"))</p>\n</blockquote>\n\n<p>but this will completely overwrite anything you have in #destination</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use:</p>\n\n<p>To Insert After,</p>\n\n<pre><code>jQuery(\"#source\").insertAfter(\"#destination\");\n</code></pre>\n\n<p>To Insert inside another element,</p>\n\n<pre><code>jQuery(\"#source\").appendTo(\"#destination\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>my solution:<br><br>\nMOVE:</p>\n\n<pre><code>jQuery(\"#NodesToMove\").detach().appendTo('#DestinationContainerNode')\n</code></pre>\n\n<p>COPY:</p>\n\n<pre><code>jQuery(\"#NodesToMove\").appendTo('#DestinationContainerNode')\n</code></pre>\n\n<p>note .detach() use. When copy be careful do not duplicate id's.</p>\n",
                    "is_accepted": false,
                    "score": 268
                },
                {
                    "body": "<p>I noticed huge memory leak &amp; performance difference between insertAfter &amp; after or insertBefore &amp; before .. If you have tons of DOM elements, or you need to use after() or before() inside a MouseMove event, the browser memory will probably increase and next operations will run really slow. The solution I've just experienced is to use inserBefore instead before() and insertAfter instead after().</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Old question but got here because I need to move content from one container to another <strong>including all the event listeners</strong>.</p>\n\n<p>jQuery doesn't have a way to do it but standard DOM function appendChild does.</p>\n\n<pre><code>//assuming only one .source and one .target\n$('.source').on('click',function(){console.log('I am clicked');});\n$('.target')[0].appendChild($('.source')[0]);\n</code></pre>\n\n<p>Using appendChild removes the .source and places it into target including it's event listeners: <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Node.appendChild\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/Node.appendChild</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want a quick demo and more details about how you move elements, try this link:</p>\n\n<p><a href=\"http://html-tuts.com/move-div-in-another-div-with-jquery\" rel=\"nofollow\">http://html-tuts.com/move-div-in-another-div-with-jquery</a></p>\n\n<hr>\n\n<p><strong>Here is a short example:</strong></p>\n\n<p>To move ABOVE an element:</p>\n\n<pre><code>$('.whatToMove').insertBefore('.whereToMove');\n</code></pre>\n\n<p>To move AFTER an element:</p>\n\n<pre><code>$('.whatToMove').insertAfter('.whereToMove');\n</code></pre>\n\n<p>To move inside an element, ABOVE ALL elements inside that container:</p>\n\n<pre><code>$('.whatToMove').prependTo('.whereToMove');\n</code></pre>\n\n<p>To move inside an element, AFTER ALL elements inside that container:</p>\n\n<pre><code>$('.whatToMove').appendTo('.whereToMove');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I would like to move one DIV element inside another. For example, I want to move this (including all children):</p>\n\n<pre><code>&lt;div id=\"source\"&gt;\n...\n&lt;/div&gt;\n</code></pre>\n\n<p>into this:</p>\n\n<pre><code>&lt;div id=\"destination\"&gt;\n...\n&lt;/div&gt;\n</code></pre>\n\n<p>so that I have this:</p>\n\n<pre><code>&lt;div id=\"destination\"&gt;\n  &lt;div id=\"source\"&gt;\n    ...\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
            "last_activity_date": 1424210593,
            "question_id": 1279957,
            "score": 683,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "How to move an element into another element?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>What you want is the <strong><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice</code></a></strong> function on the native array object.</p>\n\n<p>In this example we will create an array and add an element to it into index 2:</p>\n\n<pre><code>var arr = [];\narr[0] = \"Jani\";\narr[1] = \"Hege\";\narr[2] = \"Stale\";\narr[3] = \"Kai Jim\";\narr[4] = \"Borge\";\n\nconsole.log(arr.join());\narr.splice(2, 0, \"Lene\");\nconsole.log(arr.join());\n</code></pre>\n\n<p>The output of the code above will be:</p>\n\n<pre><code>Jani,Hege,Stale,Kai Jim,Borge\nJani,Hege,Lene,Stale,Kai Jim,Borge\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1031
                },
                {
                    "body": "<p>If you want to insert multiple elements into an array at once check out this Stack Overflow answer: <a href=\"http://stackoverflow.com/questions/1348178/a-better-way-to-splice-an-arrray-into-an-array-in-javascript\">A better way to splice an arrray into an array in javascript</a></p>\n\n<p>Also here are some functions to illustrate both examples:</p>\n\n<pre><code>function insertAt(array, index) {\n    var arrayToInsert = Array.prototype.splice.apply(arguments, [2]);\n    return insertArrayAt(array, index, arrayToInsert);\n}\n\nfunction insertArrayAt(array, index, arrayToInsert) {\n    Array.prototype.splice.apply(array, [index, 0].concat(arrayToInsert));\n    return array;\n}\n</code></pre>\n\n<p>Finally here is a jsFiddle so you can see it for youself: <a href=\"http://jsfiddle.net/luisperezphd/Wc8aS/\">http://jsfiddle.net/luisperezphd/Wc8aS/</a></p>\n\n<p>And this is how you use the functions:</p>\n\n<pre><code>// if you want to insert specific values whether constants or variables:\ninsertAt(arr, 1, \"x\", \"y\", \"z\");\n\n// OR if you have an array:\nvar arrToInsert = [\"x\", \"y\", \"z\"];\ninsertArrayAt(arr, 1, arrToInsert);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>you can implement the Array.insert method by doing this:</p>\n\n<pre><code>Array.prototype.insert = function (index, item) {\n  this.splice(index, 0, item);\n};\n</code></pre>\n\n<p>then you can use it like:</p>\n\n<pre><code>var arr = [ 'A', 'B', 'D', 'E' ];\narr.insert(2, 'C');\n\n// =&gt; arr == [ 'A', 'B', 'C', 'D', 'E' ]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 98
                },
                {
                    "body": "<h1>Custom array <code>insert</code> methods</h1>\n\n<h3><em>1. With multiple arguments and chaining support</em></h3>\n\n<pre><code>/* Syntax:\n   array.insert(index, value1, value2, ..., valueN) */\n\nArray.prototype.insert = function(index) {\n    this.splice.apply(this, [index, 0].concat(\n        Array.prototype.slice.call(arguments, 1)));\n    return this;\n};\n</code></pre>\n\n<p>It can insert multiple elements (as native <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice\"><code>splice</code></a> does) and supports chaining:</p>\n\n<pre><code>[\"a\", \"b\", \"c\", \"d\"].insert(2, \"X\", \"Y\", \"Z\").slice(1, 6);\n// [\"b\", \"X\", \"Y\", \"Z\", \"c\"]\n</code></pre>\n\n<hr>\n\n<h3><em>2. With array-type arguments merging and chaining support</em></h3>\n\n<pre><code>/* Syntax:\n   array.insert(index, value1, value2, ..., valueN) */\n\nArray.prototype.insert = function(index) {\n    index = Math.min(index, this.length);\n    arguments.length &gt; 1\n        &amp;&amp; this.splice.apply(this, [index, 0].concat([].pop.call(arguments)))\n        &amp;&amp; this.insert.apply(this, arguments);\n    return this;\n};\n</code></pre>\n\n<p>It can merge arrays from the arguments with the given array and also supports chaining:</p>\n\n<pre><code>[\"a\", \"b\", \"c\", \"d\"].insert(2, \"V\", [\"W\", \"X\", \"Y\"], \"Z\").join(\"-\");\n// \"a-b-V-W-X-Y-Z-c-d\"\n</code></pre>\n\n<p><strong>DEMO:</strong> <a href=\"http://jsfiddle.net/UPphH/\">http://jsfiddle.net/UPphH/</a></p>\n",
                    "is_accepted": false,
                    "score": 27
                }
            ],
            "body": "<p>I am looking for a JavaScript array insert method, in the style of:</p>\n\n<pre><code>arr.insert(index, item)\n</code></pre>\n\n<p>Preferably in jQuery, but any JavaScript implementation will do at this point because I can't believe the trouble I'm having finding such a basic function! Thanks for your help.</p>\n",
            "last_activity_date": 1397262541,
            "question_id": 586182,
            "score": 587,
            "tags": [
                "javascript",
                "arrays",
                "insert"
            ],
            "title": "Insert Item into Array at a Specific Index"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Use Firebug, enable both Console and Javascript.  Click Profile.  Reload.  Click Profile again.  View the report.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getTime\">Date().getTime()</a></p>\n\n<blockquote>\n  <p>The getTime() method returns the number of milliseconds since midnight of January 1, 1970.</p>\n</blockquote>\n\n<p>ex.</p>\n\n<pre><code>var start = new Date().getTime();\n\nfor (i = 0; i &lt; 50000; ++i) {\n// do something\n}\n\nvar end = new Date().getTime();\nvar time = end - start;\nalert('Execution time: ' + time);\n</code></pre>\n\n<p>alternatively, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds\">getMilliseconds()</a> will give the milliseconds of the current Date object.</p>\n",
                    "is_accepted": true,
                    "score": 318
                },
                {
                    "body": "<p>You can use <strong><a href=\"https://developer.mozilla.org/en-US/docs/DOM/console.time\">console.time</a></strong>: <em>(non-standard)</em></p>\n\n<pre><code>console.time('someFunction');\n\nsomeFunction(); // run whatever needs to be timed in between the statements\n\nconsole.timeEnd('someFunction');\n</code></pre>\n\n<p><strong><em>Note</strong>:</em> <br>The string being pass to the <code>time()</code> and <code>timeEnd()</code> methods must match<br>(for <em>the timer to finish as expected).</em></p>\n\n<p><br></p>\n\n<h3>Update</h3>\n\n<p>You could use the standard <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance.now\"><strong>performance.now()</strong></a> API, like so:</p>\n\n<pre><code>var t0 = performance.now();\ndoSomething();\nvar t1 = performance.now();\nconsole.log(\"Call to doSomething took \" + (t1 - t0) + \" milliseconds.\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 342
                },
                {
                    "body": "<h2>Don't use Date(). Read below.</h2>\n\n<p><strong>Use <a href=\"http://updates.html5rocks.com/2012/08/When-milliseconds-are-not-enough-performance-now\"><code>performance.now()</code></a></strong>:</p>\n\n<pre><code>&lt;script&gt;\nvar a = performance.now();\nalert('do something...');\nvar b = performance.now();\nalert('It took ' + (b - a) + ' ms.');\n&lt;/script&gt;\n</code></pre>\n\n<p>It works on: </p>\n\n<ul>\n<li><p>IE 10 ++</p></li>\n<li><p>FireFox 15 ++</p></li>\n<li><p>Chrome 24 ++</p></li>\n<li><p>Safari 8 ++</p></li>\n<li><p>Opera 15 ++ </p></li>\n<li><p>Android 4.4 ++</p></li>\n<li><p><a href=\"http://caniuse.com/#search=performance.now\">etc, etc</a></p></li>\n</ul>\n\n<p><code>console.time</code> may be viable <strong>for you</strong>, but it's non-standard <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Console.time\">&sect;</a>:</p>\n\n<blockquote>\n  <p>This feature is non-standard and is not on a standards track. Do not use it on production sites facing the Web: it will not work for every user. There <strong>may also be large incompatibilities between implementations</strong> and the behavior may change in the future.</p>\n</blockquote>\n\n<p>Besides browser support, <code>performance.now</code> seems to have the <em>potential</em> to provide more accurate timings as it appears to be the bare-bones version of <code>console.time</code>.</p>\n\n<hr>\n\n<p>&lt;rant> Also, <strong>DON'T EVER use <code>Date</code> for <em>anything</em></strong> because  it's affected by changes in \"system time\". Which means we <strong>will</strong> get invalid results &mdash;like \"negative timing\"&mdash; when the user doesn't have an accurate system time:</p>\n\n<blockquote>\n  <p>On Oct 2014, my system clock went haywire and <em>guess what</em>.... I opened Gmail and saw <em>all</em> of my day's emails \"sent <strong>0 minutes ago</strong>\". And I'd thought Gmail is supposed to be built by world-class engineers from Google.......</p>\n</blockquote>\n\n<p>(Set your system clock to one year ago and go to Gmail so we can all have a good laugh. Perhaps someday we will have a <a href=\"http://www.damnyouautocorrect.com/\">Hall of Shame</a> for JS <code>Date</code>.)</p>\n\n<p>Google Spreadsheet's <a href=\"https://support.google.com/docs/answer/3092981\"><code>now()</code></a> function also suffers from this problem.</p>\n\n<p>The only time you'll be using <code>Date</code> is when you want to show the user <strong>his</strong> system clock time. Not when you want to get <a href=\"http://vancouver-webpages.com/time/\"><strong>the</strong> time</a> or to measure anything.</p>\n",
                    "is_accepted": false,
                    "score": 148
                },
                {
                    "body": "<p>To extend vsync's code further to have the ability to return the timeEnd as a value in NodeJS use this little piece of code.</p>\n\n<pre><code>console.timeEndValue = function(label) { // Add console.timeEndValue, to add a return value\n   var time = this._times[label];\n   if (!time) {\n     throw new Error('No such label: ' + label);\n   }\n   var duration = Date.now() - time;\n   return duration;\n};\n</code></pre>\n\n<p>Now use the code like so:</p>\n\n<pre><code>console.time('someFunction timer');\n\nsomeFunction();\n\nvar executionTime = console.timeEndValue('someFunction timer');\nconsole.log(\"The execution time is \" + executionTime);\n</code></pre>\n\n<p><br>This gives you more possibilities. You can store the execution time to be used for more purposes like using it in equations, or stored in a database, sent to a remote client over websockets, served on a webpage, etc.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>var StopWatch = function (performance) {\n    this.startTime = 0;\n    this.stopTime = 0;\n    this.running = false;\n    this.performance = performance === false ? false : !!window.performance;\n};\n\nStopWatch.prototype.currentTime = function () {\n    return this.performance ? window.performance.now() : new Date().getTime();\n};\n\nStopWatch.prototype.start = function () {\n    this.startTime = this.currentTime();\n    this.running = true;\n};\n\nStopWatch.prototype.stop = function () {\n    this.stopTime = this.currentTime();\n    this.running = false;\n};\n\nStopWatch.prototype.getElapsedMilliseconds = function () {\n    if (this.running) {\n        this.stopTime = this.currentTime();\n    }\n\n    return this.stopTime - this.startTime;\n};\n\nStopWatch.prototype.getElapsedSeconds = function () {\n    return this.getElapsedMilliseconds() / 1000;\n};\n\nStopWatch.prototype.printElapsed = function (name) {\n    var currentName = name || 'Elapsed:';\n\n    console.log(currentName, '[' + this.getElapsedMilliseconds() + 'ms]', '[' + this.getElapsedSeconds() + 's]');\n};\n</code></pre>\n\n<p>Benchmark</p>\n\n<pre><code>var stopwatch = new StopWatch();\nstopwatch.start();\n\nfor (var index = 0; index &lt; 100; index++) {\n    stopwatch.printElapsed('Instance[' + index + ']');\n}\n\nstopwatch.stop();\n\nstopwatch.printElapsed();\n</code></pre>\n\n<p>Output</p>\n\n<pre><code>Instance[0] [0ms] [0s]\nInstance[1] [2.999999967869371ms] [0.002999999967869371s]\nInstance[2] [2.999999967869371ms] [0.002999999967869371s]\n/* ... */\nInstance[99] [10.999999998603016ms] [0.010999999998603016s]\nElapsed: [10.999999998603016ms] [0.010999999998603016s]\n</code></pre>\n\n<p><a href=\"http://updates.html5rocks.com/2012/08/When-milliseconds-are-not-enough-performance-nowhttp://updates.html5rocks.com/2012/08/When-milliseconds-are-not-enough-performance-now\">performance.now()</a> is optional - just pass false into StopWatch constructor function.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p><strong>If you need to get function execution time on your local development machine</strong>, you can either use your browser's profiling tools, or console commands such as <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console.time\"><code>console.time()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console.timeEnd\"><code>console.timeEnd()</code></a>.</p>\n\n<p>All modern browsers have JavaScript profilers built-in.  These profilers should give the most accurate measurement as you do not have to modify your existing code, which could affect the function's execution time.</p>\n\n<p>To profile your JavaScript:</p>\n\n<ul>\n<li>In <strong>Chrome</strong>, press <em>F12</em> and select the <em>Profiles</em> tab, then <em>Collect JavaScript CPU Profile</em>.</li>\n<li>In <strong>Firefox</strong>, install/open Firebug, and click on the <em>Profile</em> button.  </li>\n<li>In <strong>IE 9+</strong>, press <em>F12</em>, click on <em>Script</em> or <em>Profiler</em> (depending on your version of IE).</li>\n</ul>\n\n<p><strong>Alternatively, on your development machine</strong>, you can add instrumentation to your code with <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console.time\"><code>console.time()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/console.timeEnd\"><code>console.timeEnd()</code></a>.  These functions, supported in Firefox11+, Chrome2+ and IE11+, report on timers that you start/stop via <code>console.time()</code>.  <code>time()</code> takes a user-defined timer name as an argument, and <code>timeEnd()</code> then reports on the execution time since the timer started:</p>\n\n<pre><code>function a() {\n  console.time(\"mytimer\");\n  ... do stuff ...\n  var dur = console.timeEnd(\"myTimer\"); // NOTE: dur only works in FF\n}\n</code></pre>\n\n<p>Note that only Firefox returns the elapsed time in the <code>timeEnd()</code> call.  The other browsers simply report the result to the developer console: the return value of <code>timeEnd()</code> is undefined.</p>\n\n<p><strong>If you want to get function execution time in the wild</strong>, you will have to instrument your code.  You have a couple options.  You can simply save the start and end times by querying <code>new Date().getTime()</code>:</p>\n\n<pre><code>function a() {\n  var start = new Date().getTime();\n  ... do stuff ...\n  var end = new Date().getTime();\n  var dur = end - start;\n}\n</code></pre>\n\n<p>However, the <code>Date</code> object only has millisecond resolution and will be affected by any OS's system clock changes.  In modern browsers, there's a better option.</p>\n\n<p>The better option is to use the <a href=\"http://www.w3.org/TR/hr-time/\">High Resolution Time</a>, aka <code>window.performance.now()</code>.  <code>now()</code> is better than the traditional <code>Date.getTime()</code> in two important ways:</p>\n\n<ol>\n<li><p><code>now()</code> is a double with submillisecond resolution that represents the number of milliseconds since the start of the page's navigation.  It returns the number of microseconds in the fractional (e.g. a value of 1000.123 is 1 second and 123 microseconds).</p></li>\n<li><p><code>now()</code> is monotonically increasing.  This is important as <code>Date.getTime()</code> can <em>possibly</em> jump forward or even backward on subsequent calls.  Notably, if the OS's system time is updated (e.g. atomic clock synchronization), <code>Date.getTime()</code> is also updated.  <code>now()</code> is guaranteed to always be monotonically increasing, so it is not affected by the OS's system time -- it will always be wall-clock time (assuming your wall clock is not atomic...).</p></li>\n</ol>\n\n<p><code>now()</code> can be used in almost every place that <code>new Date().getTime()</code>, <code>+ new Date</code> andt <code>Date.now()</code> are.  The exception is that <code>Date</code> and <code>now()</code> times don't mix, as <code>Date</code> is based on <a href=\"http://en.wikipedia.org/wiki/Unix_time\">unix-epoch</a> (the number of milliseconds since 1970), while <code>now()</code> is the number of milliseconds since your page navigation started (so it will be much smaller than <code>Date</code>).</p>\n\n<p>Here's an example of how to use <code>now()</code>:</p>\n\n<pre><code>function a() {\n  var start = window.performance.now();\n   ... do stuff ...\n  var end = window.performance.now();\n  var dur = end - start;\n}\n</code></pre>\n\n<p><code>now()</code> is supported in Chrome stable, Firefox 15+, and IE10.  There are also several <a href=\"https://gist.github.com/paulirish/5438650\">polyfills</a> available.</p>\n\n<p><strong>One other option for measuring execution time in the wild is <a href=\"http://www.w3.org/TR/user-timing/\">UserTiming</a></strong>.  UserTiming behaves similarly to <code>console.time()</code> and <code>console.timeEnd()</code>, but it utilizes the same High Resolution Timestamp that <code>now()</code> uses (so you get a sub-millisecond monotonically increasing clock), and saves the timestamps and durations to the <a href=\"http://www.w3.org/TR/performance-timeline/\">PerformanceTimeline</a>.</p>\n\n<p>UserTiming has the concepts of <em>marks</em> (timestamps) and <em>measures</em> (durations).  You can define as many of either as you want, and they're exposed on the <a href=\"http://www.w3.org/TR/performance-timeline/\">PerformanceTimeline</a>.</p>\n\n<p>To save a timestamp, you call <code>mark(startMarkName)</code>.  To get the duration since your first mark, you simply call <code>measure(measurename, startMarkname)</code>.  The duration is then saved in the PerformanceTimeline alongside your marks.</p>\n\n<pre><code>function a() {\n  window.performance.mark(\"start\");\n  ... do stuff ...\n  window.performance.measure(\"myfunctionduration\", \"start\");\n}\n\n// duration is window.performance.getEntriesByName(\"myfunctionduration\", \"measure\")[0];\n</code></pre>\n\n<p>UserTiming is available in IE10+ and Chrome25+.  There is also a <a href=\"https://github.com/nicjansma/usertiming.js\">polyfill</a> available (which I wrote).</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>As previously stated check for and use built in timer. But if you want or need to write your own here is my two cents:</p>\n\n<pre><code>//=-=|Source|=-=//\n/**\n * JavaScript Timer Object\n *\n *      var now=timer['elapsed'](); \n *      timer['stop']();\n *      timer['start']();\n *      timer['reset']();\n * \n * @expose\n * @method timer\n * @return {number}\n */\ntimer=function(){\n    var a=Date.now();\n    b=0;\n    return{\n        /** @expose */\n        elapsed:function(){return b=Date.now()-a},\n        start:function(){return a=Date.now()},\n        stop:function(){return Date.now()},\n        reset:function(){return a=0}\n    }\n}();\n\n//=-=|Google Advanced Optimized|=-=//\ntimer=function(){var a=Date.now();b=0;return{a:function(){return b=Date.now()-a},start:function(){return a=Date.now()},stop:function(){return Date.now()},reset:function(){return a=0}}}();\n</code></pre>\n\n<h3>Compilation was a success!</h3>\n\n<ul>\n<li>Original Size:    219 bytes gzipped (405 bytes uncompressed)</li>\n<li>Compiled Size:    109 bytes gzipped (187 bytes uncompressed)</li>\n<li>Saved 50.23% off the gzipped size (53.83% without gzip</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Since <code>console.time</code> and <code>performance.now</code> aren't supported in some mayor browsers (i.e. IE10), I created a slim utility that utilizes the best available method. Lacks error handling for false usage (calling <code>End()</code> on a not initialized timer. </p>\n\n<p>Use it and improve it as you want. </p>\n\n<pre><code>Performance: {\n    Timer: {},\n    Start: function (name) {\n        if (console &amp;&amp; console.time) {\n            console.time(name);\n        } else if (window.performance.now) {\n            this.Timer[name] = window.performance.now();\n        } else {\n            this.Timer[name] = new Date().getTime();\n        }\n    },\n    End: function (name) {\n        if (console &amp;&amp; console.time) {\n            console.timeEnd(name);\n        } else {\n            var result;\n            if (window.performance.now) {\n                result = window.performance.now() - this.Timer[name];\n            } else {\n                result = new Date().getTime() - this.Timer[name];\n            }\n            console.log(name + \": \" + result);\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The accepted answer is <strong>wrong</strong> ! </p>\n\n<p>Since JavaScript is asynchronous, the values of the variable end of the accepted answer would be wrong.</p>\n\n<pre><code>var start = new Date().getTime();\n\nfor (i = 0; i &lt; 50000; ++i) {\n// JavaScript is not waiting until the for is finished !!\n}\n\nvar end = new Date().getTime();\nvar time = end - start;\nalert('Execution time: ' + time); \n</code></pre>\n\n<p>The execution of the for may be very fast so you can not see that the result is wrong. You can test it with a code doing some request :</p>\n\n<pre><code>var start = new Date().getTime();\n\nfor (i = 0; i &lt; 50000; ++i) {\n  $.ajax({\n    url: 'www.oneOfYourWebsites.com',\n    success: function(){\n       console.log(\"success\");\n    }\n  });\n}\n\nvar end = new Date().getTime();\nvar time = end - start;\nalert('Execution time: ' + time); \n</code></pre>\n\n<p>So the alert will prompt very quickly but in the console you'll see that the ajax requests are continuing. </p>\n\n<p>Here is how you should do it : <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance.now\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/API/Performance.now</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>Date.getTime()</code> or <code>console.time()</code> are not good for measuring precise execution time. You can use them if quick rough estimate is OK for you. By rough estimate I mean you can get 15-60 ms shift from the real time.</p>\n\n<p>To get precise values you should use <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Performance\" rel=\"nofollow\">Performance interface</a>. It's supported in modern versions of Firefox, Chrome, Opera and IE. Here's an example of how it can be used:</p>\n\n<pre><code>var performance = window.performance;\nvar t0 = performance.now();\ndoWork();\nvar t1 = performance.now();\nconsole.log(\"Call to doWork took \" + (t1 - t0) + \" milliseconds.\")\n</code></pre>\n\n<p>Check this brilliant <a href=\"https://blog.mariusschulz.com/2013/11/22/measuring-execution-times-in-javascript-with-consoletime\" rel=\"nofollow\">post</a> on measuring execution time in JavaScript. The author also gives a couple of links about accuracy of JavaScript time, worth reading. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>process.hrtime() is available within <strong>Node.js</strong> - it returns a value in nanoseconds</p>\n\n<p>var hrTime = process.hrtime()\nconsole.log(hrTime[0] * 1000000 + hrTime[1] / 1000)</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to get execution time in milliseconds.</p>\n",
            "last_activity_date": 1426067344,
            "question_id": 313893,
            "score": 279,
            "tags": [
                "javascript",
                "profiling"
            ],
            "title": "How to measure time taken by a function to execute"
        }
    ]
}
