{
    "items": [
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>You can use <code>document.getElementById('divId').className.split(/\\s+/);</code> to get you an array of class names.</p>\n\n<p>Then you can iterate and find the one you want.</p>\n\n<pre><code>var classList = document.getElementById('divId').className.split(/\\s+/);\nfor (var i = 0; i &lt; classList.length; i++) {\n   if (classList[i] === 'someClass') {\n     //do something\n   }\n}\n</code></pre>\n\n<p>jQuery does not really help you here.....</p>\n\n<pre><code>var classList =$('#divId').attr('class').split(/\\s+/);\n$.each( classList, function(index, item){\n    if (item === 'someClass') {\n       //do something\n    }\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 408
                },
                {
                    "body": "<p>A bit late, but using the extend() function lets you call \"hasClass()\" on any element, e.g.:\n<br/><code>var hasClass = $('#divId').hasClass('someClass');</code></p>\n\n<pre><code>(function($) {\n$.extend({\n    hasClass: new function(className) {\n        var classAttr = $J(this).attr('class');\n        if (classAttr != null &amp;&amp; classAttr != undefined) {\n            var classList = classAttr.split(/\\s+/);\n            for(var ix = 0, len = classList.length;ix &lt; len;ix++) {\n                if (className === classList[ix]) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n}); })(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>On supporting browsers, you can use DOM elements' <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/element.classList\"><code>classList</code></a> property.</p>\n\n<pre><code>$(element)[0].classList\n</code></pre>\n\n<p>It is an array-like object listing all of the classes the element has.</p>\n\n<p>If you need to support old browser versions that don't support the <code>classList</code> property, the linked MDN page also includes a shim for it - although even the shim won't work on Internet Explorer versions below IE 8.</p>\n",
                    "is_accepted": false,
                    "score": 60
                },
                {
                    "body": "<p>Thanks for this - I was having a similar issue, as I'm trying to programatically relate objects will hierarchical class names, even though those names might not necessarily be known to my script.</p>\n\n<p>In my script, I want an <code>&lt;a&gt;</code> tag to turn help text on/off by giving the <code>&lt;a&gt;</code> tag <code>[some_class]</code> plus the class of <code>toggle</code>, and then giving it's help text the class of <code>[some_class]_toggle</code>. This code is successfully finding the related elements using jQuery: </p>\n\n<pre><code>$(\"a.toggle\").toggle(function(){toggleHelp($(this), false);}, function(){toggleHelp($(this), true);});\n\nfunction toggleHelp(obj, mode){\n    var classList = obj.attr('class').split(/\\s+/);\n    $.each( classList, function(index, item){\n    if (item.indexOf(\"_toggle\") &gt; 0) {\n       var targetClass = \".\" + item.replace(\"_toggle\", \"\");\n       if(mode===false){$(targetClass).removeClass(\"off\");}\n       else{$(targetClass).addClass(\"off\");}\n    }\n    });\n} \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here you go, just tweaked <strong>readsquare</strong>'s answer to return an array of all classes:</p>\n\n<pre><code>function classList(elem){\n   var classList = elem.attr('class').split(/\\s+/);\n    var classes = new Array(classList.length);\n    $.each( classList, function(index, item){\n        classes[index] = item;\n    });\n\n    return classes;\n}\n</code></pre>\n\n<p>Pass a jQuery element to the function, so that a sample call will be:</p>\n\n<pre><code>var myClasses = classList($('#myElement'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Why has no one simply listed.</p>\n\n<pre><code>  $(element).attr(\"class\").split(' ');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 71
                },
                {
                    "body": "<pre><code>var classList = $(element).attr('class').split(/\\s+/);\n$(classList).each(function(index){\n\n     //do something\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Here is a jQuery plugin which will return an array of all the classes the matched element(s) have</p>\n\n<pre><code>;!(function ($) {\n    $.fn.classes = function (callback) {\n        var classes = [];\n        $.each(this, function (i, v) {\n            var splitClassName = v.className.split(/\\s+/);\n            for (var j in splitClassName) {\n                var className = splitClassName[j];\n                if (-1 === classes.indexOf(className)) {\n                    classes.push(className);\n                }\n            }\n        });\n        if ('function' === typeof callback) {\n            for (var i in classes) {\n                callback(classes[i]);\n            }\n        }\n        return classes;\n    };\n})(jQuery);\n</code></pre>\n\n<p>Use it like</p>\n\n<pre><code>$('div').classes();\n</code></pre>\n\n<p>In your case returns </p>\n\n<pre><code>[\"Lorem\", \"ipsum\", \"dolor_spec\", \"sit\", \"amet\"]\n</code></pre>\n\n<p>You can also pass a function to the method to be called on each class</p>\n\n<pre><code>$('div').classes(\n    function(c) {\n        // do something with each class\n    }\n);\n</code></pre>\n\n<p>Here is a jsFiddle I set up to demonstrate and test <a href=\"http://jsfiddle.net/GD8Qn/8/\">http://jsfiddle.net/GD8Qn/8/</a></p>\n\n<h3>Minified Javascript</h3>\n\n<pre><code>;!function(e){e.fn.classes=function(t){var n=[];e.each(this,function(e,t){var r=t.className.split(/\\s+/);for(var i in r){var s=r[i];if(-1===n.indexOf(s)){n.push(s)}}});if(\"function\"===typeof t){for(var r in n){t(n[r])}}return n}}(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 104
                },
                {
                    "body": "<pre><code>$('div').attr('class').split(' ').map(function(cls){ console.log(cls);})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>javascript provides a classList attribute for a node element in dom. Simply using </p>\n\n<pre><code>  element.classList\n</code></pre>\n\n<p>will return a object of form</p>\n\n<pre><code>  DOMTokenList {0: \"class1\", 1: \"class2\", 2: \"class3\", length: 3, item: function, contains: function, add: function, remove: function\u2026}\n</code></pre>\n\n<p>The object has functions like contains, add, remove which you can use</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The question is what Jquery is designed to do.  </p>\n\n<pre><code>$('.dolor_spec').each(function(){ //do stuff\n</code></pre>\n\n<p>And why has no one given <a href=\"http://api.jquery.com/find/\" rel=\"nofollow\">.find()</a> as an answer?</p>\n\n<pre><code>$('div').find('.dolor_spec').each(function(){\n  ..\n});\n</code></pre>\n\n<p>There is also classList for non-IE browsers: </p>\n\n<pre><code>if element.classList.contains(\"dolor_spec\") {  //do stuff\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>Is there a way in jQuery to loop through or assign to an array all of the classes that are assigned to an element?</p>\n\n<p>ex.</p>\n\n<pre><code>&lt;div class=\"Lorem ipsum dolor_spec sit amet\"&gt;Hello World!&lt;/div&gt;\n</code></pre>\n\n<p>I will be looking for a \"special\" class as in \"dolor_spec\" above.  I know that I could use hasClass() but the actual class name may not necessarily be known at the time.</p>\n",
            "last_activity_date": 1418859362,
            "question_id": 1227286,
            "score": 308,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "Get class list for element with jQuery"
        },
        {
            "answer_count": 22,
            "answers": [
                {
                    "body": "<pre><code>var today = new Date();\nvar tomorrow = new Date();\ntomorrow.setDate(today.getDate()+1);\n</code></pre>\n\n<p>Be careful, because this can be tricky.  When setting \"tomorrow\", it only works because it's current value matches the year and month for \"today\".  However, setting to a date number like \"32\" normally will still work just fine to move it to the next month.</p>\n",
                    "is_accepted": false,
                    "score": 75
                },
                {
                    "body": "<p>You can create one with:-</p>\n\n<pre><code>Date.prototype.addDays = function(days)\n{\n    var dat = new Date(this.valueOf());\n    dat.setDate(dat.getDate() + days);\n    return dat;\n}\n\nvar dat = new Date();\n\nalert(dat.addDays(5))\n</code></pre>\n\n<p>The problem with using <code>setDate</code> directly is that it's a mutator and that sort of thing is best avoided. ECMA saw fit to treat <code>Date</code> as a mutable class rather than an immutable structure.</p>\n",
                    "is_accepted": false,
                    "score": 224
                },
                {
                    "body": "<p><strong>A general solution to this question is provided by AnthonyWJones below, whereas this answer will lead to bugs if you assume it works on arbitrary dates.  There is no good reason to use this solution as its logic is unclear and it will break in anything but the most simplistic scenarios.</strong></p>\n\n<pre><code>var today = new Date();\nvar tomorrow = new Date(today);\ntomorrow.setDate(today.getDate()+1);\n</code></pre>\n\n<p>This will deal with end of months so adding 32 days will work.</p>\n\n<p><strong>Note that this approach fails if the 'from' <code>Date</code> is not in the same year <em>or</em> month as the <em>current</em> <code>Date</code>:</strong></p>\n\n<pre><code>var from = new Date('2010-12-20T00:00:00');\nvar to = new Date();\nto.setDate(from.getDate() + 30); // Tue Nov 19 2013 (WRONG!)\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 209
                },
                {
                    "body": "<p>These answers seem confusing to me, I prefer:</p>\n\n<pre><code>var ms = new Date().getTime() + 86400000;\nvar tomorrow = new Date(ms);\n</code></pre>\n\n<p>getTime() gives us milliseconds since 1970, and 86400000 is the number of milliseconds in a day. \nHence, ms contains milliseconds for the desired date. </p>\n\n<p>Using the millisecond constructor gives the desired date object.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Try </p>\n\n<pre><code>var someDate = new Date();\nvar duration = 2; //In Days\nsomeDate.setTime(someDate.getTime() +  (duration * 24 * 60 * 60 * 1000));\n</code></pre>\n\n<p>Using setDate() to add a date wont solve your problem, try adding some days to a Feb month, if you try to add new days to it, it wont result in what you expected.</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>Thanks Jason for your answer that works as expected, here is a mix from your code and the handy format of AnthonyWJones :</p>\n\n<pre><code>Date.prototype.addDays = function(days){\n    var ms = new Date().getTime() + (86400000 * days);\n    var added = new Date(ms);\n    return added;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The mozilla docs for setDate() don't indicate that it will  handle end of month scenarios.\nSee <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date/setDate\">https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Date</a></p>\n\n<p>setDate()</p>\n\n<ul>\n<li>Sets the day of the month (1-31) for a specified date according to local time.</li>\n</ul>\n\n<p>That is why I use setTime() when I need to add days.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<h1>the same answer:  <a href=\"http://stackoverflow.com/questions/3818193/how-to-add-number-of-days-to-todays-date\">How to add number of days to today&#39;s date?</a></h1>\n\n<pre><code>    function DaysOfMonth(nYear, nMonth) {\n        switch (nMonth) {\n            case 0:     // January\n                return 31; break;\n            case 1:     // February\n                if ((nYear % 4) == 0) {\n                    return 29;\n                }\n                else {\n                    return 28;\n                };\n                break;\n            case 2:     // March\n                return 31; break;\n            case 3:     // April\n                return 30; break;\n            case 4:     // May\n                return 31; break;\n            case 5:     // June\n                return 30; break;\n            case 6:     // July\n                return 31; break;\n            case 7:     // August\n                return 31; break;\n            case 8:     // September\n                return 30; break;\n            case 9:     // October\n                return 31; break;\n            case 10:     // November\n                return 30; break;\n            case 11:     // December\n                return 31; break;\n        }\n    };\n\n    function SkipDate(dDate, skipDays) {\n        var nYear = dDate.getFullYear();\n        var nMonth = dDate.getMonth();\n        var nDate = dDate.getDate();\n        var remainDays = skipDays;\n        var dRunDate = dDate;\n\n        while (remainDays &gt; 0) {\n            remainDays_month = DaysOfMonth(nYear, nMonth) - nDate;\n            if (remainDays &gt; remainDays_month) {\n                remainDays = remainDays - remainDays_month - 1;\n                nDate = 1;\n                if (nMonth &lt; 11) { nMonth = nMonth + 1; }\n                else {\n                    nMonth = 0;\n                    nYear = nYear + 1;\n                };\n            }\n            else {\n                nDate = nDate + remainDays;\n                remainDays = 0;\n            };\n            dRunDate = Date(nYear, nMonth, nDate);\n        }\n        return new Date(nYear, nMonth, nDate);\n    };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -7
                },
                {
                    "body": "<p>My solution is:</p>\n\n<pre><code>nextday=new Date(oldDate.getFullYear(),oldDate.getMonth(),oldDate.getDate()+1);\n</code></pre>\n\n<p>this solution does not have problem with daylight saving. Also, one can add/sub any offsets for years, months, days etc.</p>\n\n<pre><code>day=new Date(oldDate.getFullYear()-2,oldDate.getMonth()+22,oldDate.getDate()+61);\n</code></pre>\n\n<p>is correct code.</p>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>Just spent ages trying to work out what the deal was with the year not adding when following the lead examples below.</p>\n\n<p>If you want to just simply add n days to the date you have you are best to just go:</p>\n\n<blockquote>\n  <p>myDate.setDate(myDate.getDate() + n);</p>\n</blockquote>\n\n<p>or the longwinded version</p>\n\n<pre><code>var theDate = new Date(2013, 11, 15);\nvar myNewDate = new Date(theDate);\nmyNewDate.setDate(myNewDate.getDate() + 30);\nconsole.log(myNewDate);\n</code></pre>\n\n<p>This today/tommorrow stuff is confusing. By setting the current date into your new date variable you will mess up the year value. if you work from the original date you won't.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I created these extensions last night:<br>\nyou can pass either positive or negative values;</p>\n\n<p>example:</p>\n\n<pre><code>var someDate = new Date();\nvar expirationDate = someDate.addDays(10);\nvar previous = someDate.addDays(-5);\n\n\nDate.prototype.addDays = function (num) {\n    var value = this.valueOf();\n    value += 86400000 * num;\n    return new Date(value);\n}\n\nDate.prototype.addSeconds = function (num) {\n    var value = this.valueOf();\n    value += 1000 * num;\n    return new Date(value);\n}\n\nDate.prototype.addMinutes = function (num) {\n    var value = this.valueOf();\n    value += 60000 * num;\n    return new Date(value);\n}\n\nDate.prototype.addHours = function (num) {\n    var value = this.valueOf();\n    value += 3600000 * num;\n    return new Date(value);\n}\n\nDate.prototype.addMonths = function (num) {\n    var value = new Date(this.valueOf());\n\n    var mo = this.getMonth();\n    var yr = this.getYear();\n\n    mo = (mo + num) % 12;\n    if (0 &gt; mo) {\n        yr += (this.getMonth() + num - mo - 12) / 12;\n        mo += 12;\n    }\n    else\n        yr += ((this.getMonth() + num - mo) / 12);\n\n    value.setMonth(mo);\n    value.setYear(yr);\n    return value;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p><strong>Correct Answer</strong>:</p>\n\n<pre><code>function addDays(date, days) {\n    var result = new Date(date);\n    result.setDate(date.getDate() + days);\n    return result;\n}\n</code></pre>\n\n<p><strong>Incorrect Answer</strong> by @OneShot:</p>\n\n<p>This answer <em>sometimes</em> provides the correct result but very often returns the wrong year and month. The only time this answer works is when the date that you are adding days to happens to have the current year and month.</p>\n\n<pre><code>// Don't do it this way!\nfunction addDaysWRONG(date, days) {\n    var result = new Date();\n    result.setDate(date.getDate() + days);\n    return result;\n}\n</code></pre>\n\n<p><strong>Proof / Example</strong></p>\n\n<p><a href=\"http://jsfiddle.net/sparebytes/XrWzq/\">Check this JsFiddle</a></p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>// Correct\r\nfunction addDays(date, days) {\r\n    var result = new Date(date);\r\n    result.setDate(date.getDate() + days);\r\n    return result;\r\n}\r\n\r\n// Bad Year/Month\r\nfunction addDaysWRONG(date, days) {\r\n    var result = new Date();\r\n    result.setDate(date.getDate() + days);\r\n    return result;\r\n}\r\n\r\n// Bad during DST\r\nfunction addDaysDstFail(date, days) {\r\n    var dayms = (days * 24 * 60 * 60 * 1000);\r\n    return new Date(date.getTime() + dayms);    \r\n}\r\n\r\n// TEST\r\nfunction formatDate(date) {\r\n    return (date.getMonth() + 1) + '/' + date.getDate() + '/' + date.getFullYear();\r\n}\r\n\r\n$('tbody tr td:first-child').each(function () {\r\n    var $in = $(this);\r\n    var $out = $('&lt;td/&gt;').insertAfter($in).addClass(\"answer\");\r\n    var $outFail = $('&lt;td/&gt;').insertAfter($out);\r\n    var $outDstFail = $('&lt;td/&gt;').insertAfter($outFail);\r\n    var date = new Date($in.text());\r\n    var correctDate = formatDate(addDays(date, 1));\r\n    var failDate = formatDate(addDaysWRONG(date, 1));\r\n    var failDstDate = formatDate(addDaysDstFail(date, 1));\r\n\r\n    $out.text(correctDate);\r\n    $outFail.text(failDate);\r\n    $outDstFail.text(failDstDate);\r\n    $outFail.addClass(correctDate == failDate ? \"right\" : \"wrong\");\r\n    $outDstFail.addClass(correctDate == failDstDate ? \"right\" : \"wrong\");\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>body {\r\n    font-size: 14px;\r\n}\r\n\r\ntable {\r\n    border-collapse:collapse;\r\n}\r\ntable, td, th {\r\n    border:1px solid black;\r\n}\r\ntd {\r\n    padding: 2px;\r\n}\r\n\r\n.wrong {\r\n    color: red;\r\n}\r\n.right {\r\n    color: green;\r\n}\r\n.answer {\r\n    font-weight: bold;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js\"&gt;&lt;/script&gt;\r\n&lt;table&gt;\r\n    &lt;tbody&gt;\r\n        &lt;tr&gt;\r\n            &lt;th colspan=\"4\"&gt;DST Dates&lt;/th&gt;\r\n        &lt;/tr&gt;\r\n        &lt;tr&gt;\r\n            &lt;th&gt;Input&lt;/th&gt;\r\n            &lt;th&gt;+1 Day&lt;/th&gt;\r\n            &lt;th&gt;+1 Day Fail&lt;/th&gt;\r\n            &lt;th&gt;+1 Day DST Fail&lt;/th&gt;\r\n        &lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;03/10/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;11/03/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;03/09/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;11/02/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;03/08/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;11/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;\r\n            &lt;th colspan=\"4\"&gt;2013&lt;/th&gt;\r\n        &lt;/tr&gt;\r\n        &lt;tr&gt;\r\n            &lt;th&gt;Input&lt;/th&gt;\r\n            &lt;th&gt;+1 Day&lt;/th&gt;\r\n            &lt;th&gt;+1 Day Fail&lt;/th&gt;\r\n            &lt;th&gt;+1 Day DST Fail&lt;/th&gt;\r\n        &lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;01/01/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;02/01/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;03/01/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;04/01/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;05/01/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;06/01/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;07/01/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;08/01/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;09/01/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;10/01/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;11/01/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;12/01/2013&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;\r\n            &lt;th colspan=\"4\"&gt;2014&lt;/th&gt;\r\n        &lt;/tr&gt;\r\n        &lt;tr&gt;\r\n            &lt;th&gt;Input&lt;/th&gt;\r\n            &lt;th&gt;+1 Day&lt;/th&gt;\r\n            &lt;th&gt;+1 Day Fail&lt;/th&gt;\r\n            &lt;th&gt;+1 Day DST Fail&lt;/th&gt;\r\n        &lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;01/01/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;02/01/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;03/01/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;04/01/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;05/01/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;06/01/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;07/01/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;08/01/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;09/01/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;10/01/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;11/01/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;12/01/2014&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;\r\n            &lt;th colspan=\"4\"&gt;2015&lt;/th&gt;\r\n        &lt;/tr&gt;\r\n        &lt;tr&gt;\r\n            &lt;th&gt;Input&lt;/th&gt;\r\n            &lt;th&gt;+1 Day&lt;/th&gt;\r\n            &lt;th&gt;+1 Day Fail&lt;/th&gt;\r\n            &lt;th&gt;+1 Day DST Fail&lt;/th&gt;\r\n        &lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;01/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;02/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;03/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;04/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;05/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;06/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;07/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;08/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;09/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;10/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;11/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n        &lt;tr&gt;&lt;td&gt;12/01/2015&lt;/td&gt;&lt;/tr&gt;\r\n    &lt;/tbody&gt;\r\n&lt;/table&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 193
                },
                {
                    "body": "<p>I've used this approach to get the right date in one line to get the time plus one day following what people were saying above.</p>\n\n<pre><code>((new Date()).setDate((new Date()).getDate()+1))\n</code></pre>\n\n<p>I just figured I would build off a normal <code>(new Date())</code>:</p>\n\n<pre><code>(new Date()).getDate()\n&gt; 21\n</code></pre>\n\n<p>Using the code above I can now set all of that within <code>Date()</code> in <code>(new Date())</code> and it behaves normally.</p>\n\n<pre><code>(new Date(((new Date()).setDate((new Date()).getDate()+1)))).getDate()\n&gt; 22\n</code></pre>\n\n<p>or to get the <code>Date</code> object:</p>\n\n<pre><code>(new Date(((new Date()).setDate((new Date()).getDate()+1))))\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you can, use moment.js. JavaScript doesn't have very good native date/time methods. <a href=\"http://momentjs.com/docs/#/manipulating/add/\">http://momentjs.com/docs/#/manipulating/add/</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>    //the_day is 2013-12-31\n    var the_day = Date.UTC(2013, 11, 31); \n    // Now, the_day will be \"1388448000000\" in UTC+8; \n    var the_next_day = new Date(the_day + 24 * 60 * 60 * 1000);\n    // Now, the_next_day will be \"Wed Jan 01 2014 08:00:00 GMT+0800\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use something like:</p>\n\n<pre><code>new Date(dateObject.getTime() + amountOfDays * 24 * 60 * 60 * 1000)\n</code></pre>\n\n<p>Works with day saving time:</p>\n\n<pre><code>new Date(new Date(2014, 2, 29, 20, 0, 0).getTime() + 1 * 24 * 60 * 60 * 1000)\n</code></pre>\n\n<p>Works with new year:</p>\n\n<pre><code>new Date(new Date(2014, 11, 31, 20, 0, 0).getTime() + 1 * 24 * 60 * 60 * 1000)\n</code></pre>\n\n<p>It can be parametrized:</p>\n\n<pre><code>function DateAdd(source, amount, step) {\n  var factor = 1;\n  if (step == \"day\") factor = 24 * 60 * 60 * 1000;\n  else if (step == \"hour\") factor = 60 * 60 * 1000;\n  ...\n  new Date(source.getTime() + amount * factor);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I sum hours and days...</p>\n\n<pre><code>Date.prototype.addDays = function(days){\n    days = parseInt(days, 10)\n    this.setDate(this.getUTCDate() + days);\n    return this;\n}\n\nDate.prototype.addHours = function(hrs){\n    var hr = this.getUTCHours() + parseInt(hrs  , 10);\n    while(hr &gt; 24){\n      hr = hr - 24;\n      this.addDays(1);\n    }\n\n    this.setHours(hr);\n    return this;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I can't believe there's no cut'n'paste solution in this thread after <strong>5 years!</strong><br>\nSO: To get the same time-of-day regardless of summertime interference:  </p>\n\n<pre><code>Date.prototype.addDays = function(days)\n    {\n    var dat = new Date( this.valueOf() )\n\n    var hour1 = dat.getHours()\n    dat.setTime( dat.getTime() + days * 86400000) // 24*60*60*1000 = 24 hours\n    var hour2 = dat.getHours()\n\n    if (hour1 != hour2) // summertime occured +/- a WHOLE number of hours thank god!\n        dat.setTime( dat.getTime() + (hour1 - hour2) * 3600000) // 60*60*1000 = 1 hour\n\n    return dat\nor\n    this.setTime( dat.getTime() ) // to modify the object directly\n    }\n</code></pre>\n\n<p>There. Done!</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Late to the party, <strike>but if you use <code>jQuery</code> then</strike> there's an excellent plugin called Moment:</p>\n\n<p><a href=\"http://momentjs.com/\" rel=\"nofollow\">http://momentjs.com/</a></p>\n\n<pre><code>var myDateOfNowPlusThreeDays = moment().add(3, \"days\").toDate();\n</code></pre>\n\n<p><a href=\"http://momentjs.com/docs/#/manipulating/\" rel=\"nofollow\">http://momentjs.com/docs/#/manipulating/</a></p>\n\n<p>And lots of other good stuff in there!</p>\n\n<p>Edit: jQuery reference removed thanks to aikeru's comment</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I guess I'll give an answer as well:<br/>\nPersonally, I like to attempt to avoid gratuitous variable declaration, method calls, and constructor calls, as they are all expensive on performance. (within reason, of course)<br/>\nI was going to leave this as just comment under the Answer given by @AnthonyWJones but thought better of it.<br/></p>\n\n<pre><code>// Prototype usage...\nDate.prototype.addDays = Date.prototype.addDays || function( days ) {\n    return this.setTime( 864E5 * days + this.valueOf() ) &amp;&amp; this;\n};\n\n// Namespace usage...\nnamespace.addDaysToDate = function( date, days ) {\n    return date.setTime( 864E5 * days + date.valueOf() ) &amp;&amp; date;\n};\n\n// Basic Function declaration...\nfunction addDaysToDate( date, days ) {\n    return date.setTime( 864E5 * days + date.valueOf() ) &amp;&amp; date;\n};\n</code></pre>\n\n<p>The above will respect DST. Meaning if you add a number of days that cross DST, the displayed time (hour) will change to reflect that.<br/>\nExample:<br/>\nNov 2, 2014 02:00 was the end of DST.</p>\n\n<pre><code>var dt = new Date( 2014, 10, 1, 10, 30, 0 );\nconsole.log( dt );                  // Sat Nov 01 2014 10:30:00\nconsole.log( dt.addDays( 10 ) );    // Tue Nov 11 2014 09:30:00\n</code></pre>\n\n<p>If you're looking to retain the time across DST (so 10:30 will still be 10:30)...<br/></p>\n\n<pre><code>// Prototype usage...\nDate.prototype.addDays = Date.prototype.addDays || function( days ) {\n    return this.setDate( this.getDate() + days ) &amp;&amp; this;\n};\n\n// Namespace usage...\nnamespace.addDaysToDate = function( date, days ) {\n    return date.setDate( date.getDate() + days ) &amp;&amp; date;\n};\n\n// Basic Function declaration...\nfunction addDaysToDate( date, days ) {\n    return date.setDate( date.getDate() + days ) &amp;&amp; date;\n};\n</code></pre>\n\n<p>So, now you have...</p>\n\n<pre><code>var dt = new Date( 2014, 10, 1, 10, 30, 0 );\nconsole.log( dt );                  // Sat Nov 01 2014 10:30:00\nconsole.log( dt.addDays( 10 ) );    // Tue Nov 11 2014 10:30:00\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Old I know, but sometimes I like this:</p>\n\n<pre><code>function addDays(days) {\n    return new Date(Date.now() + 864e5 * days);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I am using the following solution.</p>\n\n<pre><code>var msInDay = 86400000;\nvar daysToAdd = 5;\nvar now = new Date();\nvar milliseconds = now.getTime();\nvar newMillisecods = milliseconds + msInDay * daysToAdd;\nvar newDate = new Date(newMillisecods);\n//or now.setTime(newMillisecods);\n</code></pre>\n\n<p>Date has a constructor that accepts an int. This argument represents total milliseconds before/after Jan 1, 1970. It also has a method setTime which does the same without creating a new Date object.</p>\n\n<p>What we do here is convert days to milliseconds and add this value to the value provided by getTime. Finally, we give the result to Date(milliseconds) constructor or setTime(milliseconds) method.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How to add days to current <code>DateTime</code> using JavaScript. Does JavaScript have a built in function like .Net <code>AddDay</code>?</p>\n",
            "last_activity_date": 1422360816,
            "question_id": 563406,
            "score": 245,
            "tags": [
                "javascript",
                "datetime"
            ],
            "title": "Add days to DateTime"
        },
        {
            "answer_count": 24,
            "answers": [
                {
                    "body": "<p>I'm assuming you mean HTML-style hexadecimal notation, i.e. <code>#rrggbb</code>. Your code is almost correct, except you've got the order reversed. It should be:</p>\n\n<pre><code>var decColor = red * 65536 + green * 256 + blue;\n</code></pre>\n\n<p>Also, using bit-shifts might make it a bit easier to read:</p>\n\n<pre><code>var decColor = (red &lt;&lt; 16) + (green &lt;&lt; 8) + blue;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>HTML use the hexadecimal system and the rgb uses the decimal system. so you have to convert the number from hexadecimal to decimal and vice versa.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>May you be after something like this?</p>\n\n<pre><code>function RGB2HTML(red, green, blue)\n{\n    return '#' + red.toString(16) +\n           green.toString(16) +\n           blue.toString(16);\n}\n\nalert(RGB2HTML(150, 135, 200));\n</code></pre>\n\n<p>displays #9687c8</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Looks like you're looking for something like this:</p>\n\n<pre><code>function hexstr(number) {\n    var chars = new Array(\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"a\", \"b\", \"c\", \"d\", \"e\", \"f\");\n    var low = number &amp; 0xf;\n    var high = (number &gt;&gt; 4) &amp; 0xf;\n    return \"\" + chars[high] + chars[low];\n}\n\nfunction rgb2hex(r, g, b) {\n    return \"#\" + hexstr(r) + hexstr(g) + hexstr(b);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The following will do to the RGB to hex conversion and add any required zero padding: </p>\n\n<pre><code>function componentToHex(c) {\n    var hex = c.toString(16);\n    return hex.length == 1 ? \"0\" + hex : hex;\n}\n\nfunction rgbToHex(r, g, b) {\n    return \"#\" + componentToHex(r) + componentToHex(g) + componentToHex(b);\n}\n\nalert( rgbToHex(0, 51, 255) ); // #0033ff\n</code></pre>\n\n<p>Converting the other way:</p>\n\n<pre><code>function hexToRgb(hex) {\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nalert( hexToRgb(\"#0033ff\").g ); // \"51\";\n</code></pre>\n\n<p>Finally, an alternative version of <code>rgbToHex()</code>, as discussed in @casablanca's answer and suggested in the comments by @cwolves:</p>\n\n<pre><code>function rgbToHex(r, g, b) {\n    return \"#\" + ((1 &lt;&lt; 24) + (r &lt;&lt; 16) + (g &lt;&lt; 8) + b).toString(16).slice(1);\n}\n</code></pre>\n\n<h2>Update 3 December 2012</h2>\n\n<p>Here's a version of <code>hexToRgb()</code> that also parses a shorthand hex triplet such as \"#03F\":</p>\n\n<pre><code>function hexToRgb(hex) {\n    // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n    var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n    hex = hex.replace(shorthandRegex, function(m, r, g, b) {\n        return r + r + g + g + b + b;\n    });\n\n    var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n    return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n    } : null;\n}\n\nalert( hexToRgb(\"#0033ff\").g ); // \"51\";\nalert( hexToRgb(\"#03f\").g ); // \"51\";\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 328
                },
                {
                    "body": "<p>// Ignoring hsl notation, color values are commonly expressed as names, rgb, rgba or hex-</p>\n\n<p>// Hex can be 3 values or 6.</p>\n\n<p>// Rgb can be percentages as well as integer values.</p>\n\n<p>// Best to account for all of these formats, at least.</p>\n\n<pre><code>String.prototype.padZero= function(len, c){\n    var s= this, c= c || \"0\", len= len || 2;\n    while(s.length &lt; len) s= c + s;\n    return s;\n}\nvar colors={\n    colornames:{\n        aqua: '#00ffff', black: '#000000', blue: '#0000ff', fuchsia: '#ff00ff',\n        gray: '#808080', green: '#008000', lime: '#00ff00', maroon: '#800000',\n        navy: '#000080', olive: '#808000', purple: '#800080', red: '#ff0000',\n        silver: '#c0c0c0', teal: '#008080', white: '#ffffff', yellow: '#ffff00'\n    },\n    toRgb: function(c){\n        c= '0x'+colors.toHex(c).substring(1);\n        c= [(c&gt;&gt; 16)&amp;255, (c&gt;&gt; 8)&amp;255, c&amp;255];\n        return 'rgb('+c.join(',')+')';\n    },\n    toHex: function(c){\n        var tem, i= 0, c= c? c.toString().toLowerCase(): '';\n        if(/^#[a-f0-9]{3,6}$/.test(c)){\n            if(c.length&lt; 7){\n                var A= c.split('');\n                c= A[0]+A[1]+A[1]+A[2]+A[2]+A[3]+A[3];\n            }\n            return c;\n        }\n        if(/^[a-z]+$/.test(c)){\n            return colors.colornames[c] || '';\n        }\n        c= c.match(/\\d+(\\.\\d+)?%?/g) || [];\n        if(c.length&lt;3) return '';\n        c= c.slice(0, 3);\n        while(i&lt; 3){\n            tem= c[i];\n            if(tem.indexOf('%')!= -1){\n                tem= Math.round(parseFloat(tem)*2.55);\n            }\n            else tem= parseInt(tem);\n            if(tem&lt; 0 || tem&gt; 255) c.length= 0;\n            else c[i++]= tem.toString(16).padZero(2);\n        }\n        if(c.length== 3) return '#'+c.join('').toLowerCase();\n        return '';\n    }\n}\n//var c='#dc149c';\n//var c='rgb(100%,25%,0)';\n//\nvar c= 'red';\nalert(colors.toRgb(c)+'\\n'+colors.toHex(c));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>For 3 digits hexToRgb function of Tim Down can be improved as below:</p>\n\n<pre><code>var hex2Rgb = function(hex){\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})|([a-f\\d]{1})([a-f\\d]{1})([a-f\\d]{1})$/i.exec(hex);\n  return result ? {        \n    r: parseInt(hex.length &lt;= 4 ? result[4]+result[4] : result[1], 16),\n    g: parseInt(hex.length &lt;= 4 ? result[5]+result[5] : result[2], 16),\n    b: parseInt(hex.length &lt;= 4 ? result[6]+result[6] : result[3], 16),\n    toString: function() {\n      var arr = [];\n      arr.push(this.r);\n      arr.push(this.g);\n      arr.push(this.b);\n      return \"rgb(\" + arr.join(\",\") + \")\";\n    }\n  } : null;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>An alternative version of hexToRgb:</p>\n\n<pre><code>function hexToRgb(hex) {\n    var bigint = parseInt(hex, 16);\n    var r = (bigint &gt;&gt; 16) &amp; 255;\n    var g = (bigint &gt;&gt; 8) &amp; 255;\n    var b = bigint &amp; 255;\n\n    return r + \",\" + g + \",\" + b;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<p>This code accept #fff and #ffffff variants and opacity.</p>\n\n<pre><code>function hex2rgb(hex, opacity) {\n        var h=hex.replace('#', '');\n        h =  h.match(new RegExp('(.{'+h.length/3+'})', 'g'));\n\n        for(var i=0; i&lt;h.length; i++)\n            h[i] = parseInt(h[i].length==1? h[i]+h[i]:h[i], 16);\n\n        if (typeof opacity != 'undefined')  h.push(opacity);\n\n        return 'rgba('+h.join(',')+')';\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you need compare two color values (given as rgb,name color or hex value) or convert to HEX  use HTML5 canvas object.</p>\n\n<pre><code>    var canvas = document.createElement(\"canvas\");\n    var ctx = this.canvas.getContext('2d');\n\n    ctx.fillStyle = \"rgb(pass,some,value)\";\n    var temp =  ctx.fillStyle;\n    ctx.fillStyle = \"someColor\";\n\n    alert(ctx.fillStyle == temp);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>@ Tim, to add to your answer (its a little awkward fitting this into a comment).</p>\n\n<p>As written, I found the rgbToHex function returns a string with elements after the point and it requires that the r, g, b values fall within the range 0-255.</p>\n\n<p>I'm sure this may seem obvious to most, but it took two hours for me to figure out and by then the original method had ballooned to 7 lines before I realised my problem was elsewhere. So in the interests of saving others time &amp; hassle, here's my slightly amended code that checks the pre-requisites and trims off the extraneous bits of the string.</p>\n\n<pre><code>function rgbToHex(r, g, b) {\n    if(r &lt; 0 || r &gt; 255) alert(\"r is out of bounds; \"+r);\n    if(g &lt; 0 || g &gt; 255) alert(\"g is out of bounds; \"+g);\n    if(b &lt; 0 || b &gt; 255) alert(\"b is out of bounds; \"+b);\n    return \"#\" + ((1 &lt;&lt; 24) + (r &lt;&lt; 16) + (g &lt;&lt; 8) + b).toString(16).slice(1,7);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function hex2rgb(hex) {\n  return ['0x' + hex[1] + hex[2] | 0, '0x' + hex[3] + hex[4] | 0, '0x' + hex[5] + hex[6] | 0];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This could be used for getting colors from computed style propeties:</p>\n\n<pre><code>function rgbToHex(color) {\n    if (color.substr(0, 1) === \"#\") {\n        return color;\n    }\n    var nums = /(.*?)rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)/i.exec(color),\n        r = parseInt(nums[2], 10).toString(16),\n        g = parseInt(nums[3], 10).toString(16),\n        b = parseInt(nums[4], 10).toString(16);\n    return \"#\"+ (\n        (r.length == 1 ? \"0\"+ r : r) +\n        (g.length == 1 ? \"0\"+ g : g) +\n        (b.length == 1 ? \"0\"+ b : b)\n    );\n}\n\n// not computed \n&lt;div style=\"color: #4d93bc; border: 1px solid red;\"&gt;...&lt;/div&gt; \n// computed \n&lt;div style=\"color: rgb(77, 147, 188); border: 1px solid rgb(255, 0, 0);\"&gt;...&lt;/div&gt;\n\nconsole.log( rgbToHex(color) ) // #4d93bc\nconsole.log( rgbToHex(borderTopColor) ) // #ff0000\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This solution worked for me:</p>\n\n<pre><code>function HexToRGB($hex) {\n    $hex = ereg_replace(\"#\", \"\", $hex);\n    $color = array();\n\n    if(strlen($hex) == 3) {\n        $color['r'] = hexdec(substr($hex, 0, 1) . $r);\n        $color['g'] = hexdec(substr($hex, 1, 1) . $g);\n        $color['b'] = hexdec(substr($hex, 2, 1) . $b);\n    }\n    else if(strlen($hex) == 6) {\n        $color['r'] = hexdec(substr($hex, 0, 2));\n        $color['g'] = hexdec(substr($hex, 2, 2));\n        $color['b'] = hexdec(substr($hex, 4, 2));\n    }\n\n    return $color;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -7
                },
                {
                    "body": "<pre><code>function hexToRgb(str) { \n    if ( /^#([0-9a-f]{3}|[0-9a-f]{6})$/ig.test(str) ) { \n        var hex = str.substr(1);\n        hex = hex.length == 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n        var rgb = parseInt(hex, 16);               \n        return 'rgb(' + [(rgb &gt;&gt; 16) &amp; 255, (rgb &gt;&gt; 8) &amp; 255, rgb &amp; 255].join(',') + ')';\n    } \n\n    return false; \n}\n\nfunction rgbToHex(red, green, blue) {\n    var out = '#';\n\n    for (var i = 0; i &lt; 3; ++i) {\n        var n = typeof arguments[i] == 'number' ? arguments[i] : parseInt(arguments[i]);\n\n        if (isNaN(n) || n &lt; 0 || n &gt; 255) {\n            return false;\n        }\n\n        out += (n &lt; 16 ? '0' : '') + n.toString(16);\n    }\n\n    return out\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I came across this problem since I wanted to accept any color value and be able to add an opacity, so I made this quick jQuery plugin that uses the native canvas on modern browsers. Seems to work just great.</p>\n\n<p><strong>Edit</strong></p>\n\n<p>Turns out I can't figure out how to make it a proper jQuery plugin, so I'll just present it as a regular function.</p>\n\n<pre><code>//accepts any value like '#ffffff', 'rgba(255,255,255,1)', 'hsl(0,100%,100%)', or 'white'\nfunction toRGBA( c ) {\n    var\n        can  = document.createElement( 'canvas' ),\n        ctx  = can.getContext( '2d' );\n    can.width = can.height = 1;\n    ctx.fillStyle = c;\n    console.log( ctx.fillStyle ); //always css 6 digit hex color string, e.g. '#ffffff'\n    ctx.fillRect( 0, 0, 1, 1 ); //paint the canvas\n    var\n        img  = ctx.getImageData( 0, 0, 1, 1 ),\n        data = img.data,\n        rgba = {\n            r: data[ 0 ], //0-255 red\n            g: data[ 1 ], //0-255 green\n            b: data[ 2 ], //0-255 blue\n            a: data[ 3 ]  //0-255 opacity (0 being transparent, 255 being opaque)\n        };\n    return rgba;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>i needed a function that accepts invalid values too like</p>\n\n<p>rgb(-255, 255, 255)\nrgb(510, 255, 255)</p>\n\n<p>this is a spin off of  @cwolves answer</p>\n\n<pre><code>function rgb(r, g, b) {\n  this.c = this.c || function (n) {\n    return Math.max(Math.min(n, 255), 0)\n  };\n\n  return ((1 &lt;&lt; 24) + (this.c(r) &lt;&lt; 16) + (this.c(g) &lt;&lt; 8) + this.c(b)).toString(16).slice(1).toUpperCase();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's my rgb2hex():</p>\n\n<pre><code>  function rgb2hex(red, green, blue) {\n        var rgb = blue | (green &lt;&lt; 8) | (red &lt;&lt; 16);\n        return '#' + (0x1000000 + rgb).toString(16).slice(1)\n  }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>A clean coffeescript version of the above (thanks @TimDown):</p>\n\n<pre><code>rgbToHex = (rgb) -&gt;\n    a = rgb.match /\\d+/g\n    rgb  unless a.length is 3\n    \"##{ ((1 &lt;&lt; 24) + (parseInt(a[0]) &lt;&lt; 16) + (parseInt(a[1]) &lt;&lt; 8) + parseInt(a[2])).toString(16).slice(1) }\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>R = HexToR(\"#FFFFFF\");\nG = HexToG(\"#FFFFFF\");\nB = HexToB(\"#FFFFFF\");\n\nfunction HexToR(h) {return parseInt((cutHex(h)).substring(0,2),16)}\nfunction HexToG(h) {return parseInt((cutHex(h)).substring(2,4),16)}\nfunction HexToB(h) {return parseInt((cutHex(h)).substring(4,6),16)}\nfunction cutHex(h) {return (h.charAt(0)==\"#\") ? h.substring(1,7):h}\n</code></pre>\n\n<p>Use these Function to achive the result without any issue. :)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>My stupid example =)\n<div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>color: {\r\n            toHex: function(num){\r\n                var str = num.toString(16);\r\n                return (str.length&lt;6?'#00'+str:'#'+str);\r\n            },\r\n            toNum: function(hex){\r\n                return parseInt(hex.replace('#',''), 16);\r\n            },\r\n            rgbToHex: function(color)\r\n            {\r\n                color = color.replace(/\\s/g,\"\");\r\n                var aRGB = color.match(/^rgb\\((\\d{1,3}[%]?),(\\d{1,3}[%]?),(\\d{1,3}[%]?)\\)$/i);\r\n                if(aRGB)\r\n                {\r\n                    color = '';\r\n                    for (var i=1;  i&lt;=3; i++) color += Math.round((aRGB[i][aRGB[i].length-1]==\"%\"?2.55:1)*parseInt(aRGB[i])).toString(16).replace(/^(.)$/,'0$1');\r\n                }\r\n                else color = color.replace(/^#?([\\da-f])([\\da-f])([\\da-f])$/i, '$1$1$2$2$3$3');\r\n                return '#'+color;\r\n            }</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm working with XAML data that has a hex format of #AARRGGBB (Alpha, Red, Green, Blue).  Using the answers above, here's my solution: </p>\n\n<pre><code>function hexToRgba(hex) {\n    var bigint, r, g, b, a;\n    //Remove # character\n    var re = /^#?/;\n    var aRgb = hex.replace(re, '');\n    bigint = parseInt(aRgb, 16);\n\n    //If in #FFF format\n    if (aRgb.length == 3) {\n        r = (bigint &gt;&gt; 4) &amp; 255;\n        g = (bigint &gt;&gt; 2) &amp; 255;\n        b = bigint &amp; 255;\n        return \"rgba(\" + r + \",\" + g + \",\" + b + \",1)\";\n    }\n\n    //If in #RRGGBB format\n    if (aRgb.length &gt;= 6) {\n        r = (bigint &gt;&gt; 16) &amp; 255;\n        g = (bigint &gt;&gt; 8) &amp; 255;\n        b = bigint &amp; 255;\n        var rgb = r + \",\" + g + \",\" + b;\n\n        //If in #AARRBBGG format\n        if (aRgb.length == 8) {\n            a = ((bigint &gt;&gt; 24) &amp; 255) / 255;\n            return \"rgba(\" + rgb + \",\" + a.toFixed(1) + \")\";\n        }\n    }\n    return \"rgba(\" + rgb + \",1)\";\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/kvLyscs3/\" rel=\"nofollow\">http://jsfiddle.net/kvLyscs3/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For convert directly from jQuery you can try:</p>\n\n<pre><code>  function rgbToHex(color) {\n    var bg = color.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n    function hex(x) {\n      return (\"0\" + parseInt(x).toString(16)).slice(-2);\n    }\n    return     \"#\" + hex(bg[1]) + hex(bg[2]) + hex(bg[3]);\n  }\n\n  rgbToHex($('.col-tab-bar .col-tab span').css('color'))\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function getRGB(color){\n  if(color.length == 7){\n    var r = parseInt(color.substr(1,2),16);\n    var g = parseInt(color.substr(3,2),16);\n    var b = parseInt(color.substr(5,2),16);    \n    return 'rgb('+r+','+g+','+b+')' ;\n  }    \n  else\n    console.log('Enter correct value');\n}\nvar a = getRGB('#f0f0f0');\nif(!a){\n a = 'Enter correct value'; \n}\n\nenter code here\n\na;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Well, i just need to make these convertion by using javascript.</p>\n\n<p>I've try this, but it didn't works...</p>\n\n<pre><code>function RGB2HTML(red, green, blue)\n{\n    var decColor = red + 256 * green + 65536 * blue;\n    return decColor.toString(16);\n}\n</code></pre>\n\n<p>Example :</p>\n\n<pre><code>#0080C0 to (0,128,192)\n</code></pre>\n",
            "last_activity_date": 1425582335,
            "question_id": 5623838,
            "score": 103,
            "tags": [
                "javascript"
            ],
            "title": "RGB to Hex and Hex to RGB"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>With jQuery:</p>\n\n<pre><code>$.ajax({\n    url:'http://www.example.com/somefile.ext',\n    type:'HEAD',\n    error: function()\n    {\n        //file not exists\n    },\n    success: function()\n    {\n        //file exists\n    }\n});\n</code></pre>\n\n<p>EDIT:</p>\n\n<p>Here is the code for checking 404 status, without using jQuery</p>\n\n<pre><code>function UrlExists(url)\n{\n    var http = new XMLHttpRequest();\n    http.open('HEAD', url, false);\n    http.send();\n    return http.status!=404;\n}\n</code></pre>\n\n<p>Small changes and it could check for status HTTP status code 200 (success), instead.</p>\n",
                    "is_accepted": true,
                    "score": 215
                },
                {
                    "body": "<p>Not sure its possible without something serverside going on. It would cause interesting security problems if I could write stuff to interact with your files in javascript. Use PHP for this in my opinion.</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>What you'd have to do is send a request to the server for it to do the check, and then send back the result to you.</p>\n\n<p>What type of server are you trying to communicate with?  You may need to write a small service to respond to the request.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>i used this script to add alternative image</p>\n\n<pre><code>function imgError()\n{\nalert('The image could not be loaded.');\n}\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;img src=\"image.gif\" onerror=\"imgError()\" /&gt;\n</code></pre>\n\n<p><a href=\"http://wap.w3schools.com/jsref/event_onerror.asp\">http://wap.w3schools.com/jsref/event_onerror.asp</a></p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>This works for me:</p>\n\n<pre><code>function ImageExist(url) \n{\n   var img = new Image();\n   img.src = url;\n   return img.height != 0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>So long as you're testing files on the <i>same domain</i> this should work:</p>\n\n<pre><code>function fileExists(url) {\n    if(url){\n        var req = new XMLHttpRequest();\n        req.open('GET', url, false);\n        req.send();\n        return req.status==200;\n    } else {\n        return false;\n    }\n}\n</code></pre>\n\n<p>Please note, this example is using a GET request, which besides getting the headers (all you need to check weather the file exists) gets the whole file.\nIf the file is big enough this method can take a while to complete.</p>\n\n<p>The better way to do this would be changing this line: <code>req.open('GET', url, false);</code> to <code>req.open('HEAD', url, false);</code></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>A similar and more up-to-date approach.</p>\n\n<pre><code>$.get(url)\n    .done(function() { \n        // exists code \n    }).fail(function() { \n        // not exists code\n    })\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>For a client computer this can be achieved by:</p>\n\n<pre><code>try\n{\n  var myObject, f;\n  myObject = new ActiveXObject(\"Scripting.FileSystemObject\");\n  f =   myObject.GetFile(\"C:\\\\img.txt\");\n  f.Move(\"E:\\\\jarvis\\\\Images\\\\\");\n}\ncatch(err)\n{\n  alert(\"file does not exist\")\n}\n</code></pre>\n\n<p>This is my program to transfer a file to a specific location and shows alert if it does not exist</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I was getting a cross domain permissions issue when trying to run the answer to this question  so I went with:              </p>\n\n<pre><code>function UrlExists(url) {\n$('&lt;img src=\"'+ url +'\"&gt;').load(function() {\n    return true;\n}).bind('error', function() {\n    return false;\n});\n}\n</code></pre>\n\n<p>It seems to work great, hope this helps someone!</p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>How do I check if a file on my server exists in jQuery or JavaScript?</p>\n",
            "last_activity_date": 1408831525,
            "question_id": 3646914,
            "score": 125,
            "tags": [
                "javascript",
                "jquery",
                "file-io"
            ],
            "title": "How do I check if file exists in jQuery or JavaScript?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You can't.  You can call a JS function from HTML <em>outputted</em> by PHP, but that's a whole 'nother thing.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I always just use  <code>echo \"&lt;script&gt; function(); &lt;/script&gt;\";</code> or something similar. you're not technically calling the function in PHP, but this as close as your going to get.</p>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>PHP runs in the server. JavaScript runs in the client. So php can't call a JavaScript function.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Thats not possible. PHP is a Server side language and JavaScript client side and they don't really know a lot about each other. You would need a Server sided JavaScript Interpreter (like Aptanas Jaxer). Maybe what you actually want to do is to use an Ajax like Architecture (JavaScript function calls PHP script asynchronously and does something with the result).</p>\n\n<pre><code>&lt;td onClick= loadxml()&gt;&lt;i&gt;Click for Details&lt;/i&gt;&lt;/td&gt;\n\nfunction loadxml()\n{\n    result = loadScriptWithAjax(\"/script.php?event=button_clicked\");\n    alert(result);\n}\n\n// script.php\n&lt;?php\n    if($_GET['event'] == 'button_clicked')\n    \techo \"\\\"You clicked a button\\\"\";\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Look, here's the deal. As far as PHP is concerned (or really, a web server in general), an HTML page is nothing more complicated than a big ol' string. That's it.</p>\n\n<p>All the fancy work you can do with language like PHP - reading from databases and web services and all that - the ultimate end goal is the exact same basic principle: generate a string of HTML*.</p>\n\n<p>Your big HTML string doesn't become anything more special than that until it's loaded by a web browser. Once a browser loads the page, <em>then</em> all the other magic happens - layout, box model stuff, DOM generation, and many other things, including JavaScript execution.</p>\n\n<p>Once you grasp that concept, you realize you don't \"call JavaScript from PHP\", you merely \"include a JavaScript function call in your output\".</p>\n\n<p>There are many ways to do this, but here are a couple.</p>\n\n<p>Using just PHP</p>\n\n<pre><code>echo '&lt;script type=\"text/javascript\"&gt;'\n   , 'jsfunction();'\n   , '&lt;/script&gt;'\n;\n</code></pre>\n\n<p>escaping from php mode to direct output mode</p>\n\n<pre><code>&lt;?php\n// some php stuff\n?&gt;\n&lt;script type=\"text/javascript\"&gt;\n  jsFunction();\n&lt;/script&gt;\n</code></pre>\n\n<p>You don't need to return a function name or anything like that.  First of all, stop writing AJAX requests by hand.  You're only making it hard on yourself.  Get jQuery or one of the other excellent frameworks out there.</p>\n\n<p>Secondly, understand that you already are going to be executing javascript code once the response is received from the AJAX call.</p>\n\n<p>Here's an example of what I think you're doing with jQuery's AJAX</p>\n\n<pre><code>$.get(\n    'wait.php'\n  , {}\n  , function( returnedData )\n    {\n      document.getElementById(\"txt\").innerHTML = returnedData;\n\n      //  Ok, here's where you can call another function\n      someOtherFunctionYouWantToCall();\n\n      // But unless you really need to, you don't have do\n      // We're already in the middle of a function execution\n      // right here, so you might as well put your code here\n    }\n  , 'text'\n);\n\n\nfunction someOtherFunctionYouWantToCall()\n{\n  // stuff\n}\n</code></pre>\n\n<p>Now, if you're dead-set on sending a function name from PHP back to the AJAX call, you can do that too.  </p>\n\n<pre><code>$.get(\n    'wait.php'\n  , {}\n  , function( returnedData )\n    {\n      // Assumes returnedData has a javascript function name\n      window[returnedData]();\n    }\n  , 'text'\n);\n</code></pre>\n\n<p>* Or JSON or XML or whatever</p>\n",
                    "is_accepted": true,
                    "score": 164
                },
                {
                    "body": "<p>Per now (February 2012) there's a new feature for this. Check <a href=\"http://www.php.net/manual/en/v8js.examples.php\">here</a></p>\n\n<p>Code sample (taken from the web):</p>\n\n<pre><code>&lt;?php\n\n$v8 = new V8Js();\n\n/* basic.js */\n$JS = &lt;&lt;&lt; EOT\nlen = print('Hello' + ' ' + 'World!' + \"\\\\n\");\nlen;\nEOT;\n\ntry {\n  var_dump($v8-&gt;executeString($JS, 'basic.js'));\n} catch (V8JsException $e) {\n  var_dump($e);\n}\n\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>You may not be able to directly do this, but the <a href=\"http://www.xajax-project.org/\" rel=\"nofollow\">Xajax</a> library is pretty close to what you want. I will demonstrate with an example. Here's a button on a webpage:</p>\n\n<pre><code>&lt;button onclick=\"xajax_addCity();\"&gt;Add New City&lt;/button&gt; \n</code></pre>\n\n<p>Our intuitive guess would be that <code>xajax_addCity()</code> is a Javascript function, right? Well, right and wrong. The cool thing Xajax allows is that we don't have any JS function called <code>xajax_addCity()</code>, but what we do have is a PHP function called <code>addCity()</code> that can do whatever PHP does! </p>\n\n<pre><code>&lt;?php function addCity() { echo \"Wow!\"; } ?&gt;\n</code></pre>\n\n<p>Think about it for a minute. We are virtually invoking a PHP function from Javascript code!\nThat over-simplified example was just to whet the appetite, a better explanation is on the Xajax site, have fun!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>you can try this one also:-</p>\n\n<pre><code>    public function PHPFunction()\n    {\n            echo '&lt;script type=\"text/javascript\"&gt;\n                 test();\n            &lt;/script&gt;'; \n    }\n    &lt;script type=\"text/javascript\"&gt;\n    public function test()\n    {\n        alert('In test Function');\n    }\n    &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you want to echo it out for later execution it's ok</p>\n\n<p>If you want to execute the JS and use the results in PHP use V8JS</p>\n\n<pre><code>V8Js::registerExtension('say_hi', 'print(\"hey from extension! \"); var said_hi=true;', array(), true);\n$v8 = new V8Js();\n$v8-&gt;executeString('print(\"hello from regular code!\")', 'test.php');\n$v8-&gt;executeString('if (said_hi) { print(\" extension already said hi\"); }');\n</code></pre>\n\n<p>You can refer here for further reference:\n<a href=\"http://stackoverflow.com/questions/9023790/what-are-extensions-in-php-v8js\">What are Extensions in php v8js?</a></p>\n\n<p>If you want to execute HTML&amp;JS and use the output in PHP <a href=\"http://htmlunit.sourceforge.net/\" rel=\"nofollow\">http://htmlunit.sourceforge.net/</a> is your solution</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How to call a JavaScript function from PHP?</p>\n\n<pre><code>&lt;?php\n\n  jsfunction();\n  // or\n  echo(jsfunction());\n  // or\n  // Anything else?\n</code></pre>\n\n<p>The following code is from <em>xyz.html</em> (on a button click) it calls a <code>wait()</code> in an external <em>xyz.js</em>. This <code>wait()</code> calls wait.php.</p>\n\n<pre><code>function wait() \n{\n  xmlhttp=GetXmlHttpObject();\n  var url=\"wait.php\"; \\\n  xmlhttp.onreadystatechange=statechanged; \n  xmlhttp.open(\"GET\", url, true); \n  xmlhttp.send(null);\n} \n\nfunction statechanged()\n{ \n  if(xmlhttp.readyState==4) {\n       document.getElementById(\"txt\").innerHTML=xmlhttp.responseText;\n  }\n}\n</code></pre>\n\n<p>and <em>wait.php</em></p>\n\n<pre><code>&lt;?php echo \"&lt;script&gt; loadxml(); &lt;/script&gt;\"; \n</code></pre>\n\n<p>where <code>loadxml()</code> calls code from another PHP file the same way. </p>\n\n<p>The <code>loadxml()</code> is working fine otherwise, but it is not being called the way I want it.</p>\n",
            "last_activity_date": 1400108176,
            "question_id": 1045845,
            "score": 68,
            "tags": [
                "php",
                "javascript"
            ],
            "title": "How to call a JavaScript function from PHP?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You could use <a href=\"http://www.w3.org/TR/FileAPI/\" rel=\"nofollow\">FileAPI</a>, but it's pretty much unsupported.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>These should help...</p>\n\n<p><a href=\"http://stackoverflow.com/questions/246801/how-can-you-encode-to-base64-using-javascript\">How can you encode to Base64 using Javascript?</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/934012/get-image-data-in-javascript\">Get image data in Javascript?</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can use the HTML5 <code>&lt;canvas&gt;</code> for it:</p>\n\n<p>Create a canvas, load your image into it and then use <a href=\"https://developer.mozilla.org/en/DOM/HTMLCanvasElement\"><code>toDataURL()</code></a> to get the base64 representation (actually, it's a <code>data:</code> URL but it contains the base64-encoded image).</p>\n",
                    "is_accepted": true,
                    "score": 48
                },
                {
                    "body": "<p>Well, if you are using dojo, it gives us direct way to encode or decode into base64.</p>\n\n<p>Try this:</p>\n\n<p>To encode an array of bytes using dojox.encoding.base64:</p>\n\n<pre><code>var str = dojox.encoding.base64.encode(myByteArray);\n</code></pre>\n\n<p>To decode a base64-encoded string:</p>\n\n<pre><code>var bytes = dojox.encoding.base64.decode(str);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try this:</p>\n\n<h3>Code</h3>\n\n<pre><code>/**\n * Convert an image \n * to a base64 url\n * @param  {String}   url         \n * @param  {Function} callback    \n * @param  {String}   [outputFormat=image/png]           \n */\nfunction convertImgToBase64URL(url, callback, outputFormat){\n    var canvas = document.createElement('CANVAS'),\n        ctx = canvas.getContext('2d'),\n        img = new Image;\n    img.crossOrigin = 'Anonymous';\n    img.onload = function(){\n        var dataURL;\n        canvas.height = img.height;\n        canvas.width = img.width;\n        ctx.drawImage(img, 0, 0);\n        dataURL = canvas.toDataURL(outputFormat);\n        callback(dataURL);\n        canvas = null; \n    };\n    img.src = url;\n}\n</code></pre>\n\n<h3>Usage</h3>\n\n<pre><code>convertImgToBase64URL('http://bit.ly/18g0VNp', function(base64Img){\n    // Base64DataURL\n});\n</code></pre>\n\n<h3>Supported input formats</h3>\n\n<ul>\n<li>image/png</li>\n<li>image/jpeg</li>\n<li>image/jpg</li>\n<li>image/gif</li>\n<li>image/bmp</li>\n<li>image/tiff</li>\n<li>image/x-icon</li>\n<li>image/svg+xml</li>\n<li>image/webp</li>\n<li>image/xxx</li>\n</ul>\n\n<h3>Supported output formats</h3>\n\n<ul>\n<li>image/png</li>\n<li>image/jpeg</li>\n<li>image/webp (chrome)</li>\n</ul>\n\n<h3>Demo:</h3>\n\n<p><a href=\"http://jsfiddle.net/handtrix/YvQ5y/\">http://jsfiddle.net/handtrix/YvQ5y/</a></p>\n\n<h3>Advanced-Code:</h3>\n\n<p><a href=\"https://gist.github.com/HaNdTriX/7704632\">https://gist.github.com/HaNdTriX/7704632</a></p>\n\n<h3>Test: toDataUrl mime type</h3>\n\n<p><a href=\"http://kangax.github.io/jstests/toDataUrl_mime_type_test/\">http://kangax.github.io/jstests/toDataUrl_mime_type_test/</a></p>\n\n<h3>Browser Support (so far I know)</h3>\n\n<ul>\n<li><a href=\"http://caniuse.com/#feat=canvas\">http://caniuse.com/#feat=canvas</a></li>\n<li>> IE10 (IE10 just works with same origin images)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 100
                },
                {
                    "body": "<p>This snippet could convert your string,image and even video file to base64 string data. Try it once...</p>\n\n<pre><code>&lt;input id=\"inputFileToLoad\" type=\"file\" onchange=\"encodeImageFileAsURL();\" /&gt;\n&lt;div id=\"imgTest\"&gt;&lt;/div&gt;\n&lt;script type='text/javascript'&gt;\nfunction encodeImageFileAsURL(){\n\n    var filesSelected = document.getElementById(\"inputFileToLoad\").files;\n    if (filesSelected.length &gt; 0)\n    {\n        var fileToLoad = filesSelected[0];\n\n        var fileReader = new FileReader();\n\n        fileReader.onload = function(fileLoadedEvent) {\n            var srcData = fileLoadedEvent.target.result; // &lt;--- data: base64\n\n            var newImage = document.createElement('img');\n            newImage.src = srcData;\n\n            document.getElementById(\"imgTest\").innerHTML = newImage.outerHTML;\n            alert(\"Converted Base64 version is \"+document.getElementById(\"imgTest\").innerHTML);\n            console.log(\"Converted Base64 version is \"+document.getElementById(\"imgTest\").innerHTML);\n        }\n        fileReader.readAsDataURL(fileToLoad);\n    }\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I used toDataURL() of canvas object to get base64 strings.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As far as i know image can be converted into base64 string either by FileReader() or storing it in canvas element and then use toDataURL() to get image.I had the simmilar kind of problem you can refer this.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/26212792/convert-an-image-to-canvas-that-is-already-loaded/26554277#26554277\">Convert an image to canvas that is already loaded</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is what i did </p>\n\n<pre><code>//Author James Harrington 2014\nfunction base64(file, callback){\n  var coolFile = {};\n  function readerOnload(e){\n    var base64 = btoa(e.target.result);\n    coolFile.base64 = base64;\n    callback(coolFile)\n  };\n\n  var reader = new FileReader();\n  reader.onload = readerOnload;\n\n  var file = file[0].files[0];\n  coolFile.filetype = file.type;\n  coolFile.size = file.size;\n  coolFile.filename = file.name;\n  reader.readAsBinaryString(file);\n}\n</code></pre>\n\n<p>And here is how you use it</p>\n\n<pre><code>base64( $('input[type=\"file\"]'), function(data){\n  console.log(data.base64)\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I need to convert my image to a base64 string so that i can send my image to a server.\nIs there any js file for this... ? Else how to convert it</p>\n",
            "last_activity_date": 1423730495,
            "question_id": 6150289,
            "score": 53,
            "tags": [
                "javascript",
                "base64"
            ],
            "title": "How to convert image into base64 string using javascript"
        },
        {
            "answer_count": 28,
            "answers": [
                {
                    "body": "<p>Are you using any other JavaScript libraries? If so, you will probably need to use jQuery in compatibility mode:</p>\n\n<p><a href=\"http://docs.jquery.com/Using_jQuery_with_Other_Libraries\" rel=\"nofollow\">http://docs.jquery.com/Using_jQuery_with_Other_Libraries</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I use <a href=\"http://msdn.microsoft.com/en-us/library/system.web.mvc.urlhelper.content.aspx\" rel=\"nofollow\">Url.Content</a> and never have a problem.</p>\n\n<pre><code>&lt;script src=\"&lt;%= Url.Content (\"~/Scripts/jquery-1.4.1.min.js\") %&gt;\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>That error can only be caused by one of three things:</p>\n\n<ol>\n<li>Your JavaScript file is not being properly loaded into your page</li>\n<li>You have a botched version of jQuery.  This could happen because someone edited the core file, or a plugin may have overwritten the $ variable.</li>\n<li>You have JavaScript running before the page is fully loaded, and as such, before jQuery is fully loaded.</li>\n</ol>\n\n<p>You should check the <a href=\"http://getfirebug.com/\">Firebug</a> <em>net</em> panel to see if the file is actually being loaded properly.  If not, it will be highlighted red and will say \"404\" beside it.  If the file is loading properly, that means that the issue is number 2.</p>\n\n<p>Make sure all javascript code is being run inside a code block such as:</p>\n\n<pre><code>$(document).ready(function () {\n  //your code here\n});\n</code></pre>\n\n<p>This will ensure that your code is being loaded <strong>after</strong> jQuery has been initialized.</p>\n\n<p>One final thing to check is to make sure that you are not loading any plugins <strong>before</strong> you load jQuery.  Plugins extend the \"$\" object, so if you load a plugin before loading jQuery core, then you'll get the error you described.</p>\n",
                    "is_accepted": true,
                    "score": 217
                },
                {
                    "body": "<p>I got the same error message when I misspelled the jQuery reference and instead of <code>type=\"text/javascript\"</code> I typed \"...javascirpt\". ;)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had the same exact problem, but checking my HTML code over and over again, I got it. The previous label (a Meta label in my case) was misspelled, I forgot to close quotes, causing a missinterpretation of the browser.\nNot so fancy problem-solution, but might be the cause of the same issue.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I just did the same thing and found i had a whole lot of </p>\n\n<pre><code>type=\"text/javacsript\"\n</code></pre>\n\n<p>So they were loading, but no further hint as to why it wasn't working. Needless to say, proper spelling fixed it.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>It could be that you have your script tag called before the jquery script is called.</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"js/script.js\"&gt;&lt;/script&gt;\n\n&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p><strong>This results as $ is not defined</strong></p>\n\n<p>Put the jquery.js before your script tag  and it will work ;) like so:</p>\n\n<pre><code>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n\n&lt;script type=\"text/javascript\" src=\"js/script.js\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 62
                },
                {
                    "body": "<p>I had this problem once for no apparent reason. It was happenning locally whilst I was running through the aspnet development server. It had been working and I reverted everything to a state where it had previously been working and still it didn't work. I looked in the chrome debugger and the jquery-1.7.1.min.js had loaded without any problems. It was all very confusing. I still don't know what the problem was but closing the browser, closing the development server and then trying again sorted it out.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>We have the same problem....but accidentally i checked folder properties and set something...</p>\n\n<p>You have to check the properties of each folders that you're accessing..</p>\n\n<ol>\n<li>right click folder</li>\n<li>'permissions' tab</li>\n<li>set the folder access : \n OWNER: create and delete files \n GROUP: access files\n OTHERS: access files</li>\n</ol>\n\n<p>I hope that this is the solution......</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In the solution it is mentioned - \n\"One final thing to check is to make sure that you are not loading any plugins before you load jQuery. Plugins extend the \"$\" object, so if you load a plugin before loading jQuery core, then you'll get the error you described.\"</p>\n\n<p>For avoiding this - </p>\n\n<p>Many JavaScript libraries use $ as a function or variable name, just as jQuery does. In jQuery's case, $ is just an alias for jQuery, so all functionality is available without using $. If we need to use another JavaScript library alongside jQuery, we can return control of $ back to the other library with a call to $.noConflict():</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Just place  jquery url on the top of your jquery code</p>\n\n<p>like this--</p>\n\n<pre><code>&lt;script src=\"&lt;%=ResolveUrl(\"~/Scripts/jquery-1.3.2.js\")%&gt;\" type=\"text/javascript\"&gt;&lt;/script&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    $(function() {\n        $('#post').click(function() {\n            alert(\"test\"); \n        });\n    });\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Turns out my problem was a rather stupid one - I had put <code>&lt;script href=\"\"&gt;</code> instead of <code>&lt;script src=\"\"&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It sounds like jQuery isn't loading properly. Which source/version are you using?</p>\n\n<p>Alternatively, it could a be namespace collision, so try using jQuery explicitly instead of using <code>$</code>. If that works, you may like to use <code>noConflict</code> to ensure the other code that's using <code>$</code> doesn't break.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had the same problem and it was because my reference to the jQuery.js was not in the  tag.  Once I switched that, everything started working.</p>\n\n<p>Anthony</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>When using jQuery in asp.net, if you are using a master page and you are loading the jquery source file there, make sure you have the header contentplaceholder after all the jquery script references. </p>\n\n<p>I had a problem where any pages that used that master page would return '$ is not defined' simply because the incorrect order was making the client side code run before the jquery object was created. So make sure you have:</p>\n\n<pre><code>&lt;head runat=\"server\"&gt;\n    &lt;script type=\"text/javascript\" src=\"Scripts/jquery-VERSION#.js\"&gt;&lt;/script&gt;\n    &lt;asp:ContentPlaceHolder id=\"Header\" runat=\"server\"&gt;&lt;/asp:ContentPlaceHolder&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>That way the code will run in order and you will be able to run jQuery code on the child pages.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In my case I was pointing to Google hosted JQuery.  It was included properly, but I was on an HTTPS page and calling it via HTTP.  Once I fixed the problem (or allowed insecure content), it fired right up.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>After tried everything here with no result, I solved the problem simply by moving the script src tag from body to head</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>after some tests i found a fast solution ,\nyou can add in top of your index page:</p>\n\n<pre><code>&lt;script&gt;\n$=jQuery;\n&lt;/script&gt;\n</code></pre>\n\n<p>it work very fine :)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use a <strong>scripts section</strong> in the view and master layout.</p>\n\n<p>Put all your scripts defined in your view inside a Scripts section of the view. This way you can have the master layout load this after all other scripts have been loaded. This is the default setup when starting a new MVC5 web project. Not sure about earlier versions.</p>\n\n<p><strong>Views/Foo/MyView.cshtml:</strong></p>\n\n<pre><code>// The rest of your view code above here.\n\n@section Scripts \n{ \n    // Either render the bundle defined with same name in BundleConfig.cs...\n    @Scripts.Render(\"~/bundles/myCustomBundle\")\n\n    // ...or hard code the HTML.\n    &lt;script src=\"URL-TO-CUSTOM-JS-FILE\"&gt;&lt;/script&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n      $(document).ready(function () {\n\n        // Do your custom javascript for this view here. Will be run after \n        // loading all the other scripts.            \n      });\n    &lt;/script&gt;\n}\n</code></pre>\n\n<p><strong>Views/Shared/_Layout.cshtml</strong></p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n    &lt;!-- ... Rest of your layout file here ... --&gt;\n\n    @Scripts.Render(\"~/bundles/jquery\")\n    @Scripts.Render(\"~/bundles/bootstrap\")\n    @RenderSection(\"scripts\", required: false)\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Note how the <em>scripts</em> section is rendered last in the master layout file.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You just put the jQuery library in the head section of the html :)</p>\n\n<pre><code>&lt;head&gt;\n&lt;script src=\"assets/js/jquery-1.10.2.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"assets/js/bootstrap.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>you need to use one of the two solutions below</p>\n\n<pre><code>(function($){\n// your standard jquery code goes here with $ prefix\n// best used inside a page with inline code, \n// or outside the document ready, enter code here\n })(jQuery); \n</code></pre>\n\n<p>or</p>\n\n<pre><code>jQuery(document).ready(function($){\n// standard on load code goes here with $ prefix\n// note: the $ is setup inside the anonymous function of the ready command\n});\n</code></pre>\n\n<p>please be aware that many times <strong>$(document).ready(function(){//code here});</strong> will not work, especially true in wordpress.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I was having this same problem and couldn't figure out what was causing it. I recently converted my HTML files from Japanese to UTF-8, but I didn't do anything with the script files. Somehow jquery-1.10.2.min.js became corrupted in this process (I still have no idea how). Replacing jquery-1.10.2.min.js with the original fixed it.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>it appears that if you locate your jquery.js files under the same folder or in some subfolders where your html file is, the Firebug problem is solved. eg if your html is under C:/folder1/, then your js files should be somewhere under C:/folder1/ (or C:/folder1/folder2 etc) as well and addressed accordingly in the html doc. hope this helps.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This worked for me (MVC5 project):</p>\n\n<pre><code>&lt;script src=\"~/Scripts/jquery-1.10.2.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If the jQuery plugin call is next to the <code>&lt;/body&gt;</code>, and your script is loaded before that, you need to put your code inside this, like this example:</p>\n\n<p><code>window.onload = function() {\n  //YOUR JQUERY CODE\n }\n</code></p>\n\n<p>so, your code will run only after the window load. In that point, the jQuery (<code>$</code>) will be defined.</p>\n\n<p>If you use that:</p>\n\n<p><code>$(document).ready(function () {\n  //YOUR JQUERY CODE\n });\n</code></p>\n\n<p>the <code>$</code> isn't yet defined at this time, because it is called before de jQuery call, and your script will fail on that first line on console.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>u just add at starting of your page </p>\n\n<pre><code> &lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>and check your src link in a any browser address bar, if you are getting some code then this will work for you.\nasif</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have the same issue and no case resolve me the problem. The only thing that works for me, it's put on the  of the Site.master file, the next:</p>\n\n<pre><code>&lt;script src=\"&lt;%= ResolveUrl(\"~/Scripts/jquery-1.7.1.min.js\") %&gt;\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script src=\"&lt;%= ResolveUrl(\"~/Scripts/bootstrap/js/bootstrap.min.js\") %&gt;\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>With src=\"&lt;%= ResolveUrl(\"\")... the load of jQuery in the Content Pages is correct.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<ol>\n<li><p>Check the exact path of your jquery file is included.</p>\n\n<p><code>&lt;script src=\"assets/plugins/jquery/jquery.min.js\"&gt;&lt;/script&gt;</code> </p></li>\n</ol>\n\n<p><strong>if you add this on bottom of your page , please all call JS function below this declaration.</strong></p>\n\n<ol start=\"2\">\n<li><p>Check using this code test ,</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n/***\n * Created by dadenew\n * Submit email subscription using ajax\n * Send email address\n * Send controller\n * Recive response\n */\n$(document).ready(function() { //you can replace $ with Jquery\n\n  alert( 'jquery working~!' );\n});\n</code></pre>\n\n<p></p></li>\n</ol>\n\n<p>Peace!</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a simple jquery click event</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    $(function() {\n        $('#post').click(function() {\n            alert(\"test\"); \n        });\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>and a jquery reference defined in the site.master</p>\n\n<pre><code>&lt;script src=\"&lt;%=ResolveUrl(\"~/Scripts/jquery-1.3.2.js\")%&gt;\" type=\"text/javascript\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>I have checked that the script is being resolved correctly, i'm able to see the markup and view the script directly in firebug, so i must be being found. However i am still getting:</p>\n\n<blockquote>\n  <p>$ is not defined</p>\n</blockquote>\n\n<p>and non of the jquery works. I've also tried the various variations of this like $(document).ready and jQuery etc.</p>\n\n<p>It's an MVC 2 app on .net 3.5, i'm sure i'm being really dense, everywhere on google says check the file is reference correctly, which i have checked and checked again, please advise! :/</p>\n",
            "last_activity_date": 1418805707,
            "question_id": 2194992,
            "score": 151,
            "tags": [
                "javascript",
                "jquery",
                "asp.net-mvc"
            ],
            "title": "JQuery - $ is not defined"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>What I ended up doing for jQuery 1.2 is :</p>\n\n<pre><code>jQuery.extend(\n    jQuery.expr[':'], { \n        Contains : \"jQuery(a).text().toUpperCase().indexOf(m[3].toUpperCase())&gt;=0\" \n});\n</code></pre>\n\n<p>This will extend jquery to have a :Contains selector that is case insensitive, the :contains selector remains unchanged.</p>\n\n<p>Edit: For jQuery 1.3 (thanks @user95227) and later you need</p>\n\n<pre><code>jQuery.expr[':'].Contains = function(a,i,m){\n     return jQuery(a).text().toUpperCase().indexOf(m[3].toUpperCase())&gt;=0;\n};\n</code></pre>\n\n<p>Edit: \nApparently accessing the DOM directly by using</p>\n\n<pre><code>(a.textContent || a.innerText || \"\") \n</code></pre>\n\n<p>instead of </p>\n\n<pre><code>jQuery(a).text()\n</code></pre>\n\n<p>In the previous expression speeds it up considerably so try at your own risk if speed is an issue. (see @John 's question)</p>\n\n<p>Latest edit: For jQuery 1.8 it should be:</p>\n\n<pre><code>jQuery.expr[\":\"].Contains = jQuery.expr.createPseudo(function(arg) {\n    return function( elem ) {\n        return jQuery(elem).text().toUpperCase().indexOf(arg.toUpperCase()) &gt;= 0;\n    };\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 83
                },
                {
                    "body": "<p>If someone (like me) is interested what do <em>a</em> and <em>m[3]</em> mean in <em>Contains</em> definition.</p>\n\n<p><hr /></p>\n\n<p><strong>KEY/LEGEND: Params made available by jQuery for use in the selector definitions:</strong> </p>\n\n<p><em>r</em> = jQuery array of elements being scrutinised. (eg: <em>r.length</em> = Number of elements) </p>\n\n<p><em>i</em> = index of element currently under scrutiny, within array <em>r</em>. </p>\n\n<p><em>a</em> = element currently under scrutiny. Selector statement must return true to include it in its matched results. </p>\n\n<p><em>m[2]</em> = nodeName or * that we a looking for (left of colon). </p>\n\n<p><em>m[3]</em> = param passed into the :selector(param). Typically an index number, as in <em>:nth-of-type(5)</em>, or a string, as in <em>:color(blue)</em>.</p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>As of jQuery 1.3, this method is deprecated. To get this to work it needs to be defined as a function:</p>\n\n<pre><code>jQuery.expr[':'].Contains = function(a,i,m){\n    return jQuery(a).text().toUpperCase().indexOf(m[3].toUpperCase())&gt;=0;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<pre><code>jQuery.expr[':'].contains = function(a,i,m){\n    return jQuery(a).text().toUpperCase().indexOf(m[3].toUpperCase())&gt;=0;\n};\n</code></pre>\n\n<p>The update code works great in 1.3, but \"contains\" should be lower case on the first letter unlike the previous example. </p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>To make it optionally case insensitive:\n<a href=\"http://bugs.jquery.com/ticket/278\">http://bugs.jquery.com/ticket/278</a></p>\n\n<pre><code>$.extend($.expr[':'], {\n  'containsi': function(elem, i, match, array)\n  {\n    return (elem.textContent || elem.innerText || '').toLowerCase()\n    .indexOf((match[3] || \"\").toLowerCase()) &gt;= 0;\n  }\n});\n</code></pre>\n\n<p>then use <code>:containsi</code> instead of <code>:contains</code></p>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p>A variation that seems to perform slightly faster and that also <strong>allows regular expressions</strong> is:</p>\n\n<pre><code>jQuery.extend (\n    jQuery.expr[':'].containsCI = function (a, i, m) {\n        //-- faster than jQuery(a).text()\n        var sText   = (a.textContent || a.innerText || \"\");     \n        var zRegExp = new RegExp (m[3], 'i');\n        return zRegExp.test (sText);\n    }\n);\n</code></pre>\n\n<p><br></p>\n\n<hr>\n\n<p>Not only is this case-insensitive, but it allows powerful searches like:</p>\n\n<ul>\n<li><code>$(\"p:containsCI('\\\\bup\\\\b')\")</code>   (Matches \"Up\" or \"up\", but not \"upper\", \"wakeup\", etc.)</li>\n<li><code>$(\"p:containsCI('(?:Red|Blue) state')\")</code>   (Matches \"red state\" or \"blue state\", but not \"up state\", etc.)</li>\n<li><code>$(\"p:containsCI('^\\\\s*Stocks?')\")</code>   (Matches \"stock\" or \"stocks\", but only at the start of the paragraph (ignoring any leading whitespace).)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>In jQuery 1.8 you will need to use </p>\n\n<pre><code>jQuery.expr[\":\"].icontains = jQuery.expr.createPseudo(function (arg) {                                                                                                                                                                \n    return function (elem) {                                                            \n        return jQuery(elem).text().toUpperCase().indexOf(arg.toUpperCase()) &gt;= 0;        \n    };                                                                                  \n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>May be late.... but,</p>\n\n<p>I'd prefer to go this way..</p>\n\n<pre><code>$.extend($.expr[\":\"], {\n\"MyCaseInsensitiveContains\": function(elem, i, match, array) {\nreturn (elem.textContent || elem.innerText || \"\").toLowerCase().indexOf((match[3] || \"\").toLowerCase()) &gt;= 0;\n}\n});\n</code></pre>\n\n<p>This way, you <strong>DO NOT</strong> tamper with jQuery's NATIVE <em>'.contains'</em>... You may need the default one later...if tampered with, you might find yourself back to <strong><em>stackOverFlow</em></strong>...</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>Is there a case insensitive version of the <a href=\"http://docs.jquery.com/Selectors/contains\">:contains</a> jQuery selector or should I do the work manually by looping over all elements and comparing their .text() to my string?</p>\n",
            "last_activity_date": 1411664279,
            "question_id": 187537,
            "score": 88,
            "tags": [
                "javascript",
                "jquery",
                "jquery-selectors"
            ],
            "title": "Is there a case insensitive jQuery :contains selector?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>That's your <a href=\"http://en.wikipedia.org/wiki/JQuery\">jQuery</a> <a href=\"http://en.wikipedia.org/wiki/Application_programming_interface\">API</a> problem, not your script. There is not much to worry about.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>This is only a warning: your code still works, but probably won't work in the future as the method is deprecated. See the <a href=\"https://code.google.com/p/chromium/codesearch#chromium/src/third_party/WebKit/Source/core/frame/UseCounter.cpp&amp;q=event.returnValue%20deprecated&amp;sq=package%3achromium&amp;type=cs&amp;l=673\">relevant source of Chromium</a> and <a href=\"http://src.chromium.org/viewvc/blink/trunk/Source/core/frame/UseCounter.cpp?revision=156916\">corresponding patch</a>.</p>\n\n<p>This has already been recognised and fixed in jQuery 1.11 (see <a href=\"http://bugs.jquery.com/ticket/14320\">here</a> and <a href=\"http://bugs.jquery.com/ticket/14282\">here</a>).</p>\n",
                    "is_accepted": true,
                    "score": 197
                },
                {
                    "body": "<p>Just for other's reference, I just received this and found it was due to <a href=\"http://en.wikipedia.org/wiki/AngularJS\">AngularJS</a>.  It's for backwards compatibility:</p>\n\n<pre><code>if (!event.preventDefault) {\n    event.preventDefault = function() {\n        event.returnValue = false; //ie\n    };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>If you using <a href=\"http://getbootstrap.com/getting-started/\">Bootstrap</a>:</p>\n\n<p>The current version of Bootstrap (3.0.2) (with jQuery 1.10.2 &amp; Chrome) seems to generate this warning as well.</p>\n\n<p>(It does so on Twitter too, BTW.)</p>\n\n<h2>Update</h2>\n\n<p>The current version of <a href=\"http://getbootstrap.com/getting-started/\">Bootstrap</a> (3.1.0) no longer seems to generate this warning.</p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>I saw this warning on many websites. Also, I saw that <a href=\"http://en.wikipedia.org/wiki/Yahoo!_UI_Library\" rel=\"nofollow\">YUI</a> 3 library also gives the same warning. It's a warning generated from the library (whether is it jQuery or YUI).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found that using the latest version will fix this problem:<br>\n<a href=\"http://code.jquery.com/jquery-git.js\" rel=\"nofollow\">http://code.jquery.com/jquery-git.js</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This is a warning related to the fact that most JavaScript frameworks (jQuery, Angular, YUI, Bootstrap...) offer backward support for old-nasty-most-hated Internet Explorer starting from IE8 down to IE6 :/</p>\n\n<p>One day that backward compatibility support will be dropped (for IE8/7/6 since <a href=\"http://msdn.microsoft.com/en-us/library/ie/ff975460%28v=vs.85%29.aspx\">IE9 deals with it</a>), and you will no more see this warning (and other IEish bugs).. </p>\n\n<p>It's a question of time (now <a href=\"http://theie8countdown.com/\">IE8 has 10% worldwide</a> share, once it reaches <a href=\"http://theie7countdown.com/\">1% it is DEAD</a>), meanwhile, just ignore the warning and stay zen :) </p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I have this script:</p>\n\n<pre><code>&lt;script&gt;\n$(document).ready(function () {\n    $(\"#changeResumeStatus\").click(function () {\n        $.get(\"{% url 'main:changeResumeStatus' %}\", function (data) {\n            if (data['message'] == 'hidden') {\n                $(\"#resumeStatus\").text(\"\u0441\u043a\u0440\u044b\u0442\u043e\");\n            } else {\n                $(\"#resumeStatus\").text(\"\u043e\u043f\u0443\u0431\u043b\u0438\u043a\u043e\u0432\u0430\u043d\u043e\");\n            }\n        }, \"json\");\n    });\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>I receive the following error in my Google Chrome console: </p>\n\n<blockquote>\n  <p>event.returnValue is deprecated. Please use the standard event.preventDefault() instead. </p>\n</blockquote>\n\n<p>I am using jQuery v1.10.2 and <code>#changeResumeStatus</code> is a <code>&lt;span&gt;</code>.</p>\n\n<p>What's wrong with my script?</p>\n",
            "last_activity_date": 1393529878,
            "question_id": 20045162,
            "score": 200,
            "tags": [
                "javascript",
                "jquery",
                "ajax"
            ],
            "title": "event.returnValue is deprecated. Please use the standard event.preventDefault() instead"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p><code>null</code> is an object. Its type is null. <code>undefined</code> is not an object; its type is undefined.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<blockquote>\n  <p>What is the difference between null and undefined??</p>\n</blockquote>\n\n<p>A property when it has no definition, is undefined. null is an object. It's type is null. null is a special value meaning \"no value. undefined is not an object, it's type is undefined.</p>\n\n<p>You can declare a variable, set it to null, and the behavior is identical except that you'll see \"null\" printed out versus \"undefined\". You can even compare a variable that is undefined to null or vice versa, and the condition will be true:</p>\n\n<pre><code> undefined == null\n null == undefined\n</code></pre>\n\n<p>Refer to <a href=\"http://www.gibdon.com/2006/05/javascript-difference-between-null-and.html\">JavaScript Difference between null and undefined</a> for more detail.</p>\n\n<p>and with your new <strong>edit</strong> *<em>yes</em>*</p>\n\n<pre><code>if (object == null)  does mean the same  if(!object)\n</code></pre>\n\n<p>when testing if object is false, they both only meet the condition when testing if <strong>false</strong>, but not when true</p>\n\n<p>Check here: <a href=\"http://blog.kodekabuki.com/post/30056940/javascript-gotcha-undefined-vs-null\">Javascript gotcha</a></p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>For example window.someWeirdProperty is undefined, so\n\"window.someWeirdProperty === null\" evaluates to false while\n\"window.someWeirdProperty === undefined\" evaluates to true.</p>\n\n<p>Moreover checkif <code>if (!o)</code> is not the same as checking <code>if (o == null)</code> for <code>o</code> being <code>false</code>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var x = null;\n</code></pre>\n\n<p>x is defined as null</p>\n\n<p>y is not defined; // because I did not define it</p>\n\n<pre><code>if (!x)\n</code></pre>\n\n<p>null is evaluated as false</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>null and undefined are both false for value equality (null==undefined): they both collapse to boolean false. They are not the same object (null!==undefined).</p>\n\n<p>undefined is a property of the global object (\"window\" in browsers), but is a primitive type and not an object itself. It's the default value for uninitialized variables and functions ending without a return statement.</p>\n\n<p>null is an instance of Object. null is used for DOM methods that return collection objects to indicate an empty result, which provides a false value without indicating an error.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The difference can be summarized into this snippet:</p>\n\n<pre><code>alert(typeof(null));      // object\nalert(typeof(undefined)); // undefined\n\nalert(null !== undefined) //true\nalert(null == undefined)  //true\n</code></pre>\n\n<p>Checking</p>\n\n<p><code>object == null</code> is different to check <code>if ( !object )</code>.</p>\n\n<p>The latter is equal to <code>! Boolean(object)</code>, because the unary <code>!</code> operator automatically cast the right operand into a Boolean.</p>\n\n<p>Since <code>Boolean(null)</code> equals false then <code>!false === true</code>.</p>\n\n<p>So if your object is <strong>not null</strong>, <em>but</em> <strong>false</strong> or <strong>0</strong> or <strong>\"\"</strong>, the check will pass\nbecause:</p>\n\n<pre><code>alert(Boolean(null)) //false\nalert(Boolean(0))    //false\nalert(Boolean(\"\"))   //false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 112
                },
                {
                    "body": "<pre><code>(name is undefined)\n</code></pre>\n\n<p><strong>You:</strong> What is <code>name</code>?<sup> (*)</sup><br>\n<strong>JavaScript:</strong> <code>name</code>? What's a <code>name</code>? I don't know what you're talking about. You haven't ever mentioned any <code>name</code> before. Are you seeing some other scripting language on the (client-)side?</p>\n\n<pre><code>name = null;\n</code></pre>\n\n<p><strong>You:</strong> What is <code>name</code>?<br>\n<strong>JavaScript:</strong> I don't know.</p>\n\n<p>In short; <code>undefined</code> is where no notion of the thing exists; it has no type, and it's never been referenced before in that scope; <code>null</code> is where the thing is known to exist, but it's not known what the value is.</p>\n\n<p>One thing to remember is that <code>null</code> is not, conceptually, the same as <code>false</code> or <code>\"\"</code> or such, even if they equate after type casting, i.e.</p>\n\n<pre><code>name = false;\n</code></pre>\n\n<p><strong>You:</strong> What is <code>name</code>?<br>\n<strong>JavaScript:</strong> Boolean false.</p>\n\n<pre><code>name = '';\n</code></pre>\n\n<p><strong>You:</strong> What is <code>name</code>?<br>\n<strong>JavaScript:</strong> Empty string</p>\n\n<hr>\n\n<p><sup>*: <code>name</code> in this context is meant as a variable which has never been defined. It could be be any undefined variable. However, name is a property of just about any HTML form element. It goes way, way back and was instituted well before id. It is useful because ids must be unique but names to not have to be. \n</sup></p>\n",
                    "is_accepted": true,
                    "score": 1180
                },
                {
                    "body": "<p>Some precisions:</p>\n\n<p>null and undefined <em>are</em> two different values. One is representing the absence of a value for a name and the other is representing the absence of a name.</p>\n\n<hr>\n\n<p>What happens in an <code>if</code> goes as follows for <code>if( o )</code>:</p>\n\n<p>The expression in the parentheses o is evaluated, and then the <code>if</code> kicks in type-coercing the value of the expression in the parentheses - in our case <code>o</code>.</p>\n\n<p>Falsy (that will get coerced to false) values in JavaScript are: <em>'', null, undefined, 0, and false</em>. </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>First part of the question:</p>\n\n<blockquote>\n  <p>Why is null considered an object in JavaScript?</p>\n</blockquote>\n\n<p>It is a JavaScript design error they can't fix now. It should have been type null, not type object, or not have it at all. It necessitates an extra check (sometimes forgotten) when detecting real objects and is source of bugs. </p>\n\n<p>Second part of the question:</p>\n\n<blockquote>\n  <p>Is checking <br/>\n  <br/><br>\n  <code>if (object == null)</code> <br/>\n  <code>Do something</code> <br/>\n  <br/>\n  the same as <br/>\n  <br/>\n  <code>if (!object)</code> <br/>\n  <code>Do something</code> <br/></p>\n</blockquote>\n\n<p>The two checks are always both false except for:</p>\n\n<ul>\n<li><p>object is undefined or null: both true.</p></li>\n<li><p>object is primitive, and 0, <code>\"\"</code>, or false:  first check false, second true.</p></li>\n</ul>\n\n<p>If the object is not a primitive, but a real Object, like <code>new Number(0)</code>, <code>new String(\"\")</code>, or <code>new Boolean(false)</code>, then both checks are false.</p>\n\n<p>So if 'object' is interpreted to mean a real Object then both checks are always the same. If primitives are allowed then the checks are different for 0, <code>\"\"</code>, and false.</p>\n\n<p>In cases like <code>object==null</code>, the unobvious results could be a source of bugs. Use of <code>==</code> is not recommended ever, use <code>===</code> instead. </p>\n\n<p>Third part of the question:</p>\n\n<blockquote>\n  <p>And also: <br/>\n  <br/>\n  What is the difference between null and undefined? <br/></p>\n</blockquote>\n\n<p>In JavaScript, one difference is that null is of type object and undefined is of type undefined.</p>\n\n<p>In JavaScript, <code>null==undefined</code> is true, and considered equal if type is ignored. Why they decided that, but 0, <code>\"\"</code> and false aren't equal, I don't know. It seems to be an arbitrary opinion.</p>\n\n<p>In JavaScript, <code>null===undefined</code> is not true since the type must be the same in <code>===</code>.</p>\n\n<p>In reality, null and undefined are identical, since they both represent non-existence. So do 0, and <code>\"\"</code> for that matter too, and maybe the empty containers <code>[]</code> and <code>{}</code>. So many types of the same nothing are a recipe for bugs. One type or none at all is better. I would try to use as few as possible.</p>\n\n<p>'false', 'true', and '!' are another bag of worms that could be simplified, for example, <code>if(!x)</code> and <code>if(x)</code> alone are sufficient, you don't need true and false. </p>\n\n<p>A declared <code>var x</code> is type undefined if no value is given, but it should be the same as if x was never declared at all. Another bug source is an empty nothing container. So it is best to declare and define it together, like <code>var x=1</code>.</p>\n\n<p>People are going round and round in circles trying to figure out all these various types of nothing, but it's all just the same thing in complicated different clothes. The reality is</p>\n\n<pre><code>undefined===undeclared===null===0===\"\"===[]==={}===nothing\n</code></pre>\n\n<p>And maybe all should throw exceptions.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p><code>null</code> is <a href=\"http://www.2ality.com/2011/03/javascript-values-not-everything-is.html\">not an object</a>, it is a <em>primitive value</em>. For example, you cannot add properties to it. Sometimes people wrongly assume that it is an object, because <code>typeof null</code> returns <code>\"object\"</code>. But that is actually a bug (that might even be fixed in ECMAScript 6).</p>\n\n<p>The difference between <code>null</code> and <code>undefined</code> is as follows:</p>\n\n<ul>\n<li><p><code>undefined</code>: used by JavaScript and means \u201cno value\u201d. Uninitialized variables, missing parameters and unknown variables have that value.</p>\n\n<pre><code>&gt; var noValueYet;\n&gt; console.log(noValueYet);\nundefined\n\n&gt; function foo(x) { console.log(x) }\n&gt; foo()\nundefined\n\n&gt; var obj = {};\n&gt; console.log(obj.unknownProperty)\nundefined\n</code></pre>\n\n<p>Accessing unknown variables, however, produces an exception:</p>\n\n<pre><code>&gt; unknownVariable\nReferenceError: unknownVariable is not defined\n</code></pre></li>\n<li><p><code>null</code>: used by programmers to indicate \u201cno value\u201d, e.g. as a parameter to a function.</p></li>\n</ul>\n\n<p>Examining a variable:</p>\n\n<pre><code>console.log(typeof unknownVariable === \"undefined\"); // true\n\nvar foo;\nconsole.log(typeof foo === \"undefined\"); // true\nconsole.log(foo === undefined); // true\n\nvar bar = null;\nconsole.log(bar === null); // true\n</code></pre>\n\n<p>As a general rule, you should always use === and never == in JavaScript (== performs <a href=\"http://www.2ality.com/2011/06/javascript-equality.html\">all kinds of conversions</a> that can produce unexpected results). The check <code>x == null</code> is an edge case, because it works for both <code>null</code> and <code>undefined</code>:</p>\n\n<pre><code>&gt; null == null\ntrue\n&gt; undefined == null\ntrue\n</code></pre>\n\n<p>A common way of checking whether a variable has a value is to convert it to boolean and see whether it is <code>true</code>. That conversion is performed by the <code>if</code> statement and the boolean operator ! (\u201cnot\u201d).</p>\n\n<pre><code>function foo(param) {\n    if (param) {\n        // ...\n    }\n}\nfunction foo(param) {\n    if (! param) param = \"abc\";\n}\nfunction foo(param) {\n    // || returns first operand that can't be converted to false\n    param = param || \"abc\";\n}\n</code></pre>\n\n<p>Drawback of this approach: All of the following values evaluate to <code>false</code>, so you have to be careful (e.g., the above checks can\u2019t distinguish between <code>undefined</code> and <code>0</code>).</p>\n\n<ul>\n<li><code>undefined</code>, <code>null</code></li>\n<li>Booleans: <code>false</code></li>\n<li>Numbers: <code>+0</code>, <code>-0</code>, <code>NaN</code></li>\n<li>Strings: <code>\"\"</code></li>\n</ul>\n\n<p>You can test the conversion to boolean by using <code>Boolean</code> as a function (normally it is a constructor, to be used with <code>new</code>):</p>\n\n<pre><code>&gt; Boolean(null)\nfalse\n&gt; Boolean(\"\")\nfalse\n&gt; Boolean(3-3)\nfalse\n&gt; Boolean({})\ntrue\n&gt; Boolean([])\ntrue\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>One way to make sense of null and undefined is to understand where each occurs.</p>\n\n<p>Expect a null return value in the following situations:</p>\n\n<ul>\n<li><p>Methods that query the DOM</p>\n\n<pre><code>console.log(window.document.getElementById(\"nonExistentElement\"));\n//Prints: null\n</code></pre></li>\n<li><p>JSON responses received from an Ajax request</p></li>\n</ul>\n\n<pre><code>\n    {\n      name: \"Bob\",\n      address: null\n    }\n</code></pre>\n\n<ul>\n<li><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/exec\" rel=\"nofollow\">RegEx.exec</a>.</p></li>\n<li><p>New functionality that is in a state of flux. The following returns null:</p></li>\n</ul>\n\n<pre><code>\n        var proto = Object.getPrototypeOf(Object.getPrototypeOf({}));\n\n       // But this returns undefined:\n\n        Object.getOwnPropertyDescriptor({}, \"a\");\n</code></pre>\n\n<p>All other cases of non-existence are denoted by undefined (as noted by @Axel). Each of the following prints \"undefined\":</p>\n\n<pre><code>    var uninitalised;\n    console.log(uninitalised);\n\n    var obj = {};\n    console.log(obj.nonExistent);\n\n    function missingParam(missing){\n        console.log(missing);\n    }\n\n    missingParam();\n\n    var arr = [];\n    console.log(arr.pop());        \n</code></pre>\n\n<p>Of course if you decide to write var unitialised = null; or return null from a method yourself then you have null occurring in other situations. But that should be pretty obvious.</p>\n\n<p>A third case is when you want to access a variable but you don't even know if it has been declared. For that case use typeof to avoid a reference error:</p>\n\n<pre><code>if(typeof unknown !== \"undefined\"){\n    //use unknown\n}\n</code></pre>\n\n<p>In summary check for null when you are manipulating the DOM, dealing with Ajax, or using certain ECMAScript 5 features. For all other cases it is safe to check for undefined with strict equality:</p>\n\n<pre><code>if(value === undefined){\n  // stuff\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>To add to the answer of <em>What is the differrence between <code>undefined</code> and <code>null</code></em>, from JavaScript Definitive Guide <a href=\"http://books.google.com/books?id=6TAODdEIxrgC&amp;lpg=PA41&amp;ots=obbpJPKzZH&amp;dq=null%20undefined&amp;pg=PA41#v=onepage&amp;q=null%20undefined&amp;f=false\" rel=\"nofollow\">on this page</a>:</p>\n\n<blockquote>\n  <p>You might consider <code>undefined</code> to represent system-level, unexpected,\n  or error-like absense of value and <code>null</code> to represent program-level,\n  normal, or expected absence of value.  If you need to assign one of\n  these values to a variable or property or pass one of these values to\n  a function, <code>null</code> is almost always the right choice.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Comparison of many different null checks in JavaScript:</p>\n\n<p><a href=\"http://jsfiddle.net/aaronhoffman/DdRHB/5/\" rel=\"nofollow\">http://jsfiddle.net/aaronhoffman/DdRHB/5/</a></p>\n\n<pre><code>// Variables to test\nvar myNull = null;\nvar myObject = {};\nvar myStringEmpty = \"\";\nvar myStringWhiteSpace = \" \";\nvar myStringHello = \"hello\";\nvar myIntZero = 0;\nvar myIntOne = 1;\nvar myBoolTrue = true;\nvar myBoolFalse = false;\nvar myUndefined;\n\n...trim...\n</code></pre>\n\n<p><a href=\"http://aaron-hoffman.blogspot.com/2013/04/javascript-null-checking-undefined-and.html\" rel=\"nofollow\">http://aaron-hoffman.blogspot.com/2013/04/javascript-null-checking-undefined-and.html</a></p>\n\n<p><img src=\"http://i.stack.imgur.com/ThA4b.png\" alt=\"JavaScript Null Check Comparison Chart\"></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The following function shows why and is capable for working out the difference:</p>\n\n<pre><code>function test() {\n        var myObj = {};\n        console.log(myObj.myProperty);\n        myObj.myProperty = null;\n        console.log(myObj.myProperty);\n}\n</code></pre>\n\n<p>If you call</p>\n\n<pre><code>test();\n</code></pre>\n\n<p>You're getting</p>\n\n<blockquote>\n  <p>undefined</p>\n  \n  <p>null</p>\n</blockquote>\n\n<p>The first <code>console.log(...)</code> tries to get <code>myProperty</code> from <code>myObj</code> while it is not yet defined - so it gets back \"undefined\". After assigning null to it, the second <code>console.log(...)</code> returns obviously \"null\" because <code>myProperty</code> exists, but it has the value <code>null</code> assigned to it.</p>\n\n<p>In order to be able to query this difference, JavaScript has <code>null</code> and <code>undefined</code>: While <code>null</code> is - just like in other languages an object, <code>undefined</code> cannot be an object because there is no instance (even not a <code>null</code> instance) available.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>From \"The Principles of Object-Oriented Javascript\" by Nicholas C. Zakas </p>\n\n<blockquote>\n  <p>But why an object when the type is null? (In fact, this has been acknowledged as an error by TC39, the committee that designs and maintains JavaScript. You could reason that null is an empty object pointer, making \"object\" a logical return value, but that\u2019s still confusing.)</p>\n</blockquote>\n\n<p>Zakas, Nicholas C. (2014-02-07). The Principles of Object-Oriented JavaScript (Kindle Locations 226-227). No Starch Press. Kindle Edition. </p>\n\n<p>That said:</p>\n\n<pre><code>var game = null; //typeof(game) is \"object\"\n\ngame.score = 100;//null is not an object, what the heck!?\ngame instanceof Object; //false, so it's not an instance but it's type is object\n//let's make this primitive variable an object;\ngame = {}; \ntypeof(game);//it is an object\ngame instanceof Object; //true, yay!!!\ngame.score = 100;\n</code></pre>\n\n<p>Undefined case:</p>\n\n<pre><code>var score; //at this point 'score' is undefined\ntypeof(score); //'undefined'\nvar score.player = \"felix\"; //'undefined' is not an object\nscore instanceof Object; //false, oh I already knew that.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Why is null considered an object in JavaScript?</p>\n\n<p>Is checking </p>\n\n<pre><code>if ( object == null )\n      Do something\n</code></pre>\n\n<p>the same as </p>\n\n<pre><code>if ( !object )\n      Do something\n</code></pre>\n\n<p>?</p>\n\n<p>And also:</p>\n\n<p>What is the difference between null and undefined?</p>\n",
            "last_activity_date": 1416758611,
            "question_id": 801032,
            "score": 568,
            "tags": [
                "javascript",
                "object",
                "null"
            ],
            "title": "Why is null an object and what&#39;s the difference between null and undefined?"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>This has been a hot topic and the cause of a lot of controversy. There are actually many correct answers and because this answer has been marked as the accepted answer for a very long time, I will include all of the methods here. If you vote for this answer, please upvote the other answers that I have referenced as well. <em>(most of the comments on this answer are about method 1, which was my original answer)</em></p>\n\n<hr>\n\n<p>Ways to clear an existing array <code>A</code>:</p>\n\n<p><strong>Method 1</strong></p>\n\n<p>(this was my original answer to the question)</p>\n\n<pre><code>A = [];\n</code></pre>\n\n<p>This code will set the variable <code>A</code> to a new empty array. This is perfect if you don't have <strong>references to the original array <code>A</code></strong> anywhere else because this actually creates a brand new (empty) array. You should be careful with this method because if you have referenced this array from another variable or property, the original array will remain unchanged. Only use this if you only reference the array by its original variable <code>A</code>.</p>\n\n<p>This is also the fastest solution.</p>\n\n<p><strong>Method 2</strong> (as <a href=\"http://stackoverflow.com/a/1234337/113570\">suggested</a> by <a href=\"http://stackoverflow.com/users/2214/matthew-crumley\">Matthew Crumley</a>)</p>\n\n<pre><code>A.length = 0\n</code></pre>\n\n<p>This will clear the existing array by setting its length to 0. Some have argued that this may not work in all implementations of Javascript but it turns out that this is not the case. It also works when using \"strict mode\" in Ecmascript 5 because the length property of an array is a read/write property.</p>\n\n<p><strong>Method 3</strong> (as <a href=\"http://stackoverflow.com/a/8134354/113570\">suggested</a> by <a href=\"http://stackoverflow.com/users/1047275/anthony\">Anthony</a>)</p>\n\n<pre><code>A.splice(0,A.length)\n</code></pre>\n\n<p>Using <code>.splice()</code> will work perfectly, but since <code>.splice()</code> function will return an array with all the removed items, it will actually return a copy of the original array. Benchmarks suggests that this has no effect on performance whatsoever.</p>\n\n<p><strong>Method 4</strong> (as <a href=\"http://stackoverflow.com/a/17306971/113570\">suggested</a> by <a href=\"http://stackoverflow.com/users/990356/tanguy-k\">tanguy_k</a>)</p>\n\n<pre><code>while(A.length &gt; 0) {\n    A.pop();\n}\n</code></pre>\n\n<p>This solution is not very succinct and it is also the slowest solution, contrary to earlier benchmarks referenced in the original answer.</p>\n\n<p><strong>Performance</strong></p>\n\n<p>Of all the methods of clearing an <strong><em>existing array</em></strong>, methods 2 and 3 are very similar in performance and are a lot faster than method 4. See this <a href=\"http://jsperf.com/array-destroy/151\">benchmark</a>.</p>\n\n<p><strong>EDIT</strong></p>\n\n<p>As pointed out by <a href=\"http://stackoverflow.com/users/47401/diadistis\">Diadistis</a> in his <a href=\"http://stackoverflow.com/a/28548360/113570\">answer</a> below, the original benchmarks that were used to determine the performance of the four methods described above were flawed. The original benchmark reused the cleared array so the 2nd iteration was clearing an array that was already empty.</p>\n\n<p>The following benchmark fixes this flaw: <a href=\"http://jsperf.com/array-destroy/151\">http://jsperf.com/array-destroy/151</a> . It clearly shows that methods #2 (length property) and #3 (splice) are the fastest (not counting method #1 which doesn't change the original array).</p>\n",
                    "is_accepted": true,
                    "score": 973
                },
                {
                    "body": "<p>If you need to keep the original array because you have other references to it that should be updated too, you can clear it without creating a new array by setting its length to zero:</p>\n\n<pre><code>A.length = 0;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1638
                },
                {
                    "body": "<p>A more cross-browser friendly and more optimal solution will be to use the <code>splice</code> method to empty the content of the array A as below:</p>\n\n<p><code>A.splice(0, A.length);</code></p>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>You can add this to your JavaScript file to allow your arrays to be \"cleared\":</p>\n\n<pre><code>Array.prototype.clear = function() {\n    this.splice(0, this.length);\n};\n</code></pre>\n\n<p>Then you can use it like this:</p>\n\n<pre><code>var list = [1, 2, 3];\nlist.clear();\n</code></pre>\n\n<p>Or if you want to be sure you don't destroy something:</p>\n\n<pre><code>if (!Array.prototype.clear) {\n    Array.prototype.clear = function() {\n       this.splice(0, this.length);\n    };\n}\n</code></pre>\n\n<p>Lots of people think you shouldn't modify native objects (like Array), and I'm inclined to agree. Please use caution in deciding how to handle this.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<pre><code>Array.prototype.clear = function() {\n    this.length = 0;\n};\n</code></pre>\n\n<p>and call it: <code>array.clear();</code></p>\n\n<p>=)</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>The fastest solution for all current browsers is to implement the <code>pop</code> or <code>shift</code> method.  Combining answers from <a href=\"http://stackoverflow.com/a/13812954/803925\"><code>leech</code></a> and <code>Jan</code>, we can come up with a method that is declared once and makes it easy to clear the array:</p>\n\n<pre><code>Array.prototype.clear = function()  //Add a new method to the Array Object\n{\n    var ii = this.length;\n    for(var i=0;i&lt;ii;i++)\n    {\n        this.pop();\n    }\n}\n\nvar NumberList = new Array();  //Declare the variable\nNumberList.push(111);          //Add number to the end of the list\nNumberList.clear;              //Clear the list\n</code></pre>\n\n<p>Or you could just use a while loop:</p>\n\n<pre><code>while(your_array_name_here.length &gt; 0)\n    your_array_name_here.pop();\n</code></pre>\n\n<p>But the best answer as found above would be to use the <code>length</code> property straight up.</p>\n\n<pre><code>your_array_name_here.length = 0;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p><strike>Here the fastest working implementation</strike> while keeping the same array:</p>\n\n<pre><code>Array.prototype.clear = function() {\n  while (this.length) {\n    this.pop();\n  }\n};\n</code></pre>\n\n<p>Or as an <a href=\"http://underscorejs.org/#mixin\" rel=\"nofollow\">Underscore.js mixin</a>:</p>\n\n<pre><code>_.mixin({\n  clearArray: function(array) {\n    while (array.length) {\n      array.pop();\n    }\n  }\n});\n</code></pre>\n\n<p>And the test that goes with it:</p>\n\n<pre><code>describe('Array', function() {\n  it('should clear the array', function() {\n    var array = [1, 2, 3, 4, 5];\n    array.clear();\n    expect(array.length).toEqual(0);\n    expect(array[0]).toEqual(undefined);\n    expect(array[4]).toEqual(undefined);\n  });\n});\n</code></pre>\n\n<p>Here the updated jsPerf: <strike><a href=\"http://jsperf.com/array-destroy/32\" rel=\"nofollow\">http://jsperf.com/array-destroy/32</a></strike> <a href=\"http://jsperf.com/array-destroy/152\" rel=\"nofollow\">http://jsperf.com/array-destroy/152</a></p>\n",
                    "is_accepted": false,
                    "score": 147
                },
                {
                    "body": "<p>How about the below modified version of <a href=\"http://stackoverflow.com/users/2039571/jan\">Jan</a>'s initial suggestion?</p>\n\n<pre><code>var originalLength = A.length;\nfor(var i = originalLength; i &gt; 0; i--) {\n     A.pop();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>In case you are interested in the memory allocation, you may compare each approach using something like <a href=\"http://jsfiddle.net/k9KGU/\">this jsfiddle</a> in conjunction with chrome dev tools' timeline tab. You will want to use the trash bin icon at the bottom to force a garbage collection after 'clearing' the array. This should give you a more definite answer for the browser of your choice. A lot of answers here are old and I wouldn't rely on them but rather test as in @tanguy_k's answer above.</p>\n\n<p><em>(for an intro to the aforementioned tab you can check out <a href=\"http://addyosmani.com/blog/taming-the-unicorn-easing-javascript-memory-profiling-in-devtools/\">here</a>)</em></p>\n\n<p>Stackoverflow forces me to copy the jsfiddle so here it is:</p>\n\n<pre><code>&lt;html&gt;\n&lt;script&gt;\nvar size = 1000*100\nwindow.onload = function() {\n  document.getElementById(\"quantifier\").value = size\n}\n\nfunction scaffold()\n{\n  console.log(\"processing Scaffold...\");\n  a = new Array\n}\nfunction start()\n{\n  size = document.getElementById(\"quantifier\").value\n  console.log(\"Starting... quantifier is \" + size);\n  console.log(\"starting test\")\n  for (i=0; i&lt;size; i++){\n    a[i]=\"something\"\n  }\n  console.log(\"done...\")\n}\n\nfunction tearDown()\n{\n  console.log(\"processing teardown\");\n  a.length=0\n}\n\n&lt;/script&gt;\n&lt;body&gt;\n    &lt;span style=\"color:green;\"&gt;Quantifier:&lt;/span&gt;\n    &lt;input id=\"quantifier\" style=\"color:green;\" type=\"text\"&gt;&lt;/input&gt;\n    &lt;button onclick=\"scaffold()\"&gt;Scaffold&lt;/button&gt;\n    &lt;button onclick=\"start()\"&gt;Start&lt;/button&gt;\n    &lt;button onclick=\"tearDown()\"&gt;Clean&lt;/button&gt;\n    &lt;br/&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>And you should take note that it may depend on the type of the array elements, as javascript manages strings differently than other primitive types, not to mention arrays of objects. The type may affect what happens.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Simply re initialize it. No need to delete even.</p>\n\n<pre><code>A = [];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p><code>A.splice(0);</code></p>\n\n<p>I just did this on some code I am working on.  It cleared the array.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>performance test</p>\n\n<p><a href=\"http://jsperf.com/array-clear-methods/3\">http://jsperf.com/array-clear-methods/3</a></p>\n\n<pre><code>a = []; // 37% slower\na.length = 0; // 89% slower\na.splice(0,a.length)  // 97% slower\nwhile(a.length &gt; 0) {\n    a.pop();\n} // fastest\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>behavior comparison between arr = [] vs arr.pop() loop:</p>\n\n<pre><code>var arr = [1,2,3];\nvar arrCopy = arr;\narr = [];\nconsole.log(arrCopy.length); /* outputs 3: arr points to a NEW array (which is empty), arrCopy still points to [1,2,3] */\n\nvar brr = [4,5,6,7];\nvar brrCopy = brr;\nwhile(brr.length){\n    brr.pop();\n}\nconsole.log(brrCopy.length); /* outputs 0: brr and brrCopy points to the same array, whose elements are removed in the loop */\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you are using </p>\n\n<pre><code>a = []; \n</code></pre>\n\n<p>or </p>\n\n<pre><code>a.length = 0;\n</code></pre>\n\n<p>then you are just creating new array which points to specific memory location. This means previous array will be remain in memory till garbage collection. So its not the better way to use.\nInstead of these two solutions are better.</p>\n\n<pre><code>a.splice(0,a.length)\n</code></pre>\n\n<p>and</p>\n\n<pre><code>while(a.length &gt; 0) {\n    a.pop();\n}\n</code></pre>\n\n<p>As per previous answer by kenshou.html, second method is faster.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There is a lot of confusion and misinformation regarding the while;pop/shift performance both in answers and comments. The while/pop solution has (as expected) the <strong>worst performance</strong>. What's actually happening is that setup runs only once for each sample that runs the snippet in a loop. eg:</p>\n\n<pre><code>var arr = [];\n\nfor (var i = 0; i &lt; 100; i++) { \n    arr.push(Math.random()); \n}\n\nfor (var j = 0; j &lt; 1000; j++) {\n    while (arr.length &gt; 0) {\n        arr.pop(); // this executes 100 times, not 100000\n    }\n}\n</code></pre>\n\n<p>I have created a new test that works correctly :</p>\n\n<p><a href=\"http://jsperf.com/empty-javascript-array-redux\" rel=\"nofollow\">http://jsperf.com/empty-javascript-array-redux</a></p>\n\n<p><strong>Warning:</strong> even in this version of the test you can't actually see the real difference because cloning the array takes up most of the test time. It still shows that <code>splice</code> is the fastest way to clear the array (not taking <code>[]</code> into consideration because while it is the fastest it's not actually clearing the existing array).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There are different ways to clear array depending on requirement. The results below are for chrome.</p>\n\n<ol>\n<li>array = []; //<strong>Fastest</strong></li>\n<li>while(array.length > 0) {\narray.pop();\n} //<strong>Faster</strong></li>\n<li>a.splice(0,a.length) //<strong>Slowest</strong></li>\n<li>a.length = 0; //<strong>Slowest</strong></li>\n</ol>\n\n<p>array = []; does not clear original array shared among other references, it only creates new instance.\na.splice(0,a.length); clears memory also.</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>Is there a way to empty an array and if so possibly with <code>.remove()</code>?</p>\n\n<p>For instance, </p>\n\n<pre><code>A = [1,2,3,4];\n</code></pre>\n\n<p>How can I empty that?</p>\n",
            "last_activity_date": 1424782251,
            "question_id": 1232040,
            "score": 925,
            "tags": [
                "javascript",
                "arrays"
            ],
            "title": "Empty an array in JavaScript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Since coffee script has no <code>var</code> statement it automatically inserts it for all variables in the coffee-script, that way it prevents the compiled JavaScript version from leaking everything into the <strong>global namespace</strong>.  </p>\n\n<p>So since there's no way to make something \"leak\" into the <strong>global namespace</strong> from the coffee-script side of things on purpose, you need to define your global variables as properties of the <strong>global object</strong>.</p>\n\n<blockquote>\n  <p>attach them as properties on window</p>\n</blockquote>\n\n<p>This means you need to do something like <code>window.foo = 'baz';</code>, which handles the browser case, since there the <strong>global object</strong> is the <code>window</code>.</p>\n\n<h2>Node.js</h2>\n\n<p>In Node.js there's no <code>window</code> object, instead there's the <code>exports</code> object that gets passed into the wrapper that wraps the Node.js module (See: <a href=\"https://github.com/ry/node/blob/master/src/node.js#L321\">https://github.com/ry/node/blob/master/src/node.js#L321</a> ), so in Node.js what you would need to do is <code>exports.foo = 'baz';</code>.</p>\n\n<p>Now let us take a look at what it states in your quote from the docs:  </p>\n\n<blockquote>\n  <p>...targeting both CommonJS and the browser: root = exports ? this</p>\n</blockquote>\n\n<p>This is obviously coffee-script, so let's take a look into what this actually compiles to:  </p>\n\n<pre><code>var root;\nroot = (typeof exports !== \"undefined\" &amp;&amp; exports !== null) ? exports : this;\n</code></pre>\n\n<p>First it will check whether <code>exports</code> is defined, since trying to reference a non existent variable in JavaScript would otherwise yield an SyntaxError (except when it's used with <code>typeof</code>)</p>\n\n<p>So if <code>exports</code> exists, which is the case in Node.js (or in a badly written WebSite...) root will point to <code>exports</code>, otherwise to <code>this</code>. So what's <code>this</code>?</p>\n\n<pre><code>(function() {...}).call(this);\n</code></pre>\n\n<p>Using <code>.call</code> on a function will bind the <code>this</code> inside the function to the first parameter passed, in case of the browser <code>this</code> would now be the <code>window</code> object, in case of Node.js it would be the <strong>global context</strong> which is also available as the <code>global</code> object.  </p>\n\n<p>But since you have the <code>require</code> function in Node.js, there's no need to assign something to the <code>global</code> object in Node.js, instead you assign to the <code>exports</code> object which then gets returned by the <code>require</code> function.</p>\n\n<h2>Coffee-Script</h2>\n\n<p>After all that explanation, here's what you need to do:  </p>\n\n<pre><code>root = exports ? this\nroot.foo = -&gt; 'Hello World'\n</code></pre>\n\n<p>This will declare our function <code>foo</code> in the global namespace (whatever that happens to be).<br>\nThat's all :)</p>\n",
                    "is_accepted": true,
                    "score": 339
                },
                {
                    "body": "<p>Ivo nailed it, but I'll mention that there is one dirty trick you can use, though I don't recommend it if you're going for style points: You can embed JavaScript code directly in your CoffeeScript by escaping it with backticks.</p>\n\n<p>However, here's why this is usually a bad idea: The CoffeeScript compiler is unaware of those variables, which means they won't obey normal CoffeeScript scoping rules. So,</p>\n\n<pre><code>`foo = 'bar'`\nfoo = 'something else'\n</code></pre>\n\n<p>compiles to</p>\n\n<pre><code>foo = 'bar';\nvar foo = 'something else';\n</code></pre>\n\n<p>and now you've got yourself two <code>foo</code>s in different scopes. There's no way to modify the <em>global</em> <code>foo</code> from CoffeeScript code without referencing the global object, as Ivy described.</p>\n\n<p>Of course, this is only a problem if you make an assignment to <code>foo</code> in CoffeeScript\u2014if <code>foo</code> became read-only after being given its initial value (i.e. it's a global constant), then the embedded JavaScript solution approach might be kinda sorta acceptable (though still not recommended).</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>You can pass -b option when you compile code via coffee-script under node.js.\nThe compiled code will be the same as on coffeescript.org.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>To add to <a href=\"http://stackoverflow.com/questions/4214731/coffeescript-global-variables/4215132#4215132\">Ivo Wetzel's answer</a></p>\n\n<p>There seems to be a shorthand syntax for <code>exports ? this</code> that I can only find documented/mentioned on a <a href=\"https://groups.google.com/forum/#!msg/coffeescript/PzNU0NtVY2c/zu_3kaG4nV4J\">Google group posting</a>.</p>\n\n<p>I.e. in a web page to make a function available globally you declare the function again with an <code>@</code> prefix:</p>\n\n<pre><code>&lt;script type=\"text/coffeescript\"&gt;\n    @aglobalfunction = aglobalfunction = () -&gt;\n         alert \"Hello!\"\n&lt;/script&gt;\n\n&lt;a href=\"javascript:aglobalfunction()\" &gt;Click me!&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>To me it seems @atomicules has the simplest answer, but I think it can be simplified a little more. You need to put an <code>@</code> before anything you want to be global, so that it compiles to <code>this.anything</code> and <code>this</code> refers to the global object.</p>\n\n<h3>so...</h3>\n\n<pre><code>@bawbag = (x, y) -&gt;\n    z = (x * y)\n\nbawbag(5, 10)\n</code></pre>\n\n<h3>compiles to...</h3>\n\n<pre><code>this.bawbag = function(x, y) {\n  var z;\n  return z = x * y;\n};\nbawbag(5, 10);\n</code></pre>\n\n<h3>and works inside and outside of the wrapper given by node.js</h3>\n\n<pre><code>(function() {\n    this.bawbag = function(x, y) {\n      var z;\n      return z = x * y;\n    };\n    console.log(bawbag(5,13)) // works here\n}).call(this);\n\nconsole.log(bawbag(5,11)) // works here\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>I think what you are trying to achieve can simply be done like this :</p>\n\n<p>While you are compiling the coffeescript, use the \"-b\" parameter.</p>\n\n<p><code>-b</code> / <code>--bare</code> <em>Compile the JavaScript without the top-level function safety wrapper.</em></p>\n\n<p>So something like this : <code>coffee -b --compile somefile.coffee whatever.js</code></p>\n\n<p>This will output your code just like in the CoffeeScript.org site.</p>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>On Coffeescript.org:</p>\n\n<pre><code>bawbag = (x, y) -&gt;\n    z = (x * y)\n\nbawbag(5, 10) \n</code></pre>\n\n<p>would compile to:</p>\n\n<pre><code>var bawbag;\nbawbag = function(x, y) {\n  var z;\n  return (z = (x * y));\n};\nbawbag(5, 10);\n</code></pre>\n\n<p>compiling via coffee-script under node.js wraps that so:</p>\n\n<pre><code>(function() {\n  var bawbag;\n  bawbag = function(x, y) {\n    var z;\n    return (z = (x * y));\n  };\n  bawbag(5, 10);\n}).call(this);\n</code></pre>\n\n<p>Docs say:</p>\n\n<blockquote>\n  <p>If you'd like to create top-level variables for other scripts to use,\n  attach them as properties on window, or on the exports object in\n  CommonJS. The existential operator (covered below), gives you a\n  reliable way to figure out where to add them, if you're targeting both\n  CommonJS and the browser: root = exports ? this</p>\n</blockquote>\n\n<p>How do I define Global Variables then in CoffeeScript. What does 'attach them as properties on window' mean?</p>\n",
            "last_activity_date": 1402762616,
            "question_id": 4214731,
            "score": 223,
            "tags": [
                "javascript",
                "coffeescript"
            ],
            "title": "CoffeeScript &amp; Global Variables"
        },
        {
            "answer_count": 26,
            "answers": [
                {
                    "body": "<p>This may suit your purposes.</p>\n\n<pre><code>Array.prototype.min = function(comparer) {\n\n    if (this.length === 0) return null;\n    if (this.length === 1) return this[0];\n\n    comparer = (comparer || Math.min);\n\n    var v = this[0];\n    for (var i = 1; i &lt; this.length; i++) {\n        v = comparer(this[i], v);    \n    }\n\n    return v;\n}\n\nArray.prototype.max = function(comparer) {\n\n    if (this.length === 0) return null;\n    if (this.length === 1) return this[0];\n\n    comparer = (comparer || Math.max);\n\n    var v = this[0];\n    for (var i = 1; i &lt; this.length; i++) {\n        v = comparer(this[i], v);    \n    }\n\n    return v;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can use Array.sort but you'll have to write a simple number sorting function since the default is alphabetic.</p>\n\n<p><a href=\"http://www.w3schools.com/jsref/jsref%5Fsort.asp\" rel=\"nofollow\">Look at example 2 here.</a></p>\n\n<p>Then you can grab <code>arr[0]</code> and <code>arr[arr.length-1]</code> to get min and max.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>How about augmenting the built-in Array object to use <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Math/max\" rel=\"nofollow\"><code>Math.max</code></a>/<a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Math/min\" rel=\"nofollow\"><code>Math.min</code></a> instead:</p>\n\n<pre><code>Array.prototype.max = function() {\n  return Math.max.apply(null, this);\n};\n\nArray.prototype.min = function() {\n  return Math.min.apply(null, this);\n};\n</code></pre>\n\n<p>Here is a <strong><a href=\"https://jsfiddle.net/nikhilagarwal530/np9L66bv/\" rel=\"nofollow\">JSFiddle</a></strong>.</p>\n\n<p>Augmenting the built-ins can cause collisions with other libraries (some see), so you may be more comfortable with just <code>apply</code>'ing <code>Math.xxx()</code> to your array directly:</p>\n\n<pre><code>var min = Math.min.apply(null, arr),\n    max = Math.max.apply(null, arr);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 265
                },
                {
                    "body": "<p>Is this homework? You need to add a prototype to the array class which defines a function for min and max and then write some code that traverses the array storing the greatest or least value it's found.</p>\n\n<p>For fun, I'm going to do half of this for you with <a href=\"http://docs.jquery.com/Utilities\" rel=\"nofollow\">jQuery</a>:</p>\n\n<pre><code>x=Array();\njQuery.extend(x,{\n  min:function(){\n    var n=Number.MAX_VALUE;\n    for(i=0;i&lt;this.length;i++){\n      if(this[i]&lt;n){\n        n=this[i];\n    }}\n    return n;},\n    max:function(){var n=Number.MIN_VALUE;for(i=0;i&lt;this.length;i++){if(this[i]&gt;n){n=this[i];}}return n;}\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Iterate through, keeping track as you go.</p>\n\n<pre><code>var min = null;\nvar max = null;\nfor (var i = 0, len = arr.length; i &lt; len; ++i)\n{\n    var elem = arr[i];\n    if (min === null || min &gt; elem) min = elem;\n    if (max === null || max &lt; elem) max = elem;\n}\nalert( \"min = \" + min + \", max = \" + max );\n</code></pre>\n\n<p>This will leave min/max null if there are no elements in the array.  Will set min and max in one pass if the array has any elements.</p>\n\n<p>You could also extend Array with a <code>range</code> method using the above to allow reuse and improve on readability.  See a working fiddle at <a href=\"http://jsfiddle.net/9C9fU/\" rel=\"nofollow\">http://jsfiddle.net/9C9fU/</a></p>\n\n<pre><code>Array.prototype.range = function() {\n\n    var min = null,\n        max = null,\n        i, len;\n\n    for (i = 0, len = this.length; i &lt; len; ++i)\n    {\n        var elem = this[i];\n        if (min === null || min &gt; elem) min = elem;\n        if (max === null || max &lt; elem) max = elem;\n    }\n\n    return { min: min, max: max }\n};\n</code></pre>\n\n<p>Used as</p>\n\n<pre><code>var arr = [3, 9, 22, -7, 44, 18, 7, 9, 15];\n\nvar range = arr.range();\n\nconsole.log(range.min);\nconsole.log(range.max);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>ChaosPandion's solution works if you're using protoype. If not, consider this:</p>\n\n<pre><code>Array.max = function( array ){\n    return Math.max.apply( Math, array );\n};\n\nArray.min = function( array ){\n    return Math.min.apply( Math, array );\n};\n</code></pre>\n\n<p>The above will return NaN if an array value is not an integer so you should build some functionality to avoid that.  Otherwise this will work.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You do it by extending the Array type:</p>\n\n<pre><code>Array.max = function( array ){\n    return Math.max.apply( Math, array );\n};\nArray.min = function( array ){\n    return Math.min.apply( Math, array );\n};\n</code></pre>\n\n<p>Boosted from <a href=\"http://ejohn.org/blog/fast-javascript-maxmin/\">here</a> (by John Resig)</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Others have already given some solutions in which they augment <code>Array.prototype</code>. All I want in this answer is to clarify whether it should be <code>Math.min.apply( Math, array )</code> or <code>Math.min.apply( null, array )</code>. <strong>So what context should be used, <code>Math</code> or <code>null</code>?</strong> </p>\n\n<p>When passing <code>null</code> as a context to <code>apply</code>, then the context will default to the global object (the <code>window</code> object in the case of browsers). Passing the <code>Math</code> object as the context would be the correct solution, but it won't hurt passing <code>null</code> either. Here's an example when <code>null</code> might cause trouble, when decorating the <code>Math.max</code> function:</p>\n\n<pre><code>// decorate Math.max\n(function (oldMax) {\n    Math.max = function () {\n        this.foo(); // call Math.foo, or at least that's what we want\n\n        return oldMax.apply(this, arguments);\n    };\n})(Math.max);\n\nMath.foo = function () {\n    print(\"foo\");\n};\n\nArray.prototype.max = function() {\n  return Math.max.apply(null, this); // &lt;-- passing null as the context\n};\n\nvar max = [1, 2, 3].max();\n\nprint(max);\n</code></pre>\n\n<p>The above will throw an exception because <code>this.foo</code> will be evaluated as <code>window.foo</code>, which is <code>undefined</code>. If we replace <code>null</code> with <code>Math</code>, things will work as expected and the string \"foo\" will be printed to the screen (I tested this using <a href=\"http://www.mozilla.org/rhino/\">Mozilla Rhino</a>).</p>\n\n<p>You can pretty much assume that nobody has decorated <code>Math.max</code> so, passing <code>null</code> will work without problems.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<pre><code>var max_of_array = Math.max.apply(Math, array);\n</code></pre>\n\n<p>For a full discussion see:\n<a href=\"http://aaroncrane.co.uk/2008/11/javascript_max_api/\">http://aaroncrane.co.uk/2008/11/javascript_max_api/</a></p>\n",
                    "is_accepted": false,
                    "score": 182
                },
                {
                    "body": "<p>For big arrays (~10\u2077 elements), <code>Math.min</code> and <code>Math.max</code> procuces a RangeError (Maximum call stack size exceeded) in node.js.</p>\n\n<p>For big arrays, a quick &amp; dirty solution is:</p>\n\n<pre><code>Array.prototype.min = function() {\n    var r = this[0];\n    this.forEach(function(v,i,a){if (v&lt;r) r=v;});\n    return r;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you are using <strong>prototype.js</strong> framework, then this code will work ok:</p>\n\n<pre><code>arr.min();\narr.max();\n</code></pre>\n\n<p>Documented here: <a href=\"http://www.prototypejs.org/api/enumerable/max\" rel=\"nofollow\">Javascript prototype framework for max</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I managed to solve my problem this way:        </p>\n\n<pre><code>    var strDiv  = \"4,8,5,1\"\nvar arrayDivs   = strDiv.split(\",\")\nvar str = \"\";\n\nfor (i=0;i&lt;arrayDivs.length;i++)\n{\n    if (i&lt;arrayDivs.length-1)\n    {\n      str = str + eval('arrayDivs['+i+']')+',';\n    } \n    else if (i==arrayDivs.length-1)\n    {\n      str = str + eval('arrayDivs['+i+']');\n    }\n}\n\nstr = 'Math.max(' + str + ')';\n    var numMax = eval(str);\n</code></pre>\n\n<p>I hope I have helped.</p>\n\n<p>Best regards.</p>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<p>One more way to do it:</p>\n\n<pre><code>var arrayMax = Function.prototype.apply.bind(Math.max, null);\n</code></pre>\n\n<p>Usage:  </p>\n\n<pre><code>var max = arrayMax([2, 5, 1]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>create a simple object </p>\n\n<p><code>var myArray = new Array();</code></p>\n\n<pre><code>myArray =[10,12,14,100];\n\n var getMaxHeight ={\n     hight : function( array ){return Math.max.apply( Math, array );   }\n\ngetMaxHeight.hight(myArray);`\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For big arrays (~10\u2077 elements), <code>Math.min</code> and <code>Math.max</code> both produces the following error in Node.js. </p>\n\n<blockquote>\n  <p>RangeError: Maximum call stack size exceeded</p>\n</blockquote>\n\n<p>A more robust solution is to not add every element to the call stack, but to instead pass an array:</p>\n\n<pre><code>function arrayMin(arr) {\n  return arr.reduce(function (p, v) {\n    return ( p &lt; v ? p : v );\n  });\n}\n\nfunction arrayMax(arr) {\n  return arr.reduce(function (p, v) {\n    return ( p &gt; v ? p : v );\n  });\n}\n</code></pre>\n\n<p>If you are concerned about speed, the following code is ~3 times faster then <code>Math.max.apply</code> is on my computer. See <a href=\"http://jsperf.com/min-and-max-in-array/2\" rel=\"nofollow\">http://jsperf.com/min-and-max-in-array/2</a>.</p>\n\n<pre><code>function arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (arr[len] &lt; min) {\n      min = arr[len];\n    }\n  }\n  return min;\n};\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (arr[len] &gt; max) {\n      max = arr[len];\n    }\n  }\n  return max;\n};\n</code></pre>\n\n<p>If your arrays contains strings instead of numbers, you also need to coerce them into numbers. The below code does that, but it slows the code down ~10 times on my machine. See <a href=\"http://jsperf.com/min-and-max-in-array/3\" rel=\"nofollow\">http://jsperf.com/min-and-max-in-array/3</a>.</p>\n\n<pre><code>function arrayMin(arr) {\n  var len = arr.length, min = Infinity;\n  while (len--) {\n    if (Number(arr[len]) &lt; min) {\n      min = Number(arr[len]);\n    }\n  }\n  return min;\n};\n\nfunction arrayMax(arr) {\n  var len = arr.length, max = -Infinity;\n  while (len--) {\n    if (Number(arr[len]) &gt; max) {\n      max = Number(arr[len]);\n    }\n  }\n  return max;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>If you need performance then this is the best way for small arrays:</p>\n\n<pre><code>var min = 99999;\nvar max = 0;\nfor(var i = 0; i &lt; v.length; i++)\n{\n    if(v[i] &lt; min)\n    {\n        min = v[i];\n    }\n    if(v[i] &gt;= max)\n    {\n        max = v[i];\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>minHeight = Math.min.apply({},YourArray);\nminKey    = getCertainKey(YourArray,minHeight);\nmaxHeight = Math.max.apply({},YourArray);\nmaxKey    = getCertainKey(YourArray,minHeight);\nfunction getCertainKey(array,certainValue){\n   for(var key in array){\n      if (array[key]==certainValue)\n         return key;\n   }\n} \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I am surprised not one mentiond the reduce function.</p>\n\n<pre><code>var arr = [1, 10, 5, 11, 2]\n\nvar b = arr.reduce(function(previous,current){ \n                      return previous &gt; current ? previous:current\n                   });\n\nb =&gt; 11\narr =&gt; [1, 10, 5, 11, 2]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>There is another way to get min and max for <strong>short</strong> arrays:</p>\n\n<pre><code>  var min = data.slice(0).sort(function(a,b){a&gt;b})[0];\n  var max = data.slice(0).sort(function(a,b){a&lt;b})[0];\n</code></pre>\n\n<p>It's good way for work with non-numeric values and custom comparing rules:</p>\n\n<pre><code>&gt; [\"b\",\"a\",\"d\",\"c\"].slice(0).sort()[0];\n'a'\n&gt; [\"b\",\"a\",\"d\",\"c\"].slice(0).sort().reverse()[0];\n'd'\n&gt; [\"b\",\"a\",\"d\",\"c\"].slice(0).sort(function(a,b){return a &gt; b;})[0];\n'a'\n&gt; [\"b\",\"a\",\"d\",\"c\"].slice(0).sort(function(a,b){return a &lt; b;})[0];\n'd'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Here's one way to get the max value from an array of objects.  Create a copy (with slice), then sort the copy in descending order and grab the first item.</p>\n\n<pre><code>var myArray = [\n{\"ID\": 1, \"Cost\": 200},\n{\"ID\": 2, \"Cost\": 1000},\n{\"ID\": 3, \"Cost\": 50},\n{\"ID\": 4, \"Cost\": 500}\n]\n\nmaxsort = myArray.slice(0).sort(function (a, b) { return b.ID - a.ID })[0].ID; \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I like <a href=\"http://stackoverflow.com/a/13440842/558639\">Linus's reduce() approach</a>, especially for large arrays.  But as long as you know you need both min and the max, why iterate over the array twice?</p>\n\n<pre><code>Array.prototype.minmax = function () {\n  return this.reduce(function (p, v) {\n    return [(p[0] &lt; v ? p[0] : v), (p[1] &gt; v ? p[1] : v)];\n  }, [this[0], this[0]]);\n}\n</code></pre>\n\n<p>Of course, if you prefer the iterative approach, you can do that too:</p>\n\n<pre><code>Array.prototype.minmax = function () {\n    var mn = this[0], mx = this[0];\n    this.forEach(function (v) {\n        if (v &lt; mn) mn = v;\n        if (v &gt; mx) mx = v;\n    });\n    return [mn, mx];\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I had the same problem, I needed to obtain the minimum and maximum values of an array and, to my surprise, there were no built-in functions for arrays. After reading a lot, I decided to test the \"top 3\" solutions myself:</p>\n\n<ol>\n<li>discrete solution: a FOR loop to check every element of the array against the current max and/or min value;</li>\n<li>APPLY solution: sending the array to the Math.max and/or Math.min internal functions using apply(null,array);</li>\n<li>REDUCE solution: recursing a check against every element of the array using reduce(function).</li>\n</ol>\n\n<p>The test code was this:</p>\n\n<pre><code>function GetMaxDISCRETE(A)\n{   var MaxX=A[0];\n\n    for (var X=0;X&lt;A.length;X++)\n        if (MaxX&lt;A[X])\n            MaxX=A[X];\n\n    return MaxX;\n}\n\nfunction GetMaxAPPLY(A)\n{   return Math.max.apply(null,A);\n}\n\nfunction GetMaxREDUCE(A)\n{   return A.reduce(function(p,c)\n    {   return p&gt;c?p:c;\n    });\n}\n</code></pre>\n\n<p>The array A was filled with 100,000 random integer numbers, each function was executed 10,000 times on Mozilla Firefox 28.0 on an intel Pentium 4 2.99GHz desktop with Windows Vista. The times are in seconds, retrieved by performance.now() function. The results were these, with 3 fractional digits and standard deviation:</p>\n\n<ol>\n<li>Discrete solution: mean=0.161s, sd=0.078</li>\n<li>APPLY solution: mean=3.571s, sd=0.487</li>\n<li>REDUCE solution: mean=0.350s, sd=0.044</li>\n</ol>\n\n<p>The REDUCE solution was 117% slower than the discrete solution. The APPLY solution was the worse, 2,118% slower than the discrete solution. Besides, as Peter observed, it doesn't work for large arrays (about more than 1,000,000 elements).</p>\n\n<p>Also, to complete the tests, I tested this extended discrete code:</p>\n\n<pre><code>var MaxX=A[0],MinX=A[0];\n\nfor (var X=0;X&lt;A.length;X++)\n{   if (MaxX&lt;A[X])\n        MaxX=A[X];\n    if (MinX&gt;A[X])\n        MinX=A[X];\n}\n</code></pre>\n\n<p>The timing: mean=0.218s, sd=0.094</p>\n\n<p>So, it is 35% slower than the simple discrete solution, but it retrieves both the maximum and the minimum values at once (any other solution would take at least twice that to retrieve them). Once the OP needed both values, the discrete solution would be the best choice (even as two separate functions, one for calculating maximum and another for calculating minimum, they would outperform the second best, the REDUCE solution).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you use the library <a href=\"http://sugarjs.com/\" rel=\"nofollow\"><strong>sugar.js</strong></a>, you can write <a href=\"http://sugarjs.com/api/Array/min\" rel=\"nofollow\"><strong>arr.min()</strong></a> and <a href=\"http://sugarjs.com/api/Array/max\" rel=\"nofollow\"><strong>arr.max()</strong></a> as you suggest. You can also get min and max values from non-numeric arrays.</p>\n\n<blockquote>\n  <p><strong>min( map , all = false )</strong> Returns the element in the array with the\n  lowest value. map may be a function mapping the value to be checked or\n  a string acting as a shortcut. If all is true, will return all min\n  values in an array.</p>\n  \n  <p><strong>max( map , all = false )</strong> Returns the element in the array with the\n  greatest value. map may be a function mapping the value to be checked\n  or a string acting as a shortcut. If all is true, will return all max\n  values in an array.</p>\n</blockquote>\n\n<p>Examples:</p>\n\n<pre><code>[1,2,3].min() == 1\n['fee','fo','fum'].min('length') == \"fo\"\n['fee','fo','fum'].min('length', true) == [\"fo\"]\n['fee','fo','fum'].min(function(n) { return n.length; }); == \"fo\"\n[{a:3,a:2}].min(function(n) { return n['a']; }) == {\"a\":2}\n['fee','fo','fum'].max('length', true) == [\"fee\",\"fum\"]\n</code></pre>\n\n<p>Libraries like <a href=\"http://lodash.com/docs#min\" rel=\"nofollow\"><strong>Lo-Dash</strong></a> and <a href=\"http://underscorejs.org/#min\" rel=\"nofollow\"><strong>underscore.js</strong></a> also provide similar powerful min and max functions:</p>\n\n<p>Example from Lo-Dash:</p>\n\n<pre><code>_.max([4, 2, 8, 6]) == 8\nvar characters = [\n  { 'name': 'barney', 'age': 36 },\n  { 'name': 'fred',   'age': 40 }\n];\n_.max(characters, function(chr) { return chr.age; }) == { 'name': 'fred', 'age': 40 }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can use the following function anywhere in your project:</p>\n\n<pre><code> function getMin(array){\n    return Math.min.apply(Math,array);\n}\n\nfunction getMax(array){\n    return Math.max.apply(Math,array);\n}\n</code></pre>\n\n<p>And then you can call the functions passing the array:</p>\n\n<pre><code>var myArray = [1,2,3,4,5,6,7];\nvar maximo = getMax(myArray); //return the highest number\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Simple stuff, really. </p>\n\n<pre><code>    var arr= [10,20,30,40];\n    arr.max = function(){return  Math.max.apply(Math,this);}; //attach max funct\n    arr.min = function(){return  Math.min.apply(Math,this);}; //attach min funct\n\n    alert(\"min: \" +arr.min() +\" max: \" +arr.max());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>.apply</code> is often used when the intention is to invoke a variadic function with a list of argument values, e.g.</p>\n\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\"><code>Math.max([value1[,value2, ...]])</code></a> function returns the largest of zero or more numbers.</p>\n\n<pre><code>Math.max(10, 20); // 20\nMath.max(-10, -20); // -10\nMath.max(-10, 20); // 20\n</code></pre>\n\n<p>The <code>Math.max()</code> method doesn't allow you to pass in an array. If you have a list of values of which you need to get the largest, you would normally call this function using <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply\">Function.prototype.apply()</a>, e.g. </p>\n\n<pre><code>Math.max.apply(null, [10, 20]); // 20\nMath.max.apply(null, [-10, -20]); // -10\nMath.max.apply(null, [-10, 20]); // 20\n</code></pre>\n\n<p>However, as of the <strong>ECMAScript 6</strong> you can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_operator\">spread operator</a>:</p>\n\n<blockquote>\n  <p>The spread operator allows an expression to be expanded in places where multiple arguments (for function calls) or multiple elements (for array literals) are expected.</p>\n</blockquote>\n\n<p>Using the spread operator, the above can be rewritten as such:</p>\n\n<pre><code>Math.max(...[10, 20]); // 20\nMath.max(...[-10, -20]); // -10\nMath.max(...[-10, 20]); // 20\n</code></pre>\n\n<p>When calling a function using the variadic operator, you can even add additional values, e.g.</p>\n\n<pre><code>Math.max(...[10, 20], 50); // 50\nMath.max(...[-10, -20], 50); // 50\n</code></pre>\n\n<p><strong>Bonus:</strong></p>\n\n<p>Spread operator enables you to use the array literal syntax to create new arrays in situations where in ES5 you would need to fall back to imperative code, using a combination of <code>push</code>, <code>splice</code>, etc.</p>\n\n<pre><code>let foo = ['b', 'c'];\nlet bar = ['a', ...foo, 'd', 'e']; // ['a', 'b', 'c', 'd', 'e']\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>How can I easily obtain the min and max values from a JavaScript Array?</p>\n\n<p>Example code:</p>\n\n<pre><code>var arr = [100, 0, 50];\n\n// something like (but it doesn't have to be)\narr.min(); // return 0\narr.max(); // return 100\n</code></pre>\n",
            "last_activity_date": 1425425791,
            "question_id": 1669190,
            "score": 201,
            "tags": [
                "javascript"
            ],
            "title": "JavaScript: min &amp; max Array values?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>There are various methods to get input textbox value:</p>\n\n<p><strong>Method 1:</strong> </p>\n\n<blockquote>\n  <p><code>document.getElementById('textbox_id').value</code>  to get the value of\n  desired box</p>\n  \n  <p><strong>Eg.</strong> <code>document.getElementById(\"searchTxt\").value;</code></p>\n</blockquote>\n\n<p>&nbsp;</p>\n\n<blockquote>\n  <p><strong>Note :</strong> Method 2,3,4 and 6 returns a collection of elements called NodeList, so use [whole_number] to get the desired occurence, for first element use [0]\n  and for second one use <a href=\"http://www.quirksmode.org/dom/w3c_core.html\">1</a> and so on...</p>\n</blockquote>\n\n<p><strong>Method 2:</strong> </p>\n\n<blockquote>\n  <p>Use\n  <code>document.getElementsByClassName('class_name')[whole_number].value</code> which returns a Live Nodelist</p>\n  \n  <p><strong>Eg.</strong> <code>document.getElementsByClassName(\"searchField\")[0].value;</code>if this is the first textbox in your page.</p>\n</blockquote>\n\n<p><strong>Method 3:</strong> </p>\n\n<blockquote>\n  <p>Use <code>document.getElementsByTagName('tag_name')[whole_number].value</code> which also returns a live nodelist  </p>\n  \n  <p><strong>Eg.</strong>  <code>document.getElementsByTagName(\"input\")[0].value;</code> ,if this is the first textbox in your page.</p>\n</blockquote>\n\n<p><strong>Method 4:</strong> </p>\n\n<blockquote>\n  <p><code>document.getElementsByName('name')[whole_number].value</code></p>\n  \n  <p><strong>Eg.</strong> <code>document.getElementsByName(\"searchTxt\")[0].value;</code> if this is the first textbox with name 'searchtext' in your page.</p>\n</blockquote>\n\n<p><strong>Method 5:</strong> </p>\n\n<blockquote>\n  <p>Use powerful  <code>document.querySelector('selector').value</code> which uses CSS selector to select element</p>\n  \n  <p><strong>Eg.</strong> <code>document.querySelector('#searchTxt').value;</code>    selected by id\n          <code>document.querySelector('.searchField').value;</code>       selected by class\n          <code>document.querySelector('input').value;</code>              selected by tagname\n          <code>document.querySelector('[name=\"searchTxt\"]').value;</code> selected by name</p>\n</blockquote>\n\n<p><strong>Method 6:</strong> </p>\n\n<blockquote>\n  <p><code>document.querySelectorAll('selector')[whole_number].value</code> which  also uses CSS selector to select elements but it returns all elements with that selector as a static nodelist.</p>\n  \n  <p><strong>Eg.</strong> <code>document.querySelectorAll('#searchTxt')[0].value;</code>   selected by id\n          <code>document.querySelectorAll('.searchField')[0].value;</code> selected by class\n          <code>document.querySelectorAll('input')[0].value;</code>        selected by tagname<br>\n          <code>document.querySelectorAll('[name=\"searchTxt\"]')[0].value;</code> selected by name</p>\n</blockquote>\n\n<p>Support</p>\n\n<pre><code>Browser     Method1      Method2 Method3   Method4   Method5/6\nIE6             Y(Buggy)    N       Y       Y(Buggy)    N\nIE7             Y(Buggy)    N       Y       Y(Buggy)    N\nIE8             Y           N       Y       Y(Buggy)    Y\nIE9             Y           Y       Y       Y(Buggy)    Y\nFF3.0           Y           Y       Y       Y           N   IE=Internet Explorer\nFF3.5/FF3.6     Y           Y       Y       Y           Y   FF=Mozilla Firefox\nFF4b1           Y           Y       Y       Y           Y   GC=Google Chrome\nGC4/GC5         Y           Y       Y       Y           Y   Y=YES,N=NO\nSafari4/Safari5 Y           Y       Y       Y           Y\nOpera10.10/\nOpera10.53/     Y           Y       Y       Y(Buggy)    Y\nOpera10.60\n</code></pre>\n\n<p><strong>Useful links</strong></p>\n\n<ol>\n<li>To see the support of these methods with all the bugs including more details click <a href=\"http://www.quirksmode.org/dom/w3c_core.html\"><strong>here</strong></a></li>\n<li>Difference Between Static and Live nodelist click <a href=\"http://www.nczonline.net/blog/2010/09/28/why-is-getelementsbytagname-faster-that-queryselectorall/\"><strong>Here</strong></a></li>\n</ol>\n",
                    "is_accepted": true,
                    "score": 366
                },
                {
                    "body": "<p>easy way is to use getElementById('id') or getElementsByTagName('element name')[0]</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Try this one</p>\n\n<pre><code>&lt;input type=\"text\" onKeyUP=\"trackChange(this.value)\" id=\"myInput\"&gt;\n&lt;script&gt;\nfunction trackChange(value)\n{\n\nwindow.open(\"http://www.google.co.in/search?output=search&amp;q=\"+value)\n\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You should be able to type:</p>\n\n<pre><code>&lt;input name=\"searchTxt\" type=\"text\" maxlength=\"512\" id=\"searchTxt\" class=\"searchField\"/&gt;\n\n&lt;script&gt;\n    var input = document.getElementById(\"searchTxt\");\n\n    function searchURL() {\n         window.location = \"http://www.myurl.com/search/\" + input.value;\n    }\n&lt;/script&gt;\n</code></pre>\n\n<p>I'm sure there are better ways to do this, but this one seems to work across all browsers, and it requires minimal understanding of JS to make/improve/edit.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Also you can, call by tags names, like this: <code>form_name.input_name.value;</code>\nSo you will have the specific value of determined input in a specific form.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>//creates a listener for when you press a key\nwindow.onkeyup = keyup;\n\n//creates a global Javascript variable\nvar inputTextValue;\n\nfunction keyup(e) {\n  //setting your input text to the global Javascript Variable for every key press\n  inputTextValue = e.target.value;\n\n  //listens for you to press the ENTER key, at which point your web address will change to the one you have input in the search box\n  if (e.keyCode == 13) {\n    window.location = \"http://www.myurl.com/search/\" + inputTextValue;\n  }\n}\n</code></pre>\n\n<p><a href=\"http://codepen.io/anon/pen/QwBxOK\" rel=\"nofollow\">See this functioning in codepen.</a> </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>if you are using jquery then by using plugin formInteract, you just need to do this.</p>\n\n<pre><code>//just keep the html as it is.\n\n&lt;input name=\"searchTxt\" type=\"text\" maxlength=\"512\" id=\"searchTxt\" class=\"searchField\"/&gt;\n</code></pre>\n\n<p>at bottom of the page just include this plugin file and write this code.</p>\n\n<pre><code>//initialize one time at the bottom of the page.\nvar search= $(\"#searchTxt).formInteract();\n\nsearch.getAjax(\"http://www.myurl.com/search/\", function(rsp){\n//now do whatever you want to with your response\n});\n</code></pre>\n\n<p>or if using parameterized url then use this.</p>\n\n<pre><code>$.get(\"http://www.myurl.com/search/\"+search.get().searchTxt, {}, function(rsp){\n//now do work with your response;\n})\n</code></pre>\n\n<p>here is the link to project <a href=\"https://bitbucket.org/ranjeet1985/forminteract\" rel=\"nofollow\">https://bitbucket.org/ranjeet1985/forminteract</a></p>\n\n<p>You can use this plugin for many purpose like getting value of form, putting value to form, validation of form and many more. you can see some example of code in index.html file of project</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am working on kinda a search with Javascript, I would use a form but it messes up something else on my page...any ways I have this input text field...</p>\n\n<pre><code>&lt;input name=\"searchTxt\" type=\"text\" maxlength=\"512\" id=\"searchTxt\" class=\"searchField\"/&gt;\n</code></pre>\n\n<p>and this is my javascript</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction searchURL(){\n    window.location = \"http://www.myurl.com/search/\" + (input text value);\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>My question is how do I get the value from the text field into javascript?</p>\n",
            "last_activity_date": 1425502509,
            "question_id": 11563638,
            "score": 134,
            "tags": [
                "javascript",
                "dom",
                "input"
            ],
            "title": "Javascript get input text value"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p><code>document.ondomcontentready=function(){}</code> should do the trick, but it doesn't have full browser compatibility.</p>\n\n<p>Seems like you should just use jQuery min</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Your method:</p>\n\n<pre><code>&lt;script&gt;\n   myFunction()\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>is the only reliable way to support old and new browsers.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The simplest thing to do in the absence of a framework that does all the cross-browser compatibility for you is to just put a call to your code at the end of the body.  This is faster to execute than an <code>onload</code> handler because this waits only for the DOM to be ready, not for all images to load.  And, this works in every browser.</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\nYour HTML here\n\n&lt;script&gt;\n// self executing function here\n(function() {\n   // your page initialization code here\n   // the DOM will be available here\n\n})();\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>If you really don't want to do it this way and you need cross browser compatibility and you don't want to wait for <code>window.onload</code>, then you probably should go look at how a framework like jQuery implements it's <code>$(document).ready()</code> method.  It's fairly involved depending upon the capabilities of the browser.</p>\n\n<p>To give you a little idea what jQuery does (which will work wherever the script tag is placed), if supported, it tries the standard:</p>\n\n<pre><code>document.addEventListener('DOMContentLoaded', fn, false);\n</code></pre>\n\n<p>with a fallback to:</p>\n\n<pre><code>window.addEventListener('load', fn, false )\n</code></pre>\n\n<p>or for older versions of IE, it uses:</p>\n\n<pre><code>document.attachEvent(\"onreadystatechange\", fn);\n</code></pre>\n\n<p>with a fallback to:</p>\n\n<pre><code>window.attachEvent(\"onload\", fn);\n</code></pre>\n\n<p>And, there are some work-arounds in the IE code path that I don't quite follow, but it looks like it has something to do with frames.</p>\n\n<hr>\n\n<p>Here is a full substitute for jQuery's <code>.ready()</code> written in plain javascript:</p>\n\n<pre><code>(function(funcName, baseObj) {\n    // The public function name defaults to window.docReady\n    // but you can pass in your own object and own function name and those will be used\n    // if you want to put them in a different namespace\n    funcName = funcName || \"docReady\";\n    baseObj = baseObj || window;\n    var readyList = [];\n    var readyFired = false;\n    var readyEventHandlersInstalled = false;\n\n    // call this when the document is ready\n    // this function protects itself against being called more than once\n    function ready() {\n        if (!readyFired) {\n            // this must be set to true before we start calling callbacks\n            readyFired = true;\n            for (var i = 0; i &lt; readyList.length; i++) {\n                // if a callback here happens to add new ready handlers,\n                // the docReady() function will see that it already fired\n                // and will schedule the callback to run right after\n                // this event loop finishes so all handlers will still execute\n                // in order and no new ones will be added to the readyList\n                // while we are processing the list\n                readyList[i].fn.call(window, readyList[i].ctx);\n            }\n            // allow any closures held by these functions to free\n            readyList = [];\n        }\n    }\n\n    function readyStateChange() {\n        if ( document.readyState === \"complete\" ) {\n            ready();\n        }\n    }\n\n    // This is the one public interface\n    // docReady(fn, context);\n    // the context argument is optional - if present, it will be passed\n    // as an argument to the callback\n    baseObj[funcName] = function(callback, context) {\n        // if ready has already fired, then just schedule the callback\n        // to fire asynchronously, but right away\n        if (readyFired) {\n            setTimeout(function() {callback(context);}, 1);\n            return;\n        } else {\n            // add the function and context to the list\n            readyList.push({fn: callback, ctx: context});\n        }\n        // if document already ready to go, schedule the ready function to run\n        if (document.readyState === \"complete\") {\n            setTimeout(ready, 1);\n        } else if (!readyEventHandlersInstalled) {\n            // otherwise if we don't have event handlers installed, install them\n            if (document.addEventListener) {\n                // first choice is DOMContentLoaded event\n                document.addEventListener(\"DOMContentLoaded\", ready, false);\n                // backup is window load event\n                window.addEventListener(\"load\", ready, false);\n            } else {\n                // must be IE\n                document.attachEvent(\"onreadystatechange\", readyStateChange);\n                window.attachEvent(\"onload\", ready);\n            }\n            readyEventHandlersInstalled = true;\n        }\n    }\n})(\"docReady\", window);\n</code></pre>\n\n<p>The latest version of the code is shared publicly on GitHub at <a href=\"https://github.com/jfriend00/docReady\">https://github.com/jfriend00/docReady</a></p>\n\n<p>Usage:</p>\n\n<pre><code>// pass a function reference\ndocReady(fn);\n\n// use an anonymous function\ndocReady(function() {\n    // code here\n});\n\n// pass a function reference and a context\n// the context will be passed to the function as the first argument\ndocReady(fn, context);\n\n// use an anonymous function with a context\ndocReady(function(context) {\n    // code here that can use the context argument that was passed to docReady\n}, ctx);\n</code></pre>\n\n<hr>\n\n<p>This has been tested in:</p>\n\n<pre><code>IE6 and up\nFirefox 3.6 and up\nChrome 14 and up\nSafari 5.1 and up\nOpera 11.6 and up\nMultiple iOS devices\nMultiple Android devices\n</code></pre>\n\n<p>Working implementation and test bed: <a href=\"http://jsfiddle.net/jfriend00/YfD3C/\">http://jsfiddle.net/jfriend00/YfD3C/</a></p>\n\n<hr>\n\n<p>Here's a summary of how it works:</p>\n\n<ol>\n<li>Create an IIFE (immediately invoked function expression) to we can have non-public state variables.</li>\n<li>Declare a public function <code>docReady(fn, context)</code></li>\n<li>When <code>docReady(fn, context)</code> is called, check if the ready handler has already fired.  If so, just schedule the newly added callback to fire right after this thread of JS finishes with <code>setTimeout(fn, 1)</code>.</li>\n<li>If the ready handler has not already fired, then add this new callback to the list of callbacks to be called later.</li>\n<li>Check if the document is already ready.  If so, execute all ready handlers.</li>\n<li>If we haven't installed event listeners yet to know when the document becomes ready, then install them now.</li>\n<li>If <code>document.addEventListener</code> exists, then install event handlers using <code>.addEventListener()</code> for both <code>\"DOMContentLoaded\"</code> and <code>\"load\"</code> events.  The \"load\" is a backup event for safety and should not be needed.</li>\n<li>If <code>document.addEventListener</code> doesn't exist, then install event handlers using <code>.attachEvent()</code> for <code>\"onreadystatechange\"</code> and <code>\"onload\"</code> events.</li>\n<li>In the <code>onreadystatechange</code> event, check to see if the <code>document.readyState === \"complete\"</code> and if so, call a function to fire all the ready handlers.</li>\n<li>In all the other event handlers, call a function to fire all the ready handlers.</li>\n<li>In the function to call all the ready handlers, check a state variable to see if we've already fired.  If we have, do nothing.  If we haven't yet been called, then loop through the array of ready functions and call each one in the order they were added.  Set a flag to indicate these have all been called so they are never executed more than once.</li>\n<li>Clear the function array so any closures they might be using can be freed.</li>\n</ol>\n\n<p>Handlers registered with <code>docReady()</code> are guaranteed to be fired in the order they were registered.</p>\n\n<p>If you call <code>docReady(fn)</code> after the document is already ready, the callback will be scheduled to execute as soon as the current thread of execution completes using <code>setTimeout(fn, 1)</code>.  This allows the calling code to always assume they are async callbacks that will be called later, even if later is as soon as the current thread of JS finishes and it preserves calling order.</p>\n",
                    "is_accepted": true,
                    "score": 225
                },
                {
                    "body": "<p>Tested in IE9, and latest Firefox and Chrome.</p>\n\n<pre><code>document.onreadystatechange = function () {\n  var state = document.readyState\n  if (state == 'interactive') {\n      init()\n  } else if (state == 'complete') {\n      initOnCompleteLoad()\n  }\n}\u200b\n</code></pre>\n\n<p>Example: <a href=\"http://jsfiddle.net/electricvisions/Jacck/\" rel=\"nofollow\">http://jsfiddle.net/electricvisions/Jacck/</a></p>\n\n<p><strong>UPDATE - reusable version</strong></p>\n\n<p>I've just developed the following (caveat: require.js or browserify might be a better fit depending on your needs). It's a rather simplistic equivalent to jQuery or Dom ready without backwards compatibility. It probably needs further refinement. Only tested in Chrome so far. I'll update if I find any issues.</p>\n\n<pre><code>window.readyHandlers = [];\nwindow.ready = function ready(handler) {\n  window.readyHandlers.push(handler);\n  handleState();\n};\n\nwindow.handleState = function handleState () {\n  if (['interactive', 'complete'].indexOf(document.readyState) &gt; -1) {\n    while(window.readyHandlers.length &gt; 0) {\n      window.readyHandlers.shift()();\n    }\n  }\n};\n\ndocument.onreadystatechange = window.handleState;\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>ready(function () {\n  // your code here\n});\n</code></pre>\n\n<p>It's written to handle async loading of JS but you might want to sync load this script first unless you're minifying. I've found it useful in development.</p>\n",
                    "is_accepted": false,
                    "score": 19
                }
            ],
            "body": "<p>Ok, this might just be a silly question, though Im sure there are plenty asking the same question from time to time. Me I just want to make 100% sure about it either way. With jQuery we all know the wonderful </p>\n\n<pre><code>$('document').ready(function(){});\n</code></pre>\n\n<p>However lets say I want to run a function that is written in standard JavaScript alone with no library backing it. And I want to launch a function as soon as the page is ready to handle it. Is there a proper way to approach this?</p>\n\n<p>I know I can either do</p>\n\n<pre><code>window.onload=\"myFunction()\";\n</code></pre>\n\n<p>or I can use the body tag</p>\n\n<pre><code>&lt;body onload=\"myFunction()\"&gt;\n</code></pre>\n\n<p>or I can even try at the bottom of the page after all but the end body/html tag something like</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n   myFunction()\n&lt;/script&gt;\n</code></pre>\n\n<p>of these methods though is there a cross browser (old/new) compliant method of issuing one or more functions in a manor like jQuery's $.ready()?</p>\n",
            "last_activity_date": 1425462559,
            "question_id": 9899372,
            "score": 112,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "pure JavaScript equivalent to jQuery&#39;s $.ready() how to call a function when the page/dom is ready for it"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>All the information you should require on Internet Explorer's support of the various console statements can be found <a href=\"http://msdn.microsoft.com/en-us/library/dd565625%28v=vs.85%29.aspx#consolelogging\" rel=\"nofollow\">at this MSDN page</a>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In Internet Explorer 9 (and 8), the <code>console</code> object is only exposed when the developer tools are opened for a particular tab.  If you hide the developer tools window for that tab, the <code>console</code> object remains exposed for each page you navigate to.  If you open a new tab, you must also open the developer tools for that tab in order for the <code>console</code> object to be exposed.</p>\n\n<p>The <code>console</code> object is not part of any standard and is an extension to the Document Object Model.  Like other DOM objects, it is considered a host object and is not required to inherit from <code>Object</code>, nor its methods from <code>Function</code>, like native ECMAScript functions and objects do.  This is the reason <code>apply</code> and <code>call</code> are undefined on those methods.  In IE 9, most DOM objects were improved to inherit from native ECMAScript types.  As the developer tools are considered an extension to IE (albeit, a built-in extension), they clearly didn't receive the same improvements as the rest of the DOM. </p>\n\n<p>For what it's worth, you can still use some <code>Function.prototype</code> methods on <code>console</code> methods with a little <a href=\"http://msdn.microsoft.com/en-us/library/ff841995%28v=vs.94%29.aspx\"><code>bind()</code></a> magic:</p>\n\n<pre><code>var log = Function.prototype.bind.call(console.log, console);\nlog.apply(console, [\"this\", \"is\", \"a\", \"test\"]);\n//-&gt; \"thisisatest\"\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 194
                },
                {
                    "body": "<p>A simple solution to this console.log problem is to define the following at the beginning of your JS code:</p>\n\n<pre><code>if (!window.console) window.console = {};\nif (!window.console.log) window.console.log = function () { };\n</code></pre>\n\n<p>This works for me in all browsers. This creates a dummy function for console.log when the debugger is not active. When the debugger is active, the method console.log is defined and executes normally.</p>\n",
                    "is_accepted": false,
                    "score": 117
                },
                {
                    "body": "<p>How about...</p>\n\n<pre><code>console = { log : function(text) { alert(text); } }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>After reading the article from Marc Cliament's comment above, I've now changed my all-purpose cross-browser console.log function to look like this:</p>\n\n<pre><code>function log()\n{\n    \"use strict\";\n\n    if (typeof(console) !== \"undefined\" &amp;&amp; console.log !== undefined)\n    {\n        try\n        {\n            console.log.apply(console, arguments);\n        }\n        catch (e)\n        {\n            var log = Function.prototype.bind.call(console.log, console);\n            log.apply(console, arguments);\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>console.log is only defined when the console is open. If you want to check for it in your code make sure you check for for it within the window property </p>\n\n<pre><code>if (window.console)\n       console.log(msg)\n</code></pre>\n\n<p>this throws an exception in IE9 and will not work correctly. Do not do this</p>\n\n<pre><code>if (console) \n    console.log(msg)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I know this is a very old question but feel this adds a valuable alternative of how to deal with the console issue. Place the following code before any call to console.* (so your very first script).</p>\n\n<pre><code>// Avoid `console` errors in browsers that lack a console.\n(function() {\n    var method;\n    var noop = function () {};\n    var methods = [\n        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',\n        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',\n        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',\n        'timeStamp', 'trace', 'warn'\n    ];\n    var length = methods.length;\n    var console = (window.console = window.console || {});\n\n    while (length--) {\n        method = methods[length];\n\n        // Only stub undefined methods.\n        if (!console[method]) {\n            console[method] = noop;\n        }\n    }\n}());\n</code></pre>\n\n<p><strong>Reference:</strong><br/>\nURL: <a href=\"http://html5boilerplate.com/\" rel=\"nofollow\">http://html5boilerplate.com/</a> <br/>\nVersion: 4.3.0<br/>\nFile: js/plugins.js<br/></p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>In which circumstances is <code>window.console.log</code> defined in Internet Explorer 9?</p>\n\n<p>Even when <code>window.console.log</code> is defined, <code>window.console.log.apply</code> and <code>window.console.log.call</code> are undefined. Why is this?</p>\n\n<p>[Related question for IE8: <a href=\"http://stackoverflow.com/questions/690251/what-happened-to-console-log-in-ie8\">What happened to console.log in IE8?</a>.]</p>\n",
            "last_activity_date": 1415856509,
            "question_id": 5472938,
            "score": 132,
            "tags": [
                "javascript",
                "logging",
                "internet-explorer-9"
            ],
            "title": "Does IE9 support console.log, and is it a real function?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Getting the text the user has selected is relatively simple. There's no benefit to be gained by involving jQuery since you need nothing other than the <code>window</code> and <code>document</code> objects.</p>\n\n<pre><code>function getSelectionText() {\n    var text = \"\";\n    if (window.getSelection) {\n        text = window.getSelection().toString();\n    } else if (document.selection &amp;&amp; document.selection.type != \"Control\") {\n        text = document.selection.createRange().text;\n    }\n    return text;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 116
                },
                {
                    "body": "<p>This solution works if you're using chrome (can't verify other browsers) and if the text is located in the same DOM Element:</p>\n\n<pre><code>window.getSelection().anchorNode.textContent.substring(\n  window.getSelection().extentOffset, \n  window.getSelection().anchorOffset)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Fast &amp; Full Demo  : \n<a href=\"http://jsfiddle.net/abdennour/BQSJ3/6/\"><a href=\"http://jsfiddle.net/abdennour/BQSJ3/6/\">http://jsfiddle.net/abdennour/BQSJ3/6/</a></a></p>\n\n<pre><code>/*CopyRight \u0639\u0628\u062f \u0627\u0644\u0646\u0648\u0631 \u0627\u0644\u062a\u0648\u0645\u064a \nhttp://abdennour-insat.blogspot.com/2012/09/about-me.html\n*/  \nfunction getSelectionText() {\n    var text = \"\";\n    if (window.getSelection) {\n        text = window.getSelection().toString();\n    } else if (document.selection &amp;&amp; document.selection.type != \"Control\") {\n        text = document.selection.createRange().text;\n    }\n    return text;\n}\n$(document).ready(function (){\n   $('div,pre').mouseup(function (e){\n       alert(getSelectionText())\n   })\n});\n</code></pre>\n\n<p>HTML Code : </p>\n\n<pre><code>&lt;body &gt;\n  &lt;div&gt;\u0628\u0633\u0645 \u0627\u0644\u0644\u0647 \u0627\u0644\u0631\u062d\u0645\u0646 \u0627\u0644\u0631\u062d\u064a\u0645&lt;/div&gt;\n  &lt;pre&gt;  \n1- \u0627\u0644\u0644\u0647 \u062e\u0644\u0642\u0646\u0627\n2- \u0631\u0632\u0642\u0646\u0627\n3- \u0644\u0645 \u064a\u062a\u0631\u0643\u0646\u0627 \u0647\u0645\u0644\u0627\n4- \u0623\u0631\u0633\u0644 \u0625\u0644\u064a\u0646\u0627 \u0631\u0633\u0648\u0644\u0627\n5- \u0645\u0646 \u0623\u0637\u0627\u0639\u0647 \u062f\u062e\u0644 \u0627\u0644\u062c\u0646\u0629\n6- \u0645\u0646 \u0639\u0635\u0627\u0647 \u062f\u062e\u0644 \u0627\u0644\u0646\u0627\u0631\n    &lt;/pre&gt;\n\n\n\n&lt;/body&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Get highlighted text this way:</p>\n\n<pre><code>window.getSelection().toString()\n</code></pre>\n\n<p>and of course a special treatment for ie:</p>\n\n<pre><code>document.selection.createRange().htmlText\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>Is it possible to get the highlighted text in a paragraph of a website e.g. by using jQuery?</p>\n",
            "last_activity_date": 1417199369,
            "question_id": 5379120,
            "score": 100,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Get the Highlighted/Selected text"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The problem I had was using the wrong jQuery identifier.</p>\n\n<p>You <strong>can upload data and files</strong> with one form <strong>using ajax</strong>.</p>\n\n<p><strong>PHP + HTML</strong></p>\n\n<pre><code>&lt;?\n    print_r($_POST);\n    print_r($_FILES);\n?&gt;\n\n&lt;form id=\"data\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;input type=\"text\" name=\"first\" value=\"Bob\" /&gt;\n    &lt;input type=\"text\" name=\"middle\" value=\"James\" /&gt;\n    &lt;input type=\"text\" name=\"last\" value=\"Smith\" /&gt;\n    &lt;input name=\"image\" type=\"file\" /&gt;\n    &lt;button&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><strong>jQuery + Ajax</strong></p>\n\n<pre><code>$(\"form#data\").submit(function(){\n\n    var formData = new FormData($(this)[0]);\n\n    $.ajax({\n        url: window.location.pathname,\n        type: 'POST',\n        data: formData,\n        async: false,\n        success: function (data) {\n            alert(data)\n        },\n        cache: false,\n        contentType: false,\n        processData: false\n    });\n\n    return false;\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 69
                },
                {
                    "body": "<p>Or shorter:</p>\n\n<pre><code>$(\"form#data\").submit(function() {\n    var formData = new FormData($(this)[0]);\n    $.post($(this).attr(\"action\"), formData, function() {\n        // success    \n    });\n    return false;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I'm using jQuery and Ajax for my forms to submit data and files but I'm not sure how to send both data and files in one form?</p>\n\n<p>I currently do almost the same with both methods but the way in which the data is gathered into an array is different, the data uses <code>.serialize();</code> but the files use <code>= new FormData($(this)[0]);</code></p>\n\n<p>Is it possible to combine both methods to be able to upload files and data in one form through Ajax?</p>\n\n<p><strong>Data jQuery, Ajax and html</strong></p>\n\n<pre><code>$(\"form#data\").submit(function(){\n\n    var formData = $(this).serialize();\n\n    $.ajax({\n        url: window.location.pathname,\n        type: 'POST',\n        data: formData,\n        async: false,\n        success: function (data) {\n            alert(data)\n        },\n        cache: false,\n        contentType: false,\n        processData: false\n    });\n\n    return false;\n});\n\n&lt;form id=\"data\" method=\"post\"&gt;\n    &lt;input type=\"text\" name=\"first\" value=\"Bob\" /&gt;\n    &lt;input type=\"text\" name=\"middle\" value=\"James\" /&gt;\n    &lt;input type=\"text\" name=\"last\" value=\"Smith\" /&gt;\n    &lt;button&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><strong>Files jQuery, Ajax and html</strong></p>\n\n<pre><code>$(\"form#files\").submit(function(){\n\n    var formData = new FormData($(this)[0]);\n\n    $.ajax({\n        url: window.location.pathname,\n        type: 'POST',\n        data: formData,\n        async: false,\n        success: function (data) {\n            alert(data)\n        },\n        cache: false,\n        contentType: false,\n        processData: false\n    });\n\n    return false;\n});\n\n&lt;form id=\"files\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;input name=\"image\" type=\"file\" /&gt;\n    &lt;button&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>How can I combine the above so that I can send data and files in one form via Ajax?</p>\n\n<p>My aim is to be able to send all of this form in one post with Ajax, is it possible?</p>\n\n<pre><code>&lt;form id=\"datafiles\" method=\"post\" enctype=\"multipart/form-data\"&gt;\n    &lt;input type=\"text\" name=\"first\" value=\"Bob\" /&gt;\n    &lt;input type=\"text\" name=\"middle\" value=\"James\" /&gt;\n    &lt;input type=\"text\" name=\"last\" value=\"Smith\" /&gt;\n    &lt;input name=\"image\" type=\"file\" /&gt;\n    &lt;button&gt;Submit&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n",
            "last_activity_date": 1422897343,
            "question_id": 10899384,
            "score": 59,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "forms"
            ],
            "title": "Uploading both data and files in one form using Ajax?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Take a look at <a href=\"http://www.dojotoolkit.org/reference-guide/util/doh.html\">the Dojo Object Harness (DOH) unit test framework</a> which is pretty much framework independent harness for JavaScript unit testing and doesn't have any Dojo dependencies. There is a very good description of it at <a href=\"http://www.ibm.com/developerworks/web/library/wa-aj-doh/index.html\">Unit testing Web 2.0 applications using the Dojo Objective Harness</a>.</p>\n\n<p>If you want to automate the UI testing (a sore point of many developers) &mdash; check out <a href=\"http://dojotoolkit.org/2008/08/11/doh-robot-automating-web-ui-unit-tests-real-user-events\">doh.robot</a> <em>(temporary down. update: other link <a href=\"http://dojotoolkit.org/reference-guide/util/dohrobot.html\">http://dojotoolkit.org/reference-guide/util/dohrobot.html</a> )</em> and <a href=\"http://blog.dojotoolkit.org/2008/10/31/doh-robot-part-2-automating-acceptance-tests-and-user-stories\">dijit.robotx</a> <em>(temporary down)</em>. The latter is designed for an acceptance testing.\nUpdate: </p>\n\n<p>Referenced articles explain how to use them, how to emulate a user interacting with your UI using mouse and/or keyboard, and how to record a testing session, so you can \"play\" it later automatically.</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>You have \"runs on actual browser\" as a pro, but in my experience that is a con because it is slow. But what makes it valuable is the lack of sufficient JS emulation from the non-browser alternatives. It could be that if your JS is complex enough that only an in browser test will suffice, but there are a couple more options to consider:</p>\n\n<p><a href=\"http://htmlunit.sourceforge.net/\" rel=\"nofollow\">HtmlUnit</a>: \"It has fairly good JavaScript support (which is constantly improving) and is able to work even with quite complex AJAX libraries, simulating either Firefox or Internet Explorer depending on the configuration you want to use.\"  If its emulation is good enough for your use then it will be much faster than driving a browser.</p>\n\n<p>But maybe HtmlUnit has good enough JS support but you don't like Java?  Then maybe:</p>\n\n<p><a href=\"http://celerity.rubyforge.org/\" rel=\"nofollow\">Celerity</a>: Watir API running on JRuby backed by HtmlUnit.</p>\n\n<p>or similarly</p>\n\n<p><a href=\"http://code.google.com/p/schnell-jruby/\" rel=\"nofollow\">Schnell</a>: another JRuby wrapper of HtmlUnit.</p>\n\n<p>Of course if HtmlUnit isn't good enough and you have to drive a browser then you might consider <a href=\"http://justaddwater.dk/2007/11/20/how-to-run-javascript-from-watir-scripts/\" rel=\"nofollow\">Watir to drive your JS</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"http://mochikit.com/\" rel=\"nofollow\">MochiKit</a> has a testing framework called SimpleTest that seems to have caught on. \nHere's a <a href=\"http://blog.leosoto.com/2008/10/interesting-open-source-surprises.html\" rel=\"nofollow\">blog post from the original author</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You might also be interested in the unit testing framework that is part of <a href=\"http://qooxdoo.org\" rel=\"nofollow\">qooxdoo</a>, an open source RIA framework similar to Dojo, ExtJS, etc. but with quite a comprehensive tool chain.</p>\n\n<p>Try the online version of the <a href=\"http://demo.qooxdoo.org/current/testrunner\" rel=\"nofollow\">testrunner</a>. Hint: hit the gray arrow at the top left (should be made more obvious). It's a \"play\" button that runs the selected tests.</p>\n\n<p>To find out more about the JS classes that let you define your unit tests, see the online <a href=\"http://demo.qooxdoo.org/current/apiviewer/#qx.dev.unit\" rel=\"nofollow\">API viewer</a>.</p>\n\n<p>For automated UI testing (based on Selenium RC), check out the <a href=\"http://qooxdoo.org/contrib/project/simulator\" rel=\"nofollow\">Simulator</a> project.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You should have a look at <a href=\"http://groups.google.com/group/envjs\" rel=\"nofollow\">env.js</a>. See <a href=\"http://blog.pdark.de/2008/11/18/testing-the-impossible-javascript-in-a-web-page/\" rel=\"nofollow\">my blog</a> for an example how to write unit tests with env.js.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>YUI has a <a href=\"http://yuilibrary.com/projects/yuitest/\" rel=\"nofollow\">testing framework</a> as well.  <a href=\"http://www.yuiblog.com/blog/2010/11/29/video-yuiconf2010-yuitest/\" rel=\"nofollow\">This video</a> from Yahoo! Theater is a nice introduction, although there are a lot of basics about TDD up front.</p>\n\n<p>This framework is generic and can be run against any JavaScript or JS library.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<h2><a href=\"http://karma-runner.github.io\">Karma</a> or <a href=\"http://angular.github.io/protractor/#/\">Protractor</a></h2>\n\n<p>Karma is a JavaScript test-runner built with Node.js, and meant for unit testing.</p>\n\n<p>Protractor is for end-to-end testing, and uses Selenium Web Driver to drive tests.</p>\n\n<p>Both have been made by the Angular team. You can use any assertion-library you want with either.</p>\n\n<p>Screencast: <a href=\"http://www.youtube.com/watch?v=MVw8N3hTfCI\">Karma Getting started</a></p>\n\n<p><strong>related</strong>:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/21732379/should-i-be-using-protractor-or-karma-for-my-end-to-end-testing/21733114#21733114\">Should I be using Protractor or Karma for my end-to-end testing?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/17070522/can-protractor-and-karma-be-used-together\">Can Protractor and Karma be used together?</a></li>\n</ul>\n\n<p><strong>pros</strong>:</p>\n\n<ul>\n<li>Uses node.js, so compatible with Win/OS X/Linux</li>\n<li>Run tests from browser or headless with PhantomJS</li>\n<li>Run on multiple clients at once</li>\n<li>Option to launch, capture, and automatically shutdown browsers</li>\n<li>Option to run server/clients on development computer or separately</li>\n<li>Run tests from command line (can be integrated in ant/maven)</li>\n<li>Write tests xUnit or BDD style</li>\n<li>Supports multiple JavaScript test frameworks</li>\n<li>Auto-run tests on save</li>\n<li>Proxies requests cross-domain</li>\n<li>Possible to customize:\n<ul>\n<li>Extend it to wrap other test-frameworks (Jasmine, Mocha, QUnit built-in)</li>\n<li>Your own assertions/refutes</li>\n<li>Reporters</li>\n<li>Browser Launchers</li>\n</ul></li>\n<li>Plugin for WebStorm</li>\n<li>Supported by Netbeans IDE</li>\n</ul>\n\n<p><strong>cons</strong>:</p>\n\n<ul>\n<li>Does not supports NodeJS testing</li>\n<li>No plugin for Eclipse (yet)</li>\n<li>No history of previous test results </li>\n</ul>\n\n<h2><a href=\"http://busterjs.org/\">Buster.js</a></h2>\n\n<p>A JavaScript test-runner built with Node.js. Very modular and flexible. It comes with it's own assertion library, but you can add your own if you like. The <a href=\"http://docs.busterjs.org/en/latest/modules/referee/\">assertions library</a> is decoupled, so you can also use it with other test-runners. Instead of using <code>assert(!...)</code> or <code>expect(...).not...</code>, it uses <code>refute(...)</code> which is a nice twist imho.</p>\n\n<blockquote>\n  <p>A browser JavaScript testing toolkit. It does browser testing with browser automation (think JsTestDriver), qunit style static html page testing, testing in headless browsers (phantomjs, jsdom, ...), and more. Take a look at <a href=\"http://docs.busterjs.org/en/latest/overview/\">the overview</a>!</p>\n  \n  <p>A Node.js testing toolkit. You get the same test case library, assertion library, etc. This is also great for hybrid browser and Node.js code. Write your test case with Buster.JS and run it both in Node.js and in a real browser.</p>\n</blockquote>\n\n<p>Screencast: <a href=\"http://www.youtube.com/watch?v=VSFGAl1BekY\">Buster.js Getting started</a> (2:45)</p>\n\n<p><strong>pros</strong>:</p>\n\n<ul>\n<li>Uses node.js, so compatible with Win/OS X/Linux</li>\n<li>Run tests from browser or headless with PhantomJS (soon)</li>\n<li>Run on multiple clients at once</li>\n<li>Supports NodeJS testing</li>\n<li>Don't need to run server/clients on development computer (no need for IE)</li>\n<li>Run tests from command line (can be integrated in ant/maven)</li>\n<li>Write tests xUnit or BDD style</li>\n<li>Supports multiple JavaScript test frameworks</li>\n<li>Defer tests instead of commenting them out</li>\n<li>SinonJS built in</li>\n<li><a href=\"http://www.youtube.com/watch?v=gKVej9SAzH4\">Auto-run tests on save</a></li>\n<li>Proxies requests cross-domain</li>\n<li>Possible to customize:\n<ul>\n<li>Extend it to wrap other test-frameworks (JsTestDriver built in)</li>\n<li>Your own assertions/refutes</li>\n<li>Reporters (xunit XML, traditional dots, specification, tap, teamcity and more built in)</li>\n<li>Customize/replace the HTML that is used to run the browser-tests</li>\n</ul></li>\n<li>TextMate and Emacs integration</li>\n</ul>\n\n<p><strong>cons</strong>:</p>\n\n<ul>\n<li>Stil in beta, so can be buggy</li>\n<li>No plugin for Eclipse/IntelliJ (yet)</li>\n<li>Doesn't group results by os/browser/version like TestSwarm *. It does however print out the browser name and version in the test results.</li>\n<li>No history of previous test results like TestSwarm *</li>\n<li>Doesn't fully work on windows <a href=\"http://docs.busterjs.org/en/latest/developers/windows/\">as of May 2014</a></li>\n</ul>\n\n<p>* TestSwarm is also a Continuous Integration server, while you need a separate CI server for Buster.js. It does however output xUnit XML reports, so it should be easy to integrate with <a href=\"http://hudson-ci.org/\">Hudson</a>, <a href=\"http://www.atlassian.com/software/bamboo/overview\">Bamboo</a> or other CI servers.</p>\n\n<h2><a href=\"https://github.com/jquery/testswarm/\">TestSwarm</a></h2>\n\n<p>John Resig (jQuery) has created a tool for distributed JavaScript testing, TestSwarm. Mainly for open source JavaScript projects, but TestSwarm is open source, so you can set up a server yourself for corporate testing. Although this might require that you to do some modifications.</p>\n\n<p><strong>pros</strong>:</p>\n\n<ul>\n<li>Continuous integration server for JavaScript</li>\n<li>Supports all major browsers/operating systems</li>\n<li>Run on multiple clients at once</li>\n<li>Don't need to run server/clients on development computer (no need for IE)</li>\n<li>Automatic run tests on all clients when you commit something (or whenever you modify the script to run the tests)</li>\n<li>Show history of test results pr commit</li>\n<li>Supports multiple JavaScript test frameworks</li>\n<li>Have test results for OS and browser versions</li>\n<li>Crowdsource to test in a multitude of browsers</li>\n</ul>\n\n<p><strong>cons</strong>:</p>\n\n<ul>\n<li>Can not break your build through ant/maven</li>\n<li>Don't notice the test fail before commit</li>\n<li>No IDEplug-in</li>\n</ul>\n\n<p><a href=\"http://ejohn.org/blog/javascript-testing-does-not-scale/\">http://ejohn.org/blog/javascript-testing-does-not-scale/</a></p>\n\n<p>TestSwarm architecture:</p>\n\n<p><img src=\"http://ejohn.org/files/ts-swarm.png\" alt=\"alt text\"></p>\n\n<h2><a href=\"http://www.browserswarm.com/\">BrowserSwarm</a></h2>\n\n<p>BrowserSwarm is a project from appendTo, Sauce Labs and the Internet Explorer team. It is essentially a hosted forked version of TestSwarm. </p>\n\n<p>In addition to all the advantages to TestSwarm, BrowserSwarm already has all the browsers connected to the swarm and ready to test your code, therefore not requiring you to add clients yourself or maintaining installations of browsers. Time is also saved from the hassle of setting up and configuring TestSwarm. </p>\n\n<h2><a href=\"https://github.com/pivotal/jasmine/\">Jasmine</a></h2>\n\n<p><img src=\"http://i.stack.imgur.com/q4Bct.png\" alt=\"Jasmine\"></p>\n\n<p>This is a client-side test-runner that might interest developers familiar with Ruby or Ruby on Rails. The syntax is based on <a href=\"http://rspec.info/\">RSpec</a> that's used for testing in Rails projects.</p>\n\n<blockquote>\n  <p>Jasmine is a behavior-driven development framework for testing your JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM.</p>\n</blockquote>\n\n<p>If you have experience with this test-runner, please contribute with more info :)</p>\n\n<p>Project home: <a href=\"https://github.com/pivotal/jasmine/\">http://jasmine.github.io/</a></p>\n\n<h2><a href=\"http://qunitjs.com/\">QUnit</a></h2>\n\n<p>QUnit focuses on testing JavaScript in the browser, while providing as much convenience to the developer as possible. Blurb from the site:</p>\n\n<blockquote>\n  <p>QUnit is a powerful, easy-to-use JavaScript unit test suite. It's used by the jQuery, jQuery UI and jQuery Mobile projects and is capable of testing any generic JavaScript code</p>\n</blockquote>\n\n<p>QUnit shares some history with TestSwarm (above):</p>\n\n<blockquote>\n  <p>QUnit was originally developed by John Resig as part of jQuery. In 2008 it got its own home, name and API documentation, allowing others to use it for their unit testing as well. At the time it still dependended on jQuery. A rewrite in 2009 fixed that, now QUnit runs completelty standalone.\n  QUnit's assertion methods follow the CommonJS Unit Testing specification, which was to some degree influenced by QUnit.</p>\n</blockquote>\n\n<p>Project home: <a href=\"http://qunitjs.com/\">http://qunitjs.com/</a></p>\n\n<h2><a href=\"http://sinonjs.org\">Sinon</a></h2>\n\n<p>Another great tool is <a href=\"http://sinonjs.org\">sinon.js</a> by Christian Johansen, the author of <a href=\"http://tddjs.com/\">Test-Driven JavaScript Development</a>. Best described by himself:</p>\n\n<blockquote>\n  <p>Standalone test spies, stubs and mocks\n  for JavaScript. No dependencies, works\n  with any unit testing framework.</p>\n</blockquote>\n\n<h2><a href=\"http://theintern.io\">Intern</a></h2>\n\n<p>The <a href=\"http://theintern.io/#compare\">Intern Web site</a> provides a direct feature comparison to the other testing frameworks on this list. It offers more features out of the box than any other JavaScript-based testing system.</p>\n\n<h2><a href=\"http://mochajs.org\">mocha.js</a></h2>\n\n<p>I'm totally unqualified to comment on mocha.js's features, strengths, and weaknesses,\nbut it was just recommended to me by someone I trust in the JS community.</p>\n\n<p>List of features, as reported by its web site:</p>\n\n<ul>\n<li>browser support</li>\n<li>simple async support, including promises</li>\n<li>test coverage reporting</li>\n<li>string diff support</li>\n<li>javascript API for running tests</li>\n<li>proper exit status for CI support etc</li>\n<li>auto-detects and disables coloring for non-ttys</li>\n<li>maps uncaught exceptions to the correct test case</li>\n<li>async test timeout support</li>\n<li>test-specific timeouts</li>\n<li>growl notification support</li>\n<li>reports test durations</li>\n<li>highlights slow tests</li>\n<li>file watcher support</li>\n<li>global variable leak detection</li>\n<li>optionally run tests that match a regexp</li>\n<li>auto-exit to prevent \"hanging\" with an active loop</li>\n<li>easily meta-generate suites &amp; test-cases</li>\n<li>mocha.opts file support</li>\n<li>clickable suite titles to filter test execution</li>\n<li>node debugger support</li>\n<li>detects multiple calls to done()</li>\n<li>use any assertion library you want</li>\n<li>extensible reporting, bundled with 9+ reporters</li>\n<li>extensible test DSLs or \"interfaces\"</li>\n<li>before, after, before each, after each hooks</li>\n<li>arbitrary transpiler support (coffee-script etc)</li>\n<li>TextMate bundle</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 888
                },
                {
                    "body": "<p>The JavaScript section of the Wikipedia entry, <a href=\"http://en.wikipedia.org/wiki/List%5Fof%5Funit%5Ftesting%5Fframeworks#JavaScript\">List of Unit Testing Frameworks</a>, provides a list of available choices.  It indicates whether they work client-side, server-side, or both.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<h2><a href=\"http://chutzpah.codeplex.com/\">Chutzpah - A JavaScript Test Runner</a></h2>\n\n<p>I created an open source project called Chutzpah which is a test runner for JavaScript unit tests. Chutzpah enables you to run JavaScript unit tests from the command line and from inside of Visual Studio. It also supports running in the TeamCity continuous integration server.</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>google-js-test: new javascript testing framework recently released by Google:\n<a href=\"http://code.google.com/p/google-js-test/\">http://code.google.com/p/google-js-test/</a></p>\n\n<ul>\n<li>Can be used without browser</li>\n<li>Style and semantics that resemble Google Test for C++.</li>\n<li>A built-in mocking framework that requires minimal boilerplate code (e.g. no $tearDown or $verifyAll) with style and semantics based on the Google C++ Mocking Framework.</li>\n<li>No real DOM (testing of DOM interaction still possible)</li>\n<li>Currently no binaries for Windows</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>We are now using Qunit with Pavlov and JSTestDriver all together. This approach works well for us.  </p>\n\n<p><a href=\"http://qunitjs.com/\" rel=\"nofollow\">QUnit</a> </p>\n\n<p><a href=\"http://www.elijahmanor.com/bdd-style-qunit-testing-asp-net-mvcs-jquery-validation/\" rel=\"nofollow\">Pavlov</a>, <a href=\"https://github.com/mmonteleone/pavlov\" rel=\"nofollow\">source</a></p>\n\n<p><a href=\"http://slmoloch.blogspot.com/2009/08/how-to-run-jstestdriver-with-visual_02.html\" rel=\"nofollow\">jsTestDriver</a>, <a href=\"http://code.google.com/p/js-test-driver/\" rel=\"nofollow\">source</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>We added JUnit integration to our Java to Javascript code generator ST-JS (<a href=\"http://st-js.sourceforge.net\" rel=\"nofollow\">http://st-js.org</a>). The framework generates to corresponding Javascript for both the tested code and the unit tests and sends the code to different browsers. </p>\n\n<p>There is no need for a separate server as the unit test runner opens the needed http port (and closes it once the tests finished). The framework manipulates the Java stacktrace so that the failed asserts are correctly displayed by the JUnit Eclipse plugin. Here is a simple example with jQuery and Mockjax:</p>\n\n<pre><code>@RunWith(STJSTestDriverRunner.class)\n@HTMLFixture(\"&lt;div id='fortune'&gt;&lt;/div&gt;\")\n\n@Scripts({ \"classpath://jquery.js\",\n       \"classpath://jquery.mockjax.js\", \"classpath://json2.js\" })\npublic class MockjaxExampleTest {\n  @Test\n  public void myTest() {\n    $.ajaxSetup($map(\"async\", false));\n    $.mockjax(new MockjaxOptions() {\n      {\n        url = \"/restful/fortune\";\n        responseText = new Fortune() {\n          {\n            status = \"success\";\n            fortune = \"Are you a turtle?\";\n          }\n        };\n      }\n    });\n\n    $.getJSON(\"/restful/fortune\", null, new Callback3&lt;Fortune, String, JQueryXHR&gt;() {\n      @Override\n      public void $invoke(Fortune response, String p2, JQueryXHR p3) {\n        if (response.status.equals(\"success\")) {\n          $(\"#fortune\").html(\"Your fortune is: \" + response.fortune);\n        } else {\n          $(\"#fortune\").html(\"Things do not look good, no fortune was told\");\n        }\n\n      }\n    });\n    assertEquals(\"Your fortune is: Are you a turtle?\", $(\"#fortune\").html());\n  }\n\n  private static class Fortune {\n    public String status;\n    public String fortune;\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<h1>BusterJS</h1>\n\n<p>There is also <a href=\"http://busterjs.org/\">BusterJS</a> from Christian Johansen, the author of Test Driven Javascript Development and the Sinon framework. From the site:</p>\n\n<blockquote>\n  <p>Buster.JS is a new JavaScrpt testing framework. It does browser testing by automating test runs in actual browsers (think JsTestDriver), as well as Node.js testing.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 10
                }
            ],
            "body": "<p>I've looked into and considered many JavaScript unit tests and testing tools, but have been unable to find a suitable option to remain fully TDD compliant. So, is there a JavaScript unit test tool that is fully TDD compliant?</p>\n",
            "last_activity_date": 1425063059,
            "question_id": 300855,
            "score": 717,
            "tags": [
                "javascript",
                "unit-testing",
                "tdd"
            ],
            "title": "JavaScript unit test tools for TDD"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<h2>Client side</h2>\n\n<ul>\n<li>Hixie-75:\n<ul>\n<li>Chrome 4.0 + 5.0</li>\n<li>Safari 5.0.0</li>\n</ul></li>\n<li>HyBi-00/Hixie-76:\n<ul>\n<li>Chrome 6.0 - 13.0</li>\n<li>Safari 5.0.2 + 5.1</li>\n<li>iOS 4.2 + iOS 5</li>\n<li>Firefox 4.0 - <a href=\"https://developer.mozilla.org/en/WebSockets\">support for WebSockets disabled</a>. To enable it <a href=\"http://techdows.com/2010/12/turn-on-websockets-in-firefox-4.html\">see here</a>.</li>\n<li>Opera 11 - <a href=\"http://my.opera.com/ODIN/blog/2010/12/17/new-html5-features-in-opera-11\">with support disabled</a>. To enable it <a href=\"http://techdows.com/2010/12/enable-websockets-in-opera-11.html\">see here</a>.</li>\n</ul></li>\n<li>HyBi-07+:\n<ul>\n<li>Chrome 14.0</li>\n<li>Firefox 6.0 - prefixed: <code>MozWebSocket</code></li>\n<li>IE 9 - via <a href=\"http://html5labs.interoperabilitybridges.com/\">downloadable Silverlight extension</a></li>\n</ul></li>\n<li>HyBi-10:\n<ul>\n<li>Chrome 14.0 + 15.0</li>\n<li>Firefox 7.0 + 8.0 + 9.0 + 10.0 - prefixed: <code>MozWebSocket</code></li>\n<li>IE 10 (from Windows 8 developer preview)</li>\n</ul></li>\n<li>HyBi-17/RFC 6455\n<ul>\n<li>Chrome 16</li>\n<li>Firefox 11</li>\n<li>Opera 12.10 / Opera Mobile 12.1</li>\n</ul></li>\n</ul>\n\n<p>Any browser with Flash can support WebSocket using the <a href=\"https://github.com/gimite/web-socket-js\">web-socket-js</a> shim/polyfill.</p>\n\n<p>See <a href=\"http://caniuse.com/#search=websocket\">caniuse</a> for the current status of WebSockets support in desktop and mobile browsers.</p>\n\n<p>See the <a href=\"http://www.tavendo.de/autobahn/testsuite.html\">test reports</a> from the WS testsuite included in <a href=\"http://www.tavendo.de/autobahn\">Autobahn WebSockets</a> for feature/protocol conformance tests.</p>\n\n<hr>\n\n<h2>Server side</h2>\n\n<p>It depends on which language you use.</p>\n\n<p>In Java/Java EE:</p>\n\n<ul>\n<li><a href=\"http://webtide.intalio.com/2011/04/getting-started-with-websockets/\">Jetty 7.0</a> supports it (very easy to use) <code>V 7.5 supports RFC6455</code> - <a href=\"http://dev.eclipse.org/mhonarc/lists/jetty-announce/msg00060.html\">Jetty 9.1</a> supports javax.websocket / JSR 356)</li>\n<li><a href=\"http://www.java.net/blog/spericas/archive/2010/09/29/web-sockets-and-html5-glassfish\">GlassFish 3.0</a> (very low level and sometimes complex), Glassfish 3.1 has new refactored Websocket Support which is more developer friendly <code>V 3.1.2 supports RFC6455</code></li>\n<li><a href=\"http://caucho.com/resin-4.0/examples/websocket-java/index.xtp\">Caucho Resin 4.0.2</a> (not yet tried) <code>V 4.0.25 supports RFC6455</code></li>\n<li><a href=\"http://tomcat.apache.org/tomcat-7.0-doc/web-socket-howto.html\">Tomcat 7.0.27</a> now supports it <code>V 7.0.28 supports RFC6455</code></li>\n<li><a href=\"http://tomcat.apache.org/tomcat-8.0-doc/web-socket-howto.html\">Tomcat 8.x</a> has native support for websockets RFC6455 and is JSR 356 compliant</li>\n<li><a href=\"http://jcp.org/en/jsr/detail?id=356\">JSR 356 included in Java EE 7</a> will define the Java API for WebSocket, <em>but is not yet stable and complete</em>. See Arun GUPTA's article <a href=\"https://blogs.oracle.com/arungupta/entry/websockets_and_java_ee_7\">WebSocket and Java EE 7 - Getting Ready for JSR 356 (TOTD #181)</a> and <a href=\"http://www.infoq.com/presentations/Java-EE7-HTML5-Cloud\">QCon presentation</a> (from 00:37:36 to 00:46:53) for more information on progress. You can also look at <a href=\"http://websocket-sdk.java.net/\">Java websocket SDK</a>.</li>\n</ul>\n\n<p>Some other Java implementations:</p>\n\n<ul>\n<li><a href=\"http://kaazing.com/\">Kaazing Gateway</a></li>\n<li><a href=\"http://jwebsocket.org/\">jWebscoket</a></li>\n<li><a href=\"http://www.jboss.org/netty\">Netty</a></li>\n<li><a href=\"http://xlightweb.sourceforge.net/\">xLightWeb</a></li>\n<li><a href=\"http://webbitserver.org/\">Webbit</a></li>\n<li><a href=\"https://github.com/Atmosphere/atmosphere\">Atmosphere</a></li>\n<li><a href=\"http://grizzly.java.net/\">Grizzly</a></li>\n<li><a href=\"http://activemq.apache.org/\">Apache ActiveMQ</a> <code>V 5.6 supports RFC6455</code></li>\n<li><a href=\"http://camel.apache.org/\">Apache Camel</a> <code>V 2.10 supports RFC6455</code></li>\n<li><a href=\"http://www.jboss.org/hornetq/\">JBoss HornetQ</a></li>\n</ul>\n\n<p>In C#:</p>\n\n<ul>\n<li><a href=\"http://xsockets.net\">XSockets.NET</a></li>\n<li><a href=\"http://superwebsocket.codeplex.com/\">SuperWebSocket</a></li>\n<li><a href=\"http://nugget.codeplex.com/\">Nugget</a></li>\n<li><a href=\"https://github.com/Olivine-Labs/Alchemy-Websockets\">Alchemy-Websockets</a></li>\n<li><a href=\"https://github.com/statianzo/Fleck\">Fleck</a></li>\n<li><a href=\"http://signalr.net/\">SignalR</a></li>\n</ul>\n\n<p>In PHP:</p>\n\n<ul>\n<li><a href=\"http://socketo.me/\">Ratchet</a></li>\n<li><a href=\"https://github.com/GeorgeNava/phpwebsocket\">phpwebsocket</a>.</li>\n<li><a href=\"https://github.com/wkjagt/Extendible-Web-Socket-Server\">Extendible Web Socket Server</a></li>\n<li><a href=\"https://github.com/kakserpom/phpdaemon\">phpdaemon</a></li>\n</ul>\n\n<p>In Python:</p>\n\n<ul>\n<li><a href=\"http://code.google.com/p/pywebsocket/\">pywebsockets</a></li>\n<li><a href=\"https://github.com/kanaka/websockify\">websockify</a></li>\n<li><a href=\"http://pypi.python.org/pypi/gevent-websocket/\">gevent-websocket</a>, <a href=\"https://bitbucket.org/Jeffrey/gevent-socketio/src\">gevent-socketio</a> and <a href=\"http://kennethreitz.org/introducing-flask-sockets/\">flask-sockets</a> based on the former</li>\n<li><a href=\"http://autobahn.ws\">Autobahn</a></li>\n<li><a href=\"http://www.tornadoweb.org\">Tornado</a></li>\n</ul>\n\n<p>In C:</p>\n\n<ul>\n<li><a href=\"http://git.warmcat.com/cgi-bin/cgit/libwebsockets/\">libwebsockets</a></li>\n</ul>\n\n<p>In Node.js:</p>\n\n<ul>\n<li><a href=\"http://socket.io/\">Socket.io</a> : Socket.io also has serverside ports for Python, Java, Google GO, Rack</li>\n<li><a href=\"http://sockjs.org\">sockjs</a> : sockjs also has serverside ports for Python, Java, Erlang and Lua</li>\n<li><a href=\"https://github.com/Worlize/WebSocket-Node\">WebSocket-Node</a> - Pure JavaScript Client &amp; Server implementation of HyBi-10.</li>\n</ul>\n\n<p><a href=\"http://purplefox.github.com/vert.x/\">Vert.x (also known as Node.x)</a> : A node like polyglot implementation running on a Java 7 JVM and based on Netty with :</p>\n\n<ul>\n<li>Support for Ruby(JRuby), Java, Grovy, Javascript(Rhino/Nashorn), Scala, ...</li>\n<li>True threading. (unlike Node.js)</li>\n<li>Understands multiple network protocols out of the box including: TCP, SSL, UDP, HTTP, HTTPS, Websockets, <a href=\"https://github.com/sockjs/sockjs-client#readme\">SockJS</a> as fallback for WebSockets</li>\n</ul>\n\n<p><a href=\"http://pusher.com/\">Pusher.com</a> is a Websocket cloud service accessible through a REST API.</p>\n\n<p><a href=\"https://www.dotcloud.com/\">DotCloud</a> cloud platform supports Websockets, and Java (Jetty Servlet Container), NodeJS, Python, Ruby, PHP and Perl programming languages.</p>\n\n<p><a href=\"https://openshift.redhat.com/app/\">Openshift</a> cloud platform supports websockets, and Java (Jboss, Spring, Tomcat &amp; Vertx), PHP (ZendServer &amp; CodeIgniter), Ruby (ROR), Node.js, Python (Django &amp; Flask) plateforms.</p>\n\n<p>For other language implementations, <a href=\"http://en.wikipedia.org/wiki/Web_Sockets\">see the Wikipedia article for more information</a>.</p>\n\n<p>The RFC for Websockets : <a href=\"http://tools.ietf.org/html/rfc6455\">RFC6455</a></p>\n",
                    "is_accepted": false,
                    "score": 344
                }
            ],
            "body": "<p>I am going to develop an instant messaging application that runs in the browser.</p>\n\n<p>What browsers support the <a href=\"http://en.wikipedia.org/wiki/WebSocket\">WebSocket API</a>?</p>\n",
            "last_activity_date": 1398785133,
            "question_id": 1253683,
            "score": 278,
            "tags": [
                "javascript",
                "web-applications",
                "html5",
                "network-programming",
                "websocket"
            ],
            "title": "What browsers support HTML5 WebSocket API?"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>There is an \"onunload\" parameter for the body tag you can call javascript functions from there. If it returns false it prevents navigating away.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>When the user starts making changes to the form, a boolean flag will be set. If the user then tries to navigate away from the page, you check that flag in the <a href=\"http://www.webreference.com/dhtml/diner/beforeunload/bunload2.html\" rel=\"nofollow\">window.onunload</a> event. If the flag is set, you show the message by returning it as a string. Returning the message as a string will popup a confirmation dialog containing your message.</p>\n\n<p>If you are using ajax to commit the changes, you can set the flag to <code>false</code> after the changes have been committed (i.e. in the ajax success event).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can add an <code>onchange</code> event on the textarea (or any other fields) that set a variable in JS. When the user attempts to close the page (window.onunload) you check the value of that variable and show the alert accordingly. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h2>Update (2013)</h2>\n\n<p>The orginal answer is suitable for IE6-8 and FX1-3.5 (which is what we were targeting back in 2009 when it was written), but is rather out of date now and won't work in most current browsers - I've left it below for reference.</p>\n\n<p>The <code>window.onbeforeunload</code> is not treated consistently by all browsers. It should be a function reference and not a string (as the original answer stated) but that will work in older browsers because the check for most of them appears to be whether anything is assigned to <code>onbeforeunload</code> (including a function that returns <code>null</code>).</p>\n\n<p>You set <code>window.onbeforeunload</code> to a function reference, but in older browsers you have to set the <code>returnValue</code> of the event instead of just returning a string:</p>\n\n<pre><code>var confirmOnPageExit = function (e) \n{\n    // If we haven't been passed the event get the window.event\n    e = e || window.event;\n\n    var message = 'Any text will block the navigation and display a prompt';\n\n    // For IE6-8 and Firefox prior to version 4\n    if (e) \n    {\n        e.returnValue = message;\n    }\n\n    // For Chrome, Safari, IE8+ and Opera 12+\n    return message;\n};\n</code></pre>\n\n<p>You can't have that <code>confirmOnPageExit</code> do the check and return null if you want the user to continue without the message. You still need to remove the event to reliably turn it on and off:</p>\n\n<pre><code>// Turn it on - assign the function that returns the string\nwindow.onbeforeunload = confirmOnPageExit;\n\n// Turn it off - remove the function entirely\nwindow.onbeforeunload = null;\n</code></pre>\n\n<h2>Original answer (worked in 2009)</h2>\n\n<p>To turn it on:</p>\n\n<pre><code>window.onbeforeunload = \"Are you sure you want to leave?\";\n</code></pre>\n\n<p>To turn it off:</p>\n\n<pre><code>window.onbeforeunload = null;\n</code></pre>\n\n<p>Bear in mind that this isn't a normal event - you can't bind to it in the standard way.</p>\n\n<p>To check for values? That depends on your validation framework.</p>\n\n<p>In jQuery this could be something like (very basic example):</p>\n\n<pre><code>$('input').change(function() {\n    if( $(this).val() != \"\" )\n        window.onbeforeunload = \"Are you sure you want to leave?\";\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 117
                },
                {
                    "body": "<p>What you want to use is the onunload event in JavaScript.</p>\n\n<p>Here is an example: <a href=\"http://www.w3schools.com/jsref/event_onunload.asp\" rel=\"nofollow\">http://www.w3schools.com/jsref/event_onunload.asp</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p><a href=\"http://jonstjohn.com/node/23\">With JQuery</a> this stuff is pretty easy to do. Since you can bind to sets. </p>\n\n<p>Its NOT enough to do the onbeforeunload, you want to only trigger the navigate away if someone started editing stuff.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>It can be easily done by setting a <strong>ChangeFlag</strong> to true, on <strong>onChange</strong> event of <strong>TextArea</strong>. Use javascript to show <strong>confirm</strong> dialog box based on the <strong>ChangeFlag</strong> value. Discard the form and navigate to requested page if <strong>confirm</strong> returns true, else <strong>do-nothing</strong>.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>The <code>onbeforeunload</code> Microsoft-ism is the closest thing we have to a standard solution, but be aware that browser support is uneven; e.g. for Opera it only works in version 12 and later (still in beta as of this writing).</p>\n\n<p>Also, for <strong>maximum compatibility</strong>, you need to do more than simply return a string, as explained on the <a href=\"https://developer.mozilla.org/en/DOM/window.onbeforeunload\">Mozilla Developer Network</a>.</p>\n\n<p><strong>Example:</strong> Define the following two functions for enabling/disabling the navigation prompt (cf. the MDN example):</p>\n\n<pre><code>function enableBeforeUnload() {\n    window.onbeforeunload = function (e) {\n        return \"Discard changes?\";\n    };\n}\nfunction disableBeforeUnload() {\n    window.onbeforeunload = null;\n}\n</code></pre>\n\n<p>Then define a form like this:</p>\n\n<pre><code>&lt;form method=\"POST\" action=\"\" onsubmit=\"disableBeforeUnload();\"&gt;\n    &lt;textarea name=\"text\"\n              onchange=\"enableBeforeUnload();\"\n              onkeyup=\"enableBeforeUnload();\"&gt;\n    &lt;/textarea&gt;\n    &lt;button type=\"submit\"&gt;Save&lt;/button&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>This way, the user will only be warned about navigating away if he has changed the text area, and will not be prompted when he's actually submitting the form.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>To make this work in Chrome and Safari, you would have to do it like this</p>\n\n<pre><code>window.onbeforeunload = function(e) {\n    return \"Sure you want to leave?\";\n};\n</code></pre>\n\n<p>Reference: <a href=\"https://developer.mozilla.org/en/DOM/window.onbeforeunload\">https://developer.mozilla.org/en/DOM/window.onbeforeunload</a></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>jquerys 'beforeunload' worked great for me</p>\n\n<pre><code>$(window).bind('beforeunload', function(){\n    if( $('input').val() !== '' ){\n        return \"It looks like you have input you haven't submitted.\"\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Based on all the answers on this thread, I wrote the following code and it worked for me.  </p>\n\n<p>If you have only some input/textarea tags which requires an onunload event to be checked, you can assign HTML5 data-attributes as <code>data-onunload=\"true\"</code></p>\n\n<p>for eg.</p>\n\n<pre><code>&lt;input type=\"text\" data-onunload=\"true\" /&gt;\n&lt;textarea data-onunload=\"true\"&gt;&lt;/textarea&gt;\n</code></pre>\n\n<p>and the Javascript (jQuery) can look like this :</p>\n\n<pre><code>$(document).ready(function(){\n    window.onbeforeunload = function(e) {\n        var returnFlag = false;\n        $('textarea, input').each(function(){\n            if($(this).attr('data-onunload') == 'true' &amp;&amp; $(this).val() != '')\n                returnFlag = true;\n        });\n\n        if(returnFlag)\n            return \"Sure you want to leave?\";   \n    };\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is an easy way to present the message if any data is input into the form, and not to show the message if the form is submitted:</p>\n\n<pre><code>$(function () {\n    $(\"input, textarea, select\").on(\"input change\", function() {\n        window.onbeforeunload = window.onbeforeunload || function (e) {\n            return \"You have unsaved changes.  Do you want to leave this page and lose your changes?\";\n        };\n    });\n    $(\"form\").on(\"submit\", function() {\n        window.onbeforeunload = null;\n    });\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here try this it works 100%  </p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;script&gt;\nvar warning = true;\nwindow.onbeforeunload = function() {  \n  if (warning) {  \n    return \"You have made changes on this page that you have not yet confirmed. If you navigate away from this page you will lose your unsaved changes\";  \n    }  \n}\n\n$('form').submit(function() {\n   window.onbeforeunload = null;\n});\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>for new people who is looking for a simple solution, just try <a href=\"https://github.com/codedance/jquery.AreYouSure\" rel=\"nofollow\">Areyousure.js</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>To expand on <a href=\"http://stackoverflow.com/a/1119324/811240\">Keith's already amazing answer</a>:</p>\n\n<h2>Custom warning messages</h2>\n\n<p>To allow custom warning messages, you can wrap it in a function like this:</p>\n\n<pre><code>function preventNavigation(message) {\n    var confirmOnPageExit = function (e) {\n        // If we haven't been passed the event get the window.event\n        e = e || window.event;\n\n        // For IE6-8 and Firefox prior to version 4\n        if (e)\n        {\n            e.returnValue = message;\n        }\n\n        // For Chrome, Safari, IE8+ and Opera 12+\n        return message;\n    };\n    window.onbeforeunload = confirmOnPageExit;\n}\n</code></pre>\n\n<p>Then just call that function with your custom message:</p>\n\n<pre><code>preventNavigation(\"Baby, please don't go!!!\");\n</code></pre>\n\n<h2>Enabling navigation again</h2>\n\n<p>To re-enable navigation, all you need to do is set <code>window.onbeforeunload</code> to <code>null</code>. Here it is, wrapped in a neat little function that can be called anywhere:</p>\n\n<pre><code>function enableNavigation() {\n    window.onbeforeunload = null;\n}\n</code></pre>\n\n<h2>Using jQuery to bind this to form elements</h2>\n\n<p>If using jQuery, this can easily be bound to all of the elements of a form like this:</p>\n\n<pre><code>$(\"#yourForm :input\").change(function() {\n    preventNavigation(\"You have not saved the form. Any \\\n        changes will be lost if you leave this page.\");\n});\n</code></pre>\n\n<p>Then to allow the form to be submitted:</p>\n\n<pre><code>$(\"#yourForm\").on(\"submit\", function(event) {\n    enableNavigation();\n});\n</code></pre>\n\n<h2>Dynamically-modified forms:</h2>\n\n<p><code>preventNavigation()</code> and <code>enableNavigation()</code> can be bound to any other functions as needed, such as dynamically modifying a form, or clicking on a button that sends an AJAX request. I did this by adding a hidden input element to the form:</p>\n\n<pre><code>&lt;input id=\"dummy_input\" type=\"hidden\" /&gt;\n</code></pre>\n\n<p>Then any time I want to prevent the user from navigating away, I trigger the change on that input to make sure that <code>preventNavigation()</code> gets executed:</p>\n\n<pre><code>function somethingThatModifiesAFormDynamically() {\n\n    // Do something that modifies a form\n\n    // ...\n    $(\"#dummy_input\").trigger(\"change\");\n    // ...\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>here is my html  </p>\n\n<pre><code>&lt;!DOCTYPE HMTL&gt;\n&lt;meta charset=\"UTF-8\"&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;Home&lt;/title&gt;\n&lt;script type=\"text/javascript\" src=\"script.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n\n &lt;body onload=\"myFunction()\"&gt;\n    &lt;h1 id=\"belong\"&gt;\n        Welcome To My Home\n    &lt;/h1&gt;\n    &lt;p&gt;\n        &lt;a id=\"replaceME\" onclick=\"myFunction2(event)\" href=\"https://www.ccis.edu\"&gt;I am a student at Columbia College of Missouri.&lt;/a&gt;\n    &lt;/p&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p></p>\n\n<p>And so this is how I did something similar in javaScript</p>\n\n<pre><code>var myGlobalNameHolder =\"\";\n\nfunction myFunction(){\nvar myString = prompt(\"Enter a name\", \"Name Goes Here\");\n    myGlobalNameHolder = myString;\n    if (myString != null) {\n        document.getElementById(\"replaceME\").innerHTML =\n        \"Hello \" + myString + \". Welcome to my site\";\n\n        document.getElementById(\"belong\").innerHTML =\n        \"A place you belong\";\n    }   \n}\n\n// create a function to pass our event too\nfunction myFunction2(event) {   \n// variable to make our event short and sweet\nvar x=window.onbeforeunload;\n// logic to make the confirm and alert boxes\nif (confirm(\"Are you sure you want to leave my page?\") == true) {\n    x = alert(\"Thank you \" + myGlobalNameHolder + \" for visiting!\");\n}\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Here in stackoverflow, if you started to make changes then you attempt to navigate away from the page, a javascript confirm button shows up and asks: \"Are you sure you want to navigate away from this page?\" blee blah bloo...</p>\n\n<p>Has anyone implemented this before, how do I track that changes were committed?\nI believe I could do this myself, I am trying to learn the good practices from you the experts.</p>\n\n<p>I tried the following but still doesn't work:</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n    &lt;p&gt;Close the page to trigger the onunload event.&lt;/p&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var changes = false;        \n        window.onbeforeunload = function() {\n            if (changes)\n            {\n                var message = \"Are you sure you want to navigate away from this page?\\n\\nYou have started writing or editing a post.\\n\\nPress OK to continue or Cancel to stay on the current page.\";\n                if (confirm(message)) return true;\n                else return false;\n            }\n        }\n    &lt;/script&gt;\n\n    &lt;input type='text' onchange='changes=true;'&gt; &lt;/input&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Can anyone post an example?</p>\n",
            "last_activity_date": 1424333644,
            "question_id": 1119289,
            "score": 108,
            "tags": [
                "javascript",
                "html",
                "message",
                "onbeforeunload",
                "confirm"
            ],
            "title": "How to show the &quot;Are you sure you want to navigate away from this page?&quot; when changes committed?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>jQuery is just wrapping the standard <code>resize</code> DOM event, eg.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>window.onresize = function(event) {\n    ...\n};\n</code></pre>\n\n<p>jQuery <em>may</em> do some work to ensure that the resize event gets fired consistently in all browsers, but I'm not sure if any of the browsers differ, but I'd encourage you to test in Firefox, Safari, and IE.</p>\n",
                    "is_accepted": true,
                    "score": 284
                },
                {
                    "body": "<p>The following blog post may be useful to you: <a href=\"http://mbccs.blogspot.com/2007/11/fixing-window-resize-event-in-ie.html\" rel=\"nofollow\">Fixing the window resize event in IE</a></p>\n\n<p>It provides this code:</p>\n\n<blockquote>\n<pre><code>Sys.Application.add_load(function(sender, args) {\n    $addHandler(window, 'resize', window_resize);\n});\n\nvar resizeTimeoutId;\n\nfunction window_resize(e) {\n     window.clearTimeout(resizeTimeoutId);\n     resizeTimeoutId = window.setTimeout('doResizeCode();', 10);\n}\n</code></pre>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre class=\"lang-js prettyprint-override\"><code>window.onresize = function() {\n    // your code\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Thanks for referencing my blog post at <a href=\"http://mbccs.blogspot.com/2007/11/fixing-window-resize-event-in-ie.html\">http://mbccs.blogspot.com/2007/11/fixing-window-resize-event-in-ie.html</a>.</p>\n\n<p>While you can just hook up to the standard window resize event, you'll find that in IE, the event is fired once for every X and once for every Y axis movement, resulting in a ton of events being fired which might have a performance impact on your site if rendering is an intensive task.</p>\n\n<p>My method involves a short timeout that gets cancelled on subsequent events so that the event doesn't get bubbled up to your code until the user has finished resizing the window.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Never override the window.onresize function.</p>\n\n<p>Instead, create a function to add an Event Listener to the object or element.\nThis checks and incase the listeners don't work, then it overrides the object's function as a last resort. This is the preferred method used in libraries such as jQuery.</p>\n\n<pre><code>var addEvent = function(elem, type, eventHandle) {\n    if (elem == null || typeof(elem) == 'undefined') return;\n    if ( elem.addEventListener ) {\n        elem.addEventListener( type, eventHandle, false );\n    } else if ( elem.attachEvent ) {\n        elem.attachEvent( \"on\" + type, eventHandle );\n    } else {\n        elem[\"on\"+type]=eventHandle;\n    }\n};\n</code></pre>\n\n<p>Then use is like this:</p>\n\n<pre><code>addEvent(window, \"resize\", function_reference);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 144
                },
                {
                    "body": "<pre><code>&lt;script language=\"javascript\"&gt;\n    window.onresize = function() {\n    document.getElementById('ctl00_ContentPlaceHolder1_Accordion1').style.height = '100%';\n} \n\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>First off, I know the <code>addEventListener</code> method has been mentioned in the comments above, but I didn't see any code. Since it's the preferred approach, here it is:</p>\n\n<pre><code>window.addEventListener('resize', function(event){\n  // do stuff here\n});\n</code></pre>\n\n<p><a href=\"http://codepen.io/jondlm/pen/doijJ\">Here's a working sample</a>.</p>\n",
                    "is_accepted": false,
                    "score": 85
                },
                {
                    "body": "<p>The already mentioned solutions above will work if all you want to do is resize the window and window only. However, if you want to have the resize propagated to child elements, you will need to propagate the event yourself. Here's some example code to do it:</p>\n\n<pre><code>window.addEventListener(\"resize\", function () {\n  var recResizeElement = function (root) {\n    Array.prototype.forEach.call(root.childNodes, function (el) {\n\n      var resizeEvent = document.createEvent(\"HTMLEvents\");\n      resizeEvent.initEvent(\"resize\", false, true);\n      var propagate = el.dispatchEvent(resizeEvent);\n\n      if (propagate)\n        recResizeElement(el);\n    });\n  };\n  recResizeElement(document.body);\n});\n</code></pre>\n\n<p>Note that a child element can call</p>\n\n<pre><code> event.preventDefault();\n</code></pre>\n\n<p>on the event object that is passed in as the first Arg of the resize event. For example:</p>\n\n<pre><code>var child1 = document.getElementById(\"child1\");\nchild1.addEventListener(\"resize\", function (event) {\n  ...\n  event.preventDefault();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var child1 = document.getElementById(\"child1\");\r\nchild1.addEventListener(\"resize\", function (event) {\r\n  ...\r\n  event.preventDefault();\r\n});</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>/*\r\n\r\nResponsive Mobile Menu v1.0\r\nPlugin URI: responsivemobilemenu.com\r\n\r\nAuthor: Sergio Vitov\r\nAuthor URI: http://xmacros.com\r\n\r\nLicense: CC BY 3.0 http://creativecommons.org/licenses/by/3.0/\r\n\r\n*/\r\n\r\nfunction responsiveMobileMenu() {\t\r\n\t\t$('.rmm').each(function() {\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t$(this).children('ul').addClass('rmm-main-list');\t// mark main menu list\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tvar $style = $(this).attr('data-menu-style');\t// get menu style\r\n\t\t\t\tif ( typeof $style == 'undefined' ||  $style == false )\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t$(this).addClass('graphite'); // set graphite style if style is not defined\r\n\t\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\t\t$(this).addClass($style);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t/* \twidth of menu list (non-toggled) */\r\n\t\t\t\r\n\t\t\tvar $width = 0;\r\n\t\t\t\t$(this).find('ul li').each(function() {\r\n\t\t\t\t\t$width += $(this).outerWidth();\r\n\t\t\t\t});\r\n\t\t\t\t\r\n\t\t\t// if modern browser\r\n\t\t\t\r\n\t\t\tif ($.support.leadingWhitespace) {\r\n\t\t\t\t$(this).css('max-width' , $width*1.05+'px');\r\n\t\t\t}\r\n\t\t\t// \r\n\t\t\telse {\r\n\t\t\t\t$(this).css('width' , $width*1.05+'px');\r\n\t\t\t}\r\n\t\t\r\n\t \t});\r\n}\r\nfunction getMobileMenu() {\r\n\r\n\t/* \tbuild toggled dropdown menu list */\r\n\t\r\n\t$('.rmm').each(function() {\t\r\n\t\t\t\tvar menutitle = $(this).attr(\"data-menu-title\");\r\n\t\t\t\tif ( menutitle == \"\" ) {\r\n\t\t\t\t\tmenutitle = \"\";\r\n\t\t\t\t}\r\n\t\t\t\telse if ( menutitle == undefined ) {\r\n\t\t\t\t\tmenutitle = \"\";\r\n\t\t\t\t}\r\n\t\t\t\tvar $menulist = $(this).children('.rmm-main-list').html();\r\n\t\t\t\tvar $menucontrols =\"&lt;div class='rmm-toggled-controls'&gt;&lt;div class='rmm-toggled-title'&gt;\" + menutitle + \"&lt;/div&gt;&lt;div class='rmm-button'&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;span&gt;&amp;nbsp;&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;\";\r\n\t\t\t\t$(this).prepend(\"&lt;div class='rmm-toggled rmm-closed'&gt;\"+$menucontrols+\"&lt;ul&gt;\"+$menulist+\"&lt;/ul&gt;&lt;/div&gt;\");\r\n\r\n\t\t});\r\n}\r\n\r\nfunction adaptMenu() {\r\n\t\r\n\t/* \ttoggle menu on resize */\r\n\t\r\n\t$('.rmm').each(function() {\r\n\t\t\tvar $width = $(this).css('max-width');\r\n\t\t\t$width = $width.replace('px', ''); \r\n\t\t\tif ( $(this).parent().width() &lt; $width*1.05 ) {\r\n\t\t\t\t$(this).children('.rmm-main-list').hide(0);\r\n\t\t\t\t$(this).children('.rmm-toggled').show(0);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\t$(this).children('.rmm-main-list').show(0);\r\n\t\t\t\t$(this).children('.rmm-toggled').hide(0);\r\n\t\t\t}\r\n            var device = device_detection();\r\n            if ( device == 'phone' ){\r\n            var menu  = $(this).find('.rmm-toggled ul'),\r\n                 headH = $('.ha-header-front').height();\r\n                 menu.css( 'max-height',$(window).height() - headH );\r\n            }\r\n\t\t});\r\n\t\t\r\n}\r\n\r\n$(function() {\r\n\r\n\t responsiveMobileMenu();\r\n\t getMobileMenu();\r\n\t adaptMenu();\r\n\t \r\n\t /* slide down mobile menu on click */\r\n\t \r\n\t $('.rmm-toggled, .rmm-toggled .rmm-button').click(function(){\r\n\t \tif ( $(this).is(\".rmm-closed\")) {\r\n\t\t \t $(this).find('ul').stop().show(300);\r\n\t\t \t $(this).removeClass(\"rmm-closed\");\r\n\t \t}\r\n\t \telse {\r\n\t\t \t$(this).find('ul').stop().hide(300);\r\n\t\t \t $(this).addClass(\"rmm-closed\");\r\n\t \t}\r\n\t\t\r\n\t});\t\r\n\r\n});\r\n\t/* \thide mobile menu on resize */\r\n$(window).resize(function() {\r\n \tadaptMenu();\r\n});</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"res-button\"&gt;\r\n&lt;img src=\"images/sidebar-toggler-blue.jpg\" /&gt;\r\n&lt;/div&gt;\r\n&lt;div class=\"sidebar-nav\"&gt;\r\n\t\t\t\t\t\t\r\n                    \t&lt;ul class=\"list-components\"&gt;\r\n                        &lt;li class=\"&lt;?php echo $filename=='home.php' ? 'active' : ''; ?&gt;\"&gt;\r\n                        &lt;a href=\"home.php\"&gt;&lt;i class=\"icon icon-briefcase\"&gt;&lt;/i&gt; &lt;?php echo $lang['22']['li-1']?&gt;&lt;/a&gt;\r\n                        &lt;/li&gt;\r\n                        \t&lt;li class=\"&lt;?php echo $filename=='profile.php' ? 'active' : ''; ?&gt;\"&gt;\r\n                            &lt;a href=\"profile.php\"&gt;&lt;i class=\"icon-user\"&gt;&lt;/i&gt; &lt;?php echo $lang['22']['li-2']?&gt;&lt;/a&gt;\r\n                            &lt;/li&gt;\r\n                            &lt;li class=\"&lt;?php echo $filename=='domains.php' ? 'active' : ''; ?&gt;\"&gt;\r\n                            &lt;a href=\"domains.php\"&gt;&lt;i class=\"icon-bitbucket\"&gt;&lt;/i&gt; &lt;?php echo $lang['22']['li-3']?&gt;&lt;/a&gt;\r\n                            &lt;/li&gt;\r\n                            &lt;li class=\"&lt;?php echo $filename=='templates.php' ? 'active' : ''; ?&gt;\"&gt;\r\n                            &lt;a href=\"templates.php\"&gt;&lt;i class=\"icon-picture\"&gt;&lt;/i&gt; &lt;?php echo $lang['22']['li-4']?&gt;&lt;/a&gt;\r\n                            &lt;/li&gt;\r\n                            &lt;li class=\"&lt;?php echo $filename=='prod_delivery.php' ? 'active' : ''; ?&gt;\"&gt;\r\n                            &lt;a href=\"prod_delivery.php\"&gt;&lt;i class=\" icon-truck\"&gt;&lt;/i&gt; &lt;?php echo $lang['22']['li-5']?&gt;&lt;/a&gt;\r\n                            &lt;/li&gt;\r\n                            &lt;li class=\"&lt;?php echo $filename=='online_marketing.php' ? 'active' : ''; ?&gt;\"&gt;\r\n                            &lt;a href=\"online_marketing.php\"&gt;&lt;i class=\" icon-plane\"&gt;&lt;/i&gt; Online Marketing Service&lt;/a&gt;\r\n                            &lt;/li&gt;\r\n                            &lt;li class=\"&lt;?php echo $filename=='pic-service.php' ? 'active' : ''; ?&gt;\"&gt;\r\n                            &lt;a href=\"pic-service.php\"&gt;&lt;i class=\" icon-copy\"&gt;&lt;/i&gt; Picture Service&lt;/a&gt;\r\n                            &lt;/li&gt;\r\n                            &lt;li class=\"&lt;?php echo $filename=='accounts.php' ? 'active' : ''; ?&gt;\"&gt;\r\n                            &lt;a href=\"accounts.php\"&gt;&lt;i class=\"icon-edit\"&gt;&lt;/i&gt; &lt;?php echo $lang['22']['li-6']?&gt;&lt;/a&gt;\r\n                            &lt;/li&gt;\r\n                             &lt;li class=\"&lt;?php echo $filename=='chngpass.php' ? 'active' : ''; ?&gt;\"&gt;\r\n                             &lt;a href=\"chngpass.php\"&gt;&lt;i class=\"icon-key\"&gt;&lt;/i&gt; &lt;?php echo $lang['22']['li-7']?&gt;&lt;/a&gt;\r\n                             &lt;/li&gt;\r\n                            &lt;li class=\"&lt;?php echo $filename=='sendmail.php' ? 'active' : ''; ?&gt;\"&gt;\r\n                            &lt;a href=\"sendmail.php\"&gt;&lt;i class=\"icon-envelope\"&gt;&lt;/i&gt; &lt;?php echo $lang['22']['li-8']?&gt;&lt;/a&gt;\r\n                            &lt;/li&gt;\r\n                            &lt;li&gt;&lt;a href=\"?logout=logout\"&gt;&lt;i class=\"icon-off\"&gt;&lt;/i&gt; &lt;?php echo $lang['22']['li-9']?&gt;&lt;/a&gt;&lt;/li&gt;\r\n                        &lt;/ul&gt;\r\n                    &lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I tried using saravanakumar's answer to this problem. the first section of the code works fine and detects and loads a seperate set of pages depending on browser window size for smartphones etc.</p>\n\n<p>When I add the resize function there is no effect when I resize browser window.</p>\n\n<pre><code> &lt;script type=\"text/javascript\"&gt; \n</code></pre>\n\n<hr>\n\n<h2><em>This function works fine</em></h2>\n\n<pre><code>  function viewPort() {\n    var h = window.innerHeight \n           || document.documentElement.clientHeight \n           || document.getElementsByTagName('body')[0].clientHeight;\n    var w = window.innerWidth \n            || document.documentElement.clientWidth \n            || document.getElementsByTagName('body')[0].clientWidth;\n\n    return {width : w, height : h};\n    }\n\n    var size = viewPort();\n    if ( size.width &lt;= 690) {\n\n      window.location.href = \"mypage.cfm?Wth=\" + size.width + + size.height + \"\";\n    }\n</code></pre>\n\n<hr>\n\n<h2><em>This where i call in the resize function</em></h2>\n\n<pre><code>window.onresize = function() {\nfunction viewPort() {\n    var h = window.innerHeight \n           || document.documentElement.clientHeight \n           || document.getElementsByTagName('body')[0].clientHeight;\n    var w = window.innerWidth \n            || document.documentElement.clientWidth \n            || document.getElementsByTagName('body')[0].clientWidth;\n\n    return {width : w, height : h};\n    }\n\n    var size = viewPort();\n    if ( size.width &lt;= 690) {\n\n      window.location.href = \"mypage.cfm?Wth=\" + size.width + + size.height + \"\";\n    }\n };\n &lt;/script&gt;      \n</code></pre>\n\n<p>Note that mypage.cfm is just reloading itself with the variables for browser size if under specified size.</p>\n\n<p>Thanks in advance,\nandy</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How can I hook into a browser window resize event?</p>\n\n<p>There's <a href=\"http://stackoverflow.com/questions/599288/cross-browser-window-resize-event-javascript-jquery\">a jQuery way of listening for resize events</a> but I would prefer not to bring it into my project for just this one requirement.</p>\n",
            "last_activity_date": 1416445981,
            "question_id": 641857,
            "score": 199,
            "tags": [
                "javascript"
            ],
            "title": "JavaScript window resize event"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>It sure works in firefox and ie8. I can't see that there'd be any browser it wouldn't work in. This is pretty much fundamental of how javascript works, even though one don't often see it used with native functions like that =)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I think every Javascript implementation will support this, and there is no danger involved with it.  It's commonly done to replace the plain OS-styled alert boxes to something more elegant with HTML/CSS.  Doing it this way means you don't have to change existing code!  The fact that it is possible makes Javascript awesome.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>All JavaScript implementations in modern browsers support overriding.</p>\n\n<p>The dangers are quite simply, that you would drive other team members absolutely crazy by overriding commonly known functions such as alert(). </p>\n\n<p>So unless you are overriding functions as a tool to perhaps debug or hack existing code in some way, I don't see any reason to do it. Just create a new function.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>When it comes to js browser functions <code>window.alert</code> is pre-eminent and most well known, people who don't know js know <code>alert()</code> -- rest assured it is supported in all browsers <em>in use today</em> and your code snippet is as well. However, I wouldn't override (well this is more like refactoring rather than override in the OOP sense) <code>alert()</code> for a particular use case as yours because when you actually need to use <code>alert()</code> with no template, and you probably will, then you'll need another non-alert function to do so. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It's definitely \"supported\". It is your web page, you do whatever you want to with it.</p>\n\n<p>I already did this to track analytics events without modifying a library but by sneaking into events.</p>\n\n<p>Use the proxy pattern:</p>\n\n<pre><code>(function() {\n  var proxied = window.alert;\n  window.alert = function() {\n    // do something here\n    return proxied.apply(this, arguments);\n  };\n})();\n</code></pre>\n\n<p>You can also bypass the call to the original function if you want</p>\n\n<p>More info here: <a href=\"http://docs.jquery.com/Types#Proxy_Pattern\">JQuery Types #Proxy Pattern</a></p>\n",
                    "is_accepted": true,
                    "score": 125
                },
                {
                    "body": "<p>My experience with overriding alert() function is that we once used it to \"hack\" trial version of JavaScript library that displayed \"Please register!\" nag screen through alert time to time.</p>\n\n<p>We just defined our own alert() function and voila.</p>\n\n<p>It was for testing purposes only, we bought full version later, so nothing immoral going on here ;-)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There are no dangers in Overring alert function. Every browser supprts it.</p>\n\n<p>for example:</p>\n\n<pre><code>// function over riding. Redirecting to Console with Firebug installed.\nfunction alert(message) { \n    console.info(message);\n} \n\nalert('This is an override.');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Although most browsers support overriding it, be careful with what you're doing with it.</p>\n\n<p>Since the default alert box blocks the execution thread, some libraries that rely on this behaviour might not work anymore (at best).</p>\n\n<p>You should be a good citizen and avoid touching the native API. If you do, you could break things up, when using 3rd party code.</p>\n\n<p>Yet, if you want to redefine the alert behaviour in a specific context, you could enclose it with an anonymous function, like this:</p>\n\n<pre><code>/* new funky alert */\nfunction myFunkyAlert(msg) { \n    /* here goes your funky alert implementation */\n    alert(\"Look ma!\\n\" + msg);\n}\n\n(function(alert) { // anonymous function redefining the \"alert\"\n\n    /* sample code */\n    alert(\"Hello World!\");\n\n})(myFunkyAlert);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Ladislav.<br/>\nFor IE8 you can redefine alert() like this way</p>\n\n<pre><code>/** \n * Definition of global attached to window properties &lt;br/&gt;\n */ \n    (function() {\n      nalert = window.alert;\n      Type = {\n          native: 'native',\n          custom: 'custom'\n      };\n    })();\n\n/**\n * Factory method for calling alert(). \n * It will be call a native alert() or a custom redefined alert() by a Type param.\n * This defeinition need for IE\n */ \n    (function(proxy) {\n\n          proxy.alert = function () {\n          var message = (!arguments[0]) ? 'null': arguments[0];\n          var type = (!arguments[1]) ? '': arguments[1];\n\n          if(type &amp;&amp; type == 'native') {\n           nalert(message);\n          }\n          else {\n               document.write('&lt;h1&gt;I am redefiend alert()&lt;br/&gt;Alert say: '+message+'&lt;/h1&gt;');\n          }     \n      };\n   })(this);\n</code></pre>\n\n<p>and call as </p>\n\n<pre><code>alert('Hello, hacker!');\nnalert('I am native alert');\nalert('Hello, user!', Type.custom);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>As said in many of the other answers, you can just override the function with</p>\n\n<pre><code>window.alert = null\n</code></pre>\n\n<p>or</p>\n\n<pre><code>window.alert = function(){}\n</code></pre>\n\n<p>however, this doesn't necessarily override the function on the prototype of the <code>Window</code> constructor (note the capital <code>W</code>), so the hacker can still type:</p>\n\n<pre><code>Window.prototype.alert.apply(window, [\"You were hacked!\"]);\n</code></pre>\n\n<p>therefore, you also need to override that function with:</p>\n\n<pre><code>Window.prototype.alert = null\n</code></pre>\n\n<p>or</p>\n\n<pre><code>Window.prototype.alert = function(){}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>Has anyone got any experience with overriding the <code>alert()</code> function in JavaScript?</p>\n\n<ul>\n<li>Which browsers support this?</li>\n<li>Which browser-versions support this?</li>\n<li>What are the dangers in overriding the function?</li>\n</ul>\n",
            "last_activity_date": 1393123454,
            "question_id": 1729501,
            "score": 127,
            "tags": [
                "javascript",
                "override"
            ],
            "title": "JavaScript: Overriding alert()"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>What you want to do is use Page.RegisterStartupScript(key, script) \n:</p>\n\n<p>See here for more details: <a href=\"http://msdn.microsoft.com/en-us/library/aa478975.aspx\" rel=\"nofollow\">http://msdn.microsoft.com/en-us/library/aa478975.aspx</a></p>\n\n<p>What you basically do is build your javascript string, pass it to that method and give it a unique id( in case you try to register it twice on a page.)</p>\n\n<p>EDIT: This is what you call trigger happy. Feel free to down it. :)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can always use a \"DocumentStream\" or \"DocumentText\" property.\nFor working with HTML documents I recommend a <a href=\"http://www.codeplex.com/htmlagilitypack\" rel=\"nofollow\">HTML Agility Pack</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The managed wrapper for the HTML document doesn't completely implement the functionality you need, so you need to dip into the MSHTML API to accomplish what you want:</p>\n\n<p>1) Add a reference to MSHTML, which will probalby be called \"Microsoft HTML Object Library\" under <em>COM</em> references.</p>\n\n<p>2) Add 'using mshtml;' to your namespaces.</p>\n\n<p>3) Get a reference to your script element's IHTMLElement:</p>\n\n<pre><code>IHTMLElement iScriptEl = (IHTMLElement)scriptEl.DomElement;\n</code></pre>\n\n<p>4) Call the insertAdjacentText method, with the first parameter value of \"afterBegin\".  All the possible values are listed <a href=\"http://msdn.microsoft.com/en-us/library/aa170712(office.11).aspx\" rel=\"nofollow\">here</a>:</p>\n\n<pre><code>iScriptEl.insertAdjacentText(\"afterBegin\", \"function sayHello() { alert('hello') }\");\n</code></pre>\n\n<p>5) Now you'll be able to see the code in the scriptEl.InnerText property.</p>\n\n<p>Hth,\nRichard</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>For some reason Richard's solution didn't work on my end (insertAdjacentText failed with an exception). This however seems to work:</p>\n\n<pre><code>HtmlElement head = webBrowser1.Document.GetElementsByTagName(\"head\")[0];\nHtmlElement scriptEl = webBrowser1.Document.CreateElement(\"script\");\nIHTMLScriptElement element = (IHTMLScriptElement)scriptEl.DomElement;\nelement.text = \"function sayHello() { alert('hello') }\";\nhead.AppendChild(scriptEl);\nwebBrowser1.Document.InvokeScript(\"sayHello\");\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 66
                },
                {
                    "body": "<p>If all you really want is to run javascript, this would be easiest (VB .Net):</p>\n\n<pre><code>MyWebBrowser.Navigate(\"javascript:function foo(){alert('hello');}foo();\")\n</code></pre>\n\n<p>I guess that this wouldn't \"inject\" it but it'll run your function, if that's what you're after.  (Just in case you've over-complicated the problem.)  And if you can figure out how to inject in javascript, put that into the body of the function \"foo\" and let the javascript do the injection for you.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Also, in .NET 4 this is even easier if you use the dynamic keyword:</p>\n\n<pre><code>dynamic document = this.browser.Document;\ndynamic head = document.GetElementsByTagName(\"head\")[0];\ndynamic scriptEl = document.CreateElement(\"script\");\nscriptEl.text = ...;\nhead.AppendChild(scriptEl);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>this is a solution using mshtml</p>\n\n<pre><code>IHTMLDocument2 doc = new HTMLDocumentClass();\ndoc.write(new object[] { File.ReadAllText(filePath) });\ndoc.close();\n\nIHTMLElement head = (IHTMLElement)((IHTMLElementCollection)doc.all.tags(\"head\")).item(null, 0);\nIHTMLScriptElement scriptObject = (IHTMLScriptElement)doc.createElement(\"script\");\nscriptObject.type = @\"text/javascript\";\nscriptObject.text = @\"function btn1_OnClick(str){\n    alert('you clicked' + str);\n}\";\n((HTMLHeadElementClass)head).appendChild((IHTMLDOMNode)scriptObject);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>HtmlDocument doc = browser.Document;\nHtmlElement head = doc.GetElementsByTagName(\"head\")[0];\nHtmlElement s = doc.CreateElement(\"script\");\ns.SetAttribute(\"text\",\"function sayHello() { alert('hello'); }\");\nhead.AppendChild(s);\nbrowser.Document.InvokeScript(\"sayHello\");\n</code></pre>\n\n<p>(tested in .NET 4 / Windows Forms App)</p>\n\n<p>Edit: Fixed case issue in function set. </p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>I believe the most simple method to inject Javascript in a WebBrowser Control HTML Document from c# is to invoke the  \"execStrip\" method with the code to be injected as argument.</p>\n\n<p>In this example the javascript code is injected and executed at global scope:</p>\n\n<pre><code>var jsCode=\"alert('hello world from injected code');\";\nWebBrowser.Document.InvokeScript(\"execScript\", new Object[] { jsCode, \"JavaScript\" });\n</code></pre>\n\n<p>If you want to delay execution, inject functions and call them after:</p>\n\n<pre><code>var jsCode=\"function greet(msg){alert(msg);};\";\nWebBrowser.Document.InvokeScript(\"execScript\", new Object[] { jsCode, \"JavaScript\" });\n...............\nWebBrowser.Document.InvokeScript(\"greet\",new object[] {\"hello world\"});\n</code></pre>\n\n<p>This is valid for Windows Forms and WPF WebBrowser controls.</p>\n\n<p>This solution is not cross browser because \"execScript\" is defined only in IE and Chrome. But the question is about Microsoft WebBrowser controls and IE is the only one supported.</p>\n\n<p>For a valid cross browser method to inject javascript code, create a Function object with the new Keyword. This example creates an anonymous function with injected code and executes it (javascript implements closures and the function has access to global space without local variable pollution).</p>\n\n<pre><code>var jsCode=\"alert('hello world');\";\n(new Function(code))();\n</code></pre>\n\n<p>Of course, you can delay execution:</p>\n\n<pre><code>var jsCode=\"alert('hello world');\";\nvar inserted=new Function(code);\n.................\ninserted();\n</code></pre>\n\n<p>Hope it helps</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Here is a VB.Net example if you are trying to retrieve the value of a variable from within a page loaded in a WebBrowser control.</p>\n\n<p>Step 1) Add a COM reference in your project to Microsoft HTML Object Library</p>\n\n<p>Step 2) Next, add this VB.Net code to your Form1 to import the mshtml library:<br />\n        Imports mshtml</p>\n\n<p>Step 3) Add this VB.Net code above your \"Public Class Form1\" line:<br />\n        &lt;System.Runtime.InteropServices.ComVisibleAttribute(True)&gt;</p>\n\n<p>Step 4) Add a WebBrowser control to your project</p>\n\n<p>Step 5) Add this VB.Net code to your Form1_Load function:<br />\n        WebBrowser1.ObjectForScripting = Me</p>\n\n<p>Step 6) Add this VB.Net sub which will inject a function \"CallbackGetVar\" into the web page's Javascript:</p>\n\n<pre><code>    Public Sub InjectCallbackGetVar(ByRef wb As WebBrowser)\n        Dim head As HtmlElement\n        Dim script As HtmlElement\n        Dim domElement As IHTMLScriptElement\n\n        head = wb.Document.GetElementsByTagName(\"head\")(0)\n        script = wb.Document.CreateElement(\"script\")\n        domElement = script.DomElement\n        domElement.type = \"text/javascript\"\n        domElement.text = \"function CallbackGetVar(myVar) { window.external.Callback_GetVar(eval(myVar)); }\"\n        head.AppendChild(script)\n    End Sub\n</code></pre>\n\n<p>Step 7) Add the following VB.Net sub which the Javascript will then look for when invoked:</p>\n\n<pre><code>    Public Sub Callback_GetVar(ByVal vVar As String)\n        Debug.Print(vVar)\n    End Sub\n</code></pre>\n\n<p>Step 8) Finally, to invoke the Javascript callback, add this VB.Net code when a button is pressed, or wherever you like:</p>\n\n<pre><code>    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click\n        WebBrowser1.Document.InvokeScript(\"CallbackGetVar\", New Object() {\"NameOfVarToRetrieve\"})\n    End Sub\n</code></pre>\n\n<p>Step 9) If it surprises you that this works, you may want to read up on the Javascript \"eval\" function, used in Step 6, which is what makes this possible.  It will take a string and determine whether a variable exists with that name and, if so, returns the value of that variable.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is the easiest way that I found after working on this:</p>\n\n<pre><code>string jCode = \"alert(\"Hello\");\"\n// or any combination of your JavaScript commands\n// (including function calls, variables... etc)\n\n// WebBrowser webBrowser1 is what you are using for your web browser\nwebBrowser1.Document.InvokeScript(\"eval\", new object[] { jCode });\n</code></pre>\n\n<p>What global JavaScript function <code>eval(str)</code> does is parses and executes whatever is written in str.\nCheck <a href=\"http://www.w3schools.com/jsref/jsref_eval.asp\">w3schools ref here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>As a follow-up to the <a href=\"http://stackoverflow.com/a/154496/107625\">accepted answer</a>, this is a minimal definition of the <a href=\"http://msdn.microsoft.com/en-us/library/aa768904%28v=vs.85%29.aspx\"><code>IHTMLScriptElement</code> interface</a> which does not require to include additional type libraries:</p>\n\n<pre><code>[ComImport, ComVisible(true), Guid(@\"3050f28b-98b5-11cf-bb82-00aa00bdce0b\")]\n[InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIDispatch)]\n[TypeLibType(TypeLibTypeFlags.FDispatchable)]\npublic interface IHTMLScriptElement\n{\n    [DispId(1006)]\n    string text { set; [return: MarshalAs(UnmanagedType.BStr)] get; }\n}\n</code></pre>\n\n<p>So a full code inside a WebBrowser control derived class would look like:</p>\n\n<pre><code>protected override void OnDocumentCompleted(\n    WebBrowserDocumentCompletedEventArgs e)\n{\n    base.OnDocumentCompleted(e);\n\n    // Disable text selection.\n    var doc = Document;\n    if (doc != null)\n    {\n        var heads = doc.GetElementsByTagName(@\"head\");\n        if (heads.Count &gt; 0)\n        {\n            var scriptEl = doc.CreateElement(@\"script\");\n            if (scriptEl != null)\n            {\n                var element = (IHTMLScriptElement)scriptEl.DomElement;\n                element.text =\n                    @\"function disableSelection()\n                    { \n                        document.body.onselectstart=function(){ return false; }; \n                        document.body.ondragstart=function() { return false; };\n                    }\";\n                heads[0].AppendChild(scriptEl);\n                doc.InvokeScript(@\"disableSelection\");\n            }\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If you need to inject a whole file then you can use this:</p>\n\n<pre><code>With Browser.Document'    \n   'Dim Head As HtmlElement = .GetElementsByTagName(\"head\")(0)'\n   'Dim Script As HtmlElement = .CreateElement(\"script\")'\n   'Dim Streamer As New StreamReader(&lt;Here goes path to file as String&gt;)'\n   'Using Streamer'\n       'Script.SetAttribute(\"text\", Streamer.ReadToEnd())'\n   'End Using'\n   'Head.AppendChild(Script)'\n   '.InvokeScript(&lt;Here goes a method name as String and without parentheses&gt;)'\n'End With'\n</code></pre>\n\n<p>Remember to import System.IO in order to use the StreamReader. I hope it's help you</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you need to inject a whole file then you can use this: </p>\n\n<pre><code>With Browser.Document\n    Dim Head As HtmlElement = .GetElementsByTagName(\"head\")(0) \n    Dim Script As HtmlElement = .CreateElement(\"script\")\n    Dim Streamer As New StreamReader()\n    Using Streamer\n        Script.SetAttribute(\"text\", Streamer.ReadToEnd())\n    End Using\n    Head.AppendChild(Script)\n    .InvokeScript()\nEnd With\n</code></pre>\n\n<p>Remember to import System.IO in order to use the StreamReader. Sorry for the remake but is the first time i answer</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've tried this:</p>\n\n<pre><code>string newScript = textBox1.Text;\nHtmlElement head = browserCtrl.Document.GetElementsByTagName(\"head\")[0];\nHtmlElement scriptEl = browserCtrl.Document.CreateElement(\"script\");\nlblStatus.Text = scriptEl.GetType().ToString();\nscriptEl.SetAttribute(\"type\", \"text/javascript\");\nhead.AppendChild(scriptEl);\nscriptEl.InnerHtml = \"function sayHello() { alert('hello') }\";\n</code></pre>\n\n<p>scriptEl.InnerHtml and scriptEl.InnerText both give errors:</p>\n\n<pre><code>System.NotSupportedException: Property is not supported on this type of HtmlElement.\n   at System.Windows.Forms.HtmlElement.set_InnerHtml(String value)\n   at SForceApp.Form1.button1_Click(Object sender, EventArgs e) in d:\\jsight\\installs\\SForceApp\\SForceApp\\Form1.cs:line 31\n   at System.Windows.Forms.Control.OnClick(EventArgs e)\n   at System.Windows.Forms.Button.OnClick(EventArgs e)\n   at System.Windows.Forms.Button.OnMouseUp(MouseEventArgs mevent)\n   at System.Windows.Forms.Control.WmMouseUp(Message&amp; m, MouseButtons button, Int32 clicks)\n   at System.Windows.Forms.Control.WndProc(Message&amp; m)\n   at System.Windows.Forms.ButtonBase.WndProc(Message&amp; m)\n   at System.Windows.Forms.Button.WndProc(Message&amp; m)\n   at System.Windows.Forms.Control.ControlNativeWindow.OnMessage(Message&amp; m)\n   at System.Windows.Forms.Control.ControlNativeWindow.WndProc(Message&amp; m)\n   at System.Windows.Forms.NativeWindow.Callback(IntPtr hWnd, Int32 msg, IntPtr wparam, IntPtr lparam)\n</code></pre>\n\n<p>Is there an easy way to inject a script into the dom?</p>\n",
            "last_activity_date": 1415415639,
            "question_id": 153748,
            "score": 48,
            "tags": [
                "c#",
                "javascript",
                ".net",
                "winforms",
                "webbrowser-control"
            ],
            "title": "How to inject Javascript in WebBrowser control?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<pre><code>var hexDigits = new Array\n        (\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"a\",\"b\",\"c\",\"d\",\"e\",\"f\"); \n\n//Function to convert hex format to a rgb color\nfunction rgb2hex(rgb) {\n rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n}\n\nfunction hex(x) {\n  return isNaN(x) ? \"00\" : hexDigits[(x - x % 16) / 16] + hexDigits[x % 16];\n }\n</code></pre>\n\n<p>(<a href=\"http://wowmotty.blogspot.com/2009/06/convert-jquery-rgb-output-to-hex-color.html\">Source</a>)</p>\n",
                    "is_accepted": true,
                    "score": 68
                },
                {
                    "body": "<p>Here is the cleaner solution I wrote based on @Matt suggestion:</p>\n\n<pre><code>function rgb2hex(rgb) {\n    rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n    function hex(x) {\n        return (\"0\" + parseInt(x).toString(16)).slice(-2);\n    }\n    return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n}\n</code></pre>\n\n<p>Some browsers already returns colors as hexadecimal (as of Internet Explorer 8 and below). If you need to deal with those cases, just append a condition inside the function, like @gfrobenius suggested:</p>\n\n<pre><code>function rgb2hex(rgb) {\n    if (/^#[0-9A-F]{6}$/i.test(rgb)) return rgb;\n\n    rgb = rgb.match(/^rgb\\((\\d+),\\s*(\\d+),\\s*(\\d+)\\)$/);\n    function hex(x) {\n        return (\"0\" + parseInt(x).toString(16)).slice(-2);\n    }\n    return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n}\n</code></pre>\n\n<p>If you're using jQuery and want a more complete approach, you can use <a href=\"http://api.jquery.com/jQuery.cssHooks/\">CSS Hooks</a> available since jQuery 1.4.3, as I showed when answering this question: <a href=\"http://stackoverflow.com/questions/6177454/can-i-force-jquery-cssbackgroundcolor-returns-on-hexadecimal-format\">Can I force jQuery.css(&quot;backgroundColor&quot;) returns on hexadecimal format?</a></p>\n",
                    "is_accepted": false,
                    "score": 89
                },
                {
                    "body": "<p>Updated @ErickPetru for rgba compatibility:</p>\n\n<pre><code>function rgb2hex(rgb) {\n    rgb = rgb.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+))?\\)$/);\n    function hex(x) {\n        return (\"0\" + parseInt(x).toString(16)).slice(-2);\n    }\n    return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]);\n}\n</code></pre>\n\n<p>I updated the regex to match the alpha value if defined, but not use it.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Most browsers seem to return the RGB value when using: </p>\n\n<p>$('#selector').css('backgroundColor');</p>\n\n<p>Only I.E (only 6 tested so far) returns the Hex value.</p>\n\n<p>To avoid error messages in I.E, you could wrap the function in an if statement:</p>\n\n<pre><code>function rgb2hex(rgb) {\n     if (  rgb.search(\"rgb\") == -1 ) {\n          return rgb;\n     } else {\n          rgb = rgb.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+))?\\)$/);\n          function hex(x) {\n               return (\"0\" + parseInt(x).toString(16)).slice(-2);\n          }\n          return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]); \n     }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>Here's a solution I found that does not throw scripting errors in IE:\n<a href=\"http://haacked.com/archive/2009/12/29/convert-rgb-to-hex.aspx\" rel=\"nofollow\">http://haacked.com/archive/2009/12/29/convert-rgb-to-hex.aspx</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a version that also checks for transparent, I needed this since my object was to insert the result into a style attribute, where the transparent version of a hex color is actually the word \"transparent\"..</p>\n\n<pre><code>function rgb2hex(rgb) {\n     if (  rgb.search(\"rgb\") == -1 ) {\n          return rgb;\n     }\n     else if ( rgb == 'rgba(0, 0, 0, 0)' ) {\n         return 'transparent';\n     }\n     else {\n          rgb = rgb.match(/^rgba?\\((\\d+),\\s*(\\d+),\\s*(\\d+)(?:,\\s*(\\d+))?\\)$/);\n          function hex(x) {\n               return (\"0\" + parseInt(x).toString(16)).slice(-2);\n          }\n          return \"#\" + hex(rgb[1]) + hex(rgb[2]) + hex(rgb[3]); \n     }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here is my solution, also does <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/String/toUpperCase\" rel=\"nofollow\">touppercase</a> by the use of an argument and checks for other possible white-spaces and capitalisation in the supplied string.</p>\n\n<pre><code>var a = \"rgb(10, 128, 255)\";\nvar b = \"rgb( 10, 128, 255)\";\nvar c = \"rgb(10, 128, 255 )\";\nvar d = \"rgb ( 10, 128, 255 )\";\nvar e = \"RGB ( 10, 128, 255 )\";\nvar f = \"rgb(10,128,255)\";\nvar g = \"rgb(10, 128,)\";\n\nvar rgbToHex = (function () {\n    var rx = /^rgb\\s*\\(\\s*(\\d+)\\s*,\\s*(\\d+)\\s*,\\s*(\\d+)\\s*\\)$/i;\n\n    function pad(num) {\n        if (num.length === 1) {\n            num = \"0\" + num;\n        }\n\n        return num;\n    }\n\n    return function (rgb, uppercase) {\n        var rxArray = rgb.match(rx),\n            hex;\n\n        if (rxArray !== null) {\n            hex = pad(parseInt(rxArray[1], 10).toString(16)) + pad(parseInt(rxArray[2], 10).toString(16)) + pad(parseInt(rxArray[3], 10).toString(16));\n\n            if (uppercase === true) {\n                hex = hex.toUpperCase();\n            }\n\n            return hex;\n        }\n\n        return;\n    };\n}());\n\nconsole.log(rgbToHex(a));\nconsole.log(rgbToHex(b, true));\nconsole.log(rgbToHex(c));\nconsole.log(rgbToHex(d));\nconsole.log(rgbToHex(e));\nconsole.log(rgbToHex(f));\nconsole.log(rgbToHex(g));\n</code></pre>\n\n<p>On <a href=\"http://jsfiddle.net/Xotic750/u6LCD/\" rel=\"nofollow\">jsfiddle</a></p>\n\n<p>Speed comparison on <a href=\"http://jsperf.com/rgbtohex-comparison\" rel=\"nofollow\">jsperf</a></p>\n\n<p>A further improvement could be to <code>trim()</code> the <code>rgb</code> string</p>\n\n<pre><code>var rxArray = rgb.trim().match(rx),\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>color class taken from bootstrap color picker</p>\n\n<pre><code>// Color object\nvar Color = function(val) {\n    this.value = {\n        h: 1,\n        s: 1,\n        b: 1,\n        a: 1\n    };\n    this.setColor(val);\n};\n\nColor.prototype = {\n    constructor: Color,\n\n    //parse a string to HSB\n    setColor: function(val){\n        val = val.toLowerCase();\n        var that = this;\n        $.each( CPGlobal.stringParsers, function( i, parser ) {\n            var match = parser.re.exec( val ),\n            values = match &amp;&amp; parser.parse( match ),\n            space = parser.space||'rgba';\n            if ( values ) {\n                if (space === 'hsla') {\n                    that.value = CPGlobal.RGBtoHSB.apply(null, CPGlobal.HSLtoRGB.apply(null, values));\n                } else {\n                    that.value = CPGlobal.RGBtoHSB.apply(null, values);\n                }\n                return false;\n            }\n        });\n    },\n\n    setHue: function(h) {\n        this.value.h = 1- h;\n    },\n\n    setSaturation: function(s) {\n        this.value.s = s;\n    },\n\n    setLightness: function(b) {\n        this.value.b = 1- b;\n    },\n\n    setAlpha: function(a) {\n        this.value.a = parseInt((1 - a)*100, 10)/100;\n    },\n\n    // HSBtoRGB from RaphaelJS\n    // https://github.com/DmitryBaranovskiy/raphael/\n    toRGB: function(h, s, b, a) {\n        if (!h) {\n            h = this.value.h;\n            s = this.value.s;\n            b = this.value.b;\n        }\n        h *= 360;\n        var R, G, B, X, C;\n        h = (h % 360) / 60;\n        C = b * s;\n        X = C * (1 - Math.abs(h % 2 - 1));\n        R = G = B = b - C;\n\n        h = ~~h;\n        R += [C, X, 0, 0, X, C][h];\n        G += [X, C, C, X, 0, 0][h];\n        B += [0, 0, X, C, C, X][h];\n        return {\n            r: Math.round(R*255),\n            g: Math.round(G*255),\n            b: Math.round(B*255),\n            a: a||this.value.a\n        };\n    },\n\n    toHex: function(h, s, b, a){\n        var rgb = this.toRGB(h, s, b, a);\n        return '#'+((1 &lt;&lt; 24) | (parseInt(rgb.r) &lt;&lt; 16) | (parseInt(rgb.g) &lt;&lt; 8) | parseInt(rgb.b)).toString(16).substr(1);\n    },\n\n    toHSL: function(h, s, b, a){\n        if (!h) {\n            h = this.value.h;\n            s = this.value.s;\n            b = this.value.b;\n        }\n        var H = h,\n        L = (2 - s) * b,\n        S = s * b;\n        if (L &gt; 0 &amp;&amp; L &lt;= 1) {\n            S /= L;\n        } else {\n            S /= 2 - L;\n        }\n        L /= 2;\n        if (S &gt; 1) {\n            S = 1;\n        }\n        return {\n            h: H,\n            s: S,\n            l: L,\n            a: a||this.value.a\n        };\n    }\n};\n</code></pre>\n\n<p>how to use </p>\n\n<pre><code>var color = new Color(\"RGB(0,5,5)\");\ncolor.toHex()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This one looks a bit nicer:</p>\n\n<pre><code>var rgb = $('#selector').css('backgroundColor').match(/\\d+/g);\nvar r   = parseInt(rgb[0], 10);\nvar g   = parseInt(rgb[1], 10);\nvar b   = parseInt(rgb[2], 10);\nvar hex = '#'+ r.toString(16) + g.toString(16) + b.toString(16);\n</code></pre>\n\n<p>a more succinct one-liner:</p>\n\n<pre><code>var rgb = $('#selector').css('backgroundColor').match(/\\d+/g);\nvar hex = '#'+ Number(rgb[0]).toString(16) + Number(rgb[1]).toString(16) + Number(rgb[2]).toString(16);\n</code></pre>\n\n<p>forcing jQuery to always return hex:</p>\n\n<pre><code>$.cssHooks.backgroundColor = {\n    get: function(elem) {\n        if (elem.currentStyle)\n            var bg = elem.currentStyle[\"backgroundColor\"];\n        else if (window.getComputedStyle) {\n            var bg = document.defaultView.getComputedStyle(elem,\n                null).getPropertyValue(\"background-color\");\n        }\n        if (bg.search(\"rgb\") == -1) {\n            return bg;\n        } else {\n            bg = bg.match(/\\d+/g);\n            function hex(x) {\n                return (\"0\" + parseInt(x).toString(16)).slice(-2);\n            }\n            return \"#\" + hex(bg[0]) + hex(bg[1]) + hex(bg[2]);\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Steven Pribilinskiy's answer drops leading zeroes, for example #ff0000 becomes #ff00.</p>\n\n<p>A solution is to append a leading 0 and substring off the last 2 digits.</p>\n\n<pre><code>var rgb = $('#selector').css('backgroundColor').match(/\\d+/g);\nvar hex = '#'+ String('0' + Number(rgb[0]).toString(16)).slice(-2) + String('0' + Number(rgb[1]).toString(16)).slice(-2) + String('0' + Number(rgb[2]).toString(16)).slice(-2);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Function that returns background color of an element in hex.</p>\n\n<pre><code>function getBgColorHex(elem){\n    var color = elem.css('background-color')\n    var hex;\n    if(color.indexOf('#')&gt;-1){\n        //for IE\n        hex = color;\n    } else {\n        var rgb = color.match(/\\d+/g);\n        hex = '#'+ ('0' + parseInt(rgb[0], 10).toString(16)).slice(-2) + ('0' + parseInt(rgb[1], 10).toString(16)).slice(-2) + ('0' + parseInt(rgb[2], 10).toString(16)).slice(-2);\n    }\n    return hex;\n}\n</code></pre>\n\n<p>usage example:</p>\n\n<pre><code>$('#div1').click(function(){\n   alert(getBgColorHex($(this));\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/shabuddin/5fu68pv9/1/\" rel=\"nofollow\">jsfiddle</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Using the following jQuery will get the RGB value of an element's background color:</p>\n\n<pre><code>$('#selector').css('backgroundColor');\n</code></pre>\n\n<p>Is there a way to get the hex value rather than the RGB?</p>\n",
            "last_activity_date": 1412099013,
            "question_id": 1740700,
            "score": 71,
            "tags": [
                "javascript",
                "jquery",
                "colors",
                "hex",
                "rgb"
            ],
            "title": "How to get hex color value rather than RGB value?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>I was looking for a similiar problem some time ago and bumped into this <a href=\"http://stackoverflow.com/questions/4290821/jqgrid-server-exception-error-messages\">answer</a>.\nRead Oleg's answer. He's the jqgrid man ;-)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In the last part of <a href=\"http://stackoverflow.com/questions/6853457/jquery-jqgrid-renders-empty-table/6905206#6905206\">the answer</a> to your previous question I tried already tried to give the answer on your current question. Probably I expressed me not clear enough.</p>\n\n<p>You should not place and information about the error inside of the standard successful response. You should just follow main rules of the HTTP protocol used for communication between the server and the client.</p>\n\n<p>The loading data in the grid, editing of the rows and all Ajax communication with the server are implemented with respect of HTTP protocol. Every HTTP response has <em>the status code</em> in the first line of the response. It's very important to understand the meaning of this.</p>\n\n<p>The typical successful request with JSON data looks as following</p>\n\n<pre><code>HTTP/1.1 200 OK\n...\nContent-Type: application/json\n...\n\n{\"page\":\"1\",....}\n</code></pre>\n\n<p>If the URL which try to load not exist for example the first line of the server response will be</p>\n\n<pre><code>HTTP/1.1 404 Not Found\n</code></pre>\n\n<p>and jqGrid <strong>based on the HTTP status code</strong> (404 in the case) *will not try to interpret the the server response as the data which contains data with the grid content.</p>\n\n<p><a href=\"http://www.ok-soft-gmbh.com/jqGrid/TestError.htm\">The demo</a> has the following code</p>\n\n<pre><code>$(\"#list\").jqGrid({\n    url: 'Unknown.json', // there are no file with the name\n    datatype: 'json',\n    // ... some other typical parameters\n    loadComplete: function () {\n        alert(\"OK\");\n    },\n    loadError: function (jqXHR, textStatus, errorThrown) {\n        alert('HTTP status code: ' + jqXHR.status + '\\n' +\n              'textStatus: ' + textStatus + '\\n' +\n              'errorThrown: ' + errorThrown);\n        alert('HTTP message body (jqXHR.responseText): ' + '\\n' + jqXHR.responseText);\n    }\n});\n</code></pre>\n\n<p>which display the alert message like the following:</p>\n\n<p><img src=\"http://i.stack.imgur.com/t06Lv.png\" alt=\"enter image description here\"></p>\n\n<p>Moreover in the <code>jqXHR.responseText</code> you will find <strong>the full body of the server response</strong> as as string. The next alert shows the response.</p>\n\n<p>With all above information I wanted to show you that error responses and successful responses will be processed in another way by the whole stack of software which you use (jqGrid, jQuery, <code>XMLHttpRequest</code> object, ...). So you should just use <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4\">error HTTP status codes</a> in the server responses if the error will be detected. In <a href=\"http://stackoverflow.com/questions/5500805/asp-net-mvc-2-0-implementation-of-searching-in-jqgrid/5501644#5501644\">the answer</a> for example you will see how to do this in case of the usage ASP.NET MVC.</p>\n\n<p><a href=\"http://www.ok-soft-gmbh.com/jqGrid/TestErrorInDiv.htm\">Here</a> you can find another version of the <code>loadError</code> implementation which wait the input in the JSON form: <code>{\"Source\":\"some error source\",Message:\"Description of the error\"}</code>, and the error output will be like here</p>\n\n<p><img src=\"http://i.stack.imgur.com/WCJDw.png\" alt=\"enter image description here\"></p>\n\n<p>but the code can display additionally HTML response generated by your web server:</p>\n\n<p><img src=\"http://i.stack.imgur.com/4tiO8.png\" alt=\"enter image description here\"></p>\n\n<p>You can easy modify the code to your purpose. The code you can find below</p>\n\n<pre><code>loadComplete: function () {\n    // remove error div if exist\n    $('#' + this.id + '_err').remove();\n},\nloadError: function (jqXHR, textStatus, errorThrown) {\n    // remove error div if exist\n    $('#' + this.id + '_err').remove();\n\n    // insert div with the error description before the grid\n    $(this).closest('div.ui-jqgrid').before(\n        '&lt;div id=\"' + this.id + '_err\" style=\"max-width:' + this.style.width +\n            ';\"&gt;&lt;div class=\"ui-state-error ui-corner-all\" style=\"padding:0.7em;float:left;\"&gt;' +\n            decodeErrorMessage(jqXHR, textStatus, errorThrown) +\n            '&lt;/div&gt;&lt;div style=\"clear:left\"/&gt;&lt;/div&gt;'\n    );\n}\n</code></pre>\n\n<p>where the <code>decodeErrorMessage</code> function defined as</p>\n\n<pre><code>var decodeErrorMessage = function (jqXHR, textStatus, errorThrown) {\n        var htmlBody, errorInfo, i, errorText = '',\n            errorIconSpan = '&lt;span class=\"ui-icon ui-icon-alert\" style=\"float:left; display: inline-block; margin-right: .3em;\"&gt;&lt;/span&gt;';\n        if (textStatus) {\n            errorText = textStatus;\n        }\n        if (errorThrown) {\n            if (errorText.length &gt; 0) {\n                errorText += '&lt;hr/&gt;';\n            }\n            errorText += errorThrown;\n        }\n        if (typeof (jqXHR.responseText) === \"string\") {\n            if (jqXHR.responseText.charAt(0) === '[') {\n                try {\n                    errorInfo = $.parseJSON(jqXHR.responseText);\n                    errorText = \"\";\n                    for (i = 0; i &lt; errorInfo.length; i += 1) {\n                        if (errorText.length !== 0) {\n                            errorText += \"&lt;hr/&gt;\";\n                        }\n                        errorText += errorInfo[i].Source + \": \" + errorInfo[i].Message;\n                    }\n                } catch (e) { }\n                errorText = errorIconSpan + errorText;\n            } else {\n                htmlBody = /&lt;body.*?&gt;([\\s\\S]*)&lt;\\/body&gt;/i.exec(jqXHR.responseText);\n                if (htmlBody !== null &amp;&amp; htmlBody.length &gt; 1) {\n                    errorText = htmlBody[1];\n                }\n            }\n        } else {\n            errorText = errorIconSpan + errorText;\n        }\n        return '&lt;div style=\"float:left\"&gt;' + errorText + '&lt;/div&gt;';\n    };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                }
            ],
            "body": "<p>In my json responses, I have 'STATUS' and 'errors' properties.\nHow can use this errors properties with jqGRid. To parse all errors and show them in a dialog box.</p>\n\n<p>Basically just check, if status:'ERROR' then display all errors.</p>\n\n<p>Thanks!</p>\n",
            "last_activity_date": 1312667084,
            "question_id": 6960208,
            "score": 7,
            "tags": [
                "javascript",
                "jquery",
                "jqgrid"
            ],
            "title": "jqgrid server side error message/validation handling"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Simple: <code>Object.create</code> is not supported in all environments, but can be shimmed with <code>new</code>. Apart from that, the two have different aims: <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create\" rel=\"nofollow\"><code>Object.create</code></a> just creates a Object inheriting from some other, while <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators/new\" rel=\"nofollow\"><code>new</code></a> <em>also</em> invokes a constructor function. Use what is appropriate.</p>\n\n<p>In your case you seem to want that <code>RestModel.prototype</code> inherits from <code>Model.prototype</code>. <code>Object.create</code> (or its shim) is the correct way then, because you do not want to a) create a new instance (instantiate a <code>new Model</code>) and b) don't want to call the Model constructor:</p>\n\n<pre><code>RestModel.prototype = Object.create(Model.prototype);\n</code></pre>\n\n<p>If you want to call the Model constructor on RestModels, that has nothing to do with prototypes. Use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/call\" rel=\"nofollow\"><code>call()</code></a> or <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/apply\" rel=\"nofollow\"><code>apply()</code></a> for that:</p>\n\n<pre><code>function RestModel() {\n    Model.call(this); // apply Model's constructor on the new object\n    ...\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 8
                },
                {
                    "body": "<p>JavaScript is an OOP language based on prototypes and not classes. That is one of the cause of all this confusion you can see around: a lot of developers use JS as it was a class-based.</p>\n\n<p>Therefore, you can see a lot of libraries that trying to use paradigm of a class-based language in JS.</p>\n\n<p>In addition, JS itself is lacking of some traits that makes inheritance, also prototype-based, painful. For example, before <code>Object.create</code> there wasn't a way to create an object from another object (as a OOP prototype-based language should do), but only using a <code>function</code> as constructor.</p>\n\n<p>And also for that reason, you can see a lot of libraries that are trying to \"fix\" the language, every one in its own way.</p>\n\n<p>So, your confusion is normal. Say that, the \"official\" way is use <code>prototype</code> property, <code>function</code>s as constructor, and <code>Object.create</code> to create from object's insteance. However, as said above, in some cases the code is verbose or it lacks of functionality, so this procedure is often wrapped somehow, and then it becomes a matter of personal taste.</p>\n\n<p>Because you're talking about model, you can take a look to <a href=\"http://backbonejs.org/#Model-extend\">Backbone's Model</a> and see if this approach fits you.</p>\n\n<p><strong>Update</strong>: to give some example that I hope helps you to clarify, here the old school inheritance way using <code>new</code>:</p>\n\n<pre><code>function Model() {\n    this.foo = \"foo\";\n    this.array = [];\n}\n\nModel.prototype.foo = \"\";\nModel.prototype.array = null;\nModel.prototype.doNothing = function() {};\n\nfunction RestModel() {\n    this.bar = \"bar\";\n}\n\nRestModel.prototype = new Model;\nRestModel.prototype.bar = \"\"\n\nvar myModel = new RestModel();\n</code></pre>\n\n<p>Now, here the issues:</p>\n\n<ol>\n<li>The constructor of <code>Model</code> is called once, only when the <code>RestModel.prototype</code> is set. Therefore, the <code>foo</code> property for every <code>RestModel</code> instance will be \"foo\". </li>\n<li>Not only that, but <em>all</em> <code>RestModel</code> instances will share the same instance of the same array in <code>this.array</code> property. If you create an instance of <code>Model</code> directly, you have a new instance of array for each instances.</li>\n<li><code>myModel.constructor</code> is <code>Model</code> instead of <code>RestModel</code>. That's because we override <code>prototype</code> with a new instance of <code>Model</code>, that contains <code>constructor</code> equals to <code>Model</code>.</li>\n<li>If you want to have a new instance of <code>RestModel</code> with a lazy call to the constructor, is not possible.</li>\n</ol>\n\n<p>I think there are the main points, of course they're not the only ones. So, how to solve that issues? As I said, a lot of people did already that, and they create library and frameworks also to limit the verbosity. However, to have an idea:</p>\n\n<pre><code>function Model() {\n    this.foo = \"foo\";\n    this.array = [];\n}\n\nModel.prototype.foo = \"\";\nModel.prototype.array = null;\nModel.prototype.doNothing = function() {};\n\nfunction RestModel() {\n    Model.call(this);\n\n    this.bar = \"bar\";\n}\n\nRestModel.prototype = Object.create(Model.prototype);\nRestModel.prototype.constructor = RestModel;\nRestModel.prototype.bar = \"\"\n\nvar myModel = new RestModel();\n\n// for lazy constructor call\nvar anotherModel = Object.create(RestModel.prototype);\n\nRestModel.call(anotherModel);\n</code></pre>\n\n<p>Notice that if you don't want to use <code>prototype</code> or <code>function</code> as constructor, with <code>Object.create</code> you can do that:</p>\n\n<pre><code>var Model = {\n    foo: \"\",\n    array: null,\n    doNothing: function() {}\n}\n\nvar RestModel = Object.create(Model);\n\nRestModel.bar = \"\";\n\nvar myModel = Object.create(RestModel);\n\n// Assuming you have to set some default values\ninitialize(RestModel);\n</code></pre>\n\n<p>Or:</p>\n\n<pre><code>var Model = {\n    foo: \"\",\n    array: null,\n    doNothing: function() {},\n\n    init : function () {\n        this.foo = \"foo\";\n        this.array = [];\n    },\n}\n\nvar RestModel = Object.create(Model);\n\nRestModel.bar = \"\";\nRestModel.init = function () {\n    Model.init.call(this);\n\n    this.bar = \"bar\";\n}\n\nvar myModel = Object.create(RestModel);\n\nmyModel.init();\n</code></pre>\n\n<p>In that case you mimic basically the constructor. You can also pass a <code>descriptor</code> to <code>Object.create</code> (see the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/create\">docs</a>) but it becomes more verbose. Most of the people use a sort of <code>extend</code> function or method (as you probably saw in Backbone example).</p>\n\n<p>Hope it helps!</p>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>I've been reading a lot of articles about \"inheritance\" in javascript. Some of them uses <code>new</code> while others recommends <code>Object.Create</code>. The more I read, the more confused I get since it seems to exist an endless amount of variants to solve inheritance.</p>\n\n<p>Can someone be kind to show me the most accepted way (or defacto standard if there is one)?</p>\n\n<p>(I want to have an base object <code>Model</code> which I can extend <code>RestModel</code> or <code>LocalStorageModel</code>.)</p>\n",
            "last_activity_date": 1377784363,
            "question_id": 10898786,
            "score": 10,
            "tags": [
                "javascript"
            ],
            "title": "Correct javascript inheritance"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Take a look at the <a href=\"http://bassistance.de/jquery-plugins/jquery-plugin-autocomplete/\" rel=\"nofollow\">autocomplete</a> plugin.  I know that it allows you to specify a delay or a minimum number of characters.  Even if you don't end up using the plugin, looking through the code will give you some ideas on how to implement it yourself.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want to search after the type is done use a global variable to hold the timeout returned from your <code>setTimout</code> call and cancel it with a <code>clearTimeout</code> if it hasn't yet happend so that it won't fire the timeout except on the last <code>keyup</code> event</p>\n\n<pre><code>var globalTimeout = null;  \n$('#id').keyup(function(){\n  if(globalTimeout != null) clearTimeout(globalTimeout);  \n  globalTimeout =setTimeout(SearchFunc,200);  \n}   \nfunction SearchFunc(){  \n  globalTimeout = null;  \n  //ajax code\n}\n</code></pre>\n\n<p>Or with an anonymous function :</p>\n\n<pre><code>var globalTimeout = null;  \n$('#id').keyup(function() {\n  if (globalTimeout != null) {\n    clearTimeout(globalTimeout);\n  }\n  globalTimeout = setTimeout(function() {\n    globalTimeout = null;  \n\n    //ajax code\n\n  }, 200);  \n}   \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Use </p>\n\n<pre><code>mytimeout = setTimeout( expression, timeout );\n</code></pre>\n\n<p>where expression is the script to run and timeout is the time to wait in milliseconds before it runs - this does NOT hault the script, but simply delays execution of that part until the timeout is done.</p>\n\n<pre><code>clearTimeout(mytimeout);\n</code></pre>\n\n<p>will reset/clear the timeout so it does not run the script in expression (like a cancel) as long as it has not yet been executed.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I use this function for the same purpose, executing a function after the user has stopped typing for a specified amount of time:</p>\n\n<pre><code>var delay = (function(){\n  var timer = 0;\n  return function(callback, ms){\n    clearTimeout (timer);\n    timer = setTimeout(callback, ms);\n  };\n})();\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>$('input').keyup(function() {\n    delay(function(){\n      alert('Time elapsed!');\n    }, 1000 );\n});\n</code></pre>\n\n<p>For something more sophisticated, give a look to the jQuery <a href=\"http://plugins.jquery.com/project/TypeWatch\">Typewatch</a> plugin.</p>\n",
                    "is_accepted": true,
                    "score": 532
                },
                {
                    "body": "<p>You could also look at <a href=\"http://documentcloud.github.com/underscore/\">underscore.js</a>, which provides utility methods like <a href=\"http://documentcloud.github.com/underscore/#debounce\">debounce</a>:</p>\n\n<pre><code>var lazyLayout = _.debounce(calculateLayout, 300);\n$(window).resize(lazyLayout);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Use the <a href=\"http://briangrinstead.com/files/bindWithDelay/\" rel=\"nofollow\">bindWithDelay</a> jQuery plugin:</p>\n\n<pre><code>element.bindWithDelay(eventType, [ eventData ], handler(eventObject), timeout, throttle)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Based on the answer of CMS, I made this :</p>\n\n<p>Put the code below after include jQuery :</p>\n\n<pre><code>/*\n * delayKeyup\n * http://code.azerti.net/javascript/jquery/delaykeyup.htm\n * Inspired by CMS in this post : http://stackoverflow.com/questions/1909441/jquery-keyup-delay\n * Written by Gaten\n * Exemple : $(\"#input\").delayKeyup(function(){ alert(\"5 secondes passed from the last event keyup.\"); }, 5000);\n */\n(function ($) {\n    $.fn.delayKeyup = function(callback, ms){\n        var timer = 0;\n        $(this).keyup(function(){                   \n            clearTimeout (timer);\n            timer = setTimeout(callback, ms);\n        });\n        return $(this);\n    };\n})(jQuery);\n</code></pre>\n\n<p>And simply use like this :</p>\n\n<pre><code>$('#input').delayKeyup(function(){ alert(\"5 secondes passed from the last event keyup.\"); }, 5000);\n</code></pre>\n\n<p>Careful : the $(this) variable in the function passed as a parameter does not match input</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Delay function to call up on every keyup.\n<strong>jQuery 1.7.1 or up required</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>jQuery.fn.keyupDelay = function( cb, delay ){\n  if(delay == null){\n    delay = 400;\n  }\n  var timer = 0;\n  return $(this).on('keyup',function(){\n    clearTimeout(timer);\n    timer = setTimeout( cb , delay );\n  });\n}\n</code></pre>\n\n<p>Usage: <code>$('#searchBox').keupDelay( cb );</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This function extends the function from Gaten's answer a bit in order to get the element back:</p>\n\n<pre><code>$.fn.delayKeyup = function(callback, ms){\n    var timer = 0;\n    var el = $(this);\n    $(this).keyup(function(){                   \n    clearTimeout (timer);\n    timer = setTimeout(function(){\n        callback(el)\n        }, ms);\n    });\n    return $(this);\n};\n\n$('#input').delayKeyup(function(el){\n    //alert(el.val());\n    // Here I need the input element (value for ajax call) for further process\n},1000);\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/Us9bu/2/\" rel=\"nofollow\">http://jsfiddle.net/Us9bu/2/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I'm surprised that nobody mention the problem with multiple input in CMS's very nice snipped.</p>\n\n<p>Basically, you would have to define delay variable individually for each input. Otherwise if sb put text to first input and quickly jump to other input and start typing, callback for the first one <strong>WON'T</strong> be called!</p>\n\n<p>See the code below I came with based on other answers:</p>\n\n<pre><code>(function($) {\n    /**\n     * KeyUp with delay event setup\n     * \n     * @link http://stackoverflow.com/questions/1909441/jquery-keyup-delay#answer-12581187\n     * @param function callback\n     * @param int ms\n     */\n    $.fn.delayKeyup = function(callback, ms){\n            $(this).keyup(function( event ){\n                var srcEl = event.currentTarget;\n                if( srcEl.delayTimer )\n                    clearTimeout (srcEl.delayTimer );\n                srcEl.delayTimer = setTimeout(function(){ callback( $(srcEl) ); }, ms);\n            });\n\n        return $(this);\n    };\n})(jQuery);\n</code></pre>\n\n<p>This solution keeps setTimeout reference within input's delayTimer variable. It also passes reference of element to callback as fazzyx suggested.</p>\n\n<p>Tested in IE6, 8(comp - 7), 8 and Opera 12.11.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This is a solution along the lines of CMS's, but solves a few key issues for me:</p>\n\n<ul>\n<li>Supports multiple inputs, delays can run concurrently.</li>\n<li>Ignores key events that didn't changed the value (like Ctrl, Alt+Tab).</li>\n<li>Solves a race condition (when the callback is executed and the value already changed).</li>\n</ul>\n\n<pre class=\"lang-js prettyprint-override\"><code>var delay = (function() {\n    var timer = {}\n      , values = {}\n    return function(el) {\n        var id = el.form.id + '.' + el.name\n        return {\n            enqueue: function(ms, cb) {\n                if (values[id] == el.value) return\n                if (!el.value) return\n                var original = values[id] = el.value\n                clearTimeout(timer[id])\n                timer[id] = setTimeout(function() {\n                    if (original != el.value) return // solves race condition\n                    cb.apply(el)\n                }, ms)\n            }\n        }\n    }\n}())\n</code></pre>\n\n<p>Usage:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>signup.key.addEventListener('keyup', function() {\n    delay(this).enqueue(300, function() {\n        console.log(this.value)\n    })\n})\n</code></pre>\n\n<p><em>The code is written in a style I enjoy, you may need to add a bunch of semicolons.</em></p>\n\n<p>Things to keep in mind:</p>\n\n<ul>\n<li>A unique id is generated based on the form id and input name, so they must be defined and unique, or you could adjust it to your situation.</li>\n<li><strong>delay</strong> returns an object that's easy to extend for your own needs.</li>\n<li>The original element used for delay is bound to the callback, so <code>this</code> works as expected (like in the example).</li>\n<li>Empty value is ignored in the second validation.</li>\n<li>Watch out for <strong>enqueue</strong>, it expects milliseconds first, I prefer that, but you may want to switch the parameters to match <code>setTimeout</code>.</li>\n</ul>\n\n<p>The solution I use adds another level of complexity, allowing you to cancel execution, for example, but this is a good base to build on.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Based on the answer of CMS, it just ignores the key events that doesn't change value. </p>\n\n<pre><code>var delay = (function(){\n    var timer = 0;\n    return function(callback, ms){\n      clearTimeout (timer);\n      timer = setTimeout(callback, ms);\n    };\n})(); \n\nvar duplicateFilter=(function(){\n  var lastContent;\n  return function(content,callback){\n    content=$.trim(content);\n    if(content!=lastContent){\n      callback(content);\n    }\n    lastContent=content;\n  };\n})();\n\n$(\"#some-input\").on(\"keyup\",function(ev){\n\n  var self=this;\n  delay(function(){\n    duplicateFilter($(self).val(),function(c){\n        //do sth...\n        console.log(c);\n    });\n  }, 1000 );\n\n\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This worked for me where I delay the search logic operation and make a check if the value is same as entered in text field. If value is same then I go ahead and perform the operation for the data related to search value.</p>\n\n<pre><code>$('#searchText').on('keyup',function () {\n    var searchValue = $(this).val();\n    setTimeout(function(){\n        if(searchValue == $('#searchText').val() &amp;&amp; searchValue != null &amp;&amp; searchValue != \"\") {\n           // logic to fetch data based on searchValue\n        }\n        else if(searchValue == ''){\n           // logic to load all the data\n        }\n    },300);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Another slight enhancement on CMS's answer. To easily allow for separate delays, you can use the following:</p>\n\n<pre><code>function makeDelay(ms) {\n    var timer = 0;\n    return function(callback){\n        clearTimeout (timer);\n        timer = setTimeout(callback, ms);\n    };\n};\n</code></pre>\n\n<p>If you want to reuse the same delay, just do</p>\n\n<pre><code>var delay = makeDelay(250);\n$(selector1).on('keyup', function() {delay(someCallback);});\n$(selector2).on('keyup', function() {delay(someCallback);});\n</code></pre>\n\n<p>If you want separate delays, you can do</p>\n\n<pre><code>$(selector1).on('keyup', function() {makeDelay(250)(someCallback);});\n$(selector2).on('keyup', function() {makeDelay(250)(someCallback);});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>var globalTimeout = null;  \n$('#search').keyup(function(){\n  if(globalTimeout != null) clearTimeout(globalTimeout);  \n  globalTimeout =setTimeout(SearchFunc,200);  \n});\nfunction SearchFunc(){  \n  globalTimeout = null;  \n  console.log('Search: '+$('#search').val());\n  //ajax code\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Well, i also made a piece of code for limit high frequency ajax request cause by Keyup / Keydown. Check this out:</p>\n\n<p><a href=\"https://github.com/raincious/jQueue\" rel=\"nofollow\">https://github.com/raincious/jQueue</a></p>\n\n<p>Do your query like this:</p>\n\n<pre><code>var q = new jQueue(function(type, name, callback) {\n    return $.post(\"/api/account/user_existed/\", {Method: type, Value: name}).done(callback);\n}, 'Flush', 1500); // Make sure use Flush mode.\n</code></pre>\n\n<p>And bind event like this:</p>\n\n<pre><code>$('#field-username').keyup(function() {\n    q.run('Username', this.val(), function() { /* calling back */ });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a suggestion I have written that takes care of multiple input in your form.</p>\n\n<p>This function gets the Object of the input field, put in your code</p>\n\n<pre><code>function fieldKeyup(obj){\n    //  what you want this to do\n\n} // fieldKeyup\n</code></pre>\n\n<p>This is the actual delayCall function, takes care of multiple input fields</p>\n\n<pre><code>function delayCall(obj,ms,fn){\n    return $(obj).each(function(){\n    if ( typeof this.timer == 'undefined' ) {\n       // Define an array to keep track of all fields needed delays\n       // This is in order to make this a multiple delay handling     \n          function\n        this.timer = new Array();\n    }\n    var obj = this;\n    if (this.timer[obj.id]){\n        clearTimeout(this.timer[obj.id]);\n        delete(this.timer[obj.id]);\n    }\n\n    this.timer[obj.id] = setTimeout(function(){\n        fn(obj);}, ms);\n    });\n}; // delayCall\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>$(\"#username\").on(\"keyup\",function(){\n    delayCall($(this),500,fieldKeyup);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've got a search field.</p>\n\n<p>Right now it searches for every keyup. So if someone types Windows, it will make a search with AJAX for every keypress: W, Wi, Win, Wind, Windo, Window, Windows.</p>\n\n<p>I want to have a delay, so it only searches when the user stops typing for 200 ms.</p>\n\n<p>There is no option for this in the keyup function, and I have tried <code>setTimeout</code>, but it didn't work.</p>\n\n<p>How can I do that?</p>\n",
            "last_activity_date": 1402423861,
            "question_id": 1909441,
            "score": 266,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "jQuery .keyup() delay"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>Try this:</p>\n\n<pre><code>$(\"#myselect :selected\").text();\n</code></pre>\n\n<p>For an ASP.NET dropdown you can use the following selector:</p>\n\n<pre><code>$(\"[id*='MyDropDownId'] :selected\")\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 124
                },
                {
                    "body": "<pre><code>$(\"#yourdropdownid option:selected\").text();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1740
                },
                {
                    "body": "<pre><code>var someName = \"Test\";\n\n$(\"#&lt;%= ddltest.ClientID %&gt;\").each(function () {\n    $('option', this).each(function () {\n        if ($(this).text().toLowerCase() == someName) {\n            $(this).attr('selected', 'selected')\n        };\n    });\n});\n</code></pre>\n\n<p>That will help you to get right direction. Above code is fully tested if you need further help let me know.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>$(\"option:selected\", $(\"#TipoRecorde\")).text()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p><code>$(\"#DropDownID\").val()</code>  will give the selected index value.</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>If you already have the dropdownlist available in a variable, this is what works for me:</p>\n\n<pre><code>$(\"option:selected\", myVar).text()\n</code></pre>\n\n<p>The other answers on this question helped me, but ultimately the following thread helped the most:</p>\n\n<p><strong><a href=\"http://forum.jquery.com/topic/this-option-selected-attr-rel-option-selected-is-not-working-in-ie\">jquery forum</a></strong></p>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>The answers posted here, for example,</p>\n\n<pre><code>$('#yourdropdownid option:selected').text();\n</code></pre>\n\n<p>didn't work for me, but this did:</p>\n\n<pre><code>$('#yourdropdownid').find('option:selected').text();\n</code></pre>\n\n<p>It is possibly an older version of jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 91
                },
                {
                    "body": "<p>For the text of the selected item.</p>\n\n<pre><code> $('select[name=\"thegivenname\"] option:selected').text();\n</code></pre>\n\n<p>For the value of the selected item.</p>\n\n<pre><code>$('select[name=\"thegivenname\"] option:selected').val();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<pre><code>$(\"select[id=yourDropdownid] option:selected\").text()\n</code></pre>\n\n<p>This works fine</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>This works for me:</p>\n\n<pre><code>$('#yourdropdownid').find('option:selected').text();\n</code></pre>\n\n<p><a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"nofollow\">jQuery</a> version: 1.9.1</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>For those who are using SharePoint lists and don't want to use the long generated id; this will work: </p>\n\n<pre><code>var e = $('select[title=\"IntenalFieldName\"] option:selected').text();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code> $(\"#selectID option:selected\").text();\n</code></pre>\n\n<p>Instead of <code>#selectID</code> you can use any jQuery selector, like <code>.selectClass</code> using class.</p>\n\n<p>As mentioned in the documentation <a href=\"http://api.jquery.com/selected-selector/\" rel=\"nofollow\">here</a>.</p>\n\n<p><em>The :selected selector works for &lt;option> elements. It does not work for checkboxes or radio inputs; use <code>:checked</code> for them.</em></p>\n\n<p><strong>.text()</strong> As per the documentation <a href=\"http://api.jquery.com/text/\" rel=\"nofollow\">here</a>.</p>\n\n<p><em>Get the combined text contents of each element in the set of matched elements, including their descendants.</em></p>\n\n<p>So you can take text from any HTML element using the <code>.text()</code> method.</p>\n\n<p>Refer the documentation for a deeper explanation.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>$(\"#dropdownID\").change(function(){\n  alert($('option:selected', $(this)).text());\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Use:</p>\n\n<pre><code>('#yourdropdownid').find(':selected').text();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Various ways</p>\n\n<pre><code>1. $(\"#myselect option:selected\").text();\n\n2. $(\"#myselect :selected\").text();\n\n3. $(\"#myselect\").children(\":selected\").text();\n\n4. $(\"#myselect\").find(\":selected\").text();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>In sibling case   </p>\n\n<pre><code> &lt;a class=\"uibutton confirm addClient\" href=\"javascript:void(0);\"&gt;ADD Client&lt;/a&gt;\n &lt;input type=\"text\" placeholder=\"Enter client name\" style=\"margin: 5px;float: right\" class=\"clientsearch large\" /&gt;\n &lt;select class=\"mychzn-select clientList\"&gt;\n      &lt;option value=\"\"&gt;Select Client name....&lt;/option&gt;\n      &lt;option value=\"1\"&gt;abc&lt;/option&gt;\n  &lt;/select&gt;\n\n\n ////////////jQuery//////////////\n $(this).siblings('select').children(':selected').text()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>How can I get an <a href=\"http://en.wikipedia.org/wiki/Active_Server_Pages\">ASP</a> drop-down list selected text in jQuery, not using the selected value?</p>\n",
            "last_activity_date": 1425113930,
            "question_id": 1643227,
            "score": 940,
            "tags": [
                "javascript",
                "jquery",
                "drop-down-menu",
                "jquery-selectors"
            ],
            "title": "Get selected text from drop-down list (select box) using jQuery"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><em><strong>Fiddle Links: <a href=\"http://jsfiddle.net/g6P5H/214\">Source code</a> - <a href=\"http://jsfiddle.net/g6P5H/214/show/\">Preview</a> - <a href=\"http://jsfiddle.net/8R5y6/\">Small version</a></em></strong><br/>\nUpdate: This small function will only execute code in a single direction. If you want full support (eg event listeners / getters), have a look <strong>at <a href=\"http://stackoverflow.com/a/7988536/938089?listening-for-youtube-event-in-javascript-or-jquery%29\">Listening for Youtube Event in jQuery</a></strong></p>\n\n<p>As a result of a deep code analysis, I've created a function: <code>function callPlayer</code> requests a function call on any framed YouTube video. See the <a href=\"https://developers.google.com/youtube/js_api_reference#Operations\">YouTube Api reference</a> to get a full list of possible function calls. Read the comments at the source code for an explanation.</p>\n\n<p>On 17 may 2012, the code size was doubled in order to take care of the player's ready state. If you need a compact function which does not deal with the player's ready state, see <a href=\"http://jsfiddle.net/8R5y6/\">http://jsfiddle.net/8R5y6/</a>.</p>\n\n<pre><code>/**\n * @author       Rob W &lt;gwnRob@gmail.com&gt;\n * @website      http://stackoverflow.com/a/7513356/938089\n * @version      20131010\n * @description  Executes function on a framed YouTube video (see website link)\n *               For a full list of possible functions, see:\n *               https://developers.google.com/youtube/js_api_reference\n * @param String frame_id The id of (the div containing) the frame\n * @param String func     Desired function to call, eg. \"playVideo\"\n *        (Function)      Function to call when the player is ready.\n * @param Array  args     (optional) List of arguments to pass to function func*/\nfunction callPlayer(frame_id, func, args) {\n    if (window.jQuery &amp;&amp; frame_id instanceof jQuery) frame_id = frame_id.get(0).id;\n    var iframe = document.getElementById(frame_id);\n    if (iframe &amp;&amp; iframe.tagName.toUpperCase() != 'IFRAME') {\n        iframe = iframe.getElementsByTagName('iframe')[0];\n    }\n\n    // When the player is not ready yet, add the event to a queue\n    // Each frame_id is associated with an own queue.\n    // Each queue has three possible states:\n    //  undefined = uninitialised / array = queue / 0 = ready\n    if (!callPlayer.queue) callPlayer.queue = {};\n    var queue = callPlayer.queue[frame_id],\n        domReady = document.readyState == 'complete';\n\n    if (domReady &amp;&amp; !iframe) {\n        // DOM is ready and iframe does not exist. Log a message\n        window.console &amp;&amp; console.log('callPlayer: Frame not found; id=' + frame_id);\n        if (queue) clearInterval(queue.poller);\n    } else if (func === 'listening') {\n        // Sending the \"listener\" message to the frame, to request status updates\n        if (iframe &amp;&amp; iframe.contentWindow) {\n            func = '{\"event\":\"listening\",\"id\":' + JSON.stringify(''+frame_id) + '}';\n            iframe.contentWindow.postMessage(func, '*');\n        }\n    } else if (!domReady ||\n               iframe &amp;&amp; (!iframe.contentWindow || queue &amp;&amp; !queue.ready) ||\n               (!queue || !queue.ready) &amp;&amp; typeof func === 'function') {\n        if (!queue) queue = callPlayer.queue[frame_id] = [];\n        queue.push([func, args]);\n        if (!('poller' in queue)) {\n            // keep polling until the document and frame is ready\n            queue.poller = setInterval(function() {\n                callPlayer(frame_id, 'listening');\n            }, 250);\n            // Add a global \"message\" event listener, to catch status updates:\n            messageEvent(1, function runOnceReady(e) {\n                if (!iframe) {\n                    iframe = document.getElementById(frame_id);\n                    if (!iframe) return;\n                    if (iframe.tagName.toUpperCase() != 'IFRAME') {\n                        iframe = iframe.getElementsByTagName('iframe')[0];\n                        if (!iframe) return;\n                    }\n                }\n                if (e.source === iframe.contentWindow) {\n                    // Assume that the player is ready if we receive a\n                    // message from the iframe\n                    clearInterval(queue.poller);\n                    queue.ready = true;\n                    messageEvent(0, runOnceReady);\n                    // .. and release the queue:\n                    while (tmp = queue.shift()) {\n                        callPlayer(frame_id, tmp[0], tmp[1]);\n                    }\n                }\n            }, false);\n        }\n    } else if (iframe &amp;&amp; iframe.contentWindow) {\n        // When a function is supplied, just call it (like \"onYouTubePlayerReady\")\n        if (func.call) return func();\n        // Frame exists, send message\n        iframe.contentWindow.postMessage(JSON.stringify({\n            \"event\": \"command\",\n            \"func\": func,\n            \"args\": args || [],\n            \"id\": frame_id\n        }), \"*\");\n    }\n    /* IE8 does not support addEventListener... */\n    function messageEvent(add, listener) {\n        var w3 = add ? window.addEventListener : window.removeEventListener;\n        w3 ?\n            w3('message', listener, !1)\n        :\n            (add ? window.attachEvent : window.detachEvent)('onmessage', listener);\n    }\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>callPlayer(\"whateverID\", function() {\n    // This function runs once the player is ready (\"onYouTubePlayerReady\")\n    callPlayer(\"whateverID\", \"playVideo\");\n});\n// When the player is not ready yet, the function will be queued.\n// When the iframe cannot be found, a message is logged in the console.\ncallPlayer(\"whateverID\", \"playVideo\");\n</code></pre>\n\n<h2>Possible questions (&amp; answers):</h2>\n\n<p><strong>Q</strong>: It doesn't work!<br>\n<strong>A</strong>: \"Doesn't work\" is not a clear description. Do you get any error messages? Please show the relevant code.</p>\n\n<p><strong>Q</strong>: I have embedded a YouTube video using <code>&lt;iframe src=\"http://www.youtube.com/embed/As2rZGPGKDY\" /&gt;</code>but the function doesn't execute any function!<br>\n<strong>A</strong>: You have to add <code>?enablejsapi=1</code> at the end of your URL: <code>/embed/vid_id?enablejsapi=1</code>.</p>\n\n<p><strong>Q</strong>: I get error message \"An invalid or illegal string was specified\". Why?<br>\n<strong>A</strong>: The API doesn't function properly at a local host (<code>file://</code>). Host your (test) page online, or use <a href=\"http://jsfiddle.net\">JSFiddle</a>. Examples: See the links at the top of this answer.</p>\n\n<p><strong>Q</strong>: How did you know this?<br>\n<strong>A</strong>: I have spent some time to manually interpret the API's source. I concluded that I had to use the <a href=\"https://developer.mozilla.org/en/DOM/window.postMessage\"><code>postMessage</code></a> method. To know which arguments to pass, I created a Chrome extension which intercepts messages. The source code for the extension can be downloaded <a href=\"https://robwu.nl/postMessage-debugging.zip\">here</a>.</p>\n\n<p><strong>Q</strong>: What browsers are supported?<br>\n<strong>A</strong>: Every browser which supports <a href=\"http://caniuse.com/#feat=json\">JSON</a> and <a href=\"http://caniuse.com/#feat=x-doc-messaging\"><code>postMessage</code></a>.  </p>\n\n<ul>\n<li>IE 8+</li>\n<li>Firefox 3.6+ (actually 3.5, but <code>document.readyState</code> was implemented in 3.6)</li>\n<li>Opera 10.50+</li>\n<li>Safari 4+</li>\n<li>Chrome 3+</li>\n</ul>\n\n<p>Related answer / implementation: <a href=\"http://stackoverflow.com/a/7866323/938089/jquery-fade-in-youtube-iframe-embed\">Fade-in a framed video using jQuery</a><br>\nFull API support: <a href=\"http://stackoverflow.com/a/7988536/938089?listening-for-youtube-event-in-javascript-or-jquery%29\">Listening for Youtube Event in jQuery</a><br>\nOfficial API: <a href=\"https://developers.google.com/youtube/iframe_api_reference\">https://developers.google.com/youtube/iframe_api_reference</a>  </p>\n\n<h3>Revision history</h3>\n\n<ul>\n<li>17 may 2012<br>\nImplemented <code>onYouTubePlayerReady</code>: <code>callPlayer('frame_id', function() { ... })</code>.<br>\nFunctions are automatically queued when the player is not ready yet.</li>\n<li>24 july 2012<br>\nUpdated and successully tested in the supported browsers (look ahead).</li>\n<li>10 october 2013\nWhen a function is passed as an argument, <code>callPlayer</code> forces a check of readiness. This is needed, because when <code>callPlayer</code> is called right after the insertion of the iframe while the document is ready, it can't know for sure that the iframe is fully ready. In Internet Explorer and Firefox, this scenario resulted in a too early invocation of <code>postMessage</code>, which was ignored.</li>\n<li>12 Dec 2013, recommended to add <code>&amp;origin=*</code> in the URL.</li>\n<li>2 Mar 2014, retracted recommendation to remove <code>&amp;origin=*</code> to the URL.</li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 208
                },
                {
                    "body": "<p>Looks like YouTube has updated their JS API so this is available by default! You can use an existing YouTube iframe's ID...</p>\n\n<pre><code>&lt;iframe id=\"player\" src=\"http://www.youtube.com/embed/M7lc1UVf-VE?enablejsapi=1&amp;origin=http://example.com\" frameborder=\"0\"&gt;&lt;/iframe&gt;\n</code></pre>\n\n<p>...in your JS...</p>\n\n<pre><code>var player;\nfunction onYouTubeIframeAPIReady() {\n  player = new YT.Player('player', {\n    events: {\n      'onStateChange': onPlayerStateChange\n    }\n  });\n}\n\nfunction onPlayerStateChange() {\n  //...\n}\n</code></pre>\n\n<p>...and the constructor will use your existing iframe instead of replacing it with a new one. This also means you don't have to specify the videoId to the constructor.</p>\n\n<p>See <a href=\"https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player\">Loading a video player</a></p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>You can do this with far less code:</p>\n\n<pre><code>function callPlayer(func, args) {\n    var iframes = document.getElementsByTagName('iframe');\n    for (var i = 0; i &lt; iframes.length; ++i) {\n        if (iframes[i]) {\n            var src = iframes[i].getAttribute('src');\n            if (src) {\n                if (src.indexOf('youtube.com/embed') != -1) {\n                    iframes[i].contentWindow.postMessage(JSON.stringify({\n                        'event': 'command',\n                        'func': func,\n                        'args': args || []\n                    }), \"*\");\n                }\n            }\n        }\n    }\n}\n</code></pre>\n\n<p>Working example:\n<a href=\"http://jsfiddle.net/kmturley/g6P5H/296/\" rel=\"nofollow\">http://jsfiddle.net/kmturley/g6P5H/296/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I want to be able to control iframe based YouTube players. This players will be already in the HTML, but I want to control them via the JavaScript API.</p>\n\n<p>I've been reading the <a href=\"http://code.google.com/apis/youtube/iframe_api_reference.html\">documentation for the iframe API</a> which explain how to add a new video to the page with the API, and then control it with the YouTube player functions:</p>\n\n<pre><code>var player;\nfunction onYouTubePlayerAPIReady() {\n    player = new YT.Player('container', {\n        height: '390',\n        width: '640',\n        videoId: 'u1zgFlCw8Aw',\n        events: {\n            'onReady': onPlayerReady,\n            'onStateChange': onPlayerStateChange\n        }\n    });\n}\n</code></pre>\n\n<p>That code creates a new player object and assigns it to 'player', then inserts it inside the #container div. Then I can operate on 'player' and call <code>playVideo()</code>, <code>pauseVideo()</code>, etc. on it.</p>\n\n<p><strong>But I want to be able to operate on iframe players which are already on the page.</strong></p>\n\n<p>I could do this very easily with the old embed method, with something like:</p>\n\n<pre><code>player = getElementById('whateverID');\nplayer.playVideo();\n</code></pre>\n\n<p>But this doesn't work with the new iframes. How can I assign a iframe object already on the page and then use the API functions on it?</p>\n",
            "last_activity_date": 1418244153,
            "question_id": 7443578,
            "score": 80,
            "tags": [
                "javascript",
                "youtube-api",
                "youtube-javascript-api"
            ],
            "title": "YouTube iframe API: how do I control a iframe player that&#39;s already in the HTML?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>I think you can make this work using jQuery's <a href=\"http://api.jquery.com/on/\">.on</a> event handler.</p>\n\n<p>Here's a fiddle you can test; just make sure to expand the html frame in the \nfiddle as much as possible so you can view the modal. </p>\n\n<p><a href=\"http://jsfiddle.net/Au9tc/605/\">http://jsfiddle.net/Au9tc/605/</a></p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;p&gt;Link 1&lt;/p&gt;\n&lt;a data-toggle=\"modal\" data-id=\"ISBN564541\" title=\"Add this item\" class=\"open-AddBookDialog btn btn-primary\" href=\"#addBookDialog\"&gt;test&lt;/a&gt;\n\n&lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\n\n&lt;p&gt;Link 2&lt;/p&gt;\n&lt;a data-toggle=\"modal\" data-id=\"ISBN-001122\" title=\"Add this item\" class=\"open-AddBookDialog btn btn-primary\" href=\"#addBookDialog\"&gt;test&lt;/a&gt;\n\n&lt;div class=\"modal hide\" id=\"addBookDialog\"&gt;\n &lt;div class=\"modal-header\"&gt;\n    &lt;button class=\"close\" data-dismiss=\"modal\"&gt;\u00d7&lt;/button&gt;\n    &lt;h3&gt;Modal header&lt;/h3&gt;\n  &lt;/div&gt;\n    &lt;div class=\"modal-body\"&gt;\n        &lt;p&gt;some content&lt;/p&gt;\n        &lt;input type=\"text\" name=\"bookId\" id=\"bookId\" value=\"\"/&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><strong>JAVASCRIPT</strong></p>\n\n<pre><code>$(document).on(\"click\", \".open-AddBookDialog\", function () {\n     var myBookId = $(this).data('id');\n     $(\".modal-body #bookId\").val( myBookId );\n     // As pointed out in comments, \n     // it is superfluous to have to manually call the modal.\n     // $('#addBookDialog').modal('show');\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 174
                },
                {
                    "body": "<p>Here's how I implemented it working from @mg1075's code. I wanted a bit more generic code so as not to have to assign classes to the modal trigger links/buttons:</p>\n\n<p><strong>Tested in Twitter Bootstrap 3.0.3.</strong></p>\n\n<p><strong>HTML</strong></p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;a href=\"#\" data-target=\"#my_modal\" data-toggle=\"modal\" data-id=\"my_id_value\"&gt;Open Modal&lt;/a&gt;\n</code></pre>\n\n<p><strong>JAVASCRIPT</strong></p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$(document).ready(function() {\n\n  $('a[data-toggle=modal], button[data-toggle=modal]').click(function () {\n\n    var data_id = '';\n\n    if (typeof $(this).data('id') !== 'undefined') {\n\n      data_id = $(this).data('id');\n    }\n\n    $('#my_element_id').val(data_id);\n  })\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Here is a cleaner way to do it if you are using <strong>Bootstrap 3.2.0</strong>.</p>\n\n<p>Link HTML</p>\n\n<pre><code>&lt;a href=\"#my_modal\" data-toggle=\"modal\" data-book-id=\"my_id_value\"&gt;Open Modal&lt;/a&gt;\n</code></pre>\n\n<p>Modal JavaScript</p>\n\n<pre><code>//triggered when modal is about to be shown\n$('#my_modal').on('show.bs.modal', function(e) {\n\n    //get data-id attribute of the clicked element\n    var bookId = $(e.relatedTarget).data('book-id');\n\n    //populate the textbox\n    $(e.currentTarget).find('input[name=\"bookId\"]').val(bookId);\n});\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/k7FC2/\">http://jsfiddle.net/k7FC2/</a></p>\n",
                    "is_accepted": false,
                    "score": 42
                }
            ],
            "body": "<p>I've got a couple of hyperlinks that each have an ID attached. When I click on this link, I want to open a modal ( <a href=\"http://twitter.github.com/bootstrap/javascript.html#modals\">http://twitter.github.com/bootstrap/javascript.html#modals</a> ), and pass this ID to the modal. I searched on google, but I couldn't find anything that could help me.</p>\n\n<p>This is the code:</p>\n\n<pre><code>&lt;a data-toggle=\"modal\" data-id=\"@book.Id\" title=\"Add this item\" class=\"open-AddBookDialog\"&gt;&lt;/a&gt;\n</code></pre>\n\n<p>Which should open:</p>\n\n<pre><code>&lt;div class=\"modal hide\" id=\"addBookDialog\"&gt;\n    &lt;div class=\"modal-body\"&gt;\n        &lt;input type=\"hidden\" name=\"bookId\" id=\"bookId\" value=\"\"/&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>With this piece of code:    </p>\n\n<pre><code>$(document).ready(function () {\n    $(\".open-AddBookDialog\").click(function () {\n        $('#bookId').val($(this).data('id'));\n        $('#addBookDialog').modal('show');\n    });\n});\n</code></pre>\n\n<p>However, when I click the hyperlink, nothing happens. When I give the hyperlink a href=\"#addBookDialog\", the modal opens just fine, but it does't contain any data.</p>\n\n<p>I followed this example: <a href=\"http://stackoverflow.com/questions/10379624/how-to-pass-values-arguments-to-modal-show-function-in-twitter-bootstrat\">How to pass values arguments to modal.show() function in twitter bootstrat</a></p>\n\n<p>(and I also tried this: <a href=\"http://stackoverflow.com/questions/7845866/how-to-set-the-input-value-in-a-modal-dialogue\">How to set the input value in a modal dialogue?</a>)</p>\n",
            "last_activity_date": 1412063575,
            "question_id": 10626885,
            "score": 133,
            "tags": [
                "javascript",
                "jquery",
                "asp.net-mvc",
                "twitter-bootstrap"
            ],
            "title": "Passing data to a bootstrap modal"
        },
        {
            "answer_count": 24,
            "answers": [
                {
                    "body": "<p>Your code can do the trick, but as you said, someone that trying to access using version 1 or version more 19 won't get the error, so I thought you can do it more safely with Regex expresion, this code would help you:</p>\n\n<pre><code>var userAgent = navigator.userAgent.toLowerCase();\n// Test if the browser is IE and check the version number is lower than 9\nif (/msie/.test(userAgent) &amp;&amp; \n    parseFloat((userAgent.match(/.*(?:rv|ie)[\\/: ](.+?)([ \\);]|$)/) || [])[1]) &lt; 9) {\n  // Navigate to error page\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If nobody else has added an <code>addEventLister</code>-method and you're using the correct browser mode then you could check for IE 8 or less with</p>\n\n<pre><code>if (window.attachEvent &amp;&amp; !window.addEventListener) {\n    // \"bad\" IE\n}\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en/docs/Web/API/EventTarget.addEventListener#Compatibility\">Legacy Internet Explorer and attachEvent (MDN)</a></p>\n",
                    "is_accepted": false,
                    "score": 70
                },
                {
                    "body": "<p>This is my preferred way of doing it. It gives maximum control:</p>\n\n<p>First set up your ie classes correctly</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;!--[if lt IE 7 ]&gt; &lt;html class=\"ie6\"&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 7 ]&gt;    &lt;html class=\"ie7\"&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 8 ]&gt;    &lt;html class=\"ie8\"&gt; &lt;![endif]--&gt;\n&lt;!--[if IE 9 ]&gt;    &lt;html class=\"ie9\"&gt; &lt;![endif]--&gt;\n&lt;!--[if (gt IE 9)|!(IE)]&gt;&lt;!--&gt; &lt;html class=\"\"&gt; &lt;!--&lt;![endif]--&gt;\n&lt;head&gt;\n</code></pre>\n\n<p>And add some simple script:</p>\n\n<pre><code>(function ($) {\n    \"use strict\";\n\n    // Detecting IE\n    var oldIE;\n    if ($('html').is('.ie6, .ie7, .ie8')) {\n        oldIE = true;\n    }\n\n    if (oldIE) {\n        // Here's your JS for IE..\n    } else {\n        // ..And here's the full-fat code for everyone else\n    }\n\n}(jQuery));\n</code></pre>\n\n<p>Thanks to <a href=\"http://paulirish.com/\">Paul Irish</a>.</p>\n",
                    "is_accepted": true,
                    "score": 225
                },
                {
                    "body": "<p>Use conditional comments. You're trying to detect users of IE &lt; 9 and conditional comments will work in those browsers; in other browsers (IE >= 10 and non-IE), the comments will be treated as normal HTML comments, which is what they are.</p>\n\n<p>Example HTML:</p>\n\n<pre><code>&lt;!--[if lt IE 9]&gt;\nWE DON'T LIKE YOUR BROWSER\n&lt;![endif]--&gt;\n</code></pre>\n\n<p>You can also do this purely with script, if you need:</p>\n\n<pre><code>var div = document.createElement(\"div\");\ndiv.innerHTML = \"&lt;!--[if lt IE 9]&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--&gt;\";\nvar isIeLessThan9 = (div.getElementsByTagName(\"i\").length == 1);\nif (isIeLessThan9) {\n    alert(\"WE DON'T LIKE YOUR BROWSER\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 44
                },
                {
                    "body": "<p>This works for me. I use it as a redirect to a page that explains why we don't like &lt; IE9 and provide links to browsers we prefer.</p>\n\n<pre><code>&lt;!--[if lt IE 9]&gt;\n&lt;meta http-equiv=\"refresh\" content=\"0;URL=http://google.com\"&gt;\n&lt;![endif]--&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Return IE version or if not IE return false</p>\n\n<pre><code>function isIE () {\n  var myNav = navigator.userAgent.toLowerCase();\n  return (myNav.indexOf('msie') != -1) ? parseInt(myNav.split('msie')[1]) : false;\n}\n</code></pre>\n\n<p>Example:</p>\n\n<pre><code>if (isIE () == 8) {\n // IE8 code\n} else {\n // Other versions IE or not IE\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>if (isIE () &lt; 9) {\n // is IE version less than 9\n} else {\n // is IE 9 and later or not IE\n}\n</code></pre>\n\n<p>or </p>\n\n<pre><code>if (isIE()) {\n // is IE\n} else {\n // Other browser\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 77
                },
                {
                    "body": "<p>Thanks so much for your simple yet highly effective solution, <strong>iconMatrix.</strong> Better still, it will work for users with javascript disabled. This is just what we were looking for.</p>\n\n<p>We DO have members who cannot upgrade bc their computers are funded through our federal, state &amp; local government funds--schools!! And their membership isn't optional. As you know, older pcs mean older versions of windows, mean older browsers. And many schools have firewalls or policies preventing them from downloading additional software and/or their pcs are too unstable to do so. So we have to be backwards compatible. </p>\n\n<blockquote>\n  <p>This works for me. I use it as a redirect to a page that explains why we don't like IE9 and provide links to browsers we prefer.</p>\n</blockquote>\n\n<pre><code>&lt;!--[if lt IE 9]&gt;\n&lt;meta http-equiv=\"refresh\" content=\"0;URL=http://google.com\"&gt;\n&lt;![endif]--&gt;\n</code></pre>\n\n<p>Great solution to a redirect page for backwards compatibility &amp; accessibility! Thanks again. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://james.padolsey.com/javascript/detect-ie-in-js-using-conditional-comments/\">Detect IE in JS using conditional comments</a></p>\n\n<pre><code>// ----------------------------------------------------------\n// A short snippet for detecting versions of IE in JavaScript\n// without resorting to user-agent sniffing\n// ----------------------------------------------------------\n// If you're not in IE (or IE version is less than 5) then:\n//     ie === undefined\n// If you're in IE (&gt;=5) then you can determine which version:\n//     ie === 7; // IE7\n// Thus, to detect IE:\n//     if (ie) {}\n// And to detect the version:\n//     ie === 6 // IE6\n//     ie &gt; 7 // IE8, IE9 ...\n//     ie &lt; 9 // Anything less than IE9\n// ----------------------------------------------------------\n\n// UPDATE: Now using Live NodeList idea from @jdalton\n\nvar ie = (function(){\n\n    var undef,\n        v = 3,\n        div = document.createElement('div'),\n        all = div.getElementsByTagName('i');\n\n    while (\n        div.innerHTML = '&lt;!--[if gt IE ' + (++v) + ']&gt;&lt;i&gt;&lt;/i&gt;&lt;![endif]--&gt;',\n        all[0]\n    );\n\n    return v &gt; 4 ? v : undef;\n\n}());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>To detect MSIE (v6 - v7 - v8 - v9 - v10 - v11) easily : </p>\n\n<pre><code>if (navigator.userAgent.indexOf('MSIE') !== -1 || navigator.appVersion.indexOf('Trident/') &gt; 0) {\n   // MSIE\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<pre><code>var Browser = new function () {\n    var self = this;\n    var nav = navigator.userAgent.toLowerCase();\n    if (nav.indexOf('msie') != -1) {\n        self.ie = {\n            version: toFloat(nav.split('msie')[1])\n        };\n    };\n};\n\n\nif(Browser.ie &amp;&amp; Browser.ie.version &gt; 9)\n{\n    // do something\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The most comprehensive JS script I found to check for versions of IE is <a href=\"http://www.pinlady.net/PluginDetect/IE/\" rel=\"nofollow\">http://www.pinlady.net/PluginDetect/IE/</a>. The entire library is at <a href=\"http://www.pinlady.net/PluginDetect/Browsers/\" rel=\"nofollow\">http://www.pinlady.net/PluginDetect/Browsers/</a>. </p>\n\n<p>With IE10, conditional statements are no longer supported.</p>\n\n<p>With IE11, the user agent no longer contains MSIE. Also, using the user agent is not reliable because that can be modified.</p>\n\n<p>Using the PluginDetect JS script, you can detect for IE and detect the exact versions by using very specific and well-crafted code that targets specific IE versions. This is very useful when you care exactly what version of browser you are working with.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For ie 10 and 11: </p>\n\n<p>You can use js and add a class in html to maintain the standard of <a href=\"http://stackoverflow.com/questions/10964966/detect-ie-version-in-javascript\">conditional comments</a>:</p>\n\n<pre><code>  var ua = navigator.userAgent,\n      doc = document.documentElement;\n\n  if ((ua.match(/MSIE 10.0/i))) {\n    doc.className = doc.className + \" ie10\";\n\n  } else if((ua.match(/rv:11.0/i))){\n    doc.className = doc.className + \" ie11\";\n  }\n</code></pre>\n\n<p>Or use a lib like bowser:</p>\n\n<p><a href=\"https://github.com/ded/bowser\" rel=\"nofollow\">https://github.com/ded/bowser</a></p>\n\n<p>Or modernizr for feature detection: </p>\n\n<p><a href=\"http://modernizr.com/\" rel=\"nofollow\">http://modernizr.com/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>According to <a href=\"http://msdn.microsoft.com/en-us/library/ms537509%28v=vs.85%29.aspx\" rel=\"nofollow\">Microsoft</a>, following is the best solution, it is also very simple:</p>\n\n<pre><code>function getInternetExplorerVersion()\n// Returns the version of Internet Explorer or a -1\n// (indicating the use of another browser).\n{\n    var rv = -1; // Return value assumes failure.\n    if (navigator.appName == 'Microsoft Internet Explorer')\n    {\n        var ua = navigator.userAgent;\n        var re  = new RegExp(\"MSIE ([0-9]{1,}[\\.0-9]{0,})\");\n        if (re.exec(ua) != null)\n            rv = parseFloat( RegExp.$1 );\n    }\n    return rv;\n}\n\nfunction checkVersion()\n{\n    var msg = \"You're not using Internet Explorer.\";\n    var ver = getInternetExplorerVersion();\n\n    if ( ver &gt; -1 )\n    {\n        if ( ver &gt;= 8.0 ) \n            msg = \"You're using a recent copy of Internet Explorer.\"\n        else\n            msg = \"You should upgrade your copy of Internet Explorer.\";\n      }\n    alert( msg );\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This function will return the IE major version number as an integer, or <code>undefined</code> if the browser isn't Internet Explorer. This, like all user agent solutions, is suceptible to user agent spoofing (which has been an official feature of IE since version 8).</p>\n\n<pre><code>function getIEVersion() {\n    var match = navigator.userAgent.match(/(?:MSIE |Trident\\/.*; rv:)(\\d+)/);\n    return match ? parseInt(match[1]) : undefined;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I realise I am a little late to the party here, but I had been checking out a simple one line way to provide feedback on whether a browser is IE and what version from 10 down it was. I haven't coded this for version 11, so perhaps a little amendment will be needed for that.</p>\n\n<p>However this is the code, it works as an object that has a property and a method and relies on object detection rather than scraping the navigator object (which is massively flawed as it can be spoofed).</p>\n\n<pre><code>var isIE = { browser:/*@cc_on!@*/false, detectedVersion: function () { return (typeof window.atob !== \"undefined\") ? 10 : (typeof document.addEventListener !== \"undefined\") ? 9 : (typeof document.querySelector !== \"undefined\") ? 8 : (typeof window.XMLHttpRequest !== \"undefined\") ? 7 : (typeof document.compatMode !== \"undefined\") ? 6 : 5; } };\n</code></pre>\n\n<p>The usage is <code>isIE.browser</code> a property that returns a boolean and relies on conditional comments the method <code>isIE.detectedVersion()</code> which returns a number between 5 and 10. I am making the assumption that anything lower than 6 and you are in serious old school territory and you will something more beefy than a one liner and anything higher than 10 and you are in to newer territory. I have read something about IE11 not supporting conditional comments but I've not fully investigated, that is maybe for a later date.</p>\n\n<p>Anyway, as it is, and for a one liner, it will cover the basics of IE browser and version detection. It's far from perfect, but it is small and easily amended.</p>\n\n<p>Just for reference, and if anyone is in any doubt on how to actually implement this then the following conditional should help. </p>\n\n<pre><code>var isIE = { browser:/*@cc_on!@*/false, detectedVersion: function () { return (typeof window.atob !== \"undefined\") ? 10 : (typeof document.addEventListener !== \"undefined\") ? 9 : (typeof document.querySelector !== \"undefined\") ? 8 : (typeof window.XMLHttpRequest !== \"undefined\") ? 7 : (typeof document.compatMode !== \"undefined\") ? 6 : 5; } };\n\n/* testing IE */\n\nif (isIE.browser) {\n  alert(\"This is an IE browser, with a detected version of : \" + isIE.detectedVersion());\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Detecting IE and its versions couldn't be easier, and all you need is a bit of native/vanilla Javascript: </p>\n\n<pre><code>var uA = navigator.userAgent;\nvar browser = null;\nvar ieVersion = null;\n\nif (uA.indexOf('MSIE 6') &gt;= 0) {\n    browser = 'IE';\n    ieVersion = 6;\n}\nif (uA.indexOf('MSIE 7') &gt;= 0) {\n    browser = 'IE';\n    ieVersion = 7;\n}\nif (document.documentMode) { // as of IE8\n    browser = 'IE';\n    ieVersion = document.documentMode;\n}\n</code></pre>\n\n<p>And this is a way to use it: </p>\n\n<pre><code>if (browser == 'IE' &amp;&amp; ieVersion &lt;= 9) \n    document.documentElement.className += ' ie9-';\n</code></pre>\n\n<p>. </p>\n\n<p>Works in all IE versions, including higher versions in lower Compatability View/Mode, and <code>documentMode</code> is IE proprietary.  </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want to have a more specific detection about the browser version in Internet Explorer you can do like so.</p>\n\n<p>By checking existence of these objects and combining such checks when needed, it is possible to reliably filter a specific IE version or a range of IE versions up to 10 inclusive.</p>\n\n<p>This technique works reliably including cases when code minification is used.</p>\n\n<h1>IE versions Condition to check for</h1>\n\n<pre><code>   10 or older  document.all \n   9  or older  document.all &amp;&amp; !window.atob\n   8  or older  document.all &amp;&amp; !document.addEventListener\n   7  or older  document.all &amp;&amp; !document.querySelector\n   6  or older  document.all &amp;&amp; !window.XMLHttpRequest\n   5.x          document.all &amp;&amp; !document.compatMode\n</code></pre>\n\n<h2>Example</h2>\n\n<pre><code>if (document.all &amp;&amp; !document.querySelector) {\n    alert('IE7 or lower');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>To detect Internet Explorer 10|11 you can use this little script immediatelly after body tag:</p>\n\n<p>In my case i use jQuery library loaded in head. </p>\n\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;script src=\"//code.jquery.com/jquery-1.11.0.min.js\"&gt;&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script&gt;if (navigator.appVersion.indexOf('Trident/') != -1) $(\"body\").addClass(\"ie10\");&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Detecting IE version using feature detection (IE7+, browsers prior to IE7 are detected as 7):</p>\n\n<pre><code>var ie = (function (){\n    if (window.ActiveXObject === undefined) return null;\n    if (!document.querySelector) return 7;\n    if (!document.addEventListener) return 8;\n    if (!window.atob) return 9;\n    if (!document.__proto__) return 10;\n    return 11;\n})();\n</code></pre>\n\n<p>Edit: I've created a bower/npm repo for your convenience: <a href=\"https://github.com/gagle/js-ie-version\">ie-version</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Conditional comments are no longer supported in IE as of Version 10 as noted on the <a href=\"http://msdn.microsoft.com/en-us/library/ie/hh801214(v=vs.85).aspx\" rel=\"nofollow\">Microsoft reference page</a>.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var ieDetector = function() {\r\n  var browser = { // browser object\r\n\r\n      verIE: null,\r\n      docModeIE: null,\r\n      verIEtrue: null,\r\n      verIE_ua: null\r\n\r\n    },\r\n    tmp;\r\n\r\n  tmp = document.documentMode;\r\n  try {\r\n    document.documentMode = \"\";\r\n  } catch (e) {};\r\n\r\n  browser.isIE = typeof document.documentMode == \"number\" || eval(\"/*@cc_on!@*/!1\");\r\n  try {\r\n    document.documentMode = tmp;\r\n  } catch (e) {};\r\n\r\n  // We only let IE run this code.\r\n  if (browser.isIE) {\r\n    browser.verIE_ua =\r\n      (/^(?:.*?[^a-zA-Z])??(?:MSIE|rv\\s*\\:)\\s*(\\d+\\.?\\d*)/i).test(navigator.userAgent || \"\") ?\r\n      parseFloat(RegExp.$1, 10) : null;\r\n\r\n    var e, verTrueFloat, x,\r\n      obj = document.createElement(\"div\"),\r\n\r\n      CLASSID = [\r\n        \"{45EA75A0-A269-11D1-B5BF-0000F8051515}\", // Internet Explorer Help\r\n        \"{3AF36230-A269-11D1-B5BF-0000F8051515}\", // Offline Browsing Pack\r\n        \"{89820200-ECBD-11CF-8B85-00AA005B4383}\"\r\n      ];\r\n\r\n    try {\r\n      obj.style.behavior = \"url(#default#clientcaps)\"\r\n    } catch (e) {};\r\n\r\n    for (x = 0; x &lt; CLASSID.length; x++) {\r\n      try {\r\n        browser.verIEtrue = obj.getComponentVersion(CLASSID[x], \"componentid\").replace(/,/g, \".\");\r\n      } catch (e) {};\r\n\r\n      if (browser.verIEtrue) break;\r\n\r\n    };\r\n    verTrueFloat = parseFloat(browser.verIEtrue || \"0\", 10);\r\n    browser.docModeIE = document.documentMode ||\r\n      ((/back/i).test(document.compatMode || \"\") ? 5 : verTrueFloat) ||\r\n      browser.verIE_ua;\r\n    browser.verIE = verTrueFloat || browser.docModeIE;\r\n  };\r\n\r\n  return {\r\n    isIE: browser.isIE,\r\n    Version: browser.verIE\r\n  };\r\n\r\n}();\r\n\r\ndocument.write('isIE: ' + ieDetector.isIE + \"&lt;br /&gt;\");\r\ndocument.write('IE Version Number: ' + ieDetector.Version);</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>then use:</p>\n\n<pre><code>if((ieDetector.isIE) &amp;&amp; (ieDetector.Version &lt;= 9))\n{\n\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><b>If you need to delect IE Browser version then you can follow below code. This code working well for version IE6 to IE11 </b></p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;body&gt;\n\n&lt;p&gt;Click on Try button to check IE Browser version.&lt;/p&gt;\n\n&lt;button onclick=\"getInternetExplorerVersion()\"&gt;Try it&lt;/button&gt;\n\n&lt;p id=\"demo\"&gt;&lt;/p&gt;\n\n&lt;script&gt;\nfunction getInternetExplorerVersion() {\n   var ua = window.navigator.userAgent;\n        var msie = ua.indexOf(\"MSIE \");\n        var rv = -1;\n\n        if (msie &gt; 0 || !!navigator.userAgent.match(/Trident.*rv\\:11\\./))      // If Internet Explorer, return version number\n        {               \n            if (isNaN(parseInt(ua.substring(msie + 5, ua.indexOf(\".\", msie))))) {\n                //For IE 11 &gt;\n                if (navigator.appName == 'Netscape') {\n                    var ua = navigator.userAgent;\n                    var re = new RegExp(\"Trident/.*rv:([0-9]{1,}[\\.0-9]{0,})\");\n                    if (re.exec(ua) != null) {\n                        rv = parseFloat(RegExp.$1);\n                        alert(rv);\n                    }\n                }\n                else {\n                    alert('otherbrowser');\n                }\n            }\n            else {\n                //For &lt; IE11\n                alert(parseInt(ua.substring(msie + 5, ua.indexOf(\".\", msie))));\n            }\n            return false;\n        }}\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Using JQuery:</p>\n\n<p><a href=\"http://tanalin.com/en/articles/ie-version-js/\" rel=\"nofollow\">http://tanalin.com/en/articles/ie-version-js/</a></p>\n\n<p>Using C#:</p>\n\n<pre><code>var browser = Request.Browser.Browser;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Window runs IE10 will be auto update to IE11+ and will be standardized W3C</p>\n\n<p>Nowaday, we don't need to support IE8-</p>\n\n<pre><code>    &lt;!DOCTYPE html&gt;\n    &lt;!--[if lt IE 9]&gt;&lt;html class=\"ie ie8\"&gt;&lt;![endif]--&gt;\n    &lt;!--[if IE 9]&gt;&lt;html class=\"ie ie9\"&gt;&lt;![endif]--&gt;\n    &lt;!--[if (gt IE 9)|!(IE)]&gt;&lt;!--&gt;&lt;html&gt;&lt;!--&lt;![endif]--&gt;\n    &lt;head&gt;\n        ...\n        &lt;!--[if lt IE 8]&gt;&lt;meta http-equiv=\"Refresh\" content=\"0;url=/error-browser.html\"&gt;&lt;![endif]--\n        ...\n    &lt;/head&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Simple solution stop thinking browser and use the year.</p>\n\n<pre><code>var year = eval(today.getYear());\nif(year &lt; 1900 )\n {alert('Good to go: All browsers and IE 9 &amp; &gt;');}\nelse\n {alert('Get with it and upgrade your IE to 9 or &gt;');}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to bounce users of our web site to an error page if they're using a version of Internet Explorer prior to v9. It's just not worth our time and money to support IE pre-v9. Users of all other non-IE browsers are fine and shouldn't be bounced. Here's the proposed code:</p>\n\n<pre><code>if(navigator.appName.indexOf(\"Internet Explorer\")!=-1){     //yeah, he's using IE\n    var badBrowser=(\n        navigator.appVersion.indexOf(\"MSIE 9\")==-1 &amp;&amp;   //v9 is ok\n        navigator.appVersion.indexOf(\"MSIE 1\")==-1  //v10, 11, 12, etc. is fine too\n    );\n\n    if(badBrowser){\n        // navigate to error page\n    }\n}\n</code></pre>\n\n<p>Will this code do the trick?</p>\n\n<p>To head off a few comments that will probably be coming my way:</p>\n\n<p>[1] Yes, I know that users can forge their useragent string. I'm not concerned.</p>\n\n<p>[2] Yes, I know that programming pros prefer sniffing out feature-support instead of browser-type but I don't feel this approach makes sense in this case. I already know that all (relevant) non-IE browsers support the features that I need and that all pre-v9 IE browsers don't. Checking feature by feature throughout the site would be a waste.</p>\n\n<p>[3] Yes, I know that someone trying to access the site using IE v1 (or >= 20) wouldn't get 'badBrowser' set to true and the warning page wouldn't be displayed properly. That's a risk we're willing to take.</p>\n\n<p>[4] Yes, I know that Microsoft has \"conditional comments\" that can be used for precise browser version detection. IE no longer supports conditional comments as of IE 10, rendering this approach absolutely useless.</p>\n\n<p>Any other obvious issues to be aware of? Thanks.</p>\n",
            "last_activity_date": 1424455827,
            "question_id": 10964966,
            "score": 128,
            "tags": [
                "javascript",
                "internet-explorer",
                "browser-detection"
            ],
            "title": "Detect IE version (prior to v9) in Javascript"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>The <code>delete</code> command has no effect on regular variables, only properties. After the <code>delete</code> command the property doesn't have the value <code>null</code>, it doesn't exist at all.</p>\n\n<p>If the property is an object reference, the <code>delete</code> command deletes the property but not the object. The garbage collector will take care of the object if it has no other references to it.</p>\n\n<p>Example:</p>\n\n<pre><code>var x = new Object();\nx.y = 42;\n\nalert(x.y); // shows '42'\n\ndelete x; // no effect\nalert(x.y); // still shows '42'\n\ndelete x.y; // deletes the property\nalert(x.y); // shows 'undefined'\n</code></pre>\n\n<p>(Tested in Firefox.)</p>\n",
                    "is_accepted": false,
                    "score": 114
                },
                {
                    "body": "<p>Coming from the Mozilla Documentation, \"You can use the delete operator to delete variables declared implicitly but not those declared with the var statement. \"</p>\n\n<p>Here is the link: <a href=\"https://developer.mozilla.org/En/Core%5FJavaScript%5F1.5%5FReference:Operators:Special%5FOperators:delete%5FOperator\">https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Operators:Special_Operators:delete_Operator</a></p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>The delete operator deletes only a reference, never an object itself. If it did delete the object itself, other remaining references would be dangling, like a C++ delete. (And accessing one of them would cause a crash. To make them all turn null would mean having extra work when deleting or extra memory for each object.)</p>\n\n<p>Since Javascript is garbage collected, you don't need to delete objects themselves - they will be removed when there is no way to refer to them anymore. </p>\n\n<p>It can be useful to delete references to an object if you are finished with them, because this gives the garbage collector more information about what is able to be reclaimed. If references remain to a large object, this can cause it to be unreclaimed - even if the rest of your program doesn't actually use that object.</p>\n",
                    "is_accepted": true,
                    "score": 290
                },
                {
                    "body": "<p>\"variables declared implicitly\" are properties of the global object, so delete works on them like it works on any property.  Variables declared with var are indestructible.</p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>IE 5 through 8 has a bug where using delete on properties of a host object (Window, Global, DOM etc) throws TypeError \"object does not support this action\".</p>\n\n<pre><code>var el=document.getElementById(\"anElementId\");\nel.foo = {bar:\"baz\"};\ntry{\n    delete el.foo;\n}catch(){\n    //alert(\"Curses, drats and double double damn!\");\n    el.foo=undefined; // a work around\n}\n</code></pre>\n\n<p>Later if you need to check where the property has a meaning full value use <code>el.foo !== undefined</code> because <code>\"foo\" in el</code> \nwill always return true in IE.</p>\n\n<p>If you really need the property to really disappear...</p>\n\n<pre><code>function hostProxy(host){\n    if(host===null || host===undefined) return host;\n    if(!\"_hostProxy\" in host){\n       host._hostproxy={_host:host,prototype:host};\n    }\n    return host._hostproxy;\n}\nvar el=hostProxy(document.getElementById(\"anElementId\"));\nel.foo = {bar:\"baz\"};\n\ndelete el.foo; // removing property if a non-host object\n</code></pre>\n\n<p>if your need to use the host object with host api...</p>\n\n<pre><code>el.parent.removeChild(el._host);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>based on @Guffa 's answer. I found the following method works for me:</p>\n\n<pre><code>var obj = {\n    helloText: \"Hello World!\"\n};\n\nobj = null;\n\ndelete obj;\n</code></pre>\n\n<p>By setting the obj to <code>null</code> first, you removed all the reference to it, then you can delete it completely.</p>\n\n<p>I didn't test it on other browser, but this works in phonegap 1.7.0</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Aside from the GC questions, for performance one should consider the optimizations that the browser may be doing in the background -></p>\n\n<p><a href=\"http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/\" rel=\"nofollow\">http://coding.smashingmagazine.com/2012/11/05/writing-fast-memory-efficient-javascript/</a></p>\n\n<p>It appears it may be better to null the reference then to delete it as that may change the behind-the-scenes 'class' Chrome uses.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I stumbled across this article in my search for this same answer.  What I ended up doing is just popping out <code>obj.pop()</code> all the stored values/objects in my object so I could reuse the object.  Not sure if this is bad practice or not.  This technique came in handy for me testing my code in Chrome Dev tools or FireFox Web Console.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Setting a variable to <code>null</code> makes sure to break any references to objects in all browsers including circular references being made between the DOM elements and Javascript scopes. By using <code>delete</code> command we are marking objects to be cleared on the next run of the Garbage collection, but if there are multiple variables referencing the same object, deleting a single variable WILL NOT free the object, it will just remove the linkage between that variable and the object. And on the next run of the Garbage collection, only the variable will be cleaned.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Just found a <a href=\"http://jsperf.com/delete-vs-undefined-vs-null/3\" rel=\"nofollow\">jsperf</a> you may consider interesting in light of this matter. (it could be handy to keep it around to complete the picture)</p>\n\n<p><em>It compares <strong>delete</strong>, setting <strong>null</strong> and setting <strong>undefined</strong>.</em></p>\n\n<p>But keep in mind that it tests the case when you delete/set property many times.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm a bit confused with JavaScript's <code>delete</code> operator. Take the following piece of code:</p>\n\n<pre><code>var obj = {\n    helloText: \"Hello World!\"\n};\n\nvar foo = obj;\n\ndelete obj;\n</code></pre>\n\n<p>After this piece of code has been executed, <code>obj</code> is <code>null</code>, but <code>foo</code> still refers to an object exactly like <code>obj</code>. I'm guessing this object is the same object that <code>foo</code> pointed to.</p>\n\n<p>This confuses me, because I expected that writing <code>delete obj</code> deleted the object that <code>obj</code> was pointing to in memory\u2014not just the variable <code>obj</code>.</p>\n\n<p>Is this because JavaScript's Garbage Collector is working on a retain/release basis, so that if I didn't have any other variables pointing to the object, it <em>would</em> be removed from memory?</p>\n\n<p>(By the way, my testing was done in Safari 4.)</p>\n",
            "last_activity_date": 1423761420,
            "question_id": 742623,
            "score": 224,
            "tags": [
                "javascript",
                "pointers",
                "object",
                "memory-management",
                "garbage-collection"
            ],
            "title": "Deleting Objects in JavaScript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Here is an example how to achieve what you need:</p>\n\n<p>1) <strong>Draw something</strong> (taken from <a href=\"http://www.html5canvastutorials.com/tutorials/html5-canvas-shape-fill/\">canvas tutorial</a>)</p>\n\n<pre><code>&lt;canvas id=\"myCanvas\" width=\"578\" height=\"200\"&gt;&lt;/canvas&gt;\n&lt;script&gt;\n    var canvas = document.getElementById('myCanvas');\n    var context = canvas.getContext('2d');\n\n    // begin custom shape\n    context.beginPath();\n    context.moveTo(170, 80);\n    context.bezierCurveTo(130, 100, 130, 150, 230, 150);\n    context.bezierCurveTo(250, 180, 320, 180, 340, 150);\n    context.bezierCurveTo(420, 150, 420, 120, 390, 100);\n    context.bezierCurveTo(430, 40, 370, 30, 340, 50);\n    context.bezierCurveTo(320, 5, 250, 20, 250, 50);\n    context.bezierCurveTo(200, 5, 150, 20, 170, 80);\n\n    // complete custom shape\n    context.closePath();\n    context.lineWidth = 5;\n    context.fillStyle = '#8ED6FF';\n    context.fill();\n    context.strokeStyle = 'blue';\n    context.stroke();\n&lt;/script&gt;\n</code></pre>\n\n<p>2) <strong>Convert canvas image to URL format (base64)</strong></p>\n\n<pre><code>var dataURL = canvas.toDataURL();\n</code></pre>\n\n<p>3) <strong>Send it to your server via Ajax</strong></p>\n\n<pre><code>$.ajax({\n  type: \"POST\",\n  url: \"script.php\",\n  data: { \n     imgBase64: dataURL\n  }\n}).done(function(o) {\n  console.log('saved'); \n  // If you want the file to be visible in the browser \n  // - please modify the callback in javascript. All you\n  // need is to return the url to the file, you just saved \n  // and than put the image in your browser.\n});\n</code></pre>\n\n<p>3) <strong>Save base64 on your server as an image</strong> (here is <a href=\"http://stackoverflow.com/questions/1532993/i-have-a-base64-encoded-png-how-do-i-write-the-image-to-a-file-in-php\">how to do this in PHP</a>, the same ideas is in every language. Server side in PHP can be <a href=\"http://j-query.blogspot.com/2011/02/save-base64-encoded-canvas-image-to-png.html\">found here</a>):</p>\n",
                    "is_accepted": true,
                    "score": 60
                },
                {
                    "body": "<p>I played with this two weeks ago, it's very simple. The only problem is that all the tutorials just talk about saving the image locally. This is how I did it:</p>\n\n<p>1) I set up a form so I can use a POST method.</p>\n\n<p>2) When the user is done drawing, he can click the \"Save\" button.</p>\n\n<p>3) When the button is clicked I take the image data and put it into a hidden field. After that I submit the form.</p>\n\n<pre><code>document.getElementById('my_hidden').value = canvas.toDataURL('image/png');\ndocument.forms[\"form1\"].submit();\n</code></pre>\n\n<p>4) When the form is submited I have this small php script:</p>\n\n<pre><code>&lt;?php \n$upload_dir = somehow_get_upload_dir();  //implement this function yourself\n$img = $_POST['my_hidden'];\n$img = str_replace('data:image/png;base64,', '', $img);\n$img = str_replace(' ', '+', $img);\n$data = base64_decode($img);\n$file = $upload_dir.\"image_name.png\";\n$success = file_put_contents($file, $data);\nheader('Location: '.$_POST['return_url']);\n?&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>If you want to save data that is derived from a Javascript <code>canvas.toDataURL()</code> function, you have to convert blanks into plusses. If you do not do that, the decoded data is corrupted:</p>\n\n<pre><code>&lt;?php\n  $encodedData = str_replace(' ','+',$encodedData);\n  $decocedData = base64_decode($encodedData);\n?&gt;\n</code></pre>\n\n<p><a href=\"http://php.net/manual/ro/function.base64-decode.php\" rel=\"nofollow\">http://php.net/manual/ro/function.base64-decode.php</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>This worked for me. It's a different approach but it works.\nBasically it uses javascript to create a \"screenshot\" or pixel recreation\nof the contents of a target div, then saves it to your server with a form and php file.</p>\n\n<p>It isn't always accurate and won't capture iframes but is useful for canvases\nand other elements.</p>\n\n<p><a href=\"http://www.kubilayerdogan.net/?p=304\" rel=\"nofollow\">http://www.kubilayerdogan.net/?p=304</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>In addition to Salvador Dali's answer: </p>\n\n<p>on the server side don't forget that the data comes in base64 <strong>string</strong> format. It's important because in some programming languages you need to explisitely say that this string should be regarded as <strong>bytes</strong> not simple Unicode string. </p>\n\n<p>Otherwise decoding won't work: the image will be saved but it will be an unreadable file.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm working on a generative art project where I would like to allow users to save the resulting images from an algorithm.  The general idea is:</p>\n\n<p>*create an image on HTML5 Canvas using generative algorithm\n*when the image is completed, allow user to save the canvas as an image file to server\n*Allow the user to either download the image or add it to a gallery of pieces of produced using the algorithm.</p>\n\n<p>However, I'm stuck on the second step :(  I just started javascript programming in the last month and have very little experience with php/AJAX, but thought that (perhaps) this was a reasonable project to learn them through.</p>\n\n<p>After some help from google, I found this blog post, which seemed to be exactly what I wanted:</p>\n\n<p><a href=\"http://permadi.com/blog/2010/10/html5-saving-canvas-image-data-using-php-and-ajax/\">http://permadi.com/blog/2010/10/html5-saving-canvas-image-data-using-php-and-ajax/</a></p>\n\n<p>Which led to the javscript code:</p>\n\n<pre><code>function saveImage() {\n    var canvasData = canvas.toDataURL(\"image/png\");\n    var ajax = new XMLHttpRequest();\n    ajax.open(\"POST\",'testSave.php',false);\n    ajax.onreadystatechange = function() {\n        console.log(ajax.responseText);\n    }\n    ajax.setRequestHeader('Content-Type', 'application/upload');\n    ajax.send(\"imgData=\"+canvasData);\n\n}\n</code></pre>\n\n<p>and corresponding php (testSave.php):</p>\n\n<pre><code>&lt;?php\nif (isset($GLOBALS[\"HTTP_RAW_POST_DATA\"])) {\n  $imageData=$GLOBALS['HTTP_RAW_POST_DATA'];\n  $filteredData=substr($imageData, strpos($imageData, \",\")+1);\n  $unencodedData=base64_decode($filteredData);\n  $fp = fopen('/path/to/file.png', 'wb' );\n  fwrite( $fp, $unencodedData);\n  fclose( $fp );\n}\n?&gt;\n</code></pre>\n\n<p>But this doesn't seem to do anything at all :(</p>\n\n<p>More googling turns up this blog post:</p>\n\n<p><a href=\"http://www.kevinsookocheff.com/2011/07/27/saving-canvas-data-to-an-image-file-with-javascript-and-php/\">http://www.kevinsookocheff.com/2011/07/27/saving-canvas-data-to-an-image-file-with-javascript-and-php/</a></p>\n\n<p>Which is based off of the previous tutorial.  Not very different, but perhaps worth a try:</p>\n\n<pre><code>&lt;?php\n$data = $_POST['imgData'];\n\n$file = \"/path/to/file.png\";\n\n$uri =  substr($data,strpos($data,\",\")+1);\n\nfile_put_contents($file, base64_decode($uri));\n\necho $file;\n?&gt;\n</code></pre>\n\n<p>This one creates a file (yay!) but its corrupted and doesn't seem to contain anything.  It also appears to be empty (file size of 0)...</p>\n\n<p>Is there anything really obvious that I'm doing wrong?  The path where I'm storing my file is writable, so that isn't an issue... but nothing seems to be happening and I'm not really sure how to debug this.</p>\n\n<p>Thanks!</p>\n\n<p>EDIT:</p>\n\n<p>Following Salvidor Dali's link I changed the ajax request to be:</p>\n\n<pre><code>function saveImage() {\n    var canvasData = canvas.toDataURL(\"image/png\");\n    var xmlHttpReq = false;       \n    if (window.XMLHttpRequest) {\n        ajax = new XMLHttpRequest();\n    }\n\n    else if (window.ActiveXObject) {\n        ajax = new ActiveXObject(\"Microsoft.XMLHTTP\");\n    }\n   ajax.open('POST', 'testSave.php', false);\n   ajax.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n   ajax.onreadystatechange = function() {\n        console.log(ajax.responseText);\n    }\n   ajax.send(\"imgData=\"+canvasData);\n}\n</code></pre>\n\n<p>And now the image file is created and isn't empty!  It seems as if the content type matters and that changing it to x-www-form-urlencoded allowed the image data to be sent.</p>\n\n<p>The console returns the (rather large) string of base64 code and the datafile is ~140 kB.  However, I still can't open it and it seems to not be formatted as an image :(</p>\n",
            "last_activity_date": 1414164440,
            "question_id": 13198131,
            "score": 69,
            "tags": [
                "javascript",
                "php",
                "ajax",
                "canvas"
            ],
            "title": "How to save a HTML5 Canvas as Image on a server"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>Use <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/association-of-controls-and-forms.html#dom-cva-setcustomvalidity\"><code>setCustomValidity</code></a>:</p>\n\n<pre><code>document.addEventListener(\"DOMContentLoaded\", function() {\n    var elements = document.getElementsByTagName(\"INPUT\");\n    for (var i = 0; i &lt; elements.length; i++) {\n        elements[i].oninvalid = function(e) {\n            e.target.setCustomValidity(\"\");\n            if (!e.target.validity.valid) {\n                e.target.setCustomValidity(\"This field cannot be left blank\");\n            }\n        };\n        elements[i].oninput = function(e) {\n            e.target.setCustomValidity(\"\");\n        };\n    }\n})\n</code></pre>\n\n<p>I <a href=\"http://jsfiddle.net/robertc/X8UXQ/190/\">changed to vanilla JavaScript</a> from Mootools as suggested by itpastorn in the comments, but you should be able to work out the Mootools equivalent if necessary.</p>\n\n<p>--edit</p>\n\n<p>I've updated the code here as <code>setCustomValidity</code> works slightly differently to what I understood when I originally answered.  If <code>setCustomValidity</code> is set to anything other than the empty string it will cause the field to be considered invalid; therefore you must clear it before testing validity, you can't just set it and forget.</p>\n\n<p>--further edit</p>\n\n<p>As pointed out in @thomasvdb's comment below, you need to clear the custom validity in some event outside of <code>invalid</code> otherwise there may be an extra pass through the <code>oninvalid</code> handler to clear it.</p>\n",
                    "is_accepted": true,
                    "score": 90
                },
                {
                    "body": "<p>If you feel that the validation string really should not be set by code, you can set you input element's title attribute to read \"This field cannot be left blank\". (Works in Chrome 10)</p>\n\n<pre><code>title=\"This field should not be left blank.\"\n</code></pre>\n\n<p>See <a href=\"http://jsfiddle.net/kaleb/nfgfP/8/\">http://jsfiddle.net/kaleb/nfgfP/8/</a></p>\n\n<p>And in Firefox, you can add this attribute:</p>\n\n<pre><code>x-moz-errormessage=\"This field should not be left blank.\"\n</code></pre>\n\n<h3>Edit</h3>\n\n<p>This seems to have changed since I originally wrote this answer.  Now adding a title does not change the validity message, it just adds an addendum to the message.  The fiddle above still applies.</p>\n",
                    "is_accepted": false,
                    "score": 40
                },
                {
                    "body": "<p>I have made a small library to ease changing and translating the error messages. You can even change the texts by error type which is currently not available using <code>title</code> in Chrome or <code>x-moz-errormessage</code> in Firefox. Go <a href=\"https://github.com/javanto/civem.js\">check it out on GitHub</a>, and give feedback.</p>\n\n<p>It's used like:</p>\n\n<pre><code>&lt;input type=\"email\" required data-errormessage-value-missing=\"Please input something\"&gt;\n</code></pre>\n\n<p>There's a <a href=\"http://jsfiddle.net/hleinone/njSbH/\">demo available at jsFiddle</a>.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>It's very simple to control custom messages with the help of the <code>HTML5</code> <code>oninvalid</code> event</p>\n\n<p>Here is the code:</p>\n\n<pre><code>User ID \n&lt;input id=\"UserID\"  type=\"text\" required \n       oninvalid=\"this.setCustomValidity('User ID is a must')\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>It's very simple to control custom messages with the help of <code>HTML5</code> event <code>oninvalid</code></p>\n\n<p>Here is code: </p>\n\n<pre><code>&lt;input id=\"UserID\"  type=\"text\" required=\"required\"\n       oninvalid=\"this.setCustomValidity('Witinnovation')\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<p>The easiest and cleanest way I've found is to use a data attribute to store your custom error. Test the node for validity and handle the error by using some custom html. <img src=\"http://i.stack.imgur.com/NeZ6B.png\" alt=\"enter image description here\"></p>\n\n<p>le javascript</p>\n\n<pre><code>if(node.validity.patternMismatch)\n        {\n            message = node.dataset.patternError;\n        }\n</code></pre>\n\n<p>and some super HTML5</p>\n\n<pre><code>&lt;input type=\"text\" id=\"city\" name=\"city\" data-pattern-error=\"Please use only letters for your city.\" pattern=\"[A-z ']*\" required&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is some code that handle Custom Error Message in HTML5</p>\n\n<pre><code>&lt;input type=\"text\" id=\"username\" required placeholder=\"Enter Name\"\n    oninvalid=\"this.setCustomValidity('Enter User Name Here')\"\n    oninput=\"setCustomValidity('')\"  /&gt;\n</code></pre>\n\n<p>This is the most important part:</p>\n\n<pre><code>    oninput=\"setCustomValidity('')\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Try this one its better and tested.</p>\n\n<p><strong>HTML:</strong></p>\n\n<pre><code>&lt;form id=\"myform\"&gt;\n    &lt;input id=\"email\" oninvalid=\"InvalidMsg(this);\" name=\"email\" oninput=\"InvalidMsg(this);\"  type=\"email\" required=\"required\" /&gt;\n    &lt;input type=\"submit\" /&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p><strong>JAVASCRIPT :</strong></p>\n\n<pre><code>function InvalidMsg(textbox) {\n    if (textbox.value == '') {\n        textbox.setCustomValidity('Required email address');\n    }\n    else if (textbox.validity.typeMismatch){{\n        textbox.setCustomValidity('please enter a valid email address');\n    }\n    else {\n       textbox.setCustomValidity('');\n    }\n    return true;\n}\n</code></pre>\n\n<p><strong>Demo :</strong></p>\n\n<p><a href=\"http://jsfiddle.net/patelriki13/Sqq8e/\" rel=\"nofollow\">http://jsfiddle.net/patelriki13/Sqq8e/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>By setting and unsetting the <code>setCustomValidity</code> in the right time, the validation message will work flawlessly.</p>\n\n<pre><code>&lt;input name=\"Username\" required \noninvalid=\"this.setCustomValidity('Username cannot be empty.')\" \nonchange=\"this.setCustomValidity('')\" type=\"text\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Constraint Validation: Native Client Side Validation for Web Forms </p>\n\n<p><a href=\"http://www.html5rocks.com/en/tutorials/forms/constraintvalidation/\" rel=\"nofollow\">http://www.html5rocks.com/en/tutorials/forms/constraintvalidation/</a></p>\n\n<p>Browsers supports\n<a href=\"http://caniuse.com/#feat=form-validation\" rel=\"nofollow\">http://caniuse.com/#feat=form-validation</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've got the following HTML5 form: <a href=\"http://jsfiddle.net/nfgfP/\">http://jsfiddle.net/nfgfP/</a></p>\n\n<p>Currently when I hit enter when they're both blank a popup box appears saying \"Please fill out this field\" how would I change that default message to \"This field cannot be left blank\"?</p>\n\n<p><strong>EDIT:</strong> Also note that the type password field's error message is simply <code>*****</code>. To recreate this give the username a value and hit submit.</p>\n\n<p><strong>EDIT</strong>: I'm using Chrome 10 for testing. Please do the same</p>\n",
            "last_activity_date": 1413709478,
            "question_id": 5272433,
            "score": 86,
            "tags": [
                "javascript",
                "html",
                "html5",
                "forms"
            ],
            "title": "HTML5 form required attribute. Set custom validation message?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>If you aren't dynamically loading scripts or marking them as defer or async, then scripts are loaded in the order encountered in the page.  It doesn't matter whether it's an external script or an inline script - they are executed in the order they are encountered in the page.  Inline scripts that come after external scripts have are held until all external scripts that came before them have loaded and run.</p>\n\n<p>Async scripts (regardless of how they are specified as async) load and run in an unpredictable order.  The browser loads them in parallel and it is free to run them in whatever order it wants.</p>\n\n<p>There is no predictable order among multiple async things.  If one needed a predictable order, then it would have to be coded in by registering for load notifications from the async scripts and manually sequencing javascript calls when the appropriate things are loaded.</p>\n\n<p>When a script tag is inserted dynamically, how the execution order behaves will depend upon the browser.  You can see how Firefox behaves in <a href=\"https://developer.mozilla.org/En/HTML/Element/Script\">this reference article</a>.  In a nutshell, the newer versions of Firefox default a dynamically added script tag to async unless the script tag has been set otherwise.  </p>\n\n<p>Here's a quote from that article:</p>\n\n<blockquote>\n  <p>script-inserted scripts execute asynchronously in IE and WebKit, but\n  synchronously in Opera and pre-4.0 Firefox.</p>\n</blockquote>\n\n<p>The relevant part of the HTML5 spec (for newer compliant browsers) is <a href=\"http://www.w3.org/TR/html5/scripting-1.html#script\">here</a>.  There is a lot written in there about async behavior.  Obviously, this spec doesn't apply to older browsers (or mal-confirming browsers) who's behavior you would probably have to test to determine.</p>\n\n<p>A quote from the HTML5 spec:</p>\n\n<blockquote>\n  <p>Then, the first of the following options that describes the situation\n  must be followed:</p>\n  \n  <p><strong>If the element has a src attribute, and the element has a defer\n  attribute, and the element has been flagged as \"parser-inserted\", and\n  the element does not have an async attribute</strong> \n  The element must be added\n  to the end of the list of scripts that will execute when the document\n  has finished parsing associated with the Document of the parser that\n  created the element.</p>\n  \n  <p>The task that the networking task source places on the task queue once\n  the fetching algorithm has completed must set the element's \"ready to\n  be parser-executed\" flag. The parser will handle executing the script.</p>\n  \n  <p><strong>If the element has a src attribute, and the element has been flagged\n  as \"parser-inserted\", and the element does not have an async attribute</strong>\n  The element is the pending parsing-blocking script of the Document of\n  the parser that created the element. (There can only be one such\n  script per Document at a time.)</p>\n  \n  <p>The task that the networking task source places on the task queue once\n  the fetching algorithm has completed must set the element's \"ready to\n  be parser-executed\" flag. The parser will handle executing the script.</p>\n  \n  <p><strong>If the element does not have a src attribute, and the element has been\n  flagged as \"parser-inserted\", and the Document of the HTML parser or\n  XML parser that created the script element has a style sheet that is\n  blocking scripts</strong> The element is the pending parsing-blocking script of\n  the Document of the parser that created the element. (There can only\n  be one such script per Document at a time.)</p>\n  \n  <p>Set the element's \"ready to be parser-executed\" flag. The parser will\n  handle executing the script.</p>\n  \n  <p><strong>If the element has a src attribute, does not have an async attribute,\n  and does not have the \"force-async\" flag set</strong> The element must be added\n  to the end of the list of scripts that will execute in order as soon\n  as possible associated with the Document of the script element at the\n  time the prepare a script algorithm started.</p>\n  \n  <p>The task that the networking task source places on the task queue once\n  the fetching algorithm has completed must run the following steps:</p>\n  \n  <p><strong>If the element is not now the first element in the list of scripts\n  that will execute in order as soon as possible to which it was added\n  above,</strong> then mark the element as ready but abort these steps without\n  executing the script yet.</p>\n  \n  <p>Execution: Execute the script block corresponding to the first script\n  element in this list of scripts that will execute in order as soon as\n  possible.</p>\n  \n  <p>Remove the first element from this list of scripts that will execute\n  in order as soon as possible.</p>\n  \n  <p>If this list of scripts that will execute in order as soon as possible\n  is still not empty and the first entry has already been marked as\n  ready, then jump back to the step labeled execution.</p>\n  \n  <p><strong>If the element has a src attribute</strong> The element must be added to the\n  set of scripts that will execute as soon as possible of the Document\n  of the script element at the time the prepare a script algorithm\n  started.</p>\n  \n  <p>The task that the networking task source places on the task queue once\n  the fetching algorithm has completed must execute the script block and\n  then remove the element from the set of scripts that will execute as\n  soon as possible.</p>\n  \n  <p><strong>Otherwise</strong> The user agent must immediately execute the script block,\n  even if other scripts are already executing.</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 85
                },
                {
                    "body": "<p>The browser will execute the scripts in the order it finds them. If you call an external script, it will block the page until the script has been loaded and executed.</p>\n\n<p>To test this fact:</p>\n\n<pre><code>// file: test.php\nsleep(10);\ndie(\"alert('Done!');\");\n\n// HTML file:\n&lt;script type=\"text/javascript\" src=\"test.php\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Dynamically added scripts are executed as soon as they are appended to the document.</p>\n\n<p>To test this fact:</p>\n\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Test&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        var s = document.createElement('script');\n        s.type = \"text/javascript\";\n        s.src = \"link.js\"; // file contains alert(\"hello!\");\n        document.body.appendChild(s);\n        alert(\"appended\");\n    &lt;/script&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        alert(\"final\");\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Order of alerts is \"appended\" -> \"hello!\" -> \"final\"</p>\n\n<p>If in a script you attempt to access an element that hasn't been reached yet (example: <code>&lt;script&gt;do something with #blah&lt;/script&gt;&lt;div id=\"blah\"&gt;&lt;/div&gt;</code>) then you will get an error.</p>\n\n<p>Overall, yes you can include external scripts and then access their functions and variables, but only if you exit the current <code>&lt;script&gt;</code> tag and start a new one.</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>There are so many different ways to include JavaScript in a html page. I know about the following options:</p>\n\n<ul>\n<li>inline code or loaded from external URI</li>\n<li>included in &lt;head> or &lt;body> tag [<a href=\"http://stackoverflow.com/questions/1213281/does-javascript-have-to-be-in-the-head-tags\">1</a>,<a href=\"http://stackoverflow.com/questions/1362039/style-and-script-tags-in-html-body-why-notder\">2</a>]</li>\n<li>having none, <code>defer</code> or <code>async</code> attribute (only external scripts)</li>\n<li>included in static source or added dynamically by other scripts (at different parse states, with different methods)</li>\n</ul>\n\n<p>Not counting browserscripts from the harddisk, javascript:URIs and <code>onEvent</code>-attributes [<a href=\"http://docstore.mik.ua/orelly/webprog/jscript/ch12_02.htm\">3</a>], there are already 16 alternatives to get JS executed and I'm sure I forgot something.</p>\n\n<p>I'm not so concerned with fast (parallel) loading, I'm more curious about the execution order (which may depend on loading order and <a href=\"http://docstore.mik.ua/orelly/webprog/jscript/ch12_03.htm\">document order</a>). <strong>Is there a good</strong> (cross-browser) <strong>reference that covers really all cases?</strong> E.g. <a href=\"http://www.websiteoptimization.com/speed/tweak/defer/\">http://www.websiteoptimization.com/speed/tweak/defer/</a> only deals with 6 of them, and tests mostly old browsers.</p>\n\n<p>As I fear there's not, here is my specific question: I've got some (external) head scripts for initialisation and script loading. Then I've got two static, inline scripts in the end of the body. The first one lets the script loader dynamically append another script element (referencing external js) to the body. The second of the static, inline scripts wants to use js from the added, external script. Can it rely on the other having been executed (and why :-)?</p>\n",
            "last_activity_date": 1327534485,
            "question_id": 8996852,
            "score": 61,
            "tags": [
                "javascript",
                "load-order"
            ],
            "title": "load and execute order of scripts"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>In most browsers, you can use the <code>insertNode()</code>  method of the Range you obtain from the selection. In IE &lt; 9 you can use <code>pasteHTML()</code>, as you mentioned. Below is a function to do this in all major browsers. If content is already selected, it is replaced, so this is effectively a paste operation. Also, I added code to place the caret after the end of the inserted content.</p>\n\n<p>jsFiddle: <a href=\"http://jsfiddle.net/jwvha/1/\">http://jsfiddle.net/jwvha/1/</a></p>\n\n<p>Code:</p>\n\n<pre><code>function pasteHtmlAtCaret(html) {\n    var sel, range;\n    if (window.getSelection) {\n        // IE9 and non-IE\n        sel = window.getSelection();\n        if (sel.getRangeAt &amp;&amp; sel.rangeCount) {\n            range = sel.getRangeAt(0);\n            range.deleteContents();\n\n            // Range.createContextualFragment() would be useful here but is\n            // only relatively recently standardized and is not supported in\n            // some browsers (IE9, for one)\n            var el = document.createElement(\"div\");\n            el.innerHTML = html;\n            var frag = document.createDocumentFragment(), node, lastNode;\n            while ( (node = el.firstChild) ) {\n                lastNode = frag.appendChild(node);\n            }\n            range.insertNode(frag);\n\n            // Preserve the selection\n            if (lastNode) {\n                range = range.cloneRange();\n                range.setStartAfter(lastNode);\n                range.collapse(true);\n                sel.removeAllRanges();\n                sel.addRange(range);\n            }\n        }\n    } else if (document.selection &amp;&amp; document.selection.type != \"Control\") {\n        // IE &lt; 9\n        document.selection.createRange().pasteHTML(html);\n    }\n}\n</code></pre>\n\n<p><strong>UPDATE 21 AUGUST 2013</strong></p>\n\n<p>As requested in the comments, here is an updated example with an extra parameter that specifies whether or not to select the inserted content.</p>\n\n<p>Demo: <a href=\"http://jsfiddle.net/timdown/jwvha/527/\">http://jsfiddle.net/timdown/jwvha/527/</a></p>\n\n<p>Code:</p>\n\n<pre><code>function pasteHtmlAtCaret(html, selectPastedContent) {\n    var sel, range;\n    if (window.getSelection) {\n        // IE9 and non-IE\n        sel = window.getSelection();\n        if (sel.getRangeAt &amp;&amp; sel.rangeCount) {\n            range = sel.getRangeAt(0);\n            range.deleteContents();\n\n            // Range.createContextualFragment() would be useful here but is\n            // only relatively recently standardized and is not supported in\n            // some browsers (IE9, for one)\n            var el = document.createElement(\"div\");\n            el.innerHTML = html;\n            var frag = document.createDocumentFragment(), node, lastNode;\n            while ( (node = el.firstChild) ) {\n                lastNode = frag.appendChild(node);\n            }\n            var firstNode = frag.firstChild;\n            range.insertNode(frag);\n\n            // Preserve the selection\n            if (lastNode) {\n                range = range.cloneRange();\n                range.setStartAfter(lastNode);\n                if (selectPastedContent) {\n                    range.setStartBefore(firstNode);\n                } else {\n                    range.collapse(true);\n                }\n                sel.removeAllRanges();\n                sel.addRange(range);\n            }\n        }\n    } else if ( (sel = document.selection) &amp;&amp; sel.type != \"Control\") {\n        // IE &lt; 9\n        var originalRange = sel.createRange();\n        originalRange.collapse(true);\n        sel.createRange().pasteHTML(html);\n        if (selectPastedContent) {\n            range = sel.createRange();\n            range.setEndPoint(\"StartToStart\", originalRange);\n            range.select();\n        }\n    }\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 72
                },
                {
                    "body": "<pre><code>var doc = document.getElementById(\"your_iframe\").contentWindow.document;\n\n// IE &lt;= 10\nif (document.selection){\n    var range = doc.selection.createRange();\n        range.pasteHTML(\"&lt;b&gt;Some bold text&lt;/b&gt;\");\n\n// IE 11 &amp;&amp; Firefox, Opera .....\n}else if(document.getSelection){\n    var range = doc.getSelection().getRangeAt(0);\n    var nnode = doc.createElement(\"b\");\n    range.surroundContents(nnode);\n    nnode.innerHTML = \"Some bold text\";\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                }
            ],
            "body": "<p>I have a div with contenteditable set and I am capturing keypress using jquery to call preventDefault() when the enter key is pressed. Similar to  <a href=\"http://stackoverflow.com/questions/2920150/insert-text-at-cursor-in-a-content-editable-div\">this question</a> which inserts text at the cursor, I would like to directly insert html, for brevity we'll say its a br tag. Using the answer to the question above actually works in IE as it uses the range.pasteHTML method, but in other browsers the br tag  would appear as plain text and not html. How could I modify the answer to insert html and not text ?</p>\n",
            "last_activity_date": 1404939760,
            "question_id": 6690752,
            "score": 29,
            "tags": [
                "javascript",
                "jquery",
                "contenteditable"
            ],
            "title": "Insert html at caret in a contenteditable div"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Quoting from the <a href=\"http://en.wikipedia.org/wiki/Web_Storage\" rel=\"nofollow\">Wikipedia article on Web Storage</a>:</p>\n\n<blockquote>\n  <p>Web storage can be viewed simplistically as an improvement on cookies, providing much greater storage capacity (<strong>10 MB per origin in Google Chrome(<a href=\"https://plus.google.com/u/0/+FrancoisBeaufort/posts/S5Q9HqDB8bh\" rel=\"nofollow\">https://plus.google.com/u/0/+FrancoisBeaufort/posts/S5Q9HqDB8bh</a>), Mozilla Firefox, and Opera; 10 MB per storage area in Internet Explorer</strong>) and better programmatic interfaces.</p>\n</blockquote>\n\n<p>And also quoting from a <a href=\"http://ejohn.org/blog/dom-storage/\" rel=\"nofollow\">John Resig article</a> [posted January 2007]:</p>\n\n<blockquote>\n  <p><strong>Storage Space</strong></p>\n  \n  <p>It is implied that, with DOM Storage,\n  you have considerably more storage\n  space than the typical user agent\n  limitations imposed upon Cookies.\n  However, the amount that is provided\n  is not defined in the specification,\n  nor is it meaningfully broadcast by\n  the user agent.</p>\n  \n  <p>If you look at the Mozilla source code\n  we can see that 5120KB is the default\n  storage size for an entire domain.\n  This gives you considerably more space\n  to work with than a typical 2KB\n  cookie.</p>\n  \n  <p><strong>However, the size of this storage area\n  can be customized by the user</strong> (so a\n  5MB storage area is not guaranteed,\n  nor is it implied) and the user agent\n  (Opera, for example, may only provide\n  3MB - but only time will tell.)</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 155
                },
                {
                    "body": "<p>Actually Opera doesn't have 5MB limit. It offers to increase limit as applications requires more. User can even choose \"Unlimited storage\" for a domain. </p>\n\n<p>You can easily <a href=\"http://arty.name/localstorage.html\">test localStorage limits/quota</a> yourself.</p>\n",
                    "is_accepted": false,
                    "score": 67
                },
                {
                    "body": "<p>Don't assume 5MB is available - localStorage capacity varies by browser, with 2.5MB, 5MB and unlimited being the most common values.\nSource: <a href=\"http://dev-test.nemikor.com/web-storage/support-test/\">http://dev-test.nemikor.com/web-storage/support-test/</a></p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>I'm doing the following:   </p>\n\n<pre><code>getLocalStorageSizeLimit = function () {\n\n    var maxLength = Math.pow(2,24);\n    var preLength = 0;\n    var hugeString = \"0\";\n    var testString;\n    var keyName = \"testingLengthKey\";\n\n    //2^24 = 16777216 should be enough to all browsers\n    testString = (new Array(Math.pow(2, 24))).join(\"X\");\n\n    while (maxLength !== preLength) {\n        try  {\n            localStorage.setItem(keyName, testString);\n\n            preLength = testString.length;\n            maxLength = Math.ceil(preLength + ((hugeString.length - preLength) / 2));\n\n            testString = hugeString.substr(0, maxLength);\n        } catch (e) {\n            hugeString = testString;\n\n            maxLength = Math.floor(testString.length - (testString.length - preLength) / 2);\n            testString = hugeString.substr(0, maxLength);\n        }\n    }\n\n    localStorage.removeItem(keyName);\n\n    maxLength = JSON.stringify(this.storageObject).length + maxLength + keyName.length - 2;\n\n    return maxLength;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a straightforward script for finding out the limit:</p>\n\n<pre><code>if (localStorage &amp;&amp; !localStorage.getItem('size')) {\n    var i = 0;\n    try {\n        // Test up to 10 MB\n        for (i = 250; i &lt;= 10000; i += 250) {\n            localStorage.setItem('test', new Array((i * 1024) + 1).join('a'));\n        }\n    } catch (e) {\n        localStorage.removeItem('test');\n        localStorage.setItem('size', i - 250);            \n    }\n}\n</code></pre>\n\n<p>Here's <a href=\"https://gist.github.com/cdmckay/13fededb6cc6756a435d#file-local-storage-size-js\">the gist</a>, <a href=\"http://jsfiddle.net/53xcc4LL/\">JSFiddle</a> and <a href=\"http://cdmckay.org/blog/2014/09/12/finding-out-the-size-of-localstorage/\">blog post</a>. </p>\n\n<p>The script will test setting increasingly larger strings of text until the browser throws and exception. At that point it\u2019ll clear out the test data and set a size key in localStorage storing the size in kilobytes.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>You don't want to stringify large objects into a single localStorage entry. That would be very inefficient - the whole thing would have to be parsed and re-encoded every time some slight detail changes. Also, JSON can't handle multiple cross references within an object structure and wipes out a lot of details, e.g. the constructor, non-numerical properties of arrays, what's in a sparse entry, etc. </p>\n\n<p>Instead, you can use <a href=\"http://rhaboo.org\" rel=\"nofollow\">http://rhaboo.org</a>. It stores large objects using lots of localStorage entries so you can make small changes quickly. The restored objects are much more accurate copies of the saved ones and the API is incredibly simple. E.g.:</p>\n\n<pre><code>var store = Rhaboo.persistent('Some name');\nstore.write('count', store.count ? store.count+1 : 1);\nstore.write('somethingfancy', {\n  one: ['man', 'went'],\n  2: 'mow',\n  went: [  2, { mow: ['a', 'meadow' ] }, {}  ]\n});\nstore.somethingfancy.went[1].mow.write(1, 'lawn');\n</code></pre>\n\n<p>BTW, I wrote it.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Since <code>localStorage</code> (currently) only supports strings as values and in order to that the objects have to be stringified (stored as JSON-string), before they can be stored, I wondered if there is a defined limitation regarding the length of the values.</p>\n\n<p>Does anyone know if there is a definition which applies to all browsers?</p>\n",
            "last_activity_date": 1421298661,
            "question_id": 2989284,
            "score": 141,
            "tags": [
                "javascript",
                "html5",
                "local-storage"
            ],
            "title": "What is the max size of localStorage values?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>you need to parse  your xml with jquery json parse...i.e</p>\n\n<pre><code>  var parsed_json = $.parseJSON(xml);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>alert(xml.data[0].city);</p>\n\n<p>use xml.data[\"Data\"][0].city instead</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Your JSON-data contains the property <code>Data</code>, but you're accessing <code>data</code>. It's case sensitive</p>\n\n<pre><code>function jsonparser1() {\n    $.ajax({\n        type: \"GET\",\n        url: \"http://10.211.2.219:8080/SampleWebService/sample.do\",\n        dataType: \"json\",\n        success: function (xml) {\n            alert(xml.Data[0].City);\n            result = xml.Code;\n            document.myform.result1.value = result;\n        },\n    });\n}        \n</code></pre>\n\n<p><strong>EDIT</strong> Also City and Code is in the wrong case. (Thanks @Christopher Kenney)</p>\n\n<p><strong>EDIT2</strong> It should also be json, and not jsonp (at least in this case)</p>\n\n<p><strong>UPDATE</strong> According to your latest comment, you should read this answer: <a href=\"http://stackoverflow.com/a/11736771/325836\">http://stackoverflow.com/a/11736771/325836</a> by Abdul Munim</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Try alert(xml.Data[0].City)\nCase sensitivly!</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h2>Concept explained</h2>\n\n<p>Are you trying do a cross-domain AJAX call? Meaning, your service is not hosted in your same web application path? Your web-service must support method injection in order to do JSONP.</p>\n\n<p>Your code seems fine and it should work if your web services and your web application hosted in the same domain.</p>\n\n<p>When you do a <code>$.ajax</code> with <code>dataType: 'jsonp'</code> meaning that jQuery is actually adding a new parameter to the query URL.</p>\n\n<p>For instance, if your URL is <code>http://10.211.2.219:8080/SampleWebService/sample.do</code> then jQuery will add <code>?callback={some_random_dynamically_generated_method}</code>.</p>\n\n<p>This method is more kind of a proxy actually attached in <code>window</code> object. This is nothing specific but does look something like this:</p>\n\n<pre><code>window.some_random_dynamically_generated_method = function(actualJsonpData) {\n    //here actually has reference to the success function mentioned with $.ajax\n    //so it just calls the success method like this: \n    successCallback(actualJsonData);\n}\n</code></pre>\n\n<p><strong>Summary</strong></p>\n\n<p>Your client code seems just fine. However, you have to modify your server-code to wrap your JSON data with a function name that passed with query string. i.e.</p>\n\n<p>If you have reqested with query string</p>\n\n<pre><code>?callback=my_callback_method\n</code></pre>\n\n<p>then, your server must response data wrapped like this:</p>\n\n<pre><code>my_callback_method({your json serialized data});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 48
                },
                {
                    "body": "<p>You need to use the ajax-cross-origin plugin:\n<a href=\"http://www.ajax-cross-origin.com/\" rel=\"nofollow\">http://www.ajax-cross-origin.com/</a></p>\n\n<p>Just add the option crossOrigin: true</p>\n\n<pre><code>$.ajax({\n    crossOrigin: true,\n    url: url,\n    success: function(data) {\n        console.log(data);\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I would like to parse JSON array data with jquery ajax with the following code:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head&gt;\n&lt;title&gt;Sample&lt;/title&gt;\n&lt;script type=\"text/javascript\" src=\"Scripts/jquery-1.7.2.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n    var result;\n    function jsonparser1() {\n        $.ajax({\n            type: \"GET\",\n            url: \"http://10.211.2.219:8080/SampleWebService/sample.do\",\n            dataType: \"jsonp\",\n            success: function (xml) {\n                alert(xml.data[0].city);\n                result = xml.code;\n                document.myform.result1.value = result;\n            },\n        });\n    }        \n&lt;/script&gt;    \n&lt;/head&gt;\n&lt;body&gt;\n&lt;p id=\"details\"&gt;&lt;/p&gt;\n&lt;form name=\"myform\"&gt;\n    &lt;input type=\"button\" name=\"clickme\" value=\"Click here to show the first name\" onclick=jsonparser1() /&gt;\n    &lt;input type=\"text\" name=\"result1\" readonly=\"true\"/&gt;        \n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>My JSON data is:</p>\n\n<pre><code>{\"Data\":   [{\"Address\":\"chetpet\",\"FirstName\":\"arulmani\",\"Id\":1,\"LastName\":\"sathish\",\"City\":\"chennai\"},{\"Address\":\"ramapuram\",\"FirstName\":\"raj\",\"Id\":2,\"LastName\":\"nagu\",\"City\":\"chennai\"},{\"Address\":\"ramapuram\",\"FirstName\":\"raj\",\"Id\":2,\"LastName\":\"nagu\",\"City\":\"chennai\"},{\"Address\":\"ramapuram\",\"FirstName\":\"ramaraj\",\"Id\":3,\"LastName\":\"rajesh\",\"City\":\"chennai\"},{\"Address\":\"ramapuram\",\"FirstName\":\"yendran\",\"Id\":3,\"LastName\":\"sathi\",\"City\":\"chennai\"}],\"Code\":true}\n</code></pre>\n\n<p>But i am not getting any output...anybody please help out...</p>\n",
            "last_activity_date": 1407099681,
            "question_id": 11736431,
            "score": 17,
            "tags": [
                "javascript",
                "jquery",
                "ajax",
                "json"
            ],
            "title": "Make cross-domain ajax JSONP request with jQuery"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Specs: <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\">ECMAScript 5</a> and <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST-ARCH/ECMA-262,%203rd%20edition,%20December%201999.pdf\">ECMAScript 3</a></p>\n\n<hr>\n\n<p><a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_11.1.5\">Section 11.1.5</a> in the ECMAScript 5 specification: </p>\n\n<pre><code>ObjectLiteral :\n    { }\n    { PropertyNameAndValueList }\n    { PropertyNameAndValueList , }\n</code></pre>\n\n<p>So yes, it is part of the specification. </p>\n\n<p><strong>Update:</strong> Apparently this is new in ES5. In ES3 (page 41), the definition was just:</p>\n\n<pre><code>ObjectLiteral :\n    { }\n    { PropertyNameAndValueList }\n</code></pre>\n\n<hr>\n\n<p>For arrays literals (<a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_11.1.4\">Section 11.1.4</a>) it is even more interesting (<strong>Update:</strong> this already existed in ES3):</p>\n\n<pre><code>ArrayLiteral :\n    [ Elisionopt ]\n    [ ElementList ]\n    [ ElementList , Elision_opt ]\n</code></pre>\n\n<p>(where <code>Elision_opt</code> is Elision<sub>opt</sub>, meaning the Elision is optional)</p>\n\n<p><code>Elision</code> is defined as </p>\n\n<pre><code>Elision :\n    ,\n    Elision ,\n</code></pre>\n\n<p>So, an array literal like </p>\n\n<pre><code>var arr = [1,2,,,,];\n</code></pre>\n\n<p>is perfectly legal. This creates an array with two elements but sets the array length to <code>2 + 3 = 5</code>.</p>\n\n<p>Don't expect too much from IE (before IE9)...</p>\n",
                    "is_accepted": true,
                    "score": 98
                },
                {
                    "body": "<p>You can find the specification for javascript (aka ECMA Script) <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\" rel=\"nofollow\">here</a>.  You can find the relevant definition for arrays on page 63 and as Felix noted, the object definition a couple of pages later on page 65.</p>\n\n<p>While this specification says it is fine to have a trailing <code>,</code> I don't know if that would be true looking back a few versions.  As you've noted IE8- will crap itself if you leave a trailing comma but Chrome and FF handle it fine.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>What is even funnier, IE7 gives</p>\n\n<pre><code>[1,].length  --&gt; 2\n</code></pre>\n\n<p>while Firefox and Chrome</p>\n\n<pre><code>[1,].length  --&gt; 1\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Just a quick reminder/warning that this is one of the areas in which the <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\">JavaScript/ECMAScript standard</a> and <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf\">JSON standard</a> differ; trailing commas are <em>valid</em> in JS but <em>not valid</em> in JSON.</p>\n",
                    "is_accepted": false,
                    "score": 21
                }
            ],
            "body": "<p>Are trailing commas standard in JavaScript, or do most browsers like Chrome and FF just tolerate them?  </p>\n\n<p>I thought they were standard, but IE8 puked after encountering one\u2014of course IE not supporting something hardly means it's not standard.</p>\n\n<p>Here's an example of what I mean:  (after the last element of the books array)</p>\n\n<pre><code>    var viewModel = {\n        books: ko.observableArray([\n        { title: \"..\", display: function() { return \"..\"; } },\n        { title: \"..\", display: function() { return \"..\"; } },\n        { title: \"..\", display: function() { return \"..\"; } }, // &lt;--right there\n    ]),\n        currentTemplate: ko.observable(\"bookTemplate1\"),\n        displayTemplate: function() { return viewModel.currentTemplate(); }\n    };\n</code></pre>\n",
            "last_activity_date": 1406572270,
            "question_id": 7246618,
            "score": 99,
            "tags": [
                "javascript"
            ],
            "title": "Trailing commas in JavaScript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>//works in IE, not sure about other browsers...</p>\n\n<pre><code>alert(classes[x].style.cssText);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Adapted from <a href=\"http://www.javascriptkit.com/domref/cssrule.shtml\">here</a>, building on scunliffe's answer:</p>\n\n<pre><code>function getStyle(className) {\n    var classes = document.styleSheets[0].rules || document.styleSheets[0].cssRules;\n    for (var x = 0; x &lt; classes.length; x++) {\n        if (classes[x].selectorText == className) {\n            (classes[x].cssText) ? alert(classes[x].cssText) : alert(classes[x].style.cssText);\n        }\n    }\n}\ngetStyle('.test');\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<p>Some browser differences to be aware of:</p>\n\n<p>Given the CSS:</p>\n\n<pre><code>div#a { ... }\ndiv#b, div#c { ... }\n</code></pre>\n\n<p>and given InsDel's example, classes will have <strong>2 classes in FF and 3 classes in IE7</strong>.</p>\n\n<p>My example illustrates this:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n   \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;style&gt;\n    div#a { }\n    div#b, div#c { }\n    &lt;/style&gt;\n    &lt;script&gt;\n    function PrintRules() {\n    var rules = document.styleSheets[0].rules || document.styleSheets[0].cssRules\n        for(var x=0;x&lt;rules.length;x++) {\n            document.getElementById(\"rules\").innerHTML += rules[x].selectorText + \"&lt;br /&gt;\";\n        }\n    }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;input onclick=\"PrintRules()\" type=\"button\" value=\"Print Rules\" /&gt;&lt;br /&gt;\n    RULES:\n    &lt;div id=\"rules\"&gt;&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I made a similar helper  function \nwhich shows the unneeded styles for this page. appends a <code>&lt;div&gt;</code> to the body listing all styles that where not used.</p>\n\n<p>(to be used with the firebug console)</p>\n\n<pre><code>(function getStyles(){var CSSrules,allRules,CSSSheets, unNeeded, currentRule;\nCSSSheets=document.styleSheets;\n\nfor(j=0;j&lt;CSSSheets.length;j++){\nfor(i=0;i&lt;CSSSheets[j].cssRules.length;i++){\n    currentRule = CSSSheets[j].cssRules[i].selectorText;\n\n    if(!document.querySelectorAll(currentRule).length){ \n       unNeeded+=CSSSheets[j].cssRules[i].cssText+\"&lt;br&gt;\"; \n  }       \n }\n}\n\ndocBody=document.getElementsByTagName(\"body\")[0];\nallRulesContainer=document.createElement(\"div\");\ndocBody.appendChild(allRulesContainer);\nallRulesContainer.innerHTML=unNeeded+isHover;\nreturn false\n})()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>function getStyle(className) {\n    document.styleSheets.item(\"menu\").cssRules.item(className).cssText;\n}\ngetStyle('.test')\n</code></pre>\n\n<p>Note : \"menu\" is an element ID which you have applied CSS.\n\"className\" a css class name which we need to get its text.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This version will go through all of the stylesheets on a page. For my needs, the styles were usually in the 2nd to last of the 20+ stylesheets, so I check them backwards.</p>\n\n<pre><code>    var getStyle = function(className){\n        var x, sheets,classes;\n        for( sheets=document.styleSheets.length-1; sheets&gt;=0; sheets-- ){\n            classes = document.styleSheets[sheets].rules || document.styleSheets[sheets].cssRules;\n            for(x=0;x&lt;classes.length;x++) {\n                if(classes[x].selectorText===className) {\n                    return  (classes[x].cssText ? classes[x].cssText : classes[x].style.cssText);\n                }\n            }\n        }\n        return false;\n    };\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I added return of object where attributes are parsed out style/values:</p>\n\n<pre><code>var getClassStyle = function(className){\n    var x, sheets,classes;\n    for( sheets=document.styleSheets.length-1; sheets&gt;=0; sheets-- ){\n        classes = document.styleSheets[sheets].rules || document.styleSheets[sheets].cssRules;\n        for(x=0;x&lt;classes.length;x++) {\n            if(classes[x].selectorText===className){\n                classStyleTxt = (classes[x].cssText ? classes[x].cssText : classes[x].style.cssText).match(/\\{\\s*([^{}]+)\\s*\\}/)[1];\n                var classStyles = {};\n                var styleSets = classStyleTxt.match(/([^;:]+:\\s*[^;:]+\\s*)/g);\n                for(y=0;y&lt;styleSets.length;y++){\n                    var style = styleSets[y].match(/\\s*([^:;]+):\\s*([^;:]+)/);\n                    if(style.length &gt; 2)\n                        classStyles[style[1]]=style[2];\n                }\n                return classStyles;\n            }\n        }\n    }\n    return false;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Since the accepted answer from \"nsdel\" is only avilable with one stylesheet in a document this is the adapted full working solution:</p>\n\n<pre><code>    /**\n     * Gets styles by a classname\n     * \n     * @notice The className must be 1:1 the same as in the CSS\n     * @param string className_\n     */\n    function getStyle(className_) {\n\n        var styleSheets = global_.document.styleSheets;\n        var styleSheetsLength = styleSheets.length;\n        for(var i = 0; i &lt; styleSheetsLength; i++){\n            var classes = styleSheets[i].rules || styleSheets[i].cssRules;\n            var classesLength = classes.length;\n            for (var x = 0; x &lt; classesLength; x++) {\n                if (classes[x].selectorText == className_) {\n                    var ret;\n                    if(classes[x].cssText){\n                        ret = classes[x].cssText;\n                    } else {\n                        ret = classes[x].style.cssText;\n                    }\n                    if(ret.indexOf(classes[x].selectorText) == -1){\n                        ret = classes[x].selectorText + \"{\" + ret + \"}\";\n                    }\n                    return ret;\n                }\n            }\n        }\n\n    }\n</code></pre>\n\n<p>Notice: The selector must be the same as in the CSS.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I would like to return a string with all of the contents of a CSS rule, like the format you'd see in an inline style. I'd like to be able to do this without knowing what is contained in a particular rule, so I can't just pull them out by style name (like <code>.style.width</code> etc.) </p>\n\n<p>The CSS:</p>\n\n<pre><code>.test {\n    width:80px;\n    height:50px;\n    background-color:#808080;\n}\n</code></pre>\n\n<p>The code so far:</p>\n\n<pre><code>function getStyle(className) {\n    var classes = document.styleSheets[0].rules || document.styleSheets[0].cssRules\n    for(var x=0;x&lt;classes.length;x++) {\n    \tif(classes[x].selectorText==className) {\n    \t\t//this is where I can collect the style information, but how?\n    \t}\n    }\n}\ngetStyle('.test')\n</code></pre>\n",
            "last_activity_date": 1422874952,
            "question_id": 324486,
            "score": 42,
            "tags": [
                "javascript",
                "html",
                "css"
            ],
            "title": "How do you read CSS rule values with JavaScript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>If title is not set, use 'ERROR' as default value.</p>\n\n<p>More generic:</p>\n\n<pre><code>var foobar = foo || default;\n</code></pre>\n\n<p>Reads: Set foobar to <code>foo</code> or <code>default</code>.\nYou could even chain this up many times:</p>\n\n<pre><code>var foobar = foo || bar || something || 42;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>It means the <code>title</code> argument is optional. So if you call the method with no arguments it will use a default value of <code>\"Error\"</code>.</p>\n\n<p>It's shorthand for writing:</p>\n\n<pre><code>if (!title) {\n  title = \"Error\";\n}\n</code></pre>\n\n<p>This kind of shorthand trick with boolean expressions is common in Perl too. With the expression:</p>\n\n<pre><code>a OR b\n</code></pre>\n\n<p>it evaluates to <code>true</code> if either <code>a</code> or <code>b</code> is <code>true</code>. So if <code>a</code> is true you don't need to check <code>b</code> at all. This is called short-circuit boolean evaluation so:</p>\n\n<pre><code>var title = title || \"Error\";\n</code></pre>\n\n<p>basically checks if <code>title</code> evaluates to <code>false</code>. If it does, it \"returns\" <code>\"Error\"</code>, otherwise it returns <code>title</code>.</p>\n",
                    "is_accepted": true,
                    "score": 61
                },
                {
                    "body": "<p>double pipe operator</p>\n\n<p>is this example usefull?</p>\n\n<pre><code>var section = document.getElementById('special');\nif(!section){\n     section = document.getElementById('main');\n}\n</code></pre>\n\n<p>can also be</p>\n\n<pre><code>var section = document.getElementById('special') || document.getElementById('main');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Basically it checks if the value before the || evaluates to true, if yes, it takes this value, if not, it takes the value after the ||.</p>\n\n<p>Values for which it will take the value after the || (as far as i remember):</p>\n\n<ul>\n<li>undefined</li>\n<li>false</li>\n<li>0</li>\n<li>'' (Null or Null string)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Double pipe stands for logical \"OR\". This is not really the case when the \"parameter not set\", since strictly in the javascript if you have code like this:</p>\n\n<pre><code>function foo(par) {\n}\n</code></pre>\n\n<p>Then calls </p>\n\n<pre><code>foo()\nfoo(\"\")\nfoo(null)\nfoo(undefined)\nfoo(0)\n</code></pre>\n\n<p>are not equivalent. </p>\n\n<p>Double pipe (||) will cast the first argument to boolean and if resulting boolean is true - do the assignment otherwise it will assign the right part.</p>\n\n<p>This matters if you check for unset parameter. </p>\n\n<p>Let's say, we have a function setSalary that has one optional parameter. If user does not supply the parameter then the default value of 10 should be used.</p>\n\n<p>if you do the check like this:</p>\n\n<pre><code>function setSalary(dollars) {\n    salary = dollars || 10\n}\n</code></pre>\n\n<p>This will give unexpected result on call like </p>\n\n<pre><code>setSalary(0) \n</code></pre>\n\n<p>It will still set the 10 following the flow described above.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Explaining this a little more...</p>\n\n<p>The <code>||</code> operator is the logical-<code>or</code> operator.  The result is true if the first part is true and it is true if the second part is true and it is true if both parts are true.  For clarity, here it is in a table:</p>\n\n<pre><code> X | Y | X || Y \n---+---+--------\n F | F |   F    \n---+---+--------\n F | T |   T    \n---+---+--------\n T | F |   T    \n---+---+--------\n T | T |   T    \n---+---+--------\n</code></pre>\n\n<p>Now notice something here?  If <code>X</code> is true, the result is always true.  So if we know that <code>X</code> is true we don't have to check <code>Y</code> at all.  Many languages thus implement \"short circuit\" evaluators for logical-<code>or</code> (and logical-<code>and</code> coming from the other direction).  They check the first element and if that's true they don't bother checking the second at all.  The result (in logical terms) is the same, but in terms of execution there's potentially a huge difference if the second element is expensive to calculate.</p>\n\n<p>So what does this have to do with your example?</p>\n\n<pre><code>var title   = title || 'Error';\n</code></pre>\n\n<p>Let's look at that.  The <code>title</code> element is passed in to your function.  In JavaScript if you don't pass in a parameter, it defaults to a null value.  Also in JavaScript if your variable is a null value it is considered to be false by the logical operators.  So if this function is called with a title given, it is a non-false value and thus assigned to the local variable.  If, however, it is not given a value, it is a null value and thus false.  The logical-<code>or</code> operator then evaluates the second expression and returns 'Error' instead.  So now the local variable is given the value 'Error'.</p>\n\n<p>This works because of the implementation of logical expressions in JavaScript.  It doesn't return a proper boolean value (<code>true</code> or <code>false</code>) but instead returns the value it was given under some rules as to what's considered equivalent to <code>true</code> and what's considered equivalent to <code>false</code>.  Look up your JavaScript reference to learn what JavaScript considers to be true or false in boolean contexts.</p>\n",
                    "is_accepted": false,
                    "score": 10
                }
            ],
            "body": "<p>Iam debugging some javascript, and cant explain what this \"||\" does?</p>\n\n<pre><code>  loadingError: function(title, msg){\n        var title   = title || 'Error';\n        var msg     = msg || 'Error on Request';\n\n        new my.widget.InformationBox({\n            title: title,\n            message: msg,\n            type: 'error'\n        }).show();\n    }\n</code></pre>\n\n<p>Can someone give me an hint, why this guy is using var title = title || 'ERROR' ??</p>\n",
            "last_activity_date": 1405593212,
            "question_id": 2802055,
            "score": 51,
            "tags": [
                "javascript"
            ],
            "title": "What does this construct (x = x || y) mean?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>From <a href=\"http://developer.chrome.com/extensions/runtime.html#event-onMessage\">the documentation for <code>chrome.runtime.onMessage.addListener</code></a>:</p>\n\n<blockquote>\n  <p>This function becomes invalid when the event listener returns, unless you return true from the event listener to indicate you wish to send a response asynchronously (this will keep the message channel open to the other end until sendResponse is called). </p>\n</blockquote>\n\n<p>So you just need to add <code>return true;</code> after the call to <code>getUrls</code> to indicate that you'll call the response function asynchronously.</p>\n",
                    "is_accepted": true,
                    "score": 64
                },
                {
                    "body": "<p>The accepted answer is correct, I just wanted to add sample code that simplifies this.\nThe problem is that the API (in my view) is not well designed because it forces us devs to know if a particular message will be handled async or not. If you handle many different messages this becomes an impossible task because you never know if deep down some function a passed-in sendResponse will be called async or not.\nConsider this:</p>\n\n<pre><code>chrome.extension.onMessage.addListener(function (request, sender, sendResponseParam) {\nif (request.method == \"method1\") {\n    handleMethod1(sendResponse);\n}\n</code></pre>\n\n<p>How can I know if deep down <code>handleMethod1</code> the call will be async or not? How can someone that modifies <code>handleMethod1</code> knows that it will break a caller by introducing something async?</p>\n\n<p>My solution is this:</p>\n\n<pre><code>chrome.extension.onMessage.addListener(function (request, sender, sendResponseParam) {\n\nvar responseStatus = { bCalled: false };\n\nfunction sendResponse(obj) {  //dummy wrapper to deal with exceptions and detect async\n    try {\n        sendResponseParam(obj);\n    } catch (e) {\n        //error handling\n    }\n    responseStatus.bCalled= true;\n}\n\nif (request.method == \"method1\") {\n    handleMethod1(sendResponse);\n}\nelse if (request.method == \"method2\") {\n    handleMethod2(sendResponse);\n}\n...\n\nif (!responseStatus.bCalled) //if its set, the call wasnt async, else it is.\n    return true;\n</code></pre>\n\n<p>}</p>\n\n<p>This automatically handles the return value, regardless of how you choose to handle the message. Note that this assumes that you never forget to call the response function. Also note that chromium could have automated this for us, I dont see why they didnt.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am trying to pass messages between content script and the extension</p>\n\n<p>Here is what I have in content-script</p>\n\n<pre><code>chrome.runtime.sendMessage({type: \"getUrls\"}, function(response) {\n  console.log(response)\n});\n</code></pre>\n\n<p>And in the background script I have</p>\n\n<pre><code>chrome.runtime.onMessage.addListener(\n  function(request, sender, sendResponse) {\n    if (request.type == \"getUrls\"){\n      getUrls(request, sender, sendResponse)\n    }\n});\n\nfunction getUrls(request, sender, sendResponse){\n  var resp = sendResponse;\n  $.ajax({\n    url: \"http://localhost:3000/urls\",\n    method: 'GET',\n    success: function(d){\n      resp({urls: d})\n    }\n  });\n\n}\n</code></pre>\n\n<p>Now if I send the response before the ajax call in the <code>getUrls</code> function, the response is sent successfully, but in the success method of the ajax call when I send the response it doesn't send it, when I go into debugging I can see that the port is null inside the code for <code>sendResponse</code> function.</p>\n",
            "last_activity_date": 1410113779,
            "question_id": 20077487,
            "score": 23,
            "tags": [
                "javascript",
                "google-chrome",
                "google-chrome-extension",
                "google-chrome-app"
            ],
            "title": "Chrome Extension Message passing: response not sent"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>Make the button a submit element, so it'll be automatic.</p>\n\n<pre><code>&lt;input type=\"submit\" id=\"btnSearch\" value=\"Search\" onclick=\"return doSomething();\" /&gt;\n</code></pre>\n\n<p>Note that you'll need a <code>&lt;form&gt;</code> element containing the input fields to make this work (thanks Sergey Ilinsky).</p>\n\n<p>It's not a good practice to redefine standard behaviour, the <kbd>Enter</kbd> key should always call the submit button on a form.</p>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>In jQuery, this would work:</p>\n\n<pre><code>$(\"#id_of_textbox\").keyup(function(event){\n    if(event.keyCode == 13){\n        $(\"#id_of_button\").click();\n    }\n});\n</code></pre>\n\n<p>Sorry, I don't know how to do it in plain JavaScript, but maybe someone else could extrapolate this out?</p>\n\n<p>P.S.: use jQuery ;)</p>\n",
                    "is_accepted": true,
                    "score": 691
                },
                {
                    "body": "<p>Figured this out:</p>\n\n<pre><code>    &lt;input type=\"text\" id=\"txtSearch\" onkeypress=\"searchKeyPress(event);\" /&gt;\n    &lt;input type=\"button\" id=\"btnSearch\" Value=\"Search\" onclick=\"doSomething();\" /&gt;\n\n    &lt;script&gt;\n    function searchKeyPress(e)\n    {\n        // look for window.event in case event isn't passed in\n        e = e || window.event;\n        if (e.keyCode == 13)\n        {\n            document.getElementById('btnSearch').click();\n        }\n    }\n    &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 102
                },
                {
                    "body": "<p>Then just code it in!</p>\n\n<pre><code>&lt;input type=\"text\" id=\"txtSearch\" onkeydown=\"if (event.keyCode == 13) document.getElementById('btnSearch').click()\"/&gt;\n&lt;input type=\"button\" id=\"btnSearch\" value=\"Search\" onclick=\"doSomething();\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 219
                },
                {
                    "body": "<pre><code>onkeydown=\"javascript:if (event.which || event.keyCode){if ((event.which == 13) || (event.keyCode == 13)) {document.getElementById('btnSearch').click();}};\"\n</code></pre>\n\n<p>This is just something I have from a somewhat recent project... I found it on the net, and I have no idea if there's a better way or not in plain old JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Although, I'm pretty sure that as long as there is only one field in the form and one submit button, hitting enter should submit the form, even if there is another form on the page.</p>\n\n<p>You can then capture the form onsubmit with js and do whatever validation or callbacks you want.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<pre><code>event.returnValue = false\n</code></pre>\n\n<p>Use it when handling the event or in the function your event handler calls.</p>\n\n<p>It works in Internet Explorer and Opera at least.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This <strong><a href=\"https://developer.mozilla.org/en/DOM/element.onchange\" rel=\"nofollow\">onchange</a></strong> attempt is close, but misbehaves with respect to browser back then forward  (on Safari 4.0.5 and Firefox 3.6.3), so ultimately, I wouldn't recommend it.</p>\n\n<pre><code>&lt;input type=\"text\" id=\"txtSearch\" onchange=\"doSomething();\" /&gt;\n&lt;input type=\"button\" id=\"btnSearch\" value=\"Search\" onclick=\"doSomething();\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In plain JavaScript,</p>\n\n<pre><code>if (document.layers) {\n  document.captureEvents(Event.KEYDOWN);\n}\n\ndocument.onkeydown = function (evt) {\n  var keyCode = evt ? (evt.which ? evt.which : evt.keyCode) : event.keyCode;\n  if (keyCode == 13) {\n    // For Enter.\n    // Your function here.\n  }\n  if (keyCode == 27) {\n    // For Escape.\n    // Your function here.\n  } else {\n    return true;\n  }\n};\n</code></pre>\n\n<p>I noticed that the reply is given in jQuery only, so I thought of giving something in plain JavaScript as well.</p>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>This also might help, a small JavaScript function, which works fine:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\nfunction blank(a) { if(a.value == a.defaultValue) a.value = \"\"; }\n\nfunction unblank(a) { if(a.value == \"\") a.value = a.defaultValue; }\n&lt;/script&gt; \n&lt;input type=\"text\" value=\"email goes here\" onfocus=\"blank(this)\" onblur=\"unblank(this)\" /&gt;\n</code></pre>\n\n<p>I know this question is solved, but I just found something, which can be helpful for others.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>To trigger a search every time the enter key is pressed, use this:</p>\n\n<pre><code>$(document).keypress(function(event) {\n    var keycode = (event.keyCode ? event.keyCode : event.which);\n    if (keycode == '13') {\n        $('#btnSearch').click();\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>For jquery mobile I had to do</p>\n\n<pre><code>$('#id_of_textbox').live(\"keyup\", function(event) {\n    if(event.keyCode == '13'){\n    $('#id_of_button').click();\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This is a solution for all the <strong><a href=\"http://yuilibrary.com/\" rel=\"nofollow\">YUI</a></strong> lovers out there:</p>\n\n<pre><code>Y.on('keydown', function() {\n  if(event.keyCode == 13){\n    Y.one(\"#id_of_button\").simulate(\"click\");\n  }\n}, '#id_of_textbox');\n</code></pre>\n\n<p>In this special case I did have better results using YUI for triggering DOM objects that have been injected with button functionality - but this is another story...</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>One basic trick you can use for this that I haven't seen fully mentioned.  If you want to do an ajax action, or some other work on Enter but don't want to actually submit a form you can do this:</p>\n\n<pre><code>&lt;form onsubmit=\"Search();\" action=\"javascript:void(0);\"&gt;\n    &lt;input type=\"text\" id=\"searchCriteria\" placeholder=\"Search Criteria\"/&gt;\n    &lt;input type=\"button\" onclick=\"Search();\" value=\"Search\" id=\"searchBtn\"/&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Setting action=\"javascript:void(0);\" like this is a shortcut for preventing default behavior essentially.  In this case a method is called whether you hit enter or click the button and an ajax call is made to load some data.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Since no one has used <code>addEventListener</code> yet, here is my version. Given the elements:</p>\n\n<pre><code>&lt;input type = \"text\" id = \"txt\" /&gt;\n&lt;input type = \"button\" id = \"go\" /&gt;\n</code></pre>\n\n<p>I would use the following:</p>\n\n<pre><code>var go = document.getElementById(\"go\");\nvar txt = document.getElementById(\"txt\");\n\ntxt.addEventListener(\"keypress\", function() {\n    if (event.keyCode == 13) go.click();\n});\n</code></pre>\n\n<p>This allows you to change the event type and action separately while keeping the HTML clean.</p>\n\n<blockquote>\n  <p><strong>Note</strong> that it's probably worthwhile to make sure this is outside of a <code>&lt;form&gt;</code> because when I enclosed these elements in them pressing Enter submitted the form and reloaded the page. Took me a few blinks to discover.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<pre><code>document.onkeypress = function (e) {\n e = e || window.event;\n var charCode = (typeof e.which == \"number\") ? e.which : e.keyCode;\n if (charCode == 13) {\n\n        // Do something here\n        printResult();\n    }\n};\n</code></pre>\n\n<p>Heres my two cents. I am working on an app for Windows 8 and want the button to register a click event when I press the Enter button. I am doing this in JS. I tried a couple of suggestions, but had issues. This works just fine.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>Try it:</strong></p>\n\n<pre><code>&lt;input type=\"text\" id=\"txtSearch\"/&gt;\n&lt;input type=\"button\" id=\"btnSearch\" Value=\"Search\"/&gt;\n\n&lt;script&gt;             \n   window.onload = function() {\n     document.getElementById('txtSearch').onkeypress = function searchKeyPress(event) {\n        if (event.keyCode == 13) {\n            document.getElementById('btnSearch').click();\n        }\n    };\n\n    document.getElementById('btnSearch').onclick =doSomething;\n}\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have one text input and one button (see below). How can I use JavaScript to <strong>trigger the button's click event</strong> when the <kbd>Enter</kbd> key is pressed inside the text box?</p>\n\n<p>There is already a different submit button on my current page, so I can't simply make the button a submit button. And, I <em>only</em> want the <kbd>Enter</kbd> key to click this specific button if it is pressed from within this one text box, nothing else.</p>\n\n<pre><code>&lt;input type=\"text\" id=\"txtSearch\" /&gt;\n&lt;input type=\"button\" id=\"btnSearch\" value=\"Search\" onclick=\"doSomething();\" /&gt;\n</code></pre>\n",
            "last_activity_date": 1425559844,
            "question_id": 155188,
            "score": 512,
            "tags": [
                "javascript",
                "button",
                "onclick",
                "onkeypress"
            ],
            "title": "Trigger a button click with JavaScript on the Enter key in a text box"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>When:</p>\n\n<ol>\n<li>you know that there is unflinching cross-browser support for what you are doing, and</li>\n<li>it is not significantly more code to type, and</li>\n<li>it is not significantly less readable, and</li>\n<li>you are reasonably confident that jQuery will not choose different implementations based on the browser to achieve better performance, then:</li>\n</ol>\n\n<p>use JavaScript. Otherwise use jQuery (if you can).</p>\n\n<p><strong>Edit</strong>: This answer applies both when choosing to use jQuery overall versus leaving it out, as well as choosing whether to to use vanilla JS inside jQuery. Choosing between <code>attr('id')</code> and <code>.id</code> leans in favor of JS, while choosing between <code>removeClass('foo')</code> versus <code>.className = .className.replace( new Regexp(\"(?:^|\\\\s+)\"+foo+\"(?:\\\\s+|$)\",'g'), '' )</code> leans in favor of jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I've found there is certainly overlap between JS and JQ. The code you've shown is a good example of that. Frankly, the best reason to use JQ over JS is simply browser compatibility. I always lean toward JQ, even if I can accomplish something in JS.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The correct answer is that you'll <em>always</em> take a performance penalty when using jQuery instead of 'plain old' native JavaScript.  That's because jQuery is a JavaScript Library.  It is not some fancy new version of JavaScript.  </p>\n\n<p>The reason that jQuery is powerful is that it makes some things which are overly tedious in a cross-browser situation (AJAX is one of the best examples) and smooths over the inconsistencies between the myriad of available browsers and provides a consistent API.  It also easily facilitates concepts like chaining, implied iteration, etc, to simplify working on groups of elements together.</p>\n\n<p>Learning jQuery is no substitute for learning JavaScript.  You should have a firm basis in the latter so that you fully appreciate what knowing the former is making easier for you.</p>\n\n<p>-- Edited to encompass comments --</p>\n\n<p>As the comments are quick to point out (and I agree with 100%) the statements above refer to benchmarking code.  A 'native' JavaScript solution (assuming it is well written) will outperform a jQuery solution that accomplishes the same thing in nearly every case (I'd love to see an example otherwise).  jQuery does speed up development time, which is a significant benefit which I do not mean to downplay.  It facilitates easy to read, easy to follow code, which is more than some developers are capable of creating on their own.</p>\n\n<p>In my opinion then, the answer depends on what you're attempting to achieve.  If, as I presumed based on your reference to performance benefits, you're after the best possible speed out of your application, then using jQuery introduces overhead every time you call <code>$()</code>.  If you're going for readability, consistency, cross browser compatibility, etc, then there are certainly reasons to favor jQuery over 'native' JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 43
                },
                {
                    "body": "<p>This is my personal view, but as jQuery is javascript anyway, I think theoretically it cannot perform better than vanilla js ever.</p>\n\n<p>But practically it may perform better than hand-written js, as one's hand-written code may be not as efficient as jQuery.</p>\n\n<p>Bottom-line - for smaller stuff I tend to use vanilla js, for js intensive projects I like to use jQuery and not reinvent the wheel - it's also more productive.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>If you are mostly concerned about performance, your main example hits the nail on the head.  Invoking jQuery unnecessarily or redundantly is, IMHO, the second main cause of slow performance (the first being poor DOM traversal).</p>\n\n<p>It's not <em>really</em> an example of what you're looking for, but I see this so often that it bears mentioning:  One of the best ways to speed up performance of your jQuery scripts is to cache jQuery objects, and/or use chaining:</p>\n\n<pre><code>// poor\n$(this).animate({'opacity':'0'}, function() { $(this).remove(); });\n\n// excellent\nvar element = $(this);\nelement.animate({'opacity':'0'}, function() { element.remove(); });\n\n// poor\n$('.something').load('url');\n$('.something').show();\n\n// excellent\nvar something = $('#container').children('p.something');\nsomething.load('url').show();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Others' answers have focused on the broad question of \"jQuery vs. plain JS.\"  Judging from your OP, I think you were simply wondering when it's better to use vanilla JS if you've already chosen to use jQuery.  Your example is a perfect example of when you should use vanilla JS:</p>\n\n<p><code>$(this).attr('id');</code></p>\n\n<p>Is both slower and (in my opinion) less readable than:</p>\n\n<p><code>this.id</code>.</p>\n\n<p>It's slower because you have to spin up a new JS object just to retrieve the attribute the jQuery way.  Now, if you're going to be using <code>$(this)</code> to perform other operations, then by all means, store that jQuery object in a variable and operate with that.  However, I've run into many situations where I just need an attribute from the element (like <code>id</code> or <code>src</code>).</p>\n\n<blockquote>\n  <p>Are there any other common practices\n  like this? Where certain Javascript\n  operations could be accomplished\n  easier, without bringing jQuery into\n  the mix. Or is this a rare case? (of a\n  jQuery \"shortcut\" actually requiring\n  more code)</p>\n</blockquote>\n\n<p>I think the most common case is the one you describe in your post; people wrapping <code>$(this)</code> in a jQuery object unnecessarily.  I see this most often with <code>id</code> and <code>value</code> (instead using <code>$(this).val()</code>).</p>\n\n<p><strong>Edit:</strong> <a href=\"http://whattheheadsaid.com/2010/10/utilizing-the-awesome-power-of-jquery-to-access-properties-of-an-element\">Here</a>'s an article that explains <em>why</em> using jQuery in the <code>attr()</code> case is slower.  Confession: stole it from the tag wiki, but I think it's worth mentioning for the question.</p>\n\n<p><strong>Edit again:</strong> Given the readability/performance implications of just accessing attributes directly, I'd say a good rule of thumb is probably to try to to use <code>this.&lt;attributename&gt;</code> when possible.  There are probably some instances where this won't work because of browser inconsistencies, but it's probably better to try this first and fall back on jQuery if it doesn't work.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<ul>\n<li><code>this.id</code> (as you know)</li>\n<li><code>this.value</code> (on most input types. only issues I know are IE when a <code>&lt;select&gt;</code> doesn't have <code>value</code> properties set on its <code>&lt;option&gt;</code> elements, or radio inputs in Safari.)</li>\n<li><code>this.className</code> to get or set an entire \"class\" property</li>\n<li><code>this.selectedIndex</code> against a <code>&lt;select&gt;</code> to get the selected index</li>\n<li><code>this.options</code> against a <code>&lt;select&gt;</code> to get a list of <code>&lt;option&gt;</code> elements</li>\n<li><code>this.text</code> against an <code>&lt;option&gt;</code> to get its text content</li>\n<li><code>this.rows</code> against a <code>&lt;table&gt;</code> to get a collection of <code>&lt;tr&gt;</code> elements</li>\n<li><code>this.cells</code> against a <code>&lt;tr&gt;</code> to get its cells (td &amp; th)</li>\n<li><code>this.parentNode</code> to get a direct parent</li>\n<li><code>this.checked</code> to get the checked state of a <code>checkbox</code> <a href=\"http://stackoverflow.com/users/96100/tim-down\">Thanks @Tim Down</a></li>\n<li><code>this.selected</code> to get the selected state of an <code>option</code> <a href=\"http://stackoverflow.com/users/96100/tim-down\">Thanks @Tim Down</a></li>\n<li><code>this.disabled</code> to get the disabled state of an <code>input</code> <a href=\"http://stackoverflow.com/users/96100/tim-down\">Thanks @Tim Down</a></li>\n<li><code>this.readOnly</code> to get the readOnly state of an <code>input</code> <a href=\"http://stackoverflow.com/users/96100/tim-down\">Thanks @Tim Down</a></li>\n<li><code>this.href</code> against an <code>&lt;a&gt;</code> element to get its <code>href</code></li>\n<li><code>this.hostname</code> against an <code>&lt;a&gt;</code> element to get the domain of its <code>href</code></li>\n<li><code>this.pathname</code> against an <code>&lt;a&gt;</code> element to get the path of its <code>href</code></li>\n<li><code>this.search</code> against an <code>&lt;a&gt;</code> element to get the querystring of its <code>href</code></li>\n<li><code>this.src</code> against an element where it is valid to have a <code>src</code></li>\n</ul>\n\n<p>...I think you get the idea.</p>\n\n<p>There will be times when performance is crucial. Like if you're performing something in a loop many times over, you may want to ditch jQuery.</p>\n\n<p><s>In general you can replace:</p>\n\n<pre><code>$(el).attr('someName');\n</code></pre>\n\n<p>with:</s></p>\n\n<p>Above was poorly worded. <code>getAttribute</code> is not a replacement, but it does retrieve the value of an attribute sent from the server, and its corresponding <code>setAttribute</code> will set it. Necessary in some cases.</p>\n\n<p>The sentences below sort of covered it. <a href=\"http://stackoverflow.com/questions/4456231/retrieving-html-attribute-values-the-dom-0-way/4456805#4456805\">See this answer</a> for a better treatment.</p>\n\n<pre><code>el.getAttribute('someName');\n</code></pre>\n\n<p>...in order to access an attribute directly. Note that attributes are not the same as properties (though they mirror each other sometimes). Of course there's <code>setAttribute</code> too.</p>\n\n<p>Say you had a situation where received a page where you need to unwrap all tags of a certain type. It is short and easy with jQuery:</p>\n\n<pre><code>$('span').unwrap();  // unwrap all span elements\n</code></pre>\n\n<p>But if there are many, you may want to do a little native DOM API:</p>\n\n<pre><code>var spans = document.getElementsByTagName('span');\n\nwhile( spans[0] ) {\n    var parent = spans[0].parentNode;\n    while( spans[0].firstChild ) {\n        parent.insertBefore( spans[0].firstChild, spans[0]);\n    }\n    parent.removeChild( spans[0] );\n}\n</code></pre>\n\n<p>This code is pretty short, it performs better than the jQuery version, and can easily be made into a reusable function in your personal library.</p>\n\n<p>It may seem like I have an infinite loop with the outer <code>while</code> because of <code>while(spans[0])</code>, but because we're dealing with a \"live list\" it gets updated when we do the <code>parent.removeChild(span[0]);</code>. This is a pretty nifty feature that we miss out on when working with an Array (or Array-like object) instead.</p>\n",
                    "is_accepted": true,
                    "score": 167
                },
                {
                    "body": "<p>There's already an accepted answer but I believe no answer typed directly here can be comprehensive in its list of native javascript methods/attributes that has practically guaranteed cross-browser support. For that may I redirect you to quirksmode:</p>\n\n<p><a href=\"http://www.quirksmode.org/compatibility.html\">http://www.quirksmode.org/compatibility.html</a></p>\n\n<p>It is perhaps the most comprehensive list of what works and what doesn't work on what browser anywhere. Pay particular attention to the DOM section. It is a lot to read but the point is not to read it all but to use it as a reference.</p>\n\n<p>When I started seriously writing web apps I printed out all the DOM tables and hung them on the wall so that I know at a glance what is safe to use and what requires hacks. These days I just google something like <code>quirksmode parentNode compatibility</code> when I have doubts.</p>\n\n<p>Like anything else, judgement is mostly a matter of experience. I wouldn't really recommend you to read the entire site and memorize all the issues to figure out when to use jQuery and when to use plain JS. Just be aware of the list. It's easy enough to search. With time you will develop an instinct of when plain JS is preferable.</p>\n\n<hr>\n\n<p><em>PS: PPK (the author of the site) also has a very nice book that I do recommend reading</em></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p><code>$(this)</code> is different to <code>this</code> : </p>\n\n<p>By using <code>$(this)</code> you are ensuring the jQuery prototype is being passed onto the object.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The first answer's live properties list of <code>this</code> as a DOM element is quite complete.</p>\n\n<p>You may find also interesting to know some others.</p>\n\n<p>When this is the document :</p>\n\n<ul>\n<li><code>this.forms</code> to get an <code>HTMLCollection</code> of the current document forms,</li>\n<li><code>this.anchors</code> to get an <code>HTMLCollection</code> of all the <code>HTMLAnchorElements</code> with <code>name</code> being set,</li>\n<li><code>this.links</code> to get an <code>HTMLCollection</code> of all the <code>HTMLAnchorElement</code>s with <code>href</code> being set,</li>\n<li><code>this.images</code> to get an <code>HTMLCollection</code> of all the <code>HTMLImageElement</code>s</li>\n<li>and the same with the deprecated applets as <code>this.applets</code></li>\n</ul>\n\n<p>When you work with <code>document.forms</code>, <code>document.forms[formNameOrId]</code> gets the so named or identified form.</p>\n\n<p>When this is a form :</p>\n\n<ul>\n<li><code>this[inputNameOrId]</code> to get the so named or identified field</li>\n</ul>\n\n<p>When this is form field:</p>\n\n<ul>\n<li><code>this.type</code> to get the field type</li>\n</ul>\n\n<p>When learning jQuery selectors, we often skip learning already existing HTML elements properties, which are so fast to access.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There's a framework called... oh guess what? <a href=\"http://vanilla-js.com/\"><code>Vanilla JS</code></a>. Hope you get the joke... :D It sacrifices code legibility for performance... Comparing it to <code>jQuery</code> bellow you can see that retrieving a <code>DOM</code> element by <code>ID</code> is almost <strong>35X</strong> faster. :)</p>\n\n<p>So if you want performance you'd better try Vanilla JS and draw your own conclusions. Maybe you won't experience JavaScript hanging the browser's GUI/locking up the UI thread during intensive code like inside a <code>for</code> loop.</p>\n\n<blockquote>\n  <p>Vanilla JS is a fast, lightweight, cross-platform framework for\n  building incredible, powerful JavaScript applications.</p>\n</blockquote>\n\n<p>On their homepage there's some perf comparisons:</p>\n\n<p><img src=\"http://i.stack.imgur.com/iFaEh.png\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>As usual I'm coming late to this party.</p>\n\n<p>It wasn't the extra functionality that made me decide to use jQuery, as attractive as that was. After all nothing stops you from writing your own functions.</p>\n\n<p>It was the fact that there were so many tricks to learn when modifying the DOM to avoid memory leaks (I'm talking about you IE). To have one central resource that managed all those sort of issues for me, written by people who were a whole lot better JS coders than I ever will be, that was being continually reviewed, revised and tested was god send.</p>\n\n<p>I guess this sort of falls under the cross browser support/abstraction argument.</p>\n\n<p>And of course jQuery does not preclude the use of straight JS when you needed it. I always felt the two seemed to work seamlessly together.</p>\n\n<p>Of course if your browser is not supported by jQuery or you are supporting a low end environment (older phone?) then a large .js file might be a problem. Remember when jQuery used to be tiny? </p>\n\n<p>But normally the performance difference is not an issue of concern. It only has to be fast enough. With Gigahertz of CPU cycles going to waste every second, I'm more concerned with the performance of my coders, the only development resources that doesn't double in power every 18 months.</p>\n\n<p>That said I'm currently looking into accessibility issues and apparently .innerHTML is a bit of a no no with that. jQuery of course depends on .innerHTML, so now I'm looking for a framework that will depend on the somewhat tedious methods that are allowed. And I can imagine such a framework will run slower than jQuery, but as long as it performs well enough, I'll be happy.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have noticed while monitoring/attempting to answer common jQuery questions, that there are certain practices using javascript, instead of jQuery, that actually enable you to <em>write less and do</em> ... well the same amount.  And may also yield performance benefits.</p>\n\n<p>A specific example </p>\n\n<p><code>$(this)</code> vs <code>this</code></p>\n\n<p>Inside a click event referencing the clicked objects id</p>\n\n<p>jQuery</p>\n\n<pre><code>$(this).attr(\"id\");\n</code></pre>\n\n<p>Javascript</p>\n\n<pre><code>this.id;\n</code></pre>\n\n<p>Are there any other common practices like this?  Where certain Javascript operations could be accomplished easier, without bringing jQuery into the mix.  Or is this a rare case? (of a jQuery \"shortcut\" actually requiring more code)</p>\n\n<p><strong>EDIT :</strong> While I appreciate the answers regarding jQuery vs. plain javascript performance, I am actually looking for much more quantitative answers.  <strong>While using jQuery</strong>, instances where one would actually be better off (readability/compactness) to use plain javascript instead of using <code>$()</code>.  In addition to the example I gave in my original question.</p>\n",
            "last_activity_date": 1399725750,
            "question_id": 4651923,
            "score": 179,
            "tags": [
                "javascript",
                "jquery",
                "performance"
            ],
            "title": "When to use Vanilla JavaScript vs. jQuery?"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>Convert a number to a hexadecimal string with:</p>\n\n<pre><code>hexString = yourNumber.toString(16);\n</code></pre>\n\n<p>and reverse the process with:</p>\n\n<pre><code>yourNumber = parseInt(hexString, 16);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1044
                },
                {
                    "body": "<p>The code below will convert the decimal value d to hex. It also allows you to add padding to the hex result. so 0 will become 00 by default.</p>\n\n<pre><code>function decimalToHex(d, padding) {\n    var hex = Number(d).toString(16);\n    padding = typeof (padding) === \"undefined\" || padding === null ? padding = 2 : padding;\n\n    while (hex.length &lt; padding) {\n        hex = \"0\" + hex;\n    }\n\n    return hex;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<pre><code>var number = 3200;\nvar hexString = number.toString(16);\n</code></pre>\n\n<p>The 16 is the radix and there are 16 values in a hexadecimal number :-)</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>If you need to handle things like bit fields or 32-bit colors, then you need to deal with signed numbers. The javascript function toString(16) will return a negative hex number which is usually not what you want. This function does some crazy addition to make it a positive number.</p>\n\n<pre><code>function decimalToHexString(number)\n{\n    if (number &lt; 0)\n    {\n    \tnumber = 0xFFFFFFFF + number + 1;\n    }\n\n    return number.toString(16).toUpperCase();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 68
                },
                {
                    "body": "<pre><code>function dec2hex(i)\n{\n  var result = \"0000\";\n  if      (i &gt;= 0    &amp;&amp; i &lt;= 15)    { result = \"000\" + i.toString(16); }\n  else if (i &gt;= 16   &amp;&amp; i &lt;= 255)   { result = \"00\"  + i.toString(16); }\n  else if (i &gt;= 256  &amp;&amp; i &lt;= 4095)  { result = \"0\"   + i.toString(16); }\n  else if (i &gt;= 4096 &amp;&amp; i &lt;= 65535) { result =         i.toString(16); }\n  return result\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>AFAIK <a href=\"http://stackoverflow.com/questions/57803/how-to-convert-decimal-to-hex-in-javascript/57807#57807\">comment 57807</a> is wrong and should be something like:\n<strong>var hex = Number(d).toString(16);</strong>\ninstead of\n<strong>var hex = parseInt(d, 16);</strong></p>\n\n<pre><code>function decimalToHex(d, padding) {\n    var hex = Number(d).toString(16);\n    padding = typeof (padding) === \"undefined\" || padding === null ? padding = 2 : padding;\n\n    while (hex.length &lt; padding) {\n        hex = \"0\" + hex;\n    }\n\n    return hex;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Without the loop :</p>\n\n<pre><code>function decimalToHex(d) {\n  var hex = Number(d).toString(16);\n  hex = \"000000\".substr(0, 6 - hex.length) + hex; \n  return hex;\n}\n\n//or \"#000000\".substr(0, 7 - hex.length) + hex;\n//or whatever\n//*Thanks to MSDN\n</code></pre>\n\n<p>Also isn't it better not to use loop tests that have to be evaluated\neg instead of:</p>\n\n<pre><code>for (var i = 0; i &lt; hex.length; i++){}\n</code></pre>\n\n<p>have</p>\n\n<pre><code>for (var i = 0, var j = hex.length; i &lt; j; i++){}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>With padding:</p>\n\n<pre><code>function dec2hex(i) {\n   return (i+0x10000).toString(16).substr(-4).toUpperCase();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Constrained/Padded to a set number of characters:</p>\n\n<pre><code>function decimalToHex(decimal, chars) {\n    return (decimal + Math.pow(16, chars)).toString(16).slice(-chars).toUpperCase();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you want to convert a number to a hex representation of an RGBA color value, I've found this to be the most useful combination of several tips from here:</p>\n\n<pre><code>        function toHexString(n) {\n            if(n &lt; 0) {\n                n = 0xFFFFFFFF + n + 1;\n            }\n\n            return \"0x\" + (\"00000000\" + n.toString(16).toUpperCase()).substr(-8);\n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>And if the number is negative?</p>\n\n<p>Here is my version.</p>\n\n<pre><code>function hexdec (hex_string) {\n    hex_string=((hex_string.charAt(1)!='X' &amp;&amp; hex_string.charAt(1)!='x')?hex_string='0X'+hex_string : hex_string);\n    hex_string=(hex_string.charAt(2)&lt;8 ? hex_string =hex_string-0x00000000 : hex_string=hex_string-0xFFFFFFFF-1);\n    return parseInt(hex_string, 10);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function toHex(d) {\n    return  (\"0\"+(Number(d).toString(16))).slice(-2).toUpperCase()\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Combining some of these good ideas for an rgb to hex function (add the # elsewhere for html/css):</p>\n\n<pre><code>function rgb2hex(r,g,b) {\n    if (g !== undefined) \n        return Number(0x1000000 + r*0x10000 + g*0x100 + b).toString(16).substring(1);\n    else \n        return Number(0x1000000 + r[0]*0x10000 + r[1]*0x100 + r[2]).toString(16).substring(1);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I'm doing conversion to hex string in a pretty large loop, so I tried several techniques in order to find the fastest one. My requirements were to have a fixed-length string as a result, and encode negative values properly (-1 => ff..f).</p>\n\n<p>Simple <code>.toString(16)</code> didn't work for me since I needed negative values to be properly encoded. The following code is the quickest I've tested so far on 1-2 byte values (note that <code>symbols</code> defines the number of output symbols you want to get, that is for 4-byte integer it should be equal to 8):</p>\n\n<pre><code>var hex = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'];\nfunction getHexRepresentation(num, symbols) {\n    var result = '';\n    while (symbols--) {\n        result = hex[num &amp; 0xF] + result;\n        num &gt;&gt;= 4;\n    }\n    return result;\n}\n</code></pre>\n\n<p>It performs faster than <code>.toString(16)</code> on 1-2 byte numbers and slower on larger numbers (when <code>symbols</code> >= 6), but still should outperform methods that encode negative values properly.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As the accepted answer states, the easiest way to convert from dec to hex is <code>var hex = dec.toString(16)</code>. However, you may prefer to add a string conversion, as it ensures that string representations like <code>\"12\".toString(16)</code> work correctly.</p>\n\n<pre><code>// avoids a hard to track down bug by returning `c` instead of `12`\n(+\"12\").toString(16);\n</code></pre>\n\n<p>To reverse the process you may also use the solution below, as it is even shorter.</p>\n\n<pre><code>var dec = +(\"0x\" + hex);\n</code></pre>\n\n<p>It seems to be slower in Google Chrome and Firefox, but is significantly faster in Opera. See <a href=\"http://jsperf.com/hex-to-dec\" rel=\"nofollow\">http://jsperf.com/hex-to-dec</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For completion, if you want the <a href=\"http://en.wikipedia.org/wiki/Two%27s_complement\">two's-complement</a> hexadecimal representation of a negative number, you can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#%3E%3E%3E_%28Zero-fill_right_shift%29\">zero-fill-right shift <code>&gt;&gt;&gt;</code> operator</a>. For instance:</p>\n\n\n\n<pre><code>&gt; (-1).toString(16)\n\"-1\"\n\n&gt; ((-2)&gt;&gt;&gt;0).toString(16)\n\"fffffffe\"\n</code></pre>\n\n<p>There is however one limitation: <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Bitwise_Operators#Summary\">javascript bitwise operators treat their operands as a sequence of 32 bits</a>, that is, you get the 32-bits two's-complement.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>To sum it all up;</p>\n\n<pre><code>function toHex(i, pad) {\n\n  if (typeof(pad) === 'undefined' || pad === null) {\n    pad = 2;\n  } \n\n  var strToParse = i.toString(16);\n\n  while (strToParse.length &lt; pad) {\n    strToParse = \"0\" + strToParse;\n  }\n\n  var finalVal =  parseInt(strToParse, 16);\n\n  if ( finalVal &lt; 0 ) {\n    finalVal = 0xFFFFFFFF + finalVal + 1;\n  }\n\n  return finalVal;\n}\n</code></pre>\n\n<p>However, if you don't need to convert it back to an integer at the end (i.e. for colors), then just making sure the values aren't negative should suffice.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The accepted answer did not take into account single digit returned hex codes. This is easily adjusted by:</p>\n\n<pre><code>   function numHex(s)\n   {\n      var a = s.toString(16);\n      if( (a.length % 2) &gt; 0 ){ a = \"0\" + a; }\n      return a;\n   }\n</code></pre>\n\n<p>and</p>\n\n<pre><code>   function strHex(s)\n   {\n      var a = \"\";\n      for( var i=0; i&lt;s.length; i++ ){\n         a = a + numHex( s.charCodeAt(i) );\n         }\n\n      return a;\n   }\n</code></pre>\n\n<p>I believe the above answers have been posted numerous times by others in one form or another.  I wrap these in a toHex() function like so:</p>\n\n<pre><code>   function toHex(s)\n   {\n      var re = new RegExp( /^\\s*(\\+|-)?((\\d+(\\.\\d+)?)|(\\.\\d+))\\s*$/ );\n\n      if( re.test(s) ){ return '#' + strHex( s.toString() ); }\n         else { return 'A' + strHex( s ); }\n   }\n</code></pre>\n\n<p>Note that the numeric regular expression came from <a href=\"http://ntt.cc/2008/05/10/over-10-useful-javascript-regular-expression-functions-to-improve-your-web-applications-efficiency.html\" rel=\"nofollow\">10+ Useful JavaScript Regular Expression Functions to improve your web applications efficiency</a>.</p>\n\n<p>Update: After testing this thing several times I found an error (double quotes in the RegExp) so I fixed that.  HOWEVER!  After quite a bit of testing and having read the post by almaz - I realized I could not get negative numbers to work.  Further - I did some reading up on this and since all Javascript numbers are stored as 64 bit words no matter what - I tried modifying the numHex code to get the 64 bit word.  But it turns out you can not do that.  If you put \"3.14159265\" AS A NUMBER into a variable - all you will be able to get is the \"3\" because the fractional portion is only accessible by multiplying the number by ten(IE:10.0) repeatedly.  Or to put that another way - the HEX value of 0xf causes the FLOATING POINT value to be translated into an INTEGER before it is ANDed which removes everything behind the period.  Rather than taking the value as a whole (ie: 3.14159265) and ANDing the FLOATING POINT value against the 0xf value.  So the best thing to do, in this case, is to convert the 3.14159265 into a STRING and then just convert the string.  Because of the above, it also makes it easy to convert negative numbers because the minus sign just becomes 0x26 on the front of the value.  So what I did was on determining that the variable contains a number - just convert it to a string and convert the string.  What this means to everyone is that on the server side you will need to unhex the incoming string and then to determine the incoming information is numeric.  You can do that easily by just adding a \"#\" to the front of numbers and \"A\" to the front of a character string coming back.  See the toHex() function.</p>\n\n<p>Have fun!</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do you convert decimal values to their hex equivalent in JavaScript?</p>\n",
            "last_activity_date": 1415304185,
            "question_id": 57803,
            "score": 576,
            "tags": [
                "javascript",
                "hex",
                "tostring",
                "base",
                "number-formatting"
            ],
            "title": "How to convert decimal to hex in JavaScript?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>There are multiple ways how to communicate between controllers.</p>\n\n<p>The best one is probably sharing a service:</p>\n\n<pre><code>function FirstController(someDataService) \n{\n  // use the data service, bind to template...\n  // or call methods on someDataService to send a request to server\n}\n\nfunction SecondController(someDataService) \n{\n  // has a reference to the same instance of the service\n  // so if the service updates state for example, this controller knows about it\n}\n</code></pre>\n\n<p>Another way is emitting an event on scope:</p>\n\n<pre><code>function FirstController($scope) \n{\n  $scope.$on('someEvent', function(event, args) {});\n  // another controller or even directive\n}\n\nfunction SecondController($scope) \n{\n  $scope.$emit('someEvent', args);\n}\n</code></pre>\n\n<p>In both cases, you can communicate with any directive as well.</p>\n",
                    "is_accepted": true,
                    "score": 323
                },
                {
                    "body": "<p>See this fiddle: <a href=\"http://jsfiddle.net/simpulton/XqDxG/\">http://jsfiddle.net/simpulton/XqDxG/</a></p>\n\n<p>Also watch the following video: <a href=\"http://www.youtube.com/watch?v=1OALSkJGsRw\">Communicating Between Controllers</a></p>\n\n<p>Html:</p>\n\n<pre><code>&lt;div ng-controller=\"ControllerZero\"&gt;\n  &lt;input ng-model=\"message\" &gt;\n  &lt;button ng-click=\"handleClick(message);\"&gt;LOG&lt;/button&gt;\n&lt;/div&gt;\n\n&lt;div ng-controller=\"ControllerOne\"&gt;\n  &lt;input ng-model=\"message\" &gt;\n&lt;/div&gt;\n\n&lt;div ng-controller=\"ControllerTwo\"&gt;\n  &lt;input ng-model=\"message\" &gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>javascript:</p>\n\n<pre><code>var myModule = angular.module('myModule', []);\nmyModule.factory('mySharedService', function($rootScope) {\n  var sharedService = {};\n\n  sharedService.message = '';\n\n  sharedService.prepForBroadcast = function(msg) {\n    this.message = msg;\n    this.broadcastItem();\n  };\n\n  sharedService.broadcastItem = function() {\n    $rootScope.$broadcast('handleBroadcast');\n  };\n\n  return sharedService;\n});\n\nfunction ControllerZero($scope, sharedService) {\n  $scope.handleClick = function(msg) {\n    sharedService.prepForBroadcast(msg);\n  };\n\n  $scope.$on('handleBroadcast', function() {\n    $scope.message = sharedService.message;\n  });        \n}\n\nfunction ControllerOne($scope, sharedService) {\n  $scope.$on('handleBroadcast', function() {\n    $scope.message = 'ONE: ' + sharedService.message;\n  });        \n}\n\nfunction ControllerTwo($scope, sharedService) {\n  $scope.$on('handleBroadcast', function() {\n    $scope.message = 'TWO: ' + sharedService.message;\n  });\n}\n\nControllerZero.$inject = ['$scope', 'mySharedService'];        \n\nControllerOne.$inject = ['$scope', 'mySharedService'];\n\nControllerTwo.$inject = ['$scope', 'mySharedService'];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 67
                },
                {
                    "body": "<p>Actually using emit and broadcast is inefficient because the event bubbles up and down the scope hierarchy which can easily degrade into performance bottlement for a complex application.</p>\n\n<p>I would suggest to use a service. Here is how I recently implemented it in one of my projects - <a href=\"https://gist.github.com/3384419\">https://gist.github.com/3384419</a>.</p>\n\n<p>Basic idea - register a pubsub/event bus as a service. Then inject that eventbus where ever you need to subscribe or publish events/topics.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Here is a one-page example of two controllers sharing service data: </p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html ng-app=\"project\"&gt;\n&lt;head&gt;\n    &lt;title&gt;Angular: Service example&lt;/title&gt;\n    &lt;script src=\"http://code.angularjs.org/angular-1.0.1.js\"&gt;&lt;/script&gt;\n    &lt;script&gt;\nvar projectModule = angular.module('project',[]);\n\nprojectModule.factory('theService', function() {  \n    return {\n        thing : {\n            x : 100\n        }\n    };\n});\n\nfunction FirstCtrl($scope, theService) {\n    $scope.thing = theService.thing;\n    $scope.name = \"First Controller\";\n}\n\nfunction SecondCtrl($scope, theService) {   \n    $scope.someThing = theService.thing; \n    $scope.name = \"Second Controller!\";\n}\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;  \n    &lt;div ng-controller=\"FirstCtrl\"&gt;\n        &lt;h2&gt;{{name}}&lt;/h2&gt;\n        &lt;input ng-model=\"thing.x\"/&gt;         \n    &lt;/div&gt;\n\n    &lt;div ng-controller=\"SecondCtrl\"&gt;\n        &lt;h2&gt;{{name}}&lt;/h2&gt;\n        &lt;input ng-model=\"someThing.x\"/&gt;             \n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Also here: <a href=\"https://gist.github.com/3595424\">https://gist.github.com/3595424</a></p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>Two more fiddles: (Non service approach)</p>\n\n<p>1) For Parent- Child controller - Using <code>$scope</code> of parent controller to emit/broadcast events.\n     <a href=\"http://jsfiddle.net/laan_sachin/jnj6y/\">http://jsfiddle.net/laan_sachin/jnj6y/</a></p>\n\n<p>2) Using <code>$rootScope</code> across non-related controllers.\n     <a href=\"http://jsfiddle.net/VxafF/\">http://jsfiddle.net/VxafF/</a></p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>I also know of this way.</p>\n\n<pre><code>angular.element($('#__userProfile')).scope().close();\n</code></pre>\n\n<p>But I don't use it too much, because I don't like to use jQuery selectors in angular code.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There is a method not dependent on services, <code>$broadcast</code> or <code>$emit</code>. It's not suitable in all cases, but if you have 2 related controllers that can be abstracted into directives, then you can use the <code>require</code> option in the directive definition. This is most likely how ngModel and ngForm communicate. You can use this to communicate between directive controllers that are either nested, or on the same element.</p>\n\n<p>For a parent/child situation, the use would be as follows:</p>\n\n<pre><code>&lt;div parent-directive&gt;\n  &lt;div inner-directive&gt;&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>And the main points to get it working: On the parent directive, with the methods to be called, you should define them on <code>this</code> (not on <code>$scope</code>):</p>\n\n<pre><code>controller: function($scope) {\n  this.publicMethodOnParentDirective = function() {\n    // Do something\n  }\n}\n</code></pre>\n\n<p>On the child directive definition, you can use the <code>require</code> option so the parent controller is passed to the link function (so you can then call functions on it from the <code>scope</code> of the child directive.</p>\n\n<pre><code>require: '^parentDirective',\ntemplate: '&lt;span ng-click=\"onClick()\"&gt;Click on this to call parent directive&lt;/span&gt;',\nlink: function link(scope, iElement, iAttrs, parentController) {\n  scope.onClick = function() {\n    parentController.publicMethodOnParentDirective();\n  }\n}\n</code></pre>\n\n<p>The above can be seen at <a href=\"http://plnkr.co/edit/poeq460VmQER8Gl9w8Oz?p=preview\" rel=\"nofollow\">http://plnkr.co/edit/poeq460VmQER8Gl9w8Oz?p=preview</a></p>\n\n<p>A sibling directive is used similarly, but both directives on the same element:</p>\n\n<pre><code>&lt;div directive1 directive2&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Used by creating a method on <code>directive1</code>:</p>\n\n<pre><code>controller: function($scope) {\n  this.publicMethod = function() {\n    // Do something\n  }\n}\n</code></pre>\n\n<p>And in directive2 this can be called by using the <code>require</code> option which results in the siblingController being passed to the link function:</p>\n\n<pre><code>require: 'directive1',\ntemplate: '&lt;span ng-click=\"onClick()\"&gt;Click on this to call sibling directive1&lt;/span&gt;',\nlink: function link(scope, iElement, iAttrs, siblingController) {\n  scope.onClick = function() {\n    siblingController.publicMethod();\n  }\n}\n</code></pre>\n\n<p>This can be seen at <a href=\"http://plnkr.co/edit/MUD2snf9zvadfnDXq85w?p=preview\" rel=\"nofollow\">http://plnkr.co/edit/MUD2snf9zvadfnDXq85w?p=preview</a> .</p>\n\n<p>The uses of this?</p>\n\n<ul>\n<li><p>Parent: Any case where child elements need to \"register\" themselves with a parent. Much like the relationship between ngModel and ngForm. These can add certain behaviour that can affects models. You might have something purely DOM based as well, where a parent element needs to manage the positions of certain children, say to manage or react to scrolling.</p></li>\n<li><p>Sibling: allowing a directive to have its behaviour modified. ngModel is the classic case, to add parsers / validation to ngModel use on inputs.</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Following is a <code>publish-subscribe</code> approach that is irrespective of Angular JS.</p>\n\n<p><strong>Search Param Controller</strong></p>\n\n<pre><code>//Note: Multiple entities publish the same event\nregionButtonClicked: function () \n{\n        EM.fireEvent('onSearchParamSelectedEvent', 'region');\n},\n\nplantButtonClicked: function () \n{\n        EM.fireEvent('onSearchParamSelectedEvent', 'plant');\n},\n</code></pre>\n\n<p><strong>Search Choices Controller</strong></p>\n\n<pre><code>//Note: It subscribes for the 'onSearchParamSelectedEvent' published by the Search Param Controller\nlocalSubscribe: function () {\n        EM.on('onSearchParamSelectedEvent', this.loadChoicesView, this);\n\n});\n\n\nloadChoicesView: function (e) {\n\n        //Get the entity name from eData attribute which was set in the event manager\n        var entity = $(e.target).attr('eData');\n\n        console.log(entity);\n\n        currentSelectedEntity = entity;\n        if (entity == 'region') {\n            $('.getvalue').hide();\n            this.loadRegionsView();\n            this.collapseEntities();\n        }\n        else if (entity == 'plant') {\n            $('.getvalue').hide();\n            this.loadPlantsView();\n            this.collapseEntities();\n        }\n\n\n});\n</code></pre>\n\n<p><strong>Event Manager</strong></p>\n\n<pre><code>myBase.EventManager = {\n\n    eventArray:new Array(),\n\n\n    on: function(event, handler, exchangeId) {\n        var idArray;\n        if (this.eventArray[event] == null) {\n            idArray = new Array();\n        } else { \n            idArray = this.eventArray[event];\n        }\n        idArray.push(exchangeId);\n        this.eventArray[event] = idArray;\n\n        //Binding using jQuery\n        $(exchangeId).bind(event, handler);\n    },\n\n    un: function(event, handler, exchangeId) {\n\n        if (this.eventArray[event] != null) {\n            var idArray = this.eventArray[event];\n            idArray.pop(exchangeId);\n            this.eventArray[event] = idArray;\n\n            $(exchangeId).unbind(event, handler);\n        }\n    },\n\n    fireEvent: function(event, info) {\n        var ids = this.eventArray[event];\n\n        for (idindex = 0; idindex &lt; ids.length; idindex++) {\n            if (ids[idindex]) {\n\n                //Add attribute eData\n                $(ids[idindex]).attr('eData', info);\n                $(ids[idindex]).trigger(event);\n            }\n        }\n    }\n};\n</code></pre>\n\n<p><strong>Global</strong></p>\n\n<pre><code>var EM = myBase.EventManager;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>If you are looking to emit &amp; broadcast events to share data or call functions across controllers</strong>, please look at this <a href=\"http://stackoverflow.com/questions/14502006/scope-emit-and-on-in-angularjs\">link</a>: and check the answer by <code>zbynour</code> (answer with max votes). I am quoting his answer !!!</p>\n\n<p><strong>If scope of firstCtrl is parent of the secondCtrl scope, your code should work by replacing $emit by $broadcast in firstCtrl:</strong></p>\n\n<pre><code>function firstCtrl($scope){\n    $scope.$broadcast('someEvent', [1,2,3]);\n}\n\nfunction secondCtrl($scope){\n    $scope.$on('someEvent', function(event, mass) {console.log(mass)});\n}\n</code></pre>\n\n<p><strong>In case there is no parent-child relation between your scopes you can inject $rootScope into the controller and broadcast the event to all child scopes (i.e. also secondCtrl).</strong></p>\n\n<pre><code>function firstCtrl($rootScope){\n    $rootScope.$broadcast('someEvent', [1,2,3]);\n}\n</code></pre>\n\n<p><strong>Finally, when you need to dispatch the event from child controller to scopes upwards you can use $scope.$emit. If scope of firstCtrl is parent of the secondCtrl scope:</strong></p>\n\n<pre><code>function firstCtrl($scope){\n    $scope.$on('someEvent', function(event, data) { console.log(data); });\n}\n\nfunction secondCtrl($scope){\n    $scope.$emit('someEvent', [1,2,3]);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I don't know if this is out of standards but if you have all of your controllers on the same file, then you can do something like this:</p>\n\n<pre><code>app = angular.module('dashboardBuzzAdmin', ['ngResource', 'ui.bootstrap']);\n\nvar indicatorsCtrl;\nvar perdiosCtrl;\nvar finesCtrl;\n\napp.controller('IndicatorsCtrl', ['$scope', '$http', function ($scope, $http) {\n  indicatorsCtrl = this;\n  this.updateCharts = function () {\n    finesCtrl.updateChart();\n    periodsCtrl.updateChart();\n  };\n}]);\n\napp.controller('periodsCtrl', ['$scope', '$http', function ($scope, $http) {\n  periodsCtrl = this;\n  this.updateChart = function() {...}\n}]);\n\napp.controller('FinesCtrl', ['$scope', '$http', function ($scope, $http) {\n  finesCtrl = this;\n  this.updateChart = function() {...}\n}]);\n</code></pre>\n\n<p>As you can see indicatorsCtrl is calling the updateChart funcions of the other both controllers when calling updateCharts.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is it possible to have one controller use another?</p>\n\n<p>For example:</p>\n\n<p>This HTML document simply prints a message delivered by the <code>MessageCtrl</code> controller in the <code>messageCtrl.js</code> file.</p>\n\n<pre><code>&lt;html xmlns:ng=\"http://angularjs.org/\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;Inter Controller Communication&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div ng:controller=\"MessageCtrl\"&gt;\n        &lt;p&gt;{{message}}&lt;/p&gt;\n    &lt;/div&gt;\n\n    &lt;!-- Angular Scripts --&gt;\n    &lt;script src=\"http://code.angularjs.org/angular-0.9.19.js\" ng:autobind&gt;&lt;/script&gt;\n    &lt;script src=\"js/messageCtrl.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>The controller file contains the following code:</p>\n\n<pre><code>function MessageCtrl()\n{\n    this.message = function() { \n        return \"The current date is: \" + new Date().toString(); \n    };\n}\n</code></pre>\n\n<p>Which simply prints the current date;</p>\n\n<p>If I were to add another controller, <code>DateCtrl</code> which handed the date in a specific format back to <code>MessageCtrl</code>, how would one go about doing this?  The DI framework seems to be concerned with <code>XmlHttpRequests</code> and accessing services.</p>\n\n<p>Can anyone help?</p>\n",
            "last_activity_date": 1421235512,
            "question_id": 9293423,
            "score": 217,
            "tags": [
                "javascript",
                "html",
                "angularjs"
            ],
            "title": "Can one controller call another?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>See the <a href=\"http://code.google.com/apis/maps/documentation/reference.html#GLatLng.distanceFrom\" rel=\"nofollow\">distanceFrom</a> function on the GLatLng object; the function parameters have slightly changed between v2 and v3.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want to calculate it yourself, then you can use the Haversine formula:</p>\n\n<pre><code>var rad = function(x) {\n  return x * Math.PI / 180;\n};\n\nvar getDistance = function(p1, p2) {\n  var R = 6378137; // Earth\u2019s mean radius in meter\n  var dLat = rad(p2.lat() - p1.lat());\n  var dLong = rad(p2.lng() - p1.lng());\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos(rad(p1.lat())) * Math.cos(rad(p2.lat())) *\n    Math.sin(dLong / 2) * Math.sin(dLong / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = R * c;\n  return d; // returns the distance in meter\n};\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 161
                },
                {
                    "body": "<p>You can get good accuracy at the cost of increased processing time with the Vincenty algorithm, <a href=\"http://www.movable-type.co.uk/scripts/latlong-vincenty.html\">implemented in Javascript</a>.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>There actually seems to be a method in GMap3. It's a static method of the <a href=\"https://developers.google.com/maps/documentation/javascript/reference#spherical\"><code>google.maps.geometry.spherical</code></a> namespace. </p>\n\n<p>It takes as arguments two <code>LatLng</code> objects and will utilize a default Earth radius of 6378137 meters, although the default radius can be overridden with a custom value if necessary.</p>\n\n<p>Make sure you include:</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;script type=\"text/javascript\" src=\"http://maps.google.com/maps/api/js?sensor=false&amp;v=3&amp;libraries=geometry\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>in your head section.</p>\n\n<p>The call will be:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>google.maps.geometry.spherical.computeDistanceBetween (latLngA, latLngB);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 194
                },
                {
                    "body": "<p>Here is the c# implementation of the this forumula</p>\n\n<pre><code> public class DistanceAlgorithm\n{\n    const double PIx = 3.141592653589793;\n    const double RADIO = 6378.16;\n\n    /// &lt;summary&gt;\n    /// This class cannot be instantiated.\n    /// &lt;/summary&gt;\n    private DistanceAlgorithm() { }\n\n    /// &lt;summary&gt;\n    /// Convert degrees to Radians\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"x\"&gt;Degrees&lt;/param&gt;\n    /// &lt;returns&gt;The equivalent in radians&lt;/returns&gt;\n    public static double Radians(double x)\n    {\n        return x * PIx / 180;\n    }\n\n    /// &lt;summary&gt;\n    /// Calculate the distance between two places.\n    /// &lt;/summary&gt;\n    /// &lt;param name=\"lon1\"&gt;&lt;/param&gt;\n    /// &lt;param name=\"lat1\"&gt;&lt;/param&gt;\n    /// &lt;param name=\"lon2\"&gt;&lt;/param&gt;\n    /// &lt;param name=\"lat2\"&gt;&lt;/param&gt;\n    /// &lt;returns&gt;&lt;/returns&gt;\n    public static double DistanceBetweenPlaces(\n        double lon1,\n        double lat1,\n        double lon2,\n        double lat2)\n    {\n        double dlon =  Radians(lon2 - lon1);\n        double dlat =  Radians(lat2 - lat1);\n\n        double a = (Math.Sin(dlat / 2) * Math.Sin(dlat / 2)) + Math.Cos(Radians(lat1)) * Math.Cos(Radians(lat2)) * (Math.Sin(dlon / 2) * Math.Sin(dlon / 2));\n        double angle = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));\n        return (angle * RADIO) * 0.62137;//distance in miles\n    }\n\n}    \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Just add this to the beginning of your JavaScript code:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>google.maps.LatLng.prototype.distanceFrom = function(latlng) {\n  var lat = [this.lat(), latlng.lat()]\n  var lng = [this.lng(), latlng.lng()]\n  var R = 6378137;\n  var dLat = (lat[1]-lat[0]) * Math.PI / 180;\n  var dLng = (lng[1]-lng[0]) * Math.PI / 180;\n  var a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n  Math.cos(lat[0] * Math.PI / 180 ) * Math.cos(lat[1] * Math.PI / 180 ) *\n  Math.sin(dLng/2) * Math.sin(dLng/2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n  var d = R * c;\n  return Math.round(d);\n}\n</code></pre>\n\n<p>and then use the function like this:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var loc1 = new GLatLng(52.5773139, 1.3712427);\nvar loc2 = new GLatLng(52.4788314, 1.7577444);\nvar dist = loc2.distanceFrom(loc1);\nalert(dist/1000);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>There is the <a href=\"https://developers.google.com/maps/documentation/javascript/reference#spherical\" rel=\"nofollow\">computeDistanceBetween(lat,lng)</a> in the new <a href=\"https://developers.google.com/maps/documentation/javascript/geometry\" rel=\"nofollow\">V3 Geometry Library</a></p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Using PHP, you can calculate the distance using this simple function : </p>\n\n<pre>\n// to calculate distance between two lat & lon\n\nfunction calculate_distance($lat1, $lon1, $lat2, $lon2, $unit='N') \n{ \n  $theta = $lon1 - $lon2; \n  $dist = sin(deg2rad($lat1)) * sin(deg2rad($lat2)) +  cos(deg2rad($lat1)) * cos(deg2rad($lat2)) * cos(deg2rad($theta)); \n  $dist = acos($dist); \n  $dist = rad2deg($dist); \n  $miles = $dist * 60 * 1.1515;\n  $unit = strtoupper($unit);\n\n  if ($unit == \"K\") {\n    return ($miles * 1.609344); \n  } else if ($unit == \"N\") {\n      return ($miles * 0.8684);\n    } else {\n        return $miles;\n      }\n}\n\n// function ends here\n</pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Had to do it... The action script way</p>\n\n<pre><code>//just make sure you pass a number to the function because it would accept you mother in law...\npublic var rad = function(x:*) {return x*Math.PI/180;}\n\nprotected  function distHaversine(p1:Object, p2:Object):Number {\n    var R:int = 6371; // earth's mean radius in km\n    var dLat:Number = rad(p2.lat() - p1.lat());\n    var dLong:Number = rad(p2.lng() - p1.lng());\n\n    var a:Number = Math.sin(dLat/2) * Math.sin(dLat/2) +\n                Math.cos(rad(p1.lat())) * Math.cos(rad(p2.lat())) * Math.sin(dLong/2) * Math.sin(dLong/2);\n    var c:Number = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    var d:Number = R * c;\n\n    return d;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>With google you can do it using the <a href=\"https://developers.google.com/maps/documentation/javascript/reference?hl=en-US#spherical\">spherical api</a>, <code>google.maps.geometry.spherical.computeDistanceBetween (latLngA, latLngB);</code>. </p>\n\n<p>However, if the precision of a spherical projection or a haversine solution is not precise enough for you (e.g. if you're close to the pole or computing longer distances), you should use a different library.</p>\n\n<p>Most information on the subject I found on Wikipedia <a href=\"http://en.wikipedia.org/wiki/Geographic_coordinate_system\">here</a>.</p>\n\n<p>A trick to see if the precision of any given algorithm is adequate is to fill in the maximum and minimum radius of the earth and see if the difference might cause problems for your use case. Many more details can be found in <a href=\"http://www.cs.nyu.edu/visual/home/proj/tiger/gisfaq.html\">this article</a></p>\n\n<p>In the end the google api or haversine will serve most purposes without problems.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>In my case it was best to calculate this in SQL Server, since i wanted to take current location and then search for all zip codes within a certain distance from current location. I also had a DB which contained a list of zip codes and their lat longs. Cheers</p>\n\n<pre><code>--will return the radius for a given number\ncreate function getRad(@variable float)--function to return rad\nreturns float\nas\nbegin\ndeclare @retval float \nselect @retval=(@variable * PI()/180)\n--print @retval\nreturn @retval\nend\ngo\n\n--calc distance\n--drop function dbo.getDistance\ncreate function getDistance(@cLat float,@cLong float, @tLat float, @tLong float)\nreturns float\nas\nbegin\ndeclare @emr float\ndeclare @dLat float\ndeclare @dLong float\ndeclare @a float\ndeclare @distance float\ndeclare @c float\n\nset @emr = 6371--earth mean \nset @dLat = dbo.getRad(@tLat - @cLat);\nset @dLong = dbo.getRad(@tLong - @cLong);\nset @a = sin(@dLat/2)*sin(@dLat/2)+cos(dbo.getRad(@cLat))*cos(dbo.getRad(@tLat))*sin(@dLong/2)*sin(@dLong/2);\nset @c = 2*atn2(sqrt(@a),sqrt(1-@a))\nset @distance = @emr*@c;\nset @distance = @distance * 0.621371 -- i needed it in miles\n--print @distance\nreturn @distance;\nend \ngo\n\n\n--get all zipcodes within 2 miles, the hardcoded #'s would be passed in by C#\nselect *\nfrom cityzips a where dbo.getDistance(29.76,-95.38,a.lat,a.long) &lt;3\norder by zipcode\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p><a href=\"https://developers.google.com/maps/documentation/javascript/examples/distance-matrix\" rel=\"nofollow\">https://developers.google.com/maps/documentation/javascript/examples/distance-matrix</a></p>\n\n<p>This code address name or cordinates result</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>//JAVA\n    public Double getDistanceBetweenTwoPoints(Double latitude1, Double longitude1, Double latitude2, Double longitude2) {\n    final int RADIUS_EARTH = 6371;\n\n    double dLat = getRad(latitude2 - latitude1);\n    double dLong = getRad(longitude2 - longitude1);\n\n    double a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(getRad(latitude1)) * Math.cos(getRad(latitude2)) * Math.sin(dLong / 2) * Math.sin(dLong / 2);\n    double c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n    return (RADIUS_EARTH * c) * 1000;\n    }\n\n    private Double getRad(Double x) {\n    return x * Math.PI / 180;\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do you calculate the distance between two markers in Google maps V3? (Similar to the <code>distanceFrom</code> function inV2.)</p>\n\n<p>Thanks..</p>\n",
            "last_activity_date": 1422562843,
            "question_id": 1502590,
            "score": 132,
            "tags": [
                "javascript",
                "google-maps-api-3"
            ],
            "title": "Calculate distance between two points in google maps V3"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>It sounds like you might have some debugging code in your javascript.</p>\n\n<p>The experience you're describing is typical of code which contain <code>console.log()</code> or any of the other <code>console</code> functionality.</p>\n\n<p>The <code>console</code> object is only activated when the Dev Toolbar is opened. Prior to that, calling the console object will result in it being reported as <code>undefined</code>. After the toolbar has been opened, the console will exist (even if the toolbar is subsequently closed), so your console calls will then work.</p>\n\n<p>There are a few solutions to this:</p>\n\n<p>The most obvious one is to go through your code removing references to <code>console</code>. You shouldn't be leaving stuff like that in production code anyway.</p>\n\n<p>If you want to keep the console references, you could wrap them in an <code>if()</code> statement, or some other conditional which checks whether the console object exists before trying to call it.</p>\n",
                    "is_accepted": true,
                    "score": 478
                },
                {
                    "body": "<p>I guess this could help, adding this before any tag of javascript:</p>\n\n<pre><code>try{\n  console\n}catch(e){\n   console={}; console.log = function(){};\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>This solved my problem after I made a minor change to it. I added the following in my html page in order to fix the IE9 problem:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    // IE9 fix\n    if(!window.console) {\n        var console = {\n            log : function(){},\n            warn : function(){},\n            error : function(){},\n            time : function(){},\n            timeEnd : function(){}\n        }\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p><a href=\"http://html5boilerplate.com\">HTML5 Boilerplate</a> has a nice pre-made code for console problems fixing:</p>\n\n<pre><code>// Avoid `console` errors in browsers that lack a console.\n(function() {\n    var method;\n    var noop = function () {};\n    var methods = [\n        'assert', 'clear', 'count', 'debug', 'dir', 'dirxml', 'error',\n        'exception', 'group', 'groupCollapsed', 'groupEnd', 'info', 'log',\n        'markTimeline', 'profile', 'profileEnd', 'table', 'time', 'timeEnd',\n        'timeStamp', 'trace', 'warn'\n    ];\n    var length = methods.length;\n    var console = (window.console = window.console || {});\n\n    while (length--) {\n        method = methods[length];\n\n        // Only stub undefined methods.\n        if (!console[method]) {\n            console[method] = noop;\n        }\n    }\n}());\n</code></pre>\n\n<p>As @plus- pointed in comments, latest version is available on their <a href=\"https://github.com/h5bp/html5-boilerplate/blob/master/src/js/plugins.js\">GitHub page</a></p>\n",
                    "is_accepted": false,
                    "score": 90
                },
                {
                    "body": "<p>Besides the '<code>console</code>' usage issue mentioned in accepted answer and others,there is at least another reason why sometimes pages in Internet Explorer work only with the developer tools activated.</p>\n\n<p>When Developer Tools is enabled, IE doesn't really uses its HTTP cache (at least by default in IE 11) like it does in normal mode.</p>\n\n<p>It means if your site or page has a caching problem (if it caches more than it should for example - that was my case), you will not see that problem in F12 mode. So if the javascript does some cached AJAX requests, they may not work as expected in normal mode, and work fine in F12 mode.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I got yet another alternative for the solutions offered by <a href=\"http://stackoverflow.com/a/12307201/1845976\">runeks</a> and <a href=\"http://stackoverflow.com/a/10247139/1845976\">todotresde</a> that also avoids the pitfalls discussed in the comments to <a href=\"http://stackoverflow.com/a/7742862/1845976\">Spudley</a>'s answer:</p>\n\n<pre><code>        try {\n            console.log(message);\n        } catch (e) {\n        }\n</code></pre>\n\n<p>It's a bit scruffy but on the other hand it's concise and covers all the logging methods covered in <a href=\"http://stackoverflow.com/a/12307201/1845976\">runeks</a>' answer and it has the huge advantage that you can open the console window of IE at any time and the logs come flowing in.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's another possible reason besides the <code>console.log</code> issue (at least in IE11):</p>\n\n<p>When the console is not open, IE does pretty aggressive caching, so make sure that any <code>$.ajax</code> calls or <code>XMLHttpRequest</code> calls have caching set to false.</p>\n\n<p>For example:</p>\n\n<pre><code>$.ajax({cache: false, ...})\n</code></pre>\n\n<p>When the developer console is open, caching is less aggressive. Seems to be a bug (or maybe a feature?)</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>If you are using AngularJS you could use the $log service instead of using console.log directly.</p>\n\n<blockquote>\n  <p>Simple service for logging. Default implementation safely writes the message into the browser's console (if present).</p>\n</blockquote>\n\n<p><a href=\"https://docs.angularjs.org/api/ng/service/$log\" rel=\"nofollow\">https://docs.angularjs.org/api/ng/service/$log</a></p>\n\n<p>So if you have something similar to</p>\n\n\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('logExample', [])\n  .controller('LogController', ['$scope', function($scope) {\n    console.log('Hello World!');\n }]);\n</code></pre>\n\n<p>you can replace it with</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>angular.module('logExample', [])\n  .controller('LogController', ['$scope', '$log', function($scope, $log) {\n    $log.log('Hello World!');\n }]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>IE9 Bug - Javascript only works after opening developer tools once.</p>\n\n<p>Our site offers free pdf downloads to users, and it has a simple \"enter password to download\" function. However, it doesn't work at all in Internet Explorer. </p>\n\n<p>You can see for yourself at this example: <a href=\"http://www.makeuseof.com/pages/how-to-use-virtual-box\">http://www.makeuseof.com/pages/how-to-use-virtual-box</a></p>\n\n<p>The download pass is \"makeuseof\". In any other browser, it works fine. In IE, the buttons both just do nothing. </p>\n\n<p>The most curious thing I've found is that if you open and close the developers toolbar with F12, it all suddenly starts to work. </p>\n\n<p>We've tried compatibility mode and such, nothing makes a difference. Please, help me figure this out! </p>\n\n<p>How do I make this work in Internet Explorer?</p>\n",
            "last_activity_date": 1420714978,
            "question_id": 7742781,
            "score": 328,
            "tags": [
                "javascript",
                "internet-explorer",
                "internet-explorer-9"
            ],
            "title": "Why Javascript only works after opening developer tools in IE once?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p><strong>UPD</strong></p>\n\n<p>Browsers can block access to <code>window.top</code> due to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Same_origin_policy_for_JavaScript\">same origin policy</a>. IE bugs also take place. Here's the working code:</p>\n\n<pre><code>function inIframe () {\n    try {\n        return window.self !== window.top;\n    } catch (e) {\n        return true;\n    }\n}\n</code></pre>\n\n<p><code>top</code> and <code>self</code> are both <code>window</code> objects (along with <code>parent</code>), so you're seeing if your window is the top window.</p>\n",
                    "is_accepted": true,
                    "score": 449
                },
                {
                    "body": "<p>RoBorg is correct, but I wanted to add a side note.</p>\n\n<p><strong>In IE7/IE8 when Microsoft added Tabs to their browser they broke one thing that will cause havoc with your JS if you are not careful.</strong></p>\n\n<p>Imagine this page layout:</p>\n\n<pre><code>MainPage.html\n  IframedPage1.html   (named \"foo\")\n  IframedPage2.html   (named \"bar\")\n    IframedPage3.html (named \"baz\")\n</code></pre>\n\n<p>Now in frame \"baz\" you click a link (no target, loads in the \"baz\" frame) it works fine.</p>\n\n<p>If the page that gets loaded, lets call it special.html, uses JS to check if \"it\" has a parent frame named \"bar\" it will return true (expected).</p>\n\n<p>Now lets say that the special.html page when it loads, checks the parent frame (for existence and its name, and if it is \"bar\" it reloads itself in the bar frame. e.g.</p>\n\n<pre><code>if(window.parent &amp;&amp; window.parent.name == 'bar'){\n  window.parent.location = self.location;\n}\n</code></pre>\n\n<p>So far so good. Now comes the bug.</p>\n\n<p><em>Lets say instead of clicking on the original link like normal, and loading the special.html page in the \"baz\" frame, you middle-clicked it or chose to open it in a new Tab.</em></p>\n\n<p>When that new tab loads (<strong><em>with no parent frames at all!</em></strong>) <strong>IE will enter an endless loop of page loading!</strong> because IE \"copies over\" the frame structure in JavaScript such that the new tab DOES have a parent, and that parent HAS the name \"bar\".</p>\n\n<p>The good news, is that checking:</p>\n\n<pre><code>if(self == top){\n  //this returns true!\n}\n</code></pre>\n\n<p>in that new tab does return true, and thus you can test for this odd condition.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Since you are asking in the context of a facebook app, you might want to consider detecting this at the server when the initial request is made. Facebook will pass along a bunch of querystring data including the fb_sig_user key if it is called from an iframe.</p>\n\n<p>Since you probably need to check and use this data anyway in your app, use it to determine the the appropriate context to render.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Use this javascript function as an example on how to accomplish this.</p>\n\n<pre><code>function isNoIframeOrIframeInMyHost() {\n// Validation: it must be loaded as the top page, or if it is loaded in an iframe \n// then it must be embedded in my own domain.\n// Info: IF top.location.href is not accessible THEN it is embedded in an iframe \n// and the domains are different.\nvar myresult = true;\ntry {\n    var tophref = top.location.href;\n    var tophostname = top.location.hostname.toString();\n    var myhref = location.href;\n    if (tophref === myhref) {\n        myresult = true;\n    } else if (tophostname !== \"www.yourdomain.com\") {\n        myresult = false;\n    }\n} catch (error) { \n  // error is a permission error that top.location.href is not accessible \n  // (which means parent domain &lt;&gt; iframe domain)!\n    myresult = false;\n}\nreturn myresult;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The accepted answer didn't work for me inside the content script of a Firefox 6.0 Extension (Addon-SDK 1.0): Firefox executes the content script in each: the top-level window and in all iframes. </p>\n\n<p>Inside the content script I get the following results: </p>\n\n<pre><code> (window !== window.top) : false \n (window.self !== window.top) : true\n</code></pre>\n\n<p>The strange thing about this output is that it's always the same regardless whether the code is run inside an iframe or the top-level window.</p>\n\n<p>On the other hand Google Chrome seems to execute my content script only once within the top-level window, so the above wouldn't work at all.</p>\n\n<p>What finally worked for me in a content script in both browsers is this:</p>\n\n<pre><code> console.log(window.frames.length + ':' + parent.frames.length);\n</code></pre>\n\n<p>Without iframes this prints <code>0:0</code>, in a top-level window containing one frame it prints <code>1:1</code>, and in the only iframe of a document it prints <code>0:1</code>.</p>\n\n<p>This allows my extension to determine in both browsers if there are any iframes present, and additionally in Firefox if it is run inside one of the iframes.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>It's an ancient piece of code that I've used a few times:</p>\n\n<pre><code>if (parent.location.href == self.location.href) {\n    window.location.href = 'https://www.facebook.com/pagename?v=app_1357902468';\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I'm using this:</p>\n\n<pre><code>var isIframe = (self.frameElement &amp;&amp; (self.frameElement+\"\").indexOf(\"HTMLIFrameElement\") &gt; -1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>if (window.frames.length != parent.frames.length) { page loaded in iframe }\n</code></pre>\n\n<p>But only if number of iframes differs in your page and page who are loading you in iframe. Make no iframe in your page to have 100% guarantee of result of this code</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Write this javascript in each page</p>\n\n<pre><code>if (self == top)\n  { window.location = \"Home.aspx\"; }\n</code></pre>\n\n<p>Then it will automatically redirects to home page.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>If you want to know if the user is accessing your app from facebook page tab or canvas check for the Signed Request. If you don't get it, probably the user is not accessing from facebook.\nTo make sure confirm the signed_request fields structure and fields content.</p>\n\n<p>With the php-sdk you can get the Signed Request like this:</p>\n\n<pre><code>$signed_request = $facebook-&gt;getSignedRequest();\n</code></pre>\n\n<p>You can read more about Signed Request here:</p>\n\n<p><a href=\"https://developers.facebook.com/docs/reference/php/facebook-getSignedRequest/\" rel=\"nofollow\">https://developers.facebook.com/docs/reference/php/facebook-getSignedRequest/</a></p>\n\n<p>and here:</p>\n\n<p><a href=\"https://developers.facebook.com/docs/reference/login/signed-request/\" rel=\"nofollow\">https://developers.facebook.com/docs/reference/login/signed-request/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>window.frameElement</code> Returns the element (such as &lt;iframe&gt; or &lt;object&gt;) in which the window is embedded, or null if the window is top-level. So identifying code looks like</p>\n\n<pre><code>if (window.frameElement) {\n  // in frame\n}\nelse {\n  // not in frame\n}\n</code></pre>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.frameElement\">This is standard and rather new method.</a> It exactly works in Chrome and Firefox. I can't recommend it as universal solution but it should be mentioned here I think.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>if(typeof(parent) == 'undefined')\nconsole.log('Not Iframe');\nelse\nconsole.log('iframe');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am writing an iframe based facebook app. Now I want to use the same html page to render the normal website as well as the canvas page within facebook. I want to know if I can determine whether the page has been loaded inside the iframe or directly in the browser?</p>\n",
            "last_activity_date": 1405547455,
            "question_id": 326069,
            "score": 238,
            "tags": [
                "javascript",
                "facebook",
                "iframe"
            ],
            "title": "How to identify if a webpage is being loaded inside an iframe or directly into the browser window?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p><code>setInterval()</code> returns an interval ID, which you can pass to <code>clearInterval()</code>:</p>\n\n<pre><code>var refreshIntervalId = setInterval(fname, 10000);\n\n/* later */\nclearInterval(refreshIntervalId);\n</code></pre>\n\n<p>See the docs for <a href=\"https://developer.mozilla.org/en/DOM/window.setInterval\"><code>setInterval()</code></a> and <a href=\"https://developer.mozilla.org/en/DOM/window.clearInterval\"><code>clearInterval()</code></a>.</p>\n",
                    "is_accepted": true,
                    "score": 755
                },
                {
                    "body": "<p>if you setup the return of setInterval to a variable you can use clearInterval to stop it.</p>\n\n<pre><code>var myTimer = setInterval(...);\nclearInterval(myTimer);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>You can set a new variable and have it increment ++ (count up one) every time it runs, then use a conditional statement to end it:</p>\n\n<pre><code>var varCounter = 0;\nvar varName = function(){\n     if(varCounter &lt;= 10) {\n          varCounter++;\n          /* your code goes here */\n     } else {\n          clearInterval(varName);\n     }\n};\n\n$(document).ready(function(){\n     setInterval(varName, 10000);\n});\n</code></pre>\n\n<p>I hope that helps... also I hope thats right :P</p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>The answers above have already explained how setInterval returns a handle, and how this handle is used to cancel the Interval timer.</p>\n\n<p>Some architectural considerations:</p>\n\n<p>Please do not use \"scope-less\" variables. The safest way is to use the attribute of a DOM object. The easiest place would be \"document\". If the refresher is started by a start/stop button, you can use the button itself:</p>\n\n<pre><code>&lt;a onclick=\"start(this);\"&gt;Start&lt;/a&gt;\n\n&lt;script&gt;\nfunction start(d){\n    if (d.interval){\n        clearInterval(d.interval);\n        d.innerHTML='Start';\n    } else {\n        d.interval=setInterval(function(){\n          //refresh here\n        },10000);\n        d.innerHTML='Stop';\n    }\n}\n&lt;/script&gt;\n</code></pre>\n\n<p>Since the function is defined inside the button click handler, you don't have to define it again. The timer can be resumed if the button is clicked on again.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am using <code>setInterval(fname, 10000);</code> to call a function every 10 seconds in JavaScript. Is it possible to stop calling it on some event? </p>\n\n<p>I want the user to be able to stop the repeated refresh of data.</p>\n",
            "last_activity_date": 1406227812,
            "question_id": 109086,
            "score": 456,
            "tags": [
                "javascript",
                "setinterval"
            ],
            "title": "Stop setInterval call in JavaScript"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>Taken from jQuery docs (<a href=\"http://docs.jquery.com/Utilities/jQuery.each\">http://docs.jquery.com/Utilities/jQuery.each</a>):</p>\n\n<pre><code>var arr = [ \"one\", \"two\", \"three\", \"four\", \"five\" ];\nvar obj = { one:1, two:2, three:3, four:4, five:5 };\n\njQuery.each(arr, function() {\n  $(\"#\" + this).text(\"My id is \" + this + \".\");\n  return (this != \"four\"); // will stop running to skip \"five\"\n});\n\njQuery.each(obj, function(i, val) {\n  $(\"#\" + i).append(document.createTextNode(\" - \" + val));\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 223
                },
                {
                    "body": "<p>mootools example:</p>\n\n<pre><code>var ret = JSON.decode(jsonstr);\n\nret.each(function(item){\n    alert(item.id+'_'+item.classd);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You can use a mini library like objx - <a href=\"http://objx.googlecode.com/\">http://objx.googlecode.com/</a></p>\n\n<p>You can write code like this:</p>\n\n<pre><code>var data =  [ {\"id\":\"10\", \"class\": \"child-of-9\"},\n              {\"id\":\"11\", \"class\": \"child-of-10\"}];\n\n// alert all IDs\nobjx(data).each(function(item) { alert(item.id) });\n\n// get all IDs into a new array\nvar ids = objx(data).collect(\"id\").obj();\n\n// group by class\nvar grouped = objx(data).group(function(item){ return item.class; }).obj()\n</code></pre>\n\n<p>There are more 'plugins' available to let you handle data like this, see <a href=\"http://code.google.com/p/objx-plugins/wiki/PluginLibrary\">http://code.google.com/p/objx-plugins/wiki/PluginLibrary</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code> var arr = [ {\"id\":\"10\", \"class\": \"child-of-9\"}, {\"id\":\"11\", \"classd\": \"child-of-10\"}];\n\n    for(var i=0;i&lt;arr.length;i++){\n        var obj = arr[i];\n        for(var key in obj){\n            var attrName = key;\n            var attrValue = obj[key];\n        }\n    }\n</code></pre>\n\n<p>note: the for-in method is cool for simple objects. Not very smart to use with DOM object.</p>\n",
                    "is_accepted": false,
                    "score": 222
                },
                {
                    "body": "<p>Use <strong>foreach</strong>:</p>\n\n<pre><code>&lt;html&gt;\n&lt;body&gt;\n&lt;script type=\"text/javascript\"&gt;\nvar mycars = [{name:'Susita'}, {name:'BMW'}];\nfor (i in mycars)\n{\n  document.write(mycars[i].name + \"&lt;br /&gt;\");\n}\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Will result in:</p>\n\n<pre><code>Susita\nBMW\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>Another solution to navigate through JSON documents is <a href=\"http://jsoniq.com/\" rel=\"nofollow\">JSONiq</a> (implemented in the <a href=\"http://www.zorba-xquery.com/html/index\" rel=\"nofollow\">Zorba</a> engine), where you can write something like:</p>\n\n<pre><code>let $json := [ {\"id\":\"10\", \"class\": \"child-of-9\"},\n               {\"id\":\"11\", \"class\": \"child-of-10\"} ]\nfor $entry in jn:members($json)     (: binds $entry to each object in turn :)\nreturn $entry(\"class\")              (: gets the value associated with \"class\" :)\n</code></pre>\n\n<p>You can run it on <a href=\"http://www.zorba-xquery.com/html/demo#AwsGMHmzDgRpkFpv8qdvMjWLvvE=\" rel=\"nofollow\">http://www.zorba-xquery.com/html/demo#AwsGMHmzDgRpkFpv8qdvMjWLvvE=</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If this is your dataArray <br>\n<code>var dataArray = [{\"id\":28,\"class\":\"Sweden\"}, {\"id\":56,\"class\":\"USA\"}, {\"id\":89,\"class\":\"England\"}];</code></p>\n\n<p>Then,</p>\n\n<pre><code>$(jQuery.parseJSON(JSON.stringify(dataArray))).each(function() {  \n         var ID = this.id;\n         var CLASS = this.class;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>With nested objects, it can be retrieve as by recursive function:</p>\n\n<pre><code>function inside(events)\n  {\n    for (i in events) {\n      if (typeof events[i] === 'object')\n        inside(events[i]);\n      else\n      alert(events[i]);\n    }\n  }\n  inside(events);\n</code></pre>\n\n<p>where as events is json object.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>this is a pure commented JavaScript example from <a href=\"http://www.developphp.com/view.php?tid=1185\" rel=\"nofollow\">develop php</a>      </p>\n\n<pre><code>  &lt;script language=\"JavaScript\" type=\"text/javascript\"&gt;\n  function iterate_json(){\n            // Create our XMLHttpRequest object\n            var hr = new XMLHttpRequest();\n            // Create some variables we need to send to our PHP file\n            hr.open(\"GET\", \"json-note.php\", true);//this is your php file containing json\n\n            hr.setRequestHeader(\"Content-type\", \"application/json\", true);\n            // Access the onreadystatechange event for the XMLHttpRequest object\n            hr.onreadystatechange = function() {\n                if(hr.readyState == 4 &amp;&amp; hr.status == 200) {\n                    var data = JSON.parse(hr.responseText);\n                    var results = document.getElementById(\"myDiv\");//myDiv is the div id\n                    for (var obj in data){\n                    results.innerHTML += data[obj].id+ \"is\"+data[obj].class + \"&lt;br/&gt;\";\n                    }\n                }\n            }\n\n            hr.send(null); \n        }\n&lt;/script&gt;\n&lt;script language=\"JavaScript\" type=\"text/javascript\"&gt;iterate_json();&lt;/script&gt;// call function here\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Marquis Wang's may well be the best answer when using jQuery.</p>\n\n<p>Here is something quite similar in pure JavaScript, using JavaScript's <code>forEach</code> method. <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" rel=\"nofollow\">forEach</a> takes a function as an argument. That function will then be called for each item in the array, with said item as the argument.</p>\n\n<p>Short and easy:</p>\n\n<pre><code>&lt;script&gt;\nvar results = [ {\"id\":\"10\", \"class\": \"child-of-9\"}, {\"id\":\"11\", \"classd\": \"child-of-10\"}];\n\nresults.forEach( function( item ) {\n    console.log( item );\n    });\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Please let me know if it is not easy:</p>\n\n<pre><code>    var jsonObject = {\n        name: 'Amit Kumar',\n        Age: '27'\n    };\n    for (var prop in jsonObject) {\n        alert(\"Key:\" + prop);\n        alert(\"Value:\" + jsonObject[prop]);\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                }
            ],
            "body": "<p>I have the following JSON structure:</p>\n\n<pre><code>[{ \"id\":\"10\", \"class\": \"child-of-9\" }, { \"id\": \"11\", \"classd\": \"child-of-10\" }]\n</code></pre>\n\n<p>How do I iterate over it using jQuery or JavaScript?</p>\n",
            "last_activity_date": 1425033137,
            "question_id": 1078118,
            "score": 189,
            "tags": [
                "javascript",
                "jquery",
                "json",
                "loops"
            ],
            "title": "How do I iterate over a JSON structure?"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>I faced this same issue (after setting focus through RJS/prototype) in IE.\nFirefox was already leaving the cursor at the end when there is already a value for the field. IE was forcing the cursor to the beginning of the text.</p>\n\n<p>The solution I arrived at is as follows:</p>\n\n<pre><code>&lt;input id=\"search\" type=\"text\" value=\"mycurrtext\" size=\"30\" \n       onfocus=\"this.value = this.value;\" name=\"search\"/&gt;\n</code></pre>\n\n<p>This works in both IE7 and FF3</p>\n",
                    "is_accepted": true,
                    "score": 88
                },
                {
                    "body": "<p>After hacking around with this a bit, I found the best way was to use the <code>setSelectionRange</code> function if the browser supports it; if not, revert to using the method in Mike Berrow's answer (i.e. replace the value with itself).</p>\n\n<p>I'm also setting <code>scrollTop</code> to a high value in case we're in a vertically-scrollable <code>textarea</code>. (Using an arbitrary high value seems more reliable than <code>$(this).height()</code> in Firefox and Chrome.)</p>\n\n<p>I've made it is as a jQuery plugin. (If you're not using jQuery I trust you can still get the gist easily enough.)</p>\n\n<p>I've tested in IE6, IE7, IE8, Firefox 3.5.5, Google Chrome 3.0, Safari 4.0.4, Opera 10.00.</p>\n\n<p>It's available on jquery.com as the <a href=\"http://plugins.jquery.com/project/PutCursorAtEnd\">PutCursorAtEnd plugin</a>. For your convenience, the code for release 1.0 is as follows:</p>\n\n<pre><code>// jQuery plugin: PutCursorAtEnd 1.0\n// http://plugins.jquery.com/project/PutCursorAtEnd\n// by teedyay\n//\n// Puts the cursor at the end of a textbox/ textarea\n\n// codesnippet: 691e18b1-f4f9-41b4-8fe8-bc8ee51b48d4\n(function($)\n{\n    jQuery.fn.putCursorAtEnd = function()\n    {\n    return this.each(function()\n    {\n        $(this).focus()\n\n        // If this function exists...\n        if (this.setSelectionRange)\n        {\n        // ... then use it\n        // (Doesn't work in IE)\n\n        // Double the length because Opera is inconsistent about whether a carriage return is one character or two. Sigh.\n        var len = $(this).val().length * 2;\n        this.setSelectionRange(len, len);\n        }\n        else\n        {\n        // ... otherwise replace the contents with itself\n        // (Doesn't work in Google Chrome)\n        $(this).val($(this).val());\n        }\n\n        // Scroll to the bottom, in case we're in a tall textarea\n        // (Necessary for Firefox and Google Chrome)\n        this.scrollTop = 999999;\n    });\n    };\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 82
                },
                {
                    "body": "<p>Try this, it has worked for me:</p>\n\n<pre><code>//input is the input element\n\ninput.focus(); //sets focus to element\nvar val = this.input.value; //store the value of the element\nthis.input.value = ''; //clear the value of the element\nthis.input.value = val; //set that value back.  \n</code></pre>\n\n<p>For the cursor to be move to the end, the input has to have focus first, then when the value is changed it will goto the end.  If you set .value to the same, it won't change in chrome.</p>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>In jQuery, that's  </p>\n\n<pre><code>$(document).ready(function () {\n  $('input').focus(function () {\n    $(this).attr('value',$(this).attr('value'));\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If the input field just needs a static default value I usually do this with jQuery:</p>\n\n<pre><code>$('#input').focus().val('Default value');\n</code></pre>\n\n<p>This seems to work in all browsers.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Still the intermediate variable is needed, (see var val=)\nelse the cursor behaves strange, we need it at the end.</p>\n\n<pre><code>&lt;body onload=\"document.getElementById('userinput').focus();\"&gt;\n&lt;form&gt;\n&lt;input id=\"userinput\" onfocus=\"var val=this.value; this.value=''; this.value= val;\"\n         class=large type=\"text\" size=\"10\" maxlength=\"50\" value=\"beans\" name=\"myinput\"&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I tried the suggestions before but none worked for me (tested them in Chrome), so I wrote my own code - and it works fine in Firefox, IE, Safari, Chrome...</p>\n\n<p>In Textarea:</p>\n\n<pre><code>onfocus() = sendCursorToEnd(this);\n</code></pre>\n\n<p>In Javascript:</p>\n\n<pre><code>function sendCursorToEnd(obj) { \nvar value = obj.value; //store the value of the element\nvar message = \"\";\nif (value != \"\") {\n    message = value + \"\\n\";\n};\n$(obj).focus().val(message);}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Set the cursor when click on text area to the end of text...\nVariation  of this code is...ALSO works! for  Firefox, IE, Safari, Chrome..</p>\n\n<p>In server-side code:</p>\n\n<pre><code>txtAddNoteMessage.Attributes.Add(\"onClick\", \"sendCursorToEnd('\" &amp; txtAddNoteMessage.ClientID &amp; \"');\")\n</code></pre>\n\n<p>In Javascript:</p>\n\n<pre><code>function sendCursorToEnd(obj) {\n    var value =  $(obj).val(); //store the value of the element\n    var message = \"\";\n    if (value != \"\") {\n        message = value + \"\\n\";\n     };\n    $(obj).focus().val(message);\n    $(obj).unbind();\n }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;script type=\"text/javascript\"&gt;  \n    function SetEnd(txt) {  \n      if (txt.createTextRange) {  \n       //IE  \n       var FieldRange = txt.createTextRange();  \n       FieldRange.moveStart('character', txt.value.length);  \n       FieldRange.collapse();  \n       FieldRange.select();  \n       }  \n      else {  \n       //Firefox and Opera  \n       txt.focus();  \n       var length = txt.value.length;  \n       txt.setSelectionRange(length, length);  \n      }  \n    }   \n&lt;/script&gt;  \n</code></pre>\n\n<p>This function works for me in IE9, Firefox 6.x, and Opera 11.x</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I just found that in iOS, setting <code>textarea.textContent</code> property will place the cursor at the end of the text in the textarea element every time. The behavior was a bug in my app, but seems to be something that you could use intentionally.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I've tried the following with quite great success in chrome</p>\n\n<pre><code>$(\"input.focus\").focus(function () {\nvar val = this.value;\nvar $this = $(this);\n$this.val(\"\");\nsetTimeout(function () {\n    $this.val(val);\n}, 1);\n});\n</code></pre>\n\n<p>Quick rundown:</p>\n\n<p>It takes every input field with the class focus on it, then stores the old value of the input field in a variable, afterwards it applies the empty string to the input field.</p>\n\n<p>Then it waits 1 milisecond and puts in the old value again.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>input = $('input'); \ninput.focus().val(input.val()+'.'); \nif (input.val()) {input.attr('value', input.val().substr(0,input.val().length-1));}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Base on shirlymp's example, below code works better in Chrome and FireFox for me.</p>\n\n<pre><code>function moveCaretToEnd(obj) {\n    var value =  $(obj).val(); //store the value of the element\n    if (isNotBlank(value)) {\n        $(obj).focus().val(\"\");\n        $(obj).focus().val(value);\n        $(obj).unbind();\n     }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Well, I just use:</p>\n\n<pre><code>$(\"#myElement\").val($(\"#myElement\").val());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>There's a much simpler way to accomplish this.</p>\n\n<p><strong>Using jQuery to set the listener, but it's not necessary otherwise</strong></p>\n\n<pre><code>$(element).focus(function(){\n  this.selectionStart = this.selectionEnd = this.value.length;\n});\n</code></pre>\n\n<p><br>\n-- OR --  </p>\n\n<p><strong>jQuery-less</strong><br>\n<em>Borrowing <code>addEvent</code> function from <a href=\"http://stackoverflow.com/a/10150042/731314\">this answer</a>.</em></p>\n\n<pre><code>// Basic cross browser addEvent\nfunction addEvent(elem, event, fn){\nif(elem.addEventListener){\n  elem.addEventListener(event, fn, false);\n}else{\n  elem.attachEvent(\"on\" + event,\n  function(){ return(fn.call(elem, window.event)); });\n}}\n\n// Now on to the point:\naddEvent(element,focus,function(){\n  this.selectionStart = this.selectionEnd = this.value.length;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 48
                },
                {
                    "body": "<p>Here\u2019s a <a href=\"http://jsfiddle.net/MEPBA/\" rel=\"nofollow\">jsFiddle demo</a> of my answer. The demo uses CoffeeScript, but you can <a href=\"http://coffeescript.org/#try%3amoveCursorToEnd%20%3D%20%28textField%29%20-%3E%0A%20%20endIndex%20%3D%20textField.value.length%0A%20%20if%20textField.setSelectionRange%0A%20%20%20%20textField.setSelectionRange%28endIndex%2C%20endIndex%29%0A%0AjQuery%20-%3E%0A%20%20%24%28%27.that-field%27%29.on%20%27click%27%2C%20-%3E%0A%20%20%20%20moveCursorToEnd%28this%29\" rel=\"nofollow\">convert it to plain JavaScript</a> if you need to.</p>\n\n<p>The important part, in JavaScript:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var endIndex = textField.value.length;\nif (textField.setSelectionRange) {\n   textField.setSelectionRange(endIndex, endIndex);\n}\n</code></pre>\n\n<p>I\u2019m posting this answer because I already wrote it for someone else who had the same question. This answer doesn\u2019t cover as many edge cases as the top answers here, but it works for me, and has a jsFiddle demo you can play with.</p>\n\n<p>Here is the code from the jsFiddle, so this answer is preserved even if the jsFiddle disappears:</p>\n\n<pre class=\"lang-coffee prettyprint-override\"><code>moveCursorToEnd = (textField) -&gt;\n  endIndex = textField.value.length\n  if textField.setSelectionRange\n    textField.setSelectionRange(endIndex, endIndex)\n\njQuery -&gt;\n  $('.that-field').on 'click', -&gt;\n    moveCursorToEnd(this)\n</code></pre>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;div class=\"field\"&gt;\n    &lt;label for=\"pressure\"&gt;Blood pressure&lt;/label&gt;:\n    &lt;input class=\"that-field\" type=\"text\" name=\"pressure\" id=\"pressure\" value=\"24\"&gt;\n&lt;/div&gt;\n&lt;p&gt;\n    Try clicking in the text field. The cursor will always jump to the end.\n&lt;/p&gt;\n</code></pre>\n\n<pre class=\"lang-css prettyprint-override\"><code>body {\n    margin: 1em;\n}\n\n.field {\n    margin-bottom: 1em;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>For all browsers for all cases:</p>\n\n<pre><code>function moveCursorToEnd(el) {\n    window.setTimeout(function () {\n            if (typeof el.selectionStart == \"number\") {\n            el.selectionStart = el.selectionEnd = el.value.length;\n        } else if (typeof el.createTextRange != \"undefined\") {\n            var range = el.createTextRange();\n            range.collapse(false);\n            range.select();\n        }\n    }, 1);\n}\n</code></pre>\n\n<p><em>Timeout required if you need to move cursor from onFocus event handler</em></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try the following code:</p>\n\n<pre><code>$('input').focus(function () {\n    $(this).val($(this).val());\n}).focus()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<p>What is the best way (and I presume simplest way) to place the cursor at the end of the text in a input text element via JavaScript - after focus has been set to the element?</p>\n",
            "last_activity_date": 1425937950,
            "question_id": 511088,
            "score": 123,
            "tags": [
                "javascript"
            ],
            "title": "Use JavaScript to place cursor at end of text in text input element"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Found this solution. Not jquery based but there is no problem to integrate it to jquery:</p>\n\n<pre><code>/*\n** Returns the caret (cursor) position of the specified text field.\n** Return value range is 0-oField.value.length.\n*/\nfunction doGetCaretPosition (oField) {\n\n  // Initialize\n  var iCaretPos = 0;\n\n  // IE Support\n  if (document.selection) {\n\n    // Set focus on the element\n    oField.focus ();\n\n    // To get cursor position, get empty selection range\n    var oSel = document.selection.createRange ();\n\n    // Move selection start to 0 position\n    oSel.moveStart ('character', -oField.value.length);\n\n    // The caret position is selection length\n    iCaretPos = oSel.text.length;\n  }\n\n  // Firefox support\n  else if (oField.selectionStart || oField.selectionStart == '0')\n    iCaretPos = oField.selectionStart;\n\n  // Return results\n  return (iCaretPos);\n}\n</code></pre>\n\n<p>From <a href=\"http://flightschool.acylt.com/devnotes/caret-position-woes/\">http://flightschool.acylt.com/devnotes/caret-position-woes/</a></p>\n",
                    "is_accepted": true,
                    "score": 84
                },
                {
                    "body": "<p>Nice one, big thanks to Max.</p>\n\n<p>I've wrapped the functionality in his answer into jQuery if anyone wants to use it.</p>\n\n<pre><code>(function($) {\n    $.fn.getCursorPosition = function() {\n        var input = this.get(0);\n        if (!input) return; // No (input) element found\n        if ('selectionStart' in input) {\n            // Standard-compliant browsers\n            return input.selectionStart;\n        } else if (document.selection) {\n            // IE\n            input.focus();\n            var sel = document.selection.createRange();\n            var selLen = document.selection.createRange().text.length;\n            sel.moveStart('character', -input.value.length);\n            return sel.text.length - selLen;\n        }\n    }\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 71
                },
                {
                    "body": "<pre><code>   (function($) {\n    $.fn.getCursorPosition = function() {\n        var input = this.get(0);\n        if (!input) return; // No (input) element found\n        if (document.selection) {\n            // IE\n           input.focus();\n        }\n        return 'selectionStart' in input ? input.selectionStart:'' || Math.abs(document.selection.createRange().moveStart('character', -input.value.length));\n     }\n   })(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><em><strong>Got a very simple solution</em></strong>.\nTry the following code <strong>with verified result</strong>-</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script&gt;\n    function f1(el) {\n    var val = el.value;\n    alert(val.slice(0, el.selectionStart).length);\n}\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;input type=text id=t1 value=abcd&gt;\n    &lt;button onclick=\"f1(document.getElementById('t1'))\"&gt;check position&lt;/button&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I'm giving you the <a href=\"http://jsfiddle.net/rajesh38/U7Mgw/1/\" rel=\"nofollow\"><strong>fiddle_demo</strong></a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is now a nice plugin for this: <a href=\"http://code.accursoft.com/caret/overview\">The Caret Plugin</a></p>\n\n<p>Then you can call <code>$(\"#myTextBox\").caret()</code> or set it <code>$(\"#myTextBox\").caret(position)</code></p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>How could can I get the caret position from within an input field?</p>\n\n<p>I have seen a few bits and pieces on Google, but nothing bullet proof.</p>\n\n<p>Basically something like a jQuery plugin would be ideal so I could simply do</p>\n\n<pre><code>$(\"#myinput\").caretPosition()\n</code></pre>\n",
            "last_activity_date": 1395021955,
            "question_id": 2897155,
            "score": 62,
            "tags": [
                "javascript",
                "jquery",
                "html"
            ],
            "title": "Get cursor position (in characters) within a text Input field"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>The JSON spec says you CAN escape forward slash, but you don't have to.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>This is because HTML does not allow a string inside a <code>&lt;script&gt;</code> tag to contain <code>&lt;/</code>, so in case that substring's there, you should escape every forward slash.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>JSON doesn't require you to do that, it allows you to do that. It also allows you to use \"\\u0061\" for \"A\", but it's not required. Allowing <code>\\/</code> helps when embedding JSON in a <code>&lt;script&gt;</code> tag, which doesn't allow <code>&lt;/</code> inside strings, like Seb points out.</p>\n\n<p>Some of Microsoft's ASP.NET Ajax/JSON API's use this loophole to add extra information, e.g., a datetime will be sent as <code>\"\\/Date(milliseconds)\\/\"</code>. (Yuck)</p>\n",
                    "is_accepted": true,
                    "score": 129
                },
                {
                    "body": "<p>I asked <a href=\"http://stackoverflow.com/q/4264877/113195\">the same question</a> some time ago and had to answer it myself. Here's what I came up with:</p>\n\n<blockquote>\n  <p>It seems, my first thought [<em>that it comes from its <a href=\"http://javascript.crockford.com/script.html\">JavaScript\n  roots</a></em>] was correct.</p>\n  \n  <p><code>'\\/' === '/'</code> in JavaScript, and JSON <em>is</em> valid JavaScript. However,\n  why are the other ignored escapes (like <code>\\z</code>) not allowed in JSON?</p>\n  \n  <p>The key for this was reading\n  <a href=\"http://www.cs.tut.fi/~jkorpela/www/revsol.html\">http://www.cs.tut.fi/~jkorpela/www/revsol.html</a>, followed by\n  <a href=\"http://www.w3.org/TR/html4/appendix/notes.html#h-B.3.2\">http://www.w3.org/TR/html4/appendix/notes.html#h-B.3.2</a>. The feature of\n  the slash escape allows JSON to be embedded in HTML (as SGML) and XML.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>The reason for this \"escapes\" me.</p>\n\n<p><a href=\"http://www.json.org/\">JSON</a> escapes the forward slash, so a hash <code>{a: \"a/b/c\"}</code> is serialized as <code>{\"a\":\"a\\/b\\/c\"}</code> instead of <code>{\"a\":\"a/b/c\"}</code>.</p>\n\n<p>Why?</p>\n",
            "last_activity_date": 1331893081,
            "question_id": 1580647,
            "score": 152,
            "tags": [
                "javascript",
                "json"
            ],
            "title": "JSON: why are forward slashes escaped?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>You have to arrange for a distinct copy of \"i\" to be present for each of the timeout functions.</p>\n\n<pre><code>function doSetTimeout(i) {\n  setTimeout(function() { alert(i); }, 100);\n}\n\nfor (var i = 1; i &lt;= 2; ++i)\n  doSetTimeout(i);\n</code></pre>\n\n<p>If you don't do something like this (and there are other variations on this same idea), then each of the timer handler functions will <strong>share</strong> the same variable \"i\".  When the loop is finished, what's the value of \"i\"?  It's 3!  By using an intermediating function, a <strong>copy</strong> of the value of the variable is made. Since the timeout handler is created in the context of that copy, it has its own private \"i\" to use. </p>\n\n<p><em>edit</em> &mdash; there have been a couple of comments over time in which some confusion was evident over the fact that setting up a few timeouts causes the handlers to all fire at the same time. It's important to understand that the process of <em>setting up</em> the timer &mdash; the calls to <code>setTimeout()</code> &mdash; take almost no time at all. That is, telling the system, \"Please call this function after 1000 milliseconds\" will return almost immediately, as the process of installing the timeout request in the timer queue is very fast.</p>\n\n<p>Thus, if a <em>succession</em> of timeout requests is made, as is the case in the code in the OP and in my answer, and the time delay value is the same for each one, then once that amount of time has elapsed all the timer handlers will be called one after another in rapid succession.</p>\n\n<p>If what you need is for the handlers to be called at intervals, you can either use <code>setInterval()</code>, which is called exactly like <code>setTimeout()</code> but which will fire more than once after repeated delays of the requested amount, or instead you can establish the timeouts and multiply the time value by your iteration counter. That is, to modify my example code:</p>\n\n<pre><code>function doScaledTimeout(i) {\n  setTimeout(function() {\n    alert(i);\n  }, i * 5000);\n}\n</code></pre>\n\n<p>(With a <code>100</code> millisecond timeout, the effect won't be very obvious, so I bumped the number up to 5000.) The value of <code>i</code> is multiplied by the base delay value, so calling that 5 times in a loop will result in delays of 5 seconds, 10 seconds, 15 seconds, 20 seconds, and 25 seconds.</p>\n",
                    "is_accepted": true,
                    "score": 92
                },
                {
                    "body": "<p>You can use an immediately-invoked function expression (<a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\" rel=\"nofollow\">IIFE</a>) to create a closure around <code>setTimeout</code>:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>for (var i = 1; i &lt;= 3; i++) {\r\n    (function(index) {\r\n        setTimeout(function() { alert(index); }, i * 1000);\r\n    })(i);\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>The function argument to <code>setTimeout</code> is closing over the loop variable. The loop finishes before the first timeout and displays the current value of <code>i</code>, which is <code>3</code>.</p>\n\n<p>Because JavaScript variables only have function scope, the solution is to pass the loop variable to a function that sets the timeout. You can declare and call such a function like this:</p>\n\n<pre><code>for (var i = 1; i &lt;= 2; i++) {\n    (function (x) {\n        setTimeout(function () { alert(x); }, 100);\n    })(i);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p><strong>ANSWER</strong>?</p>\n\n<p>I'm using it for an animation for adding items to a cart - a cart icon floats to the cart area from the product \"add\" button, when clicked:</p>\n\n<pre><code>function addCartItem(opts) {\n    for (var i=0; i&lt;opts.qty; i++) {\n        setTimeout(function() {\n            console.log('ADDED ONE!');\n        }, 1000*i);\n    }\n};\n</code></pre>\n\n<p>NOTE the duration is in <em>unit times n</em> epocs.</p>\n\n<p>So starting at the the click moment, the animations start epoc (of EACH animation) is the product of each one-second-unit multiplied by the number of items.</p>\n\n<p><em>epoc</em>: <a href=\"https://en.wikipedia.org/wiki/Epoch_%28reference_date%29\">https://en.wikipedia.org/wiki/Epoch_(reference_date)</a></p>\n\n<p>Hope this helps!</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>You can use the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout\" rel=\"nofollow\">extra arguments to setTimeout</a> to pass parameters to the callback function.</p>\n\n<pre><code>for (var i = 1; i &lt;= 2; i++) {\n    setTimeout(function(j) { alert(j) }, 100, i);\n}\n</code></pre>\n\n<p>Note: This doesn't work on IE9 and below browsers.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Besides <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\" rel=\"nofollow\">IIFE</a>s and creating a separate function, you can simply <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WindowTimers/setTimeout\" rel=\"nofollow\">pass extra parameters to setTimeout</a>, which in turn will be passed to the callback. Note that this won't work in IE9.</p>\n\n<pre><code>for (var i = 1; i &lt;= 2; i++) {\n    setTimeout(function(j) { alert(j) }, 1000 * i, i);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Well, another working solution based on Cody's answer but a little more general can be something like this:</p>\n\n<pre><code>function timedAlert(msg, timing){\n    setTimeout(function(){\n        alert(msg);    \n    }, timing);\n}\n\nfunction yourFunction(time, counter){\n    for (var i = 1; i &lt;= counter; i++) {\n        var msg = i, timing = i * time * 1000; //this is in seconds\n        timedAlert (msg, timing);\n    };\n}\n\nyourFunction(timeInSeconds, counter); // well here are the values of your choice.\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have this script:</p>\n\n<pre><code>for(var i=1; i&lt;=2; i++){\n    setTimeout(function() { alert(i) }, 100);\n}\n</code></pre>\n\n<p>But the alert message is just <strong>two times '3'</strong> (i seems to be a reference). <strong>I want the alert to be 1 and 2...</strong></p>\n\n<p>Is there a way to pass the i, without writing the function as a string?</p>\n",
            "last_activity_date": 1425978884,
            "question_id": 5226285,
            "score": 64,
            "tags": [
                "javascript"
            ],
            "title": "setTimeout in a for-loop and pass i as value"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>I have not seen any documentation on using JQuery to parse XML.\nJQuery typically uses the Browser dom to browse an HTML document, I don't believe it reads the html itself.</p>\n\n<p>You should probably look at the built in XML handling in JavaScript itself.</p>\n\n<p><a href=\"http://www.webreference.com/programming/javascript/definitive2/\" rel=\"nofollow\">http://www.webreference.com/programming/javascript/definitive2/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I got it.</p>\n\n<p>Turns out that it requires <code>\\\\</code> to escape the colon.</p>\n\n<pre><code>$.get(xmlPath, {}, function(xml) {\n    $(\"rs\\\\:data\", xml).find(\"z\\\\:row\").each(function(i) {\n        alert(\"found zrow\");\n    });\n}, \"xml\");\n</code></pre>\n\n<p>As Rich pointed out:</p>\n\n<p>The better solution does not require escaping and works on all \"modern\" browsers:</p>\n\n<pre><code>.find(\"[nodeName=z:row]\")\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 100
                },
                {
                    "body": "<p>Although the above answer seems to be correct, it does not work in webkit browsers (Safari, Chrome). A better solution I believe would be:</p>\n\n<pre><code>.find(\"[nodeName=z:myRow, myRow]\")    \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>If you are using jquery 1.5 you will have to add quotes around the node selector attribute value to make it work:</p>\n\n<pre><code>.find('[nodeName=\"z:row\"]')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>In case someone needs to do this <strong>without jQuery</strong>, just with normal Javascript, and for <strong>Google Chrome (webkit)</strong>, this is the only way I found to get it to work after a lot of research and testing.</p>\n\n<blockquote>\n  <p><code>parentNode.getElementsByTagNameNS(\"*\", \"name\");</code></p>\n</blockquote>\n\n<p>That will work for retrieving the following node: <code>&lt;prefix:name&gt;</code>. As you can see the prefix or namespace is omitted, and it will match elements with different namespaces provided the tag name is <code>name</code>. But hopefully this won't be a problem for you.</p>\n\n<p><strong>None of this worked for me</strong> (I am developping a Google Chrome extension):</p>\n\n<p><code>getElementsByTagNameNS(\"prefix\", \"name\")</code></p>\n\n<p><code>getElementsByTagName(\"prefix:name\")</code></p>\n\n<p><code>getElementsByTagName(\"prefix\\\\:name\")</code></p>\n\n<p><code>getElementsByTagName(\"name\")</code></p>\n\n<p><em><strong>Edit</em></strong>: after some sleep, <strong>I found a working workaround</strong> :) This function returns the first node matching a full <code>nodeName</code> such as <code>&lt;prefix:name&gt;</code>:</p>\n\n<pre><code>// Helper function for nodes names that include a prefix and a colon, such as \"&lt;yt:rating&gt;\"\nfunction getElementByNodeName(parentNode, nodeName)\n{   \n    var colonIndex = nodeName.indexOf(\":\");\n    var tag = nodeName.substr(colonIndex + 1);\n    var nodes = parentNode.getElementsByTagNameNS(\"*\", tag);\n    for (var i = 0; i &lt; nodes.length; i++)\n    {\n        if (nodes[i].nodeName == nodeName) return nodes[i]\n    }\n    return undefined;\n}\n</code></pre>\n\n<p>It can easily be modified in case you need to return all the matching elements. Hope it helps!</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>The \"\\\\\" escaping isn't foolproof and the simple </p>\n\n<pre><code>.find('[nodeName=\"z:row\"]')\n</code></pre>\n\n<p>Method seems to have been broken as of Jquery 1.7. I was able to find a solution for 1.7 , using a filter function, here: <a href=\"http://www.steveworkman.com/html5-2/javascript/2011/improving-javascript-xml-node-finding-performance-by-2000/\">Improving Javascript XML Node Finding Performance</a></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>It's worth noting that as of jQuery 1.7 there were issues with some of the work-arounds for finding namespaced elements.  See these links for more information:</p>\n\n<ul>\n<li><a href=\"http://bugs.jquery.com/ticket/10377\" rel=\"nofollow\">jQuery Bug Ticket noting the lack of cross-browser support for the ability to do .find('[nodeName=\"z:row\"]')</a> </li>\n<li><a href=\"http://www.steveworkman.com/html5-2/javascript/2011/improving-javascript-xml-node-finding-performance-by-2000/\" rel=\"nofollow\">A suggested plug-in workaround with some performance tests.</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>As mentioned above, there are problems with the above solution with current browsers/versions of jQuery - the suggested plug-in doesn't completely work either because of case issues (<code>nodeName</code>, as a property, is sometimes in all upper case). So, I wrote the following quick function:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>$.findNS = function (o, nodeName)\n{\n    return o.children().filter(function ()\n    {\n        if (this.nodeName)\n            return this.nodeName.toUpperCase() == nodeName.toUpperCase();\n        else\n            return false;\n    });\n};\n</code></pre>\n\n<p>Example usage:</p>\n\n<pre><code>$.findNS($(xml), 'x:row');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have spent several hours on this reading about plugins and all sorts of solutions with no luck.</p>\n\n<p>ArnisAndy posted a link to a jQuery discussion, where this answer is offered and I can confirm that this works for me in Chrome(v18.0), FireFox(v11.0), IE(v9.08) and Safari (v5.1.5) using jQuery (v1.7.2).</p>\n\n<p>I am trying to scrape a WordPress feed where content is named &lt;content:encoded&gt; and this is what worked for me:</p>\n\n<pre><code>content: $this.find(\"content\\\\:encoded, encoded\").text()\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>jQuery 1.7 doesn't work with the following: </p>\n\n<pre><code>$(xml).find(\"[nodeName=a:IndexField2]\")\n</code></pre>\n\n<p>One solution which I did get to work in Chrome, Firefox, and IE is to use selectors which work in IE AND selectors which work in Chrome, based on the fact that one way works in IE and the other in Chrome:</p>\n\n<pre><code>$(xml).find('a\\\\\\\\:IndexField2, IndexField2')\n</code></pre>\n\n<p>In IE, this returns nodes using the namespace (Firefox and IE require the namespace), and in Chrome, the selector returns nodes based on the non-namespace selector.  I have not tested this in Safari, but it should work because it's working in Chrome.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>My solution (because I use a Php proxy) is to replace : namespace by _ ... so no more namespace issues ;-)</p>\n\n<p>Keep it simple !</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Original Answer : <a href=\"http://stackoverflow.com/questions/4825920/jquery-xml-parsing-how-to-get-element-attribute/15397052#15397052\">jQuery XML parsing how to get element attribute</a></p>\n\n<p>Here is an example for how to successfully get the value in Chrome..</p>\n\n<pre><code> item.description = jQuery(this).find(\"[nodeName=itunes\\\\:summary]\").eq(0).text();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>just replaced the namespace by empty string. Works fine for me. Tested solution across  browsers: Firefox, IE, Chrome</p>\n\n<p>My task was to read and parse an EXCEL-file via Sharepoint EXCEL REST API. The XML-response contains tags with \"x:\" namespace.</p>\n\n<p>I decided to replace the namespace in the XML by an empty string. Works this way:\n1. Get the node of interest out of the XML-response\n2. Convert the selected node XML-Response (Document) to String\n2. Replace namespace by empty string\n3. Convert string back to XML-Document</p>\n\n<p>See code outline here --></p>\n\n<pre><code>function processXMLResponse)(xData)\n{\n  var xml = TOOLS.convertXMLToString(\"\", \"\",$(xData).find(\"entry content\")[0]);\n  xml = xml.replace(/x:/g, \"\");            // replace all occurences of namespace\n  xData =  TOOLS.createXMLDocument(xml);   // convert string back to XML\n}\n</code></pre>\n\n<p>For XML-to-String conversion find a solution here:\n<a href=\"http://www.sencha.com/forum/showthread.php?34553-Convert-DOM-XML-Document-to-string\" rel=\"nofollow\">http://www.sencha.com/forum/showthread.php?34553-Convert-DOM-XML-Document-to-string</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For Webkit browsers, you can just leave off the colon. So to find <code>&lt;media:content&gt;</code> in an RSS feed for example, you can do this:</p>\n\n<pre><code>$(this).find(\"content\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>None of the solutions above work that well. I found this and has been improved for speed. just add this, worked like a charm: </p>\n\n<pre><code>$.fn.filterNode = function(name) {\n    return this.find('*').filter(function() {\n       return this.nodeName === name;\n    });\n};\n</code></pre>\n\n<p>usage: </p>\n\n<pre><code>var ineedthatelementwiththepsuedo = $('someparentelement').filterNode('dc:creator');\n</code></pre>\n\n<p>source: <a href=\"http://www.steveworkman.com/html5-2/javascript/2011/improving-javascript-xml-node-finding-performance-by-2000/\">http://www.steveworkman.com/html5-2/javascript/2011/improving-javascript-xml-node-finding-performance-by-2000/</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>content: \n<code>$this.find(\"content\\\\:encoded, encoded\").text()</code></p>\n\n<p>is the perfect solution...</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm new to jQuery and would like to parse an xml document.</p>\n\n<p>I'm able to parse regular XML with the default namespaces but with xml such as:</p>\n\n<pre><code>&lt;xml xmlns:s=\"uuid:BDC6E3F0-6DA3-11d1-A2A3-00AA00C14882\" xmlns:dt=\"uuid:C2F41010-65B3-11d1-A29F-00AA00C14882\" xmlns:rs=\"urn:schemas-microsoft-com:rowset\" xmlns:z=\"#RowsetSchema\"&gt;\n   &lt;s:Schema id=\"RowsetSchema\"&gt;\n     &lt;s:ElementType name=\"row\" content=\"eltOnly\" rs:CommandTimeout=\"30\"&gt;\n       &lt;s:AttributeType name=\"ows_ID\" rs:name=\"ID\" rs:number=\"1\"&gt;\n        &lt;s:datatype dt:type=\"i4\" dt:maxLength=\"4\" /&gt;\n      &lt;/s:AttributeType&gt;\n       &lt;s:AttributeType name=\"ows_DocIcon\" rs:name=\"Type\" rs:number=\"2\"&gt;\n        &lt;s:datatype dt:type=\"string\" dt:maxLength=\"512\" /&gt;\n      &lt;/s:AttributeType&gt;\n       &lt;s:AttributeType name=\"ows_LinkTitle\" rs:name=\"Title\" rs:number=\"3\"&gt;\n        &lt;s:datatype dt:type=\"string\" dt:maxLength=\"512\" /&gt;\n      &lt;/s:AttributeType&gt;\n       &lt;s:AttributeType name=\"ows_ServiceCategory\" rs:name=\"Service Category\" rs:number=\"4\"&gt;\n        &lt;s:datatype dt:type=\"string\" dt:maxLength=\"512\" /&gt;\n      &lt;/s:AttributeType&gt;\n    &lt;/s:ElementType&gt;\n  &lt;/s:Schema&gt;\n   &lt;rs:data&gt;\n    &lt;z:row ows_ID=\"2\" ows_LinkTitle=\"Sample Data 1\" /&gt;\n    &lt;z:row ows_ID=\"3\" ows_LinkTitle=\"Sample Data 2\" /&gt;\n    &lt;z:row ows_ID=\"4\" ows_LinkTitle=\"Sample Data 3\" /&gt;\n  &lt;/rs:data&gt;\n&lt;/xml&gt;\n</code></pre>\n\n<p>All I really want are the <code>&lt;z:row&gt;</code>'s.</p>\n\n<p>So far, I've been doing:</p>\n\n<pre><code>$.get(xmlPath, {}, function(xml) {\n    $(\"rs:data\", xml).find(\"z:row\").each(function(i) {\n        alert(\"found zrow\");\n    });\n}, \"xml\");\n</code></pre>\n\n<p>With really no luck. Any ideas? Thanks.</p>\n",
            "last_activity_date": 1398249259,
            "question_id": 853740,
            "score": 53,
            "tags": [
                "javascript",
                "jquery",
                "xml",
                "namespaces",
                "xsd"
            ],
            "title": "jQuery XML parsing with namespaces"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>With the <a href=\"https://developer.mozilla.org/en/DOM/window.location\">window.location</a> object. This code gives you GET without the question mark.</p>\n\n<pre><code>window.location.search.replace(\"?\", \"\");\n</code></pre>\n\n<p>From your example it will return <code>returnurl=%2Fadmin</code></p>\n\n<p><strong>EDIT</strong>: I took the liberty of changing <a href=\"http://stackoverflow.com/a/21210643/179669\">Qwerty's answer</a>, which is <strong>really good</strong>, and as he pointed I followed exactly what the OP asked:</p>\n\n<pre><code>function parse(val) {\n    var result = \"Not found\",\n        tmp = [];\n    location.search\n    //.replace ( \"?\", \"\" ) \n    // this is better, there might be a question mark inside\n    .substr(1)\n        .split(\"&amp;\")\n        .forEach(function (item) {\n        tmp = item.split(\"=\");\n        if (tmp[0] === val) result = decodeURIComponent(tmp[1]);\n    });\n    return result;\n}\n</code></pre>\n\n<p>I removed the duplicated function execution from his code, replacing it a variable ( tmp ) and also I've added <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent\"><code>decodeURIComponent</code></a>, exactly as OP asked. I'm not sure if this may or may not be a security issue.</p>\n\n<p>Or otherwise with plain for cycle, which will work even in IE8:</p>\n\n<pre><code>function parseSecond(val) {\n    var result = \"Not found\",\n        tmp = [];\n    var items = location.search.substr(1).split(\"&amp;\");\n    for (var index = 0; index &lt; items.length; index++) {\n        tmp = items[index].split(\"=\");\n        if (tmp[0] === val) result = decodeURIComponent(tmp[1]);\n    }\n    return result;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 65
                },
                {
                    "body": "<p>You can use search function available in location object. Search function gives the parameter part of the URL. details can be found here - <a href=\"http://www.javascriptkit.com/jsref/location.shtml\" rel=\"nofollow\">http://www.javascriptkit.com/jsref/location.shtml</a></p>\n\n<p>You will have to parse the resulting string for getting the variables and their values e.g. splitting them on '='</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>window.location.search</code> will return everything from the ? on.  This will remove the ?, use split to separate into key/value arrays, then assign named properties to the params object:</p>\n\n<pre><code>function getSearchParameters() {\n      var prmstr = window.location.search.substr(1);\n      return prmstr != null &amp;&amp; prmstr != \"\" ? transformToAssocArray(prmstr) : {};\n}\n\nfunction transformToAssocArray( prmstr ) {\n    var params = {};\n    var prmarr = prmstr.split(\"&amp;\");\n    for ( var i = 0; i &lt; prmarr.length; i++) {\n        var tmparr = prmarr[i].split(\"=\");\n        params[tmparr[0]] = tmparr[1];\n    }\n    return params;\n}\n\nvar params = getSearchParameters();\n</code></pre>\n\n<p>You can then get the test parameter from <code>http://myurl.com/?test=1</code> by calling <code>params.test</code>.</p>\n",
                    "is_accepted": false,
                    "score": 153
                },
                {
                    "body": "<p>a more fancy way to do it: :)</p>\n\n<pre><code>var options = decodeURIComponent(window.location.search.slice(1))\n                      .split('&amp;')\n                      .reduce(function _reduce (/*Object*/ a, /*String*/ b) {\n                        b = b.split('=');\n                        a[b[0]] = b[1];\n                        return a;\n                      }, {});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<h1><em>tl;dr</em> solution on a single line of code using vanilla javascript</h1>\n\n<pre><code>var queryDict = {}\nlocation.search.substr(1).split(\"&amp;\").forEach(function(item) {queryDict[item.split(\"=\")[0]] = item.split(\"=\")[1]})\n</code></pre>\n\n<p>For querystring <code>?a=1&amp;b=2&amp;c=3&amp;d&amp;e</code>it returns:</p>\n\n<pre><code>&gt; queryDict\na: \"1\"\nb: \"2\"\nc: \"3\"\nd: undefined\ne: undefined\n</code></pre>\n\n<h2><em>multi-valued keys</em> and <em>encoded characters</em>?</h2>\n\n<p>See the original answer at <a href=\"http://stackoverflow.com/a/21152762/985454\">How can I get query string values in JavaScript?</a></p>\n\n<pre><code>\"?a=1&amp;b=2&amp;c=3&amp;d&amp;e&amp;a=5&amp;a=t%20e%20x%20t&amp;e=http%3A%2F%2Fw3schools.com%2Fmy%20test.asp%3Fname%3Dst\u00e5le%26car%3Dsaab\"\n&gt; queryDict\na: [\"1\", \"5\", \"t e x t\"]\nb: [\"2\"]\nc: [\"3\"]\nd: [undefined]\ne: [undefined, \"http://w3schools.com/my test.asp?name=st\u00e5le&amp;car=saab\"]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 46
                },
                {
                    "body": "<p>My solution expands on @tak3r 's</p>\n\n<p>It returns an empty object when there are no query params and supports the array notation <code>?a=1&amp;a=2&amp;a=3</code>:</p>\n\n<pre><code>function getQueryParams () {\n  function identity (e) { return e; }\n  function toKeyValue (params, param) {\n    var keyValue = param.split('=');\n    var key = keyValue[0], value = keyValue[1];\n\n    params[key] = params[key]?[value].concat(params[key]):value;\n    return params;\n  }\n  return decodeURIComponent(window.location.search).\n    replace(/^\\?/, '').split('&amp;').\n    filter(identity).\n    reduce(toKeyValue, {});\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>i do it like this (to retrieve a specific get-parameter, here 'parameterName'):</p>\n\n<pre><code>var parameterValue = decodeURIComponent(window.location.search.match(/(\\?|&amp;)parameterName\\=([^&amp;]*)/)[2]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you don't mind using a library instead of rolling your own implementation, check out <a href=\"https://github.com/jgallen23/querystring\" rel=\"nofollow\">https://github.com/jgallen23/querystring</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<pre><code>http://domain.com/page.html?returnurl=%2Fadmin\n</code></pre>\n\n<p>For <code>js</code> within <code>page.html</code>,how can it retrieve <code>GET</code> parameters?</p>\n\n<p>For the above simple example,<code>func('returnurl')</code> should be <code>/admin</code></p>\n\n<p>But it should also work for complex querystrngs...</p>\n",
            "last_activity_date": 1417177636,
            "question_id": 5448545,
            "score": 107,
            "tags": [
                "javascript",
                "get"
            ],
            "title": "How to retrieve GET parameters from javascript?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>JavaScript objects<sup>1</sup> are not ordered. It is meaningless to try to \"sort\" them. If you want to iterate over an object's properties, you can sort the keys and then retrieve the associated values:</p>\n\n<pre><code>var myObj =\n    {\n        'b': 'asdsadfd',\n        'c': 'masdasaf',\n        'a': 'dsfdsfsdf'\n    },\n    keys = [],\n    k, i, len;\n\nfor (k in myObj)\n{\n    if (myObj.hasOwnProperty(k))\n    {\n        keys.push(k);\n    }\n}\n\nkeys.sort();\n\nlen = keys.length;\n\nfor (i = 0; i &lt; len; i++)\n{\n    k = keys[i];\n    alert(k + ':' + myObj[k]);\n}\n</code></pre>\n\n<p><strong><a href=\"http://jsfiddle.net/mattball/xbEdQ/\">Demo &#x2192;</a></strong></p>\n\n<hr>\n\n<p>Alternate implementation using <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Object/keys\"><code>Object.keys</code></a> fanciness:</p>\n\n<pre><code>var myObj =\n    {\n        'b': 'asdsadfd',\n        'c': 'masdasaf',\n        'a': 'dsfdsfsdf'\n    },\n    keys = Object.keys(myObj),\n    i, len = keys.length;\n\nkeys.sort();\n\nfor (i = 0; i &lt; len; i++)\n{\n    k = keys[i];\n    alert(k + ':' + myObj[k]);\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/mattball/mvrWb\">http://jsfiddle.net/mattball/mvrWb</a></p>\n\n<hr>\n\n<p><sup><sup>1</sup>Not to be pedantic, but <a href=\"http://benalman.com/news/2010/03/theres-no-such-thing-as-a-json/\">there's no such thing as a JSON object</a>.</sup></p>\n",
                    "is_accepted": false,
                    "score": 87
                },
                {
                    "body": "<p>Very good example of sorting object keys here: <a href=\"http://stackoverflow.com/questions/890807/iterate-over-a-javascript-associative-array-in-sorted-order/890829#890829\">Iterate over a Javascript associative array in sorted order</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This works for me</p>\n\n<pre><code>/**\n * Return an Object sorted by it's Key\n */\nvar sortObjectByKey = function(obj){\n    var keys = [];\n    var sorted_obj = {};\n\n    for(var key in obj){\n        if(obj.hasOwnProperty(key)){\n            keys.push(key);\n        }\n    }\n\n    // sort keys\n    keys.sort();\n\n    // create new array based on Sorted Keys\n    jQuery.each(keys, function(i, key){\n        sorted_obj[key] = obj[key];\n    });\n\n    return sorted_obj;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>\"Objects\" cannot be sorted. But you can order object elements using \"arrays\":</p>\n\n<p><strong>Object</strong>:</p>\n\n<pre><code>{\n  a:222,\n  b:111\n}\n</code></pre>\n\n<p><strong>Array</strong>:</p>\n\n<pre><code>[{b:111},{a:222}]\n</code></pre>\n\n<p>...actually that is:</p>\n\n<pre><code>[\n  0:{b:111},\n  1:{a:222}\n]\n</code></pre>\n\n<p>Alternative (if you using indexes - 128,129):</p>\n\n<pre><code>[\n  0:[128,{b:111}],\n  1:[129,{a:222}]\n]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Using lodash this will work:</p>\n\n<pre><code>some_map = { 'b' : 'asdsad', 'c' : 'masdas', 'a' : 'dsfdsfsdf' }\n\n// perform a function in order of ascending key\n_(some_map).keys().sort().each(function (key) {\n  var value = some_map[key];\n  // do something\n});\n\n// or alternatively to build a sorted list\nsorted_list = _(some_map).keys().sort().map(function (key) {\n  var value = some_map[key];\n  // return something that shall become an item in the sorted list\n}).value();\n</code></pre>\n\n<p>Just food for thought.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Suppose it could be useful in VisualStudio debugger which shows unordered object properties.</p>\n\n<pre><code>(function(s){var t={};Object.keys(s).sort().forEach(function(k){t[k]=s[k]});return t})({b:2,a:1,c:3})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Use this code if you have nested objects or if you have nested array obj.</p>\n\n<pre><code>var sortObjectByKey = function(obj){\n    var keys = [];\n    var sorted_obj = {};\n    for(var key in obj){\n        if(obj.hasOwnProperty(key)){\n            keys.push(key);\n        }\n    }\n    // sort keys\n    keys.sort();\n\n    // create new array based on Sorted Keys\n    jQuery.each(keys, function(i, key){\n        var val = obj[key];\n        if(val instanceof Array){\n            //do for loop;\n            var arr = [];\n            jQuery.each(val,function(){\n                arr.push(sortObjectByKey(this));\n            }); \n            val = arr;\n\n        }else if(val instanceof Object){\n            val = sortObjectByKey(val)\n        }\n        sorted_obj[key] = val;\n    });\n    return sorted_obj;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As already mentioned, objects are unordered.</p>\n\n<p>However...</p>\n\n<p>You may find this idiom useful:</p>\n\n<pre><code>var o = { 'b' : 'asdsad', 'c' : 'masdas', 'a' : 'dsfdsfsdf' };\n\nvar kv = [];\n\nfor (var k in o) {\n  kv.push([k, o[k]]);\n}\n\nkv.sort()\n</code></pre>\n\n<p>You can then iterate through kv and do whatever you wish.</p>\n\n<pre><code>&gt; kv.sort()\n[ [ 'a', 'dsfdsfsdf' ],\n  [ 'b', 'asdsad' ],\n  [ 'c', 'masdas' ] ]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Need to be able to able to sort a JavaScript object based on the key. </p>\n\n<p>Hence the following:</p>\n\n<pre><code>{ 'b' : 'asdsad', 'c' : 'masdas', 'a' : 'dsfdsfsdf' }\n</code></pre>\n\n<p>Would become:</p>\n\n<pre><code>{ 'a' : 'dsfdsfsdf', 'b' : 'asdsad', 'c' : 'masdas' }\n</code></pre>\n",
            "last_activity_date": 1422986244,
            "question_id": 5467129,
            "score": 64,
            "tags": [
                "javascript",
                "sorting"
            ],
            "title": "Sort JavaScript object by key"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Use</p>\n\n<pre><code>newString = string.replace(/([abcdefg])?m/, function($0,$1){ return $1?$0:'m';});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 41
                },
                {
                    "body": "<p>Mijoja's strategy works for your specific case but not in general:</p>\n\n<pre><code>js&gt;newString = \"Fall ball bill balll llama\".replace(/(ba)?ll/g,\n   function($0,$1){ return $1?$0:\"[match]\";});\nFa[match] ball bi[match] balll [match]ama\n</code></pre>\n\n<p>Here's an example where the goal is to match a double-l but not if it is preceded by \"ba\". Note the word \"balll\" -- true lookbehind should have suppressed the first 2 l's but matched the 2nd pair. But by matching the first 2 l's and then ignoring that match as a false positive, the regexp engine proceeds from the <em>end</em> of that match, and ignores any characters within the false positive.</p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>As Javascript supports Lookahead, one safe way to do it is :</p>\n\n<p>Let say you want to do a lookbehind like this</p>\n\n<pre><code>(?&lt;!([abcdefg]))m\n</code></pre>\n\n<ol>\n<li>Reverse the string to match</li>\n<li><p>Apply your pattern \"reversed\" using a lookahead (be careful of the reversed matching expression inside the lookahead, in this case, it stays the same)</p>\n\n<pre><code>m(?!([abcdefg]))\n</code></pre></li>\n<li><p>reverse all the matched tokens</p></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>You could define a non-capturing group by negating your character set:</p>\n\n<p><code>\n(?:[^a-g])m\n</code></p>\n\n<p>...which would match every <code>m</code> <strong>NOT</strong> preceded by any of those letters.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><code>/(?![abcdefg])[^abcdefg]m/gi</code>\nyes this is a trick.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Let's suppose you want to find all <code>int</code> not preceded by <code>unsigned</code>:</p>\n\n<p>With support for negative look-behind:</p>\n\n<pre><code>(?&lt;!unsigned )int\n</code></pre>\n\n<p>Without support for negative look-behind:</p>\n\n<pre><code>((?!unsigned ).{9}|^.{0,8})int\n</code></pre>\n\n<p>Basically idea is to grab n preceding characters and exclude match with negative look-ahead, but also match the cases where there's no preceeding n characters. (where n is length of look-behind).</p>\n\n<p>So the regex in question:</p>\n\n<pre><code>(?&lt;!([abcdefg]))m\n</code></pre>\n\n<p>would translate to:</p>\n\n<pre><code>((?!([abcdefg])).|^)m\n</code></pre>\n\n<p>You might need to play with capturing groups to find exact spot of the string that interests you or you want to replace specific part with something else.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is there a way to achieve the equivalent of a <a href=\"http://www.regular-expressions.info/lookaround.html#lookbehind\">negative lookbehind</a> in javascript regular expressions?  I need to match a string that does not start with a specific set of characters.</p>\n\n<p>It seems I am unable to find a regex that does this without failing if the matched part is found at the beginning of the string.  Negative lookbehinds seem to be the only answer, but javascript doesn't have one.</p>\n\n<p>EDIT:\nThis is the regex that I would like to work, but it doesn't:</p>\n\n<p><code>(?&lt;!([abcdefg]))m</code></p>\n\n<p>So it would match the 'm' in 'jim' or 'm', but not 'jam'</p>\n",
            "last_activity_date": 1426059737,
            "question_id": 641407,
            "score": 49,
            "tags": [
                "javascript",
                "regex",
                "negative-lookbehind"
            ],
            "title": "Javascript: negative lookbehind equivalent?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p><strong>Generally</strong></p>\n\n<ul>\n<li><a href=\"http://www.mredkj.com/javascript/numberFormat.html\">Formatting numbers in JavaScript</a></li>\n<li><a href=\"http://geekswithblogs.net/rajeshatdotnet/archive/2008/04/05/121058.aspx\">Formatting numbers for currency display and more.</a></li>\n</ul>\n\n<p><strong>In jQuery</strong></p>\n\n<ul>\n<li><a href=\"http://www.decorplanit.com/plugin/\">autoNumeric</a> (a decent number formatter &amp; input helper with locale support for jQuery 1.5+)</li>\n<li><a href=\"http://www.asual.com/jquery/format/\">jQuery Format</a> (a clientSide implementation of Java's <a href=\"http://docs.oracle.com/javase/7/docs/api/java/text/SimpleDateFormat.html\">SimpleDateFormat</a> and <a href=\"http://docs.oracle.com/javase/7/docs/api/java/text/NumberFormat.html\">NumberFormat</a>)</li>\n<li><a href=\"http://code.google.com/p/jquery-numberformatter/\">jquery-numberformatter (number formatter with locale support)</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 57
                },
                {
                    "body": "<p>You should probably have a look at the JQuery NUMBERFORMATTER plugin:</p>\n\n<p><a href=\"https://code.google.com/p/jquery-numberformatter/\" rel=\"nofollow\">Jquery Number Formatter</a></p>\n\n<p>And this question:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/726144/javascript-easier-way-to-format-numbers/\">Javascript easier way to format numbers</a></p>\n",
                    "is_accepted": true,
                    "score": 7
                },
                {
                    "body": "<p>Firstly, converting an integer into string in JS is really simple:</p>\n\n<pre><code>// Start off with a number\nvar number = 42;\n// Convert into a string by appending an empty (or whatever you like as a string) to it\nvar string = 42+'';\n// No extra conversion is needed, even though you could actually do\nvar alsoString = number.toString();\n</code></pre>\n\n<p>If you have a number as a string and want it to be turned to an integer, you have to use the <code>parseInt(string)</code> for integers and <code>parseFloat(string)</code> for floats. Both of these functions then return the desired integer/float. Example:</p>\n\n<pre><code>// Start off with a float as a string\nvar stringFloat = '3.14';\n// And an int as a string\nvar stringInt = '42';\n\n// typeof stringInt  would give you 'string'\n\n// Get the real float from the string\nvar realFloat = parseFloat(someFloat);\n// Same for the int\nvar realInt = parseInt(stringInt);\n\n// but typeof realInt  will now give you 'number'\n</code></pre>\n\n<p>What exactly are you trying to append etc, remains unclear to me from your question.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here's a simple JS function to add commas to an integer number in string format.  It will handle whole numbers or decimal numbers.  You can pass it either a number or a string.  It obviously returns a string.</p>\n\n<pre><code>function addCommas(str) {\n    var parts = (str + \"\").split(\".\"),\n        main = parts[0],\n        len = main.length,\n        output = \"\",\n        i = len - 1;\n\n    while(i &gt;= 0) {\n        output = main.charAt(i) + output;\n        if ((len - i) % 3 === 0 &amp;&amp; i &gt; 0) {\n            output = \",\" + output;\n        }\n        --i;\n    }\n    // put decimal part back\n    if (parts.length &gt; 1) {\n        output += \".\" + parts[1];\n    }\n    return output;\n}\n</code></pre>\n\n<p>Here's a set of test cases: <a href=\"http://jsfiddle.net/jfriend00/6y57j/\" rel=\"nofollow\">http://jsfiddle.net/jfriend00/6y57j/</a></p>\n\n<p>You can see it being used in this previous jsFiddle: <a href=\"http://jsfiddle.net/jfriend00/sMnjT/\" rel=\"nofollow\">http://jsfiddle.net/jfriend00/sMnjT/</a>.  You can find functions that will handle decimal numbers too with a simple Google search for \"javascript add commas\".</p>\n\n<p>Converting a number to a string can be done many ways.  The easiest is just to add it to a string:</p>\n\n<pre><code>var myNumber = 3;\nvar myStr = \"\" + myNumber;   // \"3\"\n</code></pre>\n\n<p>Within, the context of your jsFiddle, you'd get commas into the counter by changing this line:</p>\n\n<pre><code>jTarget.text(current);\n</code></pre>\n\n<p>to this:</p>\n\n<pre><code>jTarget.text(addCommas(current));\n</code></pre>\n\n<p>You can see it working here: <a href=\"http://jsfiddle.net/jfriend00/CbjSX/\" rel=\"nofollow\">http://jsfiddle.net/jfriend00/CbjSX/</a></p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Yes, there is definitely a way to format numbers properly in javascript, for example:</p>\n\n<pre><code>var val=2489.8237\n\nval.toFixed(3) //returns 2489.824 (round up)\nval.toFixed(2) //returns 2489.82\nval.toFixed(7) //returns 2489.8237000 (padding)\n</code></pre>\n\n<p>With the use of variablename.<strong>toFixed</strong> .</p>\n\n<p>And there is another function <code>toPrecision()</code> .\nFor more detail you also can visit </p>\n\n<p><a href=\"http://raovishal.blogspot.com/2012/01/number-format-in-javascript.html\">http://raovishal.blogspot.com/2012/01/number-format-in-javascript.html</a></p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>Using <strong>JQuery</strong>.</p>\n\n<pre><code>$(document).ready(function()\n {\n    //Only number and one dot\n    function onlyDecimal(element, decimals)\n    {\n        $(element).keypress(function(event)\n        {\n            num = $(this).val() ;\n            num = isNaN(num) || num === '' || num === null ? 0.00 : num ;\n            if ((event.which != 46 || $(this).val().indexOf('.') != -1) &amp;&amp; (event.which &lt; 48 || event.which &gt; 57))\n            {\n                event.preventDefault();\n\n            }\n            if($(this).val() == parseFloat(num).toFixed(decimals))\n            {\n                event.preventDefault();\n            }\n        });\n    }\n\n     onlyDecimal(\"#TextBox1\", 3) ;\n\n\n\n});\n</code></pre>\n\n<p></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you don't want to use jQuery, take a look at <a href=\"http://adamwdraper.github.com/Numeral-js/\">Numeral.js</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>For example:</p>\n\n<pre><code>var flt = '5.99';\nvar nt = '6';\n\nvar rflt = parseFloat(flt);\nvar rnt = parseInt(nt);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://code.google.com/p/javascript-number-formatter/\" rel=\"nofollow\">http://code.google.com/p/javascript-number-formatter/</a> :</p>\n\n<ul>\n<li>Short, fast, flexible yet standalone. Only 75 lines including MIT license info, blank lines &amp; comments.</li>\n<li>Accept standard number formatting like #,##0.00 or with negation -000.####.</li>\n<li>Accept any country format like # ##0,00, #,###.##, #'###.## or any type of non-numbering symbol.</li>\n<li>Accept any numbers of digit grouping. #,##,#0.000 or #,###0.## are all valid.</li>\n<li>Accept any redundant/fool-proof formatting. ##,###,##.# or 0#,#00#.###0# are all OK.</li>\n<li>Auto number rounding.</li>\n<li>Simple interface, just supply mask &amp; value like this: format( \"0.0000\", 3.141592) </li>\n</ul>\n\n<p><strong>UPDATE</strong></p>\n\n<p>As say <strong>Tom\u00e1\u0161 Zato</strong> here one line solution:</p>\n\n<pre><code>(666.0).toLocaleString()\nnumObj.toLocaleString([locales [, options]])\n</code></pre>\n\n<p>which described in ECMA-262 5.1 Edition:</p>\n\n<ul>\n<li><a href=\"http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.3\" rel=\"nofollow\">http://www.ecma-international.org/ecma-262/5.1/#sec-15.7.4.3</a></li>\n<li><a href=\"https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString\" rel=\"nofollow\">https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Number/toLocaleString</a></li>\n</ul>\n\n<p>and will work in future versions of browsers...</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's another version:</p>\n\n<pre><code>$.fn.digits = function () {\n    return this.each(function () {\n        var value = $(this).text();\n        var decimal = \"\";\n        if (value) {\n            var pos = value.indexOf(\".\");\n            if (pos &gt;= 0) {\n                decimal = value.substring(pos);\n                value = value.substring(0, pos);\n            }\n            if (value) {\n                value = value.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\");\n                if (!String.isNullOrEmpty(decimal)) value = (value + decimal);\n                $(this).text(value);\n            }\n        }\n        else {\n            value = $(this).val()\n            if (value) {\n                var pos = value.indexOf(\".\");\n                if (pos &gt;= 0) {\n                    decimal = value.substring(pos);\n                    value = value.substring(0, pos);\n                }\n                if (value) {\n                    value = value.replace(/(\\d)(?=(\\d\\d\\d)+(?!\\d))/g, \"$1,\");\n                    if (!String.isNullOrEmpty(decimal)) value = (value + decimal);\n                    $(this).val(value);\n                }\n            }\n        }\n    })\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To get a decimal with 2 numbers after the comma, you could just use:</p>\n\n<pre><code>function nformat(a) {\n   var b = parseInt(parseFloat(a)*100)/100;\n   return b.toFixed(2);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here are some solutions, all pass the test suite, test suite and benchmark included, if you want copy and paste to test, try <a href=\"https://gist.github.com/SteelyWing/85fdcbe084c332596179\" rel=\"nofollow\">This Gist</a>.</p>\n\n<h1>Method 0 (RegExp)</h1>\n\n<p>Base on <a href=\"http://stackoverflow.com/a/14428340/1877620\">http://stackoverflow.com/a/14428340/1877620</a>, but fix if there is no decimal point.</p>\n\n<pre><code>if (typeof Number.prototype.format === 'undefined') {\n    Number.prototype.format = function (precision) {\n        if (!isFinite(this)) {\n            return this.toString();\n        }\n\n        var a = this.toFixed(precision).split('.');\n        a[0] = a[0].replace(/\\d(?=(\\d{3})+$)/g, '$&amp;,');\n        return a.join('.');\n    }\n}\n</code></pre>\n\n<h1>Method 1</h1>\n\n<pre><code>if (typeof Number.prototype.format1 === 'undefined') {\n    Number.prototype.format1 = function (precision) {\n        if (!isFinite(this)) {\n            return this.toString();\n        }\n\n        var a = this.toFixed(precision).split('.'),\n            // skip the '-' sign\n            head = Number(this &lt; 0);\n\n        // skip the digits that's before the first thousands separator \n        head += (a[0].length - head) % 3 || 3;\n\n        a[0] = a[0].slice(0, head) + a[0].slice(head).replace(/\\d{3}/g, ',$&amp;');\n        return a.join('.');\n    };\n}\n</code></pre>\n\n<h1>Method 2 (Split to Array)</h1>\n\n<pre><code>if (typeof Number.prototype.format2 === 'undefined') {\n    Number.prototype.format2 = function (precision) {\n        if (!isFinite(this)) {\n            return this.toString();\n        }\n\n        var a = this.toFixed(precision).split('.');\n\n        a[0] = a[0]\n            .split('').reverse().join('')\n            .replace(/\\d{3}(?=\\d)/g, '$&amp;,')\n            .split('').reverse().join('');\n\n        return a.join('.');\n    };\n}\n</code></pre>\n\n<h1>Method 3 (Loop)</h1>\n\n<pre><code>if (typeof Number.prototype.format3 === 'undefined') {\n    Number.prototype.format3 = function (precision) {\n        if (!isFinite(this)) {\n            return this.toString();\n        }\n\n        var a = this.toFixed(precision).split('');\n        a.push('.');\n\n        var i = a.indexOf('.') - 3;\n        while (i &gt; 0 &amp;&amp; a[i-1] !== '-') {\n            a.splice(i, 0, ',');\n            i -= 3;\n        }\n\n        a.pop();\n        return a.join('');\n    };\n}\n</code></pre>\n\n<h1>Example</h1>\n\n<pre><code>console.log('======== Demo ========')\nvar n = 0;\nfor (var i=1; i&lt;20; i++) {\n    n = (n * 10) + (i % 10)/100;\n    console.log(n.format(2), (-n).format(2));\n}\n</code></pre>\n\n<h1>Separator</h1>\n\n<p>If we want custom thousands separator or decimal separator, use replace():</p>\n\n<pre><code>123456.78.format(2).replace(',', ' ').replace('.', ' ');\n</code></pre>\n\n<h1>Test suite</h1>\n\n<pre><code>function assertEqual(a, b) {\n    if (a !== b) {\n        throw a + ' !== ' + b;\n    }\n}\n\nfunction test(format_function) {\n    console.log(format_function);\n    assertEqual('NaN', format_function.call(NaN, 0))\n    assertEqual('Infinity', format_function.call(Infinity, 0))\n    assertEqual('-Infinity', format_function.call(-Infinity, 0))\n\n    assertEqual('0', format_function.call(0, 0))\n    assertEqual('0.00', format_function.call(0, 2))\n    assertEqual('1', format_function.call(1, 0))\n    assertEqual('-1', format_function.call(-1, 0))\n    // decimal padding\n    assertEqual('1.00', format_function.call(1, 2))\n    assertEqual('-1.00', format_function.call(-1, 2))\n    // decimal rounding\n    assertEqual('0.12', format_function.call(0.123456, 2))\n    assertEqual('0.1235', format_function.call(0.123456, 4))\n    assertEqual('-0.12', format_function.call(-0.123456, 2))\n    assertEqual('-0.1235', format_function.call(-0.123456, 4))\n    // thousands separator\n    assertEqual('1,234', format_function.call(1234.123456, 0))\n    assertEqual('12,345', format_function.call(12345.123456, 0))\n    assertEqual('123,456', format_function.call(123456.123456, 0))\n    assertEqual('1,234,567', format_function.call(1234567.123456, 0))\n    assertEqual('12,345,678', format_function.call(12345678.123456, 0))\n    assertEqual('123,456,789', format_function.call(123456789.123456, 0))\n    assertEqual('-1,234', format_function.call(-1234.123456, 0))\n    assertEqual('-12,345', format_function.call(-12345.123456, 0))\n    assertEqual('-123,456', format_function.call(-123456.123456, 0))\n    assertEqual('-1,234,567', format_function.call(-1234567.123456, 0))\n    assertEqual('-12,345,678', format_function.call(-12345678.123456, 0))\n    assertEqual('-123,456,789', format_function.call(-123456789.123456, 0))\n    // thousands separator and decimal\n    assertEqual('1,234.12', format_function.call(1234.123456, 2))\n    assertEqual('12,345.12', format_function.call(12345.123456, 2))\n    assertEqual('123,456.12', format_function.call(123456.123456, 2))\n    assertEqual('1,234,567.12', format_function.call(1234567.123456, 2))\n    assertEqual('12,345,678.12', format_function.call(12345678.123456, 2))\n    assertEqual('123,456,789.12', format_function.call(123456789.123456, 2))\n    assertEqual('-1,234.12', format_function.call(-1234.123456, 2))\n    assertEqual('-12,345.12', format_function.call(-12345.123456, 2))\n    assertEqual('-123,456.12', format_function.call(-123456.123456, 2))\n    assertEqual('-1,234,567.12', format_function.call(-1234567.123456, 2))\n    assertEqual('-12,345,678.12', format_function.call(-12345678.123456, 2))\n    assertEqual('-123,456,789.12', format_function.call(-123456789.123456, 2))\n}\n\nconsole.log('======== Testing ========');\ntest(Number.prototype.format);\ntest(Number.prototype.format1);\ntest(Number.prototype.format2);\ntest(Number.prototype.format3);\n</code></pre>\n\n<h1>Benchmark</h1>\n\n<pre><code>function benchmark(f) {\n    var start = new Date().getTime();\n    f();\n    return new Date().getTime() - start;\n}\n\nfunction benchmark_format(f) {\n    console.log(f);\n    time = benchmark(function () {\n        for (var i = 0; i &lt; 100000; i++) {\n            f.call(123456789, 0);\n            f.call(123456789, 2);\n        }\n    });\n    console.log(time.format(0) + 'ms');\n}\n\nasync = [];\nfunction next() {\n    setTimeout(function () {\n        f = async.shift();\n        f &amp;&amp; f();\n        next();\n    }, 10);\n}\n\nconsole.log('======== Benchmark ========');\nasync.push(function () { benchmark_format(Number.prototype.format); });\nasync.push(function () { benchmark_format(Number.prototype.format1); });\nasync.push(function () { benchmark_format(Number.prototype.format2); });\nasync.push(function () { benchmark_format(Number.prototype.format3); });\nnext();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I wrote a simple function (not yet another jQuery plugin needed!!) that converts a number to a decimal separated string or an empty string if the number wasn't a number to begin with:</p>\n\n<pre><code>function format(x) {\n    return isNaN(x)?\"\":x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}\n</code></pre>\n\n<p><code>format(578999);</code> results in <code>578,999</code></p>\n\n<p><code>format(10);</code> results in <code>10</code></p>\n\n<p>if you want to have a decimal point instead of a comma simply replace the comma in the code with a decimal point. </p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Is there a simple way to format numbers in Javascript, similar to the formatting methods available in C# (or VB.NET) via <code>ToString(\"format_provider\")</code> or <code>String.Format()</code>?</p>\n",
            "last_activity_date": 1421286435,
            "question_id": 1068284,
            "score": 51,
            "tags": [
                "javascript",
                "jquery",
                "format",
                "numbers"
            ],
            "title": "Format numbers in javascript"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>It is not possible to dynamically change the value of a file field, otherwise you could set it to \"c:\\yourfile\" and steal files very easily.</p>\n\n<p>However there are many solutions to a multi-upload system. I'm guessing that you're wanting to have a multi-select open dialog.</p>\n\n<p>Perhaps have a look at <a href=\"http://www.plupload.com/\">http://www.plupload.com/</a> - it's a very flexible solution to multiple file uploads, and supports drop zones e.t.c.</p>\n",
                    "is_accepted": true,
                    "score": 39
                }
            ],
            "body": "<p>Is there a way to set the value of a file input (<code>&lt;input type=\"file\" /&gt;</code>) or is that all blocked for security? I'm trying to use google gears' openFiles to make a simple multi-uploader.</p>\n",
            "last_activity_date": 1400151222,
            "question_id": 1017224,
            "score": 32,
            "tags": [
                "javascript",
                "google-gears"
            ],
            "title": "Dynamically set value of a file input"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>Firstly, a code block that looks like <code>(function(){})()</code> is mealy a function that is executed in place, let's break it down a little.</p>\n\n<pre><code>1. (\n2.    function(){}\n3. )\n4. ()\n</code></pre>\n\n<p>Line 2 is a plain function, wrapped in parenthesis to tell the runtime to return the function to the parent scope, once it's returned the function is executed using line 4, maybe reading through these steps will help</p>\n\n<pre><code>1. function(){ .. }\n2. (1)\n3. 2()\n</code></pre>\n\n<p>You can see that 1 is the declaration, 2 is returning the function and 3 is just executing the function.</p>\n\n<p>An example of how it would be used.</p>\n\n<pre><code>(function(doc){\n\n   doc.location = '/';\n\n})(document);//This is passed into the function above\n</code></pre>\n\n<p>As for the other questions about the plugins:</p>\n\n<p>Type 1: This is not a actually a plugin, it's an object passed as a function, as plugins tend to be functions.</p>\n\n<p>Type 2: This is again not a plugin as it does not extend the <code>$.fn</code> object. It's just an extenstion of the jQuery core, although the outcome is the same. This is if you want to add traversing functions such as toArray and so on.</p>\n\n<p>Type 3: This is the best method to add a plugin, the extended prototype of jQuery takes an object holding your plugin name and function and adds it to the plugin library for you.</p>\n",
                    "is_accepted": true,
                    "score": 86
                },
                {
                    "body": "<p>Type 3, in order to work would have to look like this:</p>\n\n<pre><code>(function($){\n    //Attach this new method to jQuery\n    $.fn.extend({     \n        //This is where you write your plugin's name\n        'pluginname': function(_options) {\n            // Put defaults inline, no need for another variable...\n            var options =  $.extend({\n                'defaults': \"go here...\"\n            }, _options);\n\n            //Iterate over the current set of matched elements\n            return this.each(function() {\n\n                //code to be inserted here\n\n            });\n        }\n    }); \n})(jQuery);\n</code></pre>\n\n<p>I am unsure why someone would use extend over just directly setting the property in the jQuery prototype, it is doing the same exact thing only in more operations and more clutter.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>At the most basic level, something of the form <code>(function(){...})()</code> is a function literal that is executed immediately. What this means is that you have defined a function and you are calling it immediately. </p>\n\n<p>This form is useful for information hiding and encapsulation since anything you define inside that function remains local to that function and inaccessible from the outside world (unless you specifically expose it - usually via a returned object literal).</p>\n\n<p>A variation of this basic form is what you see in jQuery plugins (or in this module pattern in general). Hence:</p>\n\n<pre><code>(function($) {\n  ...\n})(jQuery);\n</code></pre>\n\n<p>Which means you're passing in a reference to the actual <code>jQuery</code> object, but it's known as <code>$</code> within the scope of the function literal.</p>\n\n<p>Type 1 isn't really a plugin. You're simply assigning an object literal to <code>jQuery.fn</code>. Typically you assign a function to <code>jQuery.fn</code> as plugins are usually just functions. </p>\n\n<p>Type 2 is similar to Type 1; you aren't really creating a plugin here. You're simply adding an object literal to <code>jQuery.fn</code>.</p>\n\n<p>Type 3 is a plugin, but it's not the best or easiest way to create one.</p>\n\n<p>To understand more about this, take a look at this similar <a href=\"http://stackoverflow.com/questions/2421911/javascript-file-as-an-anonymous-function/\">question</a> and <a href=\"http://stackoverflow.com/questions/2421911/javascript-file-as-an-anonymous-function/2421949#2421949\">answer</a>. Also, <a href=\"http://www.queness.com/post/112/a-really-simple-jquery-plugin-tutorial\">this page</a> goes into some detail about authoring plugins.</p>\n",
                    "is_accepted": false,
                    "score": 47
                }
            ],
            "body": "<p>I am just starting out with writing jQuery plugins. I wrote three small plugins but I have been simply copying the line into all my plugins without actually knowing what it means. Can someone tell me a little more about these? Perhaps an explanation will come in handy someday when writing a framework :)</p>\n\n<p>What does this do? (I know it extends jQuery somehow but is there anything else interesting to know about this)</p>\n\n<pre><code>(function($) {\n\n})(jQuery);\n</code></pre>\n\n<p>What is the difference between the following two ways of writing a plugin:</p>\n\n<p><strong>Type 1:</strong></p>\n\n<pre><code>(function($) {\n    $.fn.jPluginName = {\n\n        },\n\n        $.fn.jPluginName.defaults = {\n\n        }\n})(jQuery);\n</code></pre>\n\n<p><strong>Type 2:</strong></p>\n\n<pre><code>(function($) {\n    $.jPluginName = {\n\n        }\n})(jQuery);\n</code></pre>\n\n<p><strong>Type 3:</strong></p>\n\n<pre><code>(function($){\n\n    //Attach this new method to jQuery\n    $.fn.extend({ \n\n        var defaults = {  \n        }  \n\n        var options =  $.extend(defaults, options);  \n\n        //This is where you write your plugin's name\n        pluginname: function() {\n\n            //Iterate over the current set of matched elements\n            return this.each(function() {\n\n                //code to be inserted here\n\n            });\n        }\n    }); \n})(jQuery);\n</code></pre>\n\n<p>I could be way off here and maybe all mean the same thing. I am confused. In some cases, <strong>this</strong> doesn't seem to be working in a plugin that I was writing using Type 1. So far, Type 3 seems the most elegant to me but I'd like to know about the others as well.</p>\n",
            "last_activity_date": 1409576898,
            "question_id": 2937227,
            "score": 117,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "What does (function($) {})(jQuery); mean?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>toDataURL gives you a string and you can put that string to a hidden input.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>After playing around with a few things, I managed to figure this out myself.</p>\n\n<p>First of all, this will convert a dataURI to a Blob:</p>\n\n<pre><code>function dataURItoBlob(dataURI) {\n    // convert base64/URLEncoded data component to raw binary data held in a string\n    var byteString;\n    if (dataURI.split(',')[0].indexOf('base64') &gt;= 0)\n        byteString = atob(dataURI.split(',')[1]);\n    else\n        byteString = unescape(dataURI.split(',')[1]);\n\n    // separate out the mime component\n    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n    // write the bytes of the string to a typed array\n    var ia = new Uint8Array(byteString.length);\n    for (var i = 0; i &lt; byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n\n    return new Blob([ia], {type:mimeString});\n}\n</code></pre>\n\n<p>From there, appending the data to a form such that it will be uploaded as a file is easy:</p>\n\n<pre><code>var dataURL = canvas.toDataURL('image/jpeg', 0.5);\nvar blob = dataURItoBlob(dataURL);\nvar fd = new FormData(document.forms[0]);\nfd.append(\"canvasImage\", blob);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 136
                },
                {
                    "body": "<p>The evolving standard looks to be <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#dom-canvas-toblob\">canvas.toBlob()</a> not canvas.getAsFile() as Mozilla hazarded to guess.</p>\n\n<p>I don't see any browser yet supporting it :(</p>\n\n<p>Thanks for this great thread!</p>\n\n<p>Also, anyone trying the accepted answer should be careful with BlobBuilder as I'm finding support to be limited (and namespaced):</p>\n\n<pre><code>    var bb;\n    try {\n        bb = new BlobBuilder();\n    } catch(e) {\n        try {\n            bb = new WebKitBlobBuilder();\n        } catch(e) {\n            bb = new MozBlobBuilder();\n        }\n    }\n</code></pre>\n\n<p>Were you using another library's polyfill for BlobBuilder?</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<pre><code>var BlobBuilder = (window.MozBlobBuilder || window.WebKitBlobBuilder || window.BlobBuilder);\n</code></pre>\n\n<p>can be used without the try catch. </p>\n\n<p>Thankx to check_ca. Great work. </p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>BlobBuilder and ArrayBuffer are now deprecated, here is the top comment's code updated with Blob constructor:</p>\n\n<pre><code>function dataURItoBlob(dataURI) {\n    var binary = atob(dataURI.split(',')[1]);\n    var array = [];\n    for(var i = 0; i &lt; binary.length; i++) {\n        array.push(binary.charCodeAt(i));\n    }\n    return new Blob([new Uint8Array(array)], {type: 'image/jpeg'});\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 84
                },
                {
                    "body": "<p>Thanks to @Stoive and @vava720 I combined the two in this way, avoiding to use the deprecated BlobBuilder and ArrayBuffer</p>\n\n<pre><code>function dataURItoBlob(dataURI) {\n    'use strict'\n    var byteString, \n        mimestring \n\n    if(dataURI.split(',')[0].indexOf('base64') !== -1 ) {\n        byteString = atob(dataURI.split(',')[1])\n    } else {\n        byteString = decodeURI(dataURI.split(',')[1])\n    }\n\n    mimestring = dataURI.split(',')[0].split(':')[1].split(';')[0]\n\n    var content = new Array();\n    for (var i = 0; i &lt; byteString.length; i++) {\n        content[i] = byteString.charCodeAt(i)\n    }\n\n    return new Blob([new Uint8Array(content)], {type: mimestring});\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>This one works in iOS and Safari.</p>\n\n<p>You need to use Stoive's ArrayBuffer solution but you can't use BlobBuilder, as vava720 indicates, so here's the mashup of both.</p>\n\n<pre><code>function dataURItoBlob(dataURI) {\n    var byteString = atob(dataURI.split(',')[1]);\n    var ab = new ArrayBuffer(byteString.length);\n    var ia = new Uint8Array(ab);\n    for (var i = 0; i &lt; byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n    return new Blob([ab], { type: 'image/jpeg' });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>The original answer by Stoive is easily fixable by changing the last line to accommodate Blob:</p>\n\n<pre><code>function dataURItoBlob (dataURI) {\n    // convert base64 to raw binary data held in a string\n    // doesn't handle URLEncoded DataURIs\n    var byteString;\n    if (dataURI.split(',')[0].indexOf('base64') &gt;= 0)\n        byteString = atob(dataURI.split(',')[1]);\n    else\n        byteString = unescape(dataURI.split(',')[1]);\n    // separate out the mime component\n    var mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];\n\n    // write the bytes of the string to an ArrayBuffer\n    var ab = new ArrayBuffer(byteString.length);\n    var ia = new Uint8Array(ab);\n    for (var i = 0; i &lt; byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n\n    // write the ArrayBuffer to a blob, and you're done\n    return new Blob([ab],{type: mimeString});\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>var dataURL;\nfunction resizePicture(file) {    // This file is the original image\n    var reader = new FileReader();\n    reader.onloadend = function() {\n        var tempImg = new Image();\n        tempImg.src = reader.result;\n        tempImg.onload = function() {\n            var MAX_WIDTH = 100;\n            var MAX_HEIGHT = 150;\n            var tempW = tempImg.width;\n            var tempH = tempImg.height;\n            if (tempW &gt; tempH) {\n                if (tempW &gt; MAX_WIDTH) {\n                    tempH *= MAX_WIDTH / tempW;\n                    tempW = MAX_WIDTH;\n                }\n            } else {\n                if (tempH &gt; MAX_HEIGHT) {\n                    tempW *= MAX_HEIGHT / tempH;\n                    tempH = MAX_HEIGHT;\n                }\n            }\n            var canvas = document.createElement('canvas');\n            canvas.width = tempW;\n            canvas.height = tempH;\n            var ctx = canvas.getContext(\"2d\");\n            ctx.drawImage(this, 0, 0, tempW, tempH);\n            dataURL = canvas.toDataURL(\"image/jpeg\"); // How can I convert this dataURL to an image file?\n        }\n    }\n    reader.readAsDataURL(file);\n}\n\n// Then,  want to upload the image to Parse.com. \nfunction savePicture() {\n    var name = \"productPicture.jpg\";\n    var parseFile = new Parse.File(name, dataURL); // Here instead of dataURL, I need an image file.\n    parseFile.save().then(function() {\n            // successful save\n        }, function(error) {\n            alert(\"The file either could not be read, or could not be saved to Parse.\");\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had exactly the same problem as Ravinder Payal, and I've found the answer. Try this:</p>\n\n<pre><code>var dataURL = canvas.toDataURL(\"image/jpeg\");\n\nvar name = \"image.jpg\";\nvar parseFile = new Parse.File(name, {base64: dataURL.substring(23)});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>make it simple :D</p>\n\n<pre><code>function dataURItoBlob(dataURI,mime) {\n    // convert base64 to raw binary data held in a string\n    // doesn't handle URLEncoded DataURIs\n\n    var byteString = window.atob(dataURI);\n\n    // separate out the mime component\n\n\n    // write the bytes of the string to an ArrayBuffer\n    //var ab = new ArrayBuffer(byteString.length);\n    var ia = new Uint8Array(byteString.length);\n    for (var i = 0; i &lt; byteString.length; i++) {\n        ia[i] = byteString.charCodeAt(i);\n    }\n\n    // write the ArrayBuffer to a blob, and you're done\n    var blob = new Blob([ia], { type: mime });\n\n    return blob;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've been trying to re-implement an HTML5 image uploader like the one <a href=\"http://hacks.mozilla.org/2011/01/how-to-develop-a-html5-image-uploader/\">on the Mozilla Hacks</a> site, but that works with WebKit browsers. Part of the task is to extract an image file from the <code>canvas</code> object and append it to a <a href=\"http://dev.w3.org/2006/webapi/XMLHttpRequest-2/#the-formdata-interface\">FormData</a> object for upload.</p>\n\n<p>The issue is that while <code>canvas</code> has the <code>toDataURL</code> function to return a representation of the image file, the FormData object only accepts File or Blob objects from the <a href=\"http://www.w3.org/TR/file-upload/\">File API</a>.</p>\n\n<p>The Mozilla solution used the following Firefox-only function on <code>canvas</code>:</p>\n\n<pre><code>var file = canvas.mozGetAsFile(\"foo.png\");\n</code></pre>\n\n<p>...which isn't available on WebKit browsers. The best solution I could think of is to find some way to convert a Data URI into a File object, which I thought might be part of the File API, but I can't for the life of me find something to do that.</p>\n\n<p>Is it possible? If not, any alternatives?</p>\n\n<p>Thanks.</p>\n",
            "last_activity_date": 1413846264,
            "question_id": 4998908,
            "score": 91,
            "tags": [
                "javascript",
                "html5",
                "webkit"
            ],
            "title": "Convert Data URI to File then append to FormData"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>You would use the <code>focus</code> and <code>blur</code> events of the window:</p>\n\n<pre><code>var interval_id;\n$(window).focus(function() {\n    if (!interval_id)\n        interval_id = setInterval(hard_work, 1000);\n});\n\n$(window).blur(function() {\n    clearInterval(interval_id);\n    interval_id = 0;\n});\n</code></pre>\n\n<hr>\n\n<p>To Answer the Commented Issue of \"Double Fire\" and stay within jQuery ease of use:</p>\n\n<pre><code>$(window).on(\"blur focus\", function(e) {\n    var prevType = $(this).data(\"prevType\");\n\n    if (prevType != e.type) {   //  reduce double fire issues\n        switch (e.type) {\n            case \"blur\":\n                // do work\n                break;\n            case \"focus\":\n                // do work\n                break;\n        }\n    }\n\n    $(this).data(\"prevType\", e.type);\n})\n</code></pre>\n\n<p>Click to view <a href=\"http://jsfiddle.net/meehanman/40edh944/\">Example Code Showing it working (JSFiddle)</a></p>\n",
                    "is_accepted": true,
                    "score": 149
                },
                {
                    "body": "<p>If you are trying to do something similar to google search engine when open in Chrome where certain event are triggered when you 'focus' on the page, try if hover() event answers your requirement.</p>\n\n<pre><code>#(window).hover(function() {\n  // code here...\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I would try to set a flag on the <code>window.onfocus</code> and <code>window.onblur</code> events.</p>\n\n<p>The following snippet has been tested on Firefox, Safari and Chrome, open the console and move between tabs back and forth:</p>\n\n<pre><code>var isActive;\n\nwindow.onfocus = function () { \n  isActive = true; \n}; \n\nwindow.onblur = function () { \n  isActive = false; \n}; \n\n// test\nsetInterval(function () { \n  console.log(window.isActive ? 'active' : 'inactive'); \n}, 1000);\n</code></pre>\n\n<p>Try it out <a href=\"http://jsbin.com/ulize3\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 57
                },
                {
                    "body": "<p>Using jQuery:</p>\n\n<pre><code>$(function() {\n    window.isActive = true;\n    $(window).focus(function() { this.isActive = true; });\n    $(window).blur(function() { this.isActive = false; });\n    showIsActive();\n});\n\nfunction showIsActive()\n{\n    console.log(window.isActive)\n    window.setTimeout(\"showIsActive()\", 2000);\n}\n\nfunction doWork()\n{\n    if (window.isActive) { /* do CPU-intensive stuff */}\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>All of the examples here (with the exception of rockacola's) require that the user physically click on the window to define focus.  This isn't ideal, so <code>.hover()</code> is the better choice:</p>\n\n<pre><code>$(window).hover(function(event) {\n    if (event.fromElement) {\n        console.log(\"inactive\");\n    } else {\n        console.log(\"active\");\n    }\n});\n</code></pre>\n\n<p>This'll tell you when the user has their mouse on the screen, though it still won't tell you if it's in the foreground with the user's mouse elsewhere.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>In addition to <a href=\"http://stackoverflow.com/users/91768/richard-simoes\">Richard Sim\u00f5es</a> answer you can also use the <a href=\"http://www.w3.org/TR/2011/WD-page-visibility-20110602/\">Page Visibility API</a>.</p>\n\n<blockquote>\n  <p>This specification defines a means for site developers to\n  programmatically determine the current visibility state of the page in\n  order to develop power and CPU efficient web applications.</p>\n</blockquote>\n\n<h2>Learn more</h2>\n\n<ul>\n<li><a href=\"http://davidwalsh.name/page-visibility\">http://davidwalsh.name/page-visibility</a></li>\n<li><a href=\"https://developers.google.com/chrome/whitepapers/pagevisibility\">https://developers.google.com/chrome/whitepapers/pagevisibility</a></li>\n</ul>\n\n<h2><strong>Example</strong></h2>\n\n<ul>\n<li><a href=\"http://www.samdutton.com/pageVisibility/\">http://www.samdutton.com/pageVisibility/</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 27
                }
            ],
            "body": "<blockquote>\n  <p><strong>Possible Duplicate:</strong><br>\n  <a href=\"http://stackoverflow.com/questions/1060008/is-there-a-way-to-detect-if-a-browser-window-is-not-currently-active\">Is there a way to detect if a browser window is not currently active?</a>  </p>\n</blockquote>\n\n\n\n<p>I have a function that is called every second that I only want to run if the current page is in the foreground, i.e. the user hasn't minimized the browser or switched to another tab. It serves no purpose if the user isn't looking at it and is potentially CPU-intensive, so I don't want to just waste cycles in the background.</p>\n\n<p>Does anyone know how to tell this in JavaScript?</p>\n\n<p>Note: I use jQuery, so if your answer uses that, that's fine :).</p>\n",
            "last_activity_date": 1419879597,
            "question_id": 1760250,
            "score": 132,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "How to tell if browser/tab is active"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Check current <code>scrollTop</code> vs previous <code>scrollTop</code> </p>\n\n<pre><code>var lastScrollTop = 0;\n$(window).scroll(function(event){\n   var st = $(this).scrollTop();\n   if (st &gt; lastScrollTop){\n       // downscroll code\n   } else {\n      // upscroll code\n   }\n   lastScrollTop = st;\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 230
                },
                {
                    "body": "<p>Store the previous scroll location, then see if the new one is greater than or less than that.</p>\n\n<p>Here's a way to avoid any global variables (<a href=\"http://jsfiddle.net/VyU97/1/\">fiddle available here</a>):</p>\n\n<pre><code>(function () {\n    var previousScroll = 0;\n\n    $(window).scroll(function(){\n       var currentScroll = $(this).scrollTop();\n       if (currentScroll &gt; previousScroll){\n           alert('down');\n       } else {\n          alert('up');\n       }\n       previousScroll = currentScroll;\n    });\n}()); //run this anonymous function immediately\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<pre><code>var tempScrollTop, currentScrollTop = 0; \n\n$(window).scroll(function(){ \n\n   currentScrollTop = $(\"#div\").scrollTop(); \n\n   if (tempScrollTop &gt; currentScrollTop ) {\n       // upscroll code\n   }\n  else if (tempScrollTop &lt; currentScrollTop ){\n      // downscroll code\n  }\n\n  tempScrollTop = currentScrollTop; \n} \n</code></pre>\n\n<p>or use the <a href=\"http://plugins.jquery.com/project/mousewheel\" rel=\"nofollow\">mousewheel extension</a>, see <a href=\"http://upandcrawling.wordpress.com/2010/06/08/cool-jquery-stuff-for-beginners-part-1/\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can do it without having to keep track of the previous scroll top, as all the other examples require:</p>\n\n<pre><code>$(window).bind('mousewheel', function(event) {\n    if (event.originalEvent.wheelDelta &gt;= 0) {\n        console.log('Scroll up');\n    }\n    else {\n        console.log('Scroll down');\n    }\n});\n</code></pre>\n\n<p>I am not an expert on this so feel free to research it further, but it appears that when you use <code>$(element).scroll</code>, the event being listened for is a 'scroll' event. </p>\n\n<p>But if you specifically listen for a <code>mousewheel</code> event by using bind, the <code>originalEvent</code> attribute of the event parameter to your callback contains different information.  Part of that information is <code>wheelDelta</code>.  If it's positive, you moved the mousewheel up.  If it's negative, you moved the mousewheel down. </p>\n\n<p>My guess is that <code>mousewheel</code> events will fire when the mouse wheel turns, even if the page does not scroll; a case in which 'scroll' events probably are not fired.  If you want, you can call <code>event.preventDefault()</code> at the bottom of your callback to prevent the page from scrolling, and so that you can use the mousewheel event for something other than a page scroll, like some type of zoom functionality.</p>\n",
                    "is_accepted": false,
                    "score": 78
                },
                {
                    "body": "<p>For those having problems with elastic scrolling, please use this answer</p>\n\n<p><a href=\"http://stackoverflow.com/questions/7154967/jquery-detect-scrolldown\">jQuery - Detect scrolldown</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>stock an increment in the <code>.data ()</code> of element scrolled, you will then be able to test number of times the scroll reached top.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>in the <code>.data()</code> of the element you can store a JSON and test values to launch events</p>\n\n<pre><code>{ top : 1,\n   first_top_event: function(){ ...},\n   second_top_event: function(){ ...},\n   third_top_event: function(){ ...},\n   scroll_down_event1: function(){ ...},\n   scroll_down_event2: function(){ ...}\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>this may help</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;meta charset=utf-8 /&gt;\n&lt;title&gt;JS Bin&lt;/title&gt;\n  &lt;script type='text/javascript'&gt;\n    $(function(){\n      //Keep track of last scroll\n      var lastScroll = 0;\n      $(window).scroll(function(event){\n          //Sets the current scroll position\n          var st = $(this).scrollTop();\n          //Determines up-or-down scrolling\n          if (st &gt; lastScroll){\n             //alert(\"DOWN\");\n            $('#bg').text('DOWN')\n          } \n          else {\n            //alert(\"UP\");\n            $('#bg').text('UP')\n          }\n          //Updates scroll position\n          lastScroll = st;\n      });\n    });\n  &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;h1 id=\"bg\"&gt;Scroll Here&lt;/h1&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h1>Scroll Event</h1>\n\n<p>The <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/window.onscroll\" rel=\"nofollow\">scroll event</a></strong> behaves oddly in FF (it is fired a lot of times because of the smoothness scrolling) but it works.</p>\n\n<p><em><strong>Note:</strong> The <a href=\"http://api.jquery.com/scroll/\" rel=\"nofollow\">scroll</a> event actually <strong>is fired</strong> when dragging the scroll bar, using cursor keys or mousewheel.</em></p>\n\n<pre><code>//creates an element to print the scroll position\n$(\"&lt;p id='test'&gt;\").appendTo(\"body\").css({\n    padding: \"5px 7px\",\n    background: \"#e9e9e9\",\n    position: \"fixed\",\n    bottom: \"15px\",\n    left: \"35px\" });\n\n//binds the \"scroll\" event\n$(window).scroll(function (e) {\n    var target = e.currentTarget,\n        scrollTop = window.pageYOffset || target.scrollTop,\n        lastScrollTop = $(target).data(\"lastScrollTop\") || 0,\n        scrollHeight = target.scrollHeight || document.body.scrollHeight,\n        scrollText = \"\";\n\n    if (scrollTop &gt; lastScrollTop) {\n        scrollText = \"&lt;b&gt;scroll down&lt;/b&gt;\";\n    } else {\n        scrollText = \"&lt;b&gt;scroll up&lt;/b&gt;\";\n    }\n\n    $(\"#test\").html(scrollText +\n      \"&lt;br&gt;innerHeight: \" + $(target).innerHeight() +\n      \"&lt;br&gt;scrollHeight: \" + scrollHeight +\n      \"&lt;br&gt;scrollTop: \" + scrollTop +\n      \"&lt;br&gt;lastScrollTop: \" + lastScrollTop);\n\n    if (target.scrollHeight - scrollTop === $(target).innerHeight()) {\n      console.log(\"\u25ba End of scroll\");\n    }\n    //saves the current scrollTop\n    $(target).data(\"lastScrollTop\", scrollTop);\n});\n</code></pre>\n\n<hr>\n\n<h1>Wheel Event</h1>\n\n<p>You also may take a look at MDN, it exposes a great information about the <strong><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/wheel\" rel=\"nofollow\">Wheel Event</a>.</strong><br></p>\n\n<p><em><strong>Note:</strong> The wheel event <strong>is fired only when using the mousewheel</strong>; cursor keys and dragging the scroll bar does not fire the event.</em></p>\n\n<p>I read the document and the example: <strong><em><a href=\"https://developer.mozilla.org/en-US/docs/Web/Events/wheel#Listening_to_this_event_across_browser\" rel=\"nofollow\">Listening to this event across browser</a></em></strong><br>\nand after some tests with FF, IE, chrome, safari, I ended up with this snippet:</p>\n\n<pre><code>//creates an element to print the scroll position\n$(\"&lt;p id='test'&gt;\").appendTo(\"body\").css({\n    padding: \"5px 7px\",\n    background: \"#e9e9e9\",\n    position: \"fixed\",\n    bottom: \"15px\",\n    left: \"15px\" });\n\n//attach the \"wheel\" event if it is supported, otherwise \"mousewheel\" event is used\n$(\"html\").on((\"onwheel\" in document.createElement(\"div\") ? \"wheel\" : \"mousewheel\"), function (e) {\n    var evt = e.originalEvent || e;\n\n    //this is what really matters\n    var deltaY = evt.deltaY || (-1 / 40 * evt.wheelDelta); //wheel || mousewheel\n    var scrollTop = $(this).scrollTop() || $(\"body\").scrollTop(); //fix safari\n\n    var scrollText = \"\";\n    if (deltaY &gt; 0) {\n        scrollText = \"&lt;b&gt;scroll down&lt;/b&gt;\";\n    } else {\n        scrollText = \"&lt;b&gt;scroll up&lt;/b&gt;\";\n    }\n    console.log(\"originalEvent: \", evt);\n    $(\"#test\").html(scrollText +\n      \"&lt;br&gt;clientHeight: \" + this.clientHeight +\n      \"&lt;br&gt;scrollHeight: \" + this.scrollHeight +\n      \"&lt;br&gt;scrollTop: \" + scrollTop +\n      \"&lt;br&gt;deltaY: \" + deltaY);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I have seen many version of good answers here but it seems some folks are having cross browser issues so this is my fix.</p>\n\n<p>I have used this successfully to detect direction in FF, IE and Chrome ... I haven't tested it in safari  as I use windows typically.</p>\n\n<pre><code>$(\"html, body\").bind({'mousewheel DOMMouseScroll onmousewheel touchmove scroll': \n    function(e) {\n        if (e.target.id == 'el') return;\n        e.preventDefault();\n        e.stopPropagation();\n\n        //Determine Direction\n        if (e.originalEvent.wheelDelta &amp;&amp; e.originalEvent.wheelDelta &gt;= 0) {\n            //Up\n            alert(\"up\");\n\n        } else if (e.originalEvent.detail &amp;&amp; e.originalEvent.detail &lt;= 0) {\n            //Up\n            alert(\"up\");\n\n        } else {\n            //Down\n            alert(\"down\");\n        }\n    }\n});\n</code></pre>\n\n<p>Keep in mind I also use this to stop any scrolling so if you want scrolling to still occur you must remove the <code>e.preventDefault(); e.stopPropagation();</code></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I understand there has already been an accepted answer, but wanted to post what I am using in case it can help anyone. I get the direction like <code>cliphex</code> with the mousewheel event but with support for Firefox. It's useful doing it this way in case you are doing something like locking scroll and can't get the current scroll top.</p>\n\n<p>See a live version <a href=\"http://jsfiddle.net/u9xdnyfL/1/\" rel=\"nofollow\">here</a>.</p>\n\n<pre><code>$(window).on('mousewheel DOMMouseScroll', function (e) {\n\n    var direction = (function () {\n\n        var delta = (e.type === 'DOMMouseScroll' ?\n                     e.originalEvent.detail * -40 :\n                     e.originalEvent.wheelDelta);\n\n        return delta &gt; 0 ? 0 : 1;\n    }());\n\n    if(direction === 1) {\n       // scroll down\n    }\n    if(direction === 0) {\n       // scroll up\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To ignore any snap / momentum / bounce back at the top and bottom of the page, here is a modified version of <a href=\"http://stackoverflow.com/a/4326907/836247\">Josiah's accepted answer</a>:</p>\n\n<pre><code>var prevScrollTop = 0;\n$(window).scroll(function(event){\n\n    var scrollTop = $(this).scrollTop();\n\n    if ( scrollTop &lt; 0 ) {\n        scrollTop = 0;\n    }\n    if ( scrollTop &gt; $('body').height() - $(window).height() ) {\n        scrollTop = $('body').height() - $(window).height();\n    }\n\n    if (scrollTop &gt;= prevScrollTop &amp;&amp; scrollTop) {\n        // scrolling down\n    } else {\n        // scrolling up\n    }\n\n    prevScrollTop = scrollTop;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm looking for something to this effect:</p>\n\n<pre><code>$(window).scroll(function(event){\n   if (/* magic code*/ ){\n       // upscroll code\n   } else {\n      // downscroll code\n   }\n});\n</code></pre>\n\n<p>Any ideas?</p>\n",
            "last_activity_date": 1422483308,
            "question_id": 4326845,
            "score": 111,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "How can I determine the direction of a jQuery scroll event?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>All Unicode-enabled Regex flavours should have a special character class like \\w that match any Unicode letter. Take a look at <a href=\"http://www.regular-expressions.info\" rel=\"nofollow\">your specific flavour here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You do the same way as any other character matching, but you use \\uXXXX where XXXX is the unicode number of the character.</p>\n\n<p>Look at:\n<a href=\"http://unicode.org/charts/charindex.html\" rel=\"nofollow\">http://unicode.org/charts/charindex.html</a></p>\n\n<p><a href=\"http://unicode.org/charts/\" rel=\"nofollow\">http://unicode.org/charts/</a></p>\n\n<p><a href=\"http://www.decodeunicode.org/\" rel=\"nofollow\">http://www.decodeunicode.org/</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This should do it:</p>\n\n<pre><code>[^\\x00-\\x7F]+\n</code></pre>\n\n<p>It matches any character which is not contained in the <a href=\"http://en.wikipedia.org/wiki/American_Standard_Code_for_Information_Interchange\">ASCII character set</a> (0-127, i.e. 0x0 to 0x7F). You can do the same thing with Unicode:</p>\n\n<pre><code>[^\\u0000-\\u007F]+\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 79
                },
                {
                    "body": "<p>The situation with regexes, Unicode, and Javascript sucks. It's ridiculous that programmers should have to rely on external libraries to recognize that \"\u0391\u03bb\u03c6\u03b1\" is a word, or even that \"\u00e9\" is a letter.</p>\n\n<p>But so it goes. </p>\n\n<p>This guy has written a good library for handling Unicode in Javascript Regexes:</p>\n\n<p><a href=\"http://blog.stevenlevithan.com/archives/javascript-regex-and-unicode\">http://blog.stevenlevithan.com/archives/javascript-regex-and-unicode</a></p>\n\n<p>The Unicode stuff is a plugin to this regex library:</p>\n\n<p><a href=\"http://xregexp.com/\">http://xregexp.com/</a></p>\n\n<p>Here's a post about the Unicode extension:</p>\n\n<p><a href=\"http://blog.stevenlevithan.com/archives/xregexp-unicode-plugin\">http://blog.stevenlevithan.com/archives/xregexp-unicode-plugin</a></p>\n\n<p>And the extension page itself:</p>\n\n<p><a href=\"http://xregexp.com/plugins/\">http://xregexp.com/plugins/</a></p>\n\n<p>Great work but it still bums me out that Javascript is so backwards in this regard.</p>\n\n<p>(He wrote a book for O'Reilly about the topic so it's quite possible that he knows what he's talking about.)</p>\n\n<hr>\n\n<p>Thanks, this was by far the best answer.</p>\n\n<p>The way he implemented it is by adding tables of characters with certain properties. Then, when you contruct a regex with his library, <code>\\p{charclass}</code> gets replaced with <code>[allthecharactersintheclass]</code>.</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p><code>^[a-zA-Z]+$</code> this can check only for English letters. I mean a to z and A to Z. So if it returns false means content has non English letters</p>\n\n<p>In c# you would write this like </p>\n\n<pre><code>Regex EnglisLetters = new Regex(\"^[a-zA-Z]+$\");\nreturn EnglisLetters.IsMatch(checkThis);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -8
                },
                {
                    "body": "<pre><code>words_in_text = function (text) { var words = new Array; var r = /[\\u0041-\\u005A\\u0061-\\u007A\\u00AA\\u00B5\\u00BA\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u0527\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0\\u08A2-\\u08AC\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0977\\u0979-\\u097F\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C33\\u0C35-\\u0C39\\u0C3D\\u0C58\\u0C59\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D60\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F4\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191C\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19C1-\\u19C7\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2119-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u212D\\u212F-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2183\\u2184\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2E2F\\u3005\\u3006\\u3031-\\u3035\\u303B\\u303C\\u3041-\\u3096\\u309D-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FCC\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA697\\uA6A0-\\uA6E5\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA78E\\uA790-\\uA793\\uA7A0-\\uA7AA\\uA7F8-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA80-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uABC0-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]+/g; while ((m = r.exec(text))) { words.push(m[0]) }   return words;};\n\nwords_in_text('D\u00fcsseldorf, K\u00f6ln ! \u0627\u0633\u062a\u0642\u0644\u0627\u0644. \u0622\u0632\u0627\u062f\u06cc. \u062c\u0645\u0647\u0648\u0631\u06cc \u0627\u0633\u0644\u0627\u0645\u06cc'); // returns array\n</code></pre>\n\n<p>This rexeg will mach all words in text on any language...</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>What is the easiest way to match non-english characters in a Regex? I would like to match all words individually in an input string, but the language may not be English, so I will need to match things like \u00fc, \u00f6, \u00df, and \u00f1. Also, this is in javascript/jquery, so any solution will need to apply to that. </p>\n",
            "last_activity_date": 1419597015,
            "question_id": 150033,
            "score": 81,
            "tags": [
                "javascript",
                "jquery",
                "regex"
            ],
            "title": "Regular expression to match non-english characters?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Modern browsers have support for <code>document.getElementsByClassName</code>. You can see the full breakdown of which vendors provide this functionality at <a href=\"http://caniuse.com/#feat=getelementsbyclassname\" rel=\"nofollow\">caniuse</a>. If you're looking to extend support into older browsers, you may want to consider a selector engine like that found in jQuery or a polyfill.</p>\n\n<h3>Older Answer</h3>\n\n<p>You'll want to check into <a href=\"http://www.jquery.com\" rel=\"nofollow\">jQuery</a>, which will allow the following:</p>\n\n<pre><code>$(\".classname\").hide(); // hides everything with class 'classname'\n</code></pre>\n\n<p>Google offers a hosted jQuery source-file, so you can reference it and be up-and-running in moments. Include the following in your page:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3.2/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n  $(function(){\n    $(\".classname\").hide();\n  });\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 45
                },
                {
                    "body": "<p>The <code>getElementsByClassName</code> method is now natively supported by the most recent versions of Firefox, Safari, Chrome, IE and Opera, you could make a function to check if a native implementation is available, otherwise use the Dustin Diaz method:</p>\n\n<pre><code>function getElementsByClassName(node,classname) {\n  if (node.getElementsByClassName) { // use native implementation if available\n    return node.getElementsByClassName(classname);\n  } else {\n    return (function getElementsByClass(searchClass,node) {\n        if ( node == null )\n          node = document;\n        var classElements = [],\n            els = node.getElementsByTagName(\"*\"),\n            elsLen = els.length,\n            pattern = new RegExp(\"(^|\\\\s)\"+searchClass+\"(\\\\s|$)\"), i, j;\n\n        for (i = 0, j = 0; i &lt; elsLen; i++) {\n          if ( pattern.test(els[i].className) ) {\n              classElements[j] = els[i];\n              j++;\n          }\n        }\n        return classElements;\n    })(classname, node);\n  }\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>function toggle_visibility(className) {\n   var elements = getElementsByClassName(document, className),\n       n = elements.length;\n   for (var i = 0; i &lt; n; i++) {\n     var e = elements[i];\n\n     if(e.style.display == 'block') {\n       e.style.display = 'none';\n     } else {\n       e.style.display = 'block';\n     }\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 74
                },
                {
                    "body": "<p>adding to <a href=\"http://stackoverflow.com/questions/1933602/how-to-getelementbyclass-instead-of-getelementbyid-with-javscript/1933623#1933623\">CMS's answer</a>, this is a more generic approach of <code>toggle_visibility</code> I've just used myself:</p>\n\n<pre><code>function toggle_visibility(className,display) {\n   var elements = getElementsByClassName(document, className),\n       n = elements.length;\n   for (var i = 0; i &lt; n; i++) {\n     var e = elements[i];\n\n     if(display.length &gt; 0) {\n       e.style.display = display;\n     } else {\n       if(e.style.display == 'block') {\n         e.style.display = 'none';\n       } else {\n         e.style.display = 'block';\n       }\n     }\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>My solution:</p>\n\n<p>First create \"&lt;style&gt;\" tags with an ID.</p>\n\n<pre><code>&lt;style id=\"YourID\"&gt;\n    .YourClass {background-color:red}\n&lt;/style&gt;\n</code></pre>\n\n<p>Then, I create a function in JavaScript like this:</p>\n\n<pre><code>document.getElementById('YourID').innerHTML = '.YourClass {background-color:blue}'\n</code></pre>\n\n<p>Worked like a charm for me.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm trying to toggle the visibility of certain DIV elements on a website depending on the class of each DIV. I'm using a basic Javascript snippet to toggle them. The problem is that the script only uses getElementById, as getElementByClass is not supported in Javascript. And unfortunately I do have to use class and not id to name the DIVs because the DIV names are dynamically generated by my XSLT stylesheet using certain category names.</p>\n\n<p>I know that certain browsers now support getElementByClass, but since Internet Explorer doesn't I don't want to go that route.</p>\n\n<p>I've found scripts using functions to get elements by class (such as #8 on this page: <a href=\"http://www.dustindiaz.com/top-ten-javascript/\">http://www.dustindiaz.com/top-ten-javascript/</a>), but I can't figure out how to integrate them with with my toggle script.</p>\n\n<p>Here's the html code. The DIVs themselves are missing since they are generated on page load with XML/XSLT. Thanks so much in advance. </p>\n\n<p>Main Question: How do I get the below Toggle script to get Element by Class instead of get Element by ID?</p>\n\n<pre><code>&lt;html&gt;\n\n&lt;head&gt;\n\n&lt;!--This is the TOGGLE script--&gt;\n&lt;script type=\"text/javascript\"&gt;\n&lt;!--\n    function toggle_visibility(id) {\n       var e = document.getElementById(id);\n       if(e.style.display == 'block')\n          e.style.display = 'none';\n       else\n          e.style.display = 'block';\n    }\n//--&gt;\n&lt;/script&gt;\n\n&lt;/head&gt;\n\n&lt;!--the XML/XSLT page contents will be loaded here, with DIVs named by Class separating dozens of li's--&gt;\n\n&lt;a href=\"#\" onclick=\"toggle_visibility('class1');\"&gt;Click here to toggle visibility of class 1 objects&lt;/a&gt;\n\n&lt;a href=\"#\" onclick=\"toggle_visibility('class2');\"&gt;Click here to toggle visibility of class 2 objects&lt;/a&gt;\n\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1418286905,
            "question_id": 1933602,
            "score": 59,
            "tags": [
                "javascript",
                "class",
                "toggle",
                "getelementbyid",
                "getelementsbyclassname"
            ],
            "title": "How to getElementByClass instead of GetElementById with Javascript?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>I think this is the best one:  <a href=\"http://goessner.net/download/prj/jsonxml/\">Converting between XML and JSON</a></p>\n\n<p>Be sure to read the <a href=\"http://www.xml.com/pub/a/2006/05/31/converting-between-xml-and-json.html\">accompanying article on the xml.com O'Reilly site</a>, which goes into details of the problems with these conversions, which I think you will find enlightening.  The fact that O'Reilly is hosting the article should indicate that Stefan's solution has merit.</p>\n",
                    "is_accepted": true,
                    "score": 40
                },
                {
                    "body": "<p><a href=\"http://code.google.com/p/x2js/\">http://code.google.com/p/x2js/</a> - my own library:</p>\n\n<blockquote>\n  <p>This library provides XML to JSON (JavaScript Objects) and vice versa javascript conversion functions. The library is very small and doesn't require any other additional libraries.</p>\n  \n  <p>API functions</p>\n  \n  <ul>\n  <li>new X2JS() - to create your instance to access all library functionality. Also you could specify optional configuration options here</li>\n  <li>X2JS.xml2json - Convert XML specified as DOM Object to JSON</li>\n  <li>X2JS.json2xml - Convert JSON to XML DOM Object</li>\n  <li>X2JS.xml_str2json - Convert XML specified as string to JSON</li>\n  <li>X2JS.json2xml_str - Convert JSON to XML string</li>\n  </ul>\n</blockquote>\n\n<p>Online Demo on <a href=\"http://jsfiddle.net/abdmob/gtLBx/15/\">http://jsfiddle.net/abdmob/gtLBx/15/</a></p>\n\n<pre><code>var x2js = new X2JS();\nfunction convertXml2JSon() {\n    $(\"#jsonArea\").val(JSON.stringify(x2js.xml_str2json($(\"#xmlArea\").val())));\n}\n\nfunction convertJSon2XML() {\n    $(\"#xmlArea\").val(x2js.json2xml_str($.parseJSON($(\"#jsonArea\").val())));\n}\n\nconvertXml2JSon();\nconvertJSon2XML();\n$(\"#convertToJsonBtn\").click(convertXml2JSon);\n$(\"#convertToXmlBtn\").click(convertJSon2XML);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>A while back I wrote this tool <a href=\"https://bitbucket.org/surenrao/xml2json\" rel=\"nofollow\">https://bitbucket.org/surenrao/xml2json</a> for my TV Watchlist app, hope this helps too.</p>\n\n<blockquote>\n  <p>Synopsys: A library to not only convert xml to json, but is also easy to debug (without circular errors) and recreate json back to xml. Features :- Parse xml to json object. Print json object back to xml. Can be used to save xml in IndexedDB as X2J objects. Print json object.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>These answers helped me a lot to make this function:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function xml2json(xml) {\n  try {\n    var obj = {};\n    if (xml.children.length &gt; 0) {\n      for (var i = 0; i &lt; xml.children.length; i++) {\n        var item = xml.children.item(i);\n        var nodeName = item.nodeName;\n\n        if (typeof (obj[nodeName]) == \"undefined\") {\n          obj[nodeName] = xml2json(item);\n        } else {\n          if (typeof (obj[nodeName].push) == \"undefined\") {\n            var old = obj[nodeName];\n\n            obj[nodeName] = [];\n            obj[nodeName].push(old);\n          }\n          obj[nodeName].push(xml2json(item));\n        }\n      }\n    } else {\n      obj = xml.textContent;\n    }\n    return obj;\n  } catch (e) {\n      console.log(e.message);\n  }\n}\n</code></pre>\n\n<p>As long as you pass in a jquery dom/xml object: for me it was:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>Jquery(this).find('content').eq(0)[0]\n</code></pre>\n\n<p>where <em>content</em> was the field I was storing my xml in.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here's an easy xml2json function:</p>\n\n<pre><code>&lt;script src=\"https://code.jquery.com/jquery-1.10.1.min.js\"&gt;&lt;/script&gt;\n&lt;script src=\"https://cdn.blockspring.com/blockspring.js\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  var xml_string = \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?&gt;\\n&lt;note&gt;\\n\\t&lt;to&gt;Tove&lt;/to&gt;\\n\\t&lt;from&gt;Jani&lt;/from&gt;\\n\\t&lt;heading&gt;Reminder&lt;/heading&gt;\\n\\t&lt;body&gt;Don't forget me this weekend!&lt;/body&gt;\\n&lt;/note&gt;\";\n\n  blockspring.runParsed(\"xml-to-json\", { \"my_xml\": xml_string}, function(response){\n    console.log(response.params[\"converted\"]);\n  })\n&lt;/script&gt;\n</code></pre>\n\n<p>This uses the Blockspring library. More info here: <a href=\"https://api.blockspring.com/docs/javascript-quickstart-run\" rel=\"nofollow\">https://api.blockspring.com/docs/javascript-quickstart-run</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How would you convert from XML to JSON and then back to XML?</p>\n\n<p>The following tools work quite well, but aren't completely consistent:</p>\n\n<ul>\n<li><a href=\"http://www.fyneworks.com/jquery/xml-to-json/\" rel=\"nofollow\">xml2json</a></li>\n<li><a href=\"http://michalkorecki.com/content/introducing-json-xml-jquery-plugin\" rel=\"nofollow\">json2xml</a></li>\n</ul>\n\n<p>Has anyone encountered this situation before?</p>\n",
            "last_activity_date": 1425876030,
            "question_id": 1773550,
            "score": 51,
            "tags": [
                "javascript",
                "jquery",
                "xml",
                "json",
                "format-conversion"
            ],
            "title": "Convert XML to JSON (and back) using Javascript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>That is most likely <a href=\"http://jquery.com/\">jQuery</a> code (more precisely, JavaScript using the jQuery library).</p>\n\n<p>The <code>$</code> represents the <a href=\"http://docs.jquery.com/Core\">jQuery Function</a>, and is actually a shorthand alias for <code>jQuery</code>. (Unlike in most languages, the <code>$</code> symbol is not reserved, and may be used as a variable name.) It is typically used as a <em>selector</em> (i.e. a function that returns a set of elements found in the DOM).</p>\n",
                    "is_accepted": false,
                    "score": 25
                },
                {
                    "body": "<p>Probably JQuery.</p>\n\n<p><a href=\"http://jquery.com\" rel=\"nofollow\">link text</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>the \"$()\" is the shorthand version of jQuery() used in <a href=\"http://docs.jquery.com/Core\">jQuery Library</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Your snippet of code looks like it's referencing methods from one of the popular JavaScript libraries (jQuery, ProtoType, mooTools, and so on).</p>\n\n<p>There's nothing mysterious about the use of \"$\" in JavaScript. $ is simply a valid JavaScript identifier.</p>\n\n<p>JavaScript allows upper and lower letters, numbers, and $ and _. The $ was intended to be used for machine-generated variables (such as $0001).</p>\n\n<p>Prototype, jQuery, and most javascript libraries use the $ as the primary base object (or function). Most of them also have a way to relinquish the $ so that it can be used with another library that uses it. In that case you use \"jQuery\" instead of \"$\". In fact, \"$\" is just a shortcut for \"jQuery\".</p>\n",
                    "is_accepted": true,
                    "score": 141
                },
                {
                    "body": "<p>From <a href=\"http://stackoverflow.com/questions/1122690/jquery-and-questions/1122740#1122740\">another answer</a>:</p>\n\n<p>A little history</p>\n\n<p>Remember, there is nothing inherently special about '$'. It is a variable name just like any other. In earlier days, people used to write code using document.getElementById. Because JavaScript is case-sensitive, it was normal to make mistake while writing document.getElementById. Should I capital 'b' of 'by'? Should I capital 'i' of Id? You get the drift. Because functions are first class citizens in JavaScript, you can always do this</p>\n\n<pre><code>var $ = document.getElementById; //freedom from document.getElementById!\n</code></pre>\n\n<p>[<strong>EDIT:</strong> Looks like in Firefox 3 and Google Chrome, <a href=\"http://stackoverflow.com/questions/1007340\">you can't make alias so easily</a>. In IE6 and Firefox2, above technique still works.]</p>\n\n<p>When Prototype library arrived, they named their function, which gets the DOM elements, as '$' to save on typing/readability [When writing JS code, most of the time you start with selecting some DOM elements]. Almost all the JavaScript libraries copied this idea. Prototype also introduced $$ function to select elements using CSS selector.</p>\n\n<p>jQuery not only adapted the '$ function', but expanded to make it accept all kind of 'selectors' to get the elements you want. Now, if you are already using Prototype in your project and wanted to include jQuery, you will be in problem as '$' could either refer to Prototype's implementation OR jQuery's implementation. That's why jQuery has the option of noConflict so that you can include jQuery in your project which uses Prototype and slowly migrate your code. I think this was a brilliant move on John's part! :)</p>\n",
                    "is_accepted": false,
                    "score": 18
                }
            ],
            "body": "<p>In the following JavaScript code there is a dollar sign <code>$</code>. What does it mean?</p>\n\n<pre><code>$(window).bind('load', function() {\n    $('img.protect').protectImage();\n});\n</code></pre>\n",
            "last_activity_date": 1387203562,
            "question_id": 1150381,
            "score": 52,
            "tags": [
                "javascript"
            ],
            "title": "What is the meaning of &quot;$&quot; sign in javascript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>try this loop</p>\n\n<pre><code>for (var i=0; i &lt; this.items.length; i++) {\n  this.items[i]\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The problem you have here is that the variable <code>item</code> changes with each loop.  When you are referencing <code>item</code> at some later point, the last value it held is used.  You can use a technique called a <a href=\"http://matthew-marksbury.blogspot.com/2008/12/javascript-closures-and-scope.html\">closure</a> (essentially a function that returns a function) to quickly scope the variable differently.</p>\n\n<pre><code>    for (var i in this.items) {\n            var item = this.items[i];\n            $(\"#showcasenav\").append(\"&lt;li id=\\\"showcasebutton_\"+item.id+\"\\\"&gt;&lt;img src=\\\"/images/showcase/icon-\"+item.id+\".png\\\" /&gt;&lt;/li&gt;\");\n            $(\"#showcasebutton_\"+item.id).click( \n                // create an anonymous function that will scope \"item\"\n                (function(item) {\n                   // that returns our function \n                   return function() {\n                    alert(item.id);\n                    self.switchto(item.id);\n                   };\n                })(item) // immediately call it with \"item\"\n            );\n    }\n</code></pre>\n\n<p>A side note - I see that you have jQuery here.  It has a helper function <a href=\"http://api.jquery.com/jQuery.each\"><code>$.each()</code></a> that can be used with arrays, and can be a shortcut for simple for/each loops.  Because of the way the scoping works in this call - you wont need to use a closure  because \"item\" is already the parameter of the function when it was called, not stored in a <code>var</code> in the parent function's scope, like was true in your example.</p>\n\n<pre><code>$.each(this.items,function(i, item) {\n  $(\"#showcasenav\").append(\"&lt;li id=\\\"showcasebutton_\"+item.id+\"\\\"&gt;&lt;img src=\\\"/images/showcase/icon-\"+item.id+\".png\\\" /&gt;&lt;/li&gt;\");\n  $(\"#showcasebutton_\"+item.id).click(function() {\n    alert(item.id);\n    self.switchto(item.id);\n  });\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 35
                },
                {
                    "body": "<p>The other way to approach this is to make sure the <code>= items[i]</code> business is effectively done by calling a function.  In shorthand, this:</p>\n\n<pre><code>for (var i in this.items) {\n    (function(item) {\n        $(\"#showcasenav\").append(\"&lt;li id=\\\"showcasebutton_\"+item.id+\"\\\"&gt;&lt;img src=\\\"/images/showcase/icon-\"+item.id+\".png\\\" /&gt;&lt;/li&gt;\");\n        $(\"#showcasebutton_\"+item.id).click(function() {\n            alert(item.id);\n            self.switchto(item.id);\n        });\n    })(this.items[i]);\n}\n</code></pre>\n\n<p>The anonymous function there is a bit messy, making it rather preferable to have a not-so-anonymous one around for the purpose, but it does the trick.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Javascript closures store references to their variables, so all of your onclick handlers are using the same variable.</p>\n\n<p>You need to capture the variable in an intermediate function, like this:</p>\n\n<pre><code>function buildClickHandler(pageNumber) {\n    return function()  {    //Create and return a new function\n        alert(item.id);\n        self.switchto(item.id);\n    }\n}\n</code></pre>\n\n<p>Then, use that function to create <code>click</code> handlers, like this:</p>\n\n<pre><code>for (var i in this.items) {\n    var item = this.items[i];\n    $(\"#showcasenav\").append(\"&lt;li id=\\\"showcasebutton_\"+item.id+\"\\\"&gt;&lt;img src=\\\"/images/showcase/icon-\"+item.id+\".png\\\" /&gt;&lt;/li&gt;\");\n\n    $(\"#showcasebutton_\"+item.id).click(buildClickHandler(item));\n}\n</code></pre>\n\n<p>Each call to <code>buildClickHandler</code> creates a separate closure that has its own variable.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I know very well that this is an old post, but it seems that the genious people designing jQuery (which I figured you must be using) have made the most optimal solution to your problem, as I understand it.</p>\n\n<p>In the new 1.4 version of the library, <a href=\"http://api.jquery.com/jQuery.proxy/\" rel=\"nofollow\">they have added the jQuery.proxy() function</a>. This enables you to efficiently modify the context/scope of the function you are calling - done the jQuery way, which ensures that you can stop using techniques that could potentially mess up things.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>See:</p>\n\n<pre><code>for (var i in this.items) {\n    var item = this.items[i];\n    $(\"#showcasenav\").append(\"&lt;li id=\\\"showcasebutton_\"+item.id+\"\\\"&gt;&lt;img src=\\\"/images/showcase/icon-\"+item.id+\".png\\\" /&gt;&lt;/li&gt;\");\n    $(\"#showcasebutton_\"+item.id).click(function() {\n        alert(item.id);\n        self.switchto(item.id);\n    });\n}\n</code></pre>\n\n<p>The problem is that the alerted item.id is always the id of the last item in the array (this.items). How to solve?</p>\n",
            "last_activity_date": 1275954009,
            "question_id": 1331769,
            "score": 23,
            "tags": [
                "javascript",
                "jquery",
                "loops",
                "closures"
            ],
            "title": "Access outside variable in loop from Javascript closure"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>If you are developing in .NET one of the most effective ways to avoid XSS is to use the <a href=\"http://msdn.microsoft.com/en-us/library/aa973813.aspx\" rel=\"nofollow\">Microsoft AntiXSS Library</a>. It's a very effective way to sanitize your input.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In JSTL/JSP the best way to protect against XSS is to use the c:out tag without setting the default escapeXml parameter equal to false.</p>\n\n<pre><code>&lt;c:out value=\"${somePossiblyDangerousVar}\"/&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There are only two major areas in your code which need to be addressed properly to avoid xss issues.</p>\n\n<ol>\n<li><p>before using any user input value in queries, use the database helper functions like mysql_escape_string over the data and then use it in query. It will gurantee xss safety.</p></li>\n<li><p>before displaying user input values back into form input fields, pass them through htmlspecialchars or htmlentities. This will convert all xss prone values into characters that the browser can display without being compromised.</p></li>\n</ol>\n\n<p>Once you have done the above, you are more than 95% safe from xss attacks. Then you can go on and learn advanced techniques from security websites and apply additional security on your site.</p>\n\n<p>What most frameworks do is that they discourage you to directly write html form code or do queries in string form, so that using the framework helper functions your code remains clean, while any serious problem can be addressed quickly by just updating one or two lines of code in the framework. You can simply write a little library of your own with common functions and reuse them in all your projects.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There are two kinds of XSS attack. One is where your site allows HTML to be injected somehow. This is not that hard to defend against: either escape all user input data, or strip all &lt;> tags and support something like UBB-code instead. Note: URLs may still open you up to rick-rolling type attacks.</p>\n\n<p>The more insiduous one is where some third-party site contains an IFRAME, SCRIPT or IMG tag or the like that hits a URL on your site, and this URL will use whatever authentication the user currently has towards your site. Thus, you should never, ever take any direct action in response to a GET request. If you get a GET request that attempts to do anything (update a profile, check out a shopping cart, etc), then you should respond with a form that in turn requires a POST to be accepted. This form should also contain a cross-site request forgery token, so that nobody can put up a form on a third party site that's set up to submit to your site using hidden fields (again, to avoid a masquerading attack).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You should refer to the excellent <a href=\"http://www.owasp.org/\">OWASP website</a> for a summary of attacks (<a href=\"http://www.owasp.org/index.php/XSS\">including XSS</a>) and defenses against them. Here's the simplest explanation I could come up with, which might actually be more readable than their web page (but probably nowhere nearly as complete).</p>\n\n<ol>\n<li><p><strong>Specifying a charset.</strong> First of all, ensure that your web page specifies the UTF-8 charset in the headers or in the very beginning of the <code>head</code> element HTML encode all inputs to prevent a <a href=\"http://code.google.com/p/doctype/wiki/ArticleUtf7\">UTF-7 attack</a> in Internet Explorer (and older versions of Firefox) despite other efforts to prevent XSS.</p></li>\n<li><p><strong>HTML escaping.</strong> Keep in mind that you need to HTML-escape all user input. This includes replacing <code>&lt;</code> with <code>&amp;lt;</code>, <code>&gt;</code> with <code>&amp;gt;</code>, <code>&amp;</code> with <code>&amp;amp;</code> and <code>\"</code> with <code>&amp;quot;</code>. If you will ever use single-quoted HTML attributes, you need to replace <code>'</code> with <code>&amp;#39;</code> as well. Typical server-side scripting languages <a href=\"http://php.net/htmlspecialchars\">such as PHP</a> provide functions to do this, and I encourage you to expand on these by creating standard functions to insert HTML elements rather than inserting them in an ad-hoc manner.</p></li>\n<li><p><strong>Other types of escaping.</strong> You still, however, need to be careful to never insert user input as an unquoted attribute or an attribute interpreted as JavaScript (e.g. <code>onload</code> or <code>onmouseover</code>). Obviously, this also applies to <code>script</code> elements unless the input is properly JavaScript-escaped, which is different from HTML escaping. Another special type of escaping is URL escaping for URL parameters (do it before the HTML escaping to properly include a parameter in a link).</p></li>\n<li><p><strong>Validating URLs and CSS values.</strong> The same goes for URLs of links and images (without validating based on approved prefixes) because of the <code>javascript:</code> URL scheme, and also CSS stylesheet URLs and data within <code>style</code> attributes. (Internet Explorer allows inserting JavaScript expressions as CSS values, and Firefox is similarly problematic with its XBL support.) If you must include a CSS value from an untrusted source, you should safely and strictly validate or CSS escape it.</p></li>\n<li><p><strong>Not allowing user-provided HTML.</strong> Do not allow user-provided HTML if you have the option. That is an easy way to end up with an XSS problem, and so is writing a \"parser\" for your own markup language based on simple regex substitutions. <em>I</em> would only allow formatted text if the HTML output were generated in an obviously safe manner by a real parser that escapes any text from the input using the standard escaping functions and individually builds the HTML elements. If you have no choice over the matter, use a validator/sanitizer such as <a href=\"http://www.owasp.org/index.php/Category%3aOWASP_AntiSamy_Project\">AntiSamy</a>.</p></li>\n<li><p><strong>Preventing DOM-based XSS.</strong> Do not <a href=\"https://bugzilla.mozilla.org/show_bug.cgi?id=272620\">include user input in JavaScript-generated HTML code</a> and insert it into the document. Instead, use the proper DOM methods to ensure that it is processed as text, not HTML.</p></li>\n</ol>\n\n<p>Obviously, I cannot cover every single case in which an attacker can insert JavaScript code. In general, <strong>HTTP-only</strong> cookies can be used to possibly make an XSS attack a bit harder (but by no means prevent one), and <strong>giving programmers security training</strong> is essential.</p>\n",
                    "is_accepted": false,
                    "score": 21
                }
            ],
            "body": "<p>In other words, what are the most-used techniques to sanitize input and/or output nowadays? What do people in industrial (or even just personal-use) websites use to combat the problem?</p>\n",
            "last_activity_date": 1394038472,
            "question_id": 3129899,
            "score": 12,
            "tags": [
                "javascript",
                "xss"
            ],
            "title": "What are the common defenses against XSS?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>In JavaScript, dates can be transformed to the number of milliseconds since the epoc by calling the <code>getTime()</code> method <strong>or</strong> just using the date in a numeric expression.</p>\n\n<p>So to get the difference, just subtract the two dates.</p>\n\n<p>To create a new date based on the difference, just pass the number of milliseconds in the constructor.</p>\n\n<pre><code>var oldBegin = ...\nvar oldEnd = ...\nvar newBegin = ...\n\nvar newEnd = new Date(newBegin + oldEnd - oldBegin);\n</code></pre>\n\n<p>This should just work</p>\n\n<p><strong>EDIT</strong>: Fixed bug pointed by @bdukes</p>\n\n<p><strong>EDIT</strong>: </p>\n\n<p>For an explanation of the behavior, <code>oldBegin</code>, <code>oldEnd</code>, and <code>newBegin</code> are <code>Date</code> instances. Calling operators <code>+</code> and <code>-</code> will trigger Javascript auto casting and will automatically call the <code>valueOf()</code> prototype method of those objects. It happens that the <code>valueOf()</code> method is implemented in the <code>Date</code> object as a call to <code>getTime()</code>.</p>\n\n<p>So basically: <code>date.getTime() === date.valueOf() === (0 + date) === (+date)</code></p>\n",
                    "is_accepted": true,
                    "score": 39
                },
                {
                    "body": "<p>If you use Date objects and then use the getTime() function for both dates it will give you their respective times since Jan 1, 1970 in a number value. You can then get the difference between these numbers. </p>\n\n<p>If that doesn't help you out, check out the complete documentation: <a href=\"http://www.w3schools.com/jsref/jsref_obj_date.asp\" rel=\"nofollow\">http://www.w3schools.com/jsref/jsref_obj_date.asp</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you don't care about the time component, you can use <code>.getDate()</code> and <code>.setDate()</code> to just set the date part.</p>\n\n<p>So to set your end date to 2 weeks after your start date, do something like this:</p>\n\n<pre><code>function GetEndDate(startDate)\n{\n    var endDate = new Date(startDate.getTime());\n    endDate.setDate(endDate.getDate()+14);\n    return endDate;\n}\n</code></pre>\n\n<p>To return the difference (in days) between two dates, do this:</p>\n\n<pre><code>function GetDateDiff(startDate, endDate)\n{\n    return endDate.getDate() - startDate.getDate();\n}\n</code></pre>\n\n<p>Finally, let's modify the first function so it can take the value returned by 2nd as a parameter:</p>\n\n<pre><code>function GetEndDate(startDate, days)\n{\n    var endDate = new Date(startDate.getTime());\n    endDate.setDate(endDate.getDate() + days);\n    return endDate;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Thanks @<a href=\"http://stackoverflow.com/questions/41948/how-do-i-get-the-difference-between-two-dates-in-javascript#41960\" rel=\"nofollow\">Vincent Robert</a>, I ended up using your basic example, though it's actually <code>newBegin + oldEnd - oldBegin</code>.  Here's the simplified end solution:</p>\n\n<pre><code>    // don't update end date if there's already an end date but not an old start date\n    if (!oldEnd || oldBegin) {\n        var selectedDateSpan = 1800000; // 30 minutes\n        if (oldEnd) {\n            selectedDateSpan = oldEnd - oldBegin;\n        }\n\n       newEnd = new Date(newBegin.getTime() + selectedDateSpan));\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function checkdate() {\n    var indate = new Date()\n    indate.setDate(dat)\n    indate.setMonth(mon - 1)\n    indate.setFullYear(year)\n\n    var one_day = 1000 * 60 * 60 * 24\n    var diff = Math.ceil((indate.getTime() - now.getTime()) / (one_day))\n    var str = diff + \" days are remaining..\"\n    document.getElementById('print').innerHTML = str.fontcolor('blue')\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I would like to point out an error that i encountered due to date format from a date picker. Using a format like dd/mm/yyyy wont give the correct date. Use the following</p>\n\n<pre><code>    t1=\"01/11/2011\" ;\n    t2=\"28/11/2011\";\n    var one_day=1000*60*60*24; \n</code></pre>\n\n<p>Here we need to split the inputed dates to convert them into standard format</p>\n\n<pre><code>    var x=t1.split(\"/\");     \n    var y=t2.split(\"/\");\n</code></pre>\n\n<p>Date format(Fullyear,month,date) . This will </p>\n\n<pre><code>    var date1=new Date(x[2],(x[1]-1),x[0]);  \n    var date2=new Date(y[2],(y[1]-1),y[0]);\n    var month1=x[1]-1;\n    var month2=y[1]-1;        \n</code></pre>\n\n<p>Calculate difference between the two dates, and convert to days</p>\n\n<pre><code>    _Diff=Math.ceil((date2.getTime()-date1.getTime())/(one_day)); \n</code></pre>\n\n<p>_Diff gives the diffrence between the two dates.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>this code fills the duration of study years when you input the start date and end date(qualify accured date) of study and check if the duration less than a year if yes the alert a message \ntake in mind there are three input elements the first txtFromQualifDate and second txtQualifDate and third txtStudyYears</p>\n\n<p>it will show result of number of years with fraction</p>\n\n<pre><code>function getStudyYears()\n    {\n        if(document.getElementById('txtFromQualifDate').value != '' &amp;&amp; document.getElementById('txtQualifDate').value != '')\n        {\n            var d1 = document.getElementById('txtFromQualifDate').value;\n\n            var d2 = document.getElementById('txtQualifDate').value;\n\n            var one_day=1000*60*60*24;\n\n            var x = d1.split(\"/\");\n            var y = d2.split(\"/\");\n\n            var date1=new Date(x[2],(x[1]-1),x[0]);\n\n            var date2=new Date(y[2],(y[1]-1),y[0])\n\n            var dDays = (date2.getTime()-date1.getTime())/one_day;\n\n            if(dDays &lt; 365)\n            {\n                alert(\"the date between start study and graduate must not be less than a year !\");\n\n                document.getElementById('txtQualifDate').value = \"\";\n                document.getElementById('txtStudyYears').value = \"\";\n\n                return ;\n            }\n\n            var dMonths = Math.ceil(dDays / 30);\n\n            var dYears = Math.floor(dMonths /12) + \".\" + dMonths % 12;\n\n            document.getElementById('txtStudyYears').value = dYears;\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Depending on your needs, this function will calculate the difference between the 2 days, and return a result in days decimal.</p>\n\n<pre><code>// This one returns a signed decimal. The sign indicates past or future.\n\nthis.getDateDiff = function(date1, date2) {\n    return (date1.getTime() - date2.getTime()) / (1000 * 60 * 60 * 24);\n}\n\n// This one always returns a positive decimal. (Suggested by Koen below)\n\nthis.getDateDiff = function(date1, date2) {\n    return Math.abs((date1.getTime() - date2.getTime()) / (1000 * 60 * 60 * 24));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>JavaScript perfectly supports date difference out of the box</p>\n\n<pre><code>var msMinute = 60*1000, \n    msDay = 60*60*24*1000,\n    a = new Date(2012, 2, 12, 23, 59, 59),\n    b = new Date(\"2013 march 12\");\n\n\nconsole.log(Math.floor((b - a) / msDay) + ' full days between');\nconsole.log(Math.floor(((b - a) % msDay) / msMinute) + ' full minutes between');\n</code></pre>\n\n<hr>\n\n<p>Now some pitfalls. Try this:</p>\n\n<pre><code>console.log(a - 10);\nconsole.log(a + 10);\n</code></pre>\n\n<p>So if you have risk of adding a number and Date, convert Date to <code>number</code> directly.</p>\n\n<pre><code>console.log(a.getTime() - 10);\nconsole.log(a.getTime() + 10);\n</code></pre>\n\n<p>My fist example demonstrates the power of Date object but it actually appears to be a time bomb</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>function compare()\n{\n  var end_actual_time    = $('#date3').val();\n\n  start_actual_time = new Date();\n  end_actual_time = new Date(end_actual_time);\n\n  var diff = end_actual_time-start_actual_time;\n\n  var diffSeconds = diff/1000;\n  var HH = Math.floor(diffSeconds/3600);\n  var MM = Math.floor(diffSeconds%3600)/60;\n\n  var formatted = ((HH &lt; 10)?(\"0\" + HH):HH) + \":\" + ((MM &lt; 10)?(\"0\" + MM):MM)\n  getTime(diffSeconds);\n}\nfunction getTime(seconds) {\n  var days = Math.floor(leftover / 86400);\n\n  //how many seconds are left\n  leftover = leftover - (days * 86400);\n\n  //how many full hours fits in the amount of leftover seconds\n  var hours = Math.floor(leftover / 3600);\n\n  //how many seconds are left\n  leftover = leftover - (hours * 3600);\n\n  //how many minutes fits in the amount of leftover seconds\n  var minutes = leftover / 60;\n\n  //how many seconds are left\n  //leftover = leftover - (minutes * 60);\n  alert(days + ':' + hours + ':' + minutes);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong><em><a href=\"http://jsfiddle.net/vvGPQ/1/\" rel=\"nofollow\">See JsFiddle DEMO</a></em></strong></p>\n\n<pre><code>showDiff();\n\nfunction showDiff(){\n    var date1 = new Date();    \n    var date2 = new Date(\"2015/07/30 21:59:00\");\n    //Customise date2 for your required future time\n\n    var diff = (date2 - date1)/1000;\n    var diff = Math.abs(Math.floor(diff));\n\n    var days = Math.floor(diff/(24*60*60));\n    var leftSec = diff - days * 24*60*60;\n\n    var hrs = Math.floor(leftSec/(60*60));\n    var leftSec = leftSec - hrs * 60*60;\n\n    var min = Math.floor(leftSec/(60));\n    var leftSec = leftSec - min * 60;\n\n    document.getElementById(\"showTime\").innerHTML = \"You have \" + days + \" days \" + hrs + \" hours \" + min + \" minutes and \" + leftSec + \" seconds before death.\";\n\nsetTimeout(showDiff,1000);\n}\n</code></pre>\n\n<p>for your HTML Code:</p>\n\n<pre><code>&lt;div id=\"showTime\"&gt;&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>alternative modificitaion extended code..</p>\n\n<p><a href=\"http://jsfiddle.net/vvGPQ/48/\" rel=\"nofollow\">http://jsfiddle.net/vvGPQ/48/</a></p>\n\n<pre><code>showDiff();\n\nfunction showDiff(){\nvar date1 = new Date(\"2013/01/18 06:59:00\");   \nvar date2 = new Date();\n//Customise date2 for your required future time\n\nvar diff = (date2 - date1)/1000;\nvar diff = Math.abs(Math.floor(diff));\n\nvar years = Math.floor(diff/(365*24*60*60));\nvar leftSec = diff - years * 365*24*60*60;\n\nvar month = Math.floor(leftSec/((365/12)*24*60*60));\nvar leftSec = leftSec - month * (365/12)*24*60*60;    \n\nvar days = Math.floor(leftSec/(24*60*60));\nvar leftSec = leftSec - days * 24*60*60;\n\nvar hrs = Math.floor(leftSec/(60*60));\nvar leftSec = leftSec - hrs * 60*60;\n\nvar min = Math.floor(leftSec/(60));\nvar leftSec = leftSec - min * 60;\n\n\n\n\ndocument.getElementById(\"showTime\").innerHTML = \"You have \" + years + \" years \"+ month + \" month \" + days + \" days \" + hrs + \" hours \" + min + \" minutes and \" + leftSec + \" seconds the life time has passed.\";\n\nsetTimeout(showDiff,1000);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm creating an application which lets you define events with a time frame.  I want to automatically fill in the end date when the user selects or changes the start date.  I can't quite figure out, however, how to get the difference between the two times, and then how to create a new end Date using that difference.</p>\n",
            "last_activity_date": 1424377335,
            "question_id": 41948,
            "score": 58,
            "tags": [
                "javascript",
                "date"
            ],
            "title": "How do I get the difference between two Dates in JavaScript?"
        },
        {
            "answer_count": 0,
            "body": "<p>How do you replace all instances of one string with another in javascript?\nExample:</p>\n\n<pre><code>someString = 'the cat looks like a cat'\nanotherString = someString.replace('cat', 'dog');\n</code></pre>\n\n<p>results in anotherString being set to 'the <strong>dog</strong> looks like a <strong>cat</strong>', and I would like it to be 'the <strong>dog</strong> looks like a <strong>dog</strong>'</p>\n",
            "last_activity_date": 1380804639,
            "question_id": 832257,
            "score": 65,
            "tags": [
                "javascript",
                "regex",
                "string",
                "replace"
            ],
            "title": "Javascript multiple replace"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>It works fine for me in Chrome - but Facebook do seem to be trying to disable the JavaScript console to prevent a recent scam.</p>\n\n<p>Fortunately, they provide an option to turn this protection off - <a href=\"https://www.facebook.com/selfxss\">https://www.facebook.com/selfxss</a></p>\n\n<p>Edit: As per my comment - something like <a href=\"http://kspace.in/blog/2013/02/22/disable-javascript-execution-from-console/\">this</a> could prevent JavaScript execution from the console.</p>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>I couldn't get it to trigger that on any page. A more robust version of this would do it:</p>\n\n<pre><code>window.console.log = function(){\n    console.error('The developer console is temp...');\n    window.console.log = function() {\n        return false;\n    }\n}\n\nconsole.log('test');\n</code></pre>\n\n<p>To style the output: <a href=\"http://stackoverflow.com/a/13017382/3189029\">Colors in JavaScript console</a></p>\n\n<p><strong>Edit</strong> Thinking <a href=\"http://stackoverflow.com/a/21692733/282110\">@joeldixon66</a> has the right idea: <a href=\"http://kspace.in/blog/2013/02/22/disable-javascript-execution-from-console/\">Disable JavaScript execution from console &laquo;  ::: KSpace :::</a></p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>I'm a security engineer at Facebook and this is my fault. We're testing this for some users to see if it can slow down some attacks where users are tricked into pasting (malicious) JavaScript code into the browser console.</p>\n\n<p>Just to be clear: trying to block hackers client-side is a <a href=\"http://stackoverflow.com/questions/7559409/disable-developer-tools\">bad idea</a> in general;\nthis is to protect against a <a href=\"https://www.facebook.com/photo.php?v=956977232793\">specific social engineering attack</a>.</p>\n\n<p>If you ended up in the test group and are annoyed by this, sorry. I tried to\nmake <a href=\"https://www.facebook.com/selfxss\">the opt-out page</a> as simple as\npossible while still being scary enough to stop at least <em>some</em> of the\nvictims.</p>\n\n<p>The actual code is pretty similar to <a href=\"http://stackoverflow.com/a/21692733\">@joeldixon66's link</a>; ours is a little more complicated for no good reason.</p>\n\n<p>Chrome wraps all console code in</p>\n\n<pre><code>with ((console &amp;&amp; console._commandLineAPI) || {}) {\n  &lt;code goes here&gt;\n}\n</code></pre>\n\n<p>... so the site redefines <code>console._commandLineAPI</code> to throw:</p>\n\n<pre><code>Object.defineProperty(console, '_commandLineAPI',\n   { get : function() { throw 'Nooo!' } })\n</code></pre>\n\n<p>This is <a href=\"http://escape.alf.nu/20\">not quite enough (try it!)</a>, but that's the\nmain trick.</p>\n\n<hr>\n\n<p>Epilogue: The Chrome team decided that defeating the console from user-side JS was a bug and <a href=\"https://code.google.com/p/chromium/issues/detail?id=349993\">fixed the issue</a>, rendering this technique invalid. Afterwards, additional protection was added to <a href=\"https://code.google.com/p/chromium/issues/detail?id=345205#c21\">protect users from self-xss</a>. </p>\n",
                    "is_accepted": true,
                    "score": 1695
                },
                {
                    "body": "<p>I located the Facebook's console buster script using Chrome developer tools. Here is the script with minor changes for readability. I have removed the bits that I could not understand:</p>\n\n<pre><code>Object.defineProperty(window, \"console\", {\n    value: console,\n    writable: false,\n    configurable: false\n});\n\nvar i = 0;\nfunction showWarningAndThrow() {\n    if (!i) {\n        setTimeout(function () {\n            console.log(\"%cWarning message\", \"font: 2em sans-serif; color: yellow; background-color: red;\");\n        }, 1);\n        i = 1;\n    }\n    throw \"Console is disabled\";\n}\n\nvar l, n = {\n        set: function (o) {\n            l = o;\n        },\n        get: function () {\n            showWarningAndThrow();\n            return l;\n        }\n    };\nObject.defineProperty(console, \"_commandLineAPI\", n);\nObject.defineProperty(console, \"__commandLineAPI\", n);\n</code></pre>\n\n<p>With this, the console auto-complete fails silently while statements typed in console will fail to execute (the exception will be logged).</p>\n\n<p>References:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">Object.defineProperty</a></li>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\">Object.getOwnPropertyDescriptor</a></li>\n<li><a href=\"https://developers.google.com/chrome-developer-tools/docs/console-api#consolelogobject_object\">Chrome's console.log function (for tips on formatting output)</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>Besides redefining <code>console._commandLineAPI</code>,\nthere are some other ways to break into InjectedScriptHost on webkit browsers, to prevent or alter the evaluation of expressions entered into the developers console.</p>\n\n<p>One of it is hooking into <code>Function.prototype.call</code></p>\n\n<p>Chrome evaluates the entered expression by <code>call</code>ing its eval function with <code>InjectedScriptHost</code> as <code>thisArg</code></p>\n\n<p><code>var result = evalFunction.call(object, expression);</code></p>\n\n<p>Given this, you can listen for the <code>thisArg</code> of <code>call</code> being <code>evaluate</code> and get a reference to the first argument (<code>InjectedScriptHost</code>)</p>\n\n<pre><code>if (window.webkitURL) {\n    var ish, _call = Function.prototype.call;\n    Function.prototype.call = function () { //Could be wrapped in a setter for _commandLineAPI, to redefine only when the user started typing.\n        if (arguments.length &gt; 0 &amp;&amp; this.name === \"evaluate\" &amp;&amp; arguments [0].constructor.name === \"InjectedScriptHost\") { //If thisArg is the evaluate function and the arg0 is the ISH\n            ish = arguments[0];\n            ish.evaluate = function (e) { //Redefine the evaluation behaviour\n                throw new Error ('Rejected evaluation of: \\n\\'' + e.split ('\\n').slice(1,-1).join (\"\\n\") + '\\'');\n            };\n            Function.prototype.call = _call; //Reset the Function.prototype.call\n            return _call.apply(this, arguments);  \n        }\n    };\n}\n</code></pre>\n\n<p>You could e.g. throw an error, that the evaluation was rejected.</p>\n\n<p><img src=\"http://i.imgur.com/YYDovbt.png\" alt=\"enter image description here\"></p>\n\n<p><sub>\nHere is an <a href=\"http://jsfiddle.net/Glutamat/jW7jp/show\">example</a> where the entered expression gets passed to a CoffeScript compiler before passing it to the <code>evaluate</code> function.</p>\n\n<p></sub></p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Netflix also implements this feature</p>\n\n<pre><code>(function() {\n    try {\n        var $_console$$ = console;\n        Object.defineProperty(window, \"console\", {\n            get: function() {\n                if ($_console$$._commandLineAPI)\n                    throw \"Sorry, for security reasons, the script console is deactivated on netflix.com\";\n                return $_console$$\n            },\n            set: function($val$$) {\n                $_console$$ = $val$$\n            }\n        })\n    } catch ($ignore$$) {\n    }\n})();\n</code></pre>\n\n<p>They just override <code>console._commandLineAPI</code> to throw security error.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Try running <code>delete console.log;</code> before logging anything to the console...This will clobber whatever Facebook has overridden the console function with.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>So apparently because of the recent scams, the developer tools is exploited by people to post spam and even used to \"hack\" accounts. Facebook has blocked the developer tools, and I can't even use the console.</p>\n\n<p><img src=\"http://i.stack.imgur.com/Wiatp.png\" alt=\"Enter image description here\"></p>\n\n<p>How did they do that?? <a href=\"http://stackoverflow.com/questions/7559409/disable-developer-tools\">One Stack Overflow post claimed that it is not possible</a>, but Facebook has proven them wrong.</p>\n\n<p>Just go to Facebook and open up the developer tools, type one character into the console, and this warning pops up. No matter what you put in, it will not get executed.</p>\n\n<p>How is this possible?</p>\n\n<p>They even blocked auto-complete in the console:</p>\n\n<p><img src=\"http://i.stack.imgur.com/j0Zmx.png\" alt=\"Enter image description here\"></p>\n",
            "last_activity_date": 1407173550,
            "question_id": 21692646,
            "score": 982,
            "tags": [
                "javascript",
                "facebook",
                "google-chrome-devtools"
            ],
            "title": "How does Facebook disable the browser&#39;s integrated Developer Tools?"
        },
        {
            "answer_count": 28,
            "answers": [
                {
                    "body": "<p>For the same issue, I used an easy solution : put a padding-top of 40px on each anchor.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found this solution:</p>\n\n<pre><code>&lt;a name=\"myanchor\"&gt;\n    &lt;h1 style=\"padding-top: 40px; margin-top: -40px;\"&gt;My anchor&lt;/h1&gt;\n&lt;/a&gt;\n</code></pre>\n\n<p>This doesn't create any gap in the content and anchor links works really nice.</p>\n",
                    "is_accepted": false,
                    "score": 110
                },
                {
                    "body": "<p>As @moeffju suggests, this can be <a href=\"http://nicolasgallagher.com/jump-links-and-viewport-positioning/demo/\">achieved with CSS</a>. The issue I ran into (which I'm surprised I haven't seen discussed) is the trick of overlapping previous elements with padding or a transparent border prevents hover and click actions at the bottom of those sections because the following one comes higher in the z-order.</p>\n\n<p>The best fix I found was to place section content in a <code>div</code> that is at <code>z-index: 1</code>:</p>\n\n<pre><code>// Apply to elements that serve as anchors\n.offset-anchor {\n  border-top: 75px solid transparent;\n  margin: -75px 0 0;\n  -webkit-background-clip: padding-box;\n  -moz-background-clip: padding;\n  background-clip: padding-box;\n}\n\n// Because offset-anchor causes sections to overlap the bottom of previous ones,\n// we need to put content higher so links aren't blocked by the transparent border.\n.container {\n  position: relative;\n  z-index: 1;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I ran into this same issue and ended up handling the click events manually, like:</p>\n\n<pre><code>$('#mynav a').click(() -&gt;\n  $('html, body').animate({\n      scrollTop: $($(this).attr('href')).offset().top - 40\n  }, 200\n  return false\n)\n</code></pre>\n\n<p>Scroll animation optional, of course.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The problem with pure CSS solutions is that they neither <em>work with IE7</em> (which my project needed to support at the time), nor do they work very well when it comes to selecting the content around the anchors. For this reason, I designed a jQuery solution. In general this solution could still arguably be easier than having to add classes to all links with an anchor so I think it's still useful. </p>\n\n<p>We first create a method which checks to see if a given URL is an anchor, and if that anchor is on the page. If it is, we scroll to it's correct position. When any anchors on the page are clicked, we check them, and we also check the anchor on page load.\n<strong><a href=\"http://jsfiddle.net/ianclark001/aShQL/show/\">See solution</a></strong> <a href=\"http://jsfiddle.net/ianclark001/aShQL/\">(Original JSFiddle)</a>.</p>\n\n<pre><code>/**\n  * Check an href for an anchor. If exists, and in document, scroll to it.\n  * If href argument omitted, assumes context (this) is HTML Element,\n  * which will be the case when invoked by jQuery after an event\n  */\nfunction scroll_if_anchor(href) {\n    href = typeof(href) == \"string\" ? href : $(this).attr(\"href\");\n\n    // If href missing, ignore\n    if(!href) return;\n\n    // You could easily calculate this dynamically if you prefer\n    var fromTop = 50;\n\n    // If our Href points to a valid, non-empty anchor, and is on the same page (e.g. #foo)\n    // Legacy jQuery and IE7 may have issues: http://stackoverflow.com/q/1593174\n    var $target = $(href);\n\n    // Older browsers without pushState might flicker here, as they momentarily\n    // jump to the wrong position (IE &lt; 10)\n    if($target.length) {\n        $('html, body').animate({ scrollTop: $target.offset().top - fromTop });\n        if(history &amp;&amp; \"pushState\" in history) {\n            history.pushState({}, document.title, window.location.pathname + href);\n            return false;\n        }\n    }\n}    \n\n// When our page loads, check to see if it contains and anchor\nscroll_if_anchor(window.location.hash);\n\n// Intercept all anchor clicks\n$(\"body\").on(\"click\", \"a[href^='#']\", scroll_if_anchor);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>I was looking for a solution to this as well. In my case it was pretty easy.</p>\n\n<p>I have a list menu with all the links:</p>\n\n<pre><code>&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"#one\"&gt;one&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#two\"&gt;two&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#three\"&gt;three&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"#four\"&gt;four&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>And below that the headings where it should go to.</p>\n\n<pre><code>&lt;h3&gt;one&lt;/h3&gt;\n&lt;p&gt;text here&lt;/p&gt;\n\n&lt;h3&gt;two&lt;/h3&gt;\n&lt;p&gt;text here&lt;/p&gt;\n\n&lt;h3&gt;three&lt;/h3&gt;\n&lt;p&gt;text here&lt;/p&gt;\n\n&lt;h3&gt;four&lt;/h3&gt;\n&lt;p&gt;text here&lt;/p&gt;\n</code></pre>\n\n<p>Now because I have a fixed menu at the top of my page I can't just make it go to my  tag because that would be behind the  menu.</p>\n\n<p>Instead I put a span tag inside my  tag with the proper id.</p>\n\n<pre><code>&lt;h3&gt;&lt;span id=\"one\"&gt;&lt;/span&gt;one&lt;/h3&gt;\n</code></pre>\n\n<p>Now use 2 lines of css to position them properly.</p>\n\n<pre><code>h3{ position:relative; }\nh3 span{ position:absolute; top:-200px;}\n</code></pre>\n\n<p>Change the top value to match the height of your fixed header (or more).\nNow I assume this would work with other elements as well.</p>\n",
                    "is_accepted": false,
                    "score": 75
                },
                {
                    "body": "<p>You could just use CSS without any javascript.</p>\n\n<p>Give your anchor a class:</p>\n\n<pre><code>&lt;a class=\"anchor\" id=\"top\"&gt;&lt;/a&gt;\n</code></pre>\n\n<p>You can then position the anchor an offset higher or lower than where it actually appears on the page, by making it a block element and relatively positioning it. -250px will position the anchor up 250px</p>\n\n<pre><code>a.anchor{display: block; position: relative; top: -250px; visibility: hidden;}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 318
                },
                {
                    "body": "<p>Pure css solution inspired by Alexander Savin:</p>\n\n<pre><code>a[name] {\n  padding-top: 40px;\n  margin-top: -40px;\n  display: inline-block; /* required for webkit browsers */\n}\n</code></pre>\n\n<p>Optionally you may want to add the following if the target is still off the screen:</p>\n\n<pre><code>  vertical-align: top;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 57
                },
                {
                    "body": "<p>@AlexanderSavin's solution works great in <code>WebKit</code> browsers for me.</p>\n\n<p>I additionally had to use <a href=\"https://developer.mozilla.org/en-US/docs/CSS/%3atarget\" rel=\"nofollow\">:target</a> pseudo-class which applies style to the selected anchor to adjust padding in <code>FF</code>, <code>Opera</code> &amp; <code>IE9</code>:</p>\n\n<pre><code>a:target {\n  padding-top: 40px\n}\n</code></pre>\n\n<p><em>Note that this style is not for <code>Chrome</code> / <code>Safari</code> so you'll probably have to use css-hacks, conditional comments etc.</em></p>\n\n<p>Also I'd like to notice that Alexander's solution works due to the fact that targeted element is <code>inline</code>. If you don't want link you could simply change <code>display</code> property:</p>\n\n<pre><code>&lt;div id=\"myanchor\" style=\"display: inline\"&gt;\n   &lt;h1 style=\"padding-top: 40px; margin-top: -40px;\"&gt;My anchor&lt;/h1&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Adding to Ziav's answer (with thanks to Alexander Savin), I need to be using the old-school <code>&lt;a name=\"...\"&gt;...&lt;/a&gt;</code> as we're using <code>&lt;div id=\"...\"&gt;...&lt;/div&gt;</code> for another purpose in our code. I had some display issues using <code>display: inline-block</code> -- the first line of every <code>&lt;p&gt;</code> element was turning out to be slightly right-indented (on both Webkit and Firefox browsers). I ended up trying other <code>display</code> values and <code>display: table-caption</code> works perfectly for me.</p>\n\n<pre><code>.anchor {\n  padding-top: 60px;\n  margin-top: -60px;\n  display: table-caption;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I'm facing this problem in a TYPO3 website, where all \"Content Elements\" are wrapped with something like:</p>\n\n<pre><code>&lt;div id=\"c1234\" class=\"contentElement\"&gt;...&lt;/div&gt;\n</code></pre>\n\n<p>and i changed the rendering so it renders like this:</p>\n\n<pre><code>&lt;div id=\"c1234\" class=\"anchor\"&gt;&lt;/div&gt;\n&lt;div class=\"contentElement\"&gt;...&lt;/div&gt;\n</code></pre>\n\n<p>And this CSS:</p>\n\n<pre><code>.anchor{\n    position: relative;\n    top: -50px;\n}\n</code></pre>\n\n<p>The fixed topbar being 40px high, now the anchors work again and start 10px under the topbar.</p>\n\n<p>Only drawback of this technique is you can no longer use <code>:target</code>. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I added 40px-height <code>.vspace</code> element holding the anchor before each of my <code>h1</code> elements.</p>\n\n<pre><code>&lt;div class=\"vspace\" id=\"gherkin\"&gt;&lt;/div&gt;\n&lt;div class=\"page-header\"&gt;\n  &lt;h1&gt;Gherkin&lt;/h1&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>In the CSS:</p>\n\n<pre><code>.vspace { height: 40px;}\n</code></pre>\n\n<p>It's working great and the space is not chocking.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Solutions with changing position property are not always possible (it can destroy layout) therefore I suggest this:</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;a id=\"top\"&gt;Anchor&lt;/a&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>#top {\n    margin-top: -250px;\n    padding-top: 250px;\n}\n</code></pre>\n\n<p>Use this:</p>\n\n<pre><code>&lt;a id=\"top\"&gt;&amp;nbsp;&lt;/a&gt;\n</code></pre>\n\n<p>to minimize overlapping, and set font-size to 1px. Empty anchor will not work in some browsers.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<h2>You can do it without js and without altering html. It\u00b4s css-only.</h2>\n\n<pre><code>a[id]:before {\n    content:\"\";\n    display:block;\n    height:50px;\n    margin:-30px 0 0;\n}\n</code></pre>\n\n<p>That will append a pseudo-element before every a-tag with an id. Adjust values to match the height of your header.</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>how about hidden span tags with linkable IDs that provide the height of the navbar:</p>\n\n<pre><code>#head1 {\n  padding-top: 60px;\n  height: 0px;\n  visibility: hidden;\n}\n\n\n&lt;span class=\"head1\"&gt;somecontent&lt;/span&gt;\n&lt;h5 id=\"headline1\"&gt;This Headline is not obscured&lt;/h5&gt;\n</code></pre>\n\n<p>heres the fiddle: <a href=\"http://jsfiddle.net/N6f2f/7\" rel=\"nofollow\">http://jsfiddle.net/N6f2f/7</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>My solution was more on the simple side:\n    .anchorSpacer {height:25px;}</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>I had been facing a similar issue, unfortunately after implementing all the solutions above, I came to the following conclusion.</p>\n\n<ol>\n<li>My inner elements had a fragile CSS structure and implementing a position relative / absolute play, was completely breaking the page design.</li>\n<li>CSS is not my strong suit.</li>\n</ol>\n\n<p>I wrote this simple scrolling js, that accounts for the offset caused due to the header and relocated the div about 125 pixels below. Please use it as you see fit.</p>\n\n<p>The HTML</p>\n\n<pre><code>&lt;div id=\"#anchor\"&gt;&lt;/div&gt; &lt;!-- #anchor here is the anchor tag which is on your URL --&gt;\n</code></pre>\n\n<p>The JavaScript</p>\n\n<pre><code> $(function() {\n  $('a[href*=#]:not([href=#])').click(function() {\n    if (location.pathname.replace(/^\\//,'') == this.pathname.replace(/^\\//,'') \n&amp;&amp; location.hostname == this.hostname) {\n\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) +']');\n      if (target.length) {\n        $('html,body').animate({\n          scrollTop: target.offset().top - 125 //offsets for fixed header\n        }, 1000);\n        return false;\n      }\n    }\n  });\n  //Executed on page load with URL containing an anchor tag.\n  if($(location.href.split(\"#\")[1])) {\n      var target = $('#'+location.href.split(\"#\")[1]);\n      if (target.length) {\n        $('html,body').animate({\n          scrollTop: target.offset().top - 125 //offset height of header here too.\n        }, 1000);\n        return false;\n      }\n    }\n});\n</code></pre>\n\n<p>See a <a href=\"http://scholowiz.herokuapp.com/about#change\">live implementation here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>You can also add an anchor with follow attr:</p>\n\n<pre><code>(text-indent:-99999px;)\nvisibility: hidden;\nposition:absolute;\ntop:-80px;    \n</code></pre>\n\n<p>and give the parent container a position relative.</p>\n\n<p>Works perfect for me.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The above methods don't work very well if your anchor is a table element or within a table (row or cell).</p>\n\n<p>I had to use javascript and bind to the window <code>hashchange</code> event to work around this (<a href=\"http://jsfiddle.net/Mottie/3afdN/\" rel=\"nofollow\">demo</a>):</p>\n\n<pre><code>function moveUnderNav() {\n    var $el, h = window.location.hash;\n    if (h) {\n        $el = $(h);\n        if ($el.length &amp;&amp; $el.closest('table').length) {\n            $('body').scrollTop( $el.closest('table, tr').position().top - 26 );\n        }\n    }\n}\n\n$(window)\n    .load(function () {\n        moveUnderNav();\n    })\n    .on('hashchange', function () {\n        moveUnderNav();\n    });\n</code></pre>\n\n<p>* Note: The <a href=\"http://caniuse.com/#feat=hashchange\" rel=\"nofollow\">hashchange</a> event is not available in all browsers.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can achieve this without an ID using the <code>a[name]:not([href])</code> css selector. This simply looks for links with a name and no href e.g. <code>&lt;a name=\"anc1\"&gt;&lt;/a&gt;</code></p>\n\n<p>An example rule might be:</p>\n\n<pre><code>a[name]:not([href]){\n    display: block;    \n    position: relative;     \n    top: -100px;\n    visibility: hidden;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>For modern browsers, just add the CSS3 :target selector to the page. This will apply to all the anchors automatically.</p>\n\n<pre><code>:target {\n    display: block;    \n    position: relative;     \n    top: -100px;\n    visibility: hidden;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Borrowing some of the code from an answer given <a href=\"http://stackoverflow.com/questions/14804941/how-to-add-smooth-scrolling-to-bootstraps-scroll-spy-function\">at this link</a> (no author is specified), you can include a nice smooth-scroll effect to the anchor, while making it stop at -60px above the anchor, fitting nicely underneath the fixed bootstrap navigation bar (requires jQuery):</p>\n\n<pre><code>$(\".dropdown-menu a[href^='#']\").on('click', function(e) {\n   // prevent default anchor click behavior\n   e.preventDefault();\n\n   // animate\n   $('html, body').animate({\n       scrollTop: $(this.hash).offset().top - 60\n     }, 300, function(){\n     });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>My solution combines the target and before selectors for our CMS. Other techniques don't account for text in the anchor. Adjust the height and the negative margin to the offset you need...</p>\n\n<pre><code>:target:before {\n    content: \"\";\n    display: inline-block;\n    height: 180px;\n    margin: -180px 0 0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>FWIW this worked for me:</p>\n\n<pre><code>*[id]:before { \n  display: block; \n  content: \" \"; \n  margin-top: -75px; \n  height: 75px; \n  visibility: hidden; \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>A further twist to the excellent answer from @Jan is to incorporate this into the #uberbar fixed header, which uses jQuery (or MooTools). (<a href=\"http://davidwalsh.name/persistent-header-opacity\" rel=\"nofollow\">http://davidwalsh.name/persistent-header-opacity</a>)</p>\n\n<p>I've tweaked the code so the the top of the content is always below not under the fixed header and also added the anchors from @Jan again making sure that the anchors are always positioned below the fixed header.</p>\n\n<p>The CSS:</p>\n\n<pre><code>#uberbar { \n    border-bottom:1px solid #0000cc; \n    position:fixed; \n    top:0; \n    left:0; \n    z-index:2000; \n    width:100%;\n}\n\na.anchor {\n    display: block;\n    position: relative;\n    visibility: hidden;\n}\n</code></pre>\n\n<p>The jQuery (including tweaks to both the #uberbar and the anchor approaches:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n$(document).ready(function() {\n    (function() {\n        //settings\n        var fadeSpeed = 200, fadeTo = 0.85, topDistance = 30;\n        var topbarME = function() { $('#uberbar').fadeTo(fadeSpeed,1); }, topbarML = function() { $('#uberbar').fadeTo(fadeSpeed,fadeTo); };\n        var inside = false;\n        //do\n        $(window).scroll(function() {\n            position = $(window).scrollTop();\n            if(position &gt; topDistance &amp;&amp; !inside) {\n                //add events\n                topbarML();\n                $('#uberbar').bind('mouseenter',topbarME);\n                $('#uberbar').bind('mouseleave',topbarML);\n                inside = true;\n            }\n            else if (position &lt; topDistance){\n                topbarME();\n                $('#uberbar').unbind('mouseenter',topbarME);\n                $('#uberbar').unbind('mouseleave',topbarML);\n                inside = false;\n            }\n        });\n        $('#content').css({'margin-top': $('#uberbar').outerHeight(true)});\n        $('a.anchor').css({'top': - $('#uberbar').outerHeight(true)});\n    })();\n});\n&lt;/script&gt;\n</code></pre>\n\n<p>And finally the HTML:</p>\n\n<pre><code>&lt;div id=\"uberbar\"&gt;\n    &lt;!--CONTENT OF FIXED HEADER--&gt;\n&lt;/div&gt;\n....\n&lt;div id=\"content\"&gt;\n    &lt;!--MAIN CONTENT--&gt;\n    ....\n    &lt;a class=\"anchor\" id=\"anchor1\"&gt;&lt;/a&gt;\n    ....\n    &lt;a class=\"anchor\" id=\"anchor2\"&gt;&lt;/a&gt;\n    ....\n&lt;/div&gt;\n</code></pre>\n\n<p>Maybe this is useful to somebody who likes the #uberbar fading dixed header!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This was inspired by the answer by Shouvik - same concept as his, only the size of the fixed header isn't hard coded. As long as your fixed header is in the first header node, this should \"just work\"</p>\n\n<pre><code>/*jslint browser: true, plusplus: true, regexp: true */\n\nfunction anchorScroll(fragment) {\n    \"use strict\";\n    var amount, ttarget;\n    amount = $('header').height();\n    ttarget = $('#' + fragment);\n    $('html,body').animate({ scrollTop: ttarget.offset().top - amount }, 250);\n    return false;\n}\n\nfunction outsideToHash() {\n    \"use strict\";\n    var fragment;\n    if (window.location.hash) {\n        fragment = window.location.hash.substring(1);\n        anchorScroll(fragment);\n    }\n}\n\nfunction insideToHash(nnode) {\n    \"use strict\";\n    var fragment;\n    fragment = $(nnode).attr('href').substring(1);\n    anchorScroll(fragment);\n}\n\n$(document).ready(function () {\n    \"use strict\";\n    $(\"a[href^='#']\").bind('click',  function () {insideToHash(this); });\n    outsideToHash();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's the solution that we use on our site. Adjust the <code>headerHeight</code> variable to whatever your header height is. Add the <code>js-scroll</code> class to the anchor that should scroll on click.</p>\n\n<pre><code>// SCROLL ON CLICK\n// --------------------------------------------------------------------------\n$('.js-scroll').click(function(){\n    var headerHeight = 60;\n\n    $('html, body').animate({\n        scrollTop: $( $.attr(this, 'href') ).offset().top - headerHeight\n    }, 500);\n    return false;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Instead of having a fixed-position navbar which is underlapped by the rest of the content of the page (with the whole page body being scrollable), consider instead having a non-scrollable body with a static navbar and then having the page content in an absolutely-positioned scrollable div below.</p>\n\n<p>That is, have HTML like this...</p>\n\n<pre><code>&lt;div class=\"static-navbar\"&gt;NAVBAR&lt;/div&gt;\n&lt;div class=\"scrollable-content\"&gt;\n  &lt;p&gt;Bla bla bla&lt;/p&gt;\n  &lt;p&gt;Yadda yadda yadda&lt;/p&gt;\n  &lt;p&gt;Mary had a little lamb&lt;/p&gt;\n  &lt;h2 id=\"stuff-i-want-to-link-to\"&gt;Stuff&lt;/h2&gt;\n  &lt;p&gt;More nonsense&lt;/p&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>... and CSS like this:</p>\n\n<pre><code>.static-navbar {\n  height: 100px;\n}\n.scrollable-content {\n  position: absolute;\n  top: 100px;\n  bottom: 0;\n  overflow-y: scroll;\n  width: 100%;\n}\n</code></pre>\n\n<p>This achieves the desired result in a straightforward, non-hacky way. The only difference in behaviour between this and some of the clever CSS hacks suggested above are that the scrollbar (in browsers that render one) will be attached to the content div rather than the whole height of the page. You may or may not consider this desirable.</p>\n\n<p><a href=\"http://jsfiddle.net/69dx1dec/\" rel=\"nofollow\">Here's a JSFiddle demonstrating this in action.</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I am trying to clean up the way my anchors work. I have a header that is fixed to the top of the page, so when you link to an anchor elsewhere in the page, the page jumps so the anchor is at the top of the page, leaving the content behind the fixed header (I hope that makes sense).  I need a way to offset the anchor by the 25px from the height of the header. I would prefer HTML or CSS, but Javascript would be acceptable as well.</p>\n",
            "last_activity_date": 1425766213,
            "question_id": 10732690,
            "score": 266,
            "tags": [
                "javascript",
                "html",
                "anchor",
                "offset"
            ],
            "title": "offsetting an html anchor to adjust for fixed header"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>You could use simply css, positioning your element as <a href=\"http://www.w3schools.com/Css/pr_class_position.asp\">fixed</a>:</p>\n\n<pre><code>.fixedElement {\n    background-color: #c0c0c0;\n    position:fixed;\n    top:0;\n    width:100%;\n    z-index:100;\n}\n</code></pre>\n\n<p><strong>Edit:</strong> You should have the element with position absolute, once the scroll offset has reached the element, it should be changed to fixed, and the top position should be set to zero.</p>\n\n<p>You can detect the top scroll offset of the document with the <a href=\"http://docs.jquery.com/CSS/scrollTop\">scrollTop</a> function:</p>\n\n<pre><code>$(window).scroll(function(e){ \n  $el = $('.fixedElement'); \n  if ($(this).scrollTop() &gt; 200 &amp;&amp; $el.css('position') != 'fixed'){ \n    $('.fixedElement').css({'position': 'fixed', 'top': '0px'}); \n  }\n  if ($(this).scrollTop() &lt; 200 &amp;&amp; $el.css('position') == 'fixed')\n  {\n    $('.fixedElement').css({'position': 'static', 'top': '0px'}); \n  } \n});\n</code></pre>\n\n<p>When the scroll offset reached 200, the element will <em>stick</em> to the top of the browser window, because is placed as fixed.</p>\n\n<p>Check this <a href=\"http://jsbin.com/ijexe\">new example</a>.</p>\n",
                    "is_accepted": true,
                    "score": 107
                },
                {
                    "body": "<p>The info provided to answer this other question may be of help to you, Evan:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/487073/jquery-check-if-element-is-visible-after-scroling\">http://stackoverflow.com/questions/487073/jquery-check-if-element-is-visible-after-scroling</a></p>\n\n<p>You basically want to modify the style of the element to set it to fixed only after having verified that the document.body.scrollTop value is equal to or greater than the top of your element.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You've seen this example on Google Code's <a href=\"http://code.google.com/p/chromium/issues/detail?id=575\">issue page</a> and (only recently) on Stack Overflow's edit page.</p>\n\n<p>CMS's answer doesn't revert the positioning when you scroll back up. Here's the shamelessly stolen code from Stack Overflow:</p>\n\n<pre><code>function moveScroller() {\n    var move = function() {\n        var st = $(window).scrollTop();\n        var ot = $(\"#scroller-anchor\").offset().top;\n        var s = $(\"#scroller\");\n        if(st &gt; ot) {\n            s.css({\n                position: \"fixed\",\n                top: \"0px\"\n            });\n        } else {\n            if(st &lt;= ot) {\n                s.css({\n                    position: \"relative\",\n                    top: \"\"\n                });\n            }\n        }\n    };\n    $(window).scroll(move);\n    move();\n}\n</code></pre>\n\n\n\n<pre><code>&lt;div id=\"sidebar\" style=\"width:270px;\"&gt; \n  &lt;div id=\"scroller-anchor\"&gt;&lt;/div&gt; \n  &lt;div id=\"scroller\" style=\"margin-top:10px; width:270px\"&gt; \n    Scroller Scroller Scroller\n  &lt;/div&gt;\n&lt;/div&gt;\n\n&lt;script type=\"text/javascript\"&gt; \n  $(function() {\n    moveScroller();\n  });\n&lt;/script&gt; \n</code></pre>\n\n<p>And a simple <a href=\"http://fiddle.jshell.net/zsJAr/show/light/\">live demo</a>.</p>\n\n<p>A nascent, script-free alternative is <code>position: sticky</code>, which is supported in Chrome Canary and WebKit nightly. See the <a href=\"http://updates.html5rocks.com/2012/08/Stick-your-landings-position-sticky-lands-in-WebKit\">article on HTML5Rocks</a> and <a href=\"http://html5-demos.appspot.com/static/css/sticky.html\">this demo</a>.</p>\n",
                    "is_accepted": false,
                    "score": 173
                },
                {
                    "body": "<p>The accepted answer works but doesn't move back to previous position if you scroll above it. It is always stuck to the top after being placed there.</p>\n\n<pre><code>  $(window).scroll(function(e) {\n    $el = $('.fixedElement');\n    if ($(this).scrollTop() &gt; 42 &amp;&amp; $el.css('position') != 'fixed') {\n      $('.fixedElement').css( 'position': 'fixed', 'top': '0px');\n\n    } else if ($(this).scrollTop() &lt; 42 &amp;&amp; $el.css('position') != 'relative') {\n      $('.fixedElement').css( 'relative': 'fixed', 'top': '42px');\n//this was just my previous position/formating\n    }\n  });\n</code></pre>\n\n<p>jleedev's response whould work, but I wasn't able to get it to work. His example page also didn't work (for me). </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can add 3 extra rows so when the user scroll back to the top, the div will stick on its old place:</p>\n\n<p>Here is the code:</p>\n\n<pre><code>if ($(this).scrollTop() &lt; 200 &amp;&amp; $el.css('position') == 'fixed'){\n    $('.fixedElement').css({'position': 'relative', 'top': '200px'});\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have links setup in a div so it is a vertical list of letter and number links.</p>\n\n<pre><code>#links {\n    float:left;\n    font-size:9pt;\n    margin-left:0.5em;\n    margin-right:1em;\n    position:fixed;\n    text-align:center;\n    width:0.8em;\n}\n</code></pre>\n\n<p>I then setup this handy jQuery function to save the loaded position and then change the position to fixed when scrolling beyond that position.</p>\n\n<p><em><strong>NOTE: this only works if the links are visible on page load!!</em></strong></p>\n\n<pre><code>var listposition=false;\njQuery(function(){\n     try{\n        ///// stick the list links to top of page when scrolling\n        listposition = jQuery('#links').css({'position': 'static', 'top': '0px'}).position();\n        console.log(listposition);\n        $(window).scroll(function(e){\n            $top = $(this).scrollTop();\n            $el = jQuery('#links');\n            //if(typeof(console)!='undefined'){\n            //    console.log(listposition.top,$top);\n            //}\n            if ($top &gt; listposition.top &amp;&amp; $el.css('position') != 'fixed'){\n                $el.css({'position': 'fixed', 'top': '0px'});\n            }\n            else if ($top &lt; listposition.top &amp;&amp; $el.css('position') == 'fixed'){\n                $el.css({'position': 'static'});\n            }\n        });\n\n    } catch(e) {\n        alert('Please vendor admin@mydomain.com (Myvendor JavaScript Issue)');\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had the same problem as you and ended up making a jQuery plugin to take care of it. It actually solves all the problems people have listed here, plus it adds a couple of optional features too.</p>\n\n<h2>Options</h2>\n\n<pre><code>stickyPanelSettings = {\n    // Use this to set the top margin of the detached panel.\n    topPadding: 0,\n\n    // This class is applied when the panel detaches.\n    afterDetachCSSClass: \"\",\n\n    // When set to true the space where the panel was is kept open.\n    savePanelSpace: false,\n\n    // Event fires when panel is detached\n    // function(detachedPanel, panelSpacer){....}\n    onDetached: null,\n\n    // Event fires when panel is reattached\n    // function(detachedPanel){....}\n    onReAttached: null,\n\n    // Set this using any valid jquery selector to \n    // set the parent of the sticky panel.\n    // If set to null then the window object will be used.\n    parentSelector: null\n};\n</code></pre>\n\n<p><a href=\"https://github.com/donnyv/sticky-panel\" rel=\"nofollow\">https://github.com/donnyv/sticky-panel</a></p>\n\n<p><strong>demo:</strong> <a href=\"http://htmlpreview.github.io/?https://github.com/donnyv/sticky-panel/blob/master/jquery.stickyPanel/Main.htm\" rel=\"nofollow\">http://htmlpreview.github.io/?https://github.com/donnyv/sticky-panel/blob/master/jquery.stickyPanel/Main.htm</a></p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p>My solution is a little verbose, but it handles variable positioning from the left edge for centered layouts.</p>\n\n<pre><code>// Ensurs that a element (usually a div) stays on the screen\n//   aElementToStick   = The jQuery selector for the element to keep visible\nglobal.makeSticky = function (aElementToStick) {\n    var $elementToStick = $(aElementToStick);\n    var top = $elementToStick.offset().top;\n    var origPosition = $elementToStick.css('position');\n\n    function positionFloater(a$Win) {\n        // Set the original position to allow the browser to adjust the horizontal position\n        $elementToStick.css('position', origPosition);\n\n        // Test how far down the page is scrolled\n        var scrollTop = a$Win.scrollTop();\n        // If the page is scrolled passed the top of the element make it stick to the top of the screen\n        if (top &lt; scrollTop) {\n            // Get the horizontal position\n            var left = $elementToStick.offset().left;\n            // Set the positioning as fixed to hold it's position\n            $elementToStick.css('position', 'fixed');\n            // Reuse the horizontal positioning\n            $elementToStick.css('left', left);\n            // Hold the element at the top of the screen\n            $elementToStick.css('top', 0);\n        }\n    }\n\n    // Perform initial positioning\n    positionFloater($(window));\n\n    // Reposition when the window resizes\n    $(window).resize(function (e) {\n        positionFloater($(this));\n    });\n\n    // Reposition when the window scrolls\n    $(window).scroll(function (e) {\n        positionFloater($(this));\n    });\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I used some of the work above to create this tech. I improved it a bit and thought I would share my work. Hope this helps.</p>\n\n<p><a href=\"http://jsfiddle.net/newdark/7eqjU/embedded/result/\" rel=\"nofollow\">jsfuddle Code</a></p>\n\n<pre><code>function scrollErrorMessageToTop() {\n    var flash_error = jQuery('#flash_error');\n    var flash_position = flash_error.position();\n\n    function lockErrorMessageToTop() {\n        var place_holder = jQuery(\"#place_holder\");\n        if (jQuery(this).scrollTop() &gt; flash_position.top &amp;&amp; flash_error.attr(\"position\") != \"fixed\") {\n            flash_error.css({\n                'position': 'fixed',\n                'top': \"0px\",\n                \"width\": flash_error.width(),\n                \"z-index\": \"1\"\n            });\n            place_holder.css(\"display\", \"\");\n        } else {\n            flash_error.css('position', '');\n            place_holder.css(\"display\", \"none\");\n        }\n\n    }\n    if (flash_error.length &gt; 0) {\n        lockErrorMessageToTop();\n\n        jQuery(\"#flash_error\").after(jQuery(\"&lt;div id='place_holder'&gt;\"));\n        var place_holder = jQuery(\"#place_holder\");\n        place_holder.css({\n            \"height\": flash_error.height(),\n            \"display\": \"none\"\n        });\n        jQuery(window).scroll(function(e) {\n            lockErrorMessageToTop();\n        });\n    }\n}\nscrollErrorMessageToTop();\u200b\n</code></pre>\n\n<p>This is a little bit more dynamic of a way to do the scroll. It does need some work and I will at some point turn this into a pluging but but this is what I came up with after hour of work.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is how i did it with jquery. This was all cobbled together from various answers on stack overflow. This solution caches the selectors for faster performance and also solves the \"jumping\" issue when the sticky div becomes sticky.</p>\n\n<p>Check it out on jsfiddle: <a href=\"http://jsfiddle.net/HQS8s/\">http://jsfiddle.net/HQS8s/</a></p>\n\n<p>CSS:</p>\n\n<pre><code>.stick {\n    position: fixed;\n    top: 0;\n}\n</code></pre>\n\n<p>JS:</p>\n\n<pre><code>$(document).ready(function() {\n    // Cache selectors for faster performance.\n    var $window = $(window),\n        $mainMenuBar = $('#mainMenuBar'),\n        $mainMenuBarAnchor = $('#mainMenuBarAnchor');\n\n    // Run this on scroll events.\n    $window.scroll(function() {\n        var window_top = $window.scrollTop();\n        var div_top = $mainMenuBarAnchor.offset().top;\n        if (window_top &gt; div_top) {\n            // Make the div sticky.\n            $mainMenuBar.addClass('stick');\n            $mainMenuBarAnchor.height($mainMenuBar.height());\n        }\n        else {\n            // Unstick the div.\n            $mainMenuBar.removeClass('stick');\n            $mainMenuBarAnchor.height(0);\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>In javascript you can do:</p>\n\n<pre><code>var element = document.getElementById(\"myid\");\nelement.style.position = \"fixed\";\nelement.style.top = \"0%\";\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>And here's how <em>without</em> jquery</p>\n\n<pre><code>    &lt;!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"&gt;\n\n    &lt;html&gt;\n    &lt;head&gt;\n    &lt;style type='text/css'&gt;\n    #productMenuBar {\n    border:1px solid #00ffff;\n\n    text-align:center;\n\n    z-index:9999;\n    width:100%;\n    max-width: 850px;\n    margin: 0 auto; left:0px; right:0px;\n\n\n    }\n    &lt;/style&gt;\n\n    &lt;script type='text/javascript'&gt;\n    var startProductBarPos=-1;\n    window.onscroll=function(){\n        var bar = document.getElementById('productMenuBar');\n        if(startProductBarPos&lt;0)startProductBarPos=findPosY(bar);\n\n        if(pageYOffset&gt;startProductBarPos){\n            bar.style.position='fixed';\n            bar.style.top=0;\n        }else{\n            bar.style.position='relative';\n        }\n\n    };\n\n\n    function findPosY(obj) {\n        var curtop = 0;\n        if (typeof (obj.offsetParent) != 'undefined' &amp;&amp; obj.offsetParent) {\n            while (obj.offsetParent) {\n                curtop += obj.offsetTop;\n                obj = obj.offsetParent;\n            }\n            curtop += obj.offsetTop;\n        }\n        else if (obj.y)\n            curtop += obj.y;\n        return curtop;\n    }\n    &lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    and this&lt;br&gt;\n    is&lt;Br&gt;\n    above&lt;br&gt;\n    &lt;div id=\"productMenuBar\" class=\"productMenuBar\"&gt;\n        LOGO\n    &lt;/div&gt;\n    hello\n    &lt;br&gt;&lt;BR&gt;&lt;br&gt;\n    &lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;\n    &lt;br&gt;&lt;BR&gt;&lt;br&gt;world\n    &lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;\n    &lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;\n    &lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;\n    &lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;&lt;br&gt;&lt;BR&gt;&lt;br&gt;\n    &lt;/body&gt;\n    &lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here's one more version to try for those having issues with the others. It pulls together the techniques discussed in <a href=\"http://stackoverflow.com/questions/2907367/have-a-div-cling-to-top-of-screen-if-scrolled-down-past-it\">this duplicate question</a>, and generates the required helper DIVs dynamically so no extra HTML is required.</p>\n\n<p>CSS:</p>\n\n<pre><code>.sticky { position:fixed; top:0; }\n</code></pre>\n\n<p>JQuery:</p>\n\n<pre><code>function make_sticky(id) {\n    var e = $(id);\n    var w = $(window);\n    $('&lt;div/&gt;').insertBefore(id);\n    $('&lt;div/&gt;').hide().css('height',e.outerHeight()).insertAfter(id);\n    var n = e.next();\n    var p = e.prev();\n    function sticky_relocate() {\n      var window_top = w.scrollTop();\n      var div_top = p.offset().top;\n      if (window_top &gt; div_top) {\n        e.addClass('sticky');\n        n.show();\n      } else {\n        e.removeClass('sticky');\n        n.hide();\n      }\n    }\n    w.scroll(sticky_relocate);\n    sticky_relocate();\n}\n</code></pre>\n\n<p>To make an element sticky, do:</p>\n\n<pre><code>make_sticky('#sticky-elem-id');\n</code></pre>\n\n<p>When the element becomes sticky, the code manages the position of the remaining content to keep it from jumping into the gap left by the sticky element. It also returns the sticky element to its original non-sticky position when scrolling back above it.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Not an exact solution but a great alternative to consider</strong></p>\n\n<p>this <strong><a href=\"http://jsfiddle.net/adamchenwei/TzDSr/\" rel=\"nofollow\">CSS ONLY Top of screen scroll bar</a></strong>. Solved all the problem with <strong>ONLY CSS</strong>, <strong>NO</strong> JavaScript, <strong>NO</strong> JQuery, <strong>No</strong> Brain work (<strong>lol</strong>).</p>\n\n<p>Enjoy <a href=\"http://jsfiddle.net/adamchenwei/TzDSr/\" rel=\"nofollow\">my fiddle</a> :D all the codes are included in there :)</p>\n\n<p>CSS</p>\n\n<pre><code>#menu {\nposition: fixed;\nheight: 60px;\nwidth: 100%;\ntop: 0;\nleft: 0;\nborder-top: 5px solid #a1cb2f;\nbackground: #fff;\n-moz-box-shadow: 0 2px 3px 0px rgba(0, 0, 0, 0.16);\n-webkit-box-shadow: 0 2px 3px 0px rgba(0, 0, 0, 0.16);\nbox-shadow: 0 2px 3px 0px rgba(0, 0, 0, 0.16);\nz-index: 999999;\n}\n\n.w {\n    width: 900px;\n    margin: 0 auto;\n    margin-bottom: 40px;\n}&lt;br type=\"_moz\"&gt;\n</code></pre>\n\n<p>Put the content long enough so you can see the effect here :)\n\nOh, and the reference is in there as well, for the fact he deserve <a href=\"http://www.jqueryscript.net/css3-html5/Sticky-Top-Menu-Bar-with-CSS3.html\" rel=\"nofollow\">his credit</a> </p>\n\n<p><a href=\"http://jsfiddle.net/adamchenwei/TzDSr/\" rel=\"nofollow\">CSS ONLY Top of screen scroll bar</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is another option:</p>\n\n<p>JAVASCRIPT</p>\n\n<pre><code>var initTopPosition= $('#myElementToStick').offset().top;   \n$(window).scroll(function(){\n    if($(window).scrollTop() &gt; initTopPosition)\n        $('#myElementToStick').css({'position':'fixed','top':'0px'});\n    else\n        $('#myElementToStick').css({'position':'absolute','top':initTopPosition+'px'});\n});\n</code></pre>\n\n<p>Your <code>#myElementToStick</code> should start with <code>position:absolute</code> CSS property.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is an extended version to Josh Lee's answer. If you want the div to be on sidebar to the right, and float within a range (i.e., you need to specify top and bottom anchor positions). It also fixes a bug when you view this on mobile devices (you need to check left scroll position otherwise the div will move off screen).</p>\n\n<pre><code>function moveScroller() {\n    var move = function() {\n        var st = $(window).scrollTop();\n        var sl = $(window).scrollLeft();\n        var ot = $(\"#scroller-anchor-top\").offset().top;\n        var ol = $(\"#scroller-anchor-top\").offset().left;\n        var bt = $(\"#scroller-anchor-bottom\").offset().top;\n        var s = $(\"#scroller\");\n        if(st &gt; ot) {\n            if (st &lt; bt - 280) //280px is the approx. height for the sticky div\n            {\n                s.css({\n                    position: \"fixed\",\n                    top: \"0px\",\n                    left: ol-sl\n                }); \n            }\n            else\n            {\n                s.css({\n                    position: \"fixed\",\n                    top: bt-st-280,\n                    left: ol-sl\n                }); \n            }\n        } else {\n            s.css({\n                position: \"relative\",\n                top: \"\",\n                left: \"\"\n            });\n\n        }\n    };\n    $(window).scroll(move);\n    move();\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's an example that uses jquery-visible plugin: <a href=\"http://jsfiddle.net/711p4em4/\" rel=\"nofollow\">http://jsfiddle.net/711p4em4/</a>.</p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;div class = \"wrapper\"&gt;\n    &lt;header&gt;Header&lt;/header&gt;\n    &lt;main&gt;\n        &lt;nav&gt;Stick to top&lt;/nav&gt;\n        Content\n    &lt;/main&gt;\n    &lt;footer&gt;Footer&lt;/footer&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>* {\n    margin: 0;\n    padding: 0;\n}\n\nbody {\n    background-color: #e2e2e2;\n}\n\n.wrapper &gt; header,\n.wrapper &gt; footer {\n    font: 20px/2 Sans-Serif;\n    text-align: center;\n    background-color: #0040FF;\n    color: #fff;\n}\n\n.wrapper &gt; main {\n    position: relative;\n    height: 500px;\n    background-color: #5e5e5e;\n    font: 20px/500px Sans-Serif;\n    color: #fff;\n    text-align: center;\n    padding-top: 40px;\n}\n\n.wrapper &gt; main &gt; nav {\n    position: absolute;\n    top: 0;\n    left: 0;\n    right: 0;\n    font: 20px/2 Sans-Serif;\n    color: #fff;\n    text-align: center;\n    background-color: #FFBF00;\n}\n\n.wrapper &gt; main &gt; nav.fixed {\n    position: fixed;\n    top: 0;\n    left: 0;\n    right: 0;\n}\n</code></pre>\n\n<p>JS (include jquery-visible plugin):</p>\n\n<pre><code>(function($){\n\n    /**\n     * Copyright 2012, Digital Fusion\n     * Licensed under the MIT license.\n     * http://teamdf.com/jquery-plugins/license/\n     *\n     * @author Sam Sehnert\n     * @desc A small plugin that checks whether elements are within\n     *       the user visible viewport of a web browser.\n     *       only accounts for vertical position, not horizontal.\n     */\n    var $w = $(window);\n    $.fn.visible = function(partial,hidden,direction){\n\n        if (this.length &lt; 1)\n            return;\n\n        var $t        = this.length &gt; 1 ? this.eq(0) : this,\n            t         = $t.get(0),\n            vpWidth   = $w.width(),\n            vpHeight  = $w.height(),\n            direction = (direction) ? direction : 'both',\n            clientSize = hidden === true ? t.offsetWidth * t.offsetHeight : true;\n\n        if (typeof t.getBoundingClientRect === 'function'){\n\n            // Use this native browser method, if available.\n            var rec = t.getBoundingClientRect(),\n                tViz = rec.top    &gt;= 0 &amp;&amp; rec.top    &lt;  vpHeight,\n                bViz = rec.bottom &gt;  0 &amp;&amp; rec.bottom &lt;= vpHeight,\n                lViz = rec.left   &gt;= 0 &amp;&amp; rec.left   &lt;  vpWidth,\n                rViz = rec.right  &gt;  0 &amp;&amp; rec.right  &lt;= vpWidth,\n                vVisible   = partial ? tViz || bViz : tViz &amp;&amp; bViz,\n                hVisible   = partial ? lViz || rViz : lViz &amp;&amp; rViz;\n\n            if(direction === 'both')\n                return clientSize &amp;&amp; vVisible &amp;&amp; hVisible;\n            else if(direction === 'vertical')\n                return clientSize &amp;&amp; vVisible;\n            else if(direction === 'horizontal')\n                return clientSize &amp;&amp; hVisible;\n        } else {\n\n            var viewTop         = $w.scrollTop(),\n                viewBottom      = viewTop + vpHeight,\n                viewLeft        = $w.scrollLeft(),\n                viewRight       = viewLeft + vpWidth,\n                offset          = $t.offset(),\n                _top            = offset.top,\n                _bottom         = _top + $t.height(),\n                _left           = offset.left,\n                _right          = _left + $t.width(),\n                compareTop      = partial === true ? _bottom : _top,\n                compareBottom   = partial === true ? _top : _bottom,\n                compareLeft     = partial === true ? _right : _left,\n                compareRight    = partial === true ? _left : _right;\n\n            if(direction === 'both')\n                return !!clientSize &amp;&amp; ((compareBottom &lt;= viewBottom) &amp;&amp; (compareTop &gt;= viewTop)) &amp;&amp; ((compareRight &lt;= viewRight) &amp;&amp; (compareLeft &gt;= viewLeft));\n            else if(direction === 'vertical')\n                return !!clientSize &amp;&amp; ((compareBottom &lt;= viewBottom) &amp;&amp; (compareTop &gt;= viewTop));\n            else if(direction === 'horizontal')\n                return !!clientSize &amp;&amp; ((compareRight &lt;= viewRight) &amp;&amp; (compareLeft &gt;= viewLeft));\n        }\n    };\n\n})(jQuery);\n\n$(function() {\n    $(window).scroll(function() {\n        $(\".wrapper &gt; header\").visible(true) ?\n            $(\".wrapper &gt; main &gt; nav\").removeClass(\"fixed\") :\n            $(\".wrapper &gt; main &gt; nav\").addClass(\"fixed\");\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I would like to create a div, that is situated beneath a block of content but that once the page has been scrolled enough to contact its top boundary, becomes fixed in place and scrolls with the page. I know I've seen at least one example of this online but I cannot remember it for the life of me.</p>\n\n<p>Any thoughts?</p>\n",
            "last_activity_date": 1426187415,
            "question_id": 1216114,
            "score": 135,
            "tags": [
                "javascript",
                "jquery",
                "css",
                "scroll",
                "positioning"
            ],
            "title": "How can I make a div stick to the top of the screen once it&#39;s been scrolled to?"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>One way to share variables across multiple controllers is to <a href=\"https://code.angularjs.org/1.2.21/docs/guide/services\">create a service</a> and inject it in any controller where you want to use it.</p>\n\n<p><strong>Simple service example:</strong></p>\n\n<pre><code>angular.module('myApp', [])\n    .service('sharedProperties', function () {\n        var property = 'First';\n\n        return {\n            getProperty: function () {\n                return property;\n            },\n            setProperty: function(value) {\n                property = value;\n            }\n        };\n    });\n</code></pre>\n\n<p><strong>Using the service in a controller:</strong></p>\n\n<pre><code>function Ctrl2($scope, sharedProperties) {\n    $scope.prop2 = \"Second\";\n    $scope.both = sharedProperties.getProperty() + $scope.prop2;\n}\n</code></pre>\n\n<p>This is described very nicely in <a href=\"http://onehungrymind.com/angularjs-sticky-notes-pt-1-architecture/\">this blog</a> (Lesson 2 and on in particular).</p>\n\n<p>I've found that if you want to bind to these properties across multiple controllers it works better if you bind to an object's property instead of a primitive type (boolean, string, number) to retain the bound reference. </p>\n\n<p>Example: <code>var property = { Property1: 'First' };</code> instead of <code>var property = 'First';</code>.</p>\n\n<hr>\n\n<p><strong>UPDATE:</strong> To (hopefully) make things more clear <a href=\"http://jsfiddle.net/b2fCE/1/\">here is a fiddle</a> that shows an example of:</p>\n\n<ul>\n<li><strong>Binding to static copies of the shared value (in myController1)</strong>\n<ul>\n<li>Binding to a primitive (string)</li>\n<li>Binding to an object's property (saved to a scope variable)</li>\n</ul></li>\n<li><strong>Binding to shared values that update the UI as the values are updated (in myController2)</strong>\n<ul>\n<li>Binding to a function that returns a primitive (string)</li>\n<li>Binding to the object's property</li>\n<li>Two way binding to an object's property</li>\n</ul></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 216
                },
                {
                    "body": "<p>If you don't want to make service then you can do like this. </p>\n\n<pre><code>var scope = angular.element(\"#another ctrl scope element id.\").scope();\nscope.plean_assign = some_value;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Couldn't you also make the property part of the scopes parent?  </p>\n\n<pre><code>$scope.$parent.property = somevalue;\n</code></pre>\n\n<p>I'm not saying it's right but it works.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong><em>--- I know this answer is not for this question, but I want people who reads this question  and want to handle Services such as Factories to avoid trouble doing this ----</em></strong></p>\n\n<p>For this you will need to use a Service or a Factory.</p>\n\n<p>The services are the <strong>BEST PRACTICE</strong> to share data between not nested controllers.</p>\n\n<p>A very very good annotation on this topic about data sharing is how to declare objects. I was unlucky because I fell in a AngularJS trap before I read about it, and I was very frustrated. So let me help you avoid this trouble.</p>\n\n<p>I read from the \"ng-book: The complete book on AngularJS\" that AngularJS ng-models that are created in controllers as bare-data are WRONG!</p>\n\n<p>A $scope element should be created like this:</p>\n\n<pre><code>angular.module('myApp', [])\n.controller('SomeCtrl', function($scope) {\n  // best practice, always use a model\n  $scope.someModel = {\n    someValue: 'hello computer'\n  });\n</code></pre>\n\n<p>And not like this:</p>\n\n<pre><code>angular.module('myApp', [])\n.controller('SomeCtrl', function($scope) {\n  // anti-pattern, bare value\n  $scope.someBareValue = 'hello computer';\n  };\n});\n</code></pre>\n\n<p>This is because it is recomended(BEST PRACTICE) for the DOM(html document) to contain the calls as</p>\n\n<pre><code>&lt;div ng-model=\"someModel.someValue\"&gt;&lt;/div&gt;  //NOTICE THE DOT.\n</code></pre>\n\n<p>This is very helpful for nested controllers if you want your child controller to be able to change an object from the parent controller....</p>\n\n<p><strong>But in your case you don't want nested scopes, but there is a similar aspect to get objects from services to the controllers.</strong></p>\n\n<p>Lets say you have your service 'Factory' and in the return space there is an objectA that contains objectB that contains objectC.</p>\n\n<p>If from your controller you want to GET the objectC into your scope, is a mistake to say:</p>\n\n<pre><code>$scope.neededObjectInController = Factory.objectA.objectB.objectC;\n</code></pre>\n\n<p><strong>That wont work...</strong>\nInstead use only one dot.</p>\n\n<pre><code>$scope.neededObjectInController = Factory.ObjectA;\n</code></pre>\n\n<p>Then, in the DOM you can call objectC from objectA. This is a best practice related to factories, and most important, <strong>it will help to avoid unexpected and non-catchable errors.</strong></p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You could do that with services or factories. They are essentially the same apart for some core differences. I found this explanation on thinkster.io to be the easiest to follow. Simple, to the point and effective.</p>\n\n<p><a href=\"http://www.thinkster.io/angularjs/9jfpSmbx1j/angularjs-sharing-data-between-controllers\" rel=\"nofollow\">http://www.thinkster.io/angularjs/9jfpSmbx1j/angularjs-sharing-data-between-controllers</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The sample above worked like a charm. I just did a modification just in case I need to manage multiple values. I hope this helps!</p>\n\n<pre><code>app.service('sharedProperties', function () {\n\n    var hashtable = {};\n\n    return {\n        setValue: function (key, value) {\n            hashtable[key] = value;\n        },\n        getValue: function (key) {\n            return hashtable[key];\n        }\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I like to illustrate simple things by simple examples :)</p>\n\n<p>Here is a very simple <code>Service</code> example:</p>\n\n<pre><code>\nangular.module('toDo',[])\n\n.service('dataService', function() {\n  // private variable\n  var _dataObj = {};\n\n  this.dataObj = _dataObj;\n})\n\n.controller('One', function($scope, dataService) {\n  $scope.data = dataService.dataObj;\n})\n\n.controller('Two', function($scope, dataService) {\n  $scope.data = dataService.dataObj;\n});\n</code></pre>\n\n<p>And <a href=\"http://jsbin.com/suxed/1/edit\">here the jsbin</a></p>\n\n<p>And here is a very simple <code>Factory</code> example:</p>\n\n<pre><code>\nangular.module('toDo',[])\n\n.factory('dataService', function() {\n  var _dataObj = {};\n  return {\n    dataObj: _dataObj\n  };\n})\n\n.controller('One', function($scope, dataService) {\n  $scope.data = dataService.dataObj;\n})\n\n.controller('Two', function($scope, dataService) {\n  $scope.data = dataService.dataObj;\n});\n</code></pre>\n\n<p>And <a href=\"http://jsbin.com/loyoro/1/edit\">here the jsbin</a></p>\n\n<hr>\n\n<p>If that is too simple, <a href=\"http://jsbin.com/cekez/1/edit\">here is a more sophisticated example</a></p>\n\n<p>Also <a href=\"https://codereview.stackexchange.com/questions/51596/angularjs-todo-list-too-much-controller-logic/59212#59212\">see the answer here for related best practices comments</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><strong>Solution without creating Service, using $rootScope:</strong></p>\n\n<p>To share properties across app Controllers you can use Angular $rootScope. This is another option to share data, putting it so that people know about it.</p>\n\n<p>The preferred way to share some functionality across Controllers is Services, to read or change a global property you can use $rootscope.</p>\n\n<pre><code>var app = angular.module('mymodule',[]);\napp.controller('Ctrl1', ['$scope','$rootScope',\n  function($scope, $rootScope) {\n    $rootScope.showBanner = true;\n}]);\n\napp.controller('Ctrl2', ['$scope','$rootScope',\n  function($scope, $rootScope) {\n    $rootScope.showBanner = false;\n}]);\n</code></pre>\n\n<p>Using $rootScope in a template (Access properties with $root):</p>\n\n<pre><code>&lt;div ng-controller=\"Ctrl1\"&gt;\n    &lt;div class=\"banner\" ng-show=\"$root.showBanner\"&gt; &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Ah, have a bit of this new stuff as another alternative. It's localstorage, and works where angular works. You're welcome. (But really, thank the guy)</p>\n\n<p><a href=\"https://github.com/gsklee/ngStorage\" rel=\"nofollow\">https://github.com/gsklee/ngStorage</a></p>\n\n<p>Define your defaults:</p>\n\n<pre><code>$scope.$storage = $localStorage.$default({\n    prop1: 'First',\n    prop2: 'Second'\n});\n</code></pre>\n\n<p>Access the values:</p>\n\n<pre><code>$scope.prop1 = $localStorage.prop1;\n$scope.prop2 = $localStorage.prop2;\n</code></pre>\n\n<p>Store the values</p>\n\n<pre><code>$localStorage.prop1 = $scope.prop1;\n$localStorage.prop2 = $scope.prop2;\n</code></pre>\n\n<p>Remember to inject ngStorage in your app and $localStorage in your controller.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I'd like to contribute to this question by pointing out that the recommended way to share data between controllers, and even directives, is by using services (factories) as it has been already pointed out, but also I'd like to provide a working practical example of how to that should be done.</p>\n\n<p><strong>Here is the working plunker:</strong> <a href=\"http://plnkr.co/edit/Q1VdKJP2tpvqqJL1LF6m?p=info\" rel=\"nofollow\">http://plnkr.co/edit/Q1VdKJP2tpvqqJL1LF6m?p=info</a></p>\n\n<p>First, <strong>create</strong> your <strong>service</strong>, that will have your <strong>shared data</strong>:</p>\n\n<pre><code>app.factory('SharedService', function() {\n  return {\n    sharedObject: {\n      value: '',\n      value2: ''\n    }\n  };\n});\n</code></pre>\n\n<p>Then, simply inject it on your <strong>controllers</strong> and grab the shared data on your scope:</p>\n\n<pre><code>app.controller('FirstCtrl', function($scope, SharedService) {\n  $scope.model = SharedService.sharedObject;\n});\n\napp.controller('SecondCtrl', function($scope, SharedService) {\n  $scope.model = SharedService.sharedObject;\n});\n\napp.controller('MainCtrl', function($scope, SharedService) {\n  $scope.model = SharedService.sharedObject;\n});\n</code></pre>\n\n<p>You can also do that for your <strong>directives</strong>, it works the same way:</p>\n\n<pre><code>app.directive('myDirective',['SharedService', function(SharedService){\n  return{\n    restrict: 'E',\n    link: function(scope){\n      scope.model = SharedService.sharedObject;\n    },\n    template: '&lt;div&gt;&lt;input type=\"text\" ng-model=\"model.value\"/&gt;&lt;/div&gt;'\n  }\n}]);\n</code></pre>\n\n<p>Hope this practical and clean answer can be helpful to someone.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have two Angular controllers:</p>\n\n<pre><code>function Ctrl1($scope) {\n    $scope.prop1 = \"First\";\n}\n\nfunction Ctrl2($scope) {\n    $scope.prop2 = \"Second\";\n    $scope.both = Ctrl1.prop1 + $scope.prop2; //This is what I would like to do ideally\n}\n</code></pre>\n\n<p>I can't use <code>Ctrl1</code> inside <code>Ctrl2</code> because it is undefined. However if I try to pass it in like so\u2026</p>\n\n<pre><code>function Ctrl2($scope, Ctrl1) {\n    $scope.prop2 = \"Second\";\n    $scope.both = Ctrl1.prop1 + $scope.prop2; //This is what I would like to do ideally\n}\n</code></pre>\n\n<p>I get an error. Does anyone know how to do this?</p>\n\n<p>Doing </p>\n\n<pre><code>Ctrl2.prototype = new Ctrl1();\n</code></pre>\n\n<p>Also fails.</p>\n\n<p><strong>NOTE:</strong> These controllers are not nested inside each other.</p>\n",
            "last_activity_date": 1424560893,
            "question_id": 12008908,
            "score": 115,
            "tags": [
                "javascript",
                "angularjs",
                "angularjs-controller"
            ],
            "title": "How can I pass variables between controllers?"
        },
        {
            "answer_count": 26,
            "answers": [
                {
                    "body": "<p>Instead of using \"new Date()\" you should use:</p>\n\n<pre><code>var timestamp=Date.parse('foo')\n\nif (isNaN(timestamp)==false)\n{\n    var d=new Date(timestamp);\n\n}\n</code></pre>\n\n<p><code>Date.parse()</code> returns a timestamp, an integer representing the number of milliseconds since 01/Jan/1970.  It will return <code>NaN</code> if it cannot parse the supplied date string.</p>\n",
                    "is_accepted": false,
                    "score": 99
                },
                {
                    "body": "<p>Here's how I would do it:</p>\n\n<pre><code>if ( Object.prototype.toString.call(d) === \"[object Date]\" ) {\n  // it is a date\n  if ( isNaN( d.getTime() ) ) {  // d.valueOf() could also work\n    // date is not valid\n  }\n  else {\n    // date is valid\n  }\n}\nelse {\n  // not a date\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 333
                },
                {
                    "body": "<p>You can check the validity of a <code>Date</code> object <code>d</code> via</p>\n\n<pre><code>d instanceof Date &amp;&amp; isFinite(d)\n</code></pre>\n\n<p>To avoid cross-frame issues, one could replace the <code>instanceof</code> check with</p>\n\n<pre><code>Object.prototype.toString.call(d) === '[object Date]'\n</code></pre>\n\n<p>A call to <code>getTime()</code> as in <a href=\"http://stackoverflow.com/questions/1353684/detecting-an-invalid-date-date-instance-in-javascript/1353711#1353711\">Borgar's answer</a> is unnecessary as <code>isNaN()</code> and <code>isFinite()</code> both implicitly convert to number.</p>\n",
                    "is_accepted": false,
                    "score": 38
                },
                {
                    "body": "<p>I really liked Christoph's approach (but didn't have enough of a reputation to vote it up). \nFor my use, I know I will always have a Date object so I just extended date with a valid() method.</p>\n\n<pre><code>Date.prototype.valid = function() {\n  return isFinite(this);\n}\n</code></pre>\n\n<p>Now I can just write this and it's much more descriptive than just checking isFinite in code...</p>\n\n<pre><code>d = new Date(userDate);\nif (d.valid()) { /* do stuff */ }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Nice solution! Included in my library of auxiliary functions, now it looks like this:</p>\n\n<pre><code>Object.isDate = function(obj) {\n/// &lt;summary&gt;\n/// Determines if the passed object is an instance of Date.\n/// &lt;/summary&gt;\n/// &lt;param name=\"obj\"&gt;The object to test.&lt;/param&gt;\n\n    return Object.prototype.toString.call(obj) === '[object Date]';\n}\n\nObject.isValidDate = function(obj) {\n/// &lt;summary&gt;\n/// Determines if the passed object is a Date object, containing an actual date.\n/// &lt;/summary&gt;\n/// &lt;param name=\"obj\"&gt;The object to test.&lt;/param&gt;\n\n    return Object.isDate(obj) &amp;&amp; !isNaN(obj.getTime());\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<pre><code>// check whether date is valid\nvar t = new Date('2011-07-07T11:20:00.000+00:00x');\nvalid = !isNaN(t.valueOf());\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I think some of this is a long process. We can cut it short as shown below:</p>\n\n<pre><code> function isValidDate(dateString) {\n        debugger;\n        var dateStringSplit;\n        var formatDate;\n\n        if (dateString.length &gt;= 8 &amp;&amp; dateString.length&lt;=10) {\n            try {\n                dateStringSplit = dateString.split('/');\n                var date = new Date();\n                date.setYear(parseInt(dateStringSplit[2]), 10);\n                date.setMonth(parseInt(dateStringSplit[0], 10) - 1);\n                date.setDate(parseInt(dateStringSplit[1], 10));\n\n                if (date.getYear() == parseInt(dateStringSplit[2],10) &amp;&amp; date.getMonth()+1 == parseInt(dateStringSplit[0],10) &amp;&amp; date.getDate() == parseInt(dateStringSplit[1],10)) {\n                    return true;\n                }\n                else {\n                    return false;\n                }\n\n            } catch (e) {\n                return false;\n            }\n        }\n        return false;\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Inspired by Borgar's approach I have made sure that the code not only validates the date, but actually makes sure the date is a real date, meaning that dates like 31/09/2011 and 29/02/2011 are not allowed.</p>\n\n<pre><code>function(dateStr) {\n    s = dateStr.split('/');\n    d = new Date(+s[2], s[1]-1, +s[0]);\n    if (Object.prototype.toString.call(d) === \"[object Date]\") {\n        if (!isNaN(d.getTime()) &amp;&amp; d.getDate() == s[0] &amp;&amp; \n            d.getMonth() == (s[1] - 1)) {\n            return true;\n        }\n    }\n    return \"Invalid date!\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I use the following code to validate values for year, month and date.</p>\n\n<pre><code>function createDate(str, year, month, _date) {\n  var d = new Date(year, month, _date);\n  if (d.getFullYear() != year \n    || d.getMonth() != month\n    || d.getDate() != _date) {\n    throw \"invalid date\";\n  }\n  return d;\n}\n</code></pre>\n\n<p>For details, refer to <a href=\"http://internotredici.com/article/checkdateinjavascript\">Check date in javascript</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>you can check the valid format of txDate.value with this scirpt. if it was in incorrect format  the Date obejct not instanced and return null to dt .</p>\n\n<pre><code> var dt = new Date(txtDate.value)\n if (isNaN(dt))\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>None of the above solutions worked for me what did work however is</p>\n\n<pre><code>function validDate (d) {\n        var date = new Date(d);\n        var day = \"\"+date.getDate();\n        if( day.length == 1)day = \"0\"+day;\n        var month = \"\" +( date.getMonth() + 1);\n        if( month.length == 1)month = \"0\"+month;\n        var year = \"\" + date.getFullYear();\n\n        return ((month + \"/\" + day + \"/\" + year) == d);\n    }\n</code></pre>\n\n<p>the code above will see when JS makes 02/31/2012 into 03/02/2012 that its not valid</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>None of these answers worked for me (tested in Safari 6.0) when trying to validate a date such as 2/31/2012, however, they work fine when trying any date greater than 31.</p>\n\n<p>So I had to brute force a little. Assuming the date is in the format <code>mm/dd/yyyy</code>. I am using @broox answer:</p>\n\n<pre><code>Date.prototype.valid = function() {\n    return isFinite(this);\n}    \n\nfunction validStringDate(value){\n    var d = new Date(value);\n    return d.valid() &amp;&amp; value.split('/')[0] == (d.getMonth()+1);\n}\n\nvalidStringDate(\"2/29/2012\"); // true (leap year)\nvalidStringDate(\"2/29/2013\"); // false\nvalidStringDate(\"2/30/2012\"); // false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>My solution is for simply checking whether you get a valid date object:</p>\n\n<h1>Implementation</h1>\n\n<pre><code>Date.prototype.isValid = function () {\n    // An invalid date object returns NaN for getTime() and NaN is the only\n    // object not strictly equal to itself.\n    return this.getTime() === this.getTime();\n};  \n</code></pre>\n\n<h1>Usage</h1>\n\n<pre><code>var d = new Date(\"lol\");\n\nconsole.log(d.isValid()); // false\n\nd = new Date(\"2012/09/11\");\n\nconsole.log(d.isValid()); // true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<pre><code>IsValidDate: function(date) {\n        var regex = /\\d{1,2}\\/\\d{1,2}\\/\\d{4}/;\n        if (!regex.test(date)) return false;\n        var day = Number(date.split(\"/\")[1]);\n        date = new Date(date);\n        if (date &amp;&amp; date.getDate() != day) return false;\n        return true;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Would like to mention that the JQuery DatePicker UI widget has a very good date validator utility method that checks for format and validity (e.g., no 01/33/2013 dates allowed).</p>\n\n<p>Even if you don't want to use the datepicker widget on your page as a UI element, you can always add its .js library to your page and then call the validator method, passing the value you want to validate into it.  To make life even easier, it takes a string as input, not a Javascript Date object.</p>\n\n<p>See: <a href=\"http://api.jqueryui.com/datepicker/\" rel=\"nofollow\">http://api.jqueryui.com/datepicker/</a></p>\n\n<p>It's not listed as a method, but it is there-- as a utility function.  Search the page for \"parsedate\" and you'll find:</p>\n\n<p>$.datepicker.parseDate( format, value, settings ) - Extract a date from a string value with a specified format.</p>\n\n<p><em>Example usage:</em></p>\n\n<pre><code>var stringval = '01/03/2012';\nvar testdate;\n\ntry {\n  testdate = $.datepicker.parseDate('mm/dd/yy', stringval);\n             // Notice 'yy' indicates a 4-digit year value\n} catch (e)\n{\n alert(stringval + ' is not valid.  Format must be MM/DD/YYYY ' +\n       'and the date value must be valid for the calendar.';\n}\n</code></pre>\n\n<p>(More info re specifying date formats is found at <a href=\"http://api.jqueryui.com/datepicker/#utility-parseDate\" rel=\"nofollow\">http://api.jqueryui.com/datepicker/#utility-parseDate</a>)</p>\n\n<p>In the above example, you wouldn't see the alert message since '01/03/2012' is a calendar-valid date in the specified format.  However if you made 'stringval' equal to '13/04/2013', for example, you would get the alert message, since the value '13/04/2013' is not calendar-valid.</p>\n\n<p>If a passed-in string value is successfully parsed, the value of 'testdate' would be a Javascript Date object representing the passed-in string value.  If not, it'd be undefined.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Date object to string is more simple and reliable way to detect if both fields are valid date. \ne.g. If you enter this \"-------\" to the date input field. Some of the above answers won't work.</p>\n\n<pre><code>jQuery.validator.addMethod(\"greaterThan\", \n\n    function(value, element, params) {\n        var startDate = new Date($(params).val());\n        var endDate = new Date(value);\n\n        if(startDate.toString() === 'Invalid Date' || endDate.toString() === 'Invalid Date') {\n            return false;\n        } else {\n            return endDate &gt; startDate;\n        }\n    },'Must be greater than {0}.');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<h2>You can simply use <strong><a href=\"http://momentjs.com/\" rel=\"nofollow\">moment.js</a></strong></h2>\n\n<p>Here is an example:</p>\n\n<pre><code>var m = moment(\"2015-11-32\");\nm.isValid(); // false\n</code></pre>\n\n<p>The <a href=\"http://momentjs.com/docs/#/parsing/is-valid/\" rel=\"nofollow\">validation section</a> in the documentation is quite clear.</p>\n\n<p>And also, the following parsing flags result in an invalid date:</p>\n\n<ul>\n<li><code>overflow</code>: An overflow of a date field, such as a 13th month, a 32nd day of the month (or a 29th of February on non-leap years), a 367th day of the year, etc. overflow contains the index of the invalid unit to match #invalidAt (see below); -1 means no overflow.</li>\n<li><code>invalidMonth</code>: An invalid month name, such as moment('Marbruary', 'MMMM');. Contains the invalid month string itself, or else null.</li>\n<li><code>empty</code>: An input string that contains nothing parsable, such as moment('this is nonsense');. Boolean.</li>\n<li>Etc.</li>\n</ul>\n\n<hr>\n\n<p>Source: <a href=\"http://momentjs.com/docs/\" rel=\"nofollow\">http://momentjs.com/docs/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>For int 1-based components of a date:</p>\n\n<pre><code>var is_valid_date = function(year, month, day) {\n    var d = new Date(year, month - 1, day);\n    return d.getFullYear() === year &amp;&amp; (d.getMonth() + 1) === month &amp;&amp; d.getDate() === day\n};\n</code></pre>\n\n<p>Tests:</p>\n\n<pre><code>    is_valid_date(2013, 02, 28)\n&amp;&amp;  is_valid_date(2016, 02, 29)\n&amp;&amp; !is_valid_date(2013, 02, 29)\n&amp;&amp; !is_valid_date(0000, 00, 00)\n&amp;&amp; !is_valid_date(2013, 14, 01)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>you can convert your date and time to milliseconds <a href=\"http://www.w3schools.com/jsref/jsref_gettime.asp\" rel=\"nofollow\">getTime()</a></p>\n\n<p>this <code>getTime()</code> Method return Not a Number <code>NaN</code> when not valid </p>\n\n<pre><code>if(!isNaN(new Date(\"2012/25/255\").getTime()))\n  return 'valid date time';\n  return 'Not a valid date time';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This just worked for me</p>\n\n<pre><code>new Date('foo') == 'Invalid Date'; //is true\n</code></pre>\n\n<p>However this didn't work</p>\n\n<pre><code>new Date('foo') === 'Invalid Date'; //is false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>var isDate_ = function(input) {\n        var status = false;\n        if (!input || input.length &lt;= 0) {\n          status = false;\n        } else {\n          var result = new Date(input);\n          if (result == 'Invalid Date') {\n            status = false;\n          } else {\n            status = true;\n          }\n        }\n        return status;\n      }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I've written this function. Pass it a string parameter and it will determine whether it's a valid date or not based on this format \"dd/MM/yyyy\".  </p>\n\n<p>here is a test</p>\n\n<p>input: \"hahaha\",output: false.</p>\n\n<p>input: \"29/2/2000\",output: true. </p>\n\n<p>input: \"29/2/2001\",output: false. </p>\n\n<pre><code>function isValidDate(str) {\n    var parts = str.split('/');\n    if (parts.length &lt; 3)\n        return false;\n    else {\n        var day = parseInt(parts[0]);\n        var month = parseInt(parts[1]);\n        var year = parseInt(parts[2]);\n        if (isNaN(day) || isNaN(month) || isNaN(year)) {\n            return false;\n        }\n        if (day &lt; 1 || year &lt; 1)\n            return false;\n        if(month&gt;12||month&lt;1)\n            return false;\n        if ((month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) &amp;&amp; day &gt; 31)\n            return false;\n        if ((month == 4 || month == 6 || month == 9 || month == 11 ) &amp;&amp; day &gt; 30)\n            return false;\n        if (month == 2) {\n            if (((year % 4) == 0 &amp;&amp; (year % 100) != 0) || ((year % 400) == 0 &amp;&amp; (year % 100) == 0)) {\n                if (day &gt; 29)\n                    return false;\n            } else {\n                if (day &gt; 28)\n                    return false;\n            }      \n        }\n        return true;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The selected answer is excellent, and I'm using it as well.  However, if you're looking for a way to validate user date input, you should be aware that the Date object is very persistent about making what might appear to be invalid construction arguments into valid ones.  The following unit test code illustrates the point:</p>\n\n<pre><code>QUnit.test( \"valid date test\", function( assert ) {\n  //The following are counter-examples showing how the Date object will \n  //wrangle several 'bad' dates into a valid date anyway\n  assert.equal(isValidDate(new Date(1980, 12, 15)), true);\n  d = new Date();\n  d.setFullYear(1980);\n  d.setMonth(1);\n  d.setDate(33);\n  assert.equal(isValidDate(d), true);\n  assert.equal(isValidDate(new Date(1980, 100, 150)), true);\n  //If you go to this exterme, then the checker will fail\n  assert.equal(isValidDate(new Date(\"This is junk\")), false);\n  //This is a valid date string\n  assert.equal(isValidDate(new Date(\"November 17, 1989\")), true);\n  //but is this?\n  assert.equal(isValidDate(new Date(\"November 35, 1989\")), false);  \n  //Ha!  It's not.  So, the secret to working with this version of \n  //isValidDate is to pass in dates as text strings... Hooboy\n  //alert(d.toString());\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I combined the best performance results I found around to check if a given object:</p>\n\n<ul>\n<li>is a Date instance (<a href=\"http://jsperf.com/isdate-duck-typing-vs-instanceof/2\" rel=\"nofollow\">benchmark here</a>)</li>\n<li>has a valid date (<a href=\"http://jsperf.com/detecting-an-invalid-date\" rel=\"nofollow\">benchmark here</a>)</li>\n</ul>\n\n<p>The result is the following:</p>\n\n<pre><code>function isValidDate(input) {\n  if(!(input &amp;&amp; input.getTimezoneOffset &amp;&amp; input.setUTCFullYear))\n    return false;\n\n  var time = input.getTime();\n  return time === time;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This function validates a string date in digit formats delimited by a character, e.g. dd/mm/yyyy, mm/dd/yyyy</p>\n\n<pre><code>/*\nParam  : \n1)the date in string data type \n2)[optional - string - default is \"/\"] the date delimiter, most likely \"/\" or \"-\"\n3)[optional - int - default is 0] the position of the day component when the date string is broken up via the String.split function (into arrays)\n4)[optional - int - default is 1] the position of the month component when the date string is broken up via the String.split function (into arrays)\n5)[optional - int - default is 2] the position of the year component when the date string is broken up via the String.split function (into arrays)\n\nReturn : a javascript date is returned if the params are OK else null\n*/\nfunction IsValidDate(strDate, strDelimiter, iDayPosInArray, iMonthPosInArray, iYearPosInArray) {\n    var strDateArr; //a string array to hold constituents day, month, and year components\n    var dtDate; //our internal converted date\n    var iDay, iMonth, iYear;\n\n\n    //sanity check \n    //no integer checks are performed on day, month, and year tokens as parsing them below will result in NaN if they're invalid\n    if (null == strDate || typeof strDate != \"string\")\n        return null;\n\n    //defaults\n    strDelimiter = strDelimiter || \"/\";\n    iDayPosInArray = undefined == iDayPosInArray ? 0 : iDayPosInArray;\n    iMonthPosInArray = undefined == iMonthPosInArray ? 1 : iMonthPosInArray;\n    iYearPosInArray = undefined == iYearPosInArray ? 2 : iYearPosInArray;\n\n    strDateArr = strDate.split(strDelimiter);\n\n    iDay = parseInt(strDateArr[iDayPosInArray],10);\n    iMonth = parseInt(strDateArr[iMonthPosInArray],10) - 1; // Note: months are 0-based\n    iYear = parseInt(strDateArr[iYearPosInArray],10);\n\n    dtDate = new Date(\n        iYear,\n        iMonth, // Note: months are 0-based\n        iDay);\n\n    return (!isNaN(dtDate) &amp;&amp; dtDate.getFullYear() == iYear &amp;&amp; dtDate.getMonth() == iMonth &amp;&amp; dtDate.getDate() == iDay) ? dtDate : null; // Note: months are 0-based\n}\n</code></pre>\n\n<p>Example call:</p>\n\n<p>var strDate=\"18-01-1971\";</p>\n\n<p>if (null == IsValidDate(strDate)) {</p>\n\n<p>alert(\"invalid date\");\n}</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Generally I'd stick with whatever Date implantation is in the browser stack. Which means you will always get \"Invalid Date\" when calling <em>toDateString()</em> in Chrome, Firefox, and Safari as of this reply's date. </p>\n\n<pre><code>if(!Date.prototype.isValidDate){\n  Date.prototype.isValidDate = function(){\n    return this.toDateString().toLowerCase().lastIndexOf('invalid') == -1;\n  };\n}\n</code></pre>\n\n<p>I did not test this in IE though.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'd like to tell the difference between valid and invalid date objects in JS, but couldn't figure out how:</p>\n\n<pre><code>var d = new Date(\"foo\");\nconsole.log(d.toString()); // shows 'Invalid Date'\nconsole.log(typeof d); // shows 'object'\nconsole.log(d instanceof Date); // shows 'true'\n</code></pre>\n\n<p>Any ideas for writing an <code>isValidDate</code> function?</p>\n\n<p>EDIT - thanks for the responses!</p>\n\n<ul>\n<li>Ash recommended <code>Date.parse</code> for parsing date strings, which gives an authoritative way to check if the date string is valid.</li>\n<li>What I would prefer, if possible, is have my API accept a Date instance and to be able to check/assert whether it's valid or not. Borgar's solution does that, but I need to test it across browsers. I also wonder whether there's a more elegant way.</li>\n</ul>\n\n<p>EDIT 2</p>\n\n<ul>\n<li>Ash made me consider not having my API accept <code>Date</code> instances at all, this would be easiest to validate.</li>\n<li>Borgar suggested testing for a <code>Date</code> instance, and then testing for the <code>Date</code>'s time value. If the date is invalid, the time value is <code>NaN</code>. I checked with <a href=\"http://www.ecma-international.org/publications/standards/Ecma-262.htm\">ECMA-262</a> (section 15.9.5.9) and this behavior is in the standard, which is exactly what I'm looking for.</li>\n</ul>\n\n<p>My final function, based on Borgar's solution:</p>\n\n<pre><code>function isValidDate(d) {\n  if ( Object.prototype.toString.call(d) !== \"[object Date]\" )\n    return false;\n  return !isNaN(d.getTime());\n}\n</code></pre>\n",
            "last_activity_date": 1421439713,
            "question_id": 1353684,
            "score": 431,
            "tags": [
                "javascript",
                "date"
            ],
            "title": "Detecting an &quot;invalid date&quot; Date instance in JavaScript"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>have you thought about using mouseOver and mouseOut to simulate this. Also look into mouseEnter and mouseLeave </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Keep track of both states (hovered, focused) as true/false flags, and whenever one changes, run a function that removes border if both are false, otherwise shows border.</p>\n\n<p>So: onfocus sets focused = true, onblur sets focused = false. onmouseover sets hovered = true, onmouseout sets hovered = false. After each of these events run a function that adds/removes border.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As far as I know, you can't ask the browser if any input on the screen has focus, you have to set up some sort of focus tracking.  </p>\n\n<p>I usually have a variable called \"noFocus\" and set it to true.  Then I add a focus event to all inputs that makes noFocus false.  Then I add a blur event to all inputs that set noFocus back to true.</p>\n\n<p>I have a MooTools class that handles this quite easily, I'm sure you could create a jquery plugin to do the same.</p>\n\n<p>Once that's created, you could do check noFocus before doing any border swapping.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm not entirely sure what you're after but this sounds like it can be achieved by storing the state of the input elements (or the div?) as a variable:</p>\n\n<pre><code>$('div').each(function(){\n\n    var childInputHasFocus = false;\n\n    $(this).hover(function(){\n        if (childInputHasFocus) {\n            // do something\n        } else { }\n    }, function() {\n        if (childInputHasFocus) {\n            // do something\n        } else { }\n    });\n\n    $('input', this)\n        .focus(function(){\n            childInputHasFocus = true;\n        })\n        .blur(function(){\n            childInputHasFocus = false;\n        });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There is no :focus, but there is :selected\n<a href=\"http://docs.jquery.com/Selectors/selected\" rel=\"nofollow\">http://docs.jquery.com/Selectors/selected</a></p>\n\n<p>but if you want to change how things look based on what is selected you should probably be working with the blur events.</p>\n\n<p><a href=\"http://docs.jquery.com/Events/blur\" rel=\"nofollow\">http://docs.jquery.com/Events/blur</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What I wound up doing is creating an arbitrary class called .elementhasfocus which is added and removed within the jQuery focus() function. When the hover() function runs on mouse out, it checks for .elementhasfocus:</p>\n\n<pre><code>if(!$(\"#quotebox\").is(\".boxhasfocus\")) $(this).removeClass(\"box_border\");\n</code></pre>\n\n<p>So if it doesn't have that class (read: no elements within the div have focus) the border is removed. Otherwise, nothing happens.</p>\n\n<p>Thanks for your input, everyone!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>CSS:</p>\n\n<pre><code>.focus {\nborder-color:red;\n}\n</code></pre>\n\n<p>JQuery:</p>\n\n<pre><code>$(document).ready(function() {    \n\n    $('input').blur(function(){\n    \t\t$('input').removeClass(\"focus\");\n    \t})\n             .focus(function() {\t\t\n    \t         $(this).addClass(\"focus\")\n    \t});\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>An alternative to using classes to mark the state of an element is the internal <a href=\"http://docs.jquery.com/Internals/jQuery.data\" rel=\"nofollow\">data store functionality</a>.</p>\n\n<p>P.S.: You are able to store booleans and whatever you desire using the <code>data()</code> function. It's not just about strings :)</p>\n\n<pre><code>$(\"...\").mouseover(function ()\n{\n    // store state on element\n}).mouseout(function ()\n{\n    // remove stored state on element\n});\n</code></pre>\n\n<p>And then it's just a matter of accessing the state of elements.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is a plugin to check if an element is focused: <a href=\"http://plugins.jquery.com/project/focused\" rel=\"nofollow\">http://plugins.jquery.com/project/focused</a></p>\n\n<pre><code>$('input').each(function(){\n   if ($(this) == $.focused()) {\n      $(this).addClass('focused');\n   }\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h2>jQuery 1.6+</h2>\n\n<p>jQuery added a <a href=\"http://api.jquery.com/focus-selector/\"><code>:focus</code></a> selector so we no longer need to add it ourselves. Just use <code>$(\"..\").is(\":focus\")</code></p>\n\n<h2>jQuery 1.5 and below</h2>\n\n<p><strong>Edit:</strong> As times change, we find better methods for testing focus, the new favorite is <a href=\"https://gist.github.com/450017\">this gist from Ben Alman</a>:</p>\n\n<pre><code>jQuery.expr[':'].focus = function( elem ) {\n  return elem === document.activeElement &amp;&amp; ( elem.type || elem.href );\n};\n</code></pre>\n\n<p>Quoted from Mathias Bynens <a href=\"http://stackoverflow.com/questions/967096/using-jquery-to-test-if-an-input-has-focus/5391608#5391608\">here</a>:</p>\n\n<blockquote>\n  <p>Note that the <code>(elem.type || elem.href)</code> test was added to filter out false positives like body. This way, we make sure to filter out all elements except form controls and hyperlinks.</p>\n</blockquote>\n\n<p>You're defining a new selector. See <a href=\"http://docs.jquery.com/Plugins/Authoring\">Plugins/Authoring</a>. Then you can do:</p>\n\n<pre><code>if ($(\"...\").is(\":focus\")) {\n  ...\n}\n</code></pre>\n\n<p>or:</p>\n\n<pre><code>$(\"input:focus\").doStuff();\n</code></pre>\n\n<h2>Any jQuery</h2>\n\n<p>If you just want to figure out which element has focus, you can use </p>\n\n<pre><code>$(document.activeElement)\n</code></pre>\n\n<p>If you aren't sure if the version will be 1.6 or lower, you can add the <code>:focus</code> selector if it is missing:</p>\n\n<pre><code>(function ( $ ) {\n    var filters = $.expr[\":\"];\n    if ( !filters.focus ) { \n        filters.focus = function( elem ) {\n           return elem === document.activeElement &amp;&amp; ( elem.type || elem.href );\n        };\n    }\n})( jQuery );\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 547
                },
                {
                    "body": "<p>I posted an answer on the related question <a href=\"http://stackoverflow.com/questions/2683742/is-there-a-has-focus-in-javascript-or-jquery/3478393#3478393\">\"Is there a \u2018has focus\u2019 in JavaScript (or jQuery)?\"</a>.<br>\nI've enhanced <a href=\"#2684561\" rel=\"nofollow\">cletus approach cited by gnarf</a>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here\u2019s a more robust answer than the currently accepted one:</p>\n\n<pre><code>jQuery.expr[':'].focus = function(elem) {\n  return elem === document.activeElement &amp;&amp; (elem.type || elem.href);\n};\n</code></pre>\n\n<p>Note that the <code>(elem.type || elem.href)</code> test was added to filter out false positives like <code>body</code>. This way, we make sure to filter out all elements except form controls and hyperlinks.</p>\n\n<p>(Taken from <a href=\"https://gist.github.com/450017\">this gist</a> by <a href=\"http://benalman.com/\">Ben Alman</a>.)</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>I had a .live(\"focus\") event set to select() (highlight) the contents of a text input so that the user wouldn't have to select it before typing a new value. </p>\n\n<p>$(formObj).select();</p>\n\n<p>Because of quirks between different browsers, the select would sometimes be superseded by the click that caused it, and it would deselect the contents right after in favor of placing the cursor within the text field (worked mostly ok in FF but failed in IE)</p>\n\n<p>I thought I could solve this by putting a slight delay on the select...</p>\n\n<p>setTimeout(function(){$(formObj).select();},200);</p>\n\n<p>This worked fine and the select would persist, but a funny problem arose.. If you tabbed from one field to the next, the focus would switch to the next field before the select took place.  Since select steals focus, the focus would then go back and trigger a new \"focus\" event.  This ended up in a cascade of input selects dancing all over the screen.</p>\n\n<p>A workable solution would be to check that the field still has focus before executing the select(), but as mentioned, there's no simple way to check...  I ended up just dispensing with the whole auto highlight, rather than turning what should be a single jQuery select() call into a huge function laden with subroutines...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Simple</p>\n\n<pre><code> &lt;input type=\"text\" /&gt; \n\n\n\n &lt;script&gt;\n     $(\"input\").focusin(function() {\n\n    alert(\"I am in Focus\");\n\n     });\n &lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>if anyone cares there is a much better way to capture focus now, <code>$(foo).focus(...)</code></p>\n\n<p><a href=\"http://api.jquery.com/focus/\" rel=\"nofollow\">http://api.jquery.com/focus/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>On the front page of a site I am building, several <code>&lt;div&gt;</code>s use the CSS :hover property to add a border when the mouse is over them. One of the <code>&lt;div&gt;</code>s contains a <code>&lt;form&gt;</code> which, using jQuery, will keep the border if an input within it has focus. This works perfectly except that IE6 does not support :hover on any elements other than <code>&lt;a&gt;</code>s. So, for this browser only we are using jQuery to mimic css :hover using the $(#element).hover() method. The only problem is, now that jQuery handles both the form focus() <em>and</em> hover(), when an input has focus then the user moves the mouse in and out, the border goes away.</p>\n\n<p>I was thinking we could use some kind of conditional to stop this behavior. For instance, if we tested on mouse out if any of the inputs had focus, we could stop the border from going away. AFAIK, there is no :focus selector in jQuery, so I'm not sure how to make this happen. Any ideas?</p>\n\n<p>Thanks for your help.</p>\n",
            "last_activity_date": 1414642397,
            "question_id": 967096,
            "score": 278,
            "tags": [
                "javascript",
                "jquery",
                "javascript-events"
            ],
            "title": "Using jQuery to test if an input has focus"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Not directly: you need a pair getter/setter with an \"addListener/removeListener\" interface of some sort... or an NPAPI plugin (but that's another story altogether).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>No.</p>\n\n<p>But, if it's really that important, you have 2 options (first is tested, second isn't):</p>\n\n<p>First, use setters and getters, like so:</p>\n\n<pre><code>var myobj = {a : 1};\n\nfunction create_gets_sets(obj) { // make this a framework/global function\n    var proxy = {}\n    for ( var i in obj ) {\n        if (obj.hasOwnProperty(i)) {\n            var k = i;\n            proxy[\"set_\"+i] = function (val) { this[k] = val; };\n            proxy[\"get_\"+i] = function ()    { return this[k]; };\n        }\n    }\n    for (var i in proxy) {\n        if (proxy.hasOwnProperty(i)) {\n            obj[i] = proxy[i];\n        }\n    }\n}\n\ncreate_gets_sets(myobj);\n</code></pre>\n\n<p>then you can do something like:</p>\n\n<pre><code>function listen_to(obj, prop, handler) {\n    var current_setter = obj[\"set_\" + prop];\n    var old_val = obj[\"get_\" + prop]();\n    obj[\"set_\" + prop] = function(val) { current_setter.apply(obj, [old_val, val]); handler(val));\n}\n</code></pre>\n\n<p>then set the listener like:</p>\n\n<pre><code>listen_to(myobj, \"a\", function(oldval, newval) {\n    alert(\"old : \" + oldval + \" new : \" + newval);\n}\n</code></pre>\n\n<p>Second, I actually forgot, I'll submit while I think about it :)</p>\n\n<p>EDIT: Oh, I remember :) You could put a watch on the value:</p>\n\n<p>Given myobj above, with 'a' on it:</p>\n\n<pre><code>function watch(obj, prop, handler) { // make this a framework/global function\n    var currval = obj[prop];\n    function callback() {\n        if (obj[prop] != currval) {\n            var temp = currval;\n            currval = obj[prop];\n            handler(temp, currval);\n        }\n    }\n    return callback;\n}\n\nvar myhandler = function (oldval, newval) {\n    //do something\n};\n\nvar intervalH = setInterval(watch(myobj, \"a\", myhandler), 100);\n\nmyobj.set_a(2);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>As <a href=\"http://stackoverflow.com/questions/1759987/detect-variable-change-in-javascript/1760040#1760040\">Luke Schafer's answer</a> (<strong><em>note</strong>: this refers to his original post; but the whole point here remains valid after the edit</em>), I would also suggest a pair of Get/Set methods to access your value.</p>\n\n<p>However I would suggest some modifications (and that's why I'm posting...).</p>\n\n<p>A problem with that code is that the field <code>a</code> of the object <code>myobj</code> is directly accessible, so it's possible to access it / change its value without triggering the listeners:</p>\n\n<pre><code>var myobj = { a : 5, get_a : function() { return this.a;}, set_a : function(val) { this.a = val; }}\n/* add listeners ... */\nmyobj.a = 10; // no listeners called!\n</code></pre>\n\n<h2>Encapsulation</h2>\n\n<p>So, to guarantee that the listeners are actually called, we would have to prohibit that direct access to the field <code>a</code>. How to do so? Use a <em>closure</em>!</p>\n\n<pre><code>var myobj = (function() { // Anonymous function to create scope.\n\n    var a = 5;            // 'a' is local to this function\n                          // and cannot be directly accessed from outside\n                          // this anonymous function's scope\n\n    return {\n        get_a : function() { return a; },   // These functions are closures:\n        set_a : function(val) { a = val; }  // they keep reference to\n                                            // something ('a') that was on scope\n                                            // where they were defined\n    };\n})();\n</code></pre>\n\n<p>Now you can use the same method to create and add the listeners as Luke proposed, but you can rest assured that there's no possible way to read from or write to <code>a</code> going unnoticed!</p>\n\n<h2>Adding encapsulated fields programmatically</h2>\n\n<p>Still on Luke's track, I propose now a simple way to add encapsulated fields and the respective getters/setters to objects by the means of a simple function call.</p>\n\n<p>Note that this will only work properly with <em>value types</em>. For this to work with <em>reference types</em>, some kind of <em>deep copy</em> would have to be implemented (see <a href=\"http://blog.imaginea.com/deep-copy-in-javascript/\" rel=\"nofollow\">this one</a>, for instance).</p>\n\n<pre><code>function addProperty(obj, name, initial) {\n    var field = initial;\n    obj[\"get_\" + name] = function() { return field; }\n    obj[\"set_\" + name] = function(val) { field = val; }\n}\n</code></pre>\n\n<p>This works the same as before: we create a local variable on a function, and then we create a closure.</p>\n\n<p>How to use it? Simple:</p>\n\n<pre><code>var myobj = {};\naddProperty(myobj, \"total\", 0);\nwindow.alert(myobj.get_total() == 0);\nmyobj.set_total(10);\nwindow.alert(myobj.get_total() == 10);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Yes, <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Object/watch\"><code>object.watch</code></a> (it's non-standard though). <a href=\"https://gist.github.com/384583\">Here's my implementation</a> that works in every current major browser.</p>\n",
                    "is_accepted": false,
                    "score": 108
                },
                {
                    "body": "<p>If you're using jQuery {UI} (which everyone should be using :-) ), you can use .change() with a hidden &lt;input/&gt; element.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>For those tuning in a couple years later:</p>\n\n<p>A solution for most browsers (and IE6+) is available that uses the onpropertychange event and the newer spec defineProperty.  The slight catch is that you'll need to make your variable a dom object.</p>\n\n<p>Full details:</p>\n\n<p><a href=\"http://johndyer.name/native-browser-get-set-properties-in-javascript/\" rel=\"nofollow\">http://johndyer.name/native-browser-get-set-properties-in-javascript/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Sorry to bring up and old threat, but here is a little manual for them who (like me!) don't see how Eli Grey's example works:<br></p>\n\n<pre><code>var test = new Object();\ntest.watch(\"elem\", function(prop,oldval,newval){\n    //Your code\n    return newval;\n});\n</code></pre>\n\n<p>Hope this can help someone</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>variable is hard to observe or watch, usually people watch object rather than variable. There is good library to do it</p>\n\n<p>Try this one:</p>\n\n<p><a href=\"https://github.com/melanke/Watch.JS\" rel=\"nofollow\">https://github.com/melanke/Watch.JS</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>AngularJS</code> (I know this is not <code>JQuery</code>, but that might help. [Pure JS is good in theory only]):</p>\n\n<pre><code>$scope.$watch('data', function(newValue) { ..\n</code></pre>\n\n<p>where \"data\" is name of your variable in the scope.</p>\n\n<p>There is a <a href=\"http://docs.angularjs.org/api/ng.%24rootScope.Scope\" rel=\"nofollow\">link to doc.</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I know this is an old question, but if you are doing this for debugging proposes, you can add a listener using your <code>debugging tool at your browser</code> same way you debug script. </p>\n\n<p>Personally I'm using <code>Firebug</code> in Firefox, once opened, go to DOM tab, search for your variable, then (<strong>similarly to adding a breakpoints to script</strong>) add a <code>breakpoints</code>. It will break and scroll to the specific line of code that's going to process the change on the variable. </p>\n\n<p>Check this out -> Firefox <a href=\"https://getfirebug.com/doc/breakpoints/demo.html\" rel=\"nofollow\">FIREBUG</a> OR Google Chrome <a href=\"https://developers.google.com/chrome-developer-tools/docs/javascript-debugging\" rel=\"nofollow\">DEVELOPER TOOL</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The functionality you're looking for can be achieved through the use of the \"defineProperty()\" method--which is only available to modern browsers:</p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty</a></p>\n\n<p>I've written a jQuery extension that has some similar functionality if you need more cross browser support:</p>\n\n<p><a href=\"https://github.com/jarederaj/jQueue\" rel=\"nofollow\">https://github.com/jarederaj/jQueue</a></p>\n\n<blockquote>\n  <p>A small jQuery extension that handles queuing callbacks to the\n  existence of a variable, object, or key. You can assign any number of\n  callbacks to any number of data points that might be affected by\n  processes running in the background. jQueue listens and waits for\n  these data you specify to come into existence and then fires off the\n  correct callback with its arguments.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>//ex:\n/*\nvar x1 = {currentStatus:undefined};\nyour need is x1.currentStatus value is change trigger event ?\nbelow the code is use try it.\n*/\nfunction statusChange(){\n    console.log(\"x1.currentStatus_value_is_changed\"+x1.eventCurrentStatus);\n};\n\nvar x1 = {\n    eventCurrentStatus:undefined,\n    get currentStatus(){\n        return this.eventCurrentStatus;\n    },\n    set currentStatus(val){\n        this.eventCurrentStatus=val;\n      //your function();\n    }\n};\n</code></pre>\n\n<p>or</p>\n\n<pre><code>/*  var x1 = {\neventCurrentStatus:undefined,\ncurrentStatus : {\n    get : function(){\n        return Events.eventCurrentStatus\n        },\n    set : function(status){\n        Events.eventCurrentStatus=status;\n\n    },\n}*/\nconsole.log(\"eventCurrentStatus = \"+ x1.eventCurrentStatus);\nx1.currentStatus=\"create\"\nconsole.log(\"eventCurrentStatus = \"+ x1.eventCurrentStatus);\nx1.currentStatus=\"edit\"\nconsole.log(\"eventCurrentStatus = \"+ x1.eventCurrentStatus);\nconsole.log(\"currentStatus = \"+ x1.currentStatus);\n</code></pre>\n\n<p>or</p>\n\n<pre><code>/* global variable ku*/\n    var jsVarEvents={};\n    Object.defineProperty(window, \"globalvar1\", {//no i18n\n        get: function() { return window.jsVarEvents.globalvarTemp},\n        set: function(value) { window.window.jsVarEvents.globalvarTemp = value; }\n    });\n    console.log(globalvar1);\n    globalvar1=1;\n    console.log(globalvar1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>Utils = {\n    eventRegister_globalVariable : function(variableName,handlers){\n        eventRegister_JsonVariable(this,variableName,handlers);\n    },\n    eventRegister_jsonVariable : function(jsonObj,variableName,handlers){\n        if(jsonObj.eventRegisteredVariable === undefined) {\n            jsonObj.eventRegisteredVariable={};//this Object is used for trigger event in javascript variable value changes ku\n        }\n        Object.defineProperty(jsonObj, variableName , {\n                    get: function() { \n                        return jsonObj.eventRegisteredVariable[variableName] },\n                    set: function(value) {\n                        jsonObj.eventRegisteredVariable[variableName] = value; handlers(jsonObj.eventRegisteredVariable[variableName]);}\n                    });\n            }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is it possible to have an event that fires when the value of a certain variable changes?\nThanks!</p>\n",
            "last_activity_date": 1423637887,
            "question_id": 1759987,
            "score": 141,
            "tags": [
                "javascript",
                "javascript-events",
                "jquery"
            ],
            "title": "Listening for variable changes in JavaScript or jQuery"
        },
        {
            "answer_count": 27,
            "answers": [
                {
                    "body": "<p>You can add a style directly to the select element:</p>\n\n<p><code>&lt;select name=\"foo\" style=\"width: 200px\"&gt;</code></p>\n\n<p>So this select item will be 200 pixels wide.</p>\n\n<p>Alternatively you can apply a class or id to the element and reference it in a stylesheet</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>So far there isn't one. Don't know about IE8 but it cannot be done in IE6 &amp; IE7, unless you implement your own dropdown list functionality with javascript. There are examples how to do it on the web, though I don't see much benefit in duplicating existing functionality.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>There is no way to do it in IE6/IE7/IE8. The control is drawn by the app and IE simply doesn't draw it that way. Your best bet is to implement your own drop-down via simple HTML/CSS/JavaScript if it's that important to have the the drop-down one width and the list another width.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Creating your own drop down list is more of a pain than it's worth. You can use some javascript to make the IE drop down work.</p>\n\n<p>It uses a bit of the YUI library and a special extension for fixing IE select boxes.</p>\n\n<p>You will need to include the following and wrap your  elements in a </p>\n\n<p>Put these before the body tag of your page:</p>\n\n<pre><code>&lt;script src=\"http://us.js2.yimg.com/us.js.yimg.com/lib/common/utils/2/yahoo_2.0.0-b3.js\" type=\"text/javascript\"&gt;\n&lt;/script&gt;\n&lt;script src=\"http://us.js2.yimg.com/us.js.yimg.com/lib/common/utils/2/event_2.0.0-b3.js\" type=\"text/javascript\"&gt;\n&lt;/script&gt;\n&lt;script src=\"http://us.js2.yimg.com/us.js.yimg.com/lib/common/utils/2/dom_2.0.2-b3.js\" type=\"text/javascript\"&gt;\n&lt;/script&gt;\n&lt;script src=\"ie-select-width-fix.js\" type=\"text/javascript\"&gt;\n&lt;/script&gt;\n&lt;script&gt;\n// for each select box you want to affect, apply this:\nvar s1 = new YAHOO.Hack.FixIESelectWidth( 's1' ); // s1 is the ID of the select box you want to affect\n&lt;/script&gt;\n</code></pre>\n\n<p>Post acceptance edit:</p>\n\n<p>You can also do this without the YUI library and Hack control. All you really need to do is put an onmouseover=\"this.style.width='auto'\" onmouseout=\"this.style.width='100px'\" (or whatever you want) on the select element. The YUI control gives it that nice animation but it's not necessary. This task can also be accomplished with jquery and other libraries (although, I haven't found explicit documentation for this)</p>\n\n<p>-- amendment to the edit:\nIE has a problem with the onmouseout for select controls (it doesn't consider mouseover on options being a mouseover on the select). This makes using a mouseout very tricky. The first solution is the best I've found so far.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>We have the same thing on an asp:dropdownlist:\n</p>\n\n<p>In Firefox(3.0.5) the dropdown is the width of the longest item in the dropdown, which is like 600 pixels wide or something like that.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In jQuery this works fairly well.  Assume the dropdown has id=\"dropdown\".</p>\n\n<pre><code>$(document).ready(function(){\n\n    $(\"#dropdown\").mousedown(function(){\n    if($.browser.msie) {\n        $(this).css(\"width\",\"auto\");\n    }\n    });\n    $(\"#dropdown\").change(function(){\n    if ($.browser.msie) {\n        $(this).css(\"width\",\"175px\");\n    }\n    });\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>@Thad you need to add a blur event handler as well</p>\n\n<pre><code>$(document).ready(function(){\n    $(\"#dropdown\").mousedown(function(){\n        if($.browser.msie) {\n            $(this).css(\"width\",\"auto\");\n        }\n    });\n    $(\"#dropdown\").change(function(){\n        if ($.browser.msie) {\n            $(this).css(\"width\",\"175px\");\n        }\n    });\n    $(\"#dropdown\").blur(function(){\n        if ($.browser.msie) {\n            $(this).css(\"width\",\"175px\");\n        }\n    });\n});\n</code></pre>\n\n<p>However, this will still expand the selectbox on click, instead of just the elements. (and it seems to fail in IE6, but works perfectly in Chrome and IE7)</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I used the following solution and it seems to work well in most situations.</p>\n\n<pre><code>&lt;style&gt;\nselect{width:100px}\n&lt;/style&gt;\n\n&lt;html&gt;\n&lt;select onmousedown=\"if($.browser.msie){this.style.position='absolute';this.style.width='auto'}\" onblur=\"this.style.position='';this.style.width=''\"&gt;\n  &lt;option&gt;One&lt;/option&gt;\n  &lt;option&gt;Two - A long option that gets cut off in IE&lt;/option&gt;\n&lt;/select&gt;\n&lt;/html&gt;\n</code></pre>\n\n<hr>\n\n<p>Note: the <em>$.browser.msie</em> does require jquery.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "\n<p>\nHere is the simplest solution !!!\nBefore I start i must tell you dropdown select box will automatically expand in almost all the browsers except IE6.so.. i would do a browser check [ i.e., IE6] and write the following only to that browser.Here it goes..First check for the browser..\n\n</p>\n\n\n\n<h3>\n<p>\n The code will magically expands the dropdown select box.The only problem with the solution is onmouseover the dropdown will be expanded to 420px.. and because the overflow = hidden we are hiding the expanded dropdown size and showing it as 170px;so, the arrow at the right side of the ddl will be hidden and cannot be seen. but the select box will be expanded to 420px;  which is what we really want. just try the below code for yourself and use it if you like it. Cheers.\n</p>\n</h3>\n\n<pre><code>    .ctrDropDown\n{\n    width:420px; &lt;%--this is the actual width of the dropdown list--%&gt;\n}\n.ctrDropDownClick\n{\n    width:420px; &lt;%-- this the width of the dropdown select box.--%&gt;\n}\n\n&lt;div style=\"width:170px; overflow:hidden;\"&gt;\n&lt;asp:DropDownList runat=\"server\" ID=\"ddlApplication\" onmouseout = \"this.className='ctrDropDown';\" onmouseover =\"this.className='ctrDropDownClick';\" class=\"ctrDropDown\" onBlur=\"this.className='ctrDropDown';\" onMouseDown=\"this.className='ctrDropDownClick';\" onChange=\"this.className='ctrDropDown';\"&gt;&lt;/asp:DropDownList&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p><H3><P>\nthe above is the IE6 css. the common css [for all other browsers] should be as below.\n  </P><br />\n</h3></p>\n\n<pre><code>    .ctrDropDown\n{\n    width:170px; &lt;%--this is the actual width of the dropdown list--%&gt;\n}\n.ctrDropDownClick\n{\n    width:auto; &lt;%-- this the width of the dropdown select box.--%&gt;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><a href=\"http://developer.yahoo.com/yui/examples/button/button-menu-select.html#\" rel=\"nofollow\">http://developer.yahoo.com/yui/examples/button/button-menu-select.html#</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>if you want a simple dropdown &amp;/or flyout menu with no transition effects just use CSS... you can force IE6 to support :hover on all element using an .htc file (css3hover?) with behavior (IE6 only property) defined in the conditionally attached CSS file.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's another <a href=\"http://jquery.com\">jQuery</a> based example. In contrary to all the other answers posted here, it takes all keyboard and mouse events into account, especially clicks:</p>\n\n<pre><code>if (!$.support.leadingWhitespace) { // if IE6/7/8\n    $('select.wide')\n        .bind('focus mouseover', function() { $(this).addClass('expand').removeClass('clicked'); })\n        .bind('click', function() { $(this).toggleClass('clicked'); })\n        .bind('mouseout', function() { if (!$(this).hasClass('clicked')) { $(this).removeClass('expand'); }})\n        .bind('blur', function() { $(this).removeClass('expand clicked'); });\n}\n</code></pre>\n\n<p>Use it in combination with this piece of CSS:</p>\n\n<pre><code>select {\n    width: 150px; /* Or whatever width you want. */\n}\nselect.expand {\n    width: auto;\n}\n</code></pre>\n\n<p>All you need to do is to add the class <code>wide</code> to the dropdown element(s) in question.</p>\n\n<pre><code>&lt;select class=\"wide\"&gt;\n    ...\n&lt;/select&gt;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/HnV9Q/\">Here is a jsfiddle example</a>. Hope this helps.</p>\n",
                    "is_accepted": true,
                    "score": 98
                },
                {
                    "body": "<p>you could just try the following...</p>\n\n<pre><code>  styleClass=\"someStyleWidth\"\n  onmousedown=\"javascript:if(navigator.appName=='Microsoft Internet Explorer'){this.style.position='absolute';this.style.width='auto'}\" \n  onblur=\"this.style.position='';this.style.width=''\"\n</code></pre>\n\n<p>I tried and it works for me. Nothing else is required.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>check this out.. it's not perfect but it works and it's for IE only and doesn't affect FF. I used the regular javascript for onmousedown to establish IE only fix.. but the msie from jquery could be used as well in the onmousedown.. the main idea is the \"onchange\" and on blur to have the select box return to normal... decide you're own width for those. I needed 35%. </p>\n\n<pre><code>onmousedown=\"javascript:if(navigator.appName=='Microsoft Internet Explorer'){this.style.width='auto'}\" \nonchange=\"this.style.width='35%'\"\nonblur=\"this.style.width='35%'\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The hedgerwow link (the YUI animation work-around) in the first best answer is broken, I guess the domain got expired. I copied the code before it got expired, so you can find it here (owner of code can let me know if I am breaching any copyrights by uploading it again)</p>\n\n<p><a href=\"http://ciitronian.com/blog/programming/yui-button-mimicking-native-select-dropdown-avoid-width-problem/\" rel=\"nofollow\">http://ciitronian.com/blog/programming/yui-button-mimicking-native-select-dropdown-avoid-width-problem/</a></p>\n\n<p>On the same blog post I wrote about making an exact same SELECT element like the normal one using YUI Button menu. Have a look and let me know if this helps!   </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This seems to work with IE6 and doesn't appear to break others. The other nice thing is that it changes the menu automatically as soon as you change your drop down selection.</p>\n\n<pre><code>$(document).ready(function(){\n    $(\"#dropdown\").mouseover(function(){\n        if($.browser.msie) {\n            $(this).css(\"width\",\"auto\");\n        }\n    });\n    $(\"#dropdown\").change(function(){\n        if ($.browser.msie) {\n            $(\"#dropdown\").trigger(\"mouseover\");\n        }\n    });\n\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>BalusC's answer above works great, but there is a small fix I would add if the content of your dropdown has a smaller width than what you define in your CSS select.expand, add this to the mouseover bind:</p>\n\n<pre><code>.bind('mouseover', function() { $(this).addClass('expand').removeClass('clicked');\n                                if ($(this).width() &lt; 300) // put your desired minwidth here\n                                {\n                                    $(this).removeClass('expand');\n                                }})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you use jQuery then try out this IE select width plugin:</p>\n\n<p><a href=\"http://www.jainaewen.com/files/javascript/jquery/ie-select-style/\" rel=\"nofollow\">http://www.jainaewen.com/files/javascript/jquery/ie-select-style/</a></p>\n\n<p>Applying this plugin makes the select box in Internet Explorer appear to work as it would work in Firefox, Opera etc by allowing the option elements to open at full width without loosing the look and style of the fixed width. It also adds support for padding and borders on the select box in Internet Explorer 6 and 7.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This is something l have done taking bits from other people's stuff.</p>\n\n<pre><code>        $(document).ready(function () {\n        if (document.all) {\n\n            $('#&lt;%=cboDisability.ClientID %&gt;').mousedown(function () {\n                $('#&lt;%=cboDisability.ClientID %&gt;').css({ 'width': 'auto' });\n            });\n\n            $('#&lt;%=cboDisability.ClientID %&gt;').blur(function () {\n                $(this).css({ 'width': '208px' });\n            });\n\n            $('#&lt;%=cboDisability.ClientID %&gt;').change(function () {\n                $('#&lt;%=cboDisability.ClientID %&gt;').css({ 'width': '208px' });\n            });\n\n            $('#&lt;%=cboEthnicity.ClientID %&gt;').mousedown(function () {\n                $('#&lt;%=cboEthnicity.ClientID %&gt;').css({ 'width': 'auto' });\n            });\n\n            $('#&lt;%=cboEthnicity.ClientID %&gt;').blur(function () {\n                $(this).css({ 'width': '208px' });\n            });\n\n            $('#&lt;%=cboEthnicity.ClientID %&gt;').change(function () {\n                $('#&lt;%=cboEthnicity.ClientID %&gt;').css({ 'width': '208px' });\n            });\n\n        }\n    });\n</code></pre>\n\n<p>where cboEthnicity and cboDisability are dropdowns with option text wider than the width of the select itself. </p>\n\n<p>As you can see, l have specified document.all as this only works in IE.  Also, l encased the dropdowns within div elements like this:</p>\n\n<pre><code>&lt;div id=\"dvEthnicity\" style=\"width: 208px; overflow: hidden; position: relative; float: right;\"&gt;&lt;asp:DropDownList CssClass=\"select\" ID=\"cboEthnicity\" runat=\"server\" DataTextField=\"description\" DataValueField=\"id\" Width=\"200px\"&gt;&lt;/asp:DropDownList&gt;&lt;/div&gt;\n</code></pre>\n\n<p>This takes care of the other elements moving out of place when your dropdown expands.  The only downside here is that the menulist visual disappears when you are selecting but returns as soon as you have selected.</p>\n\n<p>Hope this helps someone.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The jquery BalusC's solution improved by me. Used also: Brad Robertson's <a href=\"http://doctype.com/ie7-width-overrides-minwidth-select\" rel=\"nofollow\">comment here</a>.</p>\n\n<p>Just put this in a .js, use the wide class for your desired combos and don't forge to give it an Id. Call the function in the onload (or documentReady or whatever).<br/>\nAs simple ass that :)<br/>\nIt will use the width that you defined for the combo as minimun length.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function fixIeCombos() {\n    if ($.browser.msie &amp;&amp; $.browser.version &lt; 9) {\n    var style = $('&lt;style&gt;select.expand { width: auto; }&lt;/style&gt;');\n    $('html &gt; head').append(style);\n\n    var defaultWidth = \"200\";\n\n    // get predefined combo's widths.\n    var widths = new Array();\n    $('select.wide').each(function() {\n        var width = $(this).width();\n        if (!width) {\n        width = defaultWidth;\n        }\n        widths[$(this).attr('id')] = width;\n    });\n\n    $('select.wide')\n    .bind('focus mouseover', function() {\n        // We're going to do the expansion only if the resultant size is bigger\n        // than the original size of the combo.\n        // In order to find out the resultant size, we first clon the combo as\n        // a hidden element, add to the dom, and then test the width.\n        var originalWidth = widths[$(this).attr('id')];\n\n        var $selectClone = $(this).clone();\n        $selectClone.addClass('expand').hide();\n        $(this).after( $selectClone );\n        var expandedWidth = $selectClone.width()\n        $selectClone.remove();\n        if (expandedWidth &gt; originalWidth) {\n        $(this).addClass('expand').removeClass('clicked');\n        }\n    })\n    .bind('click', function() {\n        $(this).toggleClass('clicked'); \n    })\n    .bind('mouseout', function() {\n        if (!$(this).hasClass('clicked')) {\n        $(this).removeClass('expand');\n        }\n    })\n    .bind('blur', function() {\n        $(this).removeClass('expand clicked');\n    })\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Based on the solution posted by <a href=\"http://stackoverflow.com/questions/73960/dropdownlist-width-in-ie/2969250#2969250\">Sai</a>, this is how to do it with jQuery.</p>\n\n<pre><code>$(document).ready(function() {\n    if ($.browser.msie) $('select.wide')\n        .bind('onmousedown', function() { $(this).css({position:'absolute',width:'auto'}); })\n        .bind('blur', function() { $(this).css({position:'static',width:''}); });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>this is the best way to do this:</p>\n\n<pre><code>select:focus{\n    min-width:165px;\n    width:auto;\n    z-index:9999999999;\n    position:absolute;\n}\n</code></pre>\n\n<p>it's exactly the same like BalusC solution. \nOnly this is easier. ;)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I thought I'd throw my hat in the ring. I make a SaaS application and I had a select menu embedded inside a table. This method worked, but it skewed everything in the table.</p>\n\n<pre><code>onmousedown=\"if(navigator.appName=='Microsoft Internet Explorer'){this.style.position='absolute';this.style.width='auto'}\nonblur=\"if(navigator.appName=='Microsoft Internet Explorer'){this.style.position=''; this.style.width= '225px';}\"\n</code></pre>\n\n<p>So what I did to make it all better was throw the select inside a z-indexed div.</p>\n\n<pre><code>&lt;td valign=\"top\" style=\"width:225px; overflow:hidden;\"&gt;\n    &lt;div style=\"position: absolute; z-index: 5;\" onmousedown=\"var select = document.getElementById('select'); if(navigator.appName=='Microsoft Internet Explorer'){select.style.position='absolute';select.style.width='auto'}\"&gt;\n        &lt;select name=\"select_name\" id=\"select\" style=\"width: 225px;\" onblur=\"if(navigator.appName=='Microsoft Internet Explorer'){this.style.position=''; this.style.width= '225px';}\" onChange=\"reportFormValues('filter_&lt;?=$job_id?&gt;','form_values')\"&gt;\n            &lt;option value=\"0\"&gt;All&lt;/option&gt;\n            &lt;!--More Options--&gt;\n        &lt;/select&gt;\n    &lt;/div&gt;\n&lt;/td&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Its tested in all version of IE, Chrome, FF &amp; Safari</p>\n\n<p>// JavaScript code</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n&lt;!-- begin hiding\nfunction expandSELECT(sel) {\n  sel.style.width = '';\n}\nfunction contractSELECT(sel) {\n  sel.style.width = '100px';\n}\n// end hiding --&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>// Html code</p>\n\n<pre><code>&lt;select name=\"sideeffect\" id=\"sideeffect\"  style=\"width:100px;\" onfocus=\"expandSELECT(this);\" onblur=\"contractSELECT(this);\" &gt;\n  &lt;option value=\"0\" selected=\"selected\" readonly=\"readonly\"&gt;Select&lt;/option&gt;\n&lt;option value=\"1\" &gt;Apple&lt;/option&gt;\n&lt;option value=\"2\" &gt;Orange + Banana + Grapes&lt;/option&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I've had to work around this issue and once came up with a pretty complete and scalable solution working for IE6, 7 and 8 (and compatible with other browsers obviously).\nI've written a whole article about it right here: <a href=\"http://www.edgeoftheworld.fr/wp/work/dealing-with-fixed-sized-dropdown-lists-in-internet-explorer\" rel=\"nofollow\">http://www.edgeoftheworld.fr/wp/work/dealing-with-fixed-sized-dropdown-lists-in-internet-explorer</a></p>\n\n<p>Thought I'd share this for people who are still running into this problem, as none of the above solutions work in every case (in my opinion).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>A full fledged jQuery plugin is available. It supports non-breaking layout and keyboard interactions, check out the demo page: <a href=\"http://powerkiki.github.com/ie_expand_select_width/\" rel=\"nofollow\">http://powerkiki.github.com/ie_expand_select_width/</a></p>\n\n<p>disclaimer: I coded that thing, patches welcome</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I tried all of these solutions and none worked completely for me.  This is what I came up with</p>\n\n<pre><code>$(document).ready(function () {\n\nvar clicknum = 0;\n\n$('.dropdown').click(\n        function() {\n            clicknum++;\n            if (clicknum == 2) {\n                clicknum = 0;\n                $(this).css('position', '');\n                $(this).css('width', '');\n            }\n        }).blur(\n        function() {\n            $(this).css('position', '');\n            $(this).css('width', '');\n            clicknum = 0;\n        }).focus(\n        function() {\n            $(this).css('position', 'relative');\n            $(this).css('width', 'auto');\n        }).mousedown(\n        function() {\n            $(this).css('position', 'relative');\n            $(this).css('width', 'auto');\n        });\n})(jQuery);\n</code></pre>\n\n<p>Be sure to add a dropdown class to each dropdown in your html</p>\n\n<p>The trick here is using the specialized click function (I found it here <a href=\"http://stackoverflow.com/questions/898463/fire-event-each-time-a-dropdownlist-item-is-selected-with-jquery\">Fire event each time a DropDownList item is selected with jQuery</a>).  Many of the other solutions on here use the event handler change, which works well but won't trigger if the user selects the same option as was previously selected. </p>\n\n<p>Like many of the other solutions, focus and mousedown is for when the user puts the dropdown in focus, blur is for when they click away.</p>\n\n<p>You may also want to stick some kind of browser detection in this so it only effects ie.  It doesn't look bad in other browsers though</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In IE, the dropdown-list takes the same width as the dropbox (I hope I am making sense) whereas in Firefox the dropdown-list's width varies according to the content. </p>\n\n<p>This basically means that I have to make sure that the dropbox is wide enough to display the longest selection possible. This makes my page look very ugly :(</p>\n\n<p>Is there any workaround for this problem? \nHow can I use CSS to set different widths for dropbox and the dropdownlist?</p>\n",
            "last_activity_date": 1365717614,
            "question_id": 73960,
            "score": 87,
            "tags": [
                "javascript",
                "html",
                "internet-explorer",
                "drop-down-menu"
            ],
            "title": "Dropdownlist width in IE"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<h2>window.onload</h2>\n\n<p><strong>When do they fire?</strong></p>\n\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/GlobalEventHandlers.onload\">window.onload</a></p>\n\n<ul>\n<li>By default, it is fired when the entire page loads, including its content (images, css, scripts, etc.)</li>\n<li>In some browsers it now takes over the role of document.onload and fires when the DOM is ready as well.</li>\n</ul>\n\n<p>document.onload</p>\n\n<ul>\n<li>It is called when the DOM is ready which can be prior to images and other external content is loaded.</li>\n</ul>\n\n<p><strong>How well are they supported?</strong></p>\n\n<p>window.onload appears to be the most widely supported. In fact, some of the most modern browsers have in a sense replaced document.onload with window.onload. Browser support issues are most likely the reason why many people are starting to use libraries such as <a href=\"http://jquery.com/\">jQuery</a> to handle the checking for the document being ready like so:</p>\n\n<pre><code>$(document).ready(function() { /* code here */ });\n$(function() { /* code here */ });\n</code></pre>\n\n<hr>\n\n<p>For the purpose of history:</p>\n\n<p><strong>window.onload vs body.onload</strong></p>\n\n<p>As a note, a similar question was asked on <a href=\"http://www.codingforums.com/archive/index.php/t-106229.html\">codingforums</a> a while back regarding the usage of <code>window.onload</code> over <code>body.onload</code>. The result seemed to be that you should use <strong>window.onload</strong> because it is good to separate your structure from the action.</p>\n",
                    "is_accepted": true,
                    "score": 135
                },
                {
                    "body": "<p>window.onload however they are often the same thing.  Similarly body.onload becomes window.onload in IE.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Window.onload is the standard, however - the web browser in the PS3 (based on Netfront) doesn't support the window object, so you can't use it there.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The general idea is that <strong>window.onload fires</strong> when the document's window is <strong>ready for presentation</strong> and <strong>document.onload fires</strong> when the <strong>DOM tree</strong> (built from the markup code within the document) is <strong>completed</strong>.</p>\n\n<p>Ideally, subscribing to <a href=\"http://en.wikipedia.org/wiki/DOM_events\">DOM-tree events</a>, allows offscreen-manipulations through Javascript, incurring <strong>almost no CPU load</strong>. Contrarily, <strong><code>window.onload</code></strong> can <strong>take a while to fire</strong>, when multiple external resources have yet to be requested, parsed and loaded.</p>\n\n<p><strong>\u25baTest scenario:</strong></p>\n\n<p>To observe the difference and <strong>how your browser</strong> of choice <strong>implements</strong> the aforementioned <strong>event handlers</strong>, simply insert the following code within your document's - <code>&lt;body&gt;</code>- tag.</p>\n\n<pre><code>&lt;script language=\"javascript\"&gt;\nwindow.tdiff = []; fred = function(a,b){return a-b;};\nwindow.document.onload = function(e){ \n    console.log(\"document.onload\", e, Date.now() ,window.tdiff,  \n    (window.tdiff[0] = Date.now()) &amp;&amp; window.tdiff.reduce(fred) ); \n}\nwindow.onload = function(e){ \n    console.log(\"window.onload\", e, Date.now() ,window.tdiff, \n    (window.tdiff[1] = Date.now()) &amp;&amp; window.tdiff.reduce(fred) ); \n}\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>\u25baResult:</strong></p>\n\n<p>Here is the resulting behavior, observable for Chrome v20 (and probably most current browsers). </p>\n\n<ul>\n<li>No <code>document.onload</code> event.</li>\n<li><code>onload</code> fires twice when declared inside the <code>&lt;body&gt;</code>, once when declared inside the <code>&lt;head&gt;</code> (where the event then acts as <code>document.onload</code> ).</li>\n<li>counting and acting dependent on the state of the counter allows to emulate both event behaviors. </li>\n<li>Alternatively declare the <code>window.onload</code> event handler within the confines of the HTML-<code>&lt;head&gt;</code> element.</li>\n</ul>\n\n<p><strong>\u25baExample Project:</strong></p>\n\n<p>The code above is taken from <a href=\"https://github.com/lsauer/KeyBoarder/tree/gh-pages\">this project's</a> codebase (<code>index.html</code> and <code>keyboarder.js</code>).</p>\n\n<hr>\n\n<p>For a list of <a href=\"https://developer.mozilla.org/en-US/docs/DOM/window#Event_handlers\">event handlers of the window object</a>, please refer to the MDN documentation.</p>\n",
                    "is_accepted": false,
                    "score": 116
                },
                {
                    "body": "<p>You also might want to check out <a href=\"http://jquery.com/\" rel=\"nofollow\">jQuery</a> which provides a solid well tested cross browser event model.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><code>window.onload</code> and <code>onunload</code> are shortcuts to <code>document.body.onload</code> and <code>document.body.onunload</code></p>\n\n<p><code>document.onload</code> and <code>onload</code> handler on all html tag seems to be reserved however never triggered</p>\n\n<p>'<code>onload</code>' in document -> true</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In Chrome, window.onload is different from <code>&lt;body onload=\"\"&gt;</code>, whereas they are the same in both Firefox(version 35.0) and IE (version 11).</p>\n\n<p>You could explore that by the following snippet:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n    &lt;head&gt;\n        &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" /&gt;\n        &lt;!--import css here--&gt;\n        &lt;!--import js scripts here--&gt;\n\n        &lt;script language=\"javascript\"&gt;\n\n            function bodyOnloadHandler() {\n                console.log(\"body onload\");\n            }\n\n            window.onload = function(e) {\n                console.log(\"window loaded\");\n            };\n        &lt;/script&gt;\n    &lt;/head&gt;\n\n    &lt;body onload=\"bodyOnloadHandler()\"&gt;\n\n        Page contents go here.\n\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>And you will see both \"window loaded\"(which comes firstly) and \"body onload\" in Chrome console. However, you will see just \"body onload\" in Firefox and IE. If you run \"<code>window.onload.toString()</code>\" in the consoles of IE &amp; FF, you will see:</p>\n\n<blockquote>\n  <p>\"function onload(event) { bodyOnloadHandler() }\"</p>\n</blockquote>\n\n<p>which means that the assignment \"window.onload = function(e)...\" is overwritten.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Which is more widely supported: <code>window.onload</code> or <code>document.onload</code>?</p>\n",
            "last_activity_date": 1422245291,
            "question_id": 588040,
            "score": 145,
            "tags": [
                "javascript",
                "javascript-events"
            ],
            "title": "window.onload vs document.onload"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Create a form, use the POST method, submit the form - there's no need for an iframe.  When the server page responds to the request, write a response header for the mime type of the file, and it will present a download dialog - I've done this a number of times.</p>\n\n<p>You want content-type of application/download - just search for how to provide a download for whatever language you're using.</p>\n",
                    "is_accepted": true,
                    "score": 34
                },
                {
                    "body": "<p>What server-side language are you using? In my app I can easily download a file from an AJAX call by setting the correct headers in PHP's response:</p>\n\n<h2>Setting headers server-side</h2>\n\n<pre><code>header(\"HTTP/1.1 200 OK\");\nheader(\"Pragma: public\");\nheader(\"Cache-Control: must-revalidate, post-check=0, pre-check=0\");\n\n// The optional second 'replace' parameter indicates whether the header\n// should replace a previous similar header, or add a second header of\n// the same type. By default it will replace, but if you pass in FALSE\n// as the second argument you can force multiple headers of the same type.\nheader(\"Cache-Control: private\", false);\n\nheader(\"Content-type: \" . $mimeType);\n\n// $strFileName is, of course, the filename of the file being downloaded. \n// This won't have to be the same name as the actual file.\nheader(\"Content-Disposition: attachment; filename=\\\"{$strFileName}\\\"\"); \n\nheader(\"Content-Transfer-Encoding: binary\");\nheader(\"Content-Length: \" . mb_strlen($strFile));\n\n// $strFile is a binary representation of the file that is being downloaded.\necho $strFile;\n</code></pre>\n\n<p>This will in fact 'redirect' the browser to this download page, but as @ahren alread said in his comment, it won't navigate away from the current page.</p>\n\n<p>It's all about setting the correct headers so I'm sure you'll find a suitable solution for the server-side language you're using if it's not PHP.</p>\n\n<h2>Handling the response client side</h2>\n\n<p>Assuming you already know how to make an AJAX call, on the client side you execute an AJAX request to the server. The server then generates a link from where this file can be downloaded, e.g. the 'forward' URL where you want to point to.\nFor example, the server responds with:</p>\n\n<pre><code>{\n    status: 1, // ok\n    // unique one-time download token, not required of course\n    message: 'http://yourwebsite.com/getdownload/ska08912dsa'\n}\n</code></pre>\n\n<p>When processing the response, you inject an <code>iframe</code> in your body and set the <code>iframe</code>'s SRC to the URL you just received like this (using jQuery for the ease of this example): </p>\n\n<pre><code>$(\"body\").append(\"&lt;iframe src='\" + data.message +\n  \"' style='display: none;' &gt;&lt;/iframe&gt;\");\n</code></pre>\n\n<p>If you've set the correct headers as shown above, the iframe will force a download dialog without navigating the browser away from the current page.</p>\n\n<h2>Note</h2>\n\n<p>Extra addition in relation to your question; I think it's best to always return JSON when requesting stuff with AJAX technology. After you've received the JSON response, you can then decide client-side what to do with it. Maybe, for example, later on you want the user to click a download link to the URL instead of forcing the download directly, in your current setup you would have to update both client and server-side to do so.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>Don't give up so quickly, because this can be done (in modern browsers) using parts of the FileAPI:</p>\n\n<pre><code>$.ajax({\n    type: \"POST\",\n    url: url,\n    data: params,\n    success: function(response, status, xhr) {\n        // check for a filename\n        var filename = \"\";\n        var disposition = xhr.getResponseHeader('Content-Disposition');\n        if (disposition &amp;&amp; disposition.indexOf('attachment') !== -1) {\n            var filenameRegex = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/;\n            var matches = filenameRegex.exec(disposition);\n            if (matches != null &amp;&amp; matches[1]) filename = matches[1].replace(/['\"]/g, '');\n        }\n\n        var type = xhr.getResponseHeader('Content-Type');\n        var blob = new Blob([response], { type: type });\n\n        if (typeof window.navigator.msSaveBlob !== 'undefined') {\n            // IE workaround for \"HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed.\"\n            window.navigator.msSaveBlob(blob, filename);\n        } else {\n            var URL = window.URL || window.webkitURL;\n            var downloadUrl = URL.createObjectURL(blob);\n\n            if (filename) {\n                // use HTML5 a[download] attribute to specify filename\n                var a = document.createElement(\"a\");\n                // safari doesn't support this yet\n                if (typeof a.download === 'undefined') {\n                    window.location = downloadUrl;\n                } else {\n                    a.href = downloadUrl;\n                    a.download = filename;\n                    document.body.appendChild(a);\n                    a.click();\n                }\n            } else {\n                window.location = downloadUrl;\n            }\n\n            setTimeout(function () { URL.revokeObjectURL(downloadUrl); }, 100); // cleanup\n        }\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 74
                },
                {
                    "body": "<p>I see you've already found out a solution, however I just wanted to add some information which may help someone trying to achieve the same thing with big POST requests.</p>\n\n<p>I had the same issue a couple of weeks ago, indeed it isn't possible to achieve a \"clean\" download through AJAX, the Filament Group created a jQuery plugin which works exactly how you've already found out, it is called <a href=\"https://github.com/filamentgroup/jQuery-File-Download\" rel=\"nofollow\">jQuery File Download</a> however there is a downside to this technique.</p>\n\n<p>If you're sending big requests through AJAX (say files +1MB) it will negatively impact responsiveness. In slow Internet connections you'll have to wait <em>a lot</em> until the request is sent and also wait for the file to download. It isn't like an instant \"click\" => \"popup\" => \"download start\". It's more like \"click\" => \"wait until data is sent\" => \"wait for response\" => \"download start\" which makes it appear the file double its size because you'll have to wait for the request to be sent through AJAX and get it back as a downloadable file.</p>\n\n<p>If you're working with small file sizes &lt;1MB you won't notice this. But as I discovered in my own app, for bigger file sizes it is almost unbearable.</p>\n\n<p>My app allow users to export images dynamically generated, these images are sent through POST requests in base64 format to the server (it is the only possible way), then processed and sent back to users in form of .png, .jpg files, base64 strings for images +1MB are huge, this force users to wait more than necessary for the file to start downloading. In slow Internet connections it can be really annoying.</p>\n\n<p>My solution for this was to temporary write the file to the server, once it is ready, dynamically generate a link to the file in form of a button which changes between \"Please wait...\" and \"Download\" states and at the same time, print the base64 image in a preview popup window so users can \"right-click\" and save it. This makes all the waiting time more bearable for users, and also speed things up.</p>\n\n<p><strong>Update Sep 30, 2014:</strong></p>\n\n<blockquote>\n  <p>Months have passed since I posted this, finally I've found a better approach to speed things up when working with big base64 strings. I now store base64 strings into the database (using longtext or longblog fields), then I pass its record ID through the jQuery File Download, finally on the download script file I query the database using this ID to pull the base64 string and pass it through the download function.</p>\n</blockquote>\n\n<p><strong>Download Script Example:</strong></p>\n\n<pre><code>&lt;?php\n// Record ID\n$downloadID = (int)$_POST['id'];\n// Query Data (this example uses CodeIgniter)\n$data       = $CI-&gt;MyQueries-&gt;GetDownload( $downloadID );\n// base64 tags are replaced by [removed], so we strip them out\n$base64     = base64_decode( preg_replace('#\\[removed\\]#', '', $data[0]-&gt;image) );\n// This example is for base64 images\n$imgsize    = getimagesize( $base64 );\n// Set content headers\nheader('Content-Disposition: attachment; filename=\"my-file.png\"');\nheader('Content-type: '.$imgsize['mime']);\n// Force download\necho $base64;\n?&gt;\n</code></pre>\n\n<p><em>I know this is way beyond what the OP asked, however I felt it would be good to update my answer with my findings. When I was searching for solutions to my problem, I read lots of <strong>\"Download from AJAX POST data\"</strong> threads which didn't give me the answer I was looking for, I hope this information helps someone looking to achieve something like this.</em></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I have a javascript app that sends ajax POST requests to a certain URL. Response might be a JSON string or it might be a file (as an attachment). I can easily detect Content-Type and Content-Disposition in my ajax call, but once I detect that the response contains a file, how do I offer the client to download it? I've read a number of similar threads here but none of them provide the answer I'm looking for. </p>\n\n<p>Please, please, please do not post answers suggesting that I shouldn't use ajax for this or that I should redirect the browser, because none of this is an option. Using a plain HTML form is also not an option. What I do need is to show a download dialog to the client. Can this be done and how?</p>\n\n<p>EDIT:</p>\n\n<p>Apparently, this cannot be done, but there is a simple workaround, as suggested by the accepted answer. For anyone who comes across this issue in the future, here's how I solved it:</p>\n\n<pre><code>$.ajax({\n    type: \"POST\",\n    url: url,\n    data: params,\n    success: function(response, status, request) {\n        var disp = request.getResponseHeader('Content-Disposition');\n        if (disp &amp;&amp; disp.search('attachment') != -1) {\n            var form = $('&lt;form method=\"POST\" action=\"' + url + '\"&gt;');\n            $.each(params, function(k, v) {\n                form.append($('&lt;input type=\"hidden\" name=\"' + k +\n                        '\" value=\"' + v + '\"&gt;'));\n            });\n            $('body').append(form);\n            form.submit();\n        }\n    }\n});\n</code></pre>\n\n<p>So basically, just generate a HTML form with the same params that were used in AJAX request and submit it. </p>\n",
            "last_activity_date": 1412114452,
            "question_id": 16086162,
            "score": 69,
            "tags": [
                "javascript",
                "jquery",
                "ajax"
            ],
            "title": "Handle file download from ajax post"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>The jQuery API documentation lists <code>live()</code> as deprecated as of version 1.7 and removed as of version 1.9: <a href=\"http://api.jquery.com/live/\">link</a>.</p>\n\n<blockquote>\n  <p>version deprecated: 1.7, removed: 1.9</p>\n</blockquote>\n\n<p>Furthermore it states:</p>\n\n<blockquote>\n  <p>As of jQuery 1.7, the .live() method is deprecated. Use <a href=\"http://api.jquery.com/on/\">.on()</a> to attach event handlers. Users of older versions of jQuery should use <a href=\"http://api.jquery.com/delegate/\">.delegate()</a> in preference to .live()</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>.live() was deprecated and has now been removed from jQuery 1.9\nYou should use <a href=\"http://api.jquery.com/on/\" rel=\"nofollow\">.on()</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>.live was removed in 1.9, please see the upgrade guide: <a href=\"http://jquery.com/upgrade-guide/1.9/#live-removed\" rel=\"nofollow\">http://jquery.com/upgrade-guide/1.9/#live-removed</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<h1><strong><em>jQuery <code>.live()</code> has been removed in version 1.9 onwards.</em></strong></h1>\n\n<p>That means if you are upgrading from version 1.8 and earlier, you will notice things breaking if you do not follow the migration guide below. You must not simply replace <code>.live()</code> with <code>.on()</code>!</p>\n\n<hr>\n\n<h1><strong><em>Read before you start doing a search and replace:</em></strong></h1>\n\n<p>For <em>quick/hot fixes</em> on a live site, <strong>do not</strong> just replace the keyword <code>live</code> with <code>on</code>, <br>as the <strong>parameters are different</strong>!</p>\n\n<pre><code>.live(events, function)\n</code></pre>\n\n<p>should map to:</p>\n\n<pre><code>.on(eventType, selector, function)\n</code></pre>\n\n<p><strong>The selector is very important! If you do not need to use this for any reason, set it to <code>null</code>.</strong></p>\n\n<hr>\n\n<h1><strong>Migration Example 1:</strong></h1>\n\n<p>before:</p>\n\n<pre><code>$('#mainmenu a').live('click', function)\n</code></pre>\n\n<p>after, you move the child element (<code>a</code>) to the <code>.on()</code> selector:</p>\n\n<pre><code>$('#mainmenu').on('click', 'a', function)\n</code></pre>\n\n<hr>\n\n<h1><strong>Migration Example 2:</strong></h1>\n\n<p>before:</p>\n\n<pre><code>$('.myButton').live('click', function)\n</code></pre>\n\n<p>after, you move the element (<code>.myButton</code>) to the <code>.on()</code> selector, and find the nearest parent element (preferably with an ID):</p>\n\n<pre><code>$('#parentElement').on('click', '.myButton', function)\n</code></pre>\n\n<p><strong>If you do not know what to put as the parent, <code>body</code> always works:</strong></p>\n\n<pre><code>$('body').on('click', '.myButton', function)\n</code></pre>\n\n<hr>\n\n<h1>See also:</h1>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/q/14703646/584192\">jQuery - how to use the \u201con()\u201d method instead of \u201clive()\u201d?</a></li>\n<li><a href=\"http://jquery.com/upgrade-guide/1.9/\">jQuery 1.9 Migration Guide</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 206
                }
            ],
            "body": "<p>I recently updated jQuery from 1.8 to 2.1. I suddenly discovered that the <code>.live()</code> stops working.<br>\nI get the error <code>TypeError: $(...).live is not a function</code>.</p>\n\n<p>Is there any method I can use in place of <code>.live()</code>?</p>\n",
            "last_activity_date": 1402413043,
            "question_id": 14354040,
            "score": 83,
            "tags": [
                "javascript",
                "jquery",
                "function",
                "live",
                "deprecated"
            ],
            "title": "jQuery 1.9 .live() is not a function"
        },
        {
            "answer_count": 22,
            "answers": [
                {
                    "body": "<p>Some time ago I made a function with that purpose:</p>\n\n<pre><code>function getAge(birthDate) {\n  var now = new Date();\n\n  function isLeap(year) {\n    return year % 4 == 0 &amp;&amp; (year % 100 != 0 || year % 400 == 0);\n  }\n\n  // days since the birthdate    \n  var days = Math.floor((now.getTime() - birthDate.getTime())/1000/60/60/24);\n  var age = 0;\n  // iterate the years\n  for (var y = birthDate.getFullYear(); y &lt;= now.getFullYear(); y++){\n    var daysInYear = isLeap(y) ? 366 : 365;\n    if (days &gt;= daysInYear){\n      days -= daysInYear;\n      age++;\n      // increment the age only if there are available enough days for the year.\n    }\n  }\n  return age;\n}\n</code></pre>\n\n<p>It takes a Date object as input, so you need to parse the <code>'YYYYMMDD'</code> formatted date string:</p>\n\n<pre><code>var birthDateStr = '19840831',\n    parts = birthDateStr.match(/(\\d{4})(\\d{2})(\\d{2})/),\n    dateObj = new Date(parts[1], parts[2]-1, parts[3]); // months 0-based!\n\ngetAge(dateObj); // 26\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>To test whether the birthday already passed or not, I define a helper function <code>Date.prototype.getDoY</code>, which effectively returns the day number of the year. The rest is pretty self-explanatory.</p>\n\n<pre><code>Date.prototype.getDoY = function() {\n    var onejan = new Date(this.getFullYear(), 0, 1);\n    return Math.floor(((this - onejan) / 86400000) + 1);\n};\n\nfunction getAge(birthDate) {\n    function isLeap(year) {\n        return year % 4 == 0 &amp;&amp; (year % 100 != 0 || year % 400 == 0);\n    }\n\n    var now = new Date(),\n        age = now.getFullYear() - birthDate.getFullYear(),\n        doyNow = now.getDoY(),\n        doyBirth = birthDate.getDoY();\n\n    // normalize day-of-year in leap years\n    if (isLeap(now.getFullYear()) &amp;&amp; doyNow &gt; 58 &amp;&amp; doyBirth &gt; 59)\n        doyNow--;\n\n    if (isLeap(birthDate.getFullYear()) &amp;&amp; doyNow &gt; 58 &amp;&amp; doyBirth &gt; 59)\n        doyBirth--;\n\n    if (doyNow &lt;= doyBirth)\n        age--;  // birthday not yet passed this year, so -1\n\n    return age;\n};\n\nvar myBirth = new Date(2001, 6, 4);\nconsole.log(getAge(myBirth));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>function age()\n{\n    var birthdate = $j('#birthDate').val(); // in   \"mm/dd/yyyy\" format\n    var senddate = $j('#expireDate').val(); // in   \"mm/dd/yyyy\" format\n    var x = birthdate.split(\"/\");    \n    var y = senddate.split(\"/\");\n    var bdays = x[1];\n    var bmonths = x[0];\n    var byear = x[2];\n    //alert(bdays);\n    var sdays = y[1];\n    var smonths = y[0];\n    var syear = y[2];\n    //alert(sdays);\n\n    if(sdays &lt; bdays)\n    {\n        sdays = parseInt(sdays) + 30;\n        smonths = parseInt(smonths) - 1;\n        //alert(sdays);\n        var fdays = sdays - bdays;\n        //alert(fdays);\n    }\n    else{\n        var fdays = sdays - bdays;\n    }\n\n    if(smonths &lt; bmonths)\n    {\n        smonths = parseInt(smonths) + 12;\n        syear = syear - 1;\n        var fmonths = smonths - bmonths;\n    }\n    else\n    {\n        var fmonths = smonths - bmonths;\n    }\n\n    var fyear = syear - byear;\n    document.getElementById('patientAge').value = fyear+' years '+fmonths+' months '+fdays+' days';\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Try this.</p>\n\n<pre><code>function getAge(dateString) {\n    var today = new Date();\n    var birthDate = new Date(dateString);\n    var age = today.getFullYear() - birthDate.getFullYear();\n    var m = today.getMonth() - birthDate.getMonth();\n    if (m &lt; 0 || (m === 0 &amp;&amp; today.getDate() &lt; birthDate.getDate())) {\n        age--;\n    }\n    return age;\n}\n</code></pre>\n\n<p>I believe the only thing that looked crude on your code was the <code>substr</code> part.</p>\n\n<p><strong>Fiddle</strong>: <a href=\"http://jsfiddle.net/codeandcloud/n33RJ/\">http://jsfiddle.net/codeandcloud/n33RJ/</a></p>\n",
                    "is_accepted": false,
                    "score": 197
                },
                {
                    "body": "<p>This is my amended attempt (with a string passed in to function instead of a date object):</p>\n\n<pre><code>function calculateAge(dobString) {\n    var dob = new Date(dobString);\n    var currentDate = new Date();\n    var currentYear = currentDate.getFullYear();\n    var birthdayThisYear = new Date(currentYear, dob.getMonth(), dob.getDate());\n    var age = currentYear - dob.getFullYear();\n\n    if(birthdayThisYear &gt; currentDate) {\n        age--;\n    }\n\n    return age;\n}\n</code></pre>\n\n<p>And usage:</p>\n\n<pre><code>console.log(calculateAge('1980-01-01'));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I just had to write this function for myself - the accepted answer is fairly good but IMO could use some cleanup. This takes a unix timestamp for dob because that was my requirement but could be quickly adapted to use a string: </p>\n\n<pre><code>var getAge = function(dob) {\n    var measureDays = function(dateObj) {\n            return 31*dateObj.getMonth()+dateObj.getDate();\n        },\n        d = new Date(dob*1000),\n        now = new Date();\n\n    return now.getFullYear() - d.getFullYear() - (measureDays(now) &lt; measureDays(d));\n}\n</code></pre>\n\n<p>Notice I've used a flat value of 31 in my measureDays function.  All the calculation cares about is that the \"day-of-year\" be a monotonically increasing measure of the timestamp.</p>\n\n<p>If using a javascript timestamp or string, obviously you'll want to remove the factor of 1000.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here's my solution, just pass in a parseable date:</p>\n\n<pre><code>function getAge(birth) {\n  ageMS = Date.parse(Date()) - Date.parse(birth);\n  age = new Date();\n  age.setTime(ageMS);\n  ageYear = age.getFullYear() - 1970;\n\n  return ageYear;\n\n  // ageMonth = age.getMonth(); // Accurate calculation of the month part of the age\n  // ageDay = age.getDate();    // Approximate calculation of the day part of the age\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I know this is a very old thread but I wanted to put in this implementation that I wrote for finding the age which I believe is much more accurate. </p>\n\n<pre><code>var getAge = function(year,month,date){\n    var today = new Date();\n    var dob = new Date();\n    dob.setFullYear(year);\n    dob.setMonth(month-1);\n    dob.setDate(date);\n    var timeDiff = today.valueOf() - dob.valueOf();\n    var milliInDay = 24*60*60*1000;\n    var noOfDays = timeDiff / milliInDay;\n    var daysInYear = 365.242;\n    return  ( noOfDays / daysInYear ) ;\n}\n</code></pre>\n\n<p>Ofcourse you could adapt this to fit in other formats of getting the parameters. Hope this helps someone looking for a better solution.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Alternate solution, because why not:</p>\n\n<pre><code>function calculateAgeInYears (date) {\n    var now = new Date();\n    var current_year = now.getFullYear();\n    var year_diff = current_year - date.getFullYear();\n    var birthday_this_year = new Date(current_year, date.getMonth(), date.getDate());\n    var has_had_birthday_this_year = (now &gt;= birthday_this_year);\n\n    return has_had_birthday_this_year\n        ? year_diff\n        : year_diff - 1;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I've checked the examples showed before and they didn't worked in all cases, and because of this i made a script of my own. I tested this, and it works perfectly.</p>\n\n<pre><code>function getAge(birth) {\n   var today = new Date();\n   var curr_date = today.getDate();\n   var curr_month = today.getMonth() + 1;\n   var curr_year = today.getFullYear();\n\n   var pieces = birth.split('/');\n   var birth_date = pieces[0];\n   var birth_month = pieces[1];\n   var birth_year = pieces[2];\n\n   if (curr_month == birth_month &amp;&amp; curr_date &gt;= birth_date) return parseInt(curr_year-birth_year);\n   if (curr_month == birth_month &amp;&amp; curr_date &lt; birth_date) return parseInt(curr_year-birth_year-1);\n   if (curr_month &gt; birth_month) return parseInt(curr_year-birth_year);\n   if (curr_month &lt; birth_month) return parseInt(curr_year-birth_year-1);\n}\n\nvar age = getAge('18/01/2011');\nalert(age);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function getAge(dateString) {\n\n    var dates = dateString.split(\"-\");\n    var d = new Date();\n\n    var userday = dates[0];\n    var usermonth = dates[1];\n    var useryear = dates[2];\n\n    var curday = d.getDate();\n    var curmonth = d.getMonth()+1;\n    var curyear = d.getFullYear();\n\n    var age = curyear - useryear;\n\n    if((curmonth &lt; usermonth) || ( (curmonth == usermonth) &amp;&amp; curday &lt; userday   )){\n\n        age--;\n\n    }\n\n    return age;\n}\n</code></pre>\n\n<p>To get the age when european date has entered:</p>\n\n<pre><code>getAge('16-03-1989')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><strong>Important: This answer doesn't provide an 100% accurate answer, it is off by around 10-20 hours depending on the date.</strong> </p>\n\n<blockquote>\n  <p>There are no better solutions ( not in these answers anyway ). - naveen</p>\n</blockquote>\n\n<p>I of course couldn't resist the urge to take up the challenge and make an faster and shorter birthday calculator than the current accepted solution.\nThe main point for my solution, is that math is fast, so instead of using branching, and the date model javascript provides to calculate a solution we use the wonderful math</p>\n\n<p>The answer looks like this, and runs ~65% faster than naveen's plus it's much shorter:</p>\n\n<pre><code>function calcAge(dateString) {\n  var birthday = +new Date(dateString);\n  return ~~((Date.now() - birthday) / (31557600000));\n}\n</code></pre>\n\n<p>The magic number: 31557600000 is 24 * 3600 * 365.25 * 1000\nWhich is the length of a year, the length of a year is 365 days and 6 hours which is 0.25 day. In the end i floor the result which gives us the final age.</p>\n\n<p>Here is the benchmarks: <a href=\"http://jsperf.com/birthday-calculation\">http://jsperf.com/birthday-calculation</a></p>\n\n<p>To support OP's data format you can replace <code>+new Date(dateString);</code> <br />\n with <code>+new Date(d.substr(0, 4), d.substr(4, 2)-1, d.substr(6, 2));</code></p>\n\n<p>If you can come up with a better solution please share! :-)</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>Here's the simplest, most accurate solution I could come up with:</p>\n\n<pre><code>Date.prototype.getAge = function (date) {\n    if (!date) date = new Date();\n    return ~~((date.getFullYear() + date.getMonth() / 100\n    + date.getDate() / 10000) - (this.getFullYear() + \n    this.getMonth() / 100 + this.getDate() / 10000));\n}\n</code></pre>\n\n<p>And here is a sample that will consider Feb 29 -> Feb 28 a year.</p>\n\n<pre><code>Date.prototype.getAge = function (date) {\n    if (!date) date = new Date();\n    var feb = (date.getMonth() == 1 || this.getMonth() == 1);\n    return ~~((date.getFullYear() + date.getMonth() / 100 + \n        (feb &amp;&amp; date.getDate() == 29 ? 28 : date.getDate())\n        / 10000) - (this.getFullYear() + this.getMonth() / 100 + \n        (feb &amp;&amp; this.getDate() == 29 ? 28 : this.getDate()) \n        / 10000));\n}\n</code></pre>\n\n<p>It even works with negative age!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><strong>I would go for readability:</strong></p>\n\n<pre><code>function _calculateAge(birthday) { // birthday is a date\n    var ageDifMs = Date.now() - birthday.getTime();\n    var ageDate = new Date(ageDifMs); // miliseconds from epoch\n    return Math.abs(ageDate.getUTCFullYear() - 1970);\n}\n</code></pre>\n\n<p>And it is quite fast, comparably.</p>\n\n<p><strong>EDIT:</strong> But this ALSO has precision issues, so this cannot be completely trusted either.\nIf there are any leap years, or other time skewing, this will loose accuracy.</p>\n\n<p>Instead I would recommend using a library for this, if precision is very important. Also <a href=\"http://stackoverflow.com/a/7091965/1044856\"><code>@Naveens post</code></a>, is probably the most accurate, and fastest.</p>\n\n<hr>\n\n<p><strong>Benchmarks: <a href=\"http://jsperf.com/birthday-calculation/15\">http://jsperf.com/birthday-calculation/15</a></strong></p>\n\n<p><strong>Disclaimer:</strong> Kristoffer Dorph's answer was previously the accepted answer, hence I compared against his benchmarks.</p>\n",
                    "is_accepted": true,
                    "score": 39
                },
                {
                    "body": "<p>All the answers I tested here (about half) think 2000-02-29 to 2001-02-28 is zero years, when it most likely should be 1 since 2000-02-29 to 2001-03-01 is 1 year and 1 day. Here is a <em>getYearDiff</em> function that fixes that. It only works where <code>d0 &lt; d1</code>:</p>\n\n<pre><code>function getYearDiff(d0, d1) {\n\n    d1 = d1 || new Date();\n\n    var m = d0.getMonth();\n    var years = d1.getFullYear() - d0.getFullYear();\n\n    d0.setFullYear(d0.getFullYear() + years);\n\n    if (d0.getMonth() != m) d0.setDate(0);\n\n    return d0 &gt; d1? --years : years;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Yet another solution:</p>\n\n<pre><code>/**\n * Calculate age by birth date.\n *\n * @param int birthYear Year as YYYY.\n * @param int birthMonth Month as number from 1 to 12.\n * @param int birthDay Day as number from 1 to 31.\n * @return int\n */\nfunction getAge(birthYear, birthMonth, birthDay) {\n  var today = new Date();\n  var birthDate = new Date(birthYear, birthMonth-1, birthDay);\n  var age = today.getFullYear() - birthDate.getFullYear();\n  var m = today.getMonth() - birthDate.getMonth();\n  if (m &lt; 0 || (m === 0 &amp;&amp; today.getDate() &lt; birthDate.getDate())) {\n    age--;\n  }\n  return age;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>With momentjs:</p>\n\n<pre><code>/* The difference, in years, between NOW and 2012-05-07 */\nmoment().diff(moment('20120507', 'YYYYMMDD'), 'years')\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>With <a href=\"http://momentjs.com/\" rel=\"nofollow\">momentjs</a> \"fromNow\" method, \nThis allows you to work with formatted date, ie: 03/15/1968</p>\n\n<p><code>var dob = document.getElementByID(\"dob\");\nvar age = moment(dob.value).fromNow(true).replace(\" years\", \"\");\n</code></p>\n\n<p><code>//fromNow(true) =&gt; suffix \"ago\" is not displayed\n//but we still have to get rid of \"years\";\n</code></p>\n\n<p>As a prototype version</p>\n\n<pre><code>String.prototype.getAge = function() {\nreturn moment(this.valueOf()).fromNow(true).replace(\" years\", \"\");\n</code></pre>\n\n<p>}</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this:      </p>\n\n<pre><code>$('#Datepicker').change(function(){\n\nvar $bef = $('#Datepicker').val();\nvar $today = new Date();\nvar $before = new Date($bef);\nvar $befores = $before.getFullYear();\nvar $todays = $today.getFullYear();\nvar $bmonth = $before.getMonth();\nvar $tmonth = $today.getMonth();\nvar $bday = $before.getDate();\nvar $tday = $today.getDate();\n\nif ($bmonth&gt;$tmonth)\n{$('#age').val($todays-$befores);}\n\nif ($bmonth==$tmonth)\n{   \nif ($tday &gt; $bday) {$('#age').val($todays-$befores-1);}\nelse if ($tday &lt;= $bday) {$('#age').val($todays-$befores);}\n}\nelse if ($bmonth&lt;$tmonth)\n{ $('#age').val($todays-$befores-1);} \n})\n\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<pre><code>    function clearInfo(date) {\n        date.setFullYear(0);\n        date.setHours(0);\n        date.setMinutes(0);\n        date.setSeconds(0);\n        date.setMilliseconds(0);\n        return date;\n    }\n\n    function compareDateOnly(date1, date2) {\n        date1 = clearInfo(new Date(date1));\n        date2 = clearInfo(new Date(date2));\n        return date1 - date2;\n    }\n\n    function getAge(date) {\n        var bday = new Date(date);\n        var now = new Date();\n        var years = now.getFullYear() - bday.getFullYear();\n        if (compareDateOnly(bday, now) &lt; 0) { //this year birthday past\n            return years;\n        }\n        return years - 1; //not past\n    }\n</code></pre>\n\n<p>Assuming if a person is born Sep 11 1991, he would not be 1 year old until Sep 12 1992.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In 3 steps we can get this.</p>\n\n<p>1) Take the year difference of date one and date two. Save the year difference in Y. Example 2015 - 2013 = 2.</p>\n\n<p>2) Take the month difference of date one and date two. If difference is positive or zero save the month difference in M. If difference is negative then change Y to Y-1 and then add 12 to second date's month, subtract it from first date's month and save it in M.</p>\n\n<p>3) Take the days difference of date one and date two. If difference is positive or zero save it to D. If difference is negative then change M to M-1 and find out number of days in that particular month (28, 29, 30 or 31) and add that to the value and then go for subtraction. Save the value in D.</p>\n\n<p>Validate your result here.</p>\n\n<p><a href=\"http://freecalculation.com/Calculator/Age\" rel=\"nofollow\">http://freecalculation.com/Calculator/Age</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I used this approach using logic instead of math.\nIt's precise and quick.\nThe parameters are the year, month and day of the person's birthday.\nIt returns the person's age as an integer.</p>\n\n<pre><code>function calculateAge(year, month, day) {\n        var currentDate = new Date();\n        var currentYear = currentDate.getFullYear();\n        var currentMonth = currentDate.getUTCMonth() + 1;\n        var currentDay = currentDate.getUTCDate();\n        // You need to treat the cases where the year, month or day hasn't arrived yet.\n        var age = currentYear - year;\n        if (currentMonth &gt; month) {\n            return age;\n        } else {\n            if (currentDay &gt;= day) {\n                return age;\n            } else {\n                age--;\n                return age;\n            }\n        }\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How can I calculate an age in years, given a birth date of format YYYYMMDD? Is it possible using the Date() class?</p>\n\n<p>I am looking for a better solution than the one I am using now:</p>\n\n<pre><code>var dob='19800810';\nvar year=Number(dob.substr(0,4));\nvar month=Number(dob.substr(4,2))-1;\nvar day=Number(dob.substr(6,2));\nvar today=new Date();\nvar age=today.getFullYear()-year;\nif(today.getMonth()&lt;month || (today.getMonth()==month &amp;&amp; today.getDate()&lt;day)){age--;}\nalert(age);\n</code></pre>\n",
            "last_activity_date": 1421005836,
            "question_id": 4060004,
            "score": 94,
            "tags": [
                "javascript"
            ],
            "title": "Calculate age in JavaScript"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<pre><code>&lt;a onclick=\"parent.abc();\" href=\"#\" &gt;Call Me &lt;/a&gt;\n</code></pre>\n\n<p>See <a href=\"https://developer.mozilla.org/en/DOM/window.parent\">window.parent</a></p>\n\n<p>Returns a reference to the parent of the current window or subframe.</p>\n\n<p>If a window does not have a parent, its parent property is a reference to itself.</p>\n\n<p>When a window is loaded in an <code>&lt;iframe&gt;</code>, <code>&lt;object&gt;</code>, or <code>&lt;frame&gt;</code>, its parent is the window with the element embedding the window.</p>\n",
                    "is_accepted": true,
                    "score": 198
                },
                {
                    "body": "<p>I recently had to find out why this didn't work too.</p>\n\n<p>The javascript you want to call from the child iframe needs to be in the head of the parent. If it is in the body, the script is not available in the global scope.</p>\n\n<pre><code>&lt;head&gt;\n    &lt;script&gt;\n    function abc() {\n        alert(\"sss\");\n    }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;iframe id=\"myFrame\"&gt;\n        &lt;a onclick=\"parent.abc();\" href=\"#\"&gt;Click Me&lt;/a&gt;\n    &lt;/iframe&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Hope this helps anyone that stumbles upon this issue again.</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>You can use </p>\n\n<pre><code>window.top\n</code></pre>\n\n<p>see the following.</p>\n\n<pre><code>&lt;head&gt;\n    &lt;script&gt;\n    function abc() {\n        alert(\"sss\");\n    }\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;iframe id=\"myFrame\"&gt;\n        &lt;a onclick=\"window.top.abc();\" href=\"#\"&gt;Click Me&lt;/a&gt;\n    &lt;/iframe&gt;\n&lt;/body&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I have posted this as a separate answer as it is unrelated to my existing answer.</p>\n\n<p>This issue recently cropped up again for accessing a parent from an iframe referencing a subdomain and the existing fixes did not work.</p>\n\n<p>This time the answer was to modify the document.domain of the parent page and the iframe to be the same. This will fool the <a href=\"http://en.wikipedia.org/wiki/Same_origin_policy#Origin_determination_rules\">same origin policy checks</a> into thinking they co-exist on exactly the same domain (subdomains are considered a different host and fail the same origin policy check).</p>\n\n<p>Insert the following to the <code>&lt;head&gt;</code> of the page in the iframe to match the parent domain (adjust for your doctype).</p>\n\n<pre><code>&lt;script&gt;\n    document.domain = \"mydomain.com\";\n&lt;/script&gt;\n</code></pre>\n\n<p>Please note that this will throw an error on localhost development, so use a check like the following to avoid the error:</p>\n\n<pre><code>if (!window.location.href.match(/localhost/gi)) {\n    document.domain = \"mydomain.com\";\n} \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>The solution given by Ash Clarke for subdomains works great, but please note that you need to include the document.domain = \"mydomain.com\"; in both the head of the iframe page and the head of the parent page, as stated in the link <a href=\"http://en.wikipedia.org/wiki/Same_origin_policy#Origin_determination_rules\" rel=\"nofollow\">same origin policy checks</a></p>\n\n<blockquote>\n  <p>An important extension to the same origin policy implemented for JavaScript DOM access (but not for most of the other flavors of same-origin checks) is that two sites sharing a common top-level domain may opt to communicate despite failing the \"same host\" check by mutually setting their respective document.domain DOM property to the same qualified, right-hand fragment of their current host name.\n  For example, if <a href=\"http://en.example.com/\" rel=\"nofollow\">http://en.example.com/</a> and <a href=\"http://fr.example.com/\" rel=\"nofollow\">http://fr.example.com/</a> both set document.domain to \"example.com\", they would be from that point on considered same-origin for the purpose of DOM manipulation.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Another addition for those who need it.  Ash Clarke's solution does not work if they are using different protocols so be sure that if you are using SSL, your iframe is using SSL as well or it will break the function.  His solution did work for the domains itself though, so thanks for that.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><strong>parent.abc()</strong> will only work on same domain due to security purposes.  i tried this workaround and mine worked perfectly.</p>\n\n<pre><code>&lt;head&gt;\n    &lt;script&gt;\n    function abc() {\n        alert(\"sss\");\n    }\n\n    // window of the iframe\n    var innerWindow = document.getElementById('myFrame').contentWindow;\n    innerWindow.abc= abc;\n\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;iframe id=\"myFrame\"&gt;\n        &lt;a onclick=\"abc();\" href=\"#\"&gt;Click Me&lt;/a&gt;\n    &lt;/iframe&gt;\n&lt;/body&gt;\n</code></pre>\n\n<p>Hope this helps. :)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>With Firefox and Chrome you can use :</p>\n\n<pre><code>&lt;a href=\"whatever\" target=\"_parent\" onclick=\"myfunction()\"&gt;\n</code></pre>\n\n<p>If myfunction is present both in iframe and in parent, the parent one will be called.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to call a parent window JavaScript function from an iframe.  </p>\n\n<pre><code>&lt;script&gt;\n    function abc()\n    {\n        alert(\"sss\");\n    }\n&lt;/script&gt;\n\n&lt;iframe id=\"myFrame\"&gt;\n    &lt;a onclick=\"abc();\" href=\"#\"&gt;Call Me&lt;/a&gt;\n&lt;/iframe&gt;\n</code></pre>\n",
            "last_activity_date": 1413269489,
            "question_id": 2161388,
            "score": 120,
            "tags": [
                "javascript",
                "iframe"
            ],
            "title": "Calling a parent window function from an iframe"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Basically, yes. You write <code>alert('&lt;?php echo($phpvariable); ?&gt;');</code></p>\n\n<p>There are sure other ways to interoperate, but none of which i can think of being as simple (or better) as the above.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I would say echo() ing them directly into the Javascript source code is the most reliable and downward compatible way. Stay with that unless you have a good reason not to.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You're asking kind of a two-part question. As far as syntax (I think since PHP4?) you can use: </p>\n\n<pre><code>&lt;?=$var?&gt;\n</code></pre>\n\n<p>... if PHP is configured to allow it. And it is on most servers.</p>\n\n<p>As far as storing user data, you also have the option of storing it in the session:</p>\n\n<pre><code>$_SESSION['bla'] = \"so-and-so\";\n</code></pre>\n\n<p>for persistence from page to page. You could also of course use a database. You can even have PHP store the session variables in the db. It just depends on what you need.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Your example shows the most simple way of passing PHP variables to JavaScript. You can also use json_encode for more complex things like arrays:</p>\n\n<pre><code>&lt;?php\n    $simple = 'simple string';\n    $complex = array('more', 'complex', 'object', array('foo', 'bar'));\n?&gt;\n&lt;script type=\"text/javascript\"&gt;\n    var simple = '&lt;?php echo $simple; ?&gt;';\n    var complex = &lt;?php echo json_encode($complex); ?&gt;;\n&lt;/script&gt;\n</code></pre>\n\n<p>Other than that, if you really want to \"interact\" between PHP and JavaScript you should use Ajax.</p>\n\n<p>Using cookies for this is a very unsafe and unreliable way, as they are stored clientside and therefore open for any manipulation or won't even get accepted/saved. Don't use them for this type of interaction.\n<a href=\"http://docs.jquery.com/Ajax\">jQuery.ajax</a> is a good start IMHO.</p>\n",
                    "is_accepted": true,
                    "score": 59
                },
                {
                    "body": "<p>If AJAX isn't an option you can use nested data structures to simplify.</p>\n\n<pre><code>&lt;?php\n$var = array(\n  'qwe' =&gt; 'asd',\n  'asd' =&gt; array(\n    1 =&gt; 2,\n    3 =&gt; 4,\n    )\n  'zxc' =&gt; 0,\n  ); ?&gt;\nvar data = &lt;?php echo json_encode($var); ?&gt;;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I ran into a similar issue when building a custom pagination for a site I am working on.</p>\n\n<p>The global variable I created in functions.php was defined and set to 0. I could output this value in my javascript no problem using the method @Karsten outlined above. The issue was with updating the global variable that I initially set to 0 inside the PHP file.</p>\n\n<p>Here is my workaround (hacky? I know!) but after struggling for an hour on a tight deadline the following works:</p>\n\n<p><strong>Inside archive-episodes.php:</strong></p>\n\n<pre><code>&lt;script&gt;\n    // We define the variable and update it in a php\n    // function defined in functions.php\n    var totalPageCount; \n&lt;/script&gt;\n</code></pre>\n\n<p><strong>Inside functions.php</strong></p>\n\n<pre><code>&lt;?php\n    $totalPageCount = WP_Query-&gt;max_num_pages; // In my testing scenario this number is 8.\n    echo '&lt;script&gt;totalPageCount = $totalPageCount;&lt;/script&gt;';\n?&gt;\n</code></pre>\n\n<p>To keep it simple, I was outputting the <em>totalPageCount</em> variable in an <strong>$ajax.success</strong> callback via alert.</p>\n\n<pre><code>$.ajax({\n        url: ajaxurl,\n        type: 'POST',\n        data: {\"action\": \"infinite_scroll\", \"page_no\": pageNumber, \"posts_per_page\": numResults},\n        beforeSend: function() {\n            $(\".ajaxLoading\").show();\n        },\n        success: function(data) {\n                            //alert(\"DONE LOADING EPISODES\");\n            $(\".ajaxLoading\").hide();\n\n            var $container = $(\"#episode-container\");\n\n            if(firstRun) {\n                $container.prepend(data);\n                initMasonry($container);\n                ieMasonryFix();\n                initSearch();\n            } else {\n                var $newItems = $(data);\n                $container.append( $newItems ).isotope( 'appended', $newItems );\n            }\n            firstRun = false;\n\n            addHoverState();                            \n            smartResize();\n\n            alert(totalEpiPageCount); // THIS OUTPUTS THE CORRECT PAGE TOTAL\n        }\n</code></pre>\n\n<p>Be it as it may, I hope this helps others! If anyone has a \"less-hacky\" version or best-practise example I'm all ears.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How do I access PHP variables in JavaScript or jQuery? Do I have to write </p>\n\n<pre><code>&lt;?php echo $variable1 ?&gt;\n&lt;?php echo $variable2 ?&gt;\n&lt;?php echo $variable3 ?&gt;\n...\n&lt;?php echo $variablen ?&gt;\n</code></pre>\n\n<p>I know I can store some variables in cookies, and access these values via cookies, but values in cookies are relatively stable values. Moreover, there is a limit, you can not store many values in cookies, and the method is not that convenient. Is there a better way to do it?</p>\n",
            "last_activity_date": 1360391059,
            "question_id": 1808108,
            "score": 17,
            "tags": [
                "php",
                "javascript",
                "jquery"
            ],
            "title": "How to access PHP variables in JavaScript or jQuery rather than &lt;?php echo $variable ?&gt;"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>The answer on your question depend a little from the source where you receive the information about displayed under \"State for US\" and \"State for UK\". The are two possibilities supported by jqGrid: 1) the usage of <code>value</code> parameter of <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3acommon_rules#editoptions\">editoptions</a> 2) the usage of <code>dataUrl</code> and <code>buildSelect</code> parameter of the <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3acommon_rules#editoptions\">editoptions</a>. The first way is the best one in case of local editing or in the case if the list of possible options is static. The second choose will be used in the case, that the information about states, countries and the states of some country will be get per AJAX request from the database. I describe the solution on the example the usage of <code>value</code> parameter to have no dependencies to the server components. The most parts on the implementation are the same in case of the usage of <code>dataUrl</code> and <code>buildSelect</code>.</p>\n\n<p>I made <a href=\"http://www.ok-soft-gmbh.com/jqGrid/DependendSelects1.htm\">the live example</a> which demonstrate what you need.</p>\n\n<p>The main problem is that the <code>value</code> of the <code>editoptions</code> are used <strong>only once</strong> at the time on the initialization. Inside of <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3acommon_rules#editoptions\">dataInit</a> function one can overwrite the <code>value</code>, but after the changing of the value in the first select/drop-down box with countries the second select/drop-down box with states must be rebuild manually. To do so one have to understand, that the select HTML element has id constructed from row id '_' and the column name: rowId + \"_State\". Moreover it is important, that the the <code>value</code> of the <code>editoptions</code> must be reset to the initial value, so that any state id can be decoded to the state name.</p>\n\n<p>Here is the code from <a href=\"http://www.ok-soft-gmbh.com/jqGrid/DependendSelects1.htm\">the example</a>:</p>\n\n<pre><code>var countries = { '1': 'US', '2': 'UK' };\nvar states = { '1': 'Alabama', '2': 'California', '3': 'Florida', '4': 'Hawaii', '5': 'London', '6': 'Oxford' };\nvar statesOfCountry = {\n    1: { '1': 'Alabama', '2': 'California', '3': 'Florida', '4': 'Hawaii' },\n    2: { '5': 'London', '6': 'Oxford' }\n};\nvar mydata = [\n    { id: '0', Country: '1', State: '1', Name: \"Louise Fletcher\" },\n    { id: '1', Country: '1', State: '3', Name: \"Jim Morrison\" },\n    { id: '2', Country: '2', State: '5', Name: \"Sherlock Holmes\" },\n    { id: '3', Country: '2', State: '6', Name: \"Oscar Wilde\" }\n];\n\nvar lastSel = -1;\nvar grid = jQuery(\"#list\");\nvar resetStatesValues = function () {\n    grid.setColProp('State', { editoptions: { value: states} });\n};\ngrid.jqGrid({\n    data: mydata,\n    datatype: 'local',\n    colModel: [\n        { name: 'Name', width: 200 },\n        { name: 'Country', width: 100, editable: true, formatter: 'select',\n            edittype: 'select', editoptions: {\n                value: countries,\n                dataInit: function (elem) {\n                    var v = $(elem).val();\n                    // to have short list of options which corresponds to the country\n                    // from the row we have to change temporary the column property\n                    grid.setColProp('State', { editoptions: { value: statesOfCountry[v]} });\n                },\n                dataEvents: [\n                    {\n                        type: 'change',\n                        fn: function(e) {\n                            // To be able to save the results of the current selection\n                            // the value of the column property must contain at least\n                            // the current selected 'State'. So we have to reset\n                            // the column property to the following\n                            //grid.setColProp('State', { editoptions:{value: statesOfCountry[v]} });\n                            //grid.setColProp('State', { editoptions: { value: states} });\n                            resetStatesValues();\n\n                            // build 'State' options based on the selected 'Country' value\n                            var v = parseInt($(e.target).val(), 10);\n                            var sc = statesOfCountry[v];\n                            var newOptions = '';\n                            for (var stateId in sc) {\n                                if (sc.hasOwnProperty(stateId)) {\n                                    newOptions += '&lt;option role=\"option\" value=\"' +\n                                                  stateId + '\"&gt;' +\n                                                  states[stateId] + '&lt;/option&gt;';\n                                }\n                            }\n\n                            // populate the new\n                            if ($(e.target).is('.FormElement')) {\n                                // form editing\n                                var form = $(e.target).closest('form.FormGrid');\n                                $(\"select#State.FormElement\", form[0]).html(newOptions);\n                            } else {\n                                // inline editing\n                                var row = $(e.target).closest('tr.jqgrow');\n                                var rowId = row.attr('id');\n                                $(\"select#\" + rowId + \"_State\", row[0]).html(newOptions);\n                            }\n                        }\n                    }\n                ]\n            }\n        },\n        {\n            name: 'State', width: 100, editable: true, formatter: 'select',\n            edittype: 'select', editoptions: { value: states }\n        }\n    ],\n    onSelectRow: function (id) {\n        if (id &amp;&amp; id !== lastSel) {\n            if (lastSel != -1) {\n                resetStatesValues();\n                grid.restoreRow(lastSel);\n            }\n            lastSel = id;\n        }\n    },\n    ondblClickRow: function (id, ri, ci) {\n        if (id &amp;&amp; id !== lastSel) {\n            grid.restoreRow(lastSel);\n            lastSel = id;\n        }\n        resetStatesValues();\n        grid.editRow(id, true, null, null, 'clientArray', null,\n                        function (rowid, response) {  // aftersavefunc\n                            grid.setColProp('State', { editoptions: { value: states} });\n                        });\n        return;\n    },\n    editurl: 'clientArray',\n    sortname: 'Name',\n    height: '100%',\n    viewrecords: true,\n    rownumbers: true,\n    sortorder: \"desc\",\n    pager: '#pager',\n    caption: \"Demonstrate dependend select/dropdown lists (edit on double-click)\"\n}).jqGrid('navGrid','#pager', \n          { edit: true, add: true, del: false, search: false, refresh: false },\n          { // edit options\n              recreateForm:true,\n              onClose:function() {\n                  resetStatesValues();\n              }\n          },\n          { // add options\n              recreateForm:true,\n              onClose:function() {\n                  resetStatesValues();\n              }\n          });\n</code></pre>\n\n<p><strong>UPDATED</strong>: I updated the code above to make it working with in case of form editing too. You can see it live <a href=\"http://www.ok-soft-gmbh.com/jqGrid/DependendSelects2.htm\">here</a>. Because jqGrid not support local editing for form editing I could not tested the code. Nevertheless I hope that I made the most of required changes.</p>\n\n<p><strong>UPDATED 2</strong>: I extended the above code to support</p>\n\n<ol>\n<li>Inline editing, Form editing, Searching Toolbar and Advanced Searching</li>\n<li>The previous or next navigation buttons in the editing form</li>\n<li>Improving keyboard support in selects (problem with refreshing dependent select in some browsers are fixed)</li>\n</ol>\n\n<p>The new version of the demo is <a href=\"http://www.ok-soft-gmbh.com/jqGrid/EditWithDependendSelects2.htm\">here</a>. The modified code of the demo you find below:</p>\n\n<pre><code>var countries = { '1': 'US', '2': 'UK' },\n    //allCountries = {'': 'All', '1': 'US', '2': 'UK'},\n    // we use string form of allCountries to have control on the order of items\n    allCountries = ':All;1:US;2:UK',\n    states = { '1': 'Alabama', '2': 'California', '3': 'Florida', '4': 'Hawaii', '5': 'London', '6': 'Oxford' },\n    allStates = ':All;1:Alabama;2:California;3:Florida;4:Hawaii;5:London;6:Oxford',\n    statesOfUS = { '1': 'Alabama', '2': 'California', '3': 'Florida', '4': 'Hawaii' },\n    statesOfUK = { '5': 'London', '6': 'Oxford' },\n    // the next maps contries by ids to states\n    statesOfCountry = { '': states, '1': statesOfUS, '2': statesOfUK },\n    mydata = [\n        { id: '0', country: '1', state: '1', name: \"Louise Fletcher\" },\n        { id: '1', country: '1', state: '3', name: \"Jim Morrison\" },\n        { id: '2', country: '2', state: '5', name: \"Sherlock Holmes\" },\n        { id: '3', country: '2', state: '6', name: \"Oscar Wilde\" }\n    ],\n    lastSel = -1,\n    grid = $(\"#list\"),\n    removeAllOption = function (elem) {\n        if (typeof elem === \"object\" &amp;&amp; typeof elem.id === \"string\" &amp;&amp; elem.id.substr(0, 3) !== \"gs_\") {\n            // in the searching bar\n            $(elem).find('option[value=\"\"]').remove();\n        }\n    },\n    resetStatesValues = function () {\n        // set 'value' property of the editoptions to initial state\n        grid.jqGrid('setColProp', 'state', { editoptions: { value: states} });\n    },\n    setStateValues = function (countryId) {\n        // to have short list of options which corresponds to the country\n        // from the row we have to change temporary the column property\n        grid.jqGrid('setColProp', 'state', { editoptions: { value: statesOfCountry[countryId]} });\n    },\n    changeStateSelect = function (countryId, countryElem) {\n        // build 'state' options based on the selected 'country' value\n        var stateId, stateSelect, parentWidth, $row,\n            $countryElem = $(countryElem),\n            sc = statesOfCountry[countryId],\n            isInSearchToolbar = $countryElem.parent().parent().parent().hasClass('ui-search-toolbar'),\n                              //$(countryElem).parent().parent().hasClass('ui-th-column')\n            newOptions = isInSearchToolbar ? '&lt;option value=\"\"&gt;All&lt;/option&gt;' : '';\n\n        for (stateId in sc) {\n            if (sc.hasOwnProperty(stateId)) {\n                newOptions += '&lt;option role=\"option\" value=\"' + stateId + '\"&gt;' +\n                    states[stateId] + '&lt;/option&gt;';\n            }\n        }\n\n        setStateValues(countryId);\n\n        // populate the subset of contries\n        if (isInSearchToolbar) {\n            // searching toolbar\n            $row = $countryElem.closest('tr.ui-search-toolbar');\n            stateSelect = $row.find(\"&gt;th.ui-th-column select#gs_state\");\n            parentWidth = stateSelect.parent().width();\n            stateSelect.html(newOptions).css({width: parentWidth});\n        } else if ($countryElem.is('.FormElement')) {\n            // form editing\n            $countryElem.closest('form.FormGrid').find(\"select#state.FormElement\").html(newOptions);\n        } else {\n            // inline editing\n            $row = $countryElem.closest('tr.jqgrow');\n            $(\"select#\" + $.jgrid.jqID($row.attr('id')) + \"_state\").html(newOptions);\n        }\n    },\n    editGridRowOptions = {\n        recreateForm: true,\n        onclickPgButtons: function (whichButton, $form, rowid) {\n            var $row = $('#' + $.jgrid.jqID(rowid)), countryId;\n            if (whichButton === 'next') {\n                $row = $row.next();\n            } else if (whichButton === 'prev') {\n                $row = $row.prev();\n            }\n            if ($row.length &gt; 0) {\n                countryId = grid.jqGrid('getCell', $row.attr('id'), 'country');\n                changeStateSelect(countryId, $(\"#country\")[0]);\n            }\n        },\n        onClose: function () {\n            resetStatesValues();\n        }\n    };\n\ngrid.jqGrid({\n    data: mydata,\n    datatype: 'local',\n    colModel: [\n        { name: 'name', width: 200, editable: true },\n        { name: 'country', width: 100, editable: true, formatter: 'select', stype: 'select', edittype: 'select',\n            searchoptions: {\n                value: allCountries,\n                dataInit: function (elem) { removeAllOption(elem); },\n                dataEvents: [\n                    { type: 'change', fn: function (e) { changeStateSelect($(e.target).val(), e.target); } },\n                    { type: 'keyup', fn: function (e) { $(e.target).trigger('change'); } }\n                ]\n            },\n            editoptions: {\n                value: countries,\n                dataInit: function (elem) { setStateValues($(elem).val()); },\n                dataEvents: [\n                    { type: 'change', fn: function (e) { changeStateSelect($(e.target).val(), e.target); } },\n                    { type: 'keyup', fn: function (e) { $(e.target).trigger('change'); } }\n                ]\n            }},\n        { name: 'state', width: 100, formatter: 'select', stype: 'select',\n            editable: true, edittype: 'select', editoptions: { value: states },\n            searchoptions: { value: allStates, dataInit: function (elem) { removeAllOption(elem); } } }\n    ],\n    onSelectRow: function (id) {\n        if (id &amp;&amp; id !== lastSel) {\n            if (lastSel !== -1) {\n                $(this).jqGrid('restoreRow', lastSel);\n                resetStatesValues();\n            }\n            lastSel = id;\n        }\n    },\n    ondblClickRow: function (id) {\n        if (id &amp;&amp; id !== lastSel) {\n            $(this).jqGrid('restoreRow', lastSel);\n            lastSel = id;\n        }\n        resetStatesValues();\n        $(this).jqGrid('editRow', id, {\n            keys: true,\n            aftersavefunc: function () {\n                resetStatesValues();\n            },\n            afterrestorefunc: function () {\n                resetStatesValues();\n            }\n        });\n        return;\n    },\n    editurl: 'clientArray',\n    sortname: 'name',\n    ignoreCase: true,\n    height: '100%',\n    viewrecords: true,\n    rownumbers: true,\n    sortorder: \"desc\",\n    pager: '#pager',\n    caption: \"Demonstrate dependend select/dropdown lists (inline editing on double-click)\"\n});\ngrid.jqGrid('navGrid', '#pager', { del: false }, editGridRowOptions, editGridRowOptions);\ngrid.jqGrid('filterToolbar', {stringResult: true, searchOnEnter: true, defaultSearch : \"cn\"});\n</code></pre>\n\n<p><strong>UPDATED 3</strong>: The last version of the code of the demo you will find <a href=\"http://www.ok-soft-gmbh.com/jqGrid/EditWithDependendSelects2_.htm\">here</a>.</p>\n",
                    "is_accepted": true,
                    "score": 28
                }
            ],
            "body": "<p>I am using form edit. There are two select boxes in the form. One select box is the country, another select box is the state. The state select box depends on the country selected and will be populated dynamically. For example:</p>\n\n<p>Country:<br/>\nUS (option value=1)<br/>\nUK (option value=2)</p>\n\n<p>State for US:<br/>\nAlabama (option value=1)<br/>\nCalifornia (option value=2)<br/>\nFlorida (option value=3)<br/>\nHawaii (option value=4)</p>\n\n<p>State for UK:<br/>\nLondon (option value=5)<br/>\nOxford (option value=6)</p>\n\n<p>As you can see above the id of state for uk starts with 5. When I edit a record which contained Country id=2 (UK) and State id=6 (Oxford), the edit form will shows correctly - Country is UK and State is Oxford. But if you drop down the state select box the option text is correct (it shows London Oxford) but the option value will starts from 0. What should be correct is that the option value should starts from 5.</p>\n\n<p>If you select and change the country drop down box to US then change back again to UK, the option value will be populated correct (starts from 5).</p>\n\n<p>My question is, how can we populate the select box for the state with the correct option value based on the country in edit box when the edit form loads?</p>\n\n<p>Thanks.</p>\n",
            "last_activity_date": 1361393528,
            "question_id": 4469650,
            "score": 9,
            "tags": [
                "javascript",
                "jquery",
                "jqgrid",
                "edit"
            ],
            "title": "jqgrid incorrect select drop down option values in edit box"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Not built-in to Javascript itself. Some of the common Javascript frameworks (such as Prototype) provide an implementation, or you can write your own.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The <a href=\"http://mochi.github.com/mochikit/\" rel=\"nofollow\">Mochikit</a> library provides this and many other Python-like functions. developer of Mochikit is also a Python fan, so it has the general style of Python, and also the wraps the async calls in a twisted-like framework.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I took a run at this in pure JS wondering how the plugins posted above got the job done. Here's my result. I'll preface this by saying that I have no idea how stable this will be in IE and the like. It's just a quick mockup.</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>init();\r\n\r\nfunction init() {\r\n    var one = [0, 1, 2, 3];\r\n    var two = [4, 5, 6, 7];\r\n    var three = [8, 9, 10, 11, 12];\r\n    var four = zip(one, two, one);\r\n    //returns array\r\n    //four = zip(one, two, three);\r\n    //returns false since three.length !== two.length\r\n    console.log(four);\r\n}\r\n\r\nfunction zip() {\r\n    for (var i = 0; i &lt; arguments.length; i++) {\r\n        if (!arguments[i].length || !arguments.toString()) {\r\n            return false;\r\n        }\r\n        if (i &gt;= 1) {\r\n            if (arguments[i].length !== arguments[i - 1].length) {\r\n                return false;\r\n            }\r\n        }\r\n    }\r\n    var zipped = [];\r\n    for (var j = 0; j &lt; arguments[0].length; j++) {\r\n        var toBeZipped = [];\r\n        for (var k = 0; k &lt; arguments.length; k++) {\r\n            toBeZipped.push(arguments[k][j]);\r\n        }\r\n        zipped.push(toBeZipped);\r\n    }\r\n    return zipped;\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p>It's not bulletproof, but it's still interesting.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h1>Check out the library <a href=\"http://underscorejs.org/\" rel=\"nofollow\">Underscore</a></h1>\n\n<h3>\"Underscore provides over 100 functions that support both your favorite workaday functional helpers: map, filter, invoke \u2014 as well as more specialized goodies: function binding, javascript templating, creating quick indexes, deep equality testing, and so on.\" - Say the people who made it!</h3>\n\n<p>I recently started using it specifically for the <a href=\"http://underscorejs.org/#zip\" rel=\"nofollow\"><code>zip()</code></a> function and it has left a great first impression.  I am using jQuery and CoffeeScript, and it just goes perfectly with them.  Underscore picks up right where they leave off and so far it hasn't let me down.  Oh by the way, it's only 3kb minified.</p>\n\n<p>Check it out.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>Here's a oneliner:</p>\n\n<pre><code>function zip(arrays) {\n    return arrays[0].map(function(_,i){\n        return arrays.map(function(array){return array[i]})\n    });\n}\n\n// &gt; zip([[1,2],[11,22],[111,222]])\n// [[1,11,111],[2,22,222]]]\n\n// If you believe the following is a valid return value:\n//   &gt; zip([])\n//   []\n// then you can special-case it, or just do\n//  return arrays.length==0 ? [] : arrays[0].map(...)\n</code></pre>\n\n<hr>\n\n<p>The above assumes that the arrays are of equal size, as they should be. It also assumes you pass in a single list of lists argument, unlike python's version where the argument list is variadic. <strong>If you want all of these</strong> \"features\", see below. It takes just about 2 extra lines of code.</p>\n\n<p>The following will mimic python's <code>zip</code> behavior on edge cases where the arrays are not of equal size, silently pretending the longer parts of arrays don't exist:</p>\n\n<pre><code>function zip() {\n    var args = [].slice.call(arguments);\n    var shortest = args.length==0 ? [] : args.reduce(function(a,b){\n        return a.length&lt;b.length ? a : b\n    });\n\n    return shortest.map(function(_,i){\n        return args.map(function(array){return array[i]})\n    });\n}\n\n// &gt; zip([1,2],[11,22],[111,222,333])\n// [[1,11,111],[2,22,222]]]\n\n// &gt; zip()\n// []\n</code></pre>\n\n<p>This will mimic python's <code>itertools.zip_longest</code> behavior, inserting <code>undefined</code> where arrays are not defined:</p>\n\n<pre><code>function zip() {\n    var args = [].slice.call(arguments);\n    var longest = args.reduce(function(a,b){\n        return a.length&gt;b.length ? a : b\n    }, []);\n\n    return longest.map(function(_,i){\n        return args.map(function(array){return array[i]})\n    });\n}\n\n// &gt; zip([1,2],[11,22],[111,222,333])\n// [[1,11,111],[2,22,222],[null,null,333]]\n\n// &gt; zip()\n// []\n</code></pre>\n\n<p>If you use these last two version (variadic aka. multiple-argument versions), then zip is no longer its own inverse. To mimic the <code>zip(*[...])</code> idiom from python, you will need to do <code>zip.apply(this, [...])</code> when you want to invert the zip function or if you want to similarly have a variable number of lists as input.</p>\n\n<hr>\n\n<p><strong>addendum</strong>:</p>\n\n<p>To make this handle any iterable (e.g. in python you can use <code>zip</code> on strings, ranges, map objects, etc.), you could define the following:</p>\n\n<pre><code>function iterView(iterable) {\n    // returns an array equivalent to the iterable\n}\n</code></pre>\n\n<p>However if you write <code>zip</code> in the following <a href=\"http://stackoverflow.com/a/13735425/711085\">way</a>, even that won't be necessary:</p>\n\n<pre><code>function zip(arrays) {\n    return Array.apply(null,Array(arrays[0].length)).map(function(_,i){\n        return arrays.map(function(array){return array[i]})\n    });\n}\n</code></pre>\n\n<p>Demo:</p>\n\n<pre><code>&gt; JSON.stringify( zip(['abcde',[1,2,3,4,5]]) )\n[[\"a\",1],[\"b\",2],[\"c\",3],[\"d\",4],[\"e\",5]]\n</code></pre>\n\n<p>(Or you could use a <code>range(...)</code> python-style function if you've written one already. Eventually you will be able to use ECMAScript array comprehensions or generators.)</p>\n",
                    "is_accepted": false,
                    "score": 61
                },
                {
                    "body": "<p>Like @Brandon, I recommend <a href=\"http://underscorejs.org\" rel=\"nofollow\">Underscore</a>'s <a href=\"http://underscorejs.org/#zip\" rel=\"nofollow\">zip</a> function. However, it acts like <code>zip_longest</code>, appending <code>undefined</code> values as needed to return something the length of the longest input. </p>\n\n<p>I used the <a href=\"http://underscorejs.org/#mixin\" rel=\"nofollow\"><code>mixin</code></a> method to extend underscore with a <code>zipShortest</code>, which acts like Python's <code>zip</code>, based off of <a href=\"http://underscorejs.org/docs/underscore.html#section-50\" rel=\"nofollow\">the library's own source for <code>zip</code></a>. </p>\n\n<p>You can add the following to your common JS code and then call it as if it were part of underscore: <code>_.zipShortest([1,2,3], ['a'])</code> returns <code>[[1, 'a']]</code>, for example.</p>\n\n<pre><code>// Underscore library addition - zip like python does, dominated by the shortest list\n//  The default injects undefineds to match the length of the longest list.\n_.mixin({\n    zipShortest : function() {\n        var args = Array.Prototype.slice.call(arguments);\n        var length = _.min(_.pluck(args, 'length')); // changed max to min\n        var results = new Array(length);\n        for (var i = 0; i &lt; length; i++) {\n            results[i] = _.pluck(args, \"\" + i);\n        }\n        return results;\n}});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In addition to ninjagecko's excellent and comprehensive answer, all it takes to zip two JS-arrays into a \"tuple-mimic\" is:</p>\n\n<pre><code>//Arrays: aIn, aOut\nArray.prototype.map( aIn, function(e,i){return [e, aOut[i];]})\n</code></pre>\n\n<p><strong>Explanation:</strong><br>\nSince Javascript doesn't have a <code>tuples</code> type, functions for tuples, lists and sets wasn't a high priority in the language specification.<br>\nOtherwise, similar behavior is accessible in a straightforward manner via <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array map in JS >1.6</a>. (<code>map</code> is actually often implemented by JS engine makers in many >JS 1.4 engines, despite not specified).<br>\nThe major difference to Python's <code>zip</code>, <code>izip</code>,... results from <code>map</code>'s functional style, since <code>map</code> requires a function-argument. Additionally it is a function of the <code>Array</code>-instance. One may use <code>Array.prototype.map</code> instead, if an extra declaration for the input is an issue.</p>\n\n<p><strong>Example:</strong></p>\n\n<pre><code>_tarrin = [0..constructor, function(){}, false, undefined, '', 100, 123.324,\n         2343243243242343242354365476453654625345345, 'sdf23423dsfsdf',\n         'sdf2324.234dfs','234,234fsf','100,100','100.100']\n_parseInt = function(i){return parseInt(i);}\n_tarrout = _tarrin.map(_parseInt)\n_tarrin.map(function(e,i,a){return [e, _tarrout[i]]})\n</code></pre>\n\n<p><strong>Result:</strong></p>\n\n<pre><code>//'('+_tarrin.map(function(e,i,a){return [e, _tarrout[i]]}).join('),\\n(')+')'\n&gt;&gt;\n(function Number() { [native code] },NaN),\n(function (){},NaN),\n(false,NaN),\n(,NaN),\n(,NaN),\n(100,100),\n(123.324,123),\n(2.3432432432423434e+42,2),\n(sdf23423dsfsdf,NaN),\n(sdf2324.234dfs,NaN),\n(234,234fsf,234),\n(100,100,100),\n(100.100,100)\n</code></pre>\n\n<p><strong>Related Performance:</strong></p>\n\n<p>Using <code>map</code> over <code>for</code>-loops:</p>\n\n<p>See: <a href=\"http://stackoverflow.com/questions/10293378/what-is-the-most-efficient-way-of-merging-1-2-and-7-8-into-1-7-2-8/17910641#17910641\">What is the most efficient way of merging [1,2] and [7,8] into [[1,7], [2,8]]</a></p>\n\n<p><img src=\"http://i.stack.imgur.com/PMbz0.png\" alt=\"zip tests\"></p>\n\n<p><strong>Note:</strong> the base types such as <code>false</code> and <code>undefined</code> do not posess a prototypal object-hierarchy and thus do not expose a <code>toString</code> function. Hence these are shown as empty in the output.<br>\nAs <code>parseInt</code>'s second argument is the base/number radix, to which to convert the number to, and since <code>map</code> passes the index as the second argument to its argument-function, a wrapper function is used.</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>Is there a javascript equivalent of Python's zip function?  That is, given two arrays of equal lengths create an array of pairs.</p>\n\n<p>For instance, if I have three arrays that look like this:</p>\n\n<pre><code>var array1 = [1, 2, 3];\nvar array2 = ['a','b','c'];\nvar array3 = [4, 5, 6];\n</code></pre>\n\n<p>The output array should be:</p>\n\n<pre><code>var output array:[[1,'a',4], [2,'b',5], [3,'c',6]]\n</code></pre>\n",
            "last_activity_date": 1424714243,
            "question_id": 4856717,
            "score": 65,
            "tags": [
                "javascript",
                "python",
                "functional-programming"
            ],
            "title": "Javascript equivalent of Python&#39;s zip function"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Since this question appears to be answered by incorrect answers, I'll just refer to the correct answer from <a href=\"http://stackoverflow.com/questions/6842795/dynamic-deep-setting-for-a-javascript-object\">a similar question</a></p>\n\n<pre><code>function setDeepValue(obj, value, path) {\n    if (typeof path === \"string\") {\n        var path = path.split('.');\n    }\n\n    if(path.length &gt; 1){\n        var p=path.shift();\n        if(obj[p]==null || typeof obj[p]!== 'object'){\n             obj[p] = {};\n        }\n        setDeepValue(obj[p], value, path);\n    }else{\n        obj[path[0]] = value;\n    }\n}\n</code></pre>\n\n<p>Use:</p>\n\n<pre><code>var obj = {};\nsetDeepValue(obj, 'Hello World', 'foo.bar.foobar');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>function assign(obj, prop, value) {\n    if (typeof prop === \"string\")\n        prop = prop.split(\".\");\n\n    if (prop.length &gt; 1) {\n        var e = prop.shift();\n        assign(obj[e] =\n                 Object.prototype.toString.call(obj[e]) === \"[object Object]\"\n                 ? obj[e]\n                 : {},\n               prop,\n               value);\n    } else\n        obj[prop[0]] = value;\n}\n\nvar obj = {},\n    propName = \"foo.bar.foobar\";\n\nassign(obj, propName, \"Value\");\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 23
                },
                {
                    "body": "<p>edit: I've created a <a href=\"http://jsperf.com/nested-object-assignment\" rel=\"nofollow\">jsPerf.com testcase</a> to compare the accepted answer with my version.\nTurns out that my version is faster, especially when you go very deep.</p>\n\n<p><a href=\"http://jsfiddle.net/gcFgf/\" rel=\"nofollow\">http://jsfiddle.net/9YMm8/</a></p>\n\n<pre><code>var nestedObjectAssignmentFor = function(obj, propString, value) {\n    var propNames = propString.split('.'),\n        propLength = propNames.length-1,\n        tmpObj = obj;\n\n    for (var i = 0; i &lt;= propLength ; i++) {\n        tmpObj = tmpObj[propNames[i]] = i !== propLength ?  {} : value;  \n    }\n    return obj;\n}\n\nvar obj = nestedObjectAssignment({},\"foo.bar.foobar\",\"hello world\");\n</code></pre>\n\n<p>\u200b</p>\n\n<p>\u200b</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is a get and set function i just compiled from a couple of threads + some custom code.</p>\n\n<p>It will also create keys that don't exist on set.</p>\n\n<pre><code>function setValue(object, path, value) {\n    var a = path.split('.');\n    var o = object;\n    for (var i = 0; i &lt; a.length - 1; i++) {\n        var n = a[i];\n        if (n in o) {\n            o = o[n];\n        } else {\n            o[n] = {};\n            o = o[n];\n        }\n    }\n    o[a[a.length - 1]] = value;\n}\n\nfunction getValue(object, path) {\n    var o = object;\n    path = path.replace(/\\[(\\w+)\\]/g, '.$1');\n    path = path.replace(/^\\./, '');\n    var a = path.split('.');\n    while (a.length) {\n        var n = a.shift();\n        if (n in o) {\n            o = o[n];\n        } else {\n            return;\n        }\n    }\n    return o;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>All solutions overid any of the original data when setting so I have tweaked with the following, made it into a single object too:</p>\n\n<pre><code> var obj = {}\n nestObject.set(obj, \"a.b\", \"foo\"); \n nestObject.get(obj, \"a.b\"); // returns foo     \n\n var nestedObject = {\n     set: function(obj, propString, value) {\n         var propNames = propString.split('.'),\n             propLength = propNames.length-1,\n             tmpObj = obj;\n         for (var i = 0; i &lt;= propLength ; i++) {\n             if (i === propLength){\n                 if(tmpObj[propNames[i]]){\n                     tmpObj[propNames[i]] = value;\n                 }else{\n                     tmpObj[propNames[i]] = value;\n                 }\n             }else{\n                 if(tmpObj[propNames[i]]){\n                     tmpObj = tmpObj[propNames[i]];\n                 }else{\n                     tmpObj = tmpObj[propNames[i]] = {};\n                 }\n             }\n         }\n         return obj;\n     },\n     get: function(obj, propString){\n         var propNames = propString.split('.'),\n             propLength = propNames.length-1,\n             tmpObj = obj;\n         for (var i = 0; i &lt;= propLength ; i++) {\n             if(tmpObj[propNames[i]]){\n                 tmpObj = tmpObj[propNames[i]];\n             }else{\n                 break;\n             }\n         }\n         return tmpObj;\n     }\n };\n</code></pre>\n\n<p>Can also change functions to be an Oject.prototype method changing obj param to this:</p>\n\n<pre><code>Object.prototype = { setNested = function(){ ... }, getNested = function(){ ... } } \n\n{}.setNested('a.c','foo') \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "\n\n<p>Suppose we are only given</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var obj = {};\nvar propName = \"foo.bar.foobar\";\n</code></pre>\n\n<p>How can we set the property <code>obj.foo.bar.foobar</code> to a certain value (say \"hello world\")?\nSo I want to achieve this, while we only have the property name in a string:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>obj.foo.bar.foobar = \"hello world\";\n</code></pre>\n",
            "last_activity_date": 1409970339,
            "question_id": 13719593,
            "score": 14,
            "tags": [
                "javascript",
                "string",
                "properties",
                "nested"
            ],
            "title": "How to set object property (of object property of..) given its string name in JavaScript?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>If we split it up, the mess is equal to:</p>\n\n<pre><code>++[[]][+[]]\n+\n[+[]]\n</code></pre>\n\n<p>In JavaScript, it is true that <code>+[] === 0</code>. <code>+</code> converts something into a number, and in this case it will come down to <code>+\"\"</code> or <code>0</code> (see specification details below).</p>\n\n<p>Therefore, we can simplify it (<code>++</code> has precendence over <code>+</code>):</p>\n\n<pre><code>++[[]][0]\n+\n[0]\n</code></pre>\n\n<p>Because <code>[[]][0]</code> means: get the first element from <code>[[]]</code>, it is true that:</p>\n\n<ul>\n<li><code>[[]][0]</code> returns the inner array (<code>[]</code>). Due to references it's wrong to say <code>[[]][0] === []</code>, but let's call the inner array <code>A</code> to avoid the wrong notation.</li>\n<li><code>++[[]][0] == A + 1</code>, since <code>++</code> means 'increment by one'.</li>\n<li><code>++[[]][0] === +(A + 1)</code>; in other words, it will always be a number (<code>+1</code> does not necessarily return a number, whereas <code>++</code> always does - thanks to Tim Down for pointing this out).</li>\n</ul>\n\n<p>Again, we can simplify the mess into something more legible. Let's substitute <code>[]</code> back for <code>A</code>:</p>\n\n<pre><code>+([] + 1)\n+\n[0]\n</code></pre>\n\n<p>In JavaScript, this is true as well: <code>[] + 1 === \"1\"</code>,  because <code>[] == \"\"</code> (joining an empty array), so:</p>\n\n<ul>\n<li><code>+([] + 1) === +(\"\" + 1)</code>, and</li>\n<li><code>+(\"\" + 1) === +(\"1\")</code>, and</li>\n<li><code>+(\"1\") === 1</code></li>\n</ul>\n\n<p>Let's simplify it even more:</p>\n\n<pre><code>1\n+\n[0]\n</code></pre>\n\n<p>Also, this is true in JavaScript: <code>[0] == \"0\"</code>, because it's joining an array with one element. Joining will concatenate the elements separated by <code>,</code>. With one element, you can deduce that this logic will result in the first element itself.</p>\n\n<p>So, in the end we obtain (number + string = string):</p>\n\n<pre><code>1\n+\n\"0\"\n\n=== \"10\" // Yay!\n</code></pre>\n\n<hr>\n\n<p>Specification details for <code>+[]</code>:</p>\n\n<p>This is quite a maze, but to do <code>+[]</code>, first it is being converted to a string because that's what <code>+</code> says:</p>\n\n<blockquote>\n  <p>11.4.6 Unary + Operator</p>\n  \n  <p>The unary + operator converts its operand to Number type.</p>\n  \n  <p>The production UnaryExpression : + UnaryExpression is evaluated as follows:</p>\n  \n  <ol>\n  <li><p>Let expr be the result of evaluating UnaryExpression.</p></li>\n  <li><p>Return ToNumber(GetValue(expr)).</p></li>\n  </ol>\n</blockquote>\n\n<p><code>ToNumber()</code> says:</p>\n\n<blockquote>\n  <p>Object</p>\n  \n  <p>Apply the following steps:</p>\n  \n  <ol>\n  <li><p>Let primValue be ToPrimitive(input argument, hint String).</p></li>\n  <li><p>Return ToString(primValue).</p></li>\n  </ol>\n</blockquote>\n\n<p><code>ToPrimitive()</code> says:</p>\n\n<blockquote>\n  <p>Object</p>\n  \n  <p>Return a default value for the Object. The default value of an object is retrieved by calling the [[DefaultValue]] internal method of the object, passing the optional hint PreferredType. The behaviour of the [[DefaultValue]] internal method is defined by this specification for all native ECMAScript objects in 8.12.8.</p>\n</blockquote>\n\n<p><code>[[DefaultValue]]</code> says:</p>\n\n<blockquote>\n  <p>8.12.8 [[DefaultValue]] (hint)</p>\n  \n  <p>When the [[DefaultValue]] internal method of O is called with hint String, the following steps are taken:</p>\n  \n  <ol>\n  <li><p>Let toString be the result of calling the [[Get]] internal method of object O with argument \"toString\".</p></li>\n  <li><p>If IsCallable(toString) is true then,</p></li>\n  </ol>\n  \n  <p>a. Let str be the result of calling the [[Call]] internal method of toString, with O as the this value and an empty argument list.</p>\n  \n  <p>b. If str is a primitive value, return str.</p>\n</blockquote>\n\n<p>The <code>.toString</code> of an array says:</p>\n\n<blockquote>\n  <p>15.4.4.2 Array.prototype.toString ( )</p>\n  \n  <p>When the toString method is called, the following steps are taken:</p>\n  \n  <ol>\n  <li><p>Let array be the result of calling ToObject on the this value.</p></li>\n  <li><blockquote>\n    <p>Let func be the result of calling the [[Get]] internal method of array with argument \"join\".</p>\n  </blockquote></li>\n  <li><p>If IsCallable(func) is false, then let func be the standard built-in method Object.prototype.toString (15.2.4.2).</p></li>\n  <li><p>Return the result of calling the [[Call]] internal method of func providing array as the this value and an empty arguments list.</p></li>\n  </ol>\n</blockquote>\n\n<p>So <code>+[]</code> comes down to <code>+\"\"</code>, because <code>[].join() === \"\"</code>.</p>\n\n<p>Again, the <code>+</code> is defined as:</p>\n\n<blockquote>\n  <p>11.4.6 Unary + Operator</p>\n  \n  <p>The unary + operator converts its operand to Number type.</p>\n  \n  <p>The production UnaryExpression : + UnaryExpression is evaluated as follows:</p>\n  \n  <ol>\n  <li><p>Let expr be the result of evaluating UnaryExpression.</p></li>\n  <li><p>Return ToNumber(GetValue(expr)).</p></li>\n  </ol>\n</blockquote>\n\n<p><code>ToNumber</code> is defined for <code>\"\"</code> as:</p>\n\n<blockquote>\n  <p>The MV of StringNumericLiteral ::: [empty] is 0.</p>\n</blockquote>\n\n<p>So <code>+\"\" === 0</code>, and thus <code>+[] === 0</code>.</p>\n",
                    "is_accepted": true,
                    "score": 1083
                },
                {
                    "body": "<pre><code>++[[]][+[]] =&gt; 1 // [+[]] = [0], ++0 = 1\n[+[]] =&gt; [0]\n</code></pre>\n\n<p>Then we have a string concatenation</p>\n\n<pre><code>1+[0].toString() = 10\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 58
                },
                {
                    "body": "<p>+[] evaluates to 0\n[...] then summing (+ operation) it with anything converts array content to its string representation consisting of elements joined with comma.</p>\n\n<p>Anything other like taking index of array (have grater priority than + operation) is ordinal and is nothing interesting.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>The following is adapted from a <a href=\"http://tmik.co.uk/?p=672\">blog post</a> answering this question that I posted while this question was still closed. Links are to (an HTML copy of) the ECMAScript 3 spec, still the baseline for JavaScript in today's commonly used web browsers.</p>\n\n<p>First, a comment: this kind of expression is never going to show up in any (sane) production environment and is only of any use as an exercise in just how well the reader knows the dirty edges of JavaScript. The general principle that JavaScript operators implicitly convert between types is useful, as are some of the common conversions, but much of the detail in this case is not.</p>\n\n<p>The expression <code>++[[]][+[]]+[+[]]</code> may initially look rather imposing and obscure, but is actually relatively easy break down into separate expressions. Below I\u2019ve simply added parentheses for clarity; I can assure you they change nothing, but if you want to verify that then feel free to read up about the <a href=\"http://bclary.com/2004/11/07/#a-11.1.6\">grouping operator</a>. So, the expression can be more clearly written as</p>\n\n<pre><code>( ++[[]][+[]] ) + ( [+[]] )\n</code></pre>\n\n<p>Breaking this down, we can simplify by observing that <code>+[]</code> evaluates to <code>0</code>. To satisfy yourself why this is true, check out the <a href=\"http://bclary.com/2004/11/07/#a-11.4.6\">unary + operator</a> and follow the slightly tortuous trail which ends up with <a href=\"http://bclary.com/2004/11/07/#a-9.1\">ToPrimitive</a> converting the empty array into an empty string, which is then finally converted to <code>0</code> by <a href=\"http://bclary.com/2004/11/07/#a-9.3\">ToNumber</a>. We can now substitute <code>0</code> for each instance of <code>+[]</code>:</p>\n\n<pre><code>( ++[[]][0] ) + [0]\n</code></pre>\n\n<p>Simpler already. As for <code>++[[]][0]</code>, that\u2019s a combination of the <a href=\"http://bclary.com/2004/11/07/#a-11.4.4\">prefix increment operator</a> (<code>++</code>), an <a href=\"http://bclary.com/2004/11/07/#a-11.1.4\">array literal</a> defining an array with single element that is itself an empty array (<code>[[]]</code>) and a <a href=\"http://bclary.com/2004/11/07/#a-11.2.1\">property accessor</a> (<code>[0]</code>) called on the array defined by the array literal.</p>\n\n<p>So, we can simplify <code>[[]][0]</code> to just <code>[]</code> and we have <code>++[]</code>, right? In fact, this is not the case because evaluating <code>++[]</code> throws an error, which may initially seem confusing. However, a little thought about the nature of <code>++</code> makes this clear: it\u2019s used to increment a variable (e.g. <code>++i</code>) or an object property (e.g. <code>++obj.count</code>). Not only does it evaluate to a value, it also stores that value somewhere. In the case of <code>++[]</code>, it has nowhere to put the new value (whatever it may be) because there is no reference to an object property or variable to update. In spec terms, this is covered by the internal <a href=\"http://bclary.com/2004/11/07/#a-8.7.2\">PutValue</a> operation, which is called by the prefix increment operator.</p>\n\n<p>So then, what does <code>++[[]][0]</code> do? Well, by similar logic as <code>+[]</code>, the inner array is converted to <code>0</code> and this value is incremented by <code>1</code> to give us a final value of <code>1</code>. The value of property <code>0</code> in the outer array is updated to <code>1</code> and the whole expression evaluates to <code>1</code>.</p>\n\n<p>This leaves us with</p>\n\n<pre><code>1 + [0]\n</code></pre>\n\n<p>... which is a simple use of the <a href=\"http://bclary.com/2004/11/07/#a-11.6.1\">addition operator</a>. Both operands are first <a href=\"http://bclary.com/2004/11/07/#a-9.1\">converted to primitives</a> and if either primitive value is a string, string concatenation is performed, otherwise numeric addition is performed. <code>[0]</code> converts to <code>\"0\"</code>, so string concatenation is used, producing <code>\"10\"</code>.</p>\n\n<p>As a final aside, something that may not be immediately apparent is that overriding either one of the <code>toString()</code> or <code>valueOf()</code> methods of <code>Array.prototype</code> will change the result of the expression, because both are checked and used if present when converting an object into a primitive value. For example, the following</p>\n\n<pre><code>Array.prototype.toString = function() {\n  return \"foo\";\n};\n++[[]][+[]]+[+[]]\n</code></pre>\n\n<p>... produces <code>\"NaNfoo\"</code>. Why this happens is left as an exercise for the reader...</p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>This one evaluates to the same but a bit smaller</p>\n\n<pre><code>+!![]+''+(+[])\n</code></pre>\n\n<ul>\n<li>[] - is an array is converted that is converted to 0 when you add or subtract from it, so hence +[] = 0</li>\n<li>![] - evaluates to false, so hence !![] evaluates to true</li>\n<li>+!![] - converts the true to a numeric value that evaluates to true, so in this case 1</li>\n<li>+'' - appends an empty string to the expression causing the number to be converted to string</li>\n<li>+[] - evaluates to 0</li>\n</ul>\n\n<p>so is evaluates to</p>\n\n<pre><code>+(true) + '' + (0)\n1 + '' + 0\n\"10\"\n</code></pre>\n\n<p>So now you got that, try this one:</p>\n\n<pre><code>_=$=+[],++_+''+$\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<ol>\n<li>Unary plus given string converts to number </li>\n<li>Increment operator given string converts and increments by 1</li>\n<li>[] == ''. Empty String</li>\n<li><p>+'' or  +[] evaluates 0.</p>\n\n<pre><code>++[[]][+[]]+[+[]] = 10 \n++[''][0] + [0] : First part is gives zeroth element of the array which is empty string \n1+0 \n10\n</code></pre></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Let\u2019s make it simple:</p>\n\n<pre><code>++[[]][+[]]+[+[]] = 10\n\nvar a = [[]][+[]];\nvar b = [+[]];\n\n// so a == [] and b == [0]\n\n++a;\n\n// then a == 1 and b is still that array [0]\n// when you sum the var a and an array, it will sum b as a string just like that:\n\n1 + '0' = 10\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>Perhaps the shortest possible ways to evaluate an expression into \"10\" without digits are:</p>\n\n<p><code>+!+[] + [+[]]</code> // \"10\"</p>\n\n<p><code>-~[] + [+[]]</code>  // \"10\"</p>\n\n<p>//========== Explanation ==========\\\\</p>\n\n<p><code>+!+[]</code> : <code>+[]</code> Converts  to 0. <code>!0</code> converts to <code>true</code>. <code>+true</code> converts to 1.\n<code>-~[]</code> = <code>-(-1)</code> which is 1</p>\n\n<p><code>[+[]]</code> : <code>+[]</code> Converts  to 0. <code>[0]</code> is an array with a single element 0.</p>\n\n<p>Then JS evaluates the <code>1 + [0]</code>, thus <code>Number + Array</code> expression. Then the ECMA specification works: <code>+</code> operator converts both operands to a string by calling the <code>toString()/valueOf()</code> functions from the base <code>Object</code> prototype. It operates as an additive function if both operands of an expression are numbers only. The trick is that arrays easily convert their elements into a concatenated string representation.</p>\n\n<p>Some examples:</p>\n\n<pre><code>1 + {} //    \"1[object Object]\"\n1 + [] //    \"1\"\n1 + new Date() //    \"1Wed Jun 19 2013 12:13:25 GMT+0400 (Caucasus Standard Time)\"\n</code></pre>\n\n<p>There's a nice exception that two <code>Objects</code> addition results in <code>NaN</code>:</p>\n\n<pre><code>[] + []   //    \"\"\n[1] + [2] //    \"12\"\n{} + {}   //    NaN\n{a:1} + {b:2}     //    NaN\n[1, {}] + [2, {}] //    \"1,[object Object]2,[object Object]\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>This is valid and returns \"10\" in JavaScript (<a href=\"http://sla.ckers.org/forum/read.php?24,33349,33405\">more examples here</a>):</p>\n\n<pre><code>++[[]][+[]]+[+[]]\n</code></pre>\n\n<p>Why? What is happening here?</p>\n",
            "last_activity_date": 1417604293,
            "question_id": 7202157,
            "score": 661,
            "tags": [
                "javascript",
                "syntax"
            ],
            "title": "Why is ++[[]][+[]]+[+[]] = &quot;10&quot;?"
        },
        {
            "answer_count": 26,
            "answers": [
                {
                    "body": "<p>JavaScripts are only merged when you tell Rails (Sprockets, rather) to merge them.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I haven't tried this out, but it looks like the following is true:</p>\n\n<ul>\n<li><p>if you have a content_for that is javascript (e.g. with real javascript within it), sprockets would not know about it and thus this would work the same way as it does now.</p></li>\n<li><p>if you want to exclude a file from the big bundle of javascript, you would go into config/sprockets.yml file and modify the source_files accordingly.  Then, you would just include any of the files that you excluded where needed.</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This is how i solved the styling issue: <strong>(excuse the Haml)</strong></p>\n\n<pre><code>%div{:id =&gt; \"#{params[:controller].parameterize} #{params[:view]}\"}\n    = yield\n</code></pre>\n\n<p>This way i start all the page specific <strong>.css.sass</strong> files with:</p>\n\n<pre><code>#post\n  /* Controller specific code here */\n  &amp;#index\n    /* View specific code here */\n  &amp;#new\n  &amp;#edit\n  &amp;#show\n</code></pre>\n\n<p>This way you can easily avoid any clashes.\nWhen it comes to <strong>.js.coffee</strong> files you could just initialize elements like;</p>\n\n<pre><code>$('#post &gt; #edit') -&gt;\n  $('form &gt; h1').css('float', 'right')\n</code></pre>\n\n<p>Hope this helped some.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I appreciate all the answers... and I don't think they are really getting at the problem. Some of them are about styling and don't seem to relate... and others just mention <code>javascript_include_tag</code>... which I know exists (obviously...) but it would appear that the Rails 3.1 way going forward is to wrap up all of your Javascript into 1 file rather than loading individual Javascript at the bottom of each page.</p>\n\n<p>The best solution I can come up with is to wrap certain features in <code>div</code> tags with <code>id</code>s or <code>class</code>es. In the javascript code. Then you just check if the <code>id</code> or <code>class</code> is on the page, and if it is, you run the javascript code that is associated with it. This way if the dynamic element is not on the page, the javascript code doesn't run - even though it's been included in the massive <code>application.js</code> file packaged by Sprockets.</p>\n\n<p>My above solution has the benefit that if a search box is included on 8 of the 100 pages, it will run on only those 8 pages. You also won't have to include the same code on 8 of the pages on the site. In fact, you'll never have to include manual script tags on your site anywhere ever again - except to maybe preload data.</p>\n\n<p>I think this is the actual answer to my question.</p>\n",
                    "is_accepted": true,
                    "score": 15
                },
                {
                    "body": "<p>Another option: to create page- or model-specific files, you could create directories inside your <code>assets/javascripts/</code> folder.</p>\n\n<pre><code>assets/javascripts/global/\nassets/javascripts/cupcakes\nassets/javascripts/something_else_specific\n</code></pre>\n\n<p>Your main <code>application.js</code> manifest file could be configured to load its files from <code>global/</code>. Specific pages or groups of pages could have their own manifests which load files from their own specific directories. Sprockets will automatically combine the files loaded by <code>application.js</code> with your page-specific files, which allows this solution to work.  </p>\n\n<p>This technique can be used for <code>style_sheets/</code> as well.</p>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>Philip's answer is quite good. Here is the code to make it work:</p>\n\n<p>In application.html.erb:</p>\n\n<p><code>\n&lt;body class=\"&lt;%=params[:controller].parameterize%&gt;\"&gt;\n</code></p>\n\n<p>Assuming your controller is called Projects, that will generate:</p>\n\n<p><code>\n&lt;body class=\"projects\"&gt;\n</code></p>\n\n<p>Then in projects.js.coffee:</p>\n\n<pre><code>jQuery -&gt;\n  if $('body.projects').length &gt; 0  \n     $('h1').click -&gt;\n       alert 'you clicked on an h1 in Projects'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>For the page-specific js you can use <a href=\"http://www.viget.com/inspire/extending-paul-irishs-comprehensive-dom-ready-execution/.\">Garber-Irish solution</a>.</p>\n\n<p>So your Rails javascripts folder might look like this for two controllers - cars and users:</p>\n\n<pre><code>javascripts/\n\u251c\u2500\u2500 application.js\n\u251c\u2500\u2500 init.js\n\u251c\u2500\u2500 markup_based_js_execution\n\u251c\u2500\u2500 cars\n\u2502   \u251c\u2500\u2500 init .js\n\u2502   \u251c\u2500\u2500 index.js\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 users\n    \u2514\u2500\u2500 ...\n</code></pre>\n\n<p>And javascripts will look like this:</p>\n\n<pre><code>// application.js\n\n//= \n//= require init.js\n//= require_tree cars\n//= require_tree users\n</code></pre>\n\n<hr>\n\n<pre><code>// init.js\n\nSITENAME = new Object();\nSITENAME.cars = new Object;\nSITENAME.users = new Object;\n\nSITENAME.common.init = function (){\n  // Your js code for all pages here\n}\n</code></pre>\n\n<hr>\n\n<pre><code>// cars/init.js\n\nSITENAME.cars.init = function (){\n  // Your js code for the cars controller here\n}\n</code></pre>\n\n<hr>\n\n<pre><code>// cars/index.js\n\nSITENAME.cars.index = function (){\n  // Your js code for the index method of the cars controller\n}\n</code></pre>\n\n<p>and markup_based_js_execution will contain code for UTIL object, and on DOM-ready UTIL.init execution.</p>\n\n<p>And don't forget to put this to your layout file:</p>\n\n<pre><code>&lt;body data-controller=\"&lt;%= controller_name %&gt;\" data-action=\"&lt;%= action_name %&gt;\"&gt;\n</code></pre>\n\n<p>I also think that it is better to use classes instead of <code>data-*</code> attributes, for the better page-specific css. As Jason Garber have mentioned: page-specific CSS selectors can get really awkward (when you use <code>data-*</code>attributes)</p>\n\n<p>I hope this will help you.</p>\n",
                    "is_accepted": false,
                    "score": 63
                },
                {
                    "body": "<p>The Asset Pipeline docs suggest how to do controller-specific JS:</p>\n\n<blockquote>\n  <p>For example, if a ProjectsController is generated, there will be a new file at app/assets/javascripts/projects.js.coffee and another at app/assets/stylesheets/projects.css.scss. You should put any JavaScript or CSS unique to a controller inside their respective asset files, as these files can then be loaded just for these controllers with lines such as &lt;%= javascript_include_tag params[:controller] %> or &lt;%= stylesheet_link_tag params[:controller] %>.</p>\n</blockquote>\n\n<p><a href=\"http://guides.rubyonrails.org/asset_pipeline.html\">http://guides.rubyonrails.org/asset_pipeline.html</a></p>\n",
                    "is_accepted": false,
                    "score": 117
                },
                {
                    "body": "<p>I see that you've answered your own question, but here's another option:</p>\n\n<p>Basically, you're making the assumption that </p>\n\n<pre><code>//= require_tree .\n</code></pre>\n\n<p>is required. It's not. Feel free to remove it. In my current application, the first I'm doing with 3.1.x honestly, I've made three different top level JS files. My application.js file only has </p>\n\n<pre><code>//= require jquery\n//= require jquery_ujs\n//= require_directory .\n//= require_directory ./api\n//= require_directory ./admin\n</code></pre>\n\n<p>This way, I can create subdirectories with their own top level JS files that only include what I need.</p>\n\n<p>The keys are:</p>\n\n<ol>\n<li>You can remove require_tree - Rails lets you change the assumptions it makes</li>\n<li>There's nothing special about the name application.js - any file in the assets/javascript subdirectory can include pre-processor directives with //= </li>\n</ol>\n\n<p>Hope that helps and adds some detail to ClosureCowboy's answer.</p>\n\n<p>Sujal</p>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p>I realize I'm coming to this party a bit late, but I wanted to throw in a solution that I've been using lately.  However, let me first mention...</p>\n\n<p><strong>The Rails 3.1/3.2 Way (No, sir.  I don't like it.)</strong></p>\n\n<p>See: <a href=\"http://guides.rubyonrails.org/asset_pipeline.html#how-to-use-the-asset-pipeline\">http://guides.rubyonrails.org/asset_pipeline.html#how-to-use-the-asset-pipeline</a></p>\n\n<p>I'm including the following for the sake of completeness in this answer, and because it's not an unviable solution... though I don't care much for it.</p>\n\n<p>The \"Rails Way\" is a controller-oriented solution, rather than being view-oriented as the original author of this question requested.  There are controller-specific JS files named after their respective controllers.  All of these files are placed in a folder tree that is NOT included by default in any of the application.js require directives.</p>\n\n<p>To include controller-specific code, the following is added to a view.</p>\n\n<pre><code>&lt;%= javascript_include_tag params[:controller] %&gt;\n</code></pre>\n\n<p>I loathe this solution, but it's there and it's quick.  Presumably, you could instead call these files something like \"people-index.js\" and \"people-show.js\" and then use something like <code>\"#{params[:controller]}-index\"</code> to get a view-oriented solution.  Again, quick fix, but it doesn't sit well with me.</p>\n\n<p><strong>My Data Attribute Way</strong></p>\n\n<p>Call me crazy, but I want ALL of my JS compiled and minified into application.js when I deploy.  I don't want to have to remember to include these little straggler files all over the place.</p>\n\n<p>I load all of my JS in one compact, soon-to-be browser cached, file.  If a certain piece of my application.js needs to be fired on a page, I let the HTML tell me, not Rails.</p>\n\n<p>Rather than locking my JS to specific element IDs or littering my HTML with marker classes, I use a custom data attribute called <code>data-jstags</code>.</p>\n\n<pre class=\"lang-html prettyprint-override\"><code>&lt;input name=\"search\" data-jstag=\"auto-suggest hint\" /&gt;\n</code></pre>\n\n<p>On each page, I use <em>- insert preferred JS library method here -</em> to run code when the DOM has finished loading.  This bootstrapping code performs the following actions:</p>\n\n<ol>\n<li>Iterate over all elements in the DOM marked with <code>data-jstag</code></li>\n<li>For each element, split the attribute value on space, creating an array of tag strings.</li>\n<li>For each tag string, perform a lookup in a Hash for that tag.</li>\n<li>If a matching key is found, run the function that is associated with it, passing the element as a parameter.</li>\n</ol>\n\n<p>So say I have the following defined somewhere in my application.js:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function my_autosuggest_init(element) {\n  /* Add events to watch input and make suggestions... */\n}\n\nfunction my_hint_init(element) {\n  /* Add events to show a hint on change/blur when blank... */\n  /* Yes, I know HTML 5 can do this natively with attributes. */\n}\n\nvar JSTags = {\n  'auto-suggest': my_autosuggest_init,\n  'hint': my_hint_init\n};\n</code></pre>\n\n<p>The bootstrapping event is going to apply the <code>my_autosuggest_init</code> and <code>my_hint_init</code> functions against the search input, turning it into an input that displays a list of suggestions while the user types, as well as providing some kind of input hint when the input is left blank and unfocused.</p>\n\n<p>Unless some element is tagged with <code>data-jstag=\"auto-suggest\"</code>, the auto-suggest code never fires.  However, it's always there, minified and eventually cached in my application.js for those times that I need it on a page.</p>\n\n<p>If you need to pass additional parameters to your tagged JS functions, you'll have to apply some creativity.  Either add data-paramter attributes, come up with some kind of parameter syntax, or even use a hybrid approach.</p>\n\n<p>Even if I have some complicated workflow that seems controller-specific, I will just create a file for it in my lib folder, pack it into application.js, and tag it with something like 'new-thing-wizard'.  When my bootstrap hits that tag, my nice, fancy wizard will be instantiated and run.  It runs for that controller's view(s) when needed, but is not otherwise coupled to the controller.  In fact, if I code my wizard right, I might be able to provide all configuration data in the views and therefore be able to re-use my wizard later for any other controller that needs it.</p>\n\n<p>Anyway, this is how I've been implementing page specific JS for a while now, and it has served me well both for simple site designs and for more complex/rich applications.  Hopefully one of the two solutions I've presented here, my way or the Rails way, is helpful to anyone who comes across this question in the future.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Following the lead from Ryan, here's what I have done-</p>\n\n<p>application.js.coffee</p>\n\n<pre><code>$ -&gt;\n    view_method_name = $(\"body\").data(\"view\") + \"_onload\"\n    eval(\"#{view_method_name}()\") if eval(\"typeof #{view_method_name} == 'function'\")\n    view_action_method_name = $(\"body\").data(\"view\") + \"_\"+$(\"body\").data(\"action\")+\"_onload\"\n    eval(\"#{view_action_method_name}()\") if eval(\"typeof #{view_action_method_name} == 'function'\")\n</code></pre>\n\n<p>users.js.coffee (controller specific coffeescript,e.g controller:users, action:dashboard)</p>\n\n<pre><code>window.users_dashboard_onload = () -&gt;\n    alert(\"controller action called\")\nwindow.users_onload = () -&gt;\n    alert(\"controller called\")\n</code></pre>\n\n<p>application.html.haml</p>\n\n<pre><code>%body{:data=&gt;{:view=&gt;controller.controller_name, :action=&gt;controller.action_name}}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>You can add this line in your layout file (e.g. application.html.erb) to automatically load the controller specific javascript file (the one that was created when you generated the controller):</p>\n\n<pre><code>&lt;%= javascript_include_tag params[:controller] %&gt;\n</code></pre>\n\n<p>You also could add a line to automatically load a script file in a per-action basis.</p>\n\n<pre><code>&lt;%= javascript_include_tag params[:controller] + \"/\" + params[:action] %&gt;\n</code></pre>\n\n<p>Just put your page scripts into a subdirectoriy named after the controller name. In these files you could include other scripts using =require.\nIt would be nice to create a helper to include the file only if it exists, to avoid a 404 fail in the browser.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I have another solution, which although primitive works fine for me and doesn't need any fancy selective loading strategies.  Put in your nornal document ready function, but then test the current windows location to see if it is the page your javascript is intended for:</p>\n\n<pre><code>$(document).ready(function() {\n   if(window.location.pathname.indexOf('/yourpage') != -1) {\n          // the javascript you want to execute\n   }\n}\n</code></pre>\n\n<p>This still allows all the js to be loaded by rails 3.x in one small package, but does not generate much overhead or any conflicts with pages for which the js isn't intended.  </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I agree with your answer, to check if that selector is there, use:</p>\n\n<pre><code>if ($(selector).length) {\n    // Put the function that does not need to be executed every page\n}\n</code></pre>\n\n<p>(didn't see anyone add the actual solution)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can also group the js in folders and continue to use the asset pipeline to <a href=\"http://stackoverflow.com/a/11975103/1601137\">load your javascript selectively</a> depending on the page. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This has been answered and accepted long ago, but I came up with my own solution based on some of these answers and my experience with Rails 3+.</p>\n\n<p>The asset pipeline is sweet. Use it.</p>\n\n<p>First, in your <code>application.js</code> file, remove <code>//= require_tree.</code></p>\n\n<p>Then in your <code>application_controller.rb</code> create a helper method:</p>\n\n<pre><code>helper_method :javascript_include_view_js //Or something similar\n\ndef javascript_include_view_js\n    if FileTest.exists? \"app/assets/javascripts/\"+params[:controller]+\"/\"+params[:action]+\".js.erb\"\n        return '&lt;script src=\"/assets/'+params[:controller]+'/'+params[:action]+'.js.erb\" type=\"text/javascript\"&gt;&lt;/script&gt;'\n    end\nend\n</code></pre>\n\n<p>Then in your <code>application.html.erb</code> layout file, add your new helper among the existing javascript includes, prefixed with the <code>raw</code> helper:</p>\n\n<pre><code>&lt;head&gt;\n    &lt;title&gt;Your Application&lt;/title&gt;\n    &lt;%= stylesheet_link_tag \"application\", :media =&gt; \"all\" %&gt;\n    &lt;%= javascript_include_tag \"application\" %&gt;\n    &lt;%= raw javascript_include_view_js %&gt;\n&lt;/head&gt;\n</code></pre>\n\n<p>Voila, now you can easily create view-specific javascript using the same file structure you use everywhere else in rails. Simply stick your files in <code>app/assets/:namespace/:controller/action.js.erb</code>!</p>\n\n<p>Hope that helps someone else!</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>ryguy's answer is a good answer, even though its been downvoted into negative points land.</p>\n\n<p>Especially if you're using something like Backbone JS - each page has its own Backbone view. Then the erb file just has a single line of inline javascript that fires up the right backbone view class. I consider it a single line of 'glue code' and therefore the fact that its inline is OK. The advantage is that you can keep your \"require_tree\" which lets the browser cache all the javascript. </p>\n\n<p>in show.html.erb, you'll have something like:</p>\n\n<pre><code>&lt;% provide :javascript do %&gt;\n  &lt;%= javascript_include_tag do %&gt;\n    (new app.views.ProjectsView({el: 'body'})).render();\n  &lt;% end %&gt;\n&lt;% end do %&gt;\n</code></pre>\n\n<p>and in your layout file, you'll need:</p>\n\n<pre><code>&lt;%= yield :javascript %&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Move all your commom JS files to a sub-folder like 'app/assets/javascript/global' then in the application.js, modify the <code>//= require_tree .</code> line to <code>//= require_tree ./global</code>.</p>\n\n<p>Now you are free to put your controller-specific JS on the 'app/assets/javascript/' root and they will not be included in compiled JS, being used just when you call them via <code>= javascript_include_tag</code> on your controller/view.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>&lt;%= javascript_include_tag params[:controller] %&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>The <a href=\"https://github.com/guidomb/loadjs\" rel=\"nofollow\">LoadJS</a> gem is another option:</p>\n\n<blockquote>\n  <p>LoadJS provides a way to load page-specific Javascript code in a Rails app without loosing the magic provided by Sprockets. All your Javascript code will continue by minified in one Javascript file but some portions of it will only be executed for certain pages.</p>\n  \n  <p><a href=\"https://github.com/guidomb/loadjs\" rel=\"nofollow\">https://github.com/guidomb/loadjs</a></p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Maybe you will find <a href=\"https://github.com/peresleguine/pluggable_js\" rel=\"nofollow\">pluggable_js</a> gem as suitable solution.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here's how to do it especially if you don't have to execute tons of libraries for your specific page, but only to run a few hundreds lines of JS more or less.</p>\n\n<p>Since it's perfectly fine to embed Javascript code into HTML, just create under app/views shared.js directory and place there your page/pages specific code inside <strong>my_cool_partial.html.erb</strong></p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt; \n&lt;!--\n  var your_code_goes_here = 0;\n  function etc() {\n     ...\n  }\n--&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>So now from wherever you want you simply do:</p>\n\n<pre><code>  = render :partial =&gt; 'shared.js/my_cool_partial'\n</code></pre>\n\n<p>And that's it, k?</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>I don't see an answer that really puts it all together and lays it out for you.  Thus, I'll try to put <em>meleyal</em>, <em>sujal</em> (a la <em>ClosureCowboy</em>), the first part of <em>Ryan's</em> answer, and even <em>Gal's</em> bold statement about Backbone.js... all together in a way that is short and clear.  And, who knows, I might even meet <em>Marnen Laibow-Koser's</em> requirements.</p>\n\n<h2>Example edits</h2>\n\n<p>assets/javascripts/<strong>application.js</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>//= require jquery\n//= require jquery_ujs\n//= require lodash.underscore.min\n...\n</code></pre>\n\n<p><br/>\nviews/layouts/<strong>application.html.erb</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>  ...\n  &lt;/footer&gt;\n\n  &lt;!-- Javascripts ================================================== --&gt;\n  &lt;!-- Placed at the end of the document so the pages load faster --&gt;\n  &lt;%= javascript_include_tag \"application\" %&gt;\n  &lt;%= yield :javascript %&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><br/>\nviews/foo/<strong>index.html.erb</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>...\n&lt;% content_for :javascript do %&gt;\n  &lt;%= javascript_include_tag params[:controller] %&gt;\n&lt;% end %&gt;\n</code></pre>\n\n<p><br/>\nassets/javascripts/<strong>foo.js</strong></p>\n\n<pre class=\"lang-none prettyprint-override\"><code>//= require moment\n//= require_tree ./foostuff\n</code></pre>\n\n<p><br/>\nassets/javascripts/foostuff/<strong>foothis.js.coffee</strong></p>\n\n<pre><code>alert \"Hello world!\"\n</code></pre>\n\n<p><br/></p>\n\n<h2>Brief description</h2>\n\n<ul>\n<li><p>Remove <code>//= require_tree .</code> from <strong>application.js</strong> and list only the JS that each page shares.</p></li>\n<li><p>The two lines shown above in <strong>application.html.erb</strong> tell the page where to include application.js and your page-specific JS.</p></li>\n<li><p>The three lines shown above in <strong>index.html.erb</strong> tells your view to look for some page-specific JS and include it at a named yield region called \":javascript\" (or whatever you want to name it).  In this example, the controller is \"foo\" so Rails will attempt to include \"foo.js\" at the :javascript yield region in the application layout.</p></li>\n<li><p>List your page-specific JS in <strong>foo.js</strong> (or whatever the controller is named).  List common libraries, a tree, directories, whatever.</p></li>\n<li><p>Keep your custom page-specific JS someplace where you can easily reference it apart from your other custom JS.  In this example, foo.js requires the foostuff tree so put your custom JS there, such as <strong>foothis.js.coffee</strong>.</p></li>\n<li><p>There are no hard rules here.  Feel free to move things around and perhaps even create multiple yield regions of various names in various layouts if needed.  This just shows one possible first step forward.  (I don't do it exactly like this given our use of Backbone.js.  I might also choose to drop foo.js down into a folder called foo instead of foostuff but haven't decided that yet.)</p></li>\n</ul>\n\n<h2>Notes</h2>\n\n<p>You can do similar things with CSS and <code>&lt;%= stylesheet_link_tag params[:controller] %&gt;</code> but this is beyond scope of the question.</p>\n\n<p>If I missed a glaring best practice here, send me a note and I'll conisder adapting.  Rails is fairly new to me and, honestly, I'm not terribly impressed so far with the chaos it brings by default to enterprise development and all the traffic the average Rails program generates.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I did it previously using this method: <a href=\"http://theflyingdeveloper.com/controller-specific-assets-with-rails-4/\" rel=\"nofollow\">http://theflyingdeveloper.com/controller-specific-assets-with-rails-4/</a> . Super-easy, relies on controllers to select the proper js to load. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Though you have several answers here, I think your edit is probably the best bet. A design pattern that we use in our team that we got from <a href=\"https://github.com/gitlabhq/gitlabhq/blob/master/app/assets/javascripts/dispatcher.js.coffee\" rel=\"nofollow\">Gitlab</a> is the Dispatcher pattern. It does something similar to what you're talking about, however the page name is set in the body tag by rails. For example, in your layout file, just include something like (in HAML):</p>\n\n<pre><code>%body{'data-page' =&gt; \"#{controller}:#{action}\" }\n</code></pre>\n\n<p>Then only have one closure and a switch statement in your <code>dispatcher.js.coffee</code> file in your javascripts folder like so:</p>\n\n<pre><code>$ -&gt;\n  new Dispatcher()\n\nclass Dispatcher\n  constructor: -&gt;\n    page = $('body').attr('data-page')\n    switch page\n      when 'products:index'\n        new Products() \n      when 'users:login'\n        new Login()\n</code></pre>\n\n<p>All you need to do in the individual files (say <code>products.js.coffee</code> or <code>login.js.coffee</code> for example) is enclose them in a class and then globalize that class symbol so you can access it in the dispatcher:</p>\n\n<pre><code>class Products\n  constructor: -&gt;\n    #do stuff\n@Products = Products\n</code></pre>\n\n<p>Gitlab has several examples of this that you might want to poke around with in case you're curious :)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I combined some answers into:</p>\n\n<p>Application helper:</p>\n\n<pre><code>module ApplicationHelper\n  def js_page_specific_include\n    page_specific_js = params[:controller] + '_' + params[:action]\n    if Rails.application.assets.find_asset(page_specific_js).nil?\n      javascript_include_tag 'application', 'data-turbolinks-track' =&gt; true\n    else\n      javascript_include_tag 'application', page_specific_js, 'data-turbolinks-track' =&gt; true\n    end\n  end\nend\n</code></pre>\n\n<p>layouts/application.html.haml:</p>\n\n<pre><code> &lt;!DOCTYPE html&gt;\n%html{lang: 'uk'}\n  %head   \n    = stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track' =&gt; true\n   bla-bla-bla\n    = js_page_specific_include   \n   bla-bla-bla  \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>To my understanding, all of your javascript gets merged into 1 file. Rails does this by default when it adds <code>//= require_tree .</code> to the bottom of your <code>application.js</code> manifest file. </p>\n\n<p>This sounds like a real life-saver, but I am a little concerned about page-specific javascript code. Does this code get executed on every page? The last thing I want is for all of my objects to be instantiated for every page when they are only needed on 1 page. </p>\n\n<p>Also, isn't there potential for code that clashes too?</p>\n\n<p>Or do you put a small <code>script</code> tag at the bottom of the page that just calls into a method that executes the javascript code for the page?</p>\n\n<p>Do you no longer need require.js then?</p>\n\n<p>Thanks</p>\n\n<p><strong>EDIT</strong>: I appreciate all the answers... and I don't think they are really getting at the problem. Some of them are about styling and don't seem to relate... and others just mention <code>javascript_include_tag</code>... which I know exists (obviously...) but it would appear that the Rails 3.1 way going forward is to wrap up all of your Javascript into 1 file rather than loading individual Javascript at the bottom of each page.</p>\n\n<p>The best solution I can come up with is to wrap certain features in <code>div</code> tags with <code>id</code>s or <code>class</code>es. In the javascript code, you just check if the <code>id</code> or <code>class</code> is on the page, and if it is, you run the javascript code that is associated with it. This way if the dynamic element is not on the page, the javascript code doesn't run - even though it's been included in the massive <code>application.js</code> file packaged by Sprockets.</p>\n\n<p>My above solution has the benefit that if a search box is included on 8 of the 100 pages, it will run on only those 8 pages. You also won't have to include the same code on 8 of the pages on the site. In fact, you'll never have to include manual script tags on your site anywhere ever again.</p>\n\n<p>I think this is the actual answer to my question.</p>\n",
            "last_activity_date": 1424724706,
            "question_id": 6167805,
            "score": 291,
            "tags": [
                "javascript",
                "ruby-on-rails",
                "ruby-on-rails-3.1",
                "asset-pipeline",
                "sprockets"
            ],
            "title": "Using Rails 3.1, where do you put your &quot;page specific&quot; javascript code?"
        },
        {
            "answer_count": 24,
            "answers": [
                {
                    "body": "<ol>\n<li>Unfortunately not.</li>\n<li><code>if( \"mystring#\".substr(-1) === \"#\" ) {}</code></li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 64
                },
                {
                    "body": "<pre><code>if( (\"mystring#\").substr(-1,1) == '#' )\n</code></pre>\n\n<p>-- Or --</p>\n\n<pre><code>if( (\"mystring#\").match(/#$/) )\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>all of them are very useful examples. Adding <code>String.prototype.endsWith = function(str)</code> will help us to simply call the method to check if our string ends with it or not, well regexp will also do it.</p>\n\n<p>I found a better solution than mine. Thanks every one.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This version avoids creating a substring, and doesn't use regular expressions (some regex answers here will work; others are broken):</p>\n\n<pre><code>String.prototype.endsWith = function(str)\n{\n    var lastIndex = this.lastIndexOf(str);\n    return (lastIndex !== -1) &amp;&amp; (lastIndex + str.length === this.length);\n}\n</code></pre>\n\n<p>If performance is important to you, it would be worth testing whether <code>lastIndexOf</code> is actually faster than creating a substring or not. (It may well depend on the JS engine you're using...) It may well be faster in the matching case, and when the string is small - but when the string is huge it needs to look back through the whole thing even though we don't really care :(</p>\n\n<p>For checking a single character, finding the length and then using <code>charAt</code> is probably the best way.</p>\n",
                    "is_accepted": false,
                    "score": 45
                },
                {
                    "body": "<pre><code>return this.lastIndexOf(str) + str.length == this.length;\n</code></pre>\n\n<p>does not work in the case where original string length is one less than search string length and the search string is not found:</p>\n\n<p>lastIndexOf returns -1, then you add search string length and you are left with the original string's length.</p>\n\n<p>A possible fix is</p>\n\n<pre><code>return this.length &gt;= str.length &amp;&amp; this.lastIndexOf(str) + str.length == this.length\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>/#$/.test(str)\n</code></pre>\n\n<p>will work on all browsers, doesn't require monkey patching <code>String</code>, and doesn't require scanning the entire string as <code>lastIndexOf</code> does when there is no match.</p>\n\n<p>If you want to match a constant string that might contain regular expression special characters, such as <code>'$'</code>, then you can use the following:</p>\n\n<pre><code>function makeSuffixRegExp(suffix, caseInsensitive) {\n  return new RegExp(\n      String(suffix).replace(/[$%()*+.?\\[\\\\\\]{|}]/g, \"\\\\$&amp;\") + \"$\",\n      caseInsensitive ? \"i\" : \"\");\n}\n</code></pre>\n\n<p>and then you can use it like this</p>\n\n<pre><code>makeSuffixRegExp(\"a[complicated]*suffix*\").test(str)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 220
                },
                {
                    "body": "<p>Come on, this is the correct endsWith implementation:</p>\n\n<pre><code>String.prototype.endsWith = function (s) {\n  return this.length &gt;= s.length &amp;&amp; this.substr(this.length - s.length) == s;\n}\n</code></pre>\n\n<p>using lastIndexOf just creates unnecessary CPU loops if there is no match.</p>\n",
                    "is_accepted": false,
                    "score": 49
                },
                {
                    "body": "<p>I know this is a year old question... but I need this too and I need it to work cross-browser so... <strong>combining everyone's answer and comments</strong> and simplify it a bit:</p>\n\n<pre><code>String.prototype.endsWith = function(suffix) {\n    return this.indexOf(suffix, this.length - suffix.length) !== -1;\n};\n</code></pre>\n\n<ul>\n<li>Doesn't create a substring</li>\n<li>Uses native <code>indexOf</code> function for fastest results</li>\n<li>Skip unnecessary comparisons using the second parameter of <code>indexOf</code> to skip ahead</li>\n<li>Works in Internet Explorer</li>\n<li>NO Regex complications</li>\n</ul>\n\n<hr>\n\n<p>Also, if you don't like stuffing things in native data structure's prototypes, here's a standalone version:</p>\n\n<pre><code>function endsWith(str, suffix) {\n    return str.indexOf(suffix, str.length - suffix.length) !== -1;\n}\n</code></pre>\n\n<hr>\n\n<p><strong>EDIT:</strong> As noted by @hamish in the comments, if you want to err on the safe side and check if an implementation has already been provided, you can just adds a <code>typeof</code> check like so:</p>\n\n<pre><code>if (typeof String.prototype.endsWith !== 'function') {\n    String.prototype.endsWith = function(suffix) {\n        return this.indexOf(suffix, this.length - suffix.length) !== -1;\n    };\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 1244
                },
                {
                    "body": "<pre><code>function check(str)\n{\n    var lastIndex = str.lastIndexOf('/');\n    return (lastIndex != -1) &amp;&amp; (lastIndex  == (str.length - 1));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>if you dont want to use lasIndexOf or substr then why not just look at the string in its natural state (ie. an array)</p>\n\n<pre><code>String.prototype.endsWith = function(suffix) {\n    if (this[this.length - 1] == suffix) return true;\n    return false;\n}\n</code></pre>\n\n<p>or as a standalone function</p>\n\n<pre><code>function strEndsWith(str,suffix) {\n    if (str[str.length - 1] == suffix) return true;\n    return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A way to future proof and/or prevent overwriting of existing prototype would be test check to see if it has already been added to the String prototype. Here's my take on the non-regex highly rated version. </p>\n\n<pre><code>if (typeof String.endsWith !== 'function') {\n    String.prototype.endsWith = function (suffix) {\n        return this.indexOf(suffix, this.length - suffix.length) !== -1;\n    };\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>String.prototype.endWith = function (a) {\n    var isExp = a.constructor.name === \"RegExp\",\n    val = this;\n    if (isExp === false) {\n        a = escape(a);\n        val = escape(val);\n    } else\n        a = a.toString().replace(/(^\\/)|(\\/$)/g, \"\");\n    return eval(\"/\" + a + \"$/.test(val)\");\n}\n\n// example\nvar str = \"Hello\";\nalert(str.endWith(\"lo\"));\nalert(str.endWith(/l(o|a)/));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>String.prototype.endsWith = function(str) \n{return (this.match(str+\"$\")==str)}\n\nString.prototype.startsWith = function(str) \n{return (this.match(\"^\"+str)==str)}\n</code></pre>\n\n<p>I hope this helps</p>\n\n<pre><code>var myStr = \u201c  Earth is a beautiful planet  \u201d;\nvar myStr2 = myStr.trim();  \n//==\u201cEarth is a beautiful planet\u201d;\n\nif (myStr2.startsWith(\u201cEarth\u201d)) // returns TRUE\n\nif (myStr2.endsWith(\u201cplanet\u201d)) // returns TRUE\n\nif (myStr.startsWith(\u201cEarth\u201d)) \n// returns FALSE due to the leading spaces\u2026\n\nif (myStr.endsWith(\u201cplanet\u201d)) \n// returns FALSE due to trailing spaces\u2026\n</code></pre>\n\n<p>the traditional way </p>\n\n<pre><code>function strStartsWith(str, prefix) {\n    return str.indexOf(prefix) === 0;\n}\n\nfunction strEndsWith(str, suffix) {\n    return str.match(suffix+\"$\")==suffix;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I don't know about you, but:</p>\n\n<pre><code>var s = \"mystring#\";\ns.length &gt;= 1 &amp;&amp; s[s.length - 1] == '#'; // will do the thing!\n</code></pre>\n\n<p>Why regular expressions? Why messing with the prototype? substr? c'mon...</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>This builds on @charkit's accepted answer allowing either an Array of strings, or string to passed in as an argument.</p>\n\n<pre><code>if (typeof String.prototype.endsWith === 'undefined') {\n    String.prototype.endsWith = function(suffix) {\n        if (typeof suffix === 'String') {\n            return this.indexOf(suffix, this.length - suffix.length) !== -1;\n        }else if(suffix instanceof Array){\n            return _.find(suffix, function(value){\n                console.log(value, (this.indexOf(value, this.length - value.length) !== -1));\n                return this.indexOf(value, this.length - value.length) !== -1;\n            }, this);\n        }\n    };\n}\n</code></pre>\n\n<p>This requires underscorejs - but can probably be adjusted to remove the underscore dependency.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>if(typeof String.prototype.endsWith !== \"function\") {\n    /**\n     * String.prototype.endsWith\n     * Check if given string locate at the end of current string\n     * @param {string} substring substring to locate in the current string.\n     * @param {number=} position end the endsWith check at that position\n     * @return {boolean}\n     *\n     * @edition ECMA-262 6th Edition, 15.5.4.23\n     */\n    String.prototype.endsWith = function(substring, position) {\n        substring = String(substring);\n\n        var subLen = substring.length | 0;\n\n        if( !subLen )return true;//Empty string\n\n        var strLen = this.length;\n\n        if( position === void 0 )position = strLen;\n        else position = position | 0;\n\n        if( position &lt; 1 )return false;\n\n        var fromIndex = (strLen &lt; position ? strLen : position) - subLen;\n\n        return (fromIndex &gt;= 0 || subLen === -fromIndex)\n            &amp;&amp; (\n                position === 0\n                // if position not at the and of the string, we can optimise search substring\n                //  by checking first symbol of substring exists in search position in current string\n                || this.charCodeAt(fromIndex) === substring.charCodeAt(0)//fast false\n            )\n            &amp;&amp; this.indexOf(substring, fromIndex) === fromIndex\n        ;\n    };\n}\n</code></pre>\n\n<p><strong>Benefits:</strong></p>\n\n<ul>\n<li>This version is not just re-using indexOf.</li>\n<li>Greatest performance on long strings. Here is a speed test <a href=\"http://jsperf.com/starts-ends-with/4\" rel=\"nofollow\">http://jsperf.com/starts-ends-with/4</a></li>\n<li>Fully compatible with ecmascript specification. It passes the <a href=\"https://github.com/monolithed/ECMAScript-6/blob/master/tests/String.js\" rel=\"nofollow\">tests</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Do not use regular expressions. They are slow even in fast languages. Just write a function that checks the end of a string. This library has nice examples: <a href=\"https://github.com/danielnuriyev/groundjs/blob/master/util.js\" rel=\"nofollow\">groundjs/util.js</a>.\nBe careful adding a function to String.prototype. This code has nice examples of how to do it: <a href=\"https://github.com/danielnuriyev/groundjs/blob/master/prototype.js\" rel=\"nofollow\">groundjs/prototype.js</a>\nIn general, this is a nice language-level library: <a href=\"https://github.com/danielnuriyev/groundjs/blob/master/ground.js\" rel=\"nofollow\">groundjs</a>\nYou can also take a look at lodash</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>From developer.mozilla.org <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith\" rel=\"nofollow\">String.prototype.endsWith()</a></p>\n\n<h2>Summary</h2>\n\n<p>The <code>endsWith()</code> method determines whether a string ends with the characters of another string, returning true or false as appropriate.</p>\n\n<h2>Syntax</h2>\n\n<pre><code>str.endsWith(searchString [, position]);\n</code></pre>\n\n<h2>Parameters</h2>\n\n<ul>\n<li><p><strong>searchString</strong> :\nThe characters to be searched for at the end of this string.</p></li>\n<li><p><strong>position</strong> :\nSearch within this string as if this string were only this long; defaults to this string's actual length, clamped within the range established by this string's length.</p></li>\n</ul>\n\n<h2>Description</h2>\n\n<p>This method lets you determine whether or not a string ends with another string.</p>\n\n<h2>Examples</h2>\n\n<pre><code>var str = \"To be, or not to be, that is the question.\";\n\nalert( str.endsWith(\"question.\") );  // true\nalert( str.endsWith(\"to be\") );      // false\nalert( str.endsWith(\"to be\", 19) );  // true\n</code></pre>\n\n<h2>Specifications</h2>\n\n<p><a href=\"http://people.mozilla.org/~jorendorff/es6-draft.html#sec-string.prototype.endswith\" rel=\"nofollow\">ECMAScript Language Specification 6th Edition (ECMA-262)</a></p>\n\n<h2>Browser compatibility</h2>\n\n<p>Only Firefox (Gecko) 17.0 (17)</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I just learned about this string library:</p>\n\n<p><a href=\"http://stringjs.com/\" rel=\"nofollow\">http://stringjs.com/</a></p>\n\n<p>Include the js file and then use the <code>S</code> variable like this:</p>\n\n<pre><code>S('hi there').endsWith('hi there')\n</code></pre>\n\n<p>It can also be used in NodeJS by installing it:</p>\n\n<pre><code>npm install string\n</code></pre>\n\n<p>Then requiring it as the <code>S</code> variable:</p>\n\n<pre><code>var S = require('string');\n</code></pre>\n\n<p>The web page also has links to alternate string libraries, if this one doesn't take your fancy.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>function strEndsWith(str,suffix) {\n  var reguex= new RegExp(suffix+'$');\n\n  if (str.match(reguex)!=null)\n      return true;\n\n  return false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>For coffeescript</p>\n\n<pre><code>String::endsWith = (suffix) -&gt;\n  -1 != @indexOf suffix, @length - suffix.length\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>So many things for such a small problem, just use this Regular Expression</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var str = \"mystring#\";\r\nvar regex = /^.*#$/\r\n\r\nif (regex.test(str)){\r\n  //if it has a trailing '#'\r\n}</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>@chakrit's accepted answer is a solid way to do it yourself. If, however, you're looking for a packaged solution, I recommend taking a look at <a href=\"http://epeli.github.io/underscore.string/\" rel=\"nofollow\">underscore.string</a>, as @mlunoe pointed out. Using underscore.string, the code would be:</p>\n\n<pre><code>function endsWithHash(str) {\n  return _.str.endsWith(str, '#');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you're using <a href=\"https://lodash.com/docs#endsWith\" rel=\"nofollow\">lodash</a>:</p>\n\n<pre><code>_.endsWith('abc', 'c'); // true\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How can I check if a string ends with a particular character in javascript?\nExample I have a string say </p>\n\n<pre><code>var str = \"mystring#\";\n</code></pre>\n\n<p>I want to know if that string str is ending with <code>#</code>. How can I check it?</p>\n\n<ol>\n<li><p>Is there a <code>endsWith()</code> method in javascript?</p></li>\n<li><p>One solution I have is take the length of the string and get the last character and check it.</p></li>\n</ol>\n\n<p>Is this the best way or there is any other way?</p>\n",
            "last_activity_date": 1425292481,
            "question_id": 280634,
            "score": 630,
            "tags": [
                "javascript",
                "string",
                "ends-with"
            ],
            "title": "endsWith in javascript"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>It seems that there is no such function in V3 yet.</p>\n\n<p>People suggest to keep references to all markers you have on the map in an array. And then when you want to delete em all, just loop trough the array and call .setMap(null) method on each of the references.</p>\n\n<p><a href=\"http://stackoverflow.com/questions/953394/is-it-ok-clearoverlays-in-gmap-api-v2-to-google-maps-api-v3\">See this question for more info/code.</a></p>\n\n<p>My version:</p>\n\n<pre><code>google.maps.Map.prototype.markers = new Array();\n\ngoogle.maps.Map.prototype.getMarkers = function() {\n    return this.markers\n};\n\ngoogle.maps.Map.prototype.clearMarkers = function() {\n    for(var i=0; i&lt;this.markers.length; i++){\n        this.markers[i].setMap(null);\n    }\n    this.markers = new Array();\n};\n\ngoogle.maps.Marker.prototype._setMap = google.maps.Marker.prototype.setMap;\n\ngoogle.maps.Marker.prototype.setMap = function(map) {\n    if (map) {\n        map.markers[map.markers.length] = this;\n    }\n    this._setMap(map);\n}\n</code></pre>\n\n<p><em>The code is edited version of this code <a href=\"http://www.lootogo.com/googlemapsapi3/markerPlugin.html\">http://www.lootogo.com/googlemapsapi3/markerPlugin.html</a> I removed the need to call addMarker  manually.</em></p>\n\n<p>Pros</p>\n\n<ul>\n<li>Doing this way you keep the code compact and in one place (doesn't pollute the namespace).</li>\n<li>You don't have to keep track of the markers yourself anymore you can always find all the markers on the map by calling map.getMarkers()</li>\n</ul>\n\n<p>Cons</p>\n\n<ul>\n<li>Using prototypes and wrappers like I did now makes my code dependent on Google code, if they make a mayor change in their source this will break.</li>\n<li>If you don't understand it then you won't be able to fix it if does break. The chances are low that they're going to change anything which will break this, but still..</li>\n<li>If you remove one marker manually, it's reference will still be in markers array. (You could edit my setMap method to fix it, but at the cost of looping trough markers array and removing the reference) </li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<pre><code>google.maps.Map.prototype.markers = new Array();\n\ngoogle.maps.Map.prototype.addMarker = function(marker) {\n    this.markers[this.markers.length] = marker;\n};\n\ngoogle.maps.Map.prototype.getMarkers = function() {\n    return this.markers\n};\n\ngoogle.maps.Map.prototype.clearMarkers = function() {\n    for(var i=0; i&lt;this.markers.length; i++){\n        this.markers[i].setMap(null);\n    }\n    this.markers = new Array();\n};\n</code></pre>\n\n<p>I don't think there is one in V3 so I used the above custom implementation.</p>\n\n<p>Disclaimer:  I did not write this code but I forgot to retain a reference when I merged it into my codebase so I don't know where it came from.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>The \"<code>set_map</code>\" function posted in both answers appears to no longer work in Google Maps v3 API.</p>\n\n<p>I wonder what happened</p>\n\n<p><strong>Update:</strong></p>\n\n<p>It appears Google changed their API such that \"<code>set_map</code>\" is not \"<code>setMap</code>\".</p>\n\n<p><a href=\"http://code.google.com/apis/maps/documentation/v3/reference.html\" rel=\"nofollow\">http://code.google.com/apis/maps/documentation/v3/reference.html</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Same problem. This code doesn't work anymore.</p>\n\n<p>I've corrected it, change clearMarkers method this way:</p>\n\n<p>set_map(null) ---> setMap(null)</p>\n\n<pre><code>google.maps.Map.prototype.clearMarkers = function() {\n    for(var i=0; i &lt; this.markers.length; i++){\n        this.markers[i].setMap(null);\n    }\n    this.markers = new Array();\n};\n</code></pre>\n\n<p>Documentation has been updated to include details on the topic: <a href=\"https://developers.google.com/maps/documentation/javascript/markers#remove\">https://developers.google.com/maps/documentation/javascript/markers#remove</a></p>\n",
                    "is_accepted": false,
                    "score": 63
                },
                {
                    "body": "<p>Simply do the following:</p>\n\n<p>I. Declare a global variable:</p>\n\n<pre><code>var markersArray = [];\n</code></pre>\n\n<p>II. Define a function:</p>\n\n<pre><code>function clearOverlays() {\n  for (var i = 0; i &lt; markersArray.length; i++ ) {\n    markersArray[i].setMap(null);\n  }\n  markersArray.length = 0;\n}\n</code></pre>\n\n<p>OR</p>\n\n<pre><code>google.maps.Map.prototype.clearOverlays = function() {\n  for (var i = 0; i &lt; markersArray.length; i++ ) {\n    markersArray[i].setMap(null);\n  }\n  markersArray.length = 0;\n}\n</code></pre>\n\n<p>III. Push markers in the 'markerArray' before calling the following:</p>\n\n<pre><code>markersArray.push(marker);\ngoogle.maps.event.addListener(marker,\"click\",function(){});\n</code></pre>\n\n<p>IV. Call the <code>clearOverlays();</code> or <code>map.clearOverlays();</code> function wherever required.</p>\n\n<p>That's it!!</p>\n",
                    "is_accepted": false,
                    "score": 317
                },
                {
                    "body": "<p>On the new version v3, They recommended to keep in arrays. as following. </p>\n\n<p>See sample at <a href=\"http://code.google.com/apis/maps/documentation/javascript/examples/overlay-remove.html\">overlay-overview</a>.</p>\n\n<pre><code>var map;\nvar markersArray = [];\n\nfunction initialize() {\n  var haightAshbury = new google.maps.LatLng(37.7699298, -122.4469157);\n  var mapOptions = {\n    zoom: 12,\n    center: haightAshbury,\n    mapTypeId: google.maps.MapTypeId.TERRAIN\n  };\n  map =  new google.maps.Map(document.getElementById(\"map_canvas\"), mapOptions);\n\n  google.maps.event.addListener(map, 'click', function(event) {\n    addMarker(event.latLng);\n  });\n}\n\nfunction addMarker(location) {\n  marker = new google.maps.Marker({\n    position: location,\n    map: map\n  });\n  markersArray.push(marker);\n}\n\n// Removes the overlays from the map, but keeps them in the array\nfunction clearOverlays() {\n  if (markersArray) {\n    for (i in markersArray) {\n      markersArray[i].setMap(null);\n    }\n  }\n}\n\n// Shows any overlays currently in the array\nfunction showOverlays() {\n  if (markersArray) {\n    for (i in markersArray) {\n      markersArray[i].setMap(map);\n    }\n  }\n}\n\n// Deletes all markers in the array by removing references to them\nfunction deleteOverlays() {\n  if (markersArray) {\n    for (i in markersArray) {\n      markersArray[i].setMap(null);\n    }\n    markersArray.length = 0;\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>The following from Anon works perfectly, although with flickers when repeatedly clearing the overlays.</p>\n\n<p>Simply do the following:</p>\n\n<p><strong>I. Declare a global variable:</strong></p>\n\n<pre><code>var markersArray = [];\n</code></pre>\n\n<p><strong>II. Define a function:</strong></p>\n\n<pre><code>function clearOverlays() {\n  if (markersArray) {\n    for (i in markersArray) {\n      markersArray[i].setMap(null);\n    }\n  }\n}\n</code></pre>\n\n<p><strong>III. Push markers in the 'markerArray' before calling the following:</strong></p>\n\n<pre><code>markersArray.push(marker);\ngoogle.maps.event.addListener(marker,\"click\",function(){});\n</code></pre>\n\n<p><strong>IV. Call the <code>clearOverlays()</code> function wherever required.</strong></p>\n\n<p>That's it!!</p>\n\n<p>Hope that will help you.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I found using markermanager library in the google-maps-utility-library-v3 project as the easiest way.</p>\n\n<p><strong>1. Set up the MarkerManager</strong></p>\n\n<pre><code>mgr = new MarkerManager(map);\ngoogle.maps.event.addListener(mgr, 'loaded', function () {\n    loadMarkers();\n});\n</code></pre>\n\n<p><strong>2. Add markers to the MarkerManager</strong> </p>\n\n<pre><code>function loadMarkers() {\n  var marker = new google.maps.Marker({\n            title: title,\n            position: latlng,\n            icon: icon\n   });\n   mgr.addMarker(marker);\n   mgr.refresh();\n }\n</code></pre>\n\n<p><strong>3. To clear markers you just need to call the MarkerManger's <code>clearMarkers()</code> function</strong></p>\n\n<pre><code>mgr.clearMarkers();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Google's Demo Gallery has a demo on how they do it:</p>\n\n<p><a href=\"http://code.google.com/apis/maps/documentation/javascript/examples/overlay-remove.html\">http://code.google.com/apis/maps/documentation/javascript/examples/overlay-remove.html</a></p>\n\n<p>You can view the source code to see how they add markers.  </p>\n\n<p>Long story short, they keep the markers in a global array.  When clearing/deleting them, they loop through the array and call \".setMap(null)\" on the given marker object.</p>\n\n<p>However, this example shows one 'trick'.  \"Clear\" for this example means removing them from the map but keeping them in the array, which allows the application to quickly re-add them to the map.  In a sense, this acts like \"hiding\" them.</p>\n\n<p>\"Delete\" clears the array as well.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I have just tried this with kmlLayer.setMap(null) and it worked.  Not sure if that would work with regular markers but appears to work correctly.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This is an easy solution:</p>\n\n<p><a href=\"http://apitricks.blogspot.com/2010/02/clearoverlays-in-v3.html\" rel=\"nofollow\">http://apitricks.blogspot.com/2010/02/clearoverlays-in-v3.html</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>if you use the gmap V3 plugin:\n<code>$(\"#map\").gmap(\"removeAllMarkers\");</code></p>\n\n<p>see: <a href=\"http://www.smashinglabs.pl/gmap/documentation#after-load\" rel=\"nofollow\">http://www.smashinglabs.pl/gmap/documentation#after-load</a></p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You can do it this way too:</p>\n\n<pre><code>function clearMarkers(category){ \nvar i;       \n\n  for (i = 0; i &lt; markers.length; i++) {        \n\n       markers[i].setVisible(false);        \n\n\n\n  }    \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>for (i in markersArray) {\n  markersArray[i].setMap(null);\n}\n</code></pre>\n\n<p>is only working on IE.</p>\n\n<hr>\n\n<pre><code>for (var i=0; i&lt;markersArray.length; i++) {\n  markersArray[i].setMap(null);\n}\n</code></pre>\n\n<p>working on chrome, firefox, ie...</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>To clear of all the overlays including polys, markers, etc...</p>\n\n<p>simply use:</p>\n\n<p><code>map = new google.maps.Map(document.getElementById(\"map_canvas\"), myOptions);}</code></p>\n\n<p>Here is a function that I wrote to do it form me on a map application:</p>\n\n<pre><code>  function clear_Map() {\n    directionsDisplay = new google.maps.DirectionsRenderer();\n    //var chicago = new google.maps.LatLng(41.850033, -87.6500523);\n    var myOptions = {\n        zoom: 8,\n        mapTypeId: google.maps.MapTypeId.ROADMAP,\n        center: HamptonRoads\n    }\n\n    map = new google.maps.Map(document.getElementById(\"map_canvas\"), myOptions);\n    directionsDisplay.setMap(map);\n    directionsDisplay.setPanel(document.getElementById(\"directionsPanel\"));\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I know that this maybe a simiple solution, but this is what I do</p>\n\n<pre><code>$(\"#map_canvas\").html(\"\");\nmarkers = [];\n</code></pre>\n\n<p>Works every time for me.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Here you can find an example of how to remove markers:</p>\n\n<p><a href=\"https://developers.google.com/maps/documentation/javascript/examples/marker-remove?hl=es\" rel=\"nofollow\">https://developers.google.com/maps/documentation/javascript/examples/marker-remove?hl=es</a></p>\n\n<pre><code>// Add a marker to the map and push to the array.\nfunction addMarker(location) {\nvar marker = new google.maps.Marker({\nposition: location,\nmap: map\n});\nmarkers.push(marker);\n}\n\n// Sets the map on all markers in the array.\nfunction setAllMap(map) {\nfor (var i = 0; i &lt; markers.length; i++) {\nmarkers[i].setMap(map);\n }\n}\n\n// Removes the markers from the map, but keeps them in the array.\nfunction clearMarkers() {\nsetAllMap(null);\n}\n\n// Deletes all markers in the array by removing references to them.\nfunction deleteMarkers() {\nclearMarkers();\nmarkers = [];\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I dont' know why, but, setting <code>setMap(null)</code> to my markers didn't work for me when I'm using <code>DirectionsRenderer</code>.</p>\n\n<p>In my case I had to call <code>setMap(null)</code> to my <code>DirectionsRenderer</code> as well.</p>\n\n<p>Something like that:</p>\n\n<pre><code>var directionsService = new google.maps.DirectionsService();\nvar directionsDisplay = new google.maps.DirectionsRenderer();\n\nif (map.directionsDisplay) {\n    map.directionsDisplay.setMap(null);\n}\n\nmap.directionsDisplay = directionsDisplay;\n\nvar request = {\n    origin: start,\n    destination: end,\n    travelMode: google.maps.TravelMode.DRIVING\n};\n\ndirectionsDisplay.setMap(map);\ndirectionsService.route(request, function (result, status) {\n    if (status == google.maps.DirectionsStatus.OK) {\n        directionsDisplay.setDirections(result);\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>In Google Maps API v2, if I wanted to remove all the map markers, I could simply do:</p>\n\n<pre><code>map.clearOverlays();\n</code></pre>\n\n<p>How do I do this in Google Maps API <strong>v3</strong>?</p>\n\n<p>Looking at the <a href=\"http://code.google.com/apis/maps/documentation/v3/reference.html\">Reference API</a>, it's unclear to me.</p>\n",
            "last_activity_date": 1406835693,
            "question_id": 1544739,
            "score": 254,
            "tags": [
                "javascript",
                "html",
                "google-maps",
                "google-maps-api-3"
            ],
            "title": "Google Maps API v3: How to remove all markers?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<pre><code>context.clearRect ( 0 , 0 , canvas.width, canvas.height );\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 340
                },
                {
                    "body": "<p>in webkit you need to set the width to a different value, then you can set it back to the initial value</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<ul>\n<li>Chrome responds well to: <code>context.clearRect ( x , y , w , h );</code> as suggested by @Pentium10 but IE9 seems to completely ignore this instruction.</li>\n<li>IE9 seems to respond to: <code>canvas.width = canvas.width;</code> but it doesn't clear lines, just shapes, pictures and other objects unless you also use @John Allsopp's solution of first changing the width.</li>\n</ul>\n\n<p>So if you have a canvas and context created like this:</p>\n\n<pre><code>var canvas = document.getElementById('my-canvas');\nvar context = canvas.getContext('2d');\n</code></pre>\n\n<p>You can use a method like this:</p>\n\n<pre><code>function clearCanvas(context, canvas) {\n  context.clearRect(0, 0, canvas.width, canvas.height);\n  var w = canvas.width;\n  canvas.width = 1;\n  canvas.width = w;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>If you are drawing lines, make sure you don't forget:</p>\n\n<pre><code>context.beginPath();\n</code></pre>\n\n<p>Otherwise the lines won't get cleared.</p>\n",
                    "is_accepted": false,
                    "score": 89
                },
                {
                    "body": "<p>If you're using JQuery:</p>\n\n<pre><code>var elem = $(\"selector\");\nvar canvas = elem.get(0);\nvar context = canvas.getContext(\"2d\");\n\ncontext.clearRect(0, 0, canvas.width, canvas.height);\ncontext.beginPath();\n</code></pre>\n\n<p>Replace \"selector\" with your actual JQuery selector.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<h2>Use: <code>ctx.clearRect(0, 0, canvas.width, canvas.height);</code></h2>\n\n<p>This is the fastest and most descriptive way to clear the entire canvas.</p>\n\n<h2>Do not use: <code>canvas.width = canvas.width;</code></h2>\n\n<p>Resetting <code>canvas.width</code> resets all canvas state (e.g. transformations, lineWidth, strokeStyle, etc.), it is very slow (compared to clearRect), it doesn't work in all browsers, and it doesn't describe what you are actually trying to do.</p>\n\n<h2>Dealing with transformed coordinates</h2>\n\n<p>If you have modified the transformation matrix (e.g. using <code>scale</code>, <code>rotate</code>, or <code>translate</code>) then <code>ctx.clearRect(0,0,canvas.width,canvas.height)</code> will likely not clear the entire visible portion of the canvas.</p>\n\n<p>The solution? Reset the transformation matrix prior to clearing the canvas:</p>\n\n<pre><code>// Store the current transformation matrix\nctx.save();\n\n// Use the identity matrix while clearing the canvas\nctx.setTransform(1, 0, 0, 1, 0, 0);\nctx.clearRect(0, 0, canvas.width, canvas.height);\n\n// Restore the transform\nctx.restore();\n</code></pre>\n\n<p><strong>Edit:</strong>\nI've just done some profiling and (in Chrome) it is about 10% faster to clear a 300x150 (default size) canvas without resetting the transform. As the size of your canvas increases this difference drops.</p>\n\n<p>That is already relatively insignificant, but in most cases you will be drawing considerably more than you are clearing and I believe this performance difference be irrelevant.</p>\n\n<pre><code>100000 iterations averaged 10 times:\n1885ms to clear\n2112ms to reset and clear\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 389
                },
                {
                    "body": "<p>Others have already done an excellent job answering the question but if a simple <code>clear()</code> method on the context object would be useful to you (it was to me), this is the implementation I use based on answers here:</p>\n\n<pre><code>CanvasRenderingContext2D.prototype.clear = \n  CanvasRenderingContext2D.prototype.clear || function (preserveTransform) {\n    if (preserveTransform) {\n      this.save();\n      this.setTransform(1, 0, 0, 1, 0, 0);\n    }\n\n    this.clearRect(0, 0, this.canvas.width, this.canvas.height);\n\n    if (preserveTransform) {\n      this.restore();\n    }           \n};\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>window.onload = function () {\n  var canvas = document.getElementById('canvasId');\n  var context = canvas.getContext('2d');\n\n  // do some drawing\n  context.clear();\n\n  // do some more drawing\n  context.setTransform(-1, 0, 0, 1, 200, 200);\n  // do some drawing with the new transform\n  context.clear(true);\n  // draw more, still using the preserved transform\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 78
                },
                {
                    "body": "<p>These are all great examples of how you clear a standard canvas, but if you are using paperjs, then this will work:</p>\n\n<p>Define a global variable in JavaScript:</p>\n\n<pre><code>var clearCanvas = false;\n</code></pre>\n\n<p>From your PaperScript define:</p>\n\n<pre><code>function onFrame(event){\n    if(clearCanvas &amp;&amp; project.activeLayer.hasChildren()){\n        project.activeLayer.removeChildren();\n        clearCanvas = false;\n    }\n}\n</code></pre>\n\n<p>Now wherever you set clearCanvas to true, it will clear all the items from the screen.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>there are a ton of good answers here.\none further note is that sometimes it's fun to only partially clear the canvas.\nthat is, \"fade out\" the previous image instead of erasing it entirely.\nthis can give nice trails effects.</p>\n\n<p>it's easy. supposing your background color is white:</p>\n\n<pre><code>// assuming background color = white and \"eraseAlpha\" is a value from 0 to 1.\nmyContext.fillStyle = \"rgba(255, 255, 255, \" + eraseAlpha + \")\";\nmyContext.fillRect(0, 0, w, h);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>fastest way:</p>\n\n<pre><code>canvas = document.getElementById(\"canvas\");\nc = canvas.getContext(\"2d\");\n\n//... some drawing here\n\ni = c.createImageData(canvas.width, canvas.height);\nc.putImageData(i, 0, 0); // clear context by putting empty image data\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I have found that in all browsers I test, the fastest way is to actually fillRect with white, or whataever color you would like.  I have a very large monitor and in full screen mode the clearRect is agonizingly slow, but the fillRect is reasonable.</p>\n\n<pre><code>context.fillStyle = \"#ffffff\";\ncontext.fillRect(0,0,canvas.width, canvas.height);\n</code></pre>\n\n<p>The drawback is that the canvas is no longer transparent.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Use clearRect method by passing x,y co-ordinates and height and width of canvas. ClearRect will clear whole canvas as : </p>\n\n<pre><code>canvas = document.getElementById(\"canvas\");\nctx = canvas.getContext(\"2d\");\nctx.clearRect(0, 0, canvas.width, canvas.height);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<pre><code>function clear(context, color)\n{\n    var tmp = context.fillStyle;\n    context.fillStyle = color;\n    context.fillRect(0, 0, context.canvas.width, context.canvas.height);\n    context.fillStyle = tmp;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>After experimenting with composite operations and drawing images on the canvas I'm now trying to remove images and compositing. How do I do this?</p>\n\n<p>I need to clear the canvas for redrawing other images; this can go on for a while so I don't think drawing a new rectangle every time will be the most efficient option.</p>\n",
            "last_activity_date": 1423086614,
            "question_id": 2142535,
            "score": 324,
            "tags": [
                "javascript",
                "html5",
                "canvas",
                "composite"
            ],
            "title": "How to clear the canvas for redrawing"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>jQuery 1.3.1 min is only 18k in size. I don't think that's too much of a hit to ask on the initial page load. It'll be cached after that. As a result, I host it myself.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I just include the latest version from the jQuery site: <a href=\"http://code.jquery.com/jquery-latest.pack.js\" rel=\"nofollow\">http://code.jquery.com/jquery-latest.pack.js</a>  It suits my needs and I never have to worry about updating.</p>\n\n<p>EDIT:For a major web app, certainly control it; download it and serve it yourself. But for my personal site, I could not care less. Things don't magically disappear, they are usually deprecated first. I keep up with it enough to know what to change for future releases.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I might be old-school about this, but I still frown on hotlinking.  Maybe Google is the exception, but in general, it's really just good manners to host the files on your own server.  </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If you want to use Google, the direct link may be more responsive.  Each library has the path listed for the direct file.  This is the jQuery path</p>\n\n<pre><code>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3.1/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Just reread your question, is there a reason your are using https?  This is the script tag Google lists in their example</p>\n\n<pre><code>&lt;script src=\"http://www.google.com/jsapi\"&gt;&lt;/script&gt;\n&lt;script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>One reason you might want to host on an external server is to work around the browser limitations of concurent connections to particular server.</p>\n\n<p>However, given that the jQuery file you are using will likely not change very often, the browser cache will kick in and make that point moot for the most part.</p>\n\n<p>Second reason to host it on external server is to lower the traffic to your own server.</p>\n\n<p>However, given the size of jQuery, chances are it will be a small part of your traffic. You should probably try to optimize your actual content.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Without a doubt I choose to have JQuery served by Google API servers.  I didn't go with the jsapi method since I don't leverage any other Google API's, however if that ever changed then I would consider it...</p>\n\n<p><strong>First:</strong> The Google api servers are distributed across the world instead of my single server location:  Closer servers usually means faster response times for the visitor.</p>\n\n<p><strong>Second:</strong> Many people choose to have JQuery hosted on Google, so when a visitor comes to my site they may already have the JQuery script in their local cache.  Pre-cached content usually means faster load times for the visitor.</p>\n\n<p><strong>Third:</strong> My web hosting company charges me for the bandwidth used.  No sense consuming 18k per user session if the visitor can get the same file elsewhere.</p>\n\n<p>I understand that I place a portion of trust on Google to serve the correct script file, and to be online and available.  Up to this point I haven't been disappointed with using Google and will continue this configuration until it makes sense not to.</p>\n\n<p><strong>One thing worth pointing out...</strong> If you have a mixture of secure and insecure pages on your site you might want to dynamically change the Google source to avoid the usual warning you see when loading insecure content in a secure page:</p>\n\n<p>Here's what I came up with:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    document.write([\n        \"\\&lt;script src='\",\n        (\"https:\" == document.location.protocol) ? \"https://\" : \"http://\",\n        \"ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js' type='text/javascript'&gt;\\&lt;\\/script&gt;\" \n    ].join(''));\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>UPDATE 9/8/2010</strong> -\nSome suggestions have been made to reduce the complexity of the code by removing the HTTP and HTTPS and simply use the following syntax:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    document.write(\"\\&lt;script src='//ajax.googleapis.com/ajax/libs/jquery/1.2.6/jquery.min.js' type='text/javascript'&gt;\\&lt;\\/script&gt;\");\n&lt;/script&gt;\n</code></pre>\n\n<p>In addition you could also change the url to reflect the jQuery major number if you wanted to make sure that the latest Major version of the jQuery libraries were loaded:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    document.write(\"\\&lt;script src='//ajax.googleapis.com/ajax/libs/jquery/1/jquery.min.js' type='text/javascript'&gt;\\&lt;\\/script&gt;\");\n&lt;/script&gt;\n</code></pre>\n\n<p>Finally, if you don't want to use Google and would prefer jQuery you could use the following source path (keep in mind that jQuery doesn't support SSL connections):</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    document.write(\"\\&lt;script src='http://code.jquery.com/jquery-latest.min.js' type='text/javascript'&gt;\\&lt;\\/script&gt;\");\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 119
                },
                {
                    "body": "<p>In addition to people who advices to host it on own server, I'd proposed to keep it on separate domain (e.g. static.website.com) to allow browsers to load it into separate from other content thread. This tip also works for all static stuff, say images and css.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I have to vote -1 for the libraries hosted on Google.  They are collecting data, google analytics style, with their wrappers around these libraries.  At a minimum, I don't want a client browser doing more than I'm asking it to do, much less anything else on the page.  At worse, this is Google's \"new version\" of not being evil -- using unobtrusive javascript to gather more usage data.</p>\n\n<p>Note: if they've changed this practice, super.  But the last time I considered using their hosted libraries, I monitored the outbound http traffic on my site, and the periodic calls out to google servers were not something I expected to see.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Pros: Host on Google has benefits</p>\n\n<ul>\n<li>Probably faster (their servers are more optimised)</li>\n<li>They handle the caching correctly - 1 year (we struggle to be allowed to make the changes to get the headers right on our servers)</li>\n<li>Users who have already had a link to the Google-hosted version on another domain already have the file in their cache</li>\n</ul>\n\n<p>Cons:</p>\n\n<ul>\n<li>Some browsers may see it as XSS cross-domain and disallow the file.</li>\n<li>Particularly users running the NoScript plugin for Firefox</li>\n</ul>\n\n<p>I wonder if you can INCLUDE from Google, and then check the presence of some Global variable, or somesuch, and if absence load from your server?</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>If I am responsible for the 'live' site I better be aware of everything that is going\non and <strong>into</strong> my site. For that reason I host the jquery-min version myself either on the same server or a static/external server but either way a location where only I (or my program/proxy) can update the library after having verified/tested every change</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There are a few issues here.  Firstly, the async load method you specified:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"https://www.google.com/jsapi\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n  google.load('jquery', '1.3.1');\n  google.setOnLoadCallback(function() {\n    // do stuff\n  });\n&lt;/script&gt;\n</code></pre>\n\n<p>has a couple of issues.  Script tags pause the page load while they are retrieved (if necessary).  Now if they're slow to load this is bad but jQuery is small.  The real problem with the above method is that because the jquery.js load happens independently for many pages, they will finish loading and render before jquery has loaded so any jquery styling you do will be a <strong>visible change for the user</strong>.</p>\n\n<p>The other way is:</p>\n\n<pre><code>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3.1/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Try some simple examples like, have a simple table and change the background of the cells to yellow with the setOnLoadCallback() method vs $(document).ready() with a static jquery.min.js load.  The second method will have no noticeable flicker.  The first will.  Personally I think that's not a good user experience.</p>\n\n<p>As an example run this:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n  &lt;title&gt;Layout&lt;/title&gt;\n  &lt;style type=\"text/css\"&gt;\n    .odd { background-color: yellow; }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;table&gt;\n  &lt;tr&gt;&lt;th&gt;One&lt;/th&gt;&lt;th&gt;Two&lt;/th&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Three&lt;/td&gt;&lt;td&gt;Four&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Five&lt;/td&gt;&lt;td&gt;Six&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Seven&lt;/td&gt;&lt;td&gt;Nine&lt;/td&gt;&lt;/tr&gt;\n  &lt;tr&gt;&lt;td&gt;Nine&lt;/td&gt;&lt;td&gt;Ten&lt;/td&gt;&lt;/tr&gt;\n&lt;/table&gt; \n&lt;script src=\"http://www.google.com/jsapi\"&gt;&lt;/script&gt;\n&lt;script&gt;\n  google.load(\"jquery\", \"1.3.1\");\n  google.setOnLoadCallback(function() {\n    $(function() {\n      $(\"tr:odd\").addClass(\"odd\");\n    });\n  });\n&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>You (should) see the table appear and then the rows go yellow.</p>\n\n<p>The second problem with the google.load() method is that it only hosts a limited range of files.  This is a problem for jquery since it is extremely plug-in dependent.  If you try and include a jquery plugin with a <code>&lt;script src=\"...\"&gt;</code> tag and <code>google.load()</code> the plug-in will probably fail with messages of \"jQuery is not defined\" because it hasn't loaded yet.  I don't really see a way around this.</p>\n\n<p>The third problem (with either method) is that they are one external load.  Assuming you have some plugins and your own Javascript code you're up to a minimum of two external requests to load your Javascript.  You're probably better off getting jquery, all relevant plug-ins and your own code and putting it into one minified file.</p>\n\n<p>From <a href=\"http://cxliv.org/2008/05/27/should_you_use_googles_ajax_libraries_api_for_hosting.php\" rel=\"nofollow\">Should You Use Google's Ajax Libraries API for Hosting?</a>:</p>\n\n<blockquote>\n  <p>As to load times, you're actually\n  loading two scripts - the jsapi script\n  and the mootools script (the\n  compressed version from above). So\n  that is two connections, rather than\n  one. In my experience, I found that\n  the load time was actually 2-3 times\n  slower than loading from my own\n  personal shared server, even though it\n  was coming from Google, and my version\n  of the compressed file was a couple of\n  K larger than Google's. This, even\n  after the file had loaded and\n  (presumably) cached. So for me, since\n  the bandwidth doesn't matter much,\n  isn't going to matter.</p>\n</blockquote>\n\n<p>Lastly you have the potential problem of a paranoid browser flagging the request as some sort of XSS attempt.  It's not typically a problem with default settings but on corporate networks where the user may not have control over which browser they use let alone the security settings you may have a problem.</p>\n\n<p>So in the end I can't really see me using the Google AJAX API for jQuery at least (the more \"complete\" APIs are a different story in some ways) much except to post examples here.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I wouldn't want any public site that I developed to depend on any external site, and thus, I'd host jQuery myself.</p>\n\n<p>Are you willing to have an outage on your site when the other (Google, jquery.com, etc.) goes down?  Less dependencies is the key.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>In head:</p>\n\n<pre><code>  (function() {\n    var jsapi = document.createElement('script'); jsapi.type = 'text/javascript'; jsapi.async = true;\n    jsapi.src = ('https:' == document.location.protocol ? 'https://' : 'http://') + 'www.google.com/jsapi?key=YOUR KEY';\n    (document.getElementsByTagName('head')[0] || document.getElementsByTagName('head')[0]).appendChild(jsapi);\n  })();\n</code></pre>\n\n<p>End of Body:</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\ngoogle.load(\"jquery\", \"version\");\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here some useful resource, hope can help you to chose your CDN.\nMS has recently add a new domain for delivery Libraries trough their CDN.</p>\n\n<p>Old Format: <a href=\"http://ajax.microsoft.com/ajax/jQuery/jquery-1.5.1.js\" rel=\"nofollow\">http://ajax.microsoft.com/ajax/jQuery/jquery-1.5.1.js</a>\nNew Format: <a href=\"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.5.1.js\" rel=\"nofollow\">http://ajax.aspnetcdn.com/ajax/jQuery/jquery-1.5.1.js</a></p>\n\n<p>This should not send all cookies for microsoft.com.\n<a href=\"http://www.asp.net/ajaxlibrary/cdn.ashx#Using_jQuery_from_the_CDN_11\" rel=\"nofollow\">http://www.asp.net/ajaxlibrary/cdn.ashx#Using_jQuery_from_the_CDN_11</a></p>\n\n<p>Here some statistics about most popular technology used on the web across all technology.\n<a href=\"http://trends.builtwith.com/\" rel=\"nofollow\">http://trends.builtwith.com/</a></p>\n\n<p>Hope can help you to choose.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>There are a few ways to include jQuery and jQuery UI and I'm wondering what people are using?</p>\n\n<ul>\n<li>Google JSAPI</li>\n<li>jQuery's site</li>\n<li>your own site/server</li>\n<li>another CDN</li>\n</ul>\n\n<p>I have recently been using Google JSAPI, but have found that it takes a long time to setup an SSL connection or even only to resolve google.com. I have been using the following for Google:</p>\n\n<pre><code>&lt;script src=\"https://www.google.com/jsapi\"&gt;&lt;/script&gt;\n&lt;script&gt;\ngoogle.load('jquery', '1.3.1');\n&lt;/script&gt;\n</code></pre>\n\n<p>I like the idea of using Google so it's cached when visiting other sites and to save bandwidth from our server, but if it keeps being the slow portion of the site, I may change the include.</p>\n\n<p>What do you use? Have you had any issues?</p>\n\n<p><strong>Edit:</strong> Just visited jQuery's site and they use the following method:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.3/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p><strong>Edit2:</strong> Here's how I've been including jQuery without any problems for the last year:</p>\n\n<pre><code>&lt;script src=\"//ajax.googleapis.com/ajax/libs/jquery/1.4.3/jquery.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>The difference is the removal of <code>http:</code>. By removing this, you don't need to worry about switching between http and https.</p>\n",
            "last_activity_date": 1388690070,
            "question_id": 547384,
            "score": 181,
            "tags": [
                "javascript",
                "jquery",
                "ssl",
                "google-ajax-libraries"
            ],
            "title": "Where do you include the jQuery library from? Google JSAPI? CDN?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>It is better to use <strong>named functions</strong> than arguments.callee:</p>\n\n<pre><code> function foo () {\n     ... foo() ...\n }\n</code></pre>\n\n<p>is better than</p>\n\n<pre><code> function () {\n     ... arguments.callee() ...\n }\n</code></pre>\n\n<p>The named function will have access to its caller through the <strong><a href=\"http://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/Function/caller\">caller</a></strong> property:</p>\n\n<pre><code> function foo () {\n     alert(foo.caller);\n }\n</code></pre>\n\n<p>which is better than</p>\n\n<pre><code> function foo () {\n     alert(arguments.callee.caller);\n }\n</code></pre>\n\n<p>The deprecation is due to current ECMAScript <a href=\"http://wiki.ecmascript.org/doku.php?id=es3.1:design_principles\">design principles</a>.</p>\n",
                    "is_accepted": false,
                    "score": 24
                },
                {
                    "body": "<p>Early versions of JavaScript did not allow named function expressions, and because of that we could not make a recursive function expression:</p>\n\n<pre><code> // This snippet will work:\n function factorial(n) {\n     return (!(n&gt;1))? 1 : factorial(n-1)*n;\n }\n [1,2,3,4,5].map(factorial);\n\n\n // But this snippet will not:\n [1,2,3,4,5].map(function(n) {\n     return (!(n&gt;1))? 1 : /* what goes here? */ (n-1)*n;\n });\n</code></pre>\n\n<p>To get around this, <code>arguments.callee</code> was added so we could do:</p>\n\n<pre><code> [1,2,3,4,5].map(function(n) {\n     return (!(n&gt;1))? 1 : arguments.callee(n-1)*n;\n });\n</code></pre>\n\n<p>However this was actually a really bad solution as this (in conjunction with other arguments, callee, and caller issues) make inlining and tail recursion impossible in the general case (you can achieve it in select cases through tracing etc, but even the best code is sub optimal due to checks that would not otherwise be necessary).  The other major issue is that the recursive call will get a different <code>this</code> value, for example:</p>\n\n<pre><code>var global = this;\nvar sillyFunction = function (recursed) {\n    if (!recursed)\n        return arguments.callee(true);\n    if (this !== global)\n        alert(\"This is: \" + this);\n    else\n        alert(\"This is the global\");\n}\nsillyFunction();\n</code></pre>\n\n<p>Anyhow, EcmaScript 3 resolved these issues by allowing named function expressions, e.g.:</p>\n\n<pre><code> [1,2,3,4,5].map(function factorial(n) {\n     return (!(n&gt;1))? 1 : factorial(n-1)*n;\n });\n</code></pre>\n\n<p>This has numerous benefits:</p>\n\n<ul>\n<li><p>The function can be called like any other from inside your code.</p></li>\n<li><p>It does not pollute the namespace.</p></li>\n<li><p>The value of <code>this</code> does not change.</p></li>\n<li><p>It's more performant (accessing the <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions_and_function_scope/arguments\">arguments object</a> is expensive).</p></li>\n</ul>\n\n<h3>Whoops,</h3>\n\n<p>Just realised that in addition to everything else the question was about <code>arguments.callee.caller</code>, or more specifically <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/caller\"><code>Function.caller</code></a>.</p>\n\n<p>At any point in time you can find the deepest caller of any function on the stack, and as I said above, looking at the call stack has one single major effect: It makes a large number of optimizations impossible, or much much more difficult.</p>\n\n<p>Eg. if we can't guarantee that a function <code>f</code> will not call an unknown function, then it is not possible to inline <code>f</code>. Basically it means that any call site that may have been trivially inlinable accumulates a large number of guards, take:</p>\n\n<pre><code> function f(a, b, c, d, e) { return a ? b * c : d * e; }\n</code></pre>\n\n<p>If the js interpreter cannot guarantee that all the provided arguments are numbers at the point that the call is made, it needs to either insert checks for all the arguments before the inlined code, or it cannot inline the function.</p>\n\n<p>Now in this particular case a smart interpreter should be able to rearrange the checks to be more optimal and not check any values that would not be used.  However in many cases that's just not possible and therefore it becomes impossible to inline.</p>\n",
                    "is_accepted": true,
                    "score": 185
                },
                {
                    "body": "<p>there is still an argument for referring to the function without having to hard-code its name.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p><code>arguments.call<b>ee</b>.call<b>er</b></code> is <b>not</b> deprecated, though it does make use of the <a href=\"https://developer.mozilla.org/en/Core%5FJavaScript%5F1.5%5FReference/Global%5FObjects/Function/caller\"><code>Function.call<b>er</b></code></a> property. (<a href=\"https://developer.mozilla.org/En/Core%5FJavaScript%5F1.5%5FReference/Functions%5Fand%5Ffunction%5Fscope/arguments/callee\"><code>arguments.call<b>ee</b></code></a> will just give you a reference to the current function)</p>\n\n<ul>\n<li><code>Function.call<b>er</b></code>, though non-standard according to ECMA3, is implemented across <b>all current major browsers</b>.</li>\n<li><a href=\"https://developer.mozilla.org/En/Core%5FJavaScript%5F1.5%5FReference/Functions%5Fand%5Ffunction%5Fscope/arguments/caller\"><code>arguments.call<b>er</b></code></a> <b>is</b> deprecated in favour of <code>Function.call<b>er</b></code>, and isn't implemented in some current major browsers (e.g. Firefox 3).</li>\n</ul>\n\n<p>So the situation is less than ideal, but if you want to access the calling function in Javascript across all major browsers, you can use the <code>Function.call<b>er</b></code> property, either accessed directly on a named function reference, or from within an anonymous function via the <code>arguments.call<b>ee</b></code> property.</p>\n",
                    "is_accepted": false,
                    "score": 72
                },
                {
                    "body": "<p>Just an extension. The value of \"this\" changes during recursion. In the following (modified) example, factorial gets the {foo:true} object.</p>\n\n<pre><code>[1,2,3,4,5].map(function factorial(n) {\n  console.log(this);\n  return (!(n&gt;1))? 1 : factorial(n-1)*n;\n},     {foo:true}     );\n</code></pre>\n\n<p>factorial called first time gets the object, but this is not true for recursive calls.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Why was the <code>arguments.callee.caller</code> property deprecated in JavaScript?</p>\n\n<p>It was added and then deprecated in JavaScript, but it was omitted altogether by ECMAScript.  Some browser (Mozilla, IE) have always supported it and don't have any plans on the map to remove support.  Others (Safari, Opera) have adopted support for it, but support on older browsers is unreliable.</p>\n\n<p>Is there a good reason to put this valuable functionality in limbo?</p>\n\n<p>(Or alternately, is there a better way to grab a handle on the calling function?)</p>\n",
            "last_activity_date": 1421916254,
            "question_id": 103598,
            "score": 162,
            "tags": [
                "javascript",
                "ecma262"
            ],
            "title": "Why was the arguments.callee.caller property deprecated in JavaScript?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>I don't think that you can do this using simple CSS right now. An image would have this feature, but not a div.</p>\n\n<p>The only way than Javascript for this would be <a href=\"http://disruptive-innovations.com/zoo/cssvariables/\" rel=\"nofollow\">CSS variables</a>.</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>If the entire container structure was percentage based, this would be the default behavior, can you provide a more specific example?</p>\n\n<p>Below is an example of what I mean, if your entire parent hierarchy was % based, any browser window adjustment would work without any additional js/css, is this not a possibility with your layout?</p>\n\n<pre><code>&lt;div style=\"width: 100%;\"&gt;\n   &lt;div style=\"width: 50%; margin: 0 auto;\"&gt;Content&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I've found a way to do this using CSS, but you have to be careful as it may change depending on the flow of your own web site.  I've done it in order to embed video with a constant aspect ratio within a fluid width portion of my web site.</p>\n\n<p>Say you have an embedded video like this:</p>\n\n<pre><code>&lt;object&gt;\n     &lt;param ... /&gt;&lt;param ... /&gt;...\n     &lt;embed src=\"...\" ...&lt;/embed&gt;\n&lt;/object&gt;\n</code></pre>\n\n<p>You could then place this all inside a div with a \"video\" class.  This video class will probably be the fluid element in your website such that, by itself, it has no direct height constraints, but when you resize the browser it will change in width according to the flow of the web site.  This would be the element you are probably trying to get your embedded video in while maintaining a certain aspect ratio of the video.</p>\n\n<p>In order to do this, I put an image before the embedded object within the \"video\" class div.  </p>\n\n<p>!!! The important part is that the image has the correct aspect ratio you wish to maintain.  Also, make sure the size of the image is AT LEAST as big as the smallest you expect the video (or whatever you are maintaining the A.R. of) to get based on your layout.  This will avoid any potential issues in the resolution of the image when it is percentage-resized.  For example, if you wanted to maintain an aspect ratio of 3:2, don't just use a 3px by 2px image.  It may work under some circumstances, but I haven't tested it, and it would probably be a good idea to avoid.  </p>\n\n<p>You should probably already have a minimum width like this defined for fluid elements of your web site.  If not, it is a good idea to do so in order to avoid chopping elements off or having overlap when the browser window gets too small.  It is better to have a scroll bar at some point.  The smallest in width a web page should get is somewhere around ~600px (including any fixed width columns) because screen resolutions don't come smaller unless you are dealing with phone-friendly sites. !!!</p>\n\n<p>I use a completely transparent png but I don't really think it ends up mattering if you do it right. Like this:</p>\n\n<pre><code>&lt;div class=\"video\"&gt;\n     &lt;img class=\"maintainaspectratio\" src=\"maintainaspectratio.png\" /&gt;\n     &lt;object&gt;\n          &lt;param ... /&gt;&lt;param ... /&gt;...\n          &lt;embed src=\"...\" ...&lt;/embed&gt;\n     &lt;/object&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Now you should be able to add CSS similar to the following:</p>\n\n<pre><code>div.video { ...; position: relative; }\ndiv.video img.maintainaspectratio { width: 100%; }\ndiv.video object { position: absolute; top: 0px; left: 0px; width: 100%; height: 100%; }\ndiv.video embed {width: 100%; height: 100%; }\n</code></pre>\n\n<p>Make sure you also remove any explicit height or width declaration within the object and embed tags that usually come with copy/pasted embed code.</p>\n\n<p>The way it works depends on the position properties of the video class element and the item you want have maintain a certain aspect ratio.  It takes advantage of the way an image will maintain its proper aspect ratio when resized in an element.  It tells whatever else is in video class element to take full-advantage of the real estate provided by the dynamic image by forcing its width/height to 100% of the video class element being adjusted by the image. </p>\n\n<p>Pretty cool, eh?</p>\n\n<p>You might have to play around with it a bit to get it to work with your own design, but this actually works surprisingly well for me.  The general concept is there.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Just create a wrapper <code>&lt;div&gt;</code> with a percentage value for <code>padding-bottom</code>, like this:</p>\n\n<pre><code>div.stretchy-wrapper {\n    width: 100%;\n    padding-bottom: 75%;\n}\n</code></pre>\n\n<p>This will result in a <code>&lt;div&gt;</code> with the width of its container and a height equal to 75% of its width (a 4:3 aspect ratio).</p>\n\n<p>Now to place contents in your div stretch the wrapper's child div to the edges of the wrapper:</p>\n\n<pre><code>div.stretchy-wrapper {\n    position: relative;\n}\n\ndiv.stretchy-wrapper &gt; div {\n    position: absolute;\n    top: 0; bottom: 0; left: 0; right: 0;\n}\n</code></pre>\n\n<p><a href=\"http://dabblet.com/gist/2590942\">Here's a demo</a></p>\n\n<p><br></p>\n\n<h2>Update:</h2>\n\n<p>Here's a more in depth demo:\n<a href=\"http://jsbin.com/eqeseb/2/edit\">http://jsbin.com/eqeseb/2/edit</a></p>\n",
                    "is_accepted": true,
                    "score": 211
                },
                {
                    "body": "<p>To add to Web_Designer's answer, the <code>&lt;div&gt;</code> will have a height (entirely made up of bottom padding) of 75% of the width of it's <strong>containing element</strong>. Here's a good summary: <a href=\"http://mattsnider.com/css-using-percent-for-margin-and-padding/\" rel=\"nofollow\">http://mattsnider.com/css-using-percent-for-margin-and-padding/</a>. I'm not sure why this should be so, but that's how it is.</p>\n\n<p>If you want your div to be a width other than 100%, you need another wrapping div on which to set the width:</p>\n\n<pre><code>div.ar-outer{\n    width: 60%; /* container; whatever width you want */\n    margin: 0 auto; /* centered if you like */\n}\ndiv.ar {\n    width:100%; /* 100% of width of container */\n    padding-bottom: 75%; /* 75% of width of container */\n    position:relative;\n}\ndiv.ar-inner {\n    position: absolute;\n    top: 0; bottom: 0; left: 0; right: 0;\n}\n</code></pre>\n\n<p>I used something similar to Elliot's image trick recently to allow me to use CSS media queries to serve a different logo file depending on device resolution, but still scale proportionally as an <code>&lt;img&gt;</code> would naturally do (I set the logo as background image to a transparent .png with the correct aspect ratio). But Web_Designer's solution would save me an http request.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Elliot inspired me to this solution - thanks:</p>\n\n<p><code>aspectratio.png</code> is a completely transparent PNG-file with the size of your preferred aspect-ratio, in my case 30x10 pixels.</p>\n\n<h3>HTML</h3>\n\n<pre><code>&lt;div class=\"eyecatcher\"&gt;\n  &lt;img src=\"/img/aspectratio.png\"/&gt;\n&lt;/div&gt;\n</code></pre>\n\n<h3>CSS3</h3>\n\n<pre><code>.eyecatcher img {\n  width: 100%;\n  background-repeat: no-repeat;\n  background-size: 100% 100%;\n  background-image: url(../img/autoresized-picture.jpg);\n}\n</code></pre>\n\n<p><strong>Please note:</strong> <code>background-size</code> is a css3-feature which might not work with your target-browsers. You may check interoperability (f.e. on <a href=\"http://caniuse.com/#search=background-size\" rel=\"nofollow\">caniuse.com</a>).</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Basing on your solutions I've made some trick:</p>\n\n<p>When you use it your HTML will be only</p>\n\n<pre><code>&lt;div keep-ratio=\"75%\"&gt;\n    &lt;div&gt;Main content&lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>To use it this way make:\nCSS:</p>\n\n<pre><code>*[keep-ratio] {\n    display: block;\n    position: relative;\n}\n*[keep-ratio] &gt; * {\n    position: absolute;\n    left: 0;\n    right: 0;\n    top: 0;\n    bottom: 0;\n}\n</code></pre>\n\n<p>and js (jQuery)</p>\n\n<pre><code>$('*[keep-ratio]').each(function(){ \n    var ratio = $(this).attr('keep-ratio');                 \n    $(this).css('width', '100%').css('padding-bottom', ratio);\n});\n</code></pre>\n\n<p>And having this you just set attr <code>keep-ratio</code> beeing % ratio height/width and thats it</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can also use the <code>Background-size:cover;</code> property to stretch the background image to completely cover the content area.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<h2>Simple CSS solution :</h2>\n\n<p>You can use <code>vw</code> units for the height of the cells :</p>\n\n<blockquote>\n  <p>vw : 1/100th of the <strong>width</strong> of the viewport.  (<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/length#Viewport-percentage_lengths\">Source MDN</a>, emphasis mine)</p>\n</blockquote>\n\n<p>Example for a 4x4 grid of <strong>square divs</strong> :</p>\n\n<p><strong><a href=\"http://jsfiddle.net/webtiki/dAebS/\">DEMO</a></strong></p>\n\n<p><em>HTML :</em></p>\n\n<pre><code>&lt;div&gt;&lt;/div&gt;\n... 16 divs ...\n</code></pre>\n\n<p><em>CSS :</em></p>\n\n<pre><code>div {\n    width:24%;\n    height:24vw;\n    margin:0.5%;\n    background:gold;\n    float:left;\n}\n</code></pre>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>div {\r\n    width:24%;\r\n    height:24vw;\r\n    margin:0.5%;\r\n    background:gold;\r\n    float:left;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;\r\n&lt;div&gt;&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<hr>\n\n<p>These units also allow you to <strong>keep the aspect ratio of an element according to width and height</strong> while always fitting in the viewport see <a href=\"http://stackoverflow.com/questions/23630140/fit-responsive-square-in-viewport-according-to-width-and-height/23631436#23631436\">fit and center a responsive square in viewport</a>.</p>\n\n<hr>\n\n<p>Browser support for vh/vw units is IE9+ see <a href=\"http://caniuse.com/viewport-units\">canIuse for more info</a></p>\n",
                    "is_accepted": false,
                    "score": 29
                }
            ],
            "body": "<p>I want to resize a <code>div</code> container as the window width changes via % width.</p>\n\n<p>To better explain what I'm trying to accomplish... I want to create a grid whose cells (<code>div</code>s) can change in width/height as the window width changes.</p>\n\n<p>Are there any new CSS3 rules that would allow the height to change according to the change of width, maintaining the original aspect ratio?</p>\n\n<p>I know I can do this via JavaScript, I would just rather not if I don't have to.</p>\n",
            "last_activity_date": 1422007958,
            "question_id": 1495407,
            "score": 89,
            "tags": [
                "javascript",
                "html",
                "css",
                "css3"
            ],
            "title": "CSS: A way to maintain aspect ratio when resizing a DIV?"
        },
        {
            "answer_count": 23,
            "answers": [
                {
                    "body": "<p>Well, one simple solution, that doesn't quite add the \"...\", but does prevent the &lt;h2&gt; from breaking into two lines would be to add this bit of css: </p>\n\n<pre><code>h2 {\n    height:some_height_in_px; /* this is the height of the line */\n    overflow:hidden; /* so that the second (or third, fourth, etc.)\n                        line is not visible */\n}\n</code></pre>\n\n<p>I gave it some more thought, and I came up with this solution, you have to wrap the textual contents of your h2 tag with another tag (e.g. a span) (or alternatively wrap the h2s with something that has the given height) and then you can use this sort of javascript to filter out the unneeded words:</p>\n\n<pre><code>var elems = document.getElementById('conainter_of_h2s').\n                     getElementsByTagName('h2');\n\n    for ( var i = 0, l = elems.length; i &lt; l; i++) {\n    \tvar span = elems.item(i).getElementsByTagName('span')[0];\n    \tif ( span.offsetHeight &gt; elems.item(i).offsetHeight ) {\n    \t\tvar text_arr = span.innerHTML.split(' ');\n    \t\tfor ( var j = text_arr.length - 1; j&gt;0 ; j--) {\n    \t\t\tdelete text_arr[j];\n    \t\t\tspan.innerHTML = text_arr.join(' ') + '...';\n    \t\t\tif ( span.offsetHeight &lt;= \n                                        elems.item(i).offsetHeight ){\n    \t\t\t\tbreak;\n    \t\t\t}\n    \t\t}\n    \t}\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There's actually a pretty straightforward way to <a href=\"http://www.jide.fr/emulate-text-overflowellipsis-in-firefox-with-css\" rel=\"nofollow\">do this in CSS</a> exploiting the fact that IE extends this with non-standards and FF supports <code>:after</code></p>\n\n<p>You can also <a href=\"http://www.switchonthecode.com/tutorials/javascript-tutorial-how-to-auto-ellipse-text\" rel=\"nofollow\">do this in JS</a> if you wish by inspecting the scrollWidth of the target and comparing it to it's parents width, but imho this is less robust. </p>\n\n<p>Edit: this is apparently more developed than I thought. CSS3 support may soon exist, and some imperfect extensions are available for you to try.</p>\n\n<ul>\n<li><a href=\"http://www.css3.info/preview/text-overflow/\" rel=\"nofollow\">http://www.css3.info/preview/text-overflow/</a></li>\n<li><a href=\"http://ernstdehaan.blogspot.com/2008/10/ellipsis-in-all-modern-browsers.html\" rel=\"nofollow\">http://ernstdehaan.blogspot.com/2008/10/ellipsis-in-all-modern-browsers.html</a></li>\n</ul>\n\n<p>That last one is good reading.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I'd done something similar for a client recently.  Here's a version of what I did for them (example tested in all latest browser versions on Win Vista).  Not perfect all around the board, but could be tweaked pretty easily.</p>\n\n<p>Demo: <a href=\"http://enobrev.info/ellipsis/\" rel=\"nofollow\">http://enobrev.info/ellipsis/</a></p>\n\n<p>Code:</p>\n\n<pre><code>&lt;html&gt;\n    &lt;head&gt;\n    \t&lt;script src=\"http://www.google.com/jsapi\"&gt;&lt;/script&gt;\n    \t&lt;script&gt;\t\t\t\n    \t\tgoogle.load(\"jquery\", \"1.2.6\");\n    \t\tgoogle.setOnLoadCallback(function() {\n    \t\t\t$('.longtext').each(function() {\n    \t\t\t\tif ($(this).attr('scrollWidth') &gt; $(this).width()) {\n    \t\t\t\t\t$more = $('&lt;b class=\"more\"&gt;&amp;hellip;&lt;/b&gt;');\n\n    \t\t\t\t\t// add it to the dom first, so it will have dimensions\n    \t\t\t\t\t$(this).append($more);\n\n    \t\t\t\t\t// now set the position\n    \t\t\t\t\t$more.css({\n    \t\t\t\t\t\ttop: '-' + $(this).height() + 'px',\n    \t\t\t\t\t\tleft: ($(this).attr('offsetWidth') - $more.attr('offsetWidth')) + 'px'\n    \t\t\t\t\t});\n    \t\t\t\t}\n    \t\t\t});\n    \t\t});\n    \t&lt;/script&gt;\n\n    \t&lt;style&gt;\n    \t\t.longtext {\n    \t\t\theight: 20px;\n    \t\t\twidth: 300px;\n    \t\t\toverflow: hidden;\n    \t\t\twhite-space: nowrap;\n    \t\t\tborder: 1px solid #f00;\n    \t\t}\n\n    \t\t.more {\n    \t\t\tz-index: 10;\n    \t\t\tposition: relative;\n    \t\t\tdisplay: block;\n    \t\t\tbackground-color: #fff;\n    \t\t\twidth: 18px;\n    \t\t\tpadding: 0 2px;\n    \t\t}\n    \t&lt;/style&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n    \t&lt;p class=\"longtext\"&gt;This is some really long text.  This is some really long text.  This is some really long text.  This is some really long text.&lt;/p&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>There is a simple jQuery solution by <a href=\"http://stackoverflow.com/users/140951/devongovett\">Devon Govett</a>:</p>\n\n<p><a href=\"https://gist.github.com/digulla/5796047\" rel=\"nofollow\">https://gist.github.com/digulla/5796047</a></p>\n\n<blockquote>\n  <p>To use, just call ellipsis() on a jQuery object. For example:</p>\n  \n  <p>$(\"span\").ellipsis();</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I've got a solution working in FF3, Safari and IE6+ with single and multiline text</p>\n\n<pre><code>.ellipsis {\n\twhite-space: nowrap;\n\toverflow: hidden;\n}\n\n.ellipsis.multiline {\n\twhite-space: normal;\n}\n\n&lt;div class=\"ellipsis\" style=\"width: 100px; border: 1px solid black;\"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit&lt;/div&gt;\n&lt;div class=\"ellipsis multiline\" style=\"width: 100px; height: 40px; border: 1px solid black; margin-bottom: 100px\"&gt;Lorem ipsum dolor sit amet, consectetur adipisicing elit&lt;/div&gt;\n\n&lt;script type=\"text/javascript\" src=\"/js/jquery.ellipsis.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n$(\".ellipsis\").ellipsis();\n&lt;/script&gt;\n</code></pre>\n\n<p>jquery.ellipsis.js</p>\n\n<pre><code>(function($) {\n\t$.fn.ellipsis = function()\n\t{\n\t\treturn this.each(function()\n\t\t{\n\t\t\tvar el = $(this);\n\n\t\t\tif(el.css(\"overflow\") == \"hidden\")\n\t\t\t{\n\t\t\t\tvar text = el.html();\n\t\t\t\tvar multiline = el.hasClass('multiline');\n\t\t\t\tvar t = $(this.cloneNode(true))\n\t\t\t\t\t.hide()\n\t\t\t\t\t.css('position', 'absolute')\n\t\t\t\t\t.css('overflow', 'visible')\n\t\t\t\t\t.width(multiline ? el.width() : 'auto')\n\t\t\t\t\t.height(multiline ? 'auto' : el.height())\n\t\t\t\t\t;\n\n\t\t\t\tel.after(t);\n\n\t\t\t\tfunction height() { return t.height() &gt; el.height(); };\n\t\t\t\tfunction width() { return t.width() &gt; el.width(); };\n\n\t\t\t\tvar func = multiline ? height : width;\n\n\t\t\t\twhile (text.length &gt; 0 &amp;&amp; func())\n\t\t\t\t{\n\t\t\t\t\ttext = text.substr(0, text.length - 1);\n\t\t\t\t\tt.html(text + \"...\");\n\t\t\t\t}\n\n\t\t\t\tel.html(t.html());\n\t\t\t\tt.remove();\n\t\t\t}\n\t\t});\n\t};\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 93
                },
                {
                    "body": "<p>The following CSS only solution for truncating text on a single line works with all browers listed at <a href=\"http://www.caniuse.com\">http://www.caniuse.com</a> as of writing with the exception of Firefox 6.0. Note that JavaScript is totally unnecessary unless you need to support wrapping multiline text or earlier versions of Firefox.</p>\n\n<pre><code>.ellipsis {\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    -o-text-overflow: ellipsis;\n}\n</code></pre>\n\n<p>If you need support for earlier versions of Firefox check out <a href=\"http://stackoverflow.com/a/1101702/2766\">my answer on this other question</a>.</p>\n",
                    "is_accepted": false,
                    "score": 131
                },
                {
                    "body": "<p>I made a really cool jQuery plugin for handling all varieties of ellipsis of text is one called ThreeDots @ <a href=\"http://tpgblog.com/threedots\">http://tpgblog.com/threedots</a></p>\n\n<p>It's much more flexible than the CSS approaches, and supports much more advanced, customizable behaviors and interactions.</p>\n\n<p>Enjoy.</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>This is similar to Alex's but does it in log time instead of linear, and takes a maxHeight parameter.</p>\n\n<pre><code>jQuery.fn.ellipsis = function(text, maxHeight) {\n  var element = $(this);\n  var characters = text.length;\n  var step = text.length / 2;\n  var newText = text;\n  while (step &gt; 0) {\n    element.html(newText);\n    if (element.outerHeight() &lt;= maxHeight) {\n      if (text.length == newText.length) {\n        step = 0;\n      } else {\n        characters += step;\n        newText = text.substring(0, characters);\n      }\n    } else {\n      characters -= step;\n      newText = newText.substring(0, characters);\n    }\n    step = parseInt(step / 2);\n  }\n  if (text.length &gt; newText.length) {\n    element.html(newText + \"...\");\n    while (element.outerHeight() &gt; maxHeight &amp;&amp; newText.length &gt;= 1) {\n      newText = newText.substring(0, newText.length - 1);\n      element.html(newText + \"...\");\n    }\n  }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I rewrote Alex's function to use to the MooTools library. I changed it a bit to word jump rather than add the ellipsis in the middle of a word.</p>\n\n<pre><code>Element.implement({\nellipsis: function() {\n    if(this.getStyle(\"overflow\") == \"hidden\") {\n        var text = this.get('html');\n        var multiline = this.hasClass('multiline');\n        var t = this.clone()\n            .setStyle('display', 'none')\n            .setStyle('position', 'absolute')\n            .setStyle('overflow', 'visible')\n            .setStyle('width', multiline ? this.getSize().x : 'auto')\n            .setStyle('height', multiline ? 'auto' : this.getSize().y)\n            .inject(this, 'after');\n\n        function height() { return t.measure(t.getSize).y &gt; this.getSize().y; };\n        function width() { return t.measure(t.getSize().x &gt; this.getSize().x; };\n\n        var func = multiline ? height.bind(this) : width.bind(this);\n\n        while (text.length &gt; 0 &amp;&amp; func()) {\n            text = text.substr(0, text.lastIndexOf(' '));\n            t.set('html', text + \"...\");\n        }\n\n        this.set('html', t.get('html'));\n        t.dispose();\n    }\n}\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>A more flexible jQuery plugin enabling you to keep a element after the ellipsis (for example a \"read-more\" button) and update onWindowResize. It also works around text with markup:</p>\n\n<p><a href=\"http://dotdotdot.frebsite.nl\">http://dotdotdot.frebsite.nl</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I couldn't find a script that worked exactly as I wanted it so did my own for jQuery - quite a few options to set with more on their way :)</p>\n\n<p><a href=\"https://github.com/rmorse/AutoEllipsis\" rel=\"nofollow\">https://github.com/rmorse/AutoEllipsis</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I was a bit surprised by the behavior of the css though. </p>\n\n<pre><code>var cssEllipsis = \n{   \"width\": \"100%\",\"display\": \"inline-block\", \n\"vertical-align\": \"middle\", \"white-space\": \"nowrap\", \n\"overflow\": \"hidden\", \"text-overflow\": \"ellipsis\" \n};\n</code></pre>\n\n<p>Unless I provided the width to the control to which i needed to bind the ellipsis didn't suppost my cause. Is width a must property to be added ???\nPlease put your thoughts.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>DO THE ELLIPSIS USING <strong>ONLY CSS</strong></p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;style type=\"text/css\"&gt;\n#ellipsisdiv {\n    width:200px;\n    white-space: nowrap;  \n    overflow: hidden;  \n    text-overflow: ellipsis;  \n}  \n&lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"ellipsisdiv\"&gt;\nThis content is more than 200px and see how the the ellipsis comes at the end when the content width exceeds the div width.\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>*This code works on most current browsers. If you experience any problem with Opera and IE (which probably you won't), add these in the style:</p>\n\n<pre><code>-o-text-overflow: ellipsis;  \n-ms-text-overflow: ellipsis;\n</code></pre>\n\n<p>* This feature is part of CSS3. Its complete syntax is:</p>\n\n<pre><code>text-overflow: clip|ellipsis|string;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here's another JavaScript solution.\nWorks very good and very fast.</p>\n\n<p><a href=\"https://github.com/dobiatowski/jQuery.FastEllipsis\" rel=\"nofollow\">https://github.com/dobiatowski/jQuery.FastEllipsis</a></p>\n\n<p>Tested on Chrome, FF, IE on Windows and Mac.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I built this code using a number of other posts, with the following enhancements:</p>\n\n<ol>\n<li>It uses a binary search to find the text length that is just right.</li>\n<li>It handles cases where the ellipsis element(s) are initially hidden by setting up a one-shot show event that re-runs the ellipsis code when the item is first displayed.  This is handy for master-detail views or tree-views where some items aren't initially displayed.</li>\n<li>It optionally adds a title attribute with the original text for a hoverover effect.</li>\n<li>Added <code>display: block</code> to the style, so spans work</li>\n<li>It uses the ellipsis character instead of 3 periods.</li>\n<li>It auto-runs the script for anything with the .ellipsis class</li>\n</ol>\n\n<p>CSS:</p>\n\n<pre><code>.ellipsis {\n        white-space: nowrap;\n        overflow: hidden;\n        display: block;\n}\n\n.ellipsis.multiline {\n        white-space: normal;\n}\n</code></pre>\n\n<p>jquery.ellipsis.js</p>\n\n<pre><code>(function ($) {\n\n    // this is a binary search that operates via a function\n    // func should return &lt; 0 if it should search smaller values\n    // func should return &gt; 0 if it should search larger values\n    // func should return = 0 if the exact value is found\n    // Note: this function handles multiple matches and will return the last match\n    // this returns -1 if no match is found\n    function binarySearch(length, func) {\n        var low = 0;\n        var high = length - 1;\n        var best = -1;\n        var mid;\n\n        while (low &lt;= high) {\n            mid = ~ ~((low + high) / 2); //~~ is a fast way to convert something to an int\n            var result = func(mid);\n            if (result &lt; 0) {\n                high = mid - 1;\n            } else if (result &gt; 0) {\n                low = mid + 1;\n            } else {\n                best = mid;\n                low = mid + 1;\n            }\n        }\n\n        return best;\n    }\n\n    // setup handlers for events for show/hide\n    $.each([\"show\", \"toggleClass\", \"addClass\", \"removeClass\"], function () {\n\n        //get the old function, e.g. $.fn.show   or $.fn.hide\n        var oldFn = $.fn[this];\n        $.fn[this] = function () {\n\n            // get the items that are currently hidden\n            var hidden = this.find(\":hidden\").add(this.filter(\":hidden\"));\n\n            // run the original function\n            var result = oldFn.apply(this, arguments);\n\n            // for all of the hidden elements that are now visible\n            hidden.filter(\":visible\").each(function () {\n                // trigger the show msg\n                $(this).triggerHandler(\"show\");\n            });\n\n            return result;\n        };\n    });\n\n    // create the ellipsis function\n    // when addTooltip = true, add a title attribute with the original text\n    $.fn.ellipsis = function (addTooltip) {\n\n        return this.each(function () {\n            var el = $(this);\n\n            if (el.is(\":visible\")) {\n\n                if (el.css(\"overflow\") === \"hidden\") {\n                    var content = el.html();\n                    var multiline = el.hasClass('multiline');\n                    var tempElement = $(this.cloneNode(true))\n                        .hide()\n                        .css('position', 'absolute')\n                        .css('overflow', 'visible')\n                        .width(multiline ? el.width() : 'auto')\n                        .height(multiline ? 'auto' : el.height())\n                    ;\n\n                    el.after(tempElement);\n\n                    var tooTallFunc = function () {\n                        return tempElement.height() &gt; el.height();\n                    };\n\n                    var tooWideFunc = function () {\n                        return tempElement.width() &gt; el.width();\n                    };\n\n                    var tooLongFunc = multiline ? tooTallFunc : tooWideFunc;\n\n                    // if the element is too long...\n                    if (tooLongFunc()) {\n\n                        var tooltipText = null;\n                        // if a tooltip was requested...\n                        if (addTooltip) {\n                            // trim leading/trailing whitespace\n                            // and consolidate internal whitespace to a single space\n                            tooltipText = $.trim(el.text()).replace(/\\s\\s+/g, ' ');\n                        }\n\n                        var originalContent = content;\n\n                        var createContentFunc = function (i) {\n                            content = originalContent.substr(0, i);\n                            tempElement.html(content + \"\u2026\");\n                        };\n\n                        var searchFunc = function (i) {\n                            createContentFunc(i);\n                            if (tooLongFunc()) {\n                                return -1;\n                            }\n                            return 0;\n                        };\n\n                        var len = binarySearch(content.length - 1, searchFunc);\n\n                        createContentFunc(len);\n\n                        el.html(tempElement.html());\n\n                        // add the tooltip if appropriate\n                        if (tooltipText !== null) {\n                            el.attr('title', tooltipText);\n                        }\n                    }\n\n                    tempElement.remove();\n                }\n            }\n            else {\n                // if this isn't visible, then hook up the show event\n                el.one('show', function () {\n                    $(this).ellipsis(addTooltip);\n                });\n            }\n        });\n    };\n\n    // ellipsification for items with an ellipsis\n    $(document).ready(function () {\n        $('.ellipsis').ellipsis(true);\n    });\n\n} (jQuery));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>I rewrote the code from the first answer a few times, and I think this should be the fastest.</p>\n\n<p>It first finds an \"Estimated\" text length, and then adds or removes a character until the width is correct.</p>\n\n<p>I haven't tested it with multilines.  </p>\n\n<p>The logic it uses is shown below:</p>\n\n<p><img src=\"http://i.stack.imgur.com/8KfW2.png\" alt=\"enter image description here\"></p>\n\n<p>After an \"estimated\" text length is found, characters are added or removed until the desired width is reached.</p>\n\n<p>I'm sure it needs some tweaking, but here's the code:</p>\n\n<pre><code>(function ($) {\n    $.fn.ellipsis = function () {\n        return this.each(function () {\n            var el = $(this);\n\n            if (el.css(\"overflow\") == \"hidden\") {\n                var text = el.html().trim();\n                var t = $(this.cloneNode(true))\n                                        .hide()\n                                        .css('position', 'absolute')\n                                        .css('overflow', 'visible')\n                                        .width('auto')\n                                        .height(el.height())\n                                        ;\n                el.after(t);\n\n                function width() { return t.width() &gt; el.width(); };\n\n                if (width()) {\n\n                    var myElipse = \"....\";\n\n                    t.html(text);\n\n                    var suggestedCharLength = (text.length * el.width() / t.width()) - myElipse.length;\n\n                    t.html(text.substr(0, suggestedCharLength) + myElipse);\n\n                    var x = 1;\n                    if (width()) {\n                        while (width()) {\n                            t.html(text.substr(0, suggestedCharLength - x) + myElipse);\n                            x++;\n                        }\n                    }\n                    else {\n                        while (!width()) {\n                            t.html(text.substr(0, suggestedCharLength + x) + myElipse);\n                            x++;\n                        }\n                        x--;\n                        t.html(text.substr(0, suggestedCharLength + x) + myElipse);\n                    }\n\n                    el.html(t.html());\n                    t.remove();\n                }\n            }\n        });\n    };\n})(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Here is a nice widget/plugin library which has ellipsis built in: <a href=\"http://www.codeitbetter.co.uk/widgets/ellipsis/\" rel=\"nofollow\">http://www.codeitbetter.co.uk/widgets/ellipsis/</a> All you need to do it reference the library and call the following: </p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt; \n   $(document).ready(function () { \n      $(\".ellipsis_10\").Ellipsis({ \n         numberOfCharacters: 10, \n         showLessText: \"less\", \n         showMoreText: \"more\" \n      }); \n   }); \n&lt;/script&gt; \n&lt;div class=\"ellipsis_10\"&gt; \n   Some text here that's longer than 10 characters. \n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>trunk8 jQuery plugin supports multiple lines, and can use any html, not just ellipsis characters, for the truncation suffix: <a href=\"https://github.com/rviscomi/trunk8\">https://github.com/rviscomi/trunk8</a></p>\n\n<p>Demo here: <a href=\"http://jrvis.com/trunk8/\">http://jrvis.com/trunk8/</a></p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>you can do this much easier with css only, for example : sass mode</p>\n\n<pre><code>.truncatedText {\n   font-size: 0.875em;\n   line-height: 1.2em;\n   height: 2.4em; // 2 lines * line-height\n   &amp;:after {\n      content: \" ...\";\n   }\n}\n</code></pre>\n\n<p>and you have ellipsis ;)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There's a solution for multi-line text with pure css. It's called <code>line-clamp</code>, but it only works in webkit browsers. There is however a way to mimic this in all modern browsers (everything more recent than IE8.) Also, it will only work on solid backgrounds because you need a background-image to hide the last words of the last line. Here's how it goes:</p>\n\n<p>Given this html:</p>\n\n<pre><code>&lt;p class=\"example\" id=\"example-1\"&gt;\n    Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\n&lt;/p&gt;\n</code></pre>\n\n<p>Here's the CSS:</p>\n\n<pre><code>p {\n    position:relative;\n    line-height:1.4em;\n    height:4.2em;      /* 3 times the line-height to show 3 lines */\n}\np::after {\n    content:\"...\";\n    font-weight:bold;\n    position:absolute;\n    bottom:0;\n    right:0;\n    padding:0 20px 1px 45px;\n    background:url(ellipsis_bg.png) repeat-y;\n}\n</code></pre>\n\n<p>ellipsis_bg.png being an image of the same color of your background, that would be about 100px wide and have the same height as your line-height.</p>\n\n<p>It's not very pretty, as your text may be cut of in the middle of a letter, but it may be useful in some cases.</p>\n\n<p>Reference: <a href=\"http://www.css-101.org/articles/line-clamp/line-clamp_for_non_webkit-based_browsers.php\" rel=\"nofollow\">http://www.css-101.org/articles/line-clamp/line-clamp_for_non_webkit-based_browsers.php</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Just in case y'all end up here in 2013 - here is a pure css approach I found here: <a href=\"http://css-tricks.com/snippets/css/truncate-string-with-ellipsis/\">http://css-tricks.com/snippets/css/truncate-string-with-ellipsis/</a></p>\n\n<pre><code>.truncate {\n  width: 250px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n</code></pre>\n\n<p>It works well. </p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>Just like @acSlater I couldn't find something for what I needed so I rolled my own. Sharing in case anyone else can use: </p>\n\nMethod:\n\n<pre><code>ellipsisIfNecessary(mystring,maxlength);\n</code></pre>\n\nUsage:\n\n<pre><code>trimmedString = ellipsisIfNecessary(mystring,50);\n</code></pre>\n\nCode and Demo Link: <a href=\"https://gist.github.com/cemerson/10368014\" rel=\"nofollow\">https://gist.github.com/cemerson/10368014</a>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Following is the solution which clips lines(configurable) and also the clipping text is configurable. Works in all browzsers and devices. Say I want to keep first 2 lines(as per device width)., then the solution is as follows:</p>\n\n<p>Here 26px is the height of 2 lines of text. This should be changed according to font-size and line-height.\ncss:</p>\n\n<pre><code>.clip{\nposition: relative;\nheight: 26px;\nbox-sizing: content-box;\noverflow: hidden;\n\n}\nspan.dots {\nposition: absolute;\nbottom: 0px;\nright: 0px;\nbackground-color: white;\npadding-left: 3px;\nborder-top: none;\ncursor: pointer;\ncolor: blue;\n\n}\n.less{\nposition:relative!important;\n}\n</code></pre>\n\n<p>javascript: span.dots is the class of view-more-less clipping text.</p>\n\n<pre><code>$('span.dots').click(dotsHandler);\n\nvar dotsHandler=function(){\n                        $this=$(this);\n                        $this.parent().toggleClass('clip');\n                        $this.toggleClass('less');\n                        if($this.text()==multipleOffersModule.clipViewMoreText)\n                        {\n                            $this.text(multipleOffersModule.clipViewLessText);\n                        }\n                        else\n                        {\n                            $this.text(multipleOffersModule.clipViewMoreText);\n                        }\n                    }\n\nvar clipText= function(divValue){\n                                if(Number($(divValue).height())&gt;Number(multipleOffersModule.maxHeightOfTextDiv))\n                                    {\n                                        if($(divValue).find('.dots').length==0)\n                                        {\n                                            $(divValue).append('&lt;span class=\"dots\"&gt;'+multipleOffersModule.clipViewMoreText+'&lt;/span&gt;');\n                                        }\n                                        $(divValue).addClass('clip');\n                                    }\n\n                            };\n</code></pre>\n\n<p>Now you may use clipText(div) function on any div containing multiline or single line text and clipping will be done according to screen width.</p>\n\n<p>I know I have used some variable names as per my project but I am sure that those are quite understandable.</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I have a webpage with an elastic layout that changes its width if the browser window is resized.</p>\n\n<p>In this layout there are headlines (<code>h2</code>) that will have a variable length (actually being headlines from blogposts that I don't have control over). Currently - if they are wider than the window - they are broken into two lines.</p>\n\n<p>Is there an elegant, tested (cross-browser) solution - for example with jQuery - that shortens the innerHTML of that headline tag and adds \"...\" if the text would be too wide to fit into one line at the current screen/container width?</p>\n",
            "last_activity_date": 1411378194,
            "question_id": 536814,
            "score": 110,
            "tags": [
                "javascript",
                "html",
                "ellipsis",
                "elasticlayout"
            ],
            "title": "Insert ellipsis (...) into HTML tag if content too wide"
        }
    ]
}
