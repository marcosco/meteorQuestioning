{
    "items": [
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><code>~</code> is a <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Operators/Bitwise_Operators?redirectlocale=en-US&amp;redirectslug=Core_JavaScript_1.5_Reference/Operators/Bitwise_Operators\">bitwise operator</a> that flips all bits in its operand.</p>\n\n<p>For example, if your number was <code>1</code>, its binary representation of the IEEE 754 float (how JavaScript treats numbers) would be...</p>\n\n<pre><code>0011 1111 1111 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000\n</code></pre>\n\n<p>So <code>~</code> converts its operand to a 32 bit integer (bitwise operators in JavaScript do that)...</p>\n\n<pre><code>0000 0000 0000 0000 0000 0000 0000 0001\n</code></pre>\n\n<p><sup>If it were a negative number, it'd be stored in 2's complement: invert all bits and add 1.</sup></p>\n\n<p>...and then flips all its bits...</p>\n\n<pre><code>1111 1111 1111 1111 1111 1111 1111 1110\n</code></pre>\n\n<blockquote>\n  <p>So what is the use of it, then? When might one ever use it?</p>\n</blockquote>\n\n<p>It has a quite a few uses. If you're writing low level stuff, it's handy (for example, I'm writing an emulator at the moment which uses it).</p>\n\n<p>It's also a (generally) unclear <em>trick</em> to turn <code>indexOf()</code>'s <em>found</em> return value into <em>truthy</em> (while making <em>not found</em> as <em>falsy</em>) and people often use it for its side effect of truncating numbers to 32 bits (and dropping its decimal place by doubling it, effectively the same as <code>Math.floor()</code> for positive numbers). </p>\n\n<p>I say <em>unclear</em> because it's not immediately obvious what it is being used for. Generally, you want your code to communicate clearly to other people reading it. While using <code>~</code> may <em>look cool</em>, it's generally too clever for its own good. :)</p>\n",
                    "is_accepted": true,
                    "score": 30
                },
                {
                    "body": "<p>Using it before an <code>indexOf()</code> expression effectively gives you a truthy/falsy result instead of the numeric index that's directly returned.</p>\n\n<p>If the return value is <code>-1</code>, then <code>~-1</code> is <code>0</code> because <code>-1</code> is a string of all  1 bits.  Any value greater than or equal to zero will give a non-zero result. Thus, </p>\n\n<pre><code>if (~someString.indexOf(something)) {\n}\n</code></pre>\n\n<p>will cause the <code>if</code> code to run when \"something\" is in \"someString\".  If you try to use <code>.indexOf()</code> as a boolean directly, then that won't work because sometimes it returns zero (when \"something\" is at the beginning of the string). </p>\n\n<p>Of course, this works too:</p>\n\n<pre><code>if (someString.indexOf(something) &gt;= 0) {\n}\n</code></pre>\n\n<p>and it's considerably less mysterious.</p>\n\n<p>Sometimes you'll also see this:</p>\n\n<pre><code>var i = ~~something;\n</code></pre>\n\n<p>Using the <code>~</code> operator twice like that is a quick way to convert a string to a 32-bit integer. The first <code>~</code> does the conversion, and the second <code>~</code> flips the bits back.  Of course if the operator is applied to something that's cannot be converted to a number, you get <code>NaN</code> as a result. (<em>edit</em> &mdash; actually it's the second <code>~</code> that is applied first, but you get the idea.)</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p><code>~indexOf(item)</code> comes up quite often, and the answers here are great, but maybe some people just want to look up the <strong>usage</strong> and skip the theory:</p>\n\n<pre><code>   if (~list.indexOf(item)) {\n     // item exists in list\n   }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<pre><code>var attr = ~'input,textarea'.indexOf( target.tagName.toLowerCase() )\n           ? 'value'\n           : 'innerHTML'\n</code></pre>\n\n<p>Saw it in an answer and I've never seen it before.</p>\n\n<p>What does it mean?</p>\n",
            "last_activity_date": 1425008288,
            "question_id": 12299665,
            "score": 20,
            "tags": [
                "javascript",
                "syntax",
                "bit-manipulation"
            ],
            "title": "What does a tilde do when it precedes an expression?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>JavaScript code runs on a single thread, so you cannot principally block to wait for the first loop iteration to complete before beginning the next without seriously impacting page usability.</p>\n\n<p>The solution depends on what you really need.  If the example is close to exactly what you need, @Simon's suggestion to pass <code>i</code> to your async process is a good one.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You have to freeze the value of <code>i</code> by passing it into a function somewhere so it's value exists uniquely for each iteration of the loop in a function closure.  Otherwise, all asynch callbacks will just see the value of <code>i</code> at the end of the loop which is the value it has when they execute their callbacks (sometime later when the loop has finished), not each their own value.  </p>\n\n<p>Assuming you can't change the asynchronous function callback, then you could do it with a self executing function like this which creates a unique function closure for each iteration of the loop:</p>\n\n<pre><code>var i;\nvar j = 10;\nfor (i = 0; i &lt; j; i++) {\n    (function(cntr) {\n        // here the value of i was passed into as the argument cntr\n        // and will be captured in this function closure so each\n        // iteration of the loop can have it's own value\n        asycronouseProcess(function() {\n            alert(cntr);\n        });\n    })(i);\n}\n</code></pre>\n\n<p>If you can modify the <code>asycronouseProcess()</code> function, then you could just pass the value in there and have the <code>asycronouseProcess()</code> function the cntr back to the callback like this:</p>\n\n<pre><code>var i;\nvar j = 10;\nfor (i = 0; i &lt; j; i++) {\n    asycronouseProcess(i, function(cntr) {\n        alert(cntr);\n    });\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 22
                },
                {
                    "body": "<blockquote>\n  <p>Any recommendation on how to fix this?</p>\n</blockquote>\n\n<p>Several. You can use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind\" rel=\"nofollow\">bind</a>:</p>\n\n<pre><code>for (i = 0; i &lt; j; i++) {\n    asycronouseProcess(function (i) {\n        alert(i);\n    }.bind(null, i));\n}\n</code></pre>\n\n<p>Or, if your browser supports <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Statements/let\" rel=\"nofollow\">let</a> (it will be in the next ECMAScript version, however Firefox already supports it since a while) you could have:</p>\n\n<pre><code>for (i = 0; i &lt; j; i++) {\n    let k = i;\n    asycronouseProcess(function() {\n        alert(k);\n    });\n}\n</code></pre>\n\n<p>Or, you could do the job of <code>bind</code> manually (in case the browser doesn't support it, but I would say you can implement a shim in that case, it should be in the link above):</p>\n\n<pre><code>for (i = 0; i &lt; j; i++) {\n    asycronouseProcess(function(i) {\n        return function () {\n            alert(i)\n        }\n    }(i));\n}\n</code></pre>\n\n<p>I usually prefer <code>let</code> when I can use it (e.g. for Firefox add-on); otherwise <code>bind</code> or a custom <a href=\"http://en.wikipedia.org/wiki/Currying\" rel=\"nofollow\">currying</a> function (that doesn't need a context object).</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I am running an event loop of the following form:</p>\n\n<pre><code>var i;\nvar j = 10;\nfor (i = 0; i &lt; j; i++) {\n\n    asycronouseProcess(callBackFunction() {\n        alert(i);\n    });\n}\n</code></pre>\n\n<p>What I would like this to display is a series of alerts showing numbers 0 through 10. The problem is that by the time the call back function is triggered the loop has already gone through a few iterations and it displays a higher value of i. Any recommendation on how to fix this?</p>\n",
            "last_activity_date": 1342310386,
            "question_id": 11488014,
            "score": 11,
            "tags": [
                "javascript",
                "asynchronous",
                "for-loop",
                "synchronization"
            ],
            "title": "Asynchronous Process inside a javascript for loop"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>No, You can't, filename and file content are send to the server in http <s>header</s>body, javascript cannot manipulate those fields.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can do this on browsers that support the new <a href=\"http://www.w3.org/TR/file-upload/\">File API</a> from the W3C, using the <a href=\"http://www.w3.org/TR/file-upload/#dfn-readAsDataURL\"><code>readAsDataURL</code></a> function on the <code>FileReader</code> interface and assigning the data URL to the <code>src</code> of an <code>img</code> (after which you can read the <code>height</code> and <code>width</code> of the image). Currently Firefox 3.6 supports the File API, and I think Chrome and Safari either already do or are about to.</p>\n\n<p>So your logic during the transitional phase would be something like this:</p>\n\n<ol>\n<li><p>Detect whether the browser supports the File API (which is easy: <code>if (typeof window.FileReader === 'function')</code>).</p></li>\n<li><p>If it does, great, read the data locally and insert it in an image to find the dimensions.</p></li>\n<li><p>If not, upload the file to the server (probably submitting the form from an iframe to avoid leaving the page), and then poll the server asking how big the image is (or just asking for the uploaded image, if you prefer).</p></li>\n</ol>\n\n<p><strong>Edit</strong> I've been meaning to work up an example of the File API for some time; here's one:</p>\n\n<pre><code>&lt;!DOCTYPE HTML&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta http-equiv=\"Content-type\" content=\"text/html;charset=UTF-8\"&gt;\n&lt;title&gt;Show Image Dimensions Locally&lt;/title&gt;\n&lt;style type='text/css'&gt;\nbody {\n    font-family: sans-serif;\n}\n&lt;/style&gt;\n&lt;script type='text/javascript'&gt;\n\n    function loadImage() {\n        var input, file, fr, img;\n\n        if (typeof window.FileReader !== 'function') {\n            write(\"The file API isn't supported on this browser yet.\");\n            return;\n        }\n\n        input = document.getElementById('imgfile');\n        if (!input) {\n            write(\"Um, couldn't find the imgfile element.\");\n        }\n        else if (!input.files) {\n            write(\"This browser doesn't seem to support the `files` property of file inputs.\");\n        }\n        else if (!input.files[0]) {\n            write(\"Please select a file before clicking 'Load'\");\n        }\n        else {\n            file = input.files[0];\n            fr = new FileReader();\n            fr.onload = createImage;\n            fr.readAsDataURL(file);\n        }\n\n        function createImage() {\n            img = document.createElement('img');\n            img.onload = imageLoaded;\n            img.style.display = 'none'; // If you don't want it showing\n            img.src = fr.result;\n            document.body.appendChild(img);\n        }\n\n        function imageLoaded() {\n            write(img.width + \"x\" + img.height);\n            // This next bit removes the image, which is obviously optional -- perhaps you want\n            // to do something with it!\n            img.parentNode.removeChild(img);\n            img = undefined;\n        }\n\n        function write(msg) {\n            var p = document.createElement('p');\n            p.innerHTML = msg;\n            document.body.appendChild(p);\n        }\n    }\n\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;form action='#' onsubmit=\"return false;\"&gt;\n&lt;input type='file' id='imgfile'&gt;\n&lt;input type='button' id='btnLoad' value='Load' onclick='loadImage();'&gt;\n&lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Works great on Firefox 3.6. I avoided using any library there, so apologies for the attribute (DOM0) style event handlers and such.</p>\n",
                    "is_accepted": true,
                    "score": 10
                },
                {
                    "body": "<p>If you use a flash based uploaded such as SWFUpload you can have all the info you want as well as multiple queued uploads.</p>\n\n<p>I recommend SWFUpload and am in no way associated with them other than as a user.</p>\n\n<p>You could also write a silverlight control to pick your file and upload it.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>HTML5 is definitely the correct solution here.\nYou should always code for the future, not the past.\nThe best way to deal with HTML4 browsers is to either fall back on degraded functionality or use Flash (but only if the browser does not support the HTML5 file API)</p>\n\n<p>Using the img.onload event will enable you to recover the dimensions of the file.\nIts working for an app I'm working on.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The previous example is Okay, but it is far from perfect.</p>\n\n<pre><code>var reader  = new FileReader();\n\nreader.onload   = function(e)\n{\n    var image   = new Image();\n\n    image.onload    = function()\n    {\n        console.log(this.width, this.height);\n    };\n\n    image.src   = e.target.result;\n};\n\nreader.readAsDataURL(this.files[0]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I have file upload UI element in which the user will upload images. Here I have to validate the height and width of the image in client side. Is it possible to find the size of the image having only the file path in JS?</p>\n\n<p><strong>Note:</strong> If No, is there any other way to find the dimensions in Client side?</p>\n",
            "last_activity_date": 1333622386,
            "question_id": 2865017,
            "score": 5,
            "tags": [
                "asp.net",
                "javascript",
                "image",
                "validation",
                "file-upload"
            ],
            "title": "Get Image dimensions using Javascript during file upload"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Linking to local resources is disabled in all modern browsers due to security restrictions.</p>\n\n<p>For <a href=\"http://kb.mozillazine.org/Firefox_%3a_Issues_%3a_Links_to_Local_Pages_Don%27t_Work\">Firefox</a>:</p>\n\n<blockquote>\n  <p>For security purposes, Mozilla applications block links to local files (and directories) from remote files. This includes linking to files on your hard drive, on mapped network drives, and accessible via Uniform Naming Convention (UNC) paths. This prevents a number of unpleasant possibilities, including:</p>\n  \n  <ul>\n  <li>Allowing sites to detect your operating system by checking default installation paths</li>\n  <li>Allowing sites to exploit system vulnerabilities (e.g., C:\\con\\con in Windows 95/98)</li>\n  <li>Allowing sites to detect browser preferences or read sensitive data</li>\n  </ul>\n</blockquote>\n\n<p>for <a href=\"http://msdn.microsoft.com/en-us/library/aa767731%28v=vs.85%29.aspx\">IE</a>:</p>\n\n<blockquote>\n  <p>Internet Explorer 6 Service Pack 1 (SP1) no longer allows browsing a local machine from the Internet zone. For instance, if an Internet site contains a link to a local file, Internet Explorer 6 SP1 displays a blank page when a user clicks on the link. Previous versions of Windows Internet Explorer followed the link to the local file.</p>\n</blockquote>\n\n<p>for <a href=\"http://www.opera.com/support/kb/view/896/\">Opera</a> (in the context of a security advisory, I'm sure there is a more canonical link for this):</p>\n\n<blockquote>\n  <p>As a security precaution, Opera does not allow Web pages to link to files on the user's local disk</p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 19
                },
                {
                    "body": "<p>you can use</p>\n\n<pre><code>&lt;a href=\"\\\\computername\\folder\"&gt;Open folder&lt;/a&gt;\n</code></pre>\n\n<p>in Internet Explorer</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Only IE6-8 - there's an ActiveX workaround this local-files issue in JavaScript:</p>\n\n<pre><code>        function OpenImage(filePath)\n        {\n            var myshell = new ActiveXObject(\"WScript.shell\");\n            myshell.run(filePath, 1, true); \n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h2>Solution: Launching a Downloadable Link</h2>\n\n<p>The following works in all browsers, but as always there are caveats.</p>\n\n<p><strong>Background:</strong></p>\n\n<p>\"URL Shortcuts\" are OS dependent.  The following solution is for MS Windows due to a lack of standards between environments.</p>\n\n<p>If you require linux support for the solution below, please see this <a href=\"http://ubuntugenius.wordpress.com/2009/12/09/how-to-open-url-internet-explorer-shortcuts-in-ubuntu-using-firefox/\" rel=\"nofollow\">article</a>.<br>\n* I have no connection to the article, YMMV.</p>\n\n<p>URL shortcuts come in two forms:</p>\n\n<ol>\n<li><p>Files with .URL extensions are text based.  Can be dynamically generated.</p>\n\n<blockquote>\n  <p>[InternetShortcut]<br>\n  URL=file:///D:/</p>\n</blockquote></li>\n<li><p>Files with .LNK extension are binary. They can be generated dynamically, but require iShelLinkInterface implementer.  This is complicated by default OS restrictions, which rightfully prevent an IIS process from reaching Shell.</p></li>\n</ol>\n\n<p>.URL is the recommended solution, as dynamic generation is viable across Web Languages/Frameworks and allows for a KISS implementation.  </p>\n\n<hr>\n\n<p><strong>Overview/Recap:</strong></p>\n\n<ol>\n<li>Security restrictions will not allow you to open a path/launch explorer directly from the page (as stated by @Pekka).</li>\n<li>Sites hosted externally (not on your local computer) will not allow file:///... uri's under default security permissions.</li>\n</ol>\n\n<hr>\n\n<p><strong>Solution:</strong>\n<br><br>\nProvide a downloadable link (.URL or .LNK) to the resource.  Browser behavior will be explained at end of post.\n<br><br>\n <strong>Option 1:</strong> Produce a .lnk file and save it to the server. Due to the binary nature of the .LNK file, this is not the recommended solution, but a pre-generated file should be viable.\n<br><br>\n <strong>Option 2:</strong> Produce a .url file and either save it to the server or dynamically generate\n    it. In my situation, I am dynamically creating the .URL file.</p>\n\n<hr>\n\n<p><strong>Solution Details (.URL):</strong></p>\n\n<ol>\n<li><p>Add .url to the available MIME types in your web server.\n<br><br>\nFor IIS open the site, choose MIME Types, and add the following: <br></p>\n\n<blockquote>\n  <p>File name Extension= .url<br>\n  MIME type: application/internet-shortcut  </p>\n</blockquote>\n\n<p>Per @cremax ...\nFor Webkit Browsers like Chrome on Apache Servers add this code to .htaccess or http.config:</p>\n\n<blockquote>\n  <p>SetEnvIf Request_URI \".url$\" requested_url=url Header add Content-Disposition \"attachment\" env=requested_url</p>\n</blockquote></li>\n<li><p>The .url file is a text file formatted as follows (again, this can be dynamically generated).  </p>\n\n<p>File Contents:</p>\n\n<blockquote>\n  <p>[InternetShortcut]<br>\n  URL=file:///D:</p>\n</blockquote></li>\n<li><p>Provide a link to the script that generates the .url file, or to the file itself.</p>\n\n<p>If you've simply uploaded a .url file to your server, add the following to your HTML:</p>\n\n<p><code>&lt;a href=\"URIShortcut.url\"&gt;Round-About Linking&lt;/a&gt;</code></p></li>\n</ol>\n\n<hr>\n\n<p><strong>Browser Dependent Behavior</strong></p>\n\n<p><em>Chrome</em>:  Download/Save file.url then open<br>\n  In Chrome, this behavior can be augmented by choosing the \"Always open files of this type\" option.</p>\n\n<p><em>FireFox</em>:  Download/Save file.url then open  </p>\n\n<p><em>Internet Explorer</em>:  Click \u201cOpen\u201d and go straight to directory (no need to save shortcut)  </p>\n\n<blockquote>\n  <p>Internet Explorer has the preferred behavior, but Chrome and Firefox\n  are at least serviceable.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>add on click open local directory o local file to google chrome:</p>\n\n<p>The solution from JFish222 works ( URL file solution )</p>\n\n<p>For Webkid Browsers like Chrome on Apache Servers just add to .htaccess o http.config this code:</p>\n\n<p>SetEnvIf Request_URI \".url$\" requested_url=url\nHeader add Content-Disposition \"attachment\" env=requested_url</p>\n\n<p>And by the first downlod of your url file click on the file in chromes downloadbar and select \"always open this file\". </p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>How can I open a local folder view by clicking on any link?</p>\n\n<p>I tried many options like </p>\n\n<p><code>&lt;a href=\"file:///D:/Tools/\"&gt;Open folder&lt;/a&gt;</code> or</p>\n\n<p><code>&lt;a onclick=\"file:///D:/Tools/\"&gt;Open folder&lt;/a&gt;</code> or</p>\n\n<p><code>&lt;a onclick=\"window.open(file:///D:/Tools/)\"&gt;Open folder&lt;/a&gt;</code></p>\n",
            "last_activity_date": 1387833569,
            "question_id": 5246292,
            "score": 14,
            "tags": [
                "javascript",
                "html",
                "javascript-events"
            ],
            "title": "Open local folder from link"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Just like in any other language</p>\n\n<pre><code>int[][] copy = new int[columns][rows];\nfor (int i = 0; i &lt; rows; ++i) {\n    for (int j = 0; j &lt; columns; ++j) {\n        copy[j][i] = original[i][j];\n    }\n}\n</code></pre>\n\n<p>You just have to use array-access methods specific for your language.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>see <a href=\"http://www.shamasis.net/2010/02/transpose-an-array-in-javascript-and-jquery\" rel=\"nofollow\">http://www.shamasis.net/2010/02/transpose-an-array-in-javascript-and-jquery</a></p>\n\n<pre><code>transpose = function(a) {\n\n  // Calculate the width and height of the Array\n  var w = a.length ? a.length : 0,\n    h = a[0] instanceof Array ? a[0].length : 0;\n\n  // In case it is a zero matrix, no transpose routine needed.\n  if(h === 0 || w === 0) { return []; }\n\n  /**\n   * @var {Number} i Counter\n   * @var {Number} j Counter\n   * @var {Array} t Transposed data is stored in this array.\n   */\n  var i, j, t = [];\n\n  // Loop through every item in the outer array (height)\n  for(i=0; i&lt;h; i++) {\n\n    // Insert a new row (array)\n    t[i] = [];\n\n    // Loop through every item per item in outer array (width)\n    for(j=0; j&lt;w; j++) {\n\n      // Save transposed data.\n      t[i][j] = a[j][i];\n    }\n  }\n\n  return t;\n};\n</code></pre>\n\n<p>transpose([[1,2,3],[4,5,6],[7,8,9]]);</p>\n",
                    "is_accepted": true,
                    "score": 9
                },
                {
                    "body": "<p>Googling turned up <a href=\"http://www.codesuck.com/2012/02/transpose-javascript-array-in-one-line.html\">this</a>. Surprisingly, it's even more concise and complete than <a href=\"http://stackoverflow.com/users/330565/nikita-rybak\">Nikita</a>'s <a href=\"http://stackoverflow.com/a/4492689/623735\">answer</a>. It retrieves column and row lengths implicitly within the guts of <code>map()</code>.</p>\n\n<pre><code>function transpose(a) {\n    return Object.keys(a[0]).map(\n        function (c) { return a.map(function (r) { return r[c]; }); }\n        );\n    }\n</code></pre>\n\n<p>It worked on all my 2-D arrays (but they did all have consistent array lengths).</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Create this function:        </p>\n\n<pre><code>   function transpose(arr) {\n        return Object.keys(arr[0]).map(function (c) {\n            return arr.map(function (r) {\n                return r[c];\n            });\n        });\n    }\n</code></pre>\n\n<p>and then:</p>\n\n<p>var transposedArray = transpose(originalArray);</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>For instance I have a matrix like this:</p>\n\n<pre><code>|1 2 3|    \n|4 5 6|\n|7 8 9|\n</code></pre>\n\n<p>and I need it to convert into a matrix like this:</p>\n\n<pre><code>|1 4 7|    \n|2 5 8|\n|3 6 9|\n</code></pre>\n\n<p>What is the best and optimal way to achieve this goal?</p>\n",
            "last_activity_date": 1410947819,
            "question_id": 4492678,
            "score": 14,
            "tags": [
                "javascript",
                "jquery",
                "matrix",
                "multidimensional-array",
                "swap"
            ],
            "title": "To swap rows with columns of matrix in javascript (or jquery)"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>The following works:</p>\n\n<p><a href=\"http://jsfiddle.net/xAGRJ/4/\" rel=\"nofollow\">http://jsfiddle.net/xAGRJ/4/</a></p>\n\n<p>The problem with your original code was you are calling <code>scrollticker()</code> by passing a string to <code>setInterval</code>, where you should just pass the function name and treat it as a variable:</p>\n\n<pre><code>lefttime = setInterval(scrollticker, 50);\n</code></pre>\n\n<p>instead of </p>\n\n<pre><code>lefttime = setInterval(\"scrollticker()\", 50);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>hiya <strong>simple demo</strong> from recommendations in above comments:   <a href=\"http://jsfiddle.net/FWWEn/\">http://jsfiddle.net/FWWEn/</a></p>\n\n<p>with <strong>pause</strong> functionality on mouseover: <a href=\"http://jsfiddle.net/zrW5q/\">http://jsfiddle.net/zrW5q/</a></p>\n\n<p>hope this helps, have a nice one, cheers!</p>\n\n<p><strong>html</strong></p>\n\n<pre><code>&lt;h1&gt;Hello World!&lt;/h1&gt;\n&lt;h2&gt;I'll marquee twice&lt;/h2&gt;\n&lt;h3&gt;I go fast!&lt;/h3&gt;\n&lt;h4&gt;Left to right&lt;/h4&gt;\n&lt;h5&gt;I'll defer that question&lt;/h5&gt;\u200b\n</code></pre>\n\n<p><strong>Jquery code</strong></p>\n\n<pre><code> (function($) {\n        $.fn.textWidth = function(){\n             var calc = '&lt;span style=\"display:none\"&gt;' + $(this).text() + '&lt;/span&gt;';\n             $('body').append(calc);\n             var width = $('body').find('span:last').width();\n             $('body').find('span:last').remove();\n            return width;\n        };\n\n        $.fn.marquee = function(args) {\n            var that = $(this);\n            var textWidth = that.textWidth(),\n                offset = that.width(),\n                width = offset,\n                css = {\n                    'text-indent' : that.css('text-indent'),\n                    'overflow' : that.css('overflow'),\n                    'white-space' : that.css('white-space')\n                },\n                marqueeCss = {\n                    'text-indent' : width,\n                    'overflow' : 'hidden',\n                    'white-space' : 'nowrap'\n                },\n                args = $.extend(true, { count: -1, speed: 1e1, leftToRight: false }, args),\n                i = 0,\n                stop = textWidth*-1,\n                dfd = $.Deferred();\n\n            function go() {\n                if(!that.length) return dfd.reject();\n                if(width == stop) {\n                    i++;\n                    if(i == args.count) {\n                        that.css(css);\n                        return dfd.resolve();\n                    }\n                    if(args.leftToRight) {\n                        width = textWidth*-1;\n                    } else {\n                        width = offset;\n                    }\n                }\n                that.css('text-indent', width + 'px');\n                if(args.leftToRight) {\n                    width++;\n                } else {\n                    width--;\n                }\n                setTimeout(go, args.speed);\n            };\n            if(args.leftToRight) {\n                width = textWidth*-1;\n                width++;\n                stop = offset;\n            } else {\n                width--;            \n            }\n            that.css(marqueeCss);\n            go();\n            return dfd.promise();\n        };\n    })(jQuery);\n\n$('h1').marquee();\n$('h2').marquee({ count: 2 });\n$('h3').marquee({ speed: 5 });\n$('h4').marquee({ leftToRight: true });\n$('h5').marquee({ count: 1, speed: 2 }).done(function() { $('h5').css('color', '#f00'); })\u200b\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 21
                },
                {
                    "body": "<p>I've made very simple function for marquee. See: <a href=\"http://jsfiddle.net/vivekw/pHNpk/2/\">http://jsfiddle.net/vivekw/pHNpk/2/</a>\nIt pauses on mouseover &amp; resumes on mouseleave. Speed can be varied. Easy to understand.</p>\n\n<pre><code>function marquee(a, b) {\nvar width = b.width();\nvar start_pos = a.width();\nvar end_pos = -width;\n\nfunction scroll() {\n    if (b.position().left &lt;= -width) {\n        b.css('left', start_pos);\n        scroll();\n    }\n    else {\n        time = (parseInt(b.position().left, 10) - end_pos) *\n            (10000 / (start_pos - end_pos)); // Increase or decrease speed by changing value 10000\n        b.animate({\n            'left': -width\n        }, time, 'linear', function() {\n            scroll();\n        });\n    }\n}\n\nb.css({\n    'width': width,\n    'left': start_pos\n});\nscroll(a, b);\nb.mouseenter(function() {     // Remove these lines\n    b.stop();                 //\n    b.clearQueue();           // if you don't want\n});                           //\nb.mouseleave(function() {     // marquee to pause\n    scroll(a, b);             //\n});                           // on mouse over\n}\n\n$(document).ready(function() {\n    marquee($('#display'), $('#text'));  //Enter name of container element &amp; marquee element\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I just created a simple jQuery plugin for that. Try it ;)</p>\n\n<p><a href=\"https://github.com/aamirafridi/jQuery.Marquee\" rel=\"nofollow\">https://github.com/aamirafridi/jQuery.Marquee</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I made my own version, based in the code presented above by @Tats_innit .\nThe difference is the pause function. Works a little better in that aspect.</p>\n\n<pre><code>(function ($) {\nvar timeVar, width=0;\n\n$.fn.textWidth = function () {\n    var calc = '&lt;span style=\"display:none\"&gt;' + $(this).text() + '&lt;/span&gt;';\n    $('body').append(calc);\n    var width = $('body').find('span:last').width();\n    $('body').find('span:last').remove();\n    return width;\n};\n\n$.fn.marquee = function (args) {\n    var that = $(this);\n    if (width == 0) { width = that.width(); };\n    var textWidth = that.textWidth(), offset = that.width(), i = 0, stop = textWidth * -1, dfd = $.Deferred(),\n        css = {\n            'text-indent': that.css('text-indent'),\n            'overflow': that.css('overflow'),\n            'white-space': that.css('white-space')\n        },\n        marqueeCss = {\n            'text-indent': width,\n            'overflow': 'hidden',\n            'white-space': 'nowrap'\n        },\n        args = $.extend(true, { count: -1, speed: 1e1, leftToRight: false, pause: false }, args);\n\n    function go() {\n        if (!that.length) return dfd.reject();\n        if (width &lt;= stop) {\n            i++;\n            if (i &lt;= args.count) {\n                that.css(css);\n                return dfd.resolve();\n            }\n            if (args.leftToRight) {\n                width = textWidth * -1;\n            } else {\n                width = offset;\n            }\n        }\n        that.css('text-indent', width + 'px');\n        if (args.leftToRight) {\n            width++;\n        } else {\n            width=width-2;\n        }\n        if (args.pause == false) { timeVar = setTimeout(function () { go() }, args.speed); };\n        if (args.pause == true) { clearTimeout(timeVar); };\n    };\n\n    if (args.leftToRight) {\n        width = textWidth * -1;\n        width++;\n        stop = offset;\n    } else {\n        width--;\n    }\n    that.css(marqueeCss);\n\n    timeVar = setTimeout(function () { go() }, 100);\n\n    return dfd.promise();\n};\n})(jQuery);\n</code></pre>\n\n<p>usage:</p>\n\n<p>for start: $('#Text1').marquee()</p>\n\n<p>pause: $('#Text1').marquee({ pause: true })</p>\n\n<p>resume: $('#Text1').marquee({ pause: false })</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to find a very simple and smooth, lightweight javascript or jquery marquee. I already tried <a href=\"http://remysharp.com/2008/09/10/the-silky-smooth-marquee/\">silk marquee</a> or something, but it wouldn't work with the application I was using. So the simpler and shorter, the better - and easier to debug. Does anybody know of a easy to implement javascript replacement for the marquee?</p>\n\n<p><a href=\"http://pastebin.com/L9EmncR1\">Pastebin</a></p>\n\n<p><strong>Code</strong></p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en\" lang=\"en\"&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\"&gt;\nvar tWidth='300px';                  // width (in pixels)\nvar tHeight='25px';                  // height (in pixels)\nvar tcolour='#ffffcc';               // background colour:\nvar moStop=true;                     // pause on mouseover (true or false)\nvar fontfamily = 'arial,sans-serif'; // font for content\nvar tSpeed=3;                        // scroll speed (1 = slow, 5 = fast)\n\n// enter your ticker content here (use \\/ and \\' in place of / and ' respectively)\nvar content='Are you looking for loads of useful information &lt;a href=\"http:\\/\\/javascript.about.com\\/\"&gt;About Javascript&lt;\\/a&gt;? Well now you\\'ve found it.';\n\nvar cps=-tSpeed; var aw, mq; var fsz = parseInt(tHeight) - 4; function startticker(){if (document.getElementById) {var tick = '&lt;div style=\"position:relative;width:'+tWidth+';height:'+tHeight+';overflow:hidden;background-color:'+tcolour+'\"'; if (moStop) tick += ' onmouseover=\"cps=0\" onmouseout=\"cps=-tSpeed\"'; tick +='&gt;&lt;div id=\"mq\" style=\"position:absolute;right:0px;top:0px;font-family:'+fontfamily+';font-size:'+fsz+'px;white-space:nowrap;\"&gt;&lt;\\/div&gt;&lt;\\/div&gt;'; document.getElementById('ticker').innerHTML = tick; mq = document.getElementById(\"mq\"); mq.style.right=(10+parseInt(tWidth))+\"px\"; mq.innerHTML='&lt;span id=\"tx\"&gt;'+content+'&lt;\\/span&gt;'; aw = document.getElementById(\"tx\").offsetWidth; lefttime=setInterval(\"scrollticker()\",50);}} function scrollticker(){mq.style.right = (parseInt(mq.style.right)&gt;(-10 - aw)) ?\nmq.style.right = parseInt(mq.style.right)+cps+\"px\": parseInt(tWidth)+10+\"px\";} window.onload=startticker;\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"ticker\"&gt;\n    this is a simple scrolling text!\n&lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
            "last_activity_date": 1407528756,
            "question_id": 10547797,
            "score": 10,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "marquee"
            ],
            "title": "Very Simple, Very Smooth, JavaScript Marquee"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>When you use <code>parseFloat</code>, or <code>parseInt</code>, the conversion is less strict. <code>1b5</code> -> 1.</p>\n\n<p>Using <code>1*number</code> or <code>+number</code> to convert will result in <code>NaN</code> when the input is not valid number. Though unlike <code>parseInt</code>, floating point numbers will be parsed correctly.</p>\n\n<h2>Table covering all possible relevant options.</h2>\n\n<pre><code>//Variables    // parseInt  parseFloat  + 1* /1   ~~ |0 ^1 &gt;&gt;0  &gt;&gt;&gt;0\nvar a = '123,',//   123        123       NaN       0     &amp; &lt;&lt;0   0\n    b = '1.e3',//   1          1000      1000      1000          1000\n    c = '1.21',//   1          1.21      1.21      1             1\n    d = '0020',//   16         20        20        20            20\n    e = '0x10',//   16         0         16        16            16\n    f = '3e9', //   3          3000000000  &lt;--    -1294967296    3000000000\n    g = '3e10',//   3          30000000000 &lt;--    -64771072      4230196224\n    h = 3e25  ,//   3          3e+25     3e+25     0             0\n    i = '3e25',//   3          3e+25     3e+25     0             0\n    j = 'a123',//   NaN        NaN       NaN       0             0\n    k = '  1 ',//   1          1         1         1             1\n    l = '    ',//   NaN        NaN       0         0             0\n    m = '.1  ',//   NaN        0.1       0.1       1             1\n    n = '1.  ',//   1          1         1         1             1\n    o = '1e999',//  1          Infinity  Infinity  0             0\n    p = '1e-999',// 1          0         0         0             0\n    q = false ,//   NaN        NaN       0         0             0\n    r = void 0,//   NaN        NaN       NaN       0             0\n    _ = function(){return 1;}, /* Function _ used below */\n    s={valueOf:_},//NaN        NaN       1         1             1\n    t={toString:_};// 1        1         1         1             1\n\n// Intervals: (-1e+20, +1e20)  (-\u221e,+\u221e)   (-\u221e,+\u221e)   (-2\u00b3\u00b9,+2\u00b3\u00b9)   [0, 2\u00b3\u00b2)\n// In FF9 and Chrome 17, Infinity === Math.pow(2, 1024), approx. 1.7976e+308\n// In FF9 and Chrome 17, bitwise operators always return 0 after about \u00b11e+25\n</code></pre>\n\n<h2>Notes on number conversion methods:</h2>\n\n<ul>\n<li>The number conversion always fail if the first character, after trimming white-space, is not a number.</li>\n<li><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt\"><strong><code>parseInt</code></strong></a> returns an integer representation of the first argument. When the radix (second argument) is omitted, the radix depends on the given input.<br />\n<code>0_</code> = octal (base-8), <code>0x_</code> = hexadecimal (base-16). Default: base-10.<br />\n<em><code>parseInt</code> ignores any non-digit characters, even if the argument was actually a number: See <strong>h, i</strong>.</em><br />\nTo avoid unexpected results, always specify the radix, usually 10: <code>parseInt(number, 10)</code>.</li>\n<li><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseFloat\"><strong><code>parseFloat</code></strong></a> is the most tolerant converter. It always interpret input as base-10, regardless of the prefix (unlike <code>parseInt</code>). For the exact parsing rules, see <a href=\"http://es5.github.com/#x9.3.1\">here</a>.\n<br />\n<br />\n<em>The following methods will always fail to return a meaningful value if the string contains any non-number characters.</em> (valid examples: <code>1.e+0 .1e-1</code>)</li>\n<li><code>+n, 1*n, n*1, n/1</code> and <code>Number(n)</code> are equivalent.</li>\n<li><code>~~n, 0|n, n|0, n^1, 1^n, n&amp;n, n&lt;&lt;0</code> and <code>n&gt;&gt;0</code> are equivalent. These are <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators/Bitwise_Operators#Signed_32-bit_integers\">signed bitwise</a> operations, and will always return a numeric value (zero instead of <code>NaN</code>).</li>\n<li><code>n&gt;&gt;&gt;0</code> is also a <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators/Bitwise_Operators#.3E.3E.3E_%28Zero-fill_right_shift%29\">bitwise operation</a>, but does not reserve a sign bit. Consequently, only positive numbers can be represented, and the upper bound is 2<sup>32</sup> instead of 2<sup>31</sup>.\n<br />\n<br /></li>\n<li>When passed an object, <code>parseFloat</code> and <code>parseInt</code> will only look at the <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/toString\"><code>.toString()</code></a> method. The other methods first look for <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Object/ValueOf\"><code>.valueOf()</code></a>, then <code>.toString()</code>. <em>See <strong>q - t</strong>.</em>\n<br />\n<br /></li>\n<li><strong><code>NaN</code></strong>, \"Not A Number\":<br /><code>typeof NaN === 'number'</code><br />\n<code>NaN !== NaN</code>. Because of this awkwardness, use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/isNaN\"><code>isNaN()</code></a> to check whether a value is <code>NaN</code>.</li>\n</ul>\n\n<h2>When to use which method?</h2>\n\n<ul>\n<li><code>parseFloat( x )</code> when you want to get as much numeric results as possible (for a given string).</li>\n<li><code>parseFloat( (x+'').replace(/^[^0-9.-]+/,'') )</code> when you want even more numeric results.</li>\n<li><code>parseInt( x, 10 )</code> if you want to get integers.</li>\n<li><code>+x, 1*x ..</code> if you're only concerned about getting true numeric values of a object, rejecting any invalid numbers (as <code>NaN</code>).</li>\n<li><code>~~, 0| ..</code> if you want to always get a numeric result (zero for invalid).</li>\n<li><code>&gt;&gt;&gt;0</code> if negative numbers do not exists.<br />\n<em>The last two methods have a limited range. Have a look at the footer of the table.</em></li>\n</ul>\n\n<p>The shortest way to test whether a given parameter is a <em>real number</em> is explained at <strong><a href=\"http://stackoverflow.com/questions/8525899/how-to-check-if-a-javascript-number-is-a-real-valid-number/8526029#8526029\">this answer</a></strong>:</p>\n\n<pre><code>function isNumber(n) {\n    return typeof n == 'number' &amp;&amp; !isNaN(n - n);\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 26
                }
            ],
            "body": "<p>Are there any side effects if i convert a string to a number like below..  </p>\n\n<pre><code>var numb=str*1;\n</code></pre>\n\n<p>If I check with the below code it says this is a number..  </p>\n\n<pre><code>var str=\"123\";\nstr=str*1;\nif(!isNaN(str))\n{\n  alert('Hello');   \n}\n</code></pre>\n\n<p>Please let me know if there are any concerns in using this method..</p>\n",
            "last_activity_date": 1327163006,
            "question_id": 8112757,
            "score": 7,
            "tags": [
                "javascript",
                "numbers",
                "parsefloat"
            ],
            "title": "Are there are any side effects of using this method to convert a string to an integer"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<h2>Don't use <code>for..in</code> for Array iteration.</h2>\n\n<p>It's important to understand that Javascript Array's square bracket syntax (<code>[]</code>) for accessing indicies is actually inherited from the <code>Object</code>...</p>\n\n<pre><code>obj.prop === obj['prop']  // true\n</code></pre>\n\n<p>The <code>for..in</code> structure does not work like a more traditional <code>for..each/in</code> that would be found in other languages (php, python, etc...).</p>\n\n<p>Javascript's <code>for..in</code> is designed to iterate over the properties of an <strong>object</strong>.  Producing the <strong>key</strong> of each property.  Using this <strong>key</strong> combined with the <code>Object</code>'s bracket syntax, you can easily access the values you are after.</p>\n\n<pre><code>var obj = {\n    foo: \"bar\",\n    fizz: \"buzz\",\n    moo: \"muck\"\n};\n\nfor ( var prop in obj ) {\n    console.log(prop);      // foo / fizz / moo\n    console.log(obj[prop]); // bar / buzz / muck\n}\n</code></pre>\n\n<p>And because the Array is simply an Object with <strong>sequential numeric property names (indexes)</strong> the <code>for..in</code> works in a similar way, producing the numeric indicies just as it produces the property names above.</p>\n\n<p>An important characteristic of the <code>for..in</code> structure is that it continues to search for enumerable properties up the prototype chain.  It will also iterate <strong>inherited enumerable properties</strong>.  It is up to you to verify that the current property exists directly on the local object and not the prototype it is attached to with <code>hasOwnProperty()</code>...</p>\n\n<pre><code>for ( var prop in obj ) {\n    if ( obj.hasOwnProperty(prop) ) {\n        // prop is actually obj's property (not inherited)\n    }\n}\n</code></pre>\n\n<p>(<a href=\"http://javascript.crockford.com/prototypal.html\" rel=\"nofollow\">More on Prototypal Inheritance</a>)</p>\n\n<p>The problem with using the <code>for..in</code> structure on the Array type is that there is no garauntee as to what order the properties are produced...  and generally speaking that is a farily important feature in processing an array.</p>\n\n<p>Another problem is that it usually <a href=\"http://jsperf.com/for-in-or-for/10\" rel=\"nofollow\">slower than</a> a standard <code>for</code> implementation.</p>\n\n<h2>Bottom Line</h2>\n\n<p>Using a <code>for...in</code> to iterate arrays is like using the butt of a screw driver to drive a nail...  why wouldn't you just use a hammer (<code>for</code>)?</p>\n",
                    "is_accepted": true,
                    "score": 30
                },
                {
                    "body": "<p><code>for(var key in obj) {  }</code> iterates over all elements in the object, including those of its prototypes.\nSo if you are using it and cannot know nothing extended <code>Object.prototype</code> you should always test <code>obj.hasOwnProperty(key)</code> and skip the key if this check returns false.</p>\n\n<p><code>for(start; continuation; loop)</code> is a C-style loop: <code>start</code> is executed before the loop, <code>continuation</code> is tested and the loop only continues while it's true, <code>loop</code> is executed after every loop.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p><code>for...in</code> is to be used when you want to loop over the properties of an object. But it works the same as a normal <code>for</code> loop: The loop variable contains the current \"index\", meaning the property of the object and not the value.</p>\n\n<p>To iterate over arrays, you should use a normal <code>for</code> loop. <code>buttons</code> is not an array but a <code>NodeList</code> (an array like structure). </p>\n\n<p>If iterate over <code>buttons</code> with <code>for...in</code> with:</p>\n\n<pre><code>for(var i in a) {\n    console.log(i)\n}\n</code></pre>\n\n<p>You will see that it output something like:</p>\n\n<pre><code>1\n2\n...\nlength\nitem\n</code></pre>\n\n<p>because <code>length</code> and <code>item</code> are two properties of an object of type <code>NodeList</code>. So if you'd naively use <code>for..in</code>, you would try to access <code>buttons['length'].removeAttribute()</code> which will throw an error as <code>buttons['length']</code> is a function and not a DOM element.</p>\n\n<p>So the correct way is to use a normal <code>for</code> loop. But there is another issue:</p>\n\n<p><code>NodeList</code>s are live, meaning whenever you access e.g. <code>length</code>, the list is updated (the elements are searched again). Therefore you should avoid unnecessary calls to <code>length</code>.</p>\n\n<p>Example:</p>\n\n<pre><code>for(var i = 0, l = buttons.length; i &lt; l, i++)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>While for..in should not generally be used for Arrays, however prior to ES5 there was a case for using it with sparse arrays.</p>\n\n<p>As noted in other answers, the primary issues with for..in and Arrays are:</p>\n\n<ol>\n<li>The properties are not necessarily returned in order (i.e. not 0, 1, 2 etc.)</li>\n<li>All enumerable properties are returned, including the non\u2013index properties and those on the <code>[[Prototype]]</code> chain. This leads to lower performance as a <em>hasOwnProperty</em> test is probably required to avoid inherited properties.</li>\n</ol>\n\n<p>One reason to use for..in prior to ES5 was to improve performance with sparse arrays, provided order doesn't matter. For example, in the following:</p>\n\n<pre><code>var a = [0];\na[1000] = 1;\n</code></pre>\n\n<p>Iterating over <em>a</em> using for..in will be much faster than using a for loop, as it will only visit two properties whereas a for loop will try 1001.</p>\n\n<p>However, this case is made redundant by ES5's <em>forEach</em>, which only visits members that exist, so:</p>\n\n<pre><code>a.forEach();\n</code></pre>\n\n<p>will also only iterate over two properties, in order.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I faced a strange behaviour in Javascript. I get </p>\n\n<blockquote>\n\"Object doesn't support this property or method\"\n</blockquote>\n\n<p>exception for the <code>removeAttribute</code> function in the following code:</p>\n\n<pre><code>var buttons = controlDiv.getElementsByTagName(\"button\");\nfor ( var button in buttons )\n    button.removeAttribute('disabled');\n</code></pre>\n\n<p>When I change the code with the following, the problem disappears:</p>\n\n<pre><code>var buttons = controlDiv.getElementsByTagName(\"button\");\nfor ( var i = 0; i &lt; buttons.length; i++ )\n    buttons[i].removeAttribute('disabled');\n</code></pre>\n\n<p>What is the value of <code>button</code> inside the <code>for...in</code>?</p>\n",
            "last_activity_date": 1419389878,
            "question_id": 5263847,
            "score": 7,
            "tags": [
                "javascript",
                "arrays",
                "for-loop",
                "for-in-loop"
            ],
            "title": "JavaScript Loops: for...in vs for"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Z index in SVG is defined by the order the elements appear in the document.  You will have to change the element order if you want to bring a specific shape to the top.</p>\n",
                    "is_accepted": true,
                    "score": 70
                },
                {
                    "body": "<p>Yes the order is what specifies what object will be in front of the other.  To manipulate the order you will need to move things about the DOM.  There is a good example of this on the SVG wiki at <a href=\"http://wiki.svg.org/Rendering_Order\" rel=\"nofollow\">http://wiki.svg.org/Rendering_Order</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>An alternative to moving elements in the tree is to use <code>&lt;use&gt;</code> elements where you change the <code>xlink:href</code> attribute so that it gives you the z ordering you want.</p>\n\n<p>Here's an <a href=\"http://tech.groups.yahoo.com/group/svg-developers/message/59312\">old thread</a> on svg-developers mailinglist discussing this topic in context of wanting to animate some shapes.</p>\n\n<p><strong>Update:</strong></p>\n\n<pre><code>&lt;svg xmlns=\"http://www.w3.org/2000/svg\" \n     xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n     style=\"width:100%; height: 100%\"&gt;\n    &lt;circle id=\"c1\" cx=\"50\" cy=\"50\" r=\"40\" fill=\"lime\" /&gt;\n    &lt;rect id=\"r1\" x=\"4\" y=\"20\" width=\"200\" height=\"50\" fill=\"cyan\" /&gt;\n    &lt;circle id=\"c2\" cx=\"70\" cy=\"70\" r=\"50\" fill=\"fuchsia\" /&gt;\n    &lt;use id=\"use\" xlink:href=\"#c1\" /&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p>In this example the &lt;use> element is the last one, which makes it the frontmost element. We can choose any of the other elements to act as frontmost simply by changing the <code>xlink:href</code> attribute. In the above example we picked the circle with <code>id=\"c1\"</code>, which makes it appear as the topmost element.</p>\n\n<p>See <a href=\"http://jsfiddle.net/hkSFf/\">fiddle</a>.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I like the <code>&lt;use&gt;</code> element suggestion from Erik. I found some more information about node re-ordering in the old Yahoo thread here<a href=\"http://tech.groups.yahoo.com/group/svg-developers/message/573\" rel=\"nofollow\">1</a>, along with z-ordering history. Unfortunately, all this information is very old, and lots of the old links are broken (even svg.org has gone?). It's a pity that no-one seems to have written all this up. Not anywhere it can easily be found, anyway.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is old question, but...</p>\n\n<p>On FireFox (7+) and Chrome (14+) you can pull svg_element to the top. This does not give you freedom of full z axis control, but it's better than nothing ;)</p>\n\n<p>Just append that element again.</p>\n\n<pre><code>var svg = doc.createElemNS('svg');\nvar circle = doc.createElemNS('circle');\nvar line = doc.createElemNS('line');\n\nsvg.appendChild(circle); // appends it\nsvg.appendChild(line);   // appends it over circle\nsvg.appendChild(circle); // redraws it over line now\n</code></pre>\n\n<p>I thought it was going to throw en error or something.</p>\n\n<blockquote>\n  <p>appendChild == replace itself == redraw</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p><code>SVG</code> uses a \"painters model\" of rendering. Paint is applied in successive operations to the output device such that each operation paints over some area of the output device. When the area overlaps a previously painted area the new paint partially or completely obscures the old.- <a href=\"http://www.w3.org/TR/SVG/render.html#PaintersModel\" rel=\"nofollow\">link to this</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Another solution not mentioned is to put each svg item/set of items into a div. You can alter the z-index of the divs easily. </p>\n\n<p><a href=\"http://jsfiddle.net/3ghn7m6a/\" rel=\"nofollow\">Fiddle: SVG elements cycles with z-index for containers</a></p>\n\n<p>...Press on the buttons to 'push' that element to the front. (vs repainting the whole set and pushing 1 element to front, but keeping the original order as in the accepted solution)</p>\n\n<p>It would be very nice to have relative z indices...</p>\n\n<p>stackOverflow wants me to put the code if it's a link from jsfiddle?...ook</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"true\">\r\n<div class=\"snippet-code snippet-currently-hidden\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var orderArray=[0,1,2];\r\nvar divArray = document.querySelectorAll('.shape');\r\nvar buttonArray = document.querySelectorAll('.button');\r\n\r\nfor(var i=0;i&lt;buttonArray.length;i++){\r\n    buttonArray[i].onclick=function(){\r\n        var localI = i;\r\n        return function(){clickHandler(orderArray.indexOf(localI));};\r\n    }();\r\n}\r\n\r\n\r\nfunction clickHandler(divIndex) {\r\n     orderArray.push(orderArray.splice(divIndex, 1)[0]);\r\n    orderDivs();\r\n}\r\n\r\nfunction orderDivs(){\r\n    for(var i=0;i&lt;orderArray.length;i++){\r\n       divArray[orderArray[i]].style.zIndex=i;        \r\n    }\r\n}</code></pre>\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>svg {\r\n    width: 100%;\r\n    height: 100%;\r\n    stroke: black;\r\n    stroke-width:2px;\r\n    pointer-events: all;\r\n}\r\ndiv{\r\n    position:absolute;\r\n}\r\ndiv.button{\r\n    top:55%;\r\n    height:5%;\r\n    width:15%;\r\n    border-style: outset;\r\n    cursor:pointer;\r\n    text-align: center;\r\n    background:rgb(175, 175, 234);\r\n    \r\n}\r\ndiv.button:hover{\r\n    border-style: inset;\r\n    background:yellow;\r\n    \r\n}\r\ndiv.button.first{\r\n    left:0%;\r\n}\r\ndiv.button.second{\r\n    left:20%;\r\n}\r\ndiv.button.third{\r\n    left:40%;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;div class=\"shape\"&gt;\r\n    &lt;svg&gt;\r\n    &lt;circle cx=\"50\" cy=\"50\" r=\"40\" fill=\"lime\" /&gt;\r\n    &lt;/svg&gt;\r\n&lt;/div&gt;\r\n&lt;div class=\"shape\"&gt;\r\n    &lt;svg&gt;\r\n        &lt;rect x=\"4\" y=\"20\" width=\"200\" height=\"50\" fill=\"cyan\" /&gt;\r\n    &lt;/svg&gt;\r\n&lt;/div&gt;\r\n&lt;div class=\"shape\"&gt;\r\n    &lt;svg&gt;\r\n        &lt;circle cx=\"70\" cy=\"70\" r=\"50\" fill=\"fuchsia\" /&gt;\r\n    &lt;/svg&gt;\r\n&lt;/div&gt;\r\n\r\n&lt;div class='button first'&gt;lime&lt;/div&gt;\r\n&lt;div class='button second'&gt;cyan&lt;/div&gt;\r\n&lt;div class='button third'&gt;fuchsia&lt;/div&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Let's say I have a couple composite shapes (<code>&lt;g&gt;</code>).   I want to be able to click and drag them, but I want the one I happen to be dragging at the moment to be on TOP of the other one in the Z order, so that if I drag it over the OTHER one, the other one should be eclipsed.</p>\n",
            "last_activity_date": 1425664155,
            "question_id": 482115,
            "score": 53,
            "tags": [
                "javascript",
                "svg"
            ],
            "title": "With JavaScript, can I change the Z index/layer of an SVG &lt;g&gt; element?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Wrap text in a <strong>span</strong> and use <a href=\"http://docs.jquery.com/CSS/width\" rel=\"nofollow\">jquery width()</a></p>\n",
                    "is_accepted": true,
                    "score": 30
                },
                {
                    "body": "<p>I don't believe you can do just a string, but if you put the string inside of a <code>&lt;span&gt;</code> with the correct attributes (size, font-weight, etc); you should then be able to use jQuery to get the width of the span.</p>\n\n<pre><code>&lt;span id='string_span' style='font-weight: bold; font-size: 12'&gt;Here is my string&lt;/span&gt;\n&lt;script&gt;\n  $('#string_span').width();\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Put it in an absolutely-positioned div then use clientWidth to get the displayed width of the tag. You can even set the visibility to \"hidden\" to hide the div:</p>\n\n<pre><code>&lt;div id=\"text\" style=\"position:absolute;visibility:hidden\" &gt;This is some text&lt;/div&gt;\n&lt;input type=\"button\" onclick=\"getWidth()\" value=\"Go\" /&gt;\n&lt;script type=\"text/javascript\" &gt;\n    function getWidth() {\n        var width = document.getElementById(\"text\").clientWidth;\n        alert(\" Width :\"+  width);\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>// Create a dummy canvas (render invisible with css)\nvar c=document.createElement('canvas');\n// Get the context of the dummy canvas\nvar ctx=c.getContext('2d');\n// Set the context.font to the font that you are using\nctx.font = fontsize + 'px' + fontname;\n// Measure the string \nvar length = ctx.measureText(the_text_that_you_want_to_measure);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>First replicate the location and styling of the text and then use Jquery width() function. <strong>This will make the measurements accurate.</strong>\nFor example you have css styling with a selector of:</p>\n\n<pre><code>.style-head span\n{\n  //Some style set\n}\n</code></pre>\n\n<p>You would need to do this with Jquery already included above this script:</p>\n\n<pre><code>var measuringSpan = document.createElement(\"span\");\nmeasuringSpan.innerText = 'text to measure';\nmeasuringSpan.style.display = 'none'; /*so you don't show that you are measuring*/\n$('.style-head')[0].appendChild(measuringSpan);\nvar theWidthYouWant = $(measuringSpan).width();\n</code></pre>\n\n<p>Needless to say </p>\n\n<blockquote>\n  <p>theWidthYouWant</p>\n</blockquote>\n\n<p>will hold the pixel length. Then remove the created elements after you are done or you will get several if this is done a several times. Or add an ID to reference instead.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Is there any way to determine the pixel length of a string in jQuery/JavaScript?</p>\n",
            "last_activity_date": 1421920849,
            "question_id": 2057682,
            "score": 30,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "Determine Pixel Length of String in Javascript/jQuery?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>If it's something that is easily do-able in CSS, then ditch jQuery and do it in CSS. That way you don't have to depend on javascript execution for the look/feel of your application.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You're crossing the line if you're using <a href=\"http://www.reddit.com/r/programming/comments/buosj/add_a_number_to_another_number_in_javascript_img/c0on5ev\">jQuery to do things that can be done easily without jQuery</a>.  jQuery's purpose is to make life easier, but it shouldn't be at the expense of compatibility or usability.</p>\n\n<p>jQuery most certainly shouldn't be used as a replacement for CSS -- think of the users who have JavaScript disabled.  </p>\n\n<p>I know this image is overused, but someone had to throw it in here:\n<img src=\"http://img180.imageshack.us/img180/3305/addanumbertoanothernumb.png\" alt=\"\"></p>\n\n<p><a href=\"http://www.doxdesk.com/updates/2009.html#u20091116-jquery\">Image Credit</a> - <a href=\"http://stackoverflow.com/users/18936/bobince\">bobince</a>.</p>\n",
                    "is_accepted": true,
                    "score": 82
                },
                {
                    "body": "<p>If you turn off java script on your browser and your site/application does not run or look functionally with out it, then you have a problem.</p>\n\n<p>JS is great, but it should never stop a user from using something you have built, IF it is disabled.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>jQuery most often gets applied after the document has been loaded. I guess that if you can achieve the same thing with plain CSS, CSS is the way to go. Less load on the browser, and if someone doesn't have jQuery enabled at least there's still (some) style because of the CSS.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Ok, don't mark me as a troll...</p>\n\n<p>If your web-app wont work in an environment that doesn't have Javascript enabled or isnt compatable with JQuery, then just go with whatever is easiest for you to manage. There is no benifit to having visual support for an application if it doesnt actually work otherwise at all.</p>\n\n<p>Tho if you want to make it work later without Javascript support, then you should prob try to use css. But if you dont plan for no-Javascript support, and it works, go with whatever is easiest for you</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You use too much jQuery if you could set one class attribute instead of a lot style attributes. For example:</p>\n\n<pre><code>/** Select 400 rows and change the background colour **/\n$('#table tr').css('backgroundColor', 'blue');\n</code></pre>\n\n<p>Instead of:</p>\n\n<pre><code>/** jQuery **/\n$('#table').addClass('blueRows');\n\n/** CSS **/\n#table tr.blueRows {\n    background-color: blue;\n}\n</code></pre>\n\n<p>To avoid jQuery styling, you could also set a class to the body so it's easier to style with CSS for Javascript-enabled browsers:</p>\n\n<pre><code>/** jQuery **/\n$(document).addClass('JS-enabled');\n\n/** CSS **/\nbody #table tr{\n    background: #FFF;\n}\n\nbody.JS-enabled #table tr {\n    background: blue;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I don't think there is a \"line\" here, I think there are some straightforward things and some grey areas there you have to balance what you want.  Advanced features, performance, compatibility, think of these are a triangle, it's hard to do all 3 <em>as best as possible</em> at the same time.</p>\n\n<p>If CSS can do it, of course do it in CSS.  If it can't be done in CSS use jQuery, but do't use jQuery where the overhead isn't needed, e.g. <code>$(this).attr(\"id\")</code> can usually be <code>this.id</code>, many things are available strictly on the DOM and still in a cross-browser way.</p>\n\n<p>When are you using it too much?  When it's not <strong>needed</strong>, sometimes you need jQuery for cross-browser CCS3 selectors, sometimes you're using a CSS selector that's already available <strong>put it in the stylesheet</strong>.  There are a hundred other examples, but if you can get by in a cross-browser clean way without it, then there's no need, things like fading aren't trivially done.  If you need to include jQuery at all, there's no reason not to use <code>.fadeIn()</code> once you have (the code's been included, why duplicate it?)</p>\n\n<h2>JavaScript vs No JavaScript</h2>\n\n<p>As said in comments here your site should offer <strong>all the basic functionality without javascript</strong>, this usually isn't a problem, e.g. capturing a click and loading the content via AJAX...if you don't capture it they do a full page reload, this is an easy fallback to the standard behavior.  However, all the \"bells and whistles\"?  This is opinionated for sure, but I don't think you should bend over backwards to offer <strong>all</strong> the functionality without JavaScript. The user turned it off, they don't get the fancy stuff, that's fine...look at SO as an example, disable javascript disables a lot of <strong>non-essential features</strong>, you can browse around just fine, but commenting, voting, mainly <strong>actions</strong> aren't necessarily available without JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<blockquote>\n  <p>For example, I alternate table rows color or create buttons and links hover effects using JavaScript/jQuery. Is this acceptable? Or should I keep using CSS for these kind of things?</p>\n</blockquote>\n\n<p>Really, it depends on your browser support. You can do zebra-striping on tables really simply with this code:</p>\n\n<pre><code>table.classname tr:nth-child(even) td {\n  background-color: #ddd;\n}\n</code></pre>\n\n<p>But this doesn't work in Internet Explorer at all (although it should in the upcoming version 9). So if you need everything to look the same cross-browser, use jQuery instead.</p>\n\n<p>For link hover effects, assuming you mean colour changes, etc. and not fancy animation, <em>definitely use CSS</em> since this is supported everywhere.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Lately I found myself using jQuery and JavaScript a lot, often to do the same things that I did before using CSS.</p>\n\n<p>For example, I alternate table rows color or create buttons and links hover effects using JavaScript/jQuery. Is this acceptable? Or should I keep using CSS for these kinds of things?</p>\n\n<p>So the real question is:\nWhen I'm using too much jQuery? How can I understand when I'm crossing the line?</p>\n",
            "last_activity_date": 1281691416,
            "question_id": 2826791,
            "score": 21,
            "tags": [
                "javascript",
                "jquery",
                "css"
            ],
            "title": "Am I using too much jQuery? When am I crossing the line?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>You can't get the value of POST variables using Javascript, although you can insert it in the document when you process the request on the server.</p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    window.some_variable = '&lt;?=$_POST['some_value']?&gt;'; // That's for a string\n&lt;/script&gt;\n</code></pre>\n\n<p>GET variables are available through the <code>window.location.href</code>, and some frameworks even have <a href=\"http://prototypejs.org/api/string/toQueryParams\">methods</a> ready to parse them.</p>\n",
                    "is_accepted": true,
                    "score": 29
                },
                {
                    "body": "<p>You can only get the URI arguments with JavaScript.</p>\n\n<pre><code>// get query arguments\nvar $_GET = {},\n    args = location.search.substr(1).split(/&amp;/);\nfor (var i=0; i&lt;args.length; ++i) {\n    var tmp = args[i].split(/=/);\n    if (tmp[0] != \"\") {\n        $_GET[decodeURIComponent(tmp[0])] = decodeURIComponent(tmp.slice(1).join(\"\").replace(\"+\", \" \"));\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p>How to get value of the get or post variable on page load using JavaScript?</p>\n",
            "last_activity_date": 1294154615,
            "question_id": 1961069,
            "score": 19,
            "tags": [
                "javascript"
            ],
            "title": "Getting value GET OR POST variable using JavaScript?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>The <code>event</code> object in a jQuery event handler does not reflect the real event. <code>wheelDelta</code> is a non-standard event property<sup>IE and Opera</sup>, available through the <code>originalEvent</code> property of the jQuery event.</p>\n\n<p>In jQuery 1.7+, the <code>detail</code> property is not available at the jQuery Event object. So, you should also use  <code>event.originalEvent.detail</code> to for this property at the <code>DOMMouseScroll</code> event. This method is backwards-compatible with older jQuery versions.</p>\n\n<pre><code>event.originalEvent.wheelDelta\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/eXQf3/22/\">http://jsfiddle.net/eXQf3/22/</a><br />\nSee also: <a href=\"http://api.jquery.com/category/events/event-object/\">http://api.jquery.com/category/events/event-object/</a></p>\n",
                    "is_accepted": true,
                    "score": 35
                },
                {
                    "body": "<pre><code>$.fn.wheel = function (callback) {\n    return this.each(function () {\n        $(this).on('mousewheel DOMMouseScroll', function (e) {\n            e.delta = null;\n            if (e.originalEvent) {\n                if (e.originalEvent.wheelDelta) e.delta = e.originalEvent.wheelDelta / -40;\n                if (e.originalEvent.deltaY) e.delta = e.originalEvent.deltaY;\n                if (e.originalEvent.detail) e.delta = e.originalEvent.detail;\n            }\n\n            if (typeof callback == 'function') {\n                callback.call(this, e);\n            }\n        });\n    });\n};\n</code></pre>\n\n<p>and use like this:</p>\n\n<pre><code>$('body').wheel(function (e) {\n    e.preventDefault();\n    $('#myDiv').append($('&lt;div&gt;').text(e.delta));\n});\n</code></pre>\n\n<p>big thx to @Mark for jquery-fying the function (:</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>I have tried your solution, <a href=\"http://stackoverflow.com/users/1335996/psycho-brm\">psycho brm</a>, and I have changed the function <code>extractDelta(e)</code> to make it works in Firefox. Instead of <code>e.detail</code> I have used <code>e.originalEvent.detail</code> because Firefox returned an undefined delta. I have uploaded the solution and my test code to this <a href=\"http://stackoverflow.com/questions/7022852/problems-with-mousewheel-in-jquery/16808706#16808706\">post</a>. I hope it helps.</p>\n\n<pre><code>function extractDelta(e) {\n    if (e.wheelDelta) {\n        return e.wheelDelta;\n    }\n\n    if (e.originalEvent.detail) {\n        return e.originalEvent.detail * -40;\n    }\n\n    if (e.originalEvent &amp;&amp; e.originalEvent.wheelDelta) {\n        return e.originalEvent.wheelDelta;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>$(this).on('mousewheel DOMMouseScroll', function(e){\n\n  var dat = $(e.delegateTarget).data(); //in case you have set some, read it here.\n  var datx = dat.x || 0; // just to show how to get specific out of jq-data object\n\n  var eo = e.originalEvent;\n  var xy = eo.wheelDelta || -eo.detail; //shortest possible code\n  var x = eo.wheelDeltaX || (eo.axis==1?xy:0);\n  var y = eo.wheelDeltaY || (eo.axis==2?xy:0); // () necessary!\n  console.log(x,y);\n\n});\n</code></pre>\n\n<p>works in Webkit and FF, can not proof IE here :(</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>So I'm trying to disable scrolling on my page when my lightbox opens, and I found this really usefull script that does exactly that. (<a href=\"http://jsfiddle.net/mrtsherman/eXQf3/3/\">http://jsfiddle.net/mrtsherman/eXQf3/3/</a>), unfortunately, when I use it on my own page, it disabled scrolling in my lightbox as well. I started to debug the code with alerts only to find out that event.wheelDelta returns \"undefined\" on my page, while in the <a href=\"http://jsfiddle.net/eXQf3/19/\">JSFiddle</a>, it returns -120.</p>\n",
            "last_activity_date": 1384765225,
            "question_id": 8886281,
            "score": 18,
            "tags": [
                "javascript",
                "jquery",
                "scroll"
            ],
            "title": "event.wheelDelta returns undefined"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>You can use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/replace\" rel=\"nofollow\">replace</a> function.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Using <code>replace()</code> with regular expressions is the most flexible/powerful.  It's also the only way to globally replace every instance of a search pattern in JavaScript.  The non-regex variant of <code>replace()</code> will only replace the first instance.</p>\n\n<p>For example:</p>\n\n<pre><code>var str = \"foo gar gaz\";\n\n// returns: \"foo bar gaz\"\nstr.replace('g', 'b');\n\n// returns: \"foo bar baz\"\nstr = str.replace(/g/gi, 'b');\n</code></pre>\n\n<p>In the latter example, the trailing <code>/gi</code> indicates case-insensitivity and global replacement (meaning that not just the first instance should be replaced), which is what you typically want when you're replacing in strings.</p>\n\n<p>To <em>remove</em> characters, use an empty string as the replacement:</p>\n\n<pre><code>var str = \"foo bar baz\";\n\n// returns: \"foo r z\"\nstr.replace(/ba/gi, '');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 34
                }
            ],
            "body": "<p>What are the different ways I can remove characters from a string in JavaScript?</p>\n",
            "last_activity_date": 1319220095,
            "question_id": 4846978,
            "score": 15,
            "tags": [
                "javascript",
                "string"
            ],
            "title": "Remove characters from a string"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>I would probably do something like this:</p>\n\n<pre><code>Array.prototype.rotate = function(n) {\n    return this.slice(n, this.length).concat(this.slice(0, n));\n}\n</code></pre>\n\n<hr>\n\n<p><strong>Edit</strong>\u00a0\u00a0\u00a0\u00a0Here\u2019s a mutator version:</p>\n\n<pre><code>Array.prototype.rotate = function(n) {\n    while (this.length &amp;&amp; n &lt; 0) n += this.length;\n    this.push.apply(this, this.splice(0, n));\n    return this;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>How about incrementing a counter and then getting the remainder of a division by the array length to get where you are supposed to be.</p>\n\n<pre><code>var i = 0;\nwhile (true);\n{\n    var position = i % months.length;\n    alert(months[position]);\n    ++i;\n}\n</code></pre>\n\n<p>Language syntax aside this should work fine.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Type-safe, generic version which mutates the array:</p>\n\n<pre><code>Array.prototype.rotate = (function() {\n    // save references to array functions to make lookup faster\n    var push = Array.prototype.push,\n        splice = Array.prototype.splice;\n\n    return function(count) {\n        var len = this.length &gt;&gt;&gt; 0, // convert to uint\n            count = count &gt;&gt; 0; // convert to int\n\n        // convert count to value in range [0, len)\n        count = ((count % len) + len) % len;\n\n        // use splice.call() instead of this.splice() to make function generic\n        push.apply(this, splice.call(this, 0, count));\n        return this;\n    };\n})();\n</code></pre>\n\n<p>In the comments, Jean raised the issue that the code doesn't support overloading of <code>push()</code> and <code>splice()</code>. I don't think this is really useful (see comments), but a quick solution (somewhat of a hack, though) would be to replace the line</p>\n\n<pre><code>push.apply(this, splice.call(this, 0, count));\n</code></pre>\n\n<p>with this one:</p>\n\n<pre><code>(this.push || push).apply(this, (this.splice || splice).call(this, 0, count));\n</code></pre>\n\n<hr>\n\n<p>Using <code>unshift()</code> instead of <code>push()</code> is nearly twice as fast in Opera 10, whereas the differences in FF were negligible; the code:</p>\n\n<pre><code>Array.prototype.rotate = (function() {\n    var unshift = Array.prototype.unshift,\n        splice = Array.prototype.splice;\n\n    return function(count) {\n        var len = this.length &gt;&gt;&gt; 0,\n            count = count &gt;&gt; 0;\n\n        unshift.apply(this, splice.call(this, count % len, len));\n        return this;\n    };\n})();\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 21
                },
                {
                    "body": "<p>If your array is going to be large and/or you are going to rotate a lot, you might want to consider using a linked list instead of an array.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>When I couldn't find a ready-made snippet to start a list of days with 'today', I did it like this (not quite generic, probably far less refined than the above examples, but did the job):</p>\n\n<pre><code>//returns 7 day names with today first\nfunction startday() {\n    var days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];\n    var today = new Date();\n    var start = today.getDay(); //gets day number\n    if (start == 0) { //if Sunday, days are in order\n        return days\n    }\n    else { //if not Sunday, start days with today\n        return days.slice(start).concat(days.slice(0,start))\n    }\n}\n</code></pre>\n\n<p>Thanks to a little refactor by a better programmer than me it's a line or two shorter than my initial attempt, but any further comments on efficiency are welcome.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>@Christoph, you've done a clean code, but <strong>60% slowest</strong> than this one i found. Look at the result on jsPerf : <a href=\"http://jsperf.com/js-rotate-array/2\" rel=\"nofollow\">http://jsperf.com/js-rotate-array/2</a>\n[Edit] OK now there is more browsers an that not obvious witch methods the best </p>\n\n<pre><code>var rotateArray = function(a, inc) {\n    for (var l = a.length, inc = (Math.abs(inc) &gt;= l &amp;&amp; (inc %= l), inc &lt; 0 &amp;&amp; (inc += l), inc), i, x; inc; inc = (Math.ceil(l / inc) - 1) * inc - l + (l = inc))\n    for (i = l; i &gt; inc; x = a[--i], a[i] = a[i - inc], a[i - inc] = x);\n    return a;\n};\n\nvar array = ['a','b','c','d','e','f','g','h','i'];\n\nconsole.log(array);\nconsole.log(rotateArray(array.slice(), -1)); // Clone array with slice() to keep original\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>@molokoloco I needed a function that I could configure to rotate in a direction - true for forward and false for backward.  I created a snippet that takes a direction, a counter and an array and outputs an object with the counter incremented in the appropriate direction as well as prior, current, and next values.  It does NOT modify the original array.</p>\n\n<p>I also clocked it against your snippet and although it is not faster, it is faster than the ones you compare yours with - 21% slower <a href=\"http://jsperf.com/js-rotate-array/7\" rel=\"nofollow\">http://jsperf.com/js-rotate-array/7</a> .</p>\n\n<pre><code>function directionalRotate(direction, counter, arr) {\n  counter = direction ? (counter &lt; arr.length - 1 ? counter + 1 : 0) : (counter &gt; 0 ? counter - 1 : arr.length - 1)\n  var currentItem = arr[counter]\n  var priorItem = arr[counter - 1] ? arr[counter - 1] : arr[arr.length - 1]\n  var nextItem = arr[counter + 1] ? arr[counter + 1] : arr[0]\n  return {\n    \"counter\": counter,\n    \"current\": currentItem,\n    \"prior\": priorItem,\n    \"next\": nextItem\n  }\n}\nvar direction = true // forward\nvar counter = 0\nvar arr = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'];\n\ndirectionalRotate(direction, counter, arr)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>see <a href=\"http://jsperf.com/js-rotate-array/8\" rel=\"nofollow\">http://jsperf.com/js-rotate-array/8</a></p>\n\n<pre><code>function reverse(a, from, to) {\n  --from;\n  while (++from &lt; --to) {\n    var tmp = a[from];\n    a[from] = a[to];\n    a[to] = tmp;\n  }\n}\n\nfunction rotate(a, from, to, k) {\n  var n = to - from;\n  k = (k % n + n) % n;\n  if (k &gt; 0) {\n    reverse(a, from, from + k);\n    reverse(a, from + k, to);\n    reverse(a, from, to);\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can use <code>push()</code>, <code>pop()</code>, <code>shift()</code> and <code>unshift()</code> functions:</p>\n\n<pre><code>function arrayRotate(arr, reverse){\n  if(reverse)\n    arr.push(arr.shift());\n  else\n    arr.unshift(arr.pop());\n  return arr;\n} \n</code></pre>\n\n<p>usage:</p>\n\n<pre><code>arrayRotate(['h','e','l','l','o']);       // ['e','l','l','o','h'];\narrayRotate(['h','e','l','l','o'], true); // ['o','h','e','l','l'];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I was wondering what was the most efficient way to rotate a <a href=\"http://en.wikipedia.org/wiki/JavaScript\">JavaScript</a> array.</p>\n\n<p>I came up with this solution, where a positive <code>n</code> rotates the array to the right, and a negative <code>n</code> to the left (<code>-length &lt; n &lt; length</code>) :</p>\n\n<pre><code>Array.prototype.rotate = function( n ) {\n  this.unshift( this.splice( n, this.length ) )\n}\n</code></pre>\n\n<p>Which can then be used this way:</p>\n\n<pre><code>var months = [\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"];\nmonths.rotate( new Date().getMonth() )\n</code></pre>\n\n<p>My original version above has a flaw, as pointed out by <a href=\"http://stackoverflow.com/users/48015/christoph\">Christoph</a> in the comments bellow, a correct version is (the additional return allows chaining):</p>\n\n<pre><code>Array.prototype.rotate = function( n ) {\n  this.unshift.apply( this, this.splice( n, this.length ) )\n  return this;\n}\n</code></pre>\n\n<p>Is there a more compact and/or faster solution, possibly in the context of a JavaScript framework? (none of the proposed versions bellow is either more compact or faster)</p>\n\n<p>Is there any JavaScript framework out there with an array rotate built-in? (Still not answered by anyone)</p>\n",
            "last_activity_date": 1423339186,
            "question_id": 1985260,
            "score": 14,
            "tags": [
                "javascript",
                "arrays",
                "rotation"
            ],
            "title": "JavaScript Array rotate()"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>The code snippets you've used are a bit far from the correct <em>ui-router</em> settings. I would suggest to you, check this demo application: <a href=\"http://angular-ui.github.io/ui-router/sample/#/contacts/1\" rel=\"nofollow\">http://angular-ui.github.io/ui-router/sample/#/contacts/1</a>. Here we can see how the <em>List</em> is \"fixed\" while <em>Detail</em> is changed without any page refresh.</p>\n\n<p>The code of this example download here <a href=\"https://github.com/angular-ui/ui-router/tree/master/sample\" rel=\"nofollow\">https://github.com/angular-ui/ui-router/tree/master/sample</a>.</p>\n\n<p>What should help a lot to understand HOW TO <em>(except the <a href=\"https://github.com/angular-ui/ui-router/wiki/Quick-Reference\" rel=\"nofollow\">wiki</a>)</em> was this code snippet: <strong><a href=\"https://github.com/angular-ui/ui-router/blob/master/sample/app/contacts/contacts.js\" rel=\"nofollow\">state.js</a></strong>. Load the demo, read through this commented explanation. And <code>ui-router</code> will make sense...</p>\n",
                    "is_accepted": true,
                    "score": 6
                },
                {
                    "body": "<p>In essence, what you want to do is <strong>not</strong> to put the city code in the ui-view and/or not to use a template with this view. As a result, none of the DOM will get changed but the URL will. This is discussed more fully on <a href=\"http://stackoverflow.com/questions/27467170/angular-ui-router-update-url-without-view-refresh\">Angular-ui.router: Update URL without view refresh</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm new to both Angular and the ui-router.  When someone selects a model and my controller performs a standard SHOW method, I simply want to update the URL to include the model's ID without refreshing the page, and continue on with my original view.  I'm not sure how to do this...</p>\n\n<pre><code>$stateProvider\n        .state('citylist', {\n          url: \"/\",\n          templateUrl: \"views/index.html\"\n        })\n        .state('cityshow', {\n          url: \"/city/:id\",\n          templateUrl: \"views/index.html\"\n        })\n\nangular.module('app.system').controller('IndexController', ['$scope', 'Global', 'Cities', '$stateParams', '$location', function ($scope, Cities, $stateParams, $location) {\n\n    $scope.loadTown = function(id) {\n        Cities.get({id: id }, function(city) {\n             $scope.city = city\n             // Change URL\n             // Do things within the same view...\n        });\n    };\n});\n\n&lt;button ng-click=\"loadTown(123456)\"&gt;Chicago&lt;/button&gt;\n</code></pre>\n",
            "last_activity_date": 1419408056,
            "question_id": 20578840,
            "score": 13,
            "tags": [
                "javascript",
                "angularjs",
                "angular-ui-router"
            ],
            "title": "Angular/UI-Router - How Can I Update The URL Without Refreshing Everything?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p><em>What I'll write here is true for <strong>jQuery events</strong>,<br>\nFor vanilla javascript events read @T.J. Crowder comment at the bottom of the answer</em></p>\n\n<hr>\n\n<p><code>return false</code> inside a callback prevents the default behaviour. For example, in a <code>submit</code> event, it doesn't submit the form.</p>\n\n<p><code>return false</code> also stops bubbling, so the parents of the element won't know the event occurred. </p>\n\n<p><strong><code>return false</code> is equivalent to <code>event.preventDefault()</code> + <code>event.stopPropagation()</code></strong></p>\n\n<p>And of course, all code that exists after the <code>return xxx</code> line won't be executed. (as with all programming languages I know)</p>\n\n<p>Maybe you find this helpful:<br>\n<a href=\"http://stackoverflow.com/q/9730849/601179\">Stop event bubbling  - increases performance?</a></p>\n\n<hr>\n\n<p>A <em>\"real\"</em> demo to explain the difference between <code>return false</code> and <code>event.preventDefault()</code>:</p>\n\n<p><strong>Markup:</strong></p>\n\n<pre><code>&lt;div id=\"theDiv\"&gt;\n    &lt;form id=\"theForm\" &gt;\n        &lt;input type=\"submit\" value=\"submit\"/&gt; \n    &lt;/form&gt;\n&lt;/div&gt;\u200b\n</code></pre>\n\n<p><strong>JavaScript:</strong>    </p>\n\n<pre><code>$('#theDiv').submit(function() {\n    alert('DIV!');\n});\n$('#theForm').submit(function(e) {\n    alert('FORM!');\n    e.preventDefault();\n});\u200b\n</code></pre>\n\n<p>Now... when the user submit the form, the first handler is the form submit, which <code>preventDefault()</code> -> the form won't be submitted, but the event bubbles to the div, triggering it's submit handler.</p>\n\n<p><a href=\"http://jsfiddle.net/zwY5p/\"><strong>Live DEMO</strong></a></p>\n\n<p>Now, if the form submit's handler would cancel the bubbling with <code>return false</code>:</p>\n\n<pre><code>$('#theDiv').submit(function() {\n    alert('DIV!');\n});\n$('#theForm').submit(function(event) {\n    alert('FORM!');\n    return false;   \n    // Or:\n    event.preventDefault(); \n    event.stopPropagation();\n});\u200b\n</code></pre>\n\n<p>The div wouldn't even know there was a form submission.</p>\n\n<p><a href=\"http://jsfiddle.net/zwY5p/9/\"><strong>Live DEMO</strong></a></p>\n\n<hr>\n\n<p><strong>What does <code>return false</code> do in vanilla javascript events</strong></p>\n\n<blockquote>\n  <p>return false from a DOM2 handler (<strong>addEventListener</strong>) does nothing at all (neither prevents the default nor stops bubbling; from a Microsoft DOM2-ish handler (<strong>attachEvent</strong>), it prevents the default but not bubbling; from a DOM0 handler (<strong>onclick=\"return ...\"</strong>), it prevents the default (provided you include the return in the attribute) but not bubbling; from a jQuery event handler, it does both, because that's a jQuery thing. Details and live tests here \u2013 <strong>T.J. Crowder</strong></p>\n</blockquote>\n",
                    "is_accepted": true,
                    "score": 25
                },
                {
                    "body": "<p>In this instance, <code>return false;</code> prevents the default action (which is the form submitting).</p>\n\n<p>Although it's probably better to use <code>e.preventDefault();</code></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>because of ajax you do not your form to be submitted with the normal way. So you have to return false in order to prevent the default behavior of the form. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Any code after <code>return</code> statement in a function will never be executed. It stops executing of function and make this function return value passed (<code>false</code> in this case). Your function is \"submit\" event callback. If this callback returns <code>false</code>, form will not be submitted actually. Otherwise, it will be submitted as it would do without JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I wrote a webpage where a user can enter a log entry that is stored on a database and then retrieved and printed on the page using <code>ajax</code>. I am still quite new to <code>ajax</code> and was wondering if somebody could please explain to me what does <code>return false;</code> do at the end of my code? and is it even necessary? </p>\n\n<p>If I put the second ajax code after the <code>return false</code> the code does not work! can you please explain to me why?</p>\n\n<pre><code>//handles submitting the form without reloading page \n$('#FormSubmit').submit(function(e) {\n    //stores the input of today's data\n    var log_entry = $(\"#LogEntry\").val();\n    // prevent the form from submitting normally\n    e.preventDefault();\n\n    $.ajax({\n        type: 'POST',\n        url: 'behind_curtains.php',\n        data: {\n            logentry: log_entry\n        },\n        success: function() {\n            alert(log_entry);\n            //clears textbox after submission\n            $('#LogEntry').val(\"\");\n            //presents successs text and then fades it out\n            $(\"#entered-log-success\").html(\"Your Entry has been entered.\");\n            $(\"#entered-log-success\").show().fadeOut(3000);\n        }\n    });\n    //prints new log entries on page upon submittion\n    $.ajax({\n        type: 'POST',\n        url: '/wp-content/themes/childOfFanwood/traininglog_behind_curtains.php',\n        data: {\n            log_entries_loop: \"true\"\n        },\n        success: function(data) {\n            alert(data);\n            $(\"#log-entry-container\").html(\"\");\n            $(\"#log-entry-container\").html(data);\n        }\n    });\n    return false;\n});\n\u200b\n</code></pre>\n",
            "last_activity_date": 1378792867,
            "question_id": 10729198,
            "score": 11,
            "tags": [
                "javascript",
                "jquery",
                "ajax"
            ],
            "title": "What does &quot;return false;&quot; do?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Idea i get is - get all the text , pack required substring into span-s , replace innerHTML of element , and get position of span-s </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>If you know the string position of the character in the text, you can wrap the character in a &lt;span> or similar element with an ID and find the x,y coords of that element. Easiest way to do this is with jQuery or another library, see <a href=\"http://stackoverflow.com/questions/442404/dynamically-retrieve-html-element-x-y-position-with-javascript/442474#442474\">this</a> answer for a cross-browser, no-library method.</p>\n",
                    "is_accepted": true,
                    "score": 8
                }
            ],
            "body": "<p>If I have an element, for instance:</p>\n\n<pre><code>&lt;p&gt;Lorem ipsum dolor sit amet, ante risus massa adipiscing quisque quis. At mauris tellus in, sed vehicula integer fermentum rhoncus at faucibus, in vitae purus. Maecenas in vel ligula orci tellus ac, fringilla conubia lorem elit. Dui nulla sodales morbi vel. Massa sed viverra. Maecenas imperdiet donec urna a, ligula sed&lt;/p&gt;\n</code></pre>\n\n<p>And this flowed across multiple lines:</p>\n\n<pre><code>Lorem ipsum dolor sit amet, ante risus massa adipiscing\nquisque quis. At mauris tellus in, sed vehicula integer\nfermentum rhoncus at faucibus, in vitae purus. Maecenas\nin vel ligula orci tellus ac, fringilla conubia lorem\nelit. Dui nulla sodales morbi vel. Massa sed viverra.\nMaecenas imperdiet donec urna a, ligula sed\n</code></pre>\n\n<p>Is it possible to find out the position (in x,y coords) of a particular character in the text using JavaScript? Failing this could I get the y position of each line in the flowed text?</p>\n\n<p><strong>Please note</strong>: There is a lot of text in the <code>&lt;p&gt;</code> tag in my application, so adding <code>&lt;span&gt;</code> around each character/word would be too much processing.</p>\n",
            "last_activity_date": 1298905745,
            "question_id": 5143534,
            "score": 11,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "Get the position of text within an element"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>In JavaScript Functions are first class Objects. When you define a function, it is the constructor for that function object. In other words:</p>\n\n<pre><code>var gmap = function() {\n    this.add = function() {\n        alert('add');\n    return this;\n    }\n\n    this.del = function() {\n       alert('delete');\n       return this;\n    }\n\n    if (this instanceof gmap) {\n        return this.gmap;\n    } else {\n        return new gmap();\n    }\n}\nvar test = new gmap();\ntest.add().del();\n</code></pre>\n\n<p>By assigning the <pre>new gmap();</pre>to the variable test you have now constructed a new object that \"inherits\" all the properties and methods from the gmap() constructor (class). If you run the snippet above you will see an alert for \"add\" and \"delete\".</p>\n\n<p>In your examples above, the \"this\" refers to the window object, unless you wrap the functions in another function or object.</p>\n\n<p>Chaining is difficult for me to understand at first, at least it was for me, but once I understood it, I realized how powerful of a tool it can be.</p>\n",
                    "is_accepted": true,
                    "score": 18
                },
                {
                    "body": "<p>Sadly, the direct answer has to be 'no'. Even if you can override the existing methods (which you probably can in many UAs, but I suspect cannot in IE), you'd still be stuck with nasty renames:</p>\n\n<pre><code>HTMLElement.prototype.setAttribute = function(attr) { \n    HTMLElement.prototype.setAttribute(attr) //uh-oh;  \n}\n</code></pre>\n\n<p>The best you could probably get away with is using a different name:</p>\n\n<pre><code>HTMLElement.prototype.setAttr = function(attr) {\n    HTMLElement.prototype.setAttribute(attr);\n    return this;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>To \"rewrite\" a function, but still be able to use the original version, you must first assign the original function to a different variable. Assume an example object:</p>\n\n<pre><code>function MyObject() { };\n\nMyObject.prototype.func1 = function(a, b) { };\n</code></pre>\n\n<p>To rewrite <code>func1</code> for chainability, do this:</p>\n\n<pre><code>MyObject.prototype.std_func1 = MyObject.prototype.func1;\nMyObject.prototype.func1 = function(a, b) {\n    this.std_func1(a, b);\n    return this;\n};\n</code></pre>\n\n<p>Here's a <a href=\"http://jsfiddle.net/XGR4x/\" rel=\"nofollow\">working example</a>. You just need to employ this technique on all of the standard objects that you feel need chainability. </p>\n\n<p>By the time you do all of this work, you might realize that there are better ways to accomplish what you're trying to do, like using a library that already has chainability built in. <sub>*cough* <em><a href=\"http://www.jquery.com\" rel=\"nofollow\">jQuery</a></em> *cough*</sub></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Just call the method as var test = gmap().add();</p>\n\n<p>as gmap is a function not a variable</p>\n",
                    "is_accepted": false,
                    "score": -2
                }
            ],
            "body": "<p>I'm trying to get the principles of doing jQuery-style function chaining straight in my head. By this I mean:</p>\n\n<pre><code>var e = f1('test').f2().f3();\n</code></pre>\n\n<p>I have gotten one example to work, while another doesn't. I'll post those below. I always want to learn the first principle fundamentals of how something works so that I can build on top of it. Up to now, I've only had a cursory and loose understanding of how chaining works and I'm running into bugs that I can't troubleshoot intelligently.</p>\n\n<p>What I know: \n1) Functions have to return themselves, aka \"return this;\"\n2) Chainable functions must reside in a parent function, aka in jQuery, .css() is a sub method of jQuery(), hence jQuery().css();\n3) The parent function should either return itself or a new instance of itself.</p>\n\n<p>This example worked:</p>\n\n<pre><code>var one = function(num){\n    this.oldnum = num;\n\n    this.add = function(){\n    \tthis.oldnum++;\n    \treturn this;\n    }\n\n    if(this instanceof one){\n    \treturn this.one;\t\n    }else{\n    \treturn new one(num);\t\n    }\n}\nvar test = one(1).add().add();\n</code></pre>\n\n<p>But this one doesn't:</p>\n\n<pre><code>var gmap = function(){\n\nthis.add = function(){\n\talert('add');\n\n\treturn this;\t\n}\t\n\nif(this instanceof gmap){\n\treturn this.gmap;\t\n}else{\n\treturn new gmap();\t\n}\n\n}\nvar test = gmap.add();\n</code></pre>\n",
            "last_activity_date": 1416400051,
            "question_id": 1099628,
            "score": 9,
            "tags": [
                "javascript",
                "chaining"
            ],
            "title": "How does basic object/function chaining work in javascript?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Well, instead of <strong>finding</strong> the line breaks (which is virtually impossible) you can <strong>force</strong> them into the textarea, using this function:</p>\n\n<pre><code>function ApplyLineBreaks(strTextAreaId) {\n    var oTextarea = document.getElementById(strTextAreaId);\n    if (oTextarea.wrap) {\n        oTextarea.setAttribute(\"wrap\", \"off\");\n    }\n    else {\n        oTextarea.setAttribute(\"wrap\", \"off\");\n        var newArea = oTextarea.cloneNode(true);\n        newArea.value = oTextarea.value;\n        oTextarea.parentNode.replaceChild(newArea, oTextarea);\n        oTextarea = newArea;\n    }\n\n    var strRawValue = oTextarea.value;\n    oTextarea.value = \"\";\n    var nEmptyWidth = oTextarea.scrollWidth;\n    var nLastWrappingIndex = -1;\n    for (var i = 0; i &lt; strRawValue.length; i++) {\n        var curChar = strRawValue.charAt(i);\n        if (curChar == ' ' || curChar == '-' || curChar == '+')\n            nLastWrappingIndex = i;\n        oTextarea.value += curChar;\n        if (oTextarea.scrollWidth &gt; nEmptyWidth) {\n            var buffer = \"\";\n            if (nLastWrappingIndex &gt;= 0) {\n                for (var j = nLastWrappingIndex + 1; j &lt; i; j++)\n                    buffer += strRawValue.charAt(j);\n                nLastWrappingIndex = -1;\n            }\n            buffer += curChar;\n            oTextarea.value = oTextarea.value.substr(0, oTextarea.value.length - buffer.length);\n            oTextarea.value += \"\\n\" + buffer;\n        }\n    }\n    oTextarea.setAttribute(\"wrap\", \"\");\n}\n</code></pre>\n\n<p>This function get ID of textarea and whenever there is word wrap, it push new line break into the textarea. Run the function in the form submit and you will get the text with proper line breaks in the server side code.</p>\n\n<p>Tested successfully for IE, Chrome and Firefox feel free to see for yourself here: <a href=\"http://jsfiddle.net/yahavbr/pH79a/1/\">http://jsfiddle.net/yahavbr/pH79a/1/</a> (The preview will show the new lines)</p>\n",
                    "is_accepted": true,
                    "score": 9
                },
                {
                    "body": "<p>For some reason, I was never alerted when this post was updated...and last night, I had this BRILLIANT idea on how to determine where the line breaks were...\nI would rebuild the string, and check the width each time, and it WORKED\nso I came here to share it...and found I was 1 week behind</p>\n\n<p>Anyway 2 important things</p>\n\n<ol>\n<li><p>The code you provided uses the same brilliant idea I had (well done you) BUT when I test it, it breaks the first line correctly then adds a line break after every character (tested on the link jsfiddle.net)</p></li>\n<li><p>I've added my code which uses jquery and uses the width of a span to determine when to break\nAt first I tried using the width of the div, but div.width() returns the default width, not the width of the content.</p></li>\n</ol>\n\n<p><strong>I AM AWARE THIS MAY NOT WORK ON ALL BROWSERS</strong>\nso, I ask kindly that if anyone knows of a way of making this foolproof, or close to it, please share.</p>\n\n<p>First, the styles are necessary to synchornize fonts (all attributes) between the textarea and div, set the size, and (for IE) remove any scrollbars that automatically appear.</p>\n\n<pre><code>\n    .inputArea {\n      width:200px; \n      height:100px; \n      font-family:Arial; \n      font-size:12px; \n      overflow: auto; \n      border: 1px solid #cccccc;\n      padding:0;\n      margin:0;\n    }\n    .divArea {\n      font-family:Arial; \n      font-size:12px;\n    }\n  </code></pre>\n\n<p>Next, I include jquery and my custom functions:</p>\n\n<pre><code>  \n  &lt;script type=\"text/javascript\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.4.4/jquery.min.js\n\"&gt;&lt;/script&gt;\n  &lt;script type=\"text/javascript\"&gt;\n  $(document).ready(function() {\n     $(\"#breakUp\").click(function () {\n       showLineBreaks(); \n       addLineBreaks(); \n     });\n\n     function showLineBreaks() {\n       content = $(\"#textEntered\").val();\n       //replace line breaks in content with \"|\" to allow for replacement below\n       content = content.replace(\"\\r\\n\", \"<br>\");\n       content = content.replace(\"\\r\", \"<br>\");\n       content = content.replace(\"\\n\", \"<br>\");\n       $(\"#unedited\").html(content);\n     }\n\n     function addLineBreaks() {\n       content = $(\"#textEntered\").val();\n       //replace line breaks in content with \"|\" to allow for replacement below\n       content = content.replace(\"\\r\\n\", \"|\");\n       content = content.replace(\"\\r\", \"|\");\n       content = content.replace(\"\\n\", \"|\");\n       tempContent = \"\";\n       $(\"#edited\").html(\"\");\n       for (var i = 0; i \");\n         } else { \n           tempContent = $(\"#edited\").html();\n           $(\"#edited\").html(tempContent + content.charAt(i));\n           if ($(\"#edited\").width() > 200) {\n             $(\"#edited\").html(tempContent + \"<br>\" + content.charAt(i));\n           }\n         }\n       }\n     }\n  });\n  &lt;script&gt;\n</code></pre>\n\n<p>And finally, my html test page</p>\n\n<pre><code>\n  Enter text into the textarea below (Set to 200 px width, 100 px height)&lt;br&gt;\n  &lt;textarea id=\"textEntered\" class=\"inputArea\"&gt;&lt;/textarea&gt;\n  &lt;br&gt;&lt;br&gt;\n  The div below will display that text WITHOUT wrapping, BUT replacing all existing line breaks with &lt;br&gt;&lt;br&gt;\n  &lt;div id=\"unedited\"&gt;&lt;/div&gt;\n  &lt;br&gt;\n  The following div will display that text with line breaks ADDED to fit the wrapping&lt;br&gt;\n  &lt;div class=\"divArea\"&gt;&lt;span id=\"edited\"&gt;&lt;/span&gt;&lt;/div&gt;  \n  &lt;br&gt;\n  &lt;button id=\"breakUp\"&gt;Click Here to Convert&lt;/button&gt;</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I think the easiest way of doing it would be to set the word wrap of your textarea in the html code to 'hard', like this: </p>\n\n<pre><code>&lt;textarea id='yourTextArea' wrap='hard'&gt;&lt;/textarea&gt;\n</code></pre>\n\n<p>It means that wherever your textarea breaks the line for you will also insert a \\n linebreak charachter in the string when submitting. If you then find this going through your string it will make it easy to determine where was the break originally. Or you can also turn these characters to <br /> html tags with the nl2br() function of PHP.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Here is a functionally-equivalent implementation of Shadow Wizard's solution that is much faster because it uses binary search instead of linear search to determine the length of each line:</p>\n\n<pre><code>function ApplyLineBreaks(strTextAreaId) {\n    var oTextarea = document.getElementById(strTextAreaId);\n    if (oTextarea.wrap) {\n        oTextarea.setAttribute(\"wrap\", \"off\");\n    }\n    else {\n        oTextarea.setAttribute(\"wrap\", \"off\");\n        var newArea = oTextarea.cloneNode(true);\n        newArea.value = oTextarea.value;\n        oTextarea.parentNode.replaceChild(newArea, oTextarea);\n        oTextarea = newArea;\n    }\n\n    var strRawValue = oTextarea.value;\n    oTextarea.value = \"\";\n    var nEmptyWidth = oTextarea.scrollWidth;\n\n    function testBreak(strTest) {\n        oTextarea.value = strTest;\n        return oTextarea.scrollWidth &gt; nEmptyWidth;\n    }\n    function findNextBreakLength(strSource, nLeft, nRight) {\n        var nCurrent;\n        if(typeof(nLeft) == 'undefined') {\n            nLeft = 0;\n            nRight = -1;\n            nCurrent = 64;\n        }\n        else {\n            if (nRight == -1)\n                nCurrent = nLeft * 2;\n            else if (nRight - nLeft &lt;= 1)\n                return Math.max(2, nRight);\n            else\n                nCurrent = nLeft + (nRight - nLeft) / 2;\n        }\n        var strTest = strSource.substr(0, nCurrent);\n        var bLonger = testBreak(strTest);\n        if(bLonger)\n            nRight = nCurrent;\n        else\n        {\n            if(nCurrent &gt;= strSource.length)\n                return null;\n            nLeft = nCurrent;\n        }\n        return findNextBreakLength(strSource, nLeft, nRight);\n    }\n\n    var i = 0, j;\n    var strNewValue = \"\";\n    while (i &lt; strRawValue.length) {\n        var breakOffset = findNextBreakLength(strRawValue.substr(i));\n        if (breakOffset === null) {\n            strNewValue += strRawValue.substr(i);\n            break;\n        }\n        var nLineLength = breakOffset - 1;\n        for (j = nLineLength - 1; j &gt;= 0; j--) {\n            var curChar = strRawValue.charAt(i + j);\n            if (curChar == ' ' || curChar == '-' || curChar == '+') {\n                nLineLength = j + 1;\n                break;\n            }\n        }\n        strNewValue += strRawValue.substr(i, nLineLength) + \"\\n\";\n        i += nLineLength;\n    }\n    oTextarea.value = strNewValue;\n    oTextarea.setAttribute(\"wrap\", \"\");\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/pH79a/218/\">Updated fiddle</a>.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Code tested at \"Crome\", \"Firefox\" and \"IE\". Get line feeds and carriage returns a component \"textArea\" (<em>client side with javascript</em>). </p>\n\n<p>WORKS WELL!. \nI would like to share it with you</p>\n\n<p>important to include the style</p>\n\n<pre><code>    &lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;\n&lt;head runat=\"server\"&gt;\n&lt;%--//definimos un estilo--%&gt;\n &lt;STYLE type=\"text/css\"&gt;\n    #CadTemp \n    {\n        font-family: \"Arial\", serif; \n        font-size: 12pt; \n        visibility: hidden;\n        position: absolute;\n        top: -100;\n        left: 0px;\n    }\n &lt;/STYLE&gt;\n\n    &lt;script type=\"text/javascript\"&gt;\n        function mostrar() {\n            return 'ancho cadena: ' + document.getElementById('myTextarea').value.visualLength() + '  \\n' + 'ancho textarea: ' + (document.getElementById('myTextarea').scrollWidth -4);\n        }\n\n\n        //sustituimos el espacio en blanco por el punto, tienen exactamente el mismo tama\u00f1o en 'pixeles'\n        function reemplazarEspacios(texto) {\n            var devolver = \"\";\n            for (var i = 0; i &lt; texto.length; i++) {\n                if (texto.charAt(i) == ' ') {\n                    devolver += '.'\n                } else {\n                    devolver += texto.charAt(i);\n                }\n            }\n            return devolver;\n        }\n\n        // Calcula los pixeles de ancho que ocupa un texto (la cadena debe tener el mismo tama\u00f1o y tipo de fuente)\n        String.prototype.visualLength = function () {\n            var ruler = document.getElementById(\"CadTemp\");            \n            ruler.innerHTML = reemplazarEspacios(this)\n            return ruler.offsetWidth;\n        }\n\n        //quitar espacios a la derecha de la cadena\n        String.prototype.rtrim = function() {return this.replace(/\\s+$/,\"\");}\n\n        //devuelve el ultimo espacio de la cadena (que no sea espacio final)\n        function IndEspacio(cadena) {\n            //quito los espacios al final\n            var cadenaTemp = cadena.rtrim();\n            return cadenaTemp.lastIndexOf(' ');\n        }\n\n        //insertar un salto de linea\n        function AplicarSaltosLinea(ID_elemento) {\n           //guardo el elemento web en una variable\n           var TextArea = document.getElementById(ID_elemento);\n           var cadenaTexto = \"\";\n           var Cadenafinal = \"\";\n           var buffer = \"\";\n\n           //recorremos toda la cadena\n           for (var i = 0; i &lt; TextArea.value.length; i++) {\n                //guardamos el caracater en la cadena\n                cadenaTexto += TextArea.value.charAt(i);\n\n                //si hay un retorno de carro, antes de llegar al final del textArea\n                if (TextArea.value.charAt(i) == '\\n') {\n                    Cadenafinal += cadenaTexto.substr(0, cadenaTexto.lastIndexOf('\\n') + 1) ;\n                    cadenaTexto = \"\";\n                }\n\n                //si el ancho actual de la cadena  es mayor o igual que el ancho del textarea (medida pixeles)\n                if (cadenaTexto.visualLength() &gt; TextArea.scrollWidth - 4) {\n                    //recuperamos el ultimo espacio en blanco antes de la ultima letra o palabra\n                    var indiceEspacio = IndEspacio(cadenaTexto)\n\n                    buffer = \"\";\n                    //ultimo espacio en blanco detectado, metemos el trozo de palabra desde el ultimo espacio\n                    if (indiceEspacio &gt;= 0) {\n                        for (var j = indiceEspacio + 1; j &lt;= i; j++)\n                            buffer += cadenaTexto.charAt(j);\n                        indiceEspacio = -1;\n                    } else {\n                        buffer += TextArea.value.charAt(i);\n                    }\n                    //coloca la cadena \n                    Cadenafinal += cadenaTexto.substr(0, cadenaTexto.length - buffer.length) + \"\\n\";\n                    cadenaTexto = buffer;\n                }\n            }\n\n            Cadenafinal += cadenaTexto;\n\n            document.getElementById(\"pnlPreview\").innerHTML = Cadenafinal.replace(new RegExp(\"\\\\n\", \"g\"), \"&lt;br /&gt;\");\n        }\n\n\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=\"form1\" runat=\"server\"&gt;\n    &lt;div&gt;\n        &lt;span id=\"CadTemp\"&gt;hola&lt;/span&gt;\n    &lt;/div&gt;\n    &lt;br /&gt;\n    &lt;div&gt;\n        &lt;textarea cols=\"20\" rows=\"5\" id=\"myTextarea\" wrap=\"hard\" \n            style=\"font-family: Arial, Helvetica, sans-serif; font-size: 12pt\"&gt;&lt;/textarea&gt;\n    &lt;/div&gt;\n    &lt;div id=\"pnlPreview\"&gt;&lt;/div&gt;\n    &lt;div&gt;\n        &lt;button type=\"button\" onclick=\"AplicarSaltosLinea('myTextarea');\"&gt;Apply Line Breaks&lt;/button&gt;\n        &lt;button type=\"button\" onclick=\"alert( document.getElementById('myTextarea').value )\"&gt;mensaje&lt;/button&gt;\n        &lt;button type=\"button\" onclick=\"alert( mostrar())\"&gt;calcular Ancho Pixel&lt;/button&gt;\n        &lt;br /&gt;\n        &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have a string of text that I display in a textarea (right-to-left orientation). The user can resize the textarea dynamically (I use jquery for this) and the text will wrap as necessary.</p>\n\n<p>When the user hits submit, I will take that text and create an image using PHP, BUT before submitting I would like to know where the \"line-breaks\" or rather \"word-wraps\" occur.</p>\n\n<p>Everywhere I have looked so far only shows me how to process line-breaks on the php side. I want to make it clear that there ARE NO LINE-BREAKS. What I have is one LONG string that will be word-wrapped in different ways based on the width of the textarea set by the user.</p>\n\n<p>I can't use \"columns\" or any other standard width representation because I have a very complex arabic font that is actually composed of glyphs (characters) of numerous different widths.</p>\n\n<p>If anyone knows of a way of accessing where the word wraps occur (either in a textarea or a div if need-be), I'd really like to know.</p>\n\n<p>My only other solution is to actually store (in my DB) the width of every single character (somewhat tedious since there are over 200 characters in 600 different fonts, for a total of...some huge number).</p>\n\n<p>My hopes aren't high, but I thought I would ask.</p>\n\n<p>Thanks</p>\n\n<p>i. jamal</p>\n",
            "last_activity_date": 1383556325,
            "question_id": 4719777,
            "score": 7,
            "tags": [
                "javascript",
                "textarea",
                "word-wrap"
            ],
            "title": "finding &quot;line-breaks&quot; in textarea that is word-wrapping ARABIC text"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>if I were you I will use Jquery (or prototype or whatever js frameworks that available)</p>\n\n<p>on each elements you should add attributes like myid for example so that when you did on click you can retrive it.</p>\n\n<pre><code>for(i=1; i ++ ; i&lt;100){\n   var myelement = \"&lt;td myid='something\"+i+\"' class='myTD'&gt;&lt;/td&gt;\" ;\n   row.append(myelement);\n}\n\n.... \n\n$(document).ready(function(){\n  $('.myTD').click(function(){\n     var id = $(this).attr('myid');\n     my_function(id);\n  });\n\n});\n</code></pre>\n\n<p>I did this trick on my web app :)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The value of <code>i</code> changes with each iteration of the loop. <a href=\"http://stackoverflow.com/questions/1331769/access-outside-variable-in-loop-from-javascript-closure/1331796#1331796\">You need a closure to capture the value of <code>i</code></a>:</p>\n\n<pre><code>(function(i) {\n    my_element.onclick = function () {my_function (i)};\n}(i))\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 8
                },
                {
                    "body": "<p>If you write a function which builds you a handler function, you can use the new scope which that gives you to ensure that you get the number you want. For example:</p>\n\n<pre><code>function BuildHandler (i) { return function () { alert(i); };\n\nfor (i= 1; i &lt; 100; i++) {\n    var my_element = document.createElement (\"td\");\n    row.appendChild (my_element);\n    my_element.onclick = BuildHandler(i);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>If I create a whole lot of HTML elements using a loop, like</p>\n\n<pre><code>for (i= 1; i &lt; 100; i++) {\n    var my_element = document.createElement (\"td\");\n    row.appendChild (my_element);\n    my_element.onclick = function () {my_function (i));\n}\n</code></pre>\n\n<p>then when the element is clicked, the value of i passed to <code>my_function</code> is always 100, regardless of what number element is calling it. I have worked around this by using</p>\n\n<pre><code>my_element.id = \"something\"+i;\nmy_element.onclick = function (e) {my_function (e.target.id)};\n</code></pre>\n\n<p>(For Internet Explorer, the <code>target</code> needs to be <code>srcElement</code>, apparently.) I am curious to know whether there is any way to create the function without having to add the ID to the element like this.</p>\n",
            "last_activity_date": 1274428990,
            "question_id": 1582634,
            "score": 7,
            "tags": [
                "javascript",
                "loops",
                "closures"
            ],
            "title": "Passing values to onclick"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Try this <a href=\"http://snippets.dzone.com/posts/show/452\" rel=\"nofollow\">regex</a>, it works for me.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>The actual URL syntax is pretty complicated and not easy to represent in regex. Most of the simple-looking regexes out there will give many false negatives as well as false positives. See for amusement <a href=\"http://geekswithblogs.net/casualjim/archive/2005/12/01/61722.aspx\">these efforts</a> but even the end result is not good.</p>\n\n<p>Plus these days you would generally want to allow IRI as well as old-school URI, so we can link to valid addresses like:</p>\n\n<pre><code>http://en.wikipedia.org/wiki/\u00de\nhttp://\u4f8b\u3048.\u30c6\u30b9\u30c8/\n</code></pre>\n\n<p>I would go only for simple checks: does it start with a known-good method: name? Is it free of spaces and double-quotes? If so then hell, it's probably good enough.</p>\n",
                    "is_accepted": true,
                    "score": 11
                },
                {
                    "body": "<p>Try this regex </p>\n\n<pre><code>/(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&amp;%@!\\-\\/]))?/\n</code></pre>\n\n<p>It works best for me.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>In the <a href=\"http://stackoverflow.com/a/1411800/638546\">accepted answer</a> <a href=\"http://stackoverflow.com/users/18936/bobince\">bobince</a> got it right: validating only the scheme name, ://, and spaces and double quotes is usually enough. Here is how the validation can be implemented in JavaScript:</p>\n\n<pre><code>var url = 'http://www.google.com';\nvar valid = /^(ftp|http|https):\\/\\/[^ \"]+$/.test(url);\n// true\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var r = /^(ftp|http|https):\\/\\/[^ \"]+$/;\nr.test('http://www.goo le.com');\n// false\n</code></pre>\n\n<p>or</p>\n\n<pre><code>var url = 'http:www.google.com';\nvar r = new RegExp('/^(ftp|http|https):\\/\\/[^ \"]+$/');\nr.test(url);\n// false\n</code></pre>\n\n<p>References for syntax:</p>\n\n<ul>\n<li><a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/RegExp\">MDN RegExp Object</a></li>\n<li><a href=\"http://www.w3schools.com/jsref/jsref_obj_regexp.asp\">W3Schools RegExp Object</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;URL&lt;/title&gt;\n&lt;script type=\"text/javascript\"&gt;\n    function validate() {\n        var url = document.getElementById(\"url\").value;\n        var pattern = /(ftp|http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&amp;%@!\\-\\/]))?/;\n        if (pattern.test(url)) {\n            alert(\"Url is valid\");\n            return true;\n        } \n            alert(\"Url is not valid!\");\n            return false;\n\n    }\n&lt;/script&gt;\n\n&lt;/head&gt;\n&lt;body&gt;\nURL :\n&lt;input type=\"text\" name=\"url\" id=\"url\" /&gt;\n&lt;input type=\"submit\" value=\"Check\" onclick=\"validate();\" /&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Does someone have a regex for validating urls (NOT for finding them inside a text passage)? JavaScript snippet would be preferred.</p>\n",
            "last_activity_date": 1367491353,
            "question_id": 1410311,
            "score": 5,
            "tags": [
                "javascript",
                "regex",
                "validation",
                "url"
            ],
            "title": "Regular expression for URL validation (in JavaScript)"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p><code>range.setStart</code> and <code>range.setEnd</code> can be used on <em>text</em> nodes, not element nodes. Or else they will raise a DOM Exception. So what you have to do is</p>\n\n<pre><code>range.setStart(contentEditableElement.firstChild, index);\n</code></pre>\n\n<p>I don't get what you did for IE8 and lower. Where did you mean to use <code>index</code>?</p>\n\n<p>Overall, your code fails if the content of the nodes is more than a single text node. It may happen for nodes with <code>isContentEditable === true</code>, since the user can paste text from Word or other places, or create a new line and so on.</p>\n\n<p>Here's an adaptation of what I did in my framework:</p>\n\n<pre><code>var setSelectionRange = function(element, start, end) {\n    var rng = document.createRange(),\n        sel = getSelection(),\n        n, o = 0,\n        tw = document.createTreeWalker(element, NodeFilter.SHOW_TEXT, null, null);\n    while (n = tw.nextNode()) {\n        o += n.nodeValue.length;\n        if (o &gt; start) {\n            rng.setStart(n, n.nodeValue.length + start - o);\n            start = Infinity;\n        }\n        if (o &gt;= end) {\n            rng.setEnd(n, n.nodeValue.length + end - o);\n            break;\n        }\n    }\n    sel.removeAllRanges();\n    sel.addRange(rng);\n};\n\nvar setCaret = function(element, index) {\n    setSelectionRange(element, index, index);\n};\n</code></pre>\n\n<p>The trick here is to use the <code>setSelectionRange</code> function - that selects a range of text inside and element - with <code>start === end</code>. In <code>contentEditable</code> elements, this puts the caret in the desired position.</p>\n\n<p>This should work in all modern browsers, and for elements that have more than just a text node as a descendant. I'll let you add checks for <code>start</code> and <code>end</code> to be in the proper range.</p>\n\n<p>For IE8 and lower, things are a little harder. Things would look a bit like this:</p>\n\n<pre><code>var setSelectionRange = function(element, start, end) {\n    var rng = document.body.createTextRange();\n    rng.moveToElementText(element);\n    rng.moveStart(\"character\", start);\n    rng.moveEnd(\"character\", end - element.innerText.length - 1);\n    rng.select();\n};\n</code></pre>\n\n<p>The problem here is that <code>innerText</code> is <em>not</em> good for this kind of things, as some white spaces are collapsed. Things are fine if there's just a text node, but are screwed for something more complicated like the ones you get in <code>contentEditable</code> elements.</p>\n\n<p>IE8 doesn't support <code>textContent</code>, so you have to count the characters using a <code>TreeWalker</code>. But than again IE8 doesn't support <code>TreeWalker</code> either, so you have to walk the DOM tree all by yourself...</p>\n\n<p>I still have to fix this, but somehow I doubt I'll ever will. Even if I <em>did</em> code a polyfill for <code>TreeWalker</code> in IE8 and lower...</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Here's an answer adapted from  <a href=\"http://stackoverflow.com/questions/13949059/persisting-the-changes-of-range-objects-after-selection-in-html/13950376#13950376\">Persisting the changes of range objects after selection in HTML</a>. Bear in mind that this is less than perfect in several ways (as is MaxArt's, which uses the same approach): firstly, only text nodes are taken into account, meaning that line breaks implied by <code>&lt;br&gt;</code> and block elements are not included in the index; secondly, all text nodes are considered, even those inside elements that are hidden by CSS or inside <code>&lt;script&gt;</code> elements; thirdly, consecutive white space characters that are collapsed on the page are all included in the index; finally, IE &lt;= 8's rules are different again because it uses a different mechanism.</p>\n\n<pre><code>var setSelectionByCharacterOffsets = null;\n\nif (window.getSelection &amp;&amp; document.createRange) {\n    setSelectionByCharacterOffsets = function(containerEl, start, end) {\n        var charIndex = 0, range = document.createRange();\n        range.setStart(containerEl, 0);\n        range.collapse(true);\n        var nodeStack = [containerEl], node, foundStart = false, stop = false;\n\n        while (!stop &amp;&amp; (node = nodeStack.pop())) {\n            if (node.nodeType == 3) {\n                var nextCharIndex = charIndex + node.length;\n                if (!foundStart &amp;&amp; start &gt;= charIndex &amp;&amp; start &lt;= nextCharIndex) {\n                    range.setStart(node, start - charIndex);\n                    foundStart = true;\n                }\n                if (foundStart &amp;&amp; end &gt;= charIndex &amp;&amp; end &lt;= nextCharIndex) {\n                    range.setEnd(node, end - charIndex);\n                    stop = true;\n                }\n                charIndex = nextCharIndex;\n            } else {\n                var i = node.childNodes.length;\n                while (i--) {\n                    nodeStack.push(node.childNodes[i]);\n                }\n            }\n        }\n\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n    }\n} else if (document.selection) {\n    setSelectionByCharacterOffsets = function(containerEl, start, end) {\n        var textRange = document.body.createTextRange();\n        textRange.moveToElementText(containerEl);\n        textRange.collapse(true);\n        textRange.moveEnd(\"character\", end);\n        textRange.moveStart(\"character\", start);\n        textRange.select();\n    };\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 7
                },
                {
                    "body": "<p>Here is my improvement over Tim's answer. It removes the caveat about hidden characters, but the other caveats remain:</p>\n\n<ul>\n<li>only text nodes are taken into account (line breaks implied by &lt;br> and block elements are not included in the index)</li>\n<li>all text nodes are considered, even those inside elements that are hidden by CSS or inside  elements</li>\n<li>IE &lt;= 8's rules are different again because it uses a different mechanism.</li>\n</ul>\n\n<p>The code:</p>\n\n<pre><code>var setSelectionByCharacterOffsets = null;\n\nif (window.getSelection &amp;&amp; document.createRange) {\n    setSelectionByCharacterOffsets = function(containerEl, start, end) {\n        var charIndex = 0, range = document.createRange();\n        range.setStart(containerEl, 0);\n        range.collapse(true);\n        var nodeStack = [containerEl], node, foundStart = false, stop = false;\n\n        while (!stop &amp;&amp; (node = nodeStack.pop())) {\n            if (node.nodeType == 3) {\n                var hiddenCharacters = findHiddenCharacters(node, node.length)\n                var nextCharIndex = charIndex + node.length - hiddenCharacters;\n\n                if (!foundStart &amp;&amp; start &gt;= charIndex &amp;&amp; start &lt;= nextCharIndex) {\n                    var nodeIndex = start-charIndex\n                    var hiddenCharactersBeforeStart = findHiddenCharacters(node, nodeIndex)\n                    range.setStart(node, nodeIndex + hiddenCharactersBeforeStart);\n                    foundStart = true;\n                }\n                if (foundStart &amp;&amp; end &gt;= charIndex &amp;&amp; end &lt;= nextCharIndex) {\n                    var nodeIndex = end-charIndex\n                    var hiddenCharactersBeforeEnd = findHiddenCharacters(node, nodeIndex)\n                    range.setEnd(node, nodeIndex + hiddenCharactersBeforeEnd);\n                    stop = true;\n                }\n                charIndex = nextCharIndex;\n            } else {\n                var i = node.childNodes.length;\n                while (i--) {\n                    nodeStack.push(node.childNodes[i]);\n                }\n            }\n        }\n\n        var sel = window.getSelection();\n        sel.removeAllRanges();\n        sel.addRange(range);\n    }\n} else if (document.selection) {\n    setSelectionByCharacterOffsets = function(containerEl, start, end) {\n        var textRange = document.body.createTextRange();\n        textRange.moveToElementText(containerEl);\n        textRange.collapse(true);\n        textRange.moveEnd(\"character\", end);\n        textRange.moveStart(\"character\", start);\n        textRange.select();\n    };\n}\n\nvar x = document.getElementById('a')\nx.focus()\nsetSelectionByCharacterOffsets(x, 1, 13)\n\nfunction findHiddenCharacters(node, beforeCaretIndex) {\n    var hiddenCharacters = 0\n    var lastCharWasWhiteSpace=true\n    for(var n=0; n-hiddenCharacters&lt;beforeCaretIndex &amp;&amp;n&lt;node.length; n++) {\n        if([' ','\\n','\\t','\\r'].indexOf(node.textContent[n]) !== -1) {\n            if(lastCharWasWhiteSpace)\n                hiddenCharacters++\n            else\n                lastCharWasWhiteSpace = true\n        } else {\n            lastCharWasWhiteSpace = false   \n        }\n    }\n\n    return hiddenCharacters\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How would I go a about modifying this(<a href=\"http://stackoverflow.com/questions/6249095/how-to-set-caretcursor-position-in-contenteditable-element-div?rq=1\">How to set caret(cursor) position in contenteditable element (div)?</a>) so it accepts a number index and element and sets the cursor position to that index?</p>\n\n<p>For example:\nIf I had the paragraph:</p>\n\n<pre><code>&lt;p contenteditable=\"true\"&gt;This is a paragraph.&lt;/p&gt;\n</code></pre>\n\n<p>And I called:</p>\n\n<pre><code>setCaret($(this).get(0), 3)\n</code></pre>\n\n<p>The cursor would move to index 3 like so:</p>\n\n<pre><code>Thi|s is a paragraph.\n</code></pre>\n\n<hr>\n\n<p>I have this but with no luck: </p>\n\n<pre><code>function setCaret(contentEditableElement, index)\n{\n    var range,selection;\n    if(document.createRange)//Firefox, Chrome, Opera, Safari, IE 9+\n    {\n        range = document.createRange();//Create a range (a range is a like the selection but invisible)\n        range.setStart(contentEditableElement,index);\n        range.collapse(true);\n        selection = window.getSelection();//get the selection object (allows you to change selection)\n        selection.removeAllRanges();//remove any selections already made\n        selection.addRange(range);//make the range you have just created the visible selection\n    }\n    else if(document.selection)//IE 8 and lower\n    { \n        range = document.body.createTextRange();//Create a range (a range is a like the selection but invisible)\n        range.moveToElementText(contentEditableElement);//Select the entire contents of the element with the range\n        range.collapse(false);//collapse the range to the end point. false means collapse to end rather than the start\n        range.select();//Select the range (make it the visible selection\n    }\n}\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/BanQU/4/\" rel=\"nofollow\">http://jsfiddle.net/BanQU/4/</a></p>\n",
            "last_activity_date": 1403220702,
            "question_id": 16095155,
            "score": 3,
            "tags": [
                "javascript",
                "jquery",
                "contenteditable"
            ],
            "title": "Javascript Contenteditable - set Cursor / Caret to index"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>If it happened by accident/mistake, you would call it <a href=\"http://en.wikipedia.org/wiki/Clobbering\" rel=\"nofollow\"><em>clobbering</em></a> the original <code>parseInt()</code>.</p>\n\n<p>Otherwise, I believe I saw it referred to <em>shadowing</em> recently here on Stack Overflow.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>More commonly called \"shadowing\".</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The correct term is <a href=\"http://en.wikipedia.org/wiki/Variable_shadowing\">[Variable] Shadowing</a></p>\n\n<blockquote>\n  <blockquote>\n    <p>In computer programming, <strong>variable shadowing occurs when a variable declared within a certain scope (decision block, method, or inner class) has the same name as a variable declared in an outer scope.</strong> This outer variable is said to be shadowed...</p>\n  </blockquote>\n</blockquote>\n\n<p><em>Functions in JavaScript are just function-objects stored within variables (or properties) that follow the same scope-chain/resolution rules as normal variables (or properties)</em>. This explains why the original can still be accessed as <code>window.parseInt</code> as well. It is the \"IIFE\" which introduces this new scope (functions are the only way to introduce new scope in JavaScript).</p>\n\n<p>However, the <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf\">ECMAScript Specification [5th Edition]</a> does not use the term <em>shadowing</em>, nor can I find a specific replacement term. (The fundamental <em>shadowing</em> behavior is defined in \"10.2.2.1  GetIdentifierReference\" and related sections.)</p>\n\n<p>It is <strong>not</strong> <em>overloading</em> and it is <strong>not</strong> <em>overriding</em>, which are entirely different. I have no idea where <em>overshadowing</em> (in this context) originated or how it is supposed to differ from \"normal\" <em>[variable] shadowing</em>. If the term <em>shadowing</em> didn't already exist to explain this behavior then -- from an English language viewpoint anyway -- <em>overshadowing</em> (\"to make insignificant/inconsequential\") might be more appropriate than <em>shadowing</em> (\"to cast shadow on/darken\").</p>\n\n<p>Happy coding.</p>\n",
                    "is_accepted": true,
                    "score": 14
                }
            ],
            "body": "<p>Below we have an <a href=\"http://benalman.com/news/2010/11/immediately-invoked-function-expression/\">IIFE</a> which (like any function) creates a local scope. Inside that scope there is a <code>parseInt</code> function. Now, since there already is a global function in the browser with that name, the local function will overshadow the global <code>parseInt</code> function - inside the IIFE any call to <code>parseInt</code> will call the local function, and not the global one. (The global function can still be referenced with <code>window.parseInt</code>.)</p>\n\n<pre><code>parseInt('123', 10); // the browser function is called\n\n(function() {\n\n    function parseInt() { return 'overshadowed'; }\n\n    parseInt('123', 10); // the local function is called\n\n})();\n\nparseInt('123', 10); // the browser function is called\n</code></pre>\n\n<p>Is there a <em>de jure</em> (ECMAScript spec) or <em>de facto</em> (common) name for this? Overshadowing? Overloading? </p>\n",
            "last_activity_date": 1317812536,
            "question_id": 5373278,
            "score": 13,
            "tags": [
                "javascript",
                "scope",
                "iife"
            ],
            "title": "Variable shadowing in JavaScript"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>No. It has to start with a letter. See <a href=\"http://www.electrictoolbox.com/valid-characters-html-id-attribute/\" rel=\"nofollow\">http://www.electrictoolbox.com/valid-characters-html-id-attribute/</a>. You can use numbers after the first character, however, e.g. <code>a1</code> or <code>theansweris42</code>.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>To keep things simple, start it with a letter.</p>\n\n<p>You <em>can</em> use an all-numeric <code>id</code> according to the <a href=\"http://www.w3.org/TR/html5/dom.html#the-id-attribute\">HTML5 specification</a> <em>(anything but a space is okay)</em>, but I wouldn't. For one thing, earlier HTML specs were <a href=\"http://www.w3.org/TR/html401/struct/global.html#adef-id\">more</a> <a href=\"http://www.w3.org/TR/html401/types.html#type-name\">restrictive</a> <em>(requiring a small set of chars and starting with a letter)</em> (although browsers didn't care, which is reflected in the HTML5 spec's change), and <a href=\"http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\">CSS still is more restrictive</a>, although you can do it with escaping (see below).</p>\n\n<p>Those links above in a list for clarity:</p>\n\n<ul>\n<li><a href=\"http://www.w3.org/TR/html5/dom.html#the-id-attribute\">HTML5 - The ID Attribute</a></li>\n<li>HTML4 - <a href=\"http://www.w3.org/TR/html401/struct/global.html#adef-id\">The ID Attribute</a> and <a href=\"http://www.w3.org/TR/html401/types.html#type-name\">ID and NAME tokens</a></li>\n<li><a href=\"http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\">CSS 2.1 rules for IDs</a></li>\n</ul>\n\n<p>Below is an example using a <code>div</code> with the <code>id</code> \"12\" and doing things with it three ways:</p>\n\n<ol>\n<li>With CSS</li>\n<li>With JavaScript via <code>document.getElementById</code></li>\n<li>With JavaScript via <code>document.querySelector</code> (on browsers that support it)</li>\n</ol>\n\n<p>It works on every browser I've ever thrown at it (see list below the code). <a href=\"http://jsbin.com/supojaxu/1\">Live Copy</a></p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;meta charset=utf-8 /&gt;\n&lt;title&gt;Using Numeric ID Selectors&lt;/title&gt;\n  &lt;style&gt;\n    #\\31\\32 {\n      background: #0bf;\n    }\n    pre {\n      border: 1px solid #aaa;\n      background: #eee;\n    }\n  &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n  &lt;div id=\"12\"&gt;This div is: &lt;code&gt;&amp;lt;div id=\"12\"&gt;...&amp;lt;/div&gt;&lt;/code&gt;&lt;/div&gt;\n  &lt;p&gt;In the above:&lt;/p&gt;\n  &lt;p&gt;The background is set using CSS:&lt;/p&gt;\n  &lt;pre&gt;#\\31\\32 {\n  background: #0bf;\n}&lt;/pre&gt;\n  &lt;p&gt;(31 is the character code for 1 in hex; 32 is the character code for 2 in hex. You introduce those hex character sequences with the backslash, &lt;a href=\"http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier\"&gt;see the CSS spec&lt;/a&gt;.)&lt;/p&gt;\n  &lt;p&gt;The border is set from JavaScript using &lt;code&gt;document.getElementById&lt;/code&gt;:&lt;/p&gt;\n  &lt;pre&gt;document.getElementById(\"12\").style.border = \"2px solid black\";&lt;/pre&gt;\n  &lt;script&gt;\n    (function() {\n      \"use strict\";\n\n      document.getElementById(\"12\").style.border = \"2px solid black\";\n      if (document.querySelector) {\n        document.querySelector(\"#\\\\31\\\\32\").style.fontStyle = \"italic\";\n        display(\"The font style is set using JavaScript with &lt;code&gt;document.querySelector&lt;/code&gt;:\");\n        display(\"document.querySelector(\\\"#\\\\\\\\31\\\\\\\\32\\\").style.fontStyle = \\\"italic\\\";\", \"pre\");\n      }\n      else {\n        display(\"(This browser doesn't support &lt;code&gt;document.querySelector&lt;/code&gt;, so we couldn't try that.)\");\n      }\n\n      function display(msg, tag) {\n        var elm = document.createElement(tag || 'p');\n        elm.innerHTML = String(msg);\n        document.body.appendChild(elm);\n      }\n    })();\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I've never seen the above fail in a browser. (That doesn't mean I think it's a good idea.) Here's a list of the browsers I've seen it work in:</p>\n\n<ul>\n<li>Chrome 26, 34</li>\n<li>IE6, IE8, IE9, IE10, IE11</li>\n<li>Firefox 3.6, 20, 29</li>\n<li>IE10 (Mobile)</li>\n<li>Safari iOS 3.1.2, iOS 7</li>\n<li>Android 2.3.6, 4.2</li>\n<li>Opera 10.62, 12.15, 20</li>\n<li>Konquerer 4.7.4</li>\n</ul>\n\n<p>But again: For simplicity, don't do this. Selectors like <code>#\\31\\32</code> are pretty tricky to read.</p>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>From the HTML 4.01 specs...</p>\n\n<blockquote>\n  <p>ID must begin with a\n  letter ([A-Za-z]) and may be followed\n  by any number of letters, digits\n  ([0-9]), hyphens (\"-\"), underscores\n  (\"_\"), colons (\":\"), and periods\n  (\".\").</p>\n</blockquote>\n\n<p>So... no :) But in HTML 5 I think you might be allowed to, but I would recommend against it.</p>\n\n<p>I hope this helps.<br>\nHristo</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>As pointed out in other responses, the answer is technically:</p>\n\n<pre><code>ID and NAME tokens must begin with a letter ([A-Za-z]) and may be followed by any number of letters, digits ([0-9]), hyphens (\"-\"), underscores (\"_\"), colons (\":\"), and periods (\".\").\n</code></pre>\n\n<p>However, as a practical matter, you will be somewhat more limited if you want your documents to work with a variety of browsers, CSS editors, and JavaScript frameworks.</p>\n\n<p>As noted in other responses, jQuery has problems with ids that contain periods and colons.</p>\n\n<p>A more subtle problem is that some browsers have been known to mistakenly treat id attribute values as case-sensitive. That means that if you type id=\"firstName\" in your HTML (lower-case 'f') and .FirstName { color: red } in your CSS (upper-case 'F'), a buggy browsers will not set the element's color to red. Because both definitions use valid characters for the id, you will receive no error from a validation tool.</p>\n\n<p>You can avoid these problems by strictly sticking to a naming convention. For example, if you limit yourself entirely to lower-case characters and always separate words with either hyphens or underscores (but not both, pick one and never use the other), then you have an easy-to-remember pattern. You will never wonder \"was it firstName or FirstName?\" because you will always know that you should type first_name.</p>\n\n<p>Same Question is Already ask</p>\n\n<p><a href=\"http://stackoverflow.com/questions/70579/what-are-valid-values-for-the-id-attribute-in-html\">What are valid values for the id attribute in HTML?</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>From a maintainability standpoint this is a bad idea. ID's should be at least somewhat descriptive of what they represent. Prefix it with something meaningful to be compliant with what others have already answered with. For example:</p>\n\n<pre><code>&lt;div id =\"phoneNumber_12\" &gt; &lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>No. It should start with a letter. \nif you do it check the  <a href=\"http://css-tricks.com/ids-cannot-start-with-a-number/\" rel=\"nofollow\">css issue</a> you will face and it is not allowed in W3C\u2019s HTML specification <a href=\"http://www.maxdesign.com.au/articles/naming-ids-with-numbers/\" rel=\"nofollow\">here</a></p>\n\n<blockquote>\n  <p><strong>ID and NAME tokens must begin with a letter ([A-Za-z]) and may be\n  followed by any number of letters, digits ([0-9]), hyphens (\"-\"),\n  underscores (\"_\"), colons (\":\"), and periods (\".\")</strong> (<a href=\"http://www.w3.org/TR/html4/types.html#type-name\" rel=\"nofollow\">source link</a>)</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Can I have a div with id as number?</p>\n\n<p>eg <code>&lt;div id =\"12\"  &gt; &lt;/div&gt;</code></p>\n",
            "last_activity_date": 1399876411,
            "question_id": 5672903,
            "score": 11,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "can i have a div with id as number?"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Disabling the back button seems kind of a \"brute force\" approach.</p>\n\n<p>Another option would be that you could jump out to a modal dialog that doesn't have command buttons, walk users through the workflow, and close the dialog when the process is complete.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Could you move the comment to the previous page and make it a required field there?</p>\n\n<p>Disabling the back button <strong>will not work.</strong></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Do you have access to the server-side source code? If so, you can put a check on the first page that redirects to the second page if the information has been submitted already (you'll need to use sessions for this, obviously). At a former job, this is how we handled multi-step applications (application as in application for acceptance).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>There simply is no reliable way to do this.  You cannot guarantee that 100% of the time you can stop the user from doing this.</p>\n\n<p>With that in mind, is it worth going to extremely exotic solutions to disable \"most\" of the time?  That's for you to decide.</p>\n\n<p>Good luck.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Because of the security isolation of javascript in the browser, you cannot change what the back button does.</p>\n\n<p>Perhaps you could store something in the user's session that indicates that a comment is needed, and have any page in the app that the user tries to load redirect to the comment page?</p>\n\n<p>What if the user closes their browser when he/she gets tot he comment page?</p>\n\n<p>I know that you have not been given a choice here, but since what they are asking for seems to be impossible...</p>\n\n<p>Perhaps you could just not consider the item as completed until the user enters comments.  Thus, you would need to keep track of both in-progress items and completed items, and make that distinction in the UI, but this might be the most robust method.</p>\n\n<p>Or just put the comment field on the form page?</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I've seen this before:</p>\n\n<pre><code>window.onBack = history.forward();\n</code></pre>\n\n<p>It is most definitely a dirty hack and, if at all possible, I would attempt to not disable the back button. And the user can probably still get around it quite easily. And depending on caching, there is no telling if the server code will be processed or if the cached page with JavaScript will run first. </p>\n\n<p>So, yeah, use at your own risk :)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Nah, you're doomed. Even if you pop the page up in some different browser and hid the back button, there's always the Backspace key.</p>\n\n<p>The problem with marketing guys and analyst types is that some of them do not understand the fundamental concept of the web being stateless. They do not understand that the page is totally, totally unaware of the browser using it and absolute control of the browser is totally outside the capability of web pages.</p>\n\n<p>The best way to discourage your users to hit the back button is to make sure that your page loses <em>all</em> its data when they press back, e.g., the comment page is the only point where the data can be saved, and if they do press the back button they have to do <em>everything</em> all over again (think along the lines of pragma: nocache).</p>\n\n<p>Users will complain, sure, but they are the reason that this godforsaken requirement exists, right?</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Don't do this, just don't. It's bad interface design and forces the user's browser to behave in a way that they don't expect.</p>\n\n<p>I would regard any script that successfully stopped my back button from working to be a hack, and I would expect the IE team to release a security-fix for it.</p>\n\n<p>The back button is part of their program interface, not your website.</p>\n\n<p>In your specific case I think the best bet is to add an unload event to the page that warns the user if they haven't completed the form. The back button would be unaffected and the user would be warned of their action.</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<blockquote>\n  <p>What the users have figured out is\n  that they don't have to enter a\n  comment if they submit the information\n  and go to the page with the comment\n  and then hit the back button to return\n  to the previous page.</p>\n</blockquote>\n\n<p>Then they are probably also smart enough to type <em>'no comment'</em> into the comments field.</p>\n\n<p>You can try to force people to add comments, but you will probably just end up with bad unusable software, annoyed users, and still not get comments. This is usually a good time to take a step back and reconsider what you are doing from the users' point of view.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You should secure your application against double submission instead of breaking user interface to hide the bug.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>AS a simple solution: try this one. Insert an update panel and a button in there and use javascript to hide it and then press it on page load. Yes I understand that it will cause your page to post back on load and may not work if javascript is disabled but certainly will help you achieve a half decent response to the back button issue. Andy</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I came up with a little hack that disables the back button using JavaScript. I checked it on chrome 10, firefox 3.6 and IE9:</p>\n\n<pre><code>&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" &gt;\n&lt;title&gt;Untitled Page&lt;/title&gt;\n&lt;script type = \"text/javascript\" &gt;\nfunction changeHashOnLoad() {\n     window.location.href += \"#\";\n     setTimeout(\"changeHashAgain()\", \"50\"); \n}\n\nfunction changeHashAgain() {\n  window.location.href += \"1\";\n}\n\nvar storedHash = window.location.hash;\nwindow.setInterval(function () {\n    if (window.location.hash != storedHash) {\n         window.location.hash = storedHash;\n    }\n}, 50);\n\n\n&lt;/script&gt;\n&lt;/head&gt;\n&lt;body onload=\"changeHashOnLoad(); \"&gt;\nTry to hit the back button!\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can prevent them from going back to the previous page. <code>location.replace()</code> replaces the current page's history entry with a new page, so...</p>\n\n<p>page1.html: user clicks a link that goes to page2.html</p>\n\n<p>page2.html: user clicks a link that calls <code>location.replace('page3.html');</code></p>\n\n<p>page3.html: user clicks back button and goes to page1.html</p>\n\n<p>This may not fit well with doing a POST, but you could post the data to a web service via AJAX, then call location.replace()</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>So the SMEs at my current place of employment want to try and disable the back button for certain pages.  We have a page where the user makes some selections and submits them to be processed.  In some instances they have to enter a comment on another page.  </p>\n\n<p>What the users have figured out is that they don't have to enter a comment if they submit the information and go to the page with the comment and then hit the back button to return to the previous page.  </p>\n\n<p>I know there are several different solutions to this (and many of them are far more elegant then disabling the back button), but this is what I'm left with.  Is it possible to prevent someone from going back to the previous page through altering the behavior of the back button.  (like a submit -> return false sorta thing).  </p>\n\n<p>Due to double posting information I can't have it return to the previous page and then move to the current one.  I can only have it not direct away from the current page.  I Googled it, but I only saw posts saying that it will always return to the previous page.  I was hoping that someone has some mad kung foo js skills that can make this possible.</p>\n\n<p>I understand that everyone says this is a bad idea, and I agree, but sometimes you just have to do what you're told.</p>\n",
            "last_activity_date": 1408544054,
            "question_id": 54539,
            "score": 9,
            "tags": [
                "javascript",
                "internet-explorer",
                "back-button"
            ],
            "title": "Prevent Use of the Back Button (in IE)"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>PHP is server side only as far as i know.</p>\n\n<p>You maybe want to use JavaScript.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As PHP runs on the server-side, <strong>you cannot access the client-side time from PHP</strong> : PHP doesn't know much about the browser <em>-- and you can have PHP scripts that run without being called from a browser.</em></p>\n\n<p>But <strong>you could get it from Javascript</strong> <em>(which is executed on the client-side)</em>, and, then, pass it to PHP via an Ajax request, for example.</p>\n\n<p><br>\nAnd here are a couple of questions+answers that might help you getting started :</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/863474/automatically-detect-users-current-local-time-with-javascript-or-php\">Automatically detect user\u2019s current local time with JavaScript or PHP</a></li>\n<li><a href=\"http://stackoverflow.com/questions/13/how-can-i-determine-a-web-users-time-zone\">How can I determine a web user\u2019s time zone?</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As mentioned by everyone PHP only displays server side time.</p>\n\n<p>For client side, you would need Javascript, something like the following should do the trick.</p>\n\n<pre><code> var currentTime = new Date()\n  var hours = currentTime.getHours()\n  var minutes = currentTime.getMinutes()\n\n  if (minutes &lt; 10)\n  minutes = \"0\" + minutes\n\n  document.write(\"&lt;b&gt;\" + hours + \":\" + minutes + \" \" + \"&lt;/b&gt;\")\n</code></pre>\n\n<p>And if you want the AM/PM suffix, something like the following should work:</p>\n\n<pre><code>  var currentTime = new Date()\n  var hours = currentTime.getHours()\n  var minutes = currentTime.getMinutes()\n\n  var suffix = \"AM\";\n  if (hours &gt;= 12) {\n  suffix = \"PM\";\n  hours = hours - 12;\n  }\n  if (hours == 0) {\n  hours = 12;\n  }\n\n  if (minutes &lt; 10)\n  minutes = \"0\" + minutes\n\n  document.write(\"&lt;b&gt;\" + hours + \":\" + minutes + \" \" + suffix + \"&lt;/b&gt;\")\n</code></pre>\n\n<p>Here is a list of additional JS Date and Time functions you could mess around with: <a href=\"http://www.quackit.com/javascript/javascript_date_and_time_functions.cfm\">http://www.quackit.com/javascript/javascript_date_and_time_functions.cfm</a></p>\n",
                    "is_accepted": true,
                    "score": 13
                },
                {
                    "body": "<p>Here's a \"PHP\" solution:</p>\n\n<pre><code>echo '&lt;script type=\"text/javascript\"&gt;\nvar x = new Date()\ndocument.write(x)\n&lt;/script&gt;';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>You could possibly use Geolocation by IP Address to work out which country the user is in, and then use that.</p>\n\n<p>But using Javascript or letting the user choose a Timezone will probably be better.</p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>How can I get the time of the client side?\nWhen I use <code>date()</code> it returns server's time.</p>\n",
            "last_activity_date": 1340495180,
            "question_id": 2705067,
            "score": 7,
            "tags": [
                "php",
                "javascript"
            ],
            "title": "How can I get the user&#39;s local time instead of the server&#39;s time?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>This is not possible; pseudo-elements are not part of the DOM at all so you can't bind any events directly to them, you can only bind to their parent elements.</p>\n\n<p>If you must have a click handler on the red region only, you have to make a child element, like a <code>span</code>, place it right after the opening <code>&lt;p&gt;</code> tag, apply styles to <code>p span</code> instead of <code>p:before</code>, and bind to it.</p>\n",
                    "is_accepted": true,
                    "score": 42
                },
                {
                    "body": "<p>Actually, it is possible. You can check if the clicked position was outside of the element, since this will only happen if <code>::before</code> or <code>::after</code> was clicked.</p>\n\n<p>This fiddle only checks the element to the right but that should work in your case.</p>\n\n<p><a href=\"http://jsfiddle.net/wC2p7/1/\">http://jsfiddle.net/wC2p7/1/</a></p>\n",
                    "is_accepted": false,
                    "score": 16
                }
            ],
            "body": "<p>My code is:</p>\n\n<pre><code>p {\n    position: relative;\n    background-color: blue;\n}\n\np:before {\n    content: '';\n    position: absolute;\n    left:100%;\n    width: 10px;\n    height: 100%;\n    background-color: red;\n}\n</code></pre>\n\n<p>Please see this fiddle: <a href=\"http://jsfiddle.net/ZWw3Z/5/\">http://jsfiddle.net/ZWw3Z/5/</a></p>\n\n<p>I would like to trigger a click event only on the pseudo-element (the red bit). That is, I don't want the click event to be triggered on the blue bit.</p>\n",
            "last_activity_date": 1398255383,
            "question_id": 7478336,
            "score": 31,
            "tags": [
                "javascript",
                "jquery",
                "css"
            ],
            "title": "Only detect click event on pseudo-element"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You can do:</p>\n\n<pre><code>$('input[name=\"checkbox-0\"]').prop(\"checked\", true).checkboxradio('refresh'); //sets the checkbox\nvar isChecked =  $('input[name=\"checkbox-0\"]').prop(\"checked\"); //gets the status\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Straight from the <a href=\"http://jquerymobile.com/demos/1.0a4.1/docs/forms/forms-checkboxes.html\" rel=\"nofollow\">jQ Mobile docs</a>:</p>\n\n<pre><code>$(\"input[type='checkbox']\").attr(\"checked\",true);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You need to refresh it after changing its' <code>.prop</code>, using <code>.checkboxradio('refresh')</code>. This is the correct way to check checkbox/radio in jQuery Mobile.</p>\n\n<blockquote>\n  <p><strong><a href=\"http://jsfiddle.net/Palestinian/3bjmJ/\">Demo</a></strong></p>\n</blockquote>\n\n<pre><code>$('.selector').prop('checked', true).checkboxradio('refresh');\n</code></pre>\n\n<p>Reference: <a href=\"http://api.jquerymobile.com/checkboxradio/#method-refresh\">jQuery Mobile API</a></p>\n",
                    "is_accepted": true,
                    "score": 28
                }
            ],
            "body": "<p>With HTML a checkbox is created like this:</p>\n\n<pre><code>&lt;form&gt;\n   &lt;input type=\"checkbox\" id=\"category1\"&gt;Category1&lt;br&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>With javascript we can check the checkbox like this:</p>\n\n<pre><code>$(\"#category1\")[0].checked = true\n</code></pre>\n\n<p>Now I am trying to create the same page with jquery-mobile. The checkbox looks like this:</p>\n\n<pre><code>&lt;form&gt;\n    &lt;label&gt;\n        &lt;input name=\"checkbox-0 \" type=\"checkbox\"&gt;Check me\n    &lt;/label&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>Why is there is no <code>id</code> here? Is the name the <code>id</code>? Should I delete the attribute name and create one with the name <code>id</code>?</p>\n\n<p>How can I check this checkbox here with Javascript/jQuery? </p>\n\n<p>I tried the code above, but it doesn't seem to work for this checkbox.</p>\n",
            "last_activity_date": 1371028020,
            "question_id": 17027566,
            "score": 7,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "jquery-mobile"
            ],
            "title": "How to check &quot;checkbox&quot; dynamically - jQuery Mobile"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>You fire your ajax async (default for jquery - ajax). But the browser won't wait for anything on unload.</p>\n\n<p>try setting <code>async : false</code> in the ajax-settings. But you can never be sure that this will work in all browsers everytime.</p>\n\n<p>see the comment here:\n<a href=\"http://api.jquery.com/unload/#dsq-comment-body-132164390\">http://api.jquery.com/unload/#dsq-comment-body-132164390</a></p>\n",
                    "is_accepted": true,
                    "score": 15
                }
            ],
            "body": "<p>I'm developing a php/javascript chat.</p>\n\n<p>When the user logs in, his/her username is inserted in a MySQL table called <code>queue</code>.\nThis insert returns the <code>mysql_insert_id()</code> that will be stored in a session variable called <code>$_SESSION['CHAT_QUEUE_ID']</code></p>\n\n<p>I need the MySQL table row to be deleted when the user closes the page.</p>\n\n<p>I tried the following, but without success:</p>\n\n<p><em>js file</em></p>\n\n<pre><code>window.onbeforeunload = closeSession;\nfunction closeSession(){\n    $.ajax({\n        url: \"/chat/process/chat.php\",\n        type: \"GET\"\n    });\n    return \"disconnected\";\n}\n</code></pre>\n\n<p><em>chat.php</em></p>\n\n<pre><code>$delete= \"DELETE FROM queue WHERE id = \" . $_SESSION['CHAT_QUEUE_ID'];\n// query, etc\n</code></pre>\n\n<p>Is there any way to do this?</p>\n",
            "last_activity_date": 1387266164,
            "question_id": 9701734,
            "score": 6,
            "tags": [
                "php",
                "javascript",
                "jquery",
                "onbeforeunload"
            ],
            "title": "How to execute ajax function onbeforeunload?"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>I see two problems in your code. The first one is more cosmetic, but the correct solution can simplify many things in the future.</p>\n\n<p>The first problem is that you add manual the \"TOTAL\" row as a part of grid data and calculate the values in the row inside <code>calculateTotal</code> function. The better way is to use <code>footerrow:true</code> option, which add additional row at the bottom of grid which will be <strong>not mixed</strong> with the grid data. For server based data you can use <code>userdata</code> part of JSON or XML response from the server and use <code>userDataOnFooter:true</code> additionally to till the data from the <code>userData</code> jqGrid parameter to the footer row. In case of \"local\" datatype one can use <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3amethods\">footerData</a> method to set (or get) the data in the footer. Additionally the method <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3amethods\">getCol</a> can be used co calculate the sum of elements in the column. So your version of <code>calculateTotal</code> function can be rewritten as</p>\n\n<pre><code>var grid = $(\"#list\");\nvar calculateTotal = function() {\n    var totalAmount = grid.jqGrid('getCol','amount',false,'sum'),\n        totalTax = grid.jqGrid('getCol','tax',false,'sum');\n    grid.jqGrid('footerData','set',{name:'TOTAL',amount:totalAmount,tax:totalTax});\n}\n</code></pre>\n\n<p>Now to your main problem. You use cell edit mode. If the function <code>calculateTotal</code> (your original or my simplified version) will be called at the time when one from the cells of the 'amount' or 'tax' are in the editing mode, the <code>calculateTotal</code> will be read HTML fragment with <code>&lt;input&gt;</code> element instead of the string with the number and the calculation will failed.</p>\n\n<p>I created <a href=\"http://www.ok-soft-gmbh.com/jqGrid/CellEditAfterSaveCellProblem0.htm\">the small demo</a> which call <code>calculateTotal</code> every second. So if you click on any cell from the \n'amount' or 'tax' column you will see that in the footer row 0 will be displayed as the sum. So the demo having <code>cellsubmit:'clientArray'</code> has the same problem as in your original code with <code>cellsubmit:'remote'</code>.</p>\n\n<p>To solve the problem one can use <code>data</code> parameter of jqGrid during the sum calculation:</p>\n\n<pre><code>var grid = $(\"#list\");\nvar calculateTotal = function() {\n    var gridData = grid.jqGrid('getGridParam','data'),\n        i=0,totalAmount=0,totalTax=0;\n    for (;i&lt;gridData.length;i++) {\n        var rowData = gridData[i];\n        totalAmount += Number(rowData.amount);\n        totalTax += Number(rowData.tax);\n    }\n    grid.jqGrid('footerData','set',{name:'TOTAL',amount:totalAmount,tax:totalTax});\n}\n</code></pre>\n\n<p>The corresponding fixed demo you will find <a href=\"http://www.ok-soft-gmbh.com/jqGrid/CellEditAfterSaveCellProblem.htm\">here</a>. In your final code you can remove </p>\n\n<pre><code>setInterval(calculateTotal, 1000);\n</code></pre>\n\n<p>which I used for demonstration purpose only and refresh the footer in the <code>afterSaveCell</code> event handler only.</p>\n\n<p><strong>UPDATED</strong>: If you work with remote data you can not use <code>data</code> parameter. So one have to get data from the <code>&lt;input&gt;</code> element if needed. I created <a href=\"http://www.ok-soft-gmbh.com/jqGrid/CellEditAfterSaveCellProblem1.htm\">one more demo</a> which demonstrate how one can do this. The code of <code>calculateTotal</code> will be longer:</p>\n\n<pre><code>var getColumnIndexByName = function(grid,columnName) {\n    var cm = grid.jqGrid('getGridParam','colModel');\n    for (var i=0,l=cm.length; i&lt;l; i++) {\n        if (cm[i].name===columnName) {\n            return i; // return the index\n        }\n    }\n    return -1;\n},\ngetTextFromCell = function(cellNode) {\n    return cellNode.childNodes[0].nodeName === \"INPUT\"?\n           cellNode.childNodes[0].value:\n           cellNode.textContent || cellNode.innerText;\n},\ncalculateTotal = function() {\n    var totalAmount = 0, totalTax = 0,\n        i=getColumnIndexByName(grid,'amount');\n    $(\"tbody &gt; tr.jqgrow &gt; td:nth-child(\"+(i+1)+\")\",grid[0]).each(function() {\n        totalAmount += Number(getTextFromCell(this));\n    });\n\n    i=getColumnIndexByName(grid,'tax');\n    $(\"tbody &gt; tr.jqgrow &gt; td:nth-child(\"+(i+1)+\")\",grid[0]).each(function() {\n        totalTax += Number(getTextFromCell(this));\n    });\n\n    grid.jqGrid('footerData','set',{name:'TOTAL',amount:totalAmount,tax:totalTax});\n};\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 11
                },
                {
                    "body": "<p>Thanks oleg the solution for me was applying and changing what you put</p>\n\n<pre><code>var ListTabla=\"ListFormatos\";\nvar request=\"../../tabla_general/tabla_general_mantenimiento.php\";\n\nvar getColumnIndexByName = function(grid,columnName) {\nvar cm = $(\"#\"+grid).jqGrid('getGridParam','colModel');\nfor (var i=0,l=cm.length; i&lt;l; i++) {\n    if (cm[i].name===columnName) {\n        return i; // return the index\n    }\n}\nreturn -1;\n},\n\ngetTextFromCell = function(cellNode) {\nreturn cellNode.childNodes[0].nodeName === \"INPUT\"?\n       cellNode.childNodes[0].value:\n       cellNode.textContent || cellNode.innerText;\n},\n\ncalculateTotal = function(grid) {   \n\ntotal_hpr_suebas = retorna_suma('hpr_suebas',grid);\ntotal_hpr_asifam = retorna_suma('hpr_asifam',grid);\ntotal_hpr_bashpr = retorna_suma('hpr_bashpr',grid);\ntotal_hpr_remcom = retorna_suma('hpr_remcom',grid);\ntotal_hpr_basmes = retorna_suma('hpr_basmes',grid);\ntotal_hpr_provcts = retorna_suma('hpr_provcts',grid);\ntotal_hpr_provgrat = retorna_suma('hpr_provgrat',grid);\ntotal_hpr_provvac=retorna_suma('hpr_provvac',grid);\n\n    $(\"#\"+grid).jqGrid('footerData','set',{sec_detsec:'TOTAL',hpr_suebas:total_hpr_suebas,hpr_asifam:total_hpr_asifam,hpr_bashpr:total_hpr_bashpr,hpr_remcom:total_hpr_remcom,hpr_basmes:total_hpr_basmes,hpr_provcts:total_hpr_provcts,hpr_provgrat:total_hpr_provgrat,hpr_provvac:total_hpr_provvac});\n};\n\nretorna_suma=function(campo,grid)\n{\n    total=0;\n    i=getColumnIndexByName(grid,campo);\n    $(\"tbody &gt; tr.jqgrow &gt; td:nth-child(\"+(i+1)+\")\",$(\"#\"+grid)[0]).each(function() {\n        total+= Number(getTextFromCell(this));\n    });\n    return total;\n}\n\nfunction fn_jqgrid_history_provisiones_trabajador(tra_idtra,fecha_inicio,fecha_fin)\n{\n    jQuery(\"#\"+ListTabla).jqGrid({\n                    url:request+\"?action=search_history_provisiones_trabajador&amp;tra_idtra=\"+tra_idtra+\"&amp;fecha_inicio=\"+fecha_inicio+\"&amp;fecha_fin=\"+fecha_fin,\n                    async: false,\n                    datatype: 'json',\n                    colNames:['','ID','SECTOR','BASICO','ASIG. FAM','DIAS','BASE','REM. COMP.','BASE MES','P.CTS','P.GRAT.','P.VAC.','MES','ANIO','PORC.','SAL.VAC.','SAL.GRAT.'],\n                    colModel:[\n                         {name:'act', index:'act', width:50, resizable:true, align:\"center\",hidden:true},\n                        {name:'id', index:'id', width:50, resizable:true, align:\"center\",hidden:true},\n                        {name:'sec_detsec', index:'sec_detsec', width:80},\n                        {name:'hpr_suebas', index:'hpr_suebas', width:60},\n                        {name:'hpr_asifam', index:'hpr_asifam', width:50},\n                        {name:'hpr_numdia', index:'hpr_numdia', width:30},\n                        {name:'hpr_bashpr',index:'hpr_bashpr', width:60},\n                        {name:'hpr_remcom,',index:'hpr_remcom', width:60},\n                        {name:'hpr_basmes', index:'hpr_basmes', width:60},\n                        {name:'hpr_provcts', index:'hpr_provcts', width:60},\n                        {name:'hpr_provgrat', index:'hpr_provgrat', width:60},\n                        {name:'hpr_provvac', index:'hpr_provvac', width:60},\n                        {name:'hpr_meshpr', index:'hpr_meshpr', width:30},\n                        {name:'hpr_aniohpr,',index:'hpr_aniohpr', width:30},\n                        {name:'hpr_salpor', index:'hpr_salpor', width:50},\n                        {name:'hpr_salval_vac', index:'hpr_salval_vac', width:50},\n                        {name:'hpr_salval_grat', index:'hpr_salval_grat', width:50}\n                    ],\n                    pager: '#paginacion',\n                    rowNum:10,\n                    rowList:[10,20,30],\n                    sortname: 'ID',\n                    ondblClickRow:function(rowid, iRow, iCol, e)\n                    {\n                                obj=jQuery(\"#\"+ListTabla).jqGrid('getRowData',rowid);\n                    }\n                    ,\n                    sortorder: 'desc',\n                    editurl:request,\n                    viewrecords: true,\n                    caption: 'Provisiones',\n                    //rownumbers: true,\n                     height: 250,\n                    rowheight: 280,\n                    footerrow : true,\n                    gridComplete: function () {\n                        calculateTotal(ListTabla);\n                },\n                    afterSaveCell: function (rowid, name, val, iRow, iCol) {\n                        //calculateTotal(ListTabla);\n                    }\n                    }).navGrid('#paginacion',{add:false,edit:false, del:false});\n\n                        jQuery(\"#\"+ListTabla).jqGrid('bindKeys', {\"onEnter\":function( rowid ) {\n                                                                    obj=jQuery(\"#\"+ListTabla).jqGrid('getRowData',rowid);\n                                                                    } } );  \n\n                 }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you just want to recalculate total number, you can use trigger to reload the grid in afterSaveCell event. Like this:</p>\n\n<pre><code>afterSaveCell: function (rowid, name, val, iRow, iCol) \n\n        {\n          jQuery(\"#list11\").jqGrid('setGridParam',{datatype:'local',loadonce:true}).trigger('reloadGrid');\n        }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I'm currently using <code>afterSaveCell</code> to handle manually updating some cells in a grid. I have this working fine if the user uses enter to save the currently editing cell. </p>\n\n<p>Unfortunately, if they click or tab out of the cell they are editing directly into another cell I can no longer grab the cell value of the newly edited cell as <code>getCell</code> will only return the html for the input control.  </p>\n\n<p>In summary, is there any way to access the value of the cell even while it is being edited?</p>\n\n<pre><code>jQuery(document).ready(function () {\n    var mydata = [\n        {id:\"1\", invdate:\"2007-10-01\",name:\"test\",  note:\"note\",  amount:\"200.00\",tax:\"10.00\",total:\"210.00\"},\n        {id:\"2\", invdate:\"2007-10-02\",name:\"test2\", note:\"note2\", amount:\"300.00\",tax:\"20.00\",total:\"320.00\"},\n        {id:\"3\", invdate:\"2007-09-01\",name:\"test3\", note:\"note3\", amount:\"400.00\",tax:\"30.00\",total:\"430.00\"},\n        {id:\"4\", invdate:\"2007-10-04\",name:\"test\",  note:\"note4\", amount:\"200.00\",tax:\"10.00\",total:\"210.00\"},\n        {id:\"5\", invdate:\"2007-10-05\",name:\"test5\", note:\"note5\", amount:\"300.00\",tax:\"20.00\",total:\"320.00\"},\n        {id:\"6\", invdate:\"2007-09-06\",name:\"test\",  note:\"note6\", amount:\"400.00\",tax:\"30.00\",total:\"430.00\"},\n        {id:\"7\", invdate:\"2007-10-04\",name:\"test7\", note:\"note7\", amount:\"200.00\",tax:\"10.00\",total:\"210.00\"},\n        {id:\"8\", invdate:\"2007-10-03\",name:\"test8\", note:\"note8\", amount:\"300.00\",tax:\"20.00\",total:\"320.00\"},\n        {id:\"9\", invdate:\"2007-09-01\",name:\"test\",  note:\"note9\", amount:\"400.00\",tax:\"30.00\",total:\"430.00\"},\n        {id:\"10\",invdate:\"2007-09-08\",name:\"test10\",note:\"note10\",amount:\"500.00\",tax:\"30.00\",total:\"530.00\"},\n        {id:\"11\",invdate:\"2007-09-08\",name:\"test11\",note:\"note11\",amount:\"500.00\",tax:\"30.00\",total:\"530.00\"},\n        {id:\"12\",invdate:\"\",name:\"TOTAL\",  note:\"\",amount:\"\",tax:\"\",total:\"\"}\n    ];\n\n    var grid = $(\"#list\");\n\n    grid.jqGrid({\n        cellsubmit: 'remote',\n        cellurl: '/Example/GridSave',\n        datatype: \"local\",\n        data: mydata,\n        mtype: 'POST',\n        colNames: ['Inv No', 'Date', 'Client', 'Amount', 'Tax', 'Total', 'Notes'],\n        colModel: [\n            { name: 'id', index: 'id', width: 65, sorttype: 'int', hidden: true },\n            { name: 'invdate', index: 'invdate', width: 120, align: 'center', formatter: 'date', formatoptions: { newformat: 'd-M-Y' }, sortable: false },\n            { name: 'name', index: 'name', editable: true, width: 90, sortable: false },\n            { name: 'amount', index: 'amount', editable: true, width: 70, formatter: 'number', align: 'right', sortable: false },\n            { name: 'tax', index: 'tax', editable: true, width: 60, formatter: 'number', align: 'right', sortable: false },\n            { name: 'total', index: 'total', editable: true, width: 60, formatter: 'number', align: 'right', sortable: false },\n            { name: 'note', index: 'note', width: 100, sortable: false }\n        ],\n        rowNum: 1000,\n        pager: '#pager',\n        viewrecords: true,\n        sortorder: \"desc\",\n        caption: \"afterSaveCell Issue\",\n        height: \"100%\",\n        cellEdit: true,\n        gridComplete: function () {\n            calculateTotal();\n        },\n        afterSaveCell: function (rowid, name, val, iRow, iCol) {\n            calculateTotal();\n        }\n    });\n});\n\nfunction calculateTotal() {\n    var totalAmount = 0;\n    var totalTax = 0;\n\n    var grid = jQuery(\"#list\");\n\n    var ids = grid.jqGrid('getDataIDs');\n    for (var i = 0; i &lt; ids.length; i++) {\n        var id = ids[i];\n\n        if (grid.jqGrid('getCell', id, 'name') === \"TOTAL\") {\n            grid.jqGrid('setRowData', id, {\n                'amount': totalAmount,\n                'tax': totalTax,\n                'total': totalAmount + totalTax\n            });\n        }\n        else {\n            totalAmount += Number(grid.jqGrid('getCell', id, 'amount'));\n            totalTax += Number(grid.jqGrid('getCell', id, 'tax'));\n        }\n    }\n}\n</code></pre>\n\n<p>Thanks in advance! </p>\n",
            "last_activity_date": 1352188121,
            "question_id": 5121350,
            "score": 6,
            "tags": [
                "javascript",
                "jquery",
                "jqgrid"
            ],
            "title": "jqGrid access cell data while it is being edited"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Please make sure that both the iframe and main page are using the same protocol (i.e. both https or both http, but not mixed) and are on the same domain (i.e. both www.example.com and not example.com and dev.example.com). Also there's the possibility that something tries to use the file:// protocol, which will also cause this message.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>As an additional security measure, Chrome treats every \"file\" path as its own origin rather than treating the entire \"file\" scheme as a single origin (which is what other browsers do). This behavior applies only to \"file\" URLs and you can force Chrome to revert to a single local origin (like other browsers) by passing the <strong>--allow-file-access-from-files</strong> switch at startup. </p>\n\n<p>You can find more information on the risks associated with local origins described here: <a href=\"http://blog.chromium.org/2008/12/security-in-depth-local-web-pages.html\">http://blog.chromium.org/2008/12/security-in-depth-local-web-pages.html</a></p>\n",
                    "is_accepted": true,
                    "score": 16
                }
            ],
            "body": "<p>All,</p>\n\n<p>Our web application (based on HTML5, SVG &amp; JS) runs fine in all the browsers except Google Chrome.</p>\n\n<p>In Google Chrome, the normal javascript events run fine, however, all the javascript events attached to the iFrame are not executed. We get the error in the console:</p>\n\n<p>\"Unsafe JavaScript attempt to access frame\"</p>\n\n<p>At the moment, the application is locally hosted and this problem cropped up during inhouse testing. </p>\n\n<p>Googling this brings up lots of posts but none suggests any concrete solution. Any suggestions please?</p>\n",
            "last_activity_date": 1302789634,
            "question_id": 5660116,
            "score": 3,
            "tags": [
                "javascript",
                "security",
                "google-chrome",
                "iframe"
            ],
            "title": "Unsafe JavaScript attempt to access frame in Google Chrome"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>By sorting, do you mean, auto-sorting the tree options such that they fall under the appropriate nodes, or being able to sort by other rows (the second of which doesn't really make sense, as the tree organizes the data, so I'm not sure how sorting would make sense.)</p>\n\n<p>Here is a <a href=\"http://jsfiddle.net/aUDHx/2/\" rel=\"nofollow\">jsFiddle</a> with a local adjacency tree - is this a better description of your problem?  For example, in the data below, the id = 4 or 5 should belong to id = 1, but instead they show up under 3.</p>\n\n<p>Here, the data is:</p>\n\n<pre><code>var mydata = [\n    {id: \"1\", label:\"No 1\", number:\"02200220\", status:\"OPEN\", level:\"0\", parent: \"\", isLeaf: false, expanded:true, loaded:true},\n    {id: \"2\", label:\"No 2\", number:\"77733337\", status:\"ENTERED\", level:\"0\", parent: \"\", isLeaf: false, expanded:true, loaded:true},\n    {id: \"6\", label:\"No 2a\", number:\"12345123\", status:\"WIRED\", level:\"1\", parent: \"2\", isLeaf: true, expanded:false, loaded:true},\n    {id: \"3\", label:\"No 3\", number:\"02200111\", status:\"OPEN\", level:\"0\", parent: \"\", isLeaf: false},\n    {id: \"4\", label:\"No 1a\", number:\"02200221\", status:\"OPEN\", level:\"1\", parent: \"1\", isLeaf: true, expanded:false, loaded:true},\n    {id: \"5\", label:\"No 1b\", number:\"02242320\", status:\"CLOSED\", level:\"1\", parent: \"1\", isLeaf: true, expanded:false, loaded:true}\n];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You are right. It was small bug in the data from my previous answers about </p>\n\n<p>After some debugging I find out that the error is very simple: one should use <code>parent: \"null\"</code> or <code>parent: null</code> in the data instead of <code>parent: \"\"</code>.</p>\n\n<p>Additionally you have to define <code>sorttype</code> parameters in the grid to have sorting correctly with any data other as texts.</p>\n\n<p>How you can see <a href=\"http://www.ok-soft-gmbh.com/jqGrid/LocalAdjacencyTree8.htm\">the modified demo</a> support now the local sorting correctly:</p>\n\n<p><img src=\"http://i.stack.imgur.com/v0wLH.png\" alt=\"enter image description here\"></p>\n\n<p>First will be sorted root elements by the chosen column and then recursively all its children.</p>\n\n<p>To make easy to find the new code in the searching engine I include the code of the demo below:</p>\n\n<pre><code>var mydata = [\n        {id: \"1\", name: \"Cash\",        num: \"100\", debit: \"400.00\",  credit: \"250.00\",  balance: \"150.00\",   enbl: \"1\", level: \"0\", parent: \"null\", isLeaf: false, expanded: false, loaded: true},\n        {id: \"2\", name: \"Cash 1\",      num: \"1\",   debit: \"300.00\",  credit: \"200.00\",  balance: \"100.00\",   enbl: \"0\", level: \"1\", parent: \"1\",    isLeaf: false, expanded: false, loaded: true},\n        {id: \"3\", name: \"Sub Cash 1\",  num: \"1\",   debit: \"300.00\",  credit: \"200.00\",  balance: \"100.00\",   enbl: \"1\", level: \"2\", parent: \"2\",    isLeaf: true,  expanded: false, loaded: true},\n        {id: \"4\", name: \"Cash 2\",      num: \"2\",   debit: \"100.00\",  credit: \"50.00\",   balance: \"50.00\",    enbl: \"0\", level: \"1\", parent: \"1\",    isLeaf: true,  expanded: false, loaded: true},\n        {id: \"5\", name: \"Bank\\'s\",     num: \"200\", debit: \"1500.00\", credit: \"1000.00\", balance: \"500.00\",   enbl: \"1\", level: \"0\", parent: \"null\", isLeaf: false, expanded: true,  loaded: true},\n        {id: \"6\", name: \"Bank 1\",      num: \"1\",   debit: \"500.00\",  credit: \"0.00\",    balance: \"500.00\",   enbl: \"0\", level: \"1\", parent: \"5\",    isLeaf: true,  expanded: false, loaded: true},\n        {id: \"7\", name: \"Bank 2\",      num: \"2\",   debit: \"1000.00\", credit: \"1000.00\", balance: \"0.00\",     enbl: \"1\", level: \"1\", parent: \"5\",    isLeaf: true,  expanded: false, loaded: true},\n        {id: \"8\", name: \"Fixed asset\", num: \"300\", debit: \"0.00\",    credit: \"1000.00\", balance: \"-1000.00\", enbl: \"0\", level: \"0\", parent: \"null\", isLeaf: true,  expanded: false, loaded: true}\n    ],\n    grid = $(\"#treegrid\");\n\n$.jgrid.formatter.integer.thousandsSeparator=',';\n$.jgrid.formatter.number.thousandsSeparator=',';\n$.jgrid.formatter.currency.thousandsSeparator=',';\ngrid.jqGrid({\n    datatype: \"jsonstring\",\n    datastr: mydata,\n    colNames: [/*\"Id\", */\"Account\", \"Acc Num\", \"Debit\", \"Credit\", \"Balance\", \"Enabled\"],\n    colModel: [\n        //{name: 'id', index: 'id', width: 1, hidden: true, key: true},\n        {name: 'name', index: 'name', width: 180},\n        {name: 'num', index: 'acc_num', width: 80, formatter: 'integer', sorttype: 'int', align: 'center'},\n        {name: 'debit', index: 'debit', width: 80, formatter: 'number', sorttype: 'number', align: 'right'},\n        {name: 'credit', index: 'credit', width: 80, formatter: 'number', sorttype: 'number', align: 'right'},\n        {name: 'balance', index: 'balance', width: 80, formatter: 'number', sorttype: 'number', align: 'right'},\n        {name: 'enbl', index: 'enbl', width: 60, align: 'center',\n            formatter: 'checkbox', editoptions: {value: '1:0'},\n            formatoptions: {disabled: false}}\n    ],\n    height: 'auto',\n    gridview: true,\n    rowNum: 10000,\n    sortname: 'id',\n    treeGrid: true,\n    treeGridModel: 'adjacency',\n    treedatatype: \"local\",\n    ExpandColumn: 'name',\n    caption: \"Demonstrate how to use Tree Grid for the Adjacency Set Model\",\n    jsonReader: {\n        repeatitems: false,\n        root: function (obj) { return obj; },\n        page: function () { return 1; },\n        total: function () { return 1; },\n        records: function (obj) { return obj.length; }\n    }\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 7
                }
            ],
            "body": "<p>I have been working with jqGrid and there are some <a href=\"http://stackoverflow.com/questions/5322608/jqgrid-tree-view-adjacencey\">useful questions</a> and <a href=\"http://www.ok-soft-gmbh.com/jqGrid/LocalAdjacencyTree.htm\" rel=\"nofollow\">answers</a> regarding the Adjacency model and I have got everything I need hooked up and working except sorting.</p>\n\n<p>The problem is actually replicated in the answer link above. Can anyone see what needs fixing? Oleg appears to be the expert on this!</p>\n\n<p>I have tried the options in this <a href=\"http://stackoverflow.com/questions/2131280/jqgrid-sorting-on-client-side\">question</a> but I think the current version (4.1.2) may have a new bug? Please prove me wrong. </p>\n\n<p>I also see the example on <a href=\"http://trirand.com/blog/jqgrid/jqgrid.html\" rel=\"nofollow\">http://trirand.com/blog/jqgrid/jqgrid.html</a> > New in 3.4 > Tree grid Adjacency Model works but that example is not using the <code>loaded:true</code> property as described in the <a href=\"http://stackoverflow.com/questions/5322608/jqgrid-tree-view-adjacencey\">first referenced answer</a> of this question</p>\n",
            "last_activity_date": 1315392725,
            "question_id": 7330572,
            "score": 2,
            "tags": [
                "javascript",
                "jquery",
                "sorting",
                "jqgrid",
                "treegrid"
            ],
            "title": "Sorting of jqGrid (v4.1.2) treegrid not working with Ajacency Model"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>First of all the option <code>closeAfterEdit:true</code> follows to closing of the edit form after the successful server response. You should change the setting to the default value <code>closeAfterEdit:false</code> to be able to show anything.</p>\n\n<p>Next I would recommend you to use <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3anavigator\" rel=\"nofollow\">navigator</a> toolbar instead of creating a button after outside of the grid. In the case you can use </p>\n\n<pre><code>var grid = jQuery(\"#tabImprese\");\ngrid.jqGrid('navGrid','#pager', {add:false,del:false,search:false}, prmEdit);\n</code></pre>\n\n<p>One more good option is to use <code>ondblClickRow</code> event handler</p>\n\n<pre><code>ondblClickRow: function(rowid) {\n    $(this).jqGrid('editGridRow',rowid,prmEdit);\n}\n</code></pre>\n\n<p>(see <a href=\"http://stackoverflow.com/questions/4982635/in-jqgrid-can-you-double-click-a-row-to-bring-up-the-edit-form/4983690#4983690\">here</a>) or both ways at the same time.</p>\n\n<p>In any way you have to define the options of <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3aform_editing#editgridrow\" rel=\"nofollow\">editGridRow</a> method (the <code>prmEdit</code>). It's important to know that <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3aform_editing#events\" rel=\"nofollow\">afterSubmit</a> will be called only if the server response not contains <a href=\"http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10.4\" rel=\"nofollow\">error HTTP status code</a>. So you should use <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3aform_editing#events\" rel=\"nofollow\">errorTextFormat</a> to decode the error server response. The <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3aform_editing#events\" rel=\"nofollow\">afterSubmit</a> event handler you can use to display status message.</p>\n\n<p>In the demo I used only <code>errorTextFormat</code> to demonstrate both displaying of the status and error message:</p>\n\n<p><img src=\"http://i.stack.imgur.com/38YcD.png\" alt=\"enter image description here\"></p>\n\n<p>The status message goes away in 3 seconds:</p>\n\n<p><img src=\"http://i.stack.imgur.com/icfxW.png\" alt=\"enter image description here\"></p>\n\n<p>The corresponding demo you will find <a href=\"http://www.ok-soft-gmbh.com/jqGrid/SimpleLocalGridWithMsgInEditForm.htm\" rel=\"nofollow\">here</a>.</p>\n\n<p>In real example you will of cause place the code writing status message inside of <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3aform_editing#events\" rel=\"nofollow\">afterSubmit</a> event handler and the code which returns the error message inside of <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki%3aform_editing#events\" rel=\"nofollow\">errorTextFormat</a>.</p>\n",
                    "is_accepted": true,
                    "score": 4
                }
            ],
            "body": "<p>I am following this tutorial here <a href=\"http://www.trirand.com/blog/jqgrid/jqgrid.html\" rel=\"nofollow\">http://www.trirand.com/blog/jqgrid/jqgrid.html</a> in\nLiveDataManipulation->EditRow</p>\n\n<p>My grid receive data from script <code>a.php</code>. After the user can modify this data by the jqGrid.\njqGrid after the modification data will send data to script <code>B.php</code> that update my database and return a message of response like \"all goes well\".<br />\nI want that this response is alerted or showed to user somewhere on the page.<br />\nReading the tutorial and here <a href=\"http://www.trirand.com/jqgridwiki/doku.php?id=wiki:form_editing\" rel=\"nofollow\">http://www.trirand.com/jqgridwiki/doku.php?id=wiki:form_editing</a> I think that I've to use <code>afterSubmit</code> option, but I haven't understood how print on the edit panel the result.</p>\n\n<p>I have written:</p>\n\n<pre><code>$(\"#editImpresa\").click(function(){\nvar gr = jQuery(\"#tabImprese\").jqGrid('getGridParam','selrow');\nif( gr != null ) jQuery(\"#tabImprese\").jqGrid('editGridRow',gr,{\n    height:690,\n    width:500,\n    closeAfterEdit : true,\n    reloadAfterSubmit:false,\n    afterSubmit: function(response,postdata){ \n       if(response.responseText==\"ok\")\n            success=true;\n        else success = false;\n\n        return [success,response.responseText] \n    }\n});\n</code></pre>\n\n<p>How can I do it?\nThanks.</p>\n",
            "last_activity_date": 1408984161,
            "question_id": 6791463,
            "score": 2,
            "tags": [
                "javascript",
                "jquery",
                "jqgrid",
                "data-manipulation"
            ],
            "title": "jQuery jqGrid Show message when an edit row is complete"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>Because some browsers (depending on the DOCTYPE) are tolerant of the inline <code>onClick=\"something();\"</code> attribute...it seems to have spread a bit, even into JavaScript questions where it doesn't work, since case matters.</p>\n\n<p>Also, specifically to stackoverflow...people using it in questions...well, most of the time they wouldn't be asking a question if their code worked :)</p>\n",
                    "is_accepted": true,
                    "score": 19
                },
                {
                    "body": "<p>It's just that for most browsers HTML attributes are case insensitive, but JS is case-sensitive. onClick will work in html, but if you're defining the handler in JS, you need to use the lowercased onclick.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>In that specific question, I used \"onClick\" as the original question had it in that vein and I try to change as little of the OPs code as possible to make a solution, so that they can see their mistake easily.</p>\n\n<p>The camel case is invalid technically, though I like camel case in general.  Frankly, it always annoys me when I see that method, as I think \"Where's jQuery!\".</p>\n\n<p>It is heavily prevalent in the world, I see it all the time in source.</p>\n\n<p>I edited my answer on the referenced question to fit, thanks for pointing it out.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>@Nick Craver pretty much has it nailed down and has my vote; I just wanted to add my thought.</p>\n\n<p>I think it's <code>onClick</code> is often used in conversation because it's a bit more readable, and as an old habit from those of us who predate all lowercase HTML.  However, in code - both JavaScript and HTML, <code>onclick</code> is correct and the only way it should appear.  Even if you're using an older HTML doctype, stick to lowercase.  If you ever update to a more strict doctype, you'll be glad your code doesn't need to be checked for case.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I thought that binding the click event in javascript is done by using <code>node.onclick</code>, and Chrome/Firefox seem to agree with me, but I saw it written <code>.onClick</code> <a href=\"http://stackoverflow.com/questions/4380415/how-can-i-give-a-limit-to-an-append-function-with-javascript/4380487#4380487\">here</a> 4 times by 3 people, so it can't be a typo and I doubt that it's a coincidence.</p>\n\n<p>So, why are people writing <code>onClick</code> when it does not work?</p>\n\n<p><s><strong>UPDATE</strong>: There are two good explanations; I don't know which one of them is the most plausible, so I will accept the answer based on popular vote, tomorrow.</s></p>\n",
            "last_activity_date": 1291845571,
            "question_id": 4380719,
            "score": 25,
            "tags": [
                "javascript",
                "onclick"
            ],
            "title": "onclick or onClick?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>I don't think that is possible in an email, nor should it be.  There would be major security ramifications.</p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>Do not depend on this. Any good mail client will not support executable code within an email. Any knowledgeable user will not use a client that does.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Agree completely with Bryan and others. </p>\n\n<p>Instead, consider using multiple sections in your email that you can jump to using links and anchors (the 'a' tag). I think that you can emulate the behavior you want by including multiple copies of the text further down in your email. This is a bet messy though, so you could just have sets of anchors that link to each other and allow you to move back in forth between the 'summary' section and the 'expanded' one. </p>\n\n<p>Example:</p>\n\n<pre><code>&lt;a href=\"#section1\"&gt;Jump to section!&lt;/a&gt;\n&lt;p&gt;A bunch of content&lt;/p&gt;\n&lt;h2 id=\"section1\"&gt;An anchor!&lt;/h2&gt;\n</code></pre>\n\n<p>Clicking on the first link will move focus to the sub-section.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>Just as a warning, many modern email browsers have JavaScript disbaled for incoming emails as it can cause security flaws. This means that many of the people you are emailing may not be able to use the content.</p>\n\n<p>PS. Didn't see above post's at time of posting. My bad.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>The short answer is that scripting is unsupported in emails. This is hardly surprising, given the obvious security risks involved with a script running inside an application that has all that personal information stored in it. Webmail clients are mostly running the interface in JavaScript and are not keen on your email interfering with that, and desktop client filters often consider JavaScript to be an indicator of spam or phishing emails. Even in the cases where it might run, there really is little benefit to scripting in emails. Keep your emails as straight HTML and CSS, and avoid the hassle. Here is what you can do in html emails: <a href=\"https://www.campaignmonitor.com/guides/coding/technologies/\" rel=\"nofollow\">https://www.campaignmonitor.com/guides/coding/technologies/</a> </p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>How to include javascript in HTML emails - We need it for expanding and collapsing of the content in the HTML email. </p>\n",
            "last_activity_date": 1425400519,
            "question_id": 1088016,
            "score": 17,
            "tags": [
                "javascript",
                "html",
                "email"
            ],
            "title": "HTML email with Javascript"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Not really anything more than the two ways that you have proposed, but here's another</p>\n\n<pre><code>for(var it = 0; it &lt; 2; it++)\n{\n    (function() {\n        var m = it;   \n        setTimeout(function() {\n            alert(m);\n        }, 1);\n    })(); \n}\n</code></pre>\n\n<p>Essentially, you need to capture the variable value in a closure. This method uses an immediately invoked anonymous function to capture the outer variable value <code>it</code> in a local variable <code>m</code>.</p>\n\n<p>Here's a <strong><a href=\"http://jsbin.com/esozo\">Working Demo</a></strong> to play with. add <strong>/edit</strong> to the URL to see the code</p>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<p>Similar to above solution but self invoking inside of setTimeout function</p>\n\n<pre><code>for(var it = 0; it &lt; 2; it++)\n{\n    setTimeout(function(cur) {\n        return function(){\n           alert(cur);\n        };\n     }(it), 1);\n }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Consider such loop:</p>\n\n<pre><code>for(var it = 0; it &lt; 2; it++)\n{\n    setTimeout(function() {\n        alert(it);\n    }, 1);\n}\n</code></pre>\n\n<p>The output is:</p>\n\n<pre><code>=&gt; 2\n=&gt; 2\n</code></pre>\n\n<p>I would like it to be: 0, 1. I see two ways to fix it:</p>\n\n<p>Solution # 1.</p>\n\n<p>This one based on the fact that we can pass data to setTimeout.</p>\n\n<pre><code>for(var it = 0; it &lt; 2; it++)\n{\n    setTimeout(function(data) {\n        alert(data);\n    }, 1, it);\n}\n</code></pre>\n\n<p>Solution # 2.</p>\n\n<pre><code>function foo(data)\n{\n    setTimeout(function() {\n        alert(data);\n    }, 1);\n}\n\nfor(var it = 0; it &lt; 2; it++)\n{\n    foo(it);\n}\n</code></pre>\n\n<p>Are there any other alternatives?</p>\n",
            "last_activity_date": 1307654381,
            "question_id": 1676362,
            "score": 16,
            "tags": [
                "javascript",
                "loops",
                "closures",
                "variable-scope"
            ],
            "title": "JavaScript variable binding and loop"
        },
        {
            "answer_count": 17,
            "answers": [
                {
                    "body": "<p>In short yes.  You can never depend on what a browser sends you is legitimate.  </p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Browser/client-side validation is a convenience. You cannot rely on it. You absolutely need to duplicate any client-level validation with server-side validation.</p>\n",
                    "is_accepted": true,
                    "score": 87
                },
                {
                    "body": "<p>Client side validation can potentially be circumvented  - and if you don't have server-side validations, you will end up processing or saving invalid or bad data.</p>\n\n<p>The above could be because of browser issues, like some browser version that you dont support. Or Worse it could be due to a malicious user.</p>\n\n<p>Hence it's essential to have server-side validations.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Yes, you should always do server-side validation. Javascript/AJAX is nice to give the user instant feedback, but it isn't giving you any protection whatsoever on the server side.</p>\n\n<p>You just can't trust user input. Javascript validation is too easy to circumvent. Thus, you need to check the input on the server side.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>In addition to the issue of a user with Javascript turned off, server-side validation is necessary for security.  In addition to checking things like required fields, you also want to check the user-supplied data to prevent SQL injection attacks, cross-site scripting, etc.  You have to do this on the server side, because a user can always bypass the Javascript and send you any data they want.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Well, fine, all YOUR code is correct. What happens when a hacker replaces your javascript with one of their liking, or just plain submit POSTs and GETs as if it were your code?</p>\n\n<p>Validating at the client is a usability issue.</p>\n\n<p>Validating at the point of USAGE is a security issue.</p>\n\n<p>That last point is important, because if you do not validate at the point of usage, you are making your code highly coupled. If you change a module, it breaks things elsewhere because you validated at the wrong point.</p>\n\n<p>For instance, you validate data against SQL injection before storing in a SQL database -- the library will do that for you if you choose a good one. You validate data against CSS when you display it as HTML. But if you expose the data it as XML, RSS or JSON, then the validation is different -- if you validated it just at input, you wouldn't prevent exploits for the other formats, AND your input routine would be tied to the output formats you choose.</p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>I think you should do client-side AND server-side validation to be safe. You could have plenty of validation on the client, but if some circumvents that validation then you open yourself up to big problems. Whereas, having validation on the server-side too, protects you against that</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you don't validate on the server, someone will overwrite your client-side validation using Firebug, or just go completely around it with another Firefox extension called Poster. Good luck cleaning you database!</p>\n\n<p>Client-side validation is only done so that the user knows that they messed up immediately. It is not intended to secure anything.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Actually, server-side validation is a <em>must</em>, client-side is nice but optional. That's because you have absolutely no control over what's happening on the client side.</p>\n\n<p>Worse case is that a custom browser is built which renders your client-side validation impotent. This is really no different to using URLs to pass sensitive information - it's quite easy for someone to suborn the URL to do what they wish (such as changing pricing information on an order or bypassing security by changing user IDs).</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Yes, you still need to do validation server side.  an AJAX post is still just a POST.  Someone could easily enough write a page that does a POST with bad data, or even easier use a tool like the Tamper Data plugin in Firefox to change the data after your Javascript has validated it.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>It is absolutely essential to have server-side validation, as a user could turn off JavaScript or simply submit any data they wanted to your server-side handler, since they don't have to use your JS-enhanced form to submit the data.</p>\n\n<p>I've always thought of client-side/JavaScript validation as a UI enhancement, with the server-side validation as the \"actual\" validation.  Having the JS validation is nice for immediate notification of improper data to help your users.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Yes, anything could happen with the client side and you should not trust it as a primary form of validation.  You do not want bad data getting to a database or potential security issues that could arise from unchecked conditions. It can depend on the type of functionality, but you should validate on both sides.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>For additional spirited debate on what's basically the same subject, see <a href=\"http://stackoverflow.com/questions/582684/security-in-flex-is-it-possible-to-manipulate-downloaded-code-and-execute-web-s/582720#582720\">Security in Flex \u2013 is it possible to manipulate downloaded code and execute web service</a>.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Definitely do both.  Client side validation is good for simple type validation (for example does this match a properly formated email address) but since you cannot ensure that your data is coming from your pages (form spoofing is a common hack) you should always duplicate the validation on the server side.</p>\n\n<p>Furthermore server side validation allows you to do more a more thorough business logic check of the data before committing it to your database. </p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>While this strategy will work for good and legitimate users, it will not protect your site from a non-browser request using some hacker tool or a series of automated bot requests sending the HTTP POST command with the full load of crap which in the best case just pollute your system, in the worst damage your data consistency and that will cause error messages on multiple pages.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I always view it as </p>\n\n<ul>\n<li>Client validation is for useability</li>\n<li>Server validation is for security.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>Client side validation is against the concept of \"world wide web\" because the reason for which we made html text based is because each device must be able to process rsponce however small the device is. Now client side validation demands processing power of the device used which is not what \"www\" expects from a device consuming html. Client side validations are particularly important for saving bandwidth , as internet speeds are increasing day by day there will be a time when we no longer require client side validations. </p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Should you do validation on the server side, or is it ok to just do the validation on the client side?</p>\n\n<p>@TheTXI </p>\n\n<p>I am happy your amazed I just did not want to leave anything out that could potential change someone answer to give me false information.</p>\n\n<p><hr /></p>\n\n<p>It seems alot of people touched on what I was going after but the part of the Ajax should have been kept in my question as this was the most important part.</p>\n\n<p>However reading the posts I know see that a bad person could just easily load up firebug and change my button to a submit button and do a post. Or some other way.</p>\n",
            "last_activity_date": 1278699712,
            "question_id": 1125772,
            "score": 13,
            "tags": [
                "javascript",
                "ajax",
                "validation"
            ],
            "title": "Should you do validation on the server side?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Your best bet is to pass a callback to <code>create_blob</code> and let the callback do whatever needs to be done, something like this:</p>\n\n<pre><code>create_blob(file, function(blob_string) { alert(blob_string) });\n\nfunction create_blob(file, callback) {\n    var reader = new FileReader();\n    reader.onload = function() { callback(reader.result) };\n    reader.readAsDataURL(file);\n}\n</code></pre>\n\n<p>This sort of chicanery is pretty standard with asynchronous calls (AJAX in particular). You could wire up some fragile mess of timers in an attempt for force synchronically but fighting the natural style of an API is a losing battle.</p>\n",
                    "is_accepted": true,
                    "score": 16
                },
                {
                    "body": "<p>This is the issue with callbacks. The 'answer' is going to happen later in another moment and not during the evaluation of the method. Little use making a return here.</p>\n\n<p>Your callback needs to handle the return value making the code looks more complicated :</p>\n\n<pre><code>reader.onload = function(e) { \n  // handle here the result\n  // do something with e.target.result\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have run into a problem where I can't seem to get a value from an asynchronous JavaScript method I am running in Jquery. My Jquery looks like this:</p>\n\n<pre><code>$(document).ready( function() {\n$('#splash_image_upload').change( function() {\n    var file = this.files[0];\n    var blob_string = create_blob(file);\n    alert(blob_string);\n });\n</code></pre>\n\n<p>I am able to access the value that comes from the 'onload' event but I cannot seem to return the actual value. I have tried this:`</p>\n\n<pre><code>function create_blob(file) {\n    var reader = new FileReader();\n    reader.onload = (function() { return function(e) { return e.target.result; }; })();\n    reader.readAsDataURL(file);\n}\n</code></pre>\n\n<p>Every time I execute this function the value of the 'blob_str' variable is 'undefined' presumably because the assignment is done before the function is finished. I am not really sure how to go about this. Is there a way I can return this value from this function?? </p>\n",
            "last_activity_date": 1306995510,
            "question_id": 6211023,
            "score": 6,
            "tags": [
                "javascript",
                "asynchronous",
                "methods",
                "return"
            ],
            "title": "Returning value from asynchronous JavaScript method?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>The used JavaScript (or JScript) version depends on three things: installed Interner Explorer version, used document type declaration and <code>x-ua-compatible</code> meta tag.</p>\n\n<p>Though HTAs are run by mshta.exe, IE provides the JavaScript and rendering engines to applications, hence everything said later about JS versions, stands for box-models, positioning, CSS etc, and available HTML elements too.</p>\n\n<p>If you have IE10 installed into your system, you can use the latest version of JavaScript by using <code>&lt;!DOCTYPE html&gt;</code> and <code>&lt;meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" /&gt;</code>.</p>\n\n<p>Naturally, setting the <code>content</code> to <code>IE=edge</code> doesn't override an old version of the installed IE, the latest available mode is used. Instead of <code>edge</code>, you can use IE version numbers to downgrade the app when run with newer IEs.</p>\n\n<p>Omitting doctype should always drop the app to run in Quirks mode, which in the case of HTA is similar to IE5. However, in this case, the document mode can be altered with <code>x-ua-compatible</code>, but there were some inconsistencies at least in IE8 &amp; 9. It's always safest to use doctype, if the Quirks mode isn't required.</p>\n\n<p>With doctype, but without <code>x-ua-compatible</code> meta tag HTAs are run in IE7 Standards mode (which doesn't support <code>object.defineProperty()</code>, it's introduced in IE9).</p>\n\n<p>You can read more about the subject at MSDN: <a href=\"http://msdn.microsoft.com/en-us/library/ms536496%28v=vs.85%29.aspx#Compatibility\" rel=\"nofollow\">Introduction to HTML Applications (HTAs)</a> </p>\n\n<p>Here's a \"safe start\" for a HTA file, when you want to use the latest available version:</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;title&gt;HTA&lt;/title&gt;\n&lt;meta http-equiv=\"x-ua-compatible\" content=\"ie=edge\" /&gt;\n// All link, style and script tags, or any code should be placed below the five lines above\n</code></pre>\n\n<p>You can also use <code>ScriptEngine</code> functions to find out the latest script version:</p>\n\n<pre><code>ver = ScriptEngine() + ' V ';\nver += ScriptEngineMajorVersion() + '.';\nver += ScriptEngineMinorVersion() + '.';\nver += ScriptEngineBuildVersion();\nalert(ver);\n</code></pre>\n\n<p>Notice, that this shows only the version provided by browser, document mode doesn't have an affect to the returned values.</p>\n",
                    "is_accepted": true,
                    "score": 7
                }
            ],
            "body": "<p>does anyone know what version of Javascript is used by HTA files.</p>\n\n<p>Currently creating some script files - and trying to make use of Object.defineProperty</p>\n\n<p>When running as an HTA - it errors stating that Object doesn't support this property or method.  I've run it as an HTM file just to check - and there is no problem at all.</p>\n\n<p>So I can only assume that mshta.exe is using an older javascript engine.  Can any one confirm this?</p>\n\n<p>Cheers\nDarren</p>\n",
            "last_activity_date": 1387105052,
            "question_id": 19567887,
            "score": 5,
            "tags": [
                "javascript",
                "version",
                "hta",
                "defineproperty"
            ],
            "title": "Javascript version in HTA"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<blockquote>\n  <p>but instead they are being output immediately for some reason.</p>\n</blockquote>\n\n<p>You are calling them already here:</p>\n\n<pre><code>promiseFuncs.push(getDelayedString(str));\n//                                ^^^^^\n</code></pre>\n\n<p>You would need to push <code>function(){ return getDelayedString(str); }</code>. Btw, instead of using pushing to an array in an <code>each</code> loop you rather should use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\" rel=\"nofollow\"><code>map</code></a>. And actually you don't really need that anyway but can <code>reduce</code> over the <code>strings</code> array directly:</p>\n\n<pre><code>function onceUponATime() {\n    var strings = [\"Once\", \"upon\", \"a\", \"time\"];\n\n    return strings.reduce(function (soFar, s) {\n        return soFar.then(function() {\n            return getDelayedString(s);\n        });\n    }, Q());    \n}\n</code></pre>\n\n<p>Oh, and <a href=\"http://stackoverflow.com/questions/802854/why-is-document-write-considered-a-bad-practice\">don't use <code>document.write</code></a>.</p>\n",
                    "is_accepted": true,
                    "score": 7
                }
            ],
            "body": "<p>I am having a hard time running promises sequentially.</p>\n\n<pre><code>var getDelayedString = function(string) {\n    var deferred = Q.defer();\n\n    setTimeout(function() {\n        document.write(string+\" \");\n        deferred.resolve();\n    }, 500);\n\n    return deferred.promise;\n};\n\nvar onceUponATime = function() {\n    var strings = [\"Once\", \"upon\", \"a\", \"time\"];\n\n    var promiseFuncs = [];\n\n    strings.forEach(function(str) {\n        promiseFuncs.push(getDelayedString(str));\n    });\n\n    //return promiseFuncs.reduce(Q.when, Q());\n    return promiseFuncs.reduce(function (soFar, f) {\n        return soFar.then(f);\n    }, Q());    \n};\n\ngetDelayedString(\"Hello\")\n.then(function() {\n    return getDelayedString(\"world!\")\n})\n.then(function() {\n    return onceUponATime();\n})\n.then(function() {\n    return getDelayedString(\"there was a guy and then he fell.\")\n})\n.then(function() {\n    return getDelayedString(\"The End!\")\n})\n</code></pre>\n\n<p>onceUponATime() should sequentially output [\"Once\", \"upon\", \"a\", \"time\"] but instead they are being output immediately for some reason.</p>\n\n<p>jsFiddle here: <a href=\"http://jsfiddle.net/6Du42/2/\" rel=\"nofollow\">http://jsfiddle.net/6Du42/2/</a></p>\n\n<p>Any idea what I am doing wrong?</p>\n",
            "last_activity_date": 1415651070,
            "question_id": 18386753,
            "score": 4,
            "tags": [
                "javascript",
                "promise",
                "q"
            ],
            "title": "How to sequentially run promises with Q in Javascript?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>You used a function call instead of a function reference as the first parameter of the setInterval. Do it like this: </p>\n\n<pre><code>function timer() {\n  console.log(\"timer!\");\n}\n\nwindow.setInterval(timer, 1000);\n</code></pre>\n\n<p>Or shorter (but when the function gets bigger also less readable):</p>\n\n<pre><code>window.setInterval( function() {\n  console.log(\"timer!\");\n}, 1000)\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 39
                },
                {
                    "body": "<p><code>setInterval</code> and <code>setTimeout</code> <strong>must</strong> be used with callbacks, like:</p>\n\n<pre><code>setInterval(timer, 1000);\n</code></pre>\n\n<p>or unnamed functions:</p>\n\n<pre><code>setInterval( function() { console.log(\"timer!\"); }, 1000 );\n</code></pre>\n\n<p>Why your code is not working - when you pass a function as argument to another function with brackets e.g. <code>doSomething ( someFunc() )</code> you are passing the result of the function.</p>\n\n<p>When the function is passed as object e.g. <code>doSomething ( someFunc )</code> you are passing a callback. This way <code>someFunc</code> is passed as reference and it is executed somewhere in the calling function. This is the same as the pointers to functions in other languages.</p>\n\n<p>A common mistake is to use the these two functions as shown at <a href=\"http://www.w3schools.com/js/js_timing.asp\" rel=\"nofollow\">w3schools</a>. This makes an implicit call to <code>eval</code>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I have this counter I made but I want it to run forever, it's really simple, what am I doing wrong here?</p>\n\n<pre><code>function timer() {\n  console.log(\"timer!\")\n}\n\nwindow.setInterval(timer(), 1000)\n</code></pre>\n",
            "last_activity_date": 1412559162,
            "question_id": 10182714,
            "score": 23,
            "tags": [
                "javascript",
                "callback",
                "setinterval"
            ],
            "title": "setInterval callback only runs once"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>This is known as a 'pop-under' (and is generally frowned upon... but I digress).. It should give you plenty to google about</p>\n\n<p>You probably want to do something like:</p>\n\n<pre><code>var popup = window.open(...);\npopup.blur();\nwindow.focus();\n</code></pre>\n\n<p>Which should set the focus back to the original window (untested - pinched from google). Some browsers might block this technique.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>You can use either\n\"blur\"  or\n\"focus\"  to do that required action.</p>\n\n<p><strong>\"blur\"</strong></p>\n\n<pre><code>function newwindow()  \n{  \n    var myChild= window.open('link.html','','width=,height=,resizable=no');  \n    myChild.blur();\n} \n</code></pre>\n\n<p><strong>\"focus\"</strong></p>\n\n<pre><code>function newwindow()  \n{  \n    window.open('link.html','','width=,height=,resizable=no');  \n    window.focus();\n} \n</code></pre>\n\n<p>Put the code in your parentWindow (i.e. the window in which you are now)</p>\n\n<p>Both will work.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>After calling window.open, you may try to use</p>\n\n<pre><code>window.resizeTo(0,0); \nwindow.moveTo(0,window.screen.availHeight+10);\n</code></pre>\n\n<p>this way can not really open window in background, but works in similar way. Chrome works fine, did not try other browser. </p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I have a window I'm opening with a Javascript function:</p>\n\n<pre><code>function newwindow() \n{ \nwindow.open('link.html','','width=,height=,resizable=no'); \n}\n</code></pre>\n\n<p>I need it that once the new window opens that the focus returns to the original window.\nHow can I do that?\nAnd where do I put the code - in the new window, or the old one?\nThanks!</p>\n",
            "last_activity_date": 1400489050,
            "question_id": 2181464,
            "score": 5,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "I need to to open a new window in the background with JavaScript, and make sure the original is still focused"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Closest I can get:</p>\n\n<pre><code>$(function(){\n    $('span').width($('span').width()/2);\n    $('span:nth-child(2)').css('text-indent', -$('span').width());\n});\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>body{\n    font-family: arial;\n}\nspan{\n    display: inline-block;\n    overflow: hidden;\n}\nspan:nth-child(2){\n    color: red;\n}\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;span&gt;X&lt;/span&gt;&lt;span&gt;X&lt;/span&gt;\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/9wxfY/2/\">http://jsfiddle.net/9wxfY/2/</a></p>\n\n<p>Heres a version that just uses one span: <a href=\"http://jsfiddle.net/9wxfY/4/\">http://jsfiddle.net/9wxfY/4/</a></p>\n",
                    "is_accepted": false,
                    "score": 28
                },
                {
                    "body": "<p><img src=\"http://i.imgur.com/G07u5An.png\" alt=\"enter image description here\"><br><br><br></p>\n\n<p>I've just finished developing the plugin and it is available for everyone to use! Hope you will enjoy it. </p>\n\n<h3>View Project on <a href=\"https://github.com/emisfera/Splitchar\">GitHub</a> - View Project <a href=\"http://emisfera.github.io/Splitchar.js/\">Website</a>. <b>(so you can see all the split styles)</b></h3>\n\n<h2><b>Usage</b></h2>\n\n<p>First of all, make sure you have the <code>jQuery</code> library is included. The best way to get the latest jQuery version is to update your head tag with:</p>\n\n<pre><code>&lt;script src=\"http://code.jquery.com/jquery-latest.min.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>After downloading the files, make sure you include them in your project:</p>\n\n<pre><code>&lt;link rel=\"stylesheet\" type=\"text/css\" href=\"css/splitchar.css\"&gt;\n&lt;script type=\"text/javascript\" src=\"js/splitchar.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<h2><b>Markup</b></h2>\n\n<p>All you have to do is to asign the class <code>splitchar</code> , followed by the desired style to the element wrapping your text. e.g</p>\n\n<pre><code>&lt;h1 class=\"splitchar horizontal\"&gt;Splitchar&lt;/h1&gt;\n</code></pre>\n\n<p>After all this is done, just make sure you call the jQuery function in your document ready file like this:</p>\n\n<pre><code>$(\".splitchar\").splitchar();\n</code></pre>\n\n<h2><b>Customizing</b></h2>\n\n<p>In order to make the text look exactly as you want it to, all you have to do is apply your design like this:</p>\n\n<pre><code>.horizontal { /* Base CSS - e.g font-size */ }\n.horizontal:before { /* CSS for the left half */ }\n.horizontal:after { /* CSS for the right half */ }\n</code></pre>\n\n<p><br>\nThat's it! Now you have the <code>Splitchar</code> plugin all set. More info about it at <a href=\"http://emisfera.github.io/Splitchar.js/\">emisfera.github.io/Splitchar</a>.</p>\n",
                    "is_accepted": false,
                    "score": 301
                },
                {
                    "body": "<p><img src=\"http://i.stack.imgur.com/oBWFs.png\" alt=\"Example\"></p>\n\n<hr>\n\n<h2><a href=\"http://jsfiddle.net/CL82F/14/\">JSFiddle DEMO</a></h2>\n\n<p>We'll do it using just CSS pseudo selectors! </p>\n\n<p>This technique will work with dynamically generated content and different font sizes and widths.</p>\n\n<p><strong>HTML:</strong></p>\n\n<pre><code>&lt;div class='split-color'&gt;Two is better than one.&lt;/div&gt;\n</code></pre>\n\n<p><strong>CSS:</strong></p>\n\n<pre><code>.split-color &gt; span {\n    white-space: pre-line;\n    position: relative;\n    color: #409FBF;\n}\n\n.split-color &gt; span:before {\n    content: attr(data-content);\n    pointer-events: none;  /* Prevents events from targeting pseudo-element */\n    position: absolute;\n    overflow: hidden;\n    color: #264A73;\n    width: 50%;\n    z-index: 1;\n}\n</code></pre>\n\n<p>To wrap the dynamically generated string, you could use a function like this:</p>\n\n<pre><code>// Wrap each letter in a span tag and return an HTML string\n// that can be used to replace the original text\nfunction wrapString(str) {\n  var output = [];\n  str.split('').forEach(function(letter) {\n    var wrapper = document.createElement('span');\n    wrapper.dataset.content = wrapper.innerHTML = letter;\n\n    output.push(wrapper.outerHTML);\n  });\n\n  return output.join('');\n}\n\n// Replace the original text with the split-color text\nwindow.onload = function() {\n    var el  = document.querySelector('.split-color'),\n        txt = el.innerHTML;\n\n    el.innerHTML = wrapString(txt);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 77
                },
                {
                    "body": "<p>I am not sure how elegant this solution is, but it cuts everything exactly in half: <a href=\"http://jsfiddle.net/9wxfY/11/\">http://jsfiddle.net/9wxfY/11/</a></p>\n\n<p>Otherwise, I have created a nice solution for you... All you need to do is have this for your HTML:</p>\n\n<p>Take a look at this: <a href=\"http://jsfiddle.net/9wxfY/8/\">http://jsfiddle.net/9wxfY/8/</a></p>\n\n<p>As for the CSS, it is very limited... You only need to apply it to <code>:nth-child(even)</code></p>\n\n<h2>CSS</h2>\n\n<pre><code>.half-color span{\n    font-size: 2em;\n    display: inline-block;\n    overflow: hidden;\n}\n.half-color span:nth-child(even){\n    color: red;\n}\n</code></pre>\n\n<h2>HTML</h2>\n\n<pre><code>&lt;div class=\"half-color\"&gt;This is a sentence&lt;/div&gt;\n</code></pre>\n\n<h2>jQuery</h2>\n\n<pre><code>$(function(){\n    var $hc = $('.half-color');\n    var str = $hc.text();\n    $hc.html(\"\");\n\n    var i = 0;\n    var chars;\n    var dupText;\n\n    while(i &lt; str.length){\n        chars = str[i];\n        dupText = \"&lt;span&gt;\" + chars + \"&lt;/span&gt;\";\n\n        $hc.append(dupText);\n        $hc.append(dupText);\n\n        i++;\n    }\n\n    $('.half-color span:nth-child(odd)').width($('.half-color span:first-child').width()/2);\n    $('.half-color span:nth-child(even)').css('text-indent', -$('.half-color span:first-child').width());\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<h1><a href=\"https://github.com/arbelh/HalfStyle\">Now on GitHub as a Plugin!</a></h1>\n\n<p><img src=\"http://i.stack.imgur.com/Glo2Q.png\" alt=\"enter image description here\"> Feel free to fork and improve.</p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/820/\">Demo</a> | <a href=\"https://github.com/arbelh/HalfStyle/archive/master.zip\">Download Zip</a> | <a href=\"http://www.half-style.com\">Half-Style.com</a> (Redirects to GitHub)</h1>\n\n<hr>\n\n<ul>\n<li><strong>Pure CSS</strong> for a Single Character</li>\n<li>JavaScript used for automation accross text or multiple characters</li>\n<li>Preserves Text Accessibility for screen readers for the blind or visually\nimpaired</li>\n</ul>\n\n<h1>Part1: Basic Solution</h1>\n\n<p><img src=\"http://i.stack.imgur.com/ZYic1.png\" alt=\"Half Style on text\"></p>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/pd9yB/817/\">http://jsfiddle.net/pd9yB/817/</a></p>\n\n<hr>\n\n<p>This works on any dynamic text, or a single character, and is all automated. All you need to do is add a class on the target text and the rest is taken care of.</p>\n\n<p>Also, the accessibility of the original text is preserved for screen readers for the blind or visually impaired.</p>\n\n<p><strong>Explanation for a single character:</strong></p>\n\n<p>Pure CSS. All you need to do is to apply <code>.halfStyle</code> class to each element that contains the character you want to be half-styled.</p>\n\n<p>For each span element containing the character, you can create a data attribute, for example here <code>data-content=\"X\"</code>, and on the pseudo element use <code>content: attr(data-content);</code> so the <code>.halfStyle:before</code> class will be dynamic and you won't need to hard code it for every instance.</p>\n\n<p><strong>Explanation for any text:</strong></p>\n\n<p>Simply add <code>textToHalfStyle</code> class to the element containing the text.</p>\n\n<hr>\n\n<p><strong>CSS:</strong></p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.halfStyle {\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: black; /* or transparent, any color */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n}\n.halfStyle:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    left:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    color: #f00;\n}\n</code></pre>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;p&gt;Single Characters:&lt;/p&gt;\n&lt;span class=\"halfStyle\" data-content=\"X\"&gt;X&lt;/span&gt;\n&lt;span class=\"halfStyle\" data-content=\"Y\"&gt;Y&lt;/span&gt;\n&lt;span class=\"halfStyle\" data-content=\"Z\"&gt;Z&lt;/span&gt;\n&lt;span class=\"halfStyle\" data-content=\"A\"&gt;A&lt;/span&gt;\n\n&lt;hr/&gt;\n&lt;p&gt;Automated:&lt;/p&gt;\n\n&lt;span class=\"textToHalfStyle\"&gt;Half-style, please.&lt;/span&gt;\n</code></pre>\n\n<hr>\n\n<p>To make it automated, simply add <code>textToHalfStyle</code> class to the element containing the text.</p>\n\n<p><strong>jQuery</strong> for automated mode:</p>\n\n<pre><code>jQuery(function($) {\n    var text, chars, $el, i, output;\n\n    // Iterate over all class occurences\n    $('.textToHalfStyle').each(function(idx, el) {\n        $el = $(el);\n        text = $el.text();\n        chars = text.split('');\n\n        // Set the screen-reader text\n        $el.html('&lt;span style=\"position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);\"&gt;' + text + '&lt;/span&gt;');\n\n        // Reset output for appending\n        output = '';\n\n        // Iterate over all chars in the text\n        for (i = 0; i &lt; chars.length; i++) {\n            // Create a styled element for each character and append to container\n            output += '&lt;span aria-hidden=\"true\" class=\"halfStyle\" data-content=\"' + chars[i] + '\"&gt;' + chars[i] + '&lt;/span&gt;';\n        }\n\n        // Write to DOM only once\n        $el.append(output);\n    });\n});\n</code></pre>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/pd9yB/819/\">http://jsfiddle.net/pd9yB/819/</a></p>\n\n<hr>\n\n<h1>Part2: Advanced solution - Independent left and right parts</h1>\n\n<p><img src=\"http://i.stack.imgur.com/zYa0F.png\" alt=\"Half Style on text - advanced\"></p>\n\n<p><strong><em>With this solution you can style left and right parts, individually and independently</em></strong>.</p>\n\n<p>Everything is the same, only more advanced CSS does the magic.</p>\n\n<p><strong>Demo:</strong> <a href=\"http://jsfiddle.net/pd9yB/819/\">http://jsfiddle.net/pd9yB/819/</a></p>\n\n<pre class=\"lang-css prettyprint-override\"><code>.halfStyle {\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent; /* hide the base character */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n}\n.halfStyle:before { /* creates the left part */\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n}\n.halfStyle:after { /* creates the right part */\n    display:block;\n    direction: rtl; /* very important, will make the width to start from right */\n    position:absolute;\n    z-index:2;\n    top:0;\n    left:50%;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n</code></pre>\n\n<p><hr/>\n<hr/></p>\n\n<h1>Part3: Mix-Match and Improve</h1>\n\n<p>Now that we know what is possible, let's create some variations.</p>\n\n<hr/>\n\n<h2>-Horizontal Half Parts</h2>\n\n<p><img src=\"http://i.stack.imgur.com/2eDaQ.png\" alt=\"halfStyle - Horizontal Half Parts\"></p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/821/\">Demo</a></h1>\n\n<pre><code>.halfStyle {\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent; /* hide the base character */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n}\n.halfStyle:before { /* creates the top part */\n    display:block;\n    z-index:2;\n    position:absolute;\n    top:0;\n    height: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n}\n.halfStyle:after { /* creates the bottom part */\n    display:block;\n    position:absolute;\n    z-index:1;\n    top:0;\n    height: 100%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n</code></pre>\n\n<hr/>\n\n<hr/>\n\n<h2>-Vertical 1/3 Parts</h2>\n\n<p><img src=\"http://i.stack.imgur.com/ypn4X.png\" alt=\"halfStyle - Vertical 1/3 Parts\"></p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/850/\">Demo</a></h1>\n\n<pre><code>.halfStyle { /* base char and also the right 1/3 */\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent; /* hide the base character */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    color: #f0f; /* for demo purposes */\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n.halfStyle:before { /* creates the left 1/3 */\n    display:block;\n    z-index:2;\n    position:absolute;\n    top:0;\n    width: 33.33%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #af0; /* for demo purposes */\n}\n.halfStyle:after { /* creates the middle 1/3 */\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 66.66%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n}\n</code></pre>\n\n<hr/>\n\n<hr/>\n\n<h2>-Horizontal 1/3 Parts</h2>\n\n<p><img src=\"http://i.stack.imgur.com/UeuxW.png\" alt=\"halfStyle - Horizontal 1/3 Parts\"></p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/823/\">Demo</a></h1>\n\n<pre><code>.halfStyle { /* base char and also the bottom 1/3 */\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent;\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    color: #f0f;\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n.halfStyle:before { /* creates the top 1/3 */\n    display:block;\n    z-index:2;\n    position:absolute;\n    top:0;\n    height: 33.33%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n}\n.halfStyle:after { /* creates the middle 1/3 */\n    display:block;\n    position:absolute;\n    z-index:1;\n    top:0;\n    height: 66.66%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n}\n</code></pre>\n\n<hr/>\n\n<hr/>\n\n<h2>-HalfStyle Improvement By @KevinGranger</h2>\n\n<p><img src=\"http://i.stack.imgur.com/PgdJ6.png\" alt=\"halfStyle - KevinGranger\"></p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/824/\">DEMO</a></h1>\n\n<pre><code>body{\n    background-color: black;\n}\n\n.textToHalfStyle{\n    display:block;\n    margin: 200px 0 0 0;\n    text-align:center;\n}\n\n.halfStyle {\n    font-family: 'Libre Baskerville', serif;\n    position:relative;\n    display:inline-block;\n    width:1;\n    font-size:70px;\n    color: black;\n    overflow:hidden;\n    white-space: pre;\n    text-shadow: 1px 2px 0 white;\n}\n.halfStyle:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    color: white;\n}\n</code></pre>\n\n<p><hr/>\n<hr/></p>\n\n<h2>-PeelingStyle improvement of HalfStyle by @SamTremaine</h2>\n\n<p><img src=\"http://i.stack.imgur.com/r67KC.png\" alt=\"halfStyle - SamTremaine\"></p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/826/\">Demo</a> and on <a href=\"http://experimental.samtremaine.co.uk/half-style/\">samtremaine.co.uk</a></h1>\n\n<pre><code>.halfStyle {\n    position: relative;\n    display: inline-block;\n    font-size: 68px;\n    color: rgba(0, 0, 0, 0.8);\n    overflow: hidden;\n    white-space: pre;\n    transform: rotate(4deg);\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n}\n.halfStyle:before { /* creates the left part */\n    display: block;\n    z-index: 1;\n    position: absolute;\n    top: -0.5px;\n    left: -3px;\n    width: 100%;\n    content: attr(data-content);\n    overflow: hidden;\n    pointer-events: none;\n    color: #FFF;\n    transform: rotate(-4deg);\n    text-shadow: 0px 0px 1px #000;\n}\n</code></pre>\n\n<p><hr/>\n<hr/></p>\n\n<h1>Part4: Ready for Production</h1>\n\n<p>Customized different Half-Style style-sets can be used on desired elements on the same page.\nYou can define multiple style-sets and tell the plugin which one to use.</p>\n\n<p>The plugin uses data attribute <code>data-halfstyle=\"[-CustomClassName-]\"</code> on the target <code>.textToHalfStyle</code> elements and makes all the necessary changes automatically.</p>\n\n<p>So, simply on the element containing the text add <code>textToHalfStyle</code> class and data attribute <code>data-halfstyle=\"[-CustomClassName-]\"</code>. The plugin will do the rest of the job.</p>\n\n<p><img src=\"http://i.stack.imgur.com/RxjKF.png\" alt=\"halfStyle - Multiple on Same Page\"></p>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/787/\">Demo</a> of Multiple Half-Styles on the same page.</h1>\n\n<pre><code>jQuery(function($) {\n    var halfstyle_text, halfstyle_chars, $halfstyle_el, halfstyle_i, halfstyle_output, halfstyle_style;\n\n    // Iterate over all class occurrences\n    $('.textToHalfStyle').each(function(idx, halfstyle_el) {\n        $halfstyle_el = $(halfstyle_el);\n        halfstyle_style = $halfstyle_el.data('halfstyle');\n        halfstyle_text = $halfstyle_el.text();\n        halfstyle_chars = halfstyle_text.split('');\n\n        // Set the screen-reader text\n        $halfstyle_el.html('&lt;span style=\"position: absolute !important;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);\"&gt;' + halfstyle_text + '&lt;/span&gt;');\n\n        // Reset output for appending\n        halfstyle_output = '';\n\n        // Iterate over all chars in the text\n        for (halfstyle_i = 0; halfstyle_i &lt; halfstyle_chars.length; halfstyle_i++) {\n            // Create a styled element for each character and append to container\n            halfstyle_output += '&lt;span aria-hidden=\"true\" class=\"halfStyle ' + halfstyle_style + '\" data-content=\"' + halfstyle_chars[halfstyle_i] + '\"&gt;' + halfstyle_chars[halfstyle_i] + '&lt;/span&gt;';\n        }\n\n        // Write to DOM only once\n        $halfstyle_el.append(halfstyle_output);\n    });\n});\n</code></pre>\n\n<p>Also the CSS style-sets' class definitions match the <code>[-CustomClassName-]</code> part mentioned above and is chained to <code>.halfStyle</code>, so we will have <code>.halfStyle.[-CustomClassName-]</code></p>\n\n<pre><code> /* start half-style hs-base */\n .halfStyle.hs-base {\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    color: #000; /* for demo purposes */\n}\n.halfStyle.hs-base:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    pointer-events: none; /* so the base char is selectable by mouse */\n    overflow:hidden;\n    color: #f00; /* for demo purposes */\n}\n /* end half-style hs-base */\n\n/* start half-style hs-horizontal-third */\n.halfStyle.hs-horizontal-third { /* base char and also the bottom 1/3 */\n    position:relative;\n    display:inline-block;\n    font-size:80px; /* or any font size will work */\n    color: transparent;\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    color: #f0f;\n    text-shadow: 2px 2px 0px #0af; /* for demo purposes */\n}\n.halfStyle.hs-horizontal-third:before { /* creates the top 1/3 */\n    display:block;\n    z-index:2;\n    position:absolute;\n    top:0;\n    height: 33.33%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #f00; /* for demo purposes */\n    text-shadow: 2px -2px 0px #fa0; /* for demo purposes */\n}\n.halfStyle.hs-horizontal-third:after { /* creates the middle 1/3 */\n    display:block;\n    position:absolute;\n    z-index:1;\n    top:0;\n    height: 66.66%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    pointer-events: none; /* so the base char is selectable by mouse */\n    color: #000; /* for demo purposes */\n    text-shadow: 2px 2px 0px #af0; /* for demo purposes */\n}\n/* end half-style hs-horizontal-third */\n\n/* start half-style hs-PeelingStyle, by user SamTremaine on Stackoverflow.com */\n.halfStyle.hs-PeelingStyle {\n    position: relative;\n    display: inline-block;\n    font-size: 68px;\n    color: rgba(0, 0, 0, 0.8);\n    overflow: hidden;\n    white-space: pre;\n    transform: rotate(4deg);\n    text-shadow: 2px 1px 3px rgba(0, 0, 0, 0.3);\n}\n.halfStyle.hs-PeelingStyle:before { /* creates the left part */\n    display: block;\n    z-index: 1;\n    position: absolute;\n    top: -0.5px;\n    left: -3px;\n    width: 100%;\n    content: attr(data-content);\n    overflow: hidden;\n    pointer-events: none;\n    color: #FFF;\n    transform: rotate(-4deg);\n    text-shadow: 0px 0px 1px #000;\n}\n/* end half-style hs-PeelingStyle */\n\n/* start half-style hs-KevinGranger, by user KevinGranger on StackOverflow.com*/\n.textToHalfStyle.hs-KevinGranger {\n    display:block;\n    margin: 200px 0 0 0;\n    text-align:center;\n}\n\n.halfStyle.hs-KevinGranger {\n    font-family: 'Libre Baskerville', serif;\n    position:relative;\n    display:inline-block;\n    width:1;\n    font-size:70px;\n    color: black;\n    overflow:hidden;\n    white-space: pre;\n    text-shadow: 1px 2px 0 white;\n}\n.halfStyle.hs-KevinGranger:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:0;\n    width: 50%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    color: white;\n}\n/* end half-style hs-KevinGranger\n</code></pre>\n\n<p>HTML:</p>\n\n<pre><code>&lt;p&gt;\n    &lt;span class=\"textToHalfStyle\" data-halfstyle=\"hs-base\"&gt;Half-style, please.&lt;/span&gt;\n&lt;/p&gt;\n&lt;p&gt;\n    &lt;span class=\"textToHalfStyle\" data-halfstyle=\"hs-horizontal-third\"&gt;Half-style, please.&lt;/span&gt;\n&lt;/p&gt;\n&lt;p&gt;\n    &lt;span class=\"textToHalfStyle\" data-halfstyle=\"hs-PeelingStyle\"&gt;Half-style, please.&lt;/span&gt;\n&lt;/p&gt;\n&lt;p style=\"background-color:#000;\"&gt;\n    &lt;span class=\"textToHalfStyle\" data-halfstyle=\"hs-KevinGranger\"&gt;Half-style, please.&lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n\n<h1><a href=\"http://jsfiddle.net/pd9yB/787/\">Demo</a> of Multiple Half-Styles on the same page.</h1>\n",
                    "is_accepted": true,
                    "score": 1476
                },
                {
                    "body": "<p>Yes, you can do this with only one character and only CSS. </p>\n\n<p>Webkit (and Chrome) only, though:</p>\n\n<p><a href=\"http://jsbin.com/rexoyice/1/\">http://jsbin.com/rexoyice/1/</a></p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;h1&gt;X&lt;/h1&gt;\n</code></pre>\n\n<p>CSS:</p>\n\n<pre><code>h1 {\n  display: inline-block;\n  font-family: helvetica, arial, sans-serif;\n  font-weight: bold;\n  font-size: 300px;\n  background: linear-gradient(to right, #7db9e8 50%,#1e5799 50%);\n  -webkit-background-clip: text;\n  -webkit-text-fill-color: transparent;\n}\n</code></pre>\n\n<p>Visually, all the examples that use two characters (be it via JS, CSS pseudo elements, or just HTML) look fine, but note that that all adds content to the DOM which may cause accessibility--as well as text selection/cut/paste issues. </p>\n",
                    "is_accepted": false,
                    "score": 95
                },
                {
                    "body": "<p>A nice WebKit-only solution that takes advantage of the <code>background-clip: text</code> support: <a href=\"http://jsfiddle.net/sandro_paganotti/wLkVt/\">http://jsfiddle.net/sandro_paganotti/wLkVt/</a></p>\n\n<pre><code>span{\n   font-size: 100px;\n   background: linear-gradient(to right, black, black 50%, grey 50%, grey);\n   -webkit-background-clip: text;\n   -webkit-text-fill-color: transparent;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Here an ugly implementation in canvas. I tried this solution, but the results are worse than I expected, so here it is anyway.</p>\n\n<p><img src=\"http://i.stack.imgur.com/ltPQu.png\" alt=\"Canvas example\"></p>\n\n<p><a href=\"http://jsfiddle.net/kLXmL/2/\">http://jsfiddle.net/kLXmL/2/</a></p>\n\n<pre><code>&lt;div&gt;Example Text&lt;/div&gt;\n\n$(function(){\n    $(\"div\").each(function(){\n        var CHARS = $(this).text().split('');\n        $(this).html(\"\");\n        $.each(CHARS,function(index, char){\n            var canvas = $(\"&lt;canvas /&gt;\")\n                    .css(\"width\", \"40px\")\n                    .css(\"height\", \"40px\")\n                    .get(0);\n            $(\"div\").append(canvas);\n            var ctx = canvas.getContext(\"2d\");\n            var gradient = ctx.createLinearGradient(0, 0, 130, 0);\n            gradient.addColorStop(\"0\", \"blue\");\n            gradient.addColorStop(\"0.5\", \"blue\");\n            gradient.addColorStop(\"0.51\", \"red\");\n            gradient.addColorStop(\"1.0\", \"red\");\n            ctx.font = '130pt Calibri';\n            ctx.fillStyle = gradient;\n            ctx.fillText(char, 10, 130);\n        });\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>Another CSS-only solution (though data-attribute is needed if you don't want to write letter-specific CSS). This one works more across the board (Tested IE 9/10, Chrome latest &amp; FF latest)</p>\n\n<p><a href=\"http://jsfiddle.net/pkML2/\">http://jsfiddle.net/pkML2/</a></p>\n\n<p>HTML</p>\n\n<pre><code>&lt;span data-char=\"X\"&gt;X&lt;/span&gt;\n</code></pre>\n\n<p>CSS</p>\n\n<pre><code>span {\n    position: relative;\n    color: rgba(50,50,200,0.5);\n}\n\nspan:before {\n    content: attr(data-char);\n    position: absolute;\n    width: 50%;\n    overflow: hidden;\n    color: rgb(50,50,200);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>Nice trick, <a href=\"http://en.wikipedia.org/wiki/Cascading_Style_Sheets\" rel=\"nofollow\">CSS</a> is everything :)</p>\n\n<p><img src=\"http://i.stack.imgur.com/RftEr.png\" alt=\"Enter image description here\"></p>\n\n<p>I just played with @Arbel's solution:</p>\n\n<pre><code>&lt;span class=\"textToHalfStyle\"&gt;Dr. Jekyll and M. Hide&lt;/span&gt;\n\n&lt;style&gt;\n    body{\n      background-color: black;\n    }\n    .textToHalfStyle{\n      display: block;\n      margin: 200px 0 0 0;\n      text-align:center;\n    }\n    .halfStyle {\n      font-family: 'Libre Baskerville', serif;\n      position: relative;\n      display: inline-block;\n      width: 1;\n      font-size: 70px;\n      color: black;\n      overflow: hidden;\n      white-space: pre;\n      text-shadow: 1px 2px 0 white;\n    }\n    .halfStyle:before {\n      display: block;\n      z-index: 1;\n      position: absolute;\n      top: 0;\n      width: 50%;\n      content: attr(data-content); /* Dynamic content for the pseudo element */\n      overflow: hidden;\n      color: white;\n    }\n&lt;/style&gt;\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/Kevin_Granger/pd9yB/327/\" rel=\"nofollow\">http://jsfiddle.net/Kevin_Granger/pd9yB/327/</a></p>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<pre><code>.halfStyle {\n    position:relative;\n    display:inline-block;\n    font-size:68px; /* or any font size will work */\n    color: rgba(0,0,0,0.8); /* or transparent, any color */\n    overflow:hidden;\n    white-space: pre; /* to preserve the spaces from collapsing */\n    transform:rotate(4deg);\n    -webkit-transform:rotate(4deg);\n    text-shadow:2px 1px 3px rgba(0,0,0,0.3);\n}\n.halfStyle:before {\n    display:block;\n    z-index:1;\n    position:absolute;\n    top:-0.5px;\n    left:-3px;\n    width: 100%;\n    content: attr(data-content); /* dynamic content for the pseudo element */\n    overflow:hidden;\n    color: white;\n    transform:rotate(-4deg);\n    -webkit-transform:rotate(-4deg);\n    text-shadow:0 0 1px black;\n\n}\n</code></pre>\n\n<p><a href=\"http://experimental.samtremaine.co.uk/half-style/\">http://experimental.samtremaine.co.uk/half-style/</a></p>\n\n<p>You can crowbar this code into doing all sorts of interesting things - this is just one implementation my associate and I came up with last night.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>It may be irrelevant, maybe not, but sometime ago, I created a jQuery function that does the same thing, but horizontally.</p>\n\n<p>I called it \"Strippex\" For 'stripe'+'text', demo : <a href=\"http://cdpn.io/FcIBg\">http://cdpn.io/FcIBg</a></p>\n\n<p>I'm not saying this is the solution of any problems, but I already tried to apply css to half of a character, but horizontally, So the idea is the same, the realisation may be horrible, but it works.</p>\n\n<p>Ah, and the most important, I had fun creating it !</p>\n\n<p><img src=\"http://i.stack.imgur.com/z15N0.png\" alt=\"enter image description here\"></p>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p>You can also do it using SVG, if you wish:</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-js lang-js prettyprint-override\"><code>var title = document.querySelector('h1'),\r\n    text = title.innerHTML,\r\n    svgTemplate = document.querySelector('svg'),\r\n    charStyle = svgTemplate.querySelector('#text');\r\n\r\nsvgTemplate.style.display = 'block';\r\n\r\nvar space = 0;\r\n\r\nfor (var i = 0; i &lt; text.length; i++) {\r\n  var x = charStyle.cloneNode();\r\n  x.textContent = text[i];\r\n  svgTemplate.appendChild(x);\r\n  x.setAttribute('x', space);\r\n  space += x.clientWidth || 15;\r\n}\r\n\r\ntitle.innerHTML = '';\r\ntitle.appendChild(svgTemplate);</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;svg style=\"display: none; height: 100px; width: 100%\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" version=\"1.1\"&gt;\r\n    &lt;defs id=\"FooDefs\"&gt;\r\n        &lt;linearGradient id=\"MyGradient\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\"&gt;\r\n            &lt;stop offset=\"50%\" stop-color=\"blue\" /&gt;\r\n            &lt;stop offset=\"50%\" stop-color=\"red\" /&gt;\r\n        &lt;/linearGradient&gt;\r\n    &lt;/defs&gt;\r\n    &lt;text y=\"50%\" id=\"text\" style=\"font-size: 72px; fill: url(#MyGradient)\"&gt;&lt;/text&gt;\r\n&lt;/svg&gt;\r\n\r\n&lt;h1&gt;This is not a solution X&lt;/h1&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n\n<p><a href=\"http://codepen.io/nicbell/pen/jGcbq\" rel=\"nofollow\">http://codepen.io/nicbell/pen/jGcbq</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>FWIW, here's my take on this doing it only with CSS: <a href=\"http://codepen.io/ricardozea/pen/uFbts/\" rel=\"nofollow\">http://codepen.io/ricardozea/pen/uFbts/</a></p>\n\n<p>Several notes:</p>\n\n<ul>\n<li><p>The main reason I did this was to test myself and see if I was able to accomplish styling half of a character while actually providing a meaningful answer to the OP.</p></li>\n<li><p>I am aware that this is not an ideal or the most scalable solution and the solutions proposed by the people here are far better for \"real world\" scenarios.</p></li>\n<li><p>The CSS code I created is based on the first thoughts that came to my mind and my own personal approach to the problem.</p></li>\n<li><p>My solution only works on symmetrical characters, like X, A, O, M. **It does not work on asymmetric characters like B, C, F, K or lower case letters.</p></li>\n<li><p>** HOWEVER, this approach creates very interesting 'shapes' with asymmetric characters. Try changing the X to a K or to a lower case letter like an <em>h</em> or a <em>p</em> in the CSS :)</p></li>\n</ul>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;span class=\"half-letter\"&gt;&lt;/span&gt;\n</code></pre>\n\n<p><strong>SCSS</strong></p>\n\n<pre><code>.half-character { \n  display: inline-block;\n  font: bold 350px/.8 Arial;\n  position: relative;\n\n  &amp;:before, &amp;:after {\n    content: 'X'; //Change character here\n    display: inline-block;\n    width: 50%;\n    overflow: hidden;\n    color: #7db9e8;\n  }\n  &amp;:after {\n    position: absolute;\n    top: 0;\n    left: 50%;\n    color: #1e5799;\n    transform: rotateY(-180deg);\n  }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>If you are interested in this, then Lucas Bebber's Glitch is a very similar and super cool effect:</p>\n\n<p><img src=\"http://i.stack.imgur.com/63fkI.gif\" alt=\"enter image description here\"></p>\n\n<p>Created using a simple SASS Mixin such as</p>\n\n<pre><code>.example-one {\n  font-size: 100px;\n  @include textGlitch(\"example-one\", 17, white, black, red, blue, 450, 115);\n}\n</code></pre>\n\n<p>More details at <a href=\"http://css-tricks.com/glitch-effect-text-images-svg/\">Chris Coyer's CSS Tricks</a> and <a href=\"http://codepen.io/lbebber/pen/ypgql\">Lucas Bebber's Codepen page</a></p>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p><strong>What I am looking for:</strong></p>\n\n<p>A way to style one <strong>HALF</strong> of a character. (In this case, half the letter being transparent)</p>\n\n<p><strong>What I have currently searched for and tried (With no luck):</strong></p>\n\n<ul>\n<li>Methods for styling half of a character/letter</li>\n<li>Styling part of a character with CSS or JavaScript</li>\n<li>Apply CSS to 50% of a character</li>\n</ul>\n\n<p>Below is an example of what I am trying to obtain.</p>\n\n<p><img src=\"http://i.stack.imgur.com/SaH8v.png\" alt=\"x\"></p>\n\n<p>Does a CSS or JavaScript solution exists for this or am I going to have to resort to images? I would prefer not to go the image route as this text will end up being generated dynamically.</p>\n\n<hr>\n\n<p><strong>UPDATE:</strong></p>\n\n<p>Since many have asked why I would ever want to style half of a character, this is why. My city had recently spent $250,000 to define a new \"brand\" for itself. This <strong><a href=\"http://halifaxdefined.ca/img/halifax_logo_new.png\">LOGO</a></strong> is what they came up with. Many people have complained about the simplicity and lack of creativity and continue to do so. My goal was to come up with this <strong><a href=\"http://simplyazuma.com/brandgenerator/\">WEBSITE</a></strong> as a joke. Type in 'Halifax' and you will see what I mean. :)</p>\n",
            "last_activity_date": 1423219410,
            "question_id": 23569441,
            "score": 1146,
            "tags": [
                "javascript",
                "html",
                "css"
            ],
            "title": "Is it possible to apply CSS to half of a character?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p><em>Personally,</em> I would not place too much emphasis on such \"folk wisdom.\"  What may have been true in the past might well not be true now.  I would assume that all of the operations relating to a web-page's interpretation and rendering are fully asynchronous (\"fetching\" something and \"acting upon it\" are two entirely different things that might be being handled by different threads, <em>etc.</em>), and in any case entirely beyond your control or your concern.</p>\n\n<p>I'd put CSS references in the \"head\" portion of the document, along with any references to external scripts.  (Some scripts may demand to be placed in the body, and if so, oblige them.)</p>\n\n<p>Beyond that ... if you observe that \"this seems to be faster/slower than that, on this/that browser,\" treat this observation as an interesting but irrelevant <em>curiosity</em> and don't let it influence your design decisions.  Too many things change too fast.  <em>(Anyone want to lay any bets on how many <strong>minutes</strong> it will be before the Firefox team comes out with yet another interim-release of their product?  Yup, me neither.)</em></p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<p>Were your tests performed on your personal computer, or on a web server? It is a blank page, or is it a complex online system with images, databases, etc.? Are your scripts performing a simple hover event action, or are they a core component to how your website renders and interacts with the user? There are several things to consider here, and the relevance of these recommendations almost always become rules when you venture into high-caliber web development.</p>\n\n<p><strong>The purpose of the \"put stylesheets at the top and scripts at the bottom\" rule is that, in general, it's the best way to achieve optimal <em>progressive rendering</em>,</strong> which is critical to the user experience.</p>\n\n<p>All else aside: assuming your test is valid, and you really are producing results contrary to the popular rules, it'd come as no surprise, really. Every website (and everything it takes to make the whole thing appear on a user's screen) is different and the Internet is constantly evolving. </p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>There are two main reasons to put CSS before JavaScript.</p>\n\n<ol>\n<li><p>Old browsers (Internet&nbsp;Explorer 6-7, Firefox 2, etc.) would block all subsequent downloads when they started downloading a script. So if you have <code>a.js</code> followed by <code>b.css</code> they get downloaded sequentially: first a then b. If you have <code>b.css</code> followed by <code>a.js</code> they get downloaded in parallel so the page loads more quickly.</p></li>\n<li><p>Nothing is rendered until all stylesheets are downloaded - this is true in all browsers. Scripts are different - they block rendering of all DOM elements that are <em>below the script tag</em> in the page. If you put your scripts in the HEAD then it means the entire page is blocked from rendering until all stylesheets and all scripts are downloaded. While it makes sense to block all rendering for stylesheets (so you get the correct styling the first time and avoid the flash of unstyled content FOUC), it doesn't make sense to block rendering of the entire page for scripts. Often scripts don't affect any DOM elements or just a portion of DOM elements. <strong>It's best to load scripts as low in the page as possible, or even better load them asynchronously.</strong></p></li>\n</ol>\n\n<p>It's fun to create examples with <a href=\"http://cuzillion.com/\">Cuzillion</a>. For example, <a href=\"http://stevesouders.com/cuzillion/?c0=hj1hfff2_0_f\">this page</a> has a script in the HEAD so the entire page is blank until it's done downloading. However, if we move the script to the end of the BODY block the page header renders since those DOM elements occur above the SCRIPT tag, as you can see on <a href=\"http://stevesouders.com/cuzillion/?c0=bj1hfff2_0_f\">this page</a>.</p>\n",
                    "is_accepted": false,
                    "score": 265
                },
                {
                    "body": "<p>This is a very interesting question.  I've always put my CSS <code>&lt;link href=\"...\"&gt;</code>s before my JS <code>&lt;script src=\"...\"&gt;</code>s because \"I read one time that it's better.\"  So, you're right; it's high time we do some actual research!</p>\n\n<p>I set up my own test harness in Node (code below).  Basically, I:</p>\n\n<ul>\n<li>Made sure there was no HTTP caching so the browser would have to do a full download each time a page is loaded.</li>\n<li>To simulate reality, I included jQuery and the <a href=\"http://html5boilerplate.com/\">H5BP</a> CSS (so there's a decent amount of script/CSS to parse)</li>\n<li>Set up two pages - one with CSS before script, one with CSS after script.</li>\n<li>Recorded how long it took for the external script in the <strong><code>&lt;head&gt;</code></strong> to execute</li>\n<li>Recorded how long it took for the inline script in the <strong><code>&lt;body&gt;</code></strong> to execute, which is analogous to <code>DOMReady</code>.</li>\n<li>Delayed sending CSS and/or script to the browser by 500ms.</li>\n<li>Ran the test 20 times in the 3 major browsers.</li>\n</ul>\n\n<h1>Results</h1>\n\n<p>First, with the CSS file delayed by 500ms:</p>\n\n<pre><code>     Browser: Chrome 18    | IE 9         | Firefox 9\n         CSS: first  last  | first  last  | first last\n=======================================================\nHeader Exec |              |              |\nAverage     | 583ms  36ms  | 559ms  42ms  | 565ms 49ms\nSt Dev      | 15ms   12ms  | 9ms    7ms   | 13ms  6ms\n------------|--------------|--------------|------------\nBody Exec   |              |              |\nAverage     | 584ms  521ms | 559ms  513ms | 565ms 519ms\nSt Dev      | 15ms   9ms   | 9ms    5ms   | 13ms  7ms\n</code></pre>\n\n<p>Next, I set jQuery to delay by 500ms instead of the CSS:</p>\n\n<pre><code>     Browser: Chrome 18    | IE 9         | Firefox 9\n         CSS: first  last  | first  last  | first last\n=======================================================\nHeader Exec |              |              |\nAverage     | 597ms  556ms | 562ms  559ms | 564ms 564ms\nSt Dev      | 14ms   12ms  | 11ms   7ms   | 8ms   8ms\n------------|--------------|--------------|------------\nBody Exec   |              |              |\nAverage     | 598ms  557ms | 563ms  560ms | 564ms 565ms\nSt Dev      | 14ms   12ms  | 10ms   7ms   | 8ms   8ms\n</code></pre>\n\n<p>Finally, I set <strong>both</strong> jQuery and the CSS to delay by 500ms:</p>\n\n<pre><code>     Browser: Chrome 18    | IE 9         | Firefox 9\n         CSS: first  last  | first  last  | first last\n=======================================================\nHeader Exec |              |              |\nAverage     | 620ms  560ms | 577ms  577ms | 571ms 567ms\nSt Dev      | 16ms   11ms  | 19ms   9ms   | 9ms   10ms\n------------|--------------|--------------|------------\nBody Exec   |              |              |\nAverage     | 623ms  561ms | 578ms  580ms | 571ms 568ms\nSt Dev      | 18ms   11ms  | 19ms   9ms   | 9ms   10ms\n</code></pre>\n\n<h1>Conclusions</h1>\n\n<p>First, it's important to note that I'm operating under the assumption that you have scripts located in the <code>&lt;head&gt;</code> of your document (as opposed to the end of the <code>&lt;body&gt;</code>).  There are various arguments regarding why you might link to your scripts in the <code>&lt;head&gt;</code> versus the end of the document, but that's outside the scope of this answer.  This is strictly about whether <code>&lt;script&gt;</code>s should go before <code>&lt;link&gt;</code>s in the <code>&lt;head&gt;</code>.</p>\n\n<p><strong>In modern DESKTOP browsers,</strong> it looks like linking to CSS first <strong>never</strong> provides a performance gain.  Putting CSS after script gets you a trivial amount of gain when both CSS and script are delayed, but gives you large gains when CSS is delayed.  (Shown by the <code>last</code> columns in the first set of results.)</p>\n\n<p>Given that linking to CSS last does not seem to hurt performance but <em>can</em> provide gains under certain circumstances, <strong>you should link to external stylesheets <em>after</em> you link to external scripts <em>only on desktop browsers</em></strong> if the performance of old browsers is not a concern.  <strong>Read on for the mobile situation.</strong></p>\n\n<h1>Why?</h1>\n\n<p>Historically, when a browser encountered a <code>&lt;script&gt;</code> tag pointing to an external resource, the browser would <strong>stop</strong> parsing the HTML, retrieve the script, execute it, then continue parsing the HTML.  In contrast, if the browser encountered a <code>&lt;link&gt;</code> for an external stylesheet, it would <em>continue</em> parsing the HTML while it fetched the CSS file (in parallel).</p>\n\n<p>Hence, the widely-repeated advice to put stylesheets first &ndash; they would download first, and the first script to download could be loaded in parallel.</p>\n\n<p>However, modern browsers (including all of the browsers I tested with above) have implemented <a href=\"https://www.google.com/search?q=speculative+parsing\"><em>speculative parsing</em></a>, where the browser \"looks ahead\" in the HTML and begins downloading resources <em>before</em> scripts download and execute.</p>\n\n<p>In old browsers without speculative parsing, putting scripts first will affect performance since they will not download in parallel.</p>\n\n<h2>Browser Support</h2>\n\n<p>Speculative parsing was first implemented in: (along with the percentage of worldwide desktop browser users using this version or greater as of Jan 2012)</p>\n\n<ul>\n<li>Chrome 1 (WebKit 525) (100%)</li>\n<li>IE 8 (75%)</li>\n<li>Firefox 3.5 (96%)</li>\n<li>Safari 4 (99%)</li>\n<li>Opera 11.60 (85%)</li>\n</ul>\n\n<p>In total, roughly 85% of desktop browsers in use today support speculative loading.  Putting scripts before CSS will have a performance penalty on 15% of users <em>globally</em>; YMMV based on your site's specific audience.  (And remember that number is shrinking.)</p>\n\n<p>On mobile browsers, it's a little harder to get definitive numbers simply due to how heterogeneous the mobile browser and OS landscape is.  Since speculative rendering was implemented in WebKit 525 (released Mar 2008), and just about every worthwhile mobile browser is based on WebKit, we can conclude that \"most\" mobile browsers <em>should</em> support it.  According to <a href=\"http://www.quirksmode.org/webkit.html\">quirksmode</a>, iOS 2.2/Android 1.0 use WebKit 525.  I have no idea what Windows Phone looks like.</p>\n\n<p><strong>However,</strong> I ran the test on my Android 4 device, and while I saw numbers similar to the desktop results, I hooked it up to the fantastic new <a href=\"http://code.google.com/chrome/mobile/docs/debugging.html\">remote debugger</a> in Chrome for Android, and Network tab showed that the browser was actually waiting to download the CSS until the JavaScripts completely loaded &ndash; in other words, <strong>even the newest version of WebKit for Android does not appear to support speculative parsing.</strong>  I suspect it might be turned off due to the CPU, memory, and/or network constraints inherent to mobile devices.</p>\n\n<h1>Code</h1>\n\n<p>Forgive the sloppiness &ndash; this was Q&amp;D.</p>\n\n<p>app.js</p>\n\n<pre><code>var express = require('express')\n, app = express.createServer()\n, fs = require('fs');\n\napp.listen(90);\n\nvar file={};\nfs.readdirSync('.').forEach(function(f) {\n    console.log(f)\n    file[f] = fs.readFileSync(f);\n    if (f != 'jquery.js' &amp;&amp; f != 'style.css') app.get('/' + f, function(req,res) {\n        res.contentType(f);\n        res.send(file[f]);\n    });\n});\n\n\napp.get('/jquery.js', function(req,res) {\n    setTimeout(function() {\n        res.contentType('text/javascript');\n        res.send(file['jquery.js']);\n    }, 500);\n});\n\napp.get('/style.css', function(req,res) {\n    setTimeout(function() {\n        res.contentType('text/css');\n        res.send(file['style.css']);\n    }, 500);\n});\n\n\nvar headresults={\n    css: [],\n    js: []\n}, bodyresults={\n    css: [],\n    js: []\n}\napp.post('/result/:type/:time/:exec', function(req,res) {\n    headresults[req.params.type].push(parseInt(req.params.time, 10));\n    bodyresults[req.params.type].push(parseInt(req.params.exec, 10));\n    res.end();\n});\n\napp.get('/result/:type', function(req,res) {\n    var o = '';\n    headresults[req.params.type].forEach(function(i) {\n        o+='\\n' + i;\n    });\n    o+='\\n';\n    bodyresults[req.params.type].forEach(function(i) {\n        o+='\\n' + i;\n    });\n    res.send(o);\n});\n</code></pre>\n\n<p>css.html</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;CSS first&lt;/title&gt;\n        &lt;script&gt;var start = Date.now();&lt;/script&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n        &lt;script src=\"jquery.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"test.js\"&gt;&lt;/script&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;script&gt;document.write(jsload - start);bodyexec=Date.now()&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>js.html</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n    &lt;head&gt;\n        &lt;title&gt;CSS first&lt;/title&gt;\n        &lt;script&gt;var start = Date.now();&lt;/script&gt;\n        &lt;script src=\"jquery.js\"&gt;&lt;/script&gt;\n        &lt;script src=\"test.js\"&gt;&lt;/script&gt;\n        &lt;link rel=\"stylesheet\" href=\"style.css\"&gt;\n    &lt;/head&gt;\n    &lt;body&gt;\n        &lt;script&gt;document.write(jsload - start);bodyexec=Date.now()&lt;/script&gt;\n    &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>test.js</p>\n\n<pre><code>var jsload = Date.now();\n\n\n$(function() {\n    $.post('/result' + location.pathname.replace('.html','') + '/' + (jsload - start) + '/' + (bodyexec - start));\n});\n</code></pre>\n\n<p>jquery.js was <a href=\"http://code.jquery.com/jquery-1.7.1.min.js\">jquery-1.7.1.min.js</a></p>\n",
                    "is_accepted": true,
                    "score": 504
                },
                {
                    "body": "<p>I would not emphasize too much on the results that you have got, I believe that it is subjective, but I have a reason to explain you that it is better to put in CSS before js.</p>\n\n<p>During the loading of your website, there are two scenarios that you would see:</p>\n\n<p><strong>CASE 1:    white screen > unstyled website > styled website > interaction > styled and interactive website<br><br>\nCASE 2:    white screen > unstyled website > interaction > styled website > styled and interactive website</strong>\n<br><br>\nI honestly can't imagine anyone choosing Case 2. This would mean that visitors using slow internet connections will be faced with an unstyled website, that allows them to interact with it using Javascript (since that is already loaded). Furthermore, the amount of time spend looking at an unstyled website would be maximized this way. Why would anyone want that?</p>\n\n<p>It also works better as <a href=\"http://api.jquery.com/ready/\">jQuery states</a> </p>\n\n<blockquote>\n  <p>\"When using scripts that rely on the value of CSS style properties,\n  it's important to reference external stylesheets or embed style\n  elements before referencing the scripts\".</p>\n</blockquote>\n\n<p>When the files are loaded in the wrong order (first JS, then CSS), any Javascript code relying on properties set in CSS files (for example the width or height of a div) won't be loaded correctly. It seems that with the wrong loading order, the correct properties are 'sometimes' known to Javascript (perhaps this is caused by a race condition?). This effect seems bigger or smaller depending on the browser used.</p>\n",
                    "is_accepted": false,
                    "score": 30
                },
                {
                    "body": "<p>I include CSS files before Javascript for a different reason.</p>\n\n<p>If my Javascript needs to do dynamic sizing of some page element (for those corner cases where CSS is really a main in the back) then loading the CSS after the JS is russing can lead to race conditions, where the element is resized before CSS styles are applied and thus looks weird when the styles finally kick in. If I load the CSS beforehand I can guarantee that things run in the intended order and that the final layout is what I want it to be.</p>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>We have to keep in mind that new browsers have worked on their Javascript engines, their parsers and so on, optimizing common code and markup problems in a way that problems experienced in ancient browsers such as &lt;=IE8 are no longer relevant, not only with regards to markup but also to use of JavaScript variables, element selectors etc. \nI can see in the not so distant future a situation where technology has reached a point where performance is not really an issue anymore.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I'm not exactly sure how your testing 'render' time as your using java script. However consider this</p>\n\n<p>One page on your site is 50k which is not unreasonable. The user is on the east coast while your server is on the west. MTU is definitely not 10k so there will be a few trips back and forth. It may take 1/2 a second to receive your page and stylesheets. Typically (for me) javascript (via jquery plugin and such) are much more than CSS. Theres also what happens when your internet connection chokes up midway on the page but lets ignore that (it happens to me occasionally and i believe the css renders but i am not 100% sure).</p>\n\n<p>Since css is in head there may be additional connections to get it which means it potentially can finish before the page does. Anyways during the type the remainder of the page takes and the javascript files (which is many more bytes) the page is unstyled which makes the site/connection appear slow.</p>\n\n<p>EVEN IF the JS interpreter refuses to start until the CSS is done the time taken to download the javascript code especially when far from the server is cutting into css time which will make the site look not pretty.</p>\n\n<p>Its a small optimization but thats the reason for it.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Steve Souders has already given a definitive answer but...</p>\n\n<p>I wonder whether there's an issue with both Sam's original test and Josh's repeat of it.</p>\n\n<p>Both tests appear to have been performed on low latency connections where setting up the TCP connection will have a trivial cost.</p>\n\n<p>How this affects the result of the test I'm not sure and I'd want to look at the waterfalls for the tests over a 'normal' latency connection but...</p>\n\n<p>The first file downloaded <em>should</em> get the connection used for the html page, and the second file downloaded will get the new connection. (Flushing the  early alters that dynamic, but it's not being done here)</p>\n\n<p>In newer browsers the second TCP connection is opened speculatively so the connection overhead is reduced / goes away, in older browsers this isn't true and the second connection will have the overhead of being opened.</p>\n\n<p>Quite how/if this affects the outcome of the tests I'm not sure.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>It is suggested to include CSS file before JavaScript for one (or perhaps another) good reason:</p>\n\n<p>JavaScript blocks the browser from doing just about anything until it is downloaded, parsed and executed. Why? Because the JavaScript file might contain instructions such as <code>document.write(\"&lt;!--\")</code> which, when executed, change the markup of the page.</p>\n\n<p>If you put the CSS files before JavaScript files in your HTML source, things get better. Browser can load the two files (CSS and JavaScript) in parallel. Of course it would block while it attempts to download, parse and execute the JavaScript file but this period will then  be utilized to download other files in parallel.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Is the recommendation to include CSS before JavaScript invalid?</p>\n\n<p>Not if you treat it as simply a recommendation. But if your treat it as a hard and fast rule?, yes, it is invalid.</p>\n\n<p>From <a href=\"https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/Reference/Events/DOMContentLoaded</a></p>\n\n<blockquote>\n  <p>Stylesheet loads block script execution, so if you have a <code>&lt;script&gt;</code>\n  after a <code>&lt;link rel=\"stylesheet\" ...&gt;</code> the page will not finish parsing\n  - and DOMContentLoaded will not fire - until the stylesheet is loaded.</p>\n</blockquote>\n\n<p>It appears that you need to know what each script relies on and make sure that execution of the script is delayed until after the right completion event. If the script relies only on the DOM, it can resume in ondomready/domcontentloaded, if it relies on images to be loaded or stylesheets to be applied, then if I read the above reference correctly, that code must be deferred until the onload event.</p>\n\n<p>I don't think that one sock size fits all, even though that is the way they are sold and I know that one shoe size does not fit all. I don't think that there is a definitive answer to which to load first, styles or script. It is more a case by case decision of what must be loaded in what order and what can be deferred until later as not being on the \"critical path\".</p>\n\n<p>To speak to the observer that commented that it is better to delay the users ability to interact until the sheet is pretty. There are many of you out there and you annoy your counterparts that feel the opposite. They came to a site to accomplish a purpose and delays to their ability to interact with a site while waiting for things that don't matter to finish loading are very frustrating.  I am not saying that you are wrong, only that you should be aware that there is another faction that exists that does not share your priority.</p>\n\n<p>This question particularly applies to all of the ads being placed on web sites. I would love it if site authors rendered just placeholder divs for the ad content and made sure that their site was loaded and interactive before injecting the ads in an onload event.  Even then I would like to see the ads loaded serially instead of all at once because they impact my ability to even scroll the site content while the bloated ads are loading. But that is just one persons point of view.</p>\n\n<ul>\n<li>Know your users and what they value.</li>\n<li>Know your users and what browsing environment they use.</li>\n<li>Know what each file does, and what its pre-requisites are. Making everything work will take precedence over both speed and pretty.</li>\n<li>Use tools that show you the network time line when developing.</li>\n<li>Test in each of the environments that your users use. It may be needed to dynamically (server side, when creating the page) alter the order of loading based on the users environment.</li>\n<li>When in doubt, alter the order and measure again.</li>\n<li>It is possible that intermixing styles and scripts in the load order will be optimal; not all of one then all of the other.</li>\n<li>Experiment not just what order to load the files but where. Head? In Body? After Body? DOM Ready/Loaded? Loaded?</li>\n<li>Consider async and defer options when appropriate to reduce the net delay the user will experience before being able to interact with the page. Test to determine if they help or hurt.</li>\n<li>There will always be trade offs to consider when evaluating the optimal load order. Pretty vs. Responsive being just one.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I think this wont be true for all the cases. Because css will download parallel but js cant. Consider for the same case,</p>\n\n<p>Instead of having single css, take 2 or 3 css files and try it out these ways,</p>\n\n<p>1) css..css..js\n2) css..js..css\n3) js..css..css</p>\n\n<p>I'm sure css..css..js will give better result than all others. </p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>In countless places online I have seen the recommendation to include CSS prior to JavaScript. The reasoning is generally, <a href=\"http://stackoverflow.com/questions/6005827/what-can-i-do-to-decrease-load-times-of-html-pages/6005832#6005832\">of this form</a>:</p>\n\n<blockquote>\n  <p>When it comes to ordering your CSS and JavaScript, you want your CSS\n  to come first. The reason is that the rendering thread has all the\n  style information it needs to render the page. If the JavaScript\n  includes come first, the JavaScript engine has to parse it all before\n  continuing on to the next set of resources. This means the rendering\n  thread can't completely show the page, since it doesn't have all the\n  styles it needs.</p>\n</blockquote>\n\n<p>My actual testing reveals something quite different: </p>\n\n<h3>My test harness</h3>\n\n<p>I use the following Ruby script to generate specific delays for various resources: </p>\n\n<pre><code>require 'rubygems'\nrequire 'eventmachine'\nrequire 'evma_httpserver'\nrequire 'date'\n\nclass Handler  &lt; EventMachine::Connection\n  include EventMachine::HttpServer\n\n  def process_http_request\n    resp = EventMachine::DelegatedHttpResponse.new( self )\n\n    return unless @http_query_string\n\n    path = @http_path_info\n    array = @http_query_string.split(\"&amp;\").map{|s| s.split(\"=\")}.flatten\n    parsed = Hash[*array]\n\n    delay = parsed[\"delay\"].to_i / 1000.0\n    jsdelay = parsed[\"jsdelay\"].to_i\n\n    delay = 5 if (delay &gt; 5)\n    jsdelay = 5000 if (jsdelay &gt; 5000)\n\n    delay = 0 if (delay &lt; 0) \n    jsdelay = 0 if (jsdelay &lt; 0)\n\n    # Block which fulfills the request\n    operation = proc do\n      sleep delay \n\n      if path.match(/.js$/)\n        resp.status = 200\n        resp.headers[\"Content-Type\"] = \"text/javascript\"\n        resp.content = \"(function(){\n            var start = new Date();\n            while(new Date() - start &lt; #{jsdelay}){}\n          })();\"\n      end\n      if path.match(/.css$/)\n        resp.status = 200\n        resp.headers[\"Content-Type\"] = \"text/css\"\n        resp.content = \"body {font-size: 50px;}\"\n      end\n    end\n\n    # Callback block to execute once the request is fulfilled\n    callback = proc do |res|\n        resp.send_response\n    end\n\n    # Let the thread pool (20 Ruby threads) handle request\n    EM.defer(operation, callback)\n  end\nend\n\nEventMachine::run {\n  EventMachine::start_server(\"0.0.0.0\", 8081, Handler)\n  puts \"Listening...\"\n}\n</code></pre>\n\n<p>The above mini server allows me to set arbitrary delays for JavaScript files (both server and client) and arbitrary CSS delays. For example, <code>http://10.0.0.50:8081/test.css?delay=500</code> gives me a 500&nbsp;ms delay transferring the CSS. </p>\n\n<p>I use the following page to test.</p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n      &lt;title&gt;test&lt;/title&gt;\n      &lt;script type='text/javascript'&gt;\n          var startTime = new Date();\n      &lt;/script&gt;\n      &lt;link href=\"http://10.0.0.50:8081/test.css?delay=500\" type=\"text/css\" rel=\"stylesheet\"&gt;\n      &lt;script type=\"text/javascript\" src=\"http://10.0.0.50:8081/test2.js?delay=400&amp;amp;jsdelay=1000\"&gt;&lt;/script&gt; \n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;p&gt;\n      Elapsed time is: \n      &lt;script type='text/javascript'&gt;\n        document.write(new Date() - startTime);\n      &lt;/script&gt;\n    &lt;/p&gt;    \n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>When I include the CSS first, the page takes 1.5&nbsp;seconds to render: </p>\n\n<p><img src=\"http://i.stack.imgur.com/ZDgrs.png\" alt=\"CSS first\"></p>\n\n<p>When I include the JavaScript first, the page takes 1.4&nbsp;seconds to render: </p>\n\n<p><img src=\"http://i.stack.imgur.com/5o5SG.png\" alt=\"JavaScript first\"></p>\n\n<p>I get similar results in Chrome, Firefox and Internet&nbsp;Explorer. In Opera however, the ordering simply does not matter.</p>\n\n<p>What appears to be happening is that the JavaScript interpreter refuses to start until all the CSS is downloaded. So, it seems that having JavaScript includes first is more efficient as the JavaScript thread gets more run time. </p>\n\n<p>Am I missing something, is the recommendation to place CSS includes prior to JavaScript includes not correct? </p>\n\n<p><sub>It is clear that we could add async or use setTimeout to free up the render thread or put the JavaScript code in the footer, or use a JavaScript loader. The point here is about ordering of essential JavaScript bits and CSS bits in the head.</sub></p>\n",
            "last_activity_date": 1405289425,
            "question_id": 9271276,
            "score": 592,
            "tags": [
                "javascript",
                "css",
                "performance"
            ],
            "title": "Is the recommendation to include CSS before JavaScript invalid?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>I'm going to expand your question a bit and also include the compile function.</p>\n\n<ul>\n<li><p><em>compile function</em> - use for <strong>template</strong> DOM manipulation (i.e., manipulation of tElement = template element), hence manipulations that apply to all DOM clones of the template associated with the directive.  (If you also need a link function (or pre and post link functions), and you defined a compile function, the compile function must return the link function(s) because the <code>'link'</code> attribute is ignored if the <code>'compile'</code> attribute is defined.)</p></li>\n<li><p><em>link function</em> - normally use for registering DOM listeners (i.e., <code>$watch</code> expressions on the scope) as well as updating the DOM (i.e., manipulation of iElement = individual instance element). It is executed after the template has been cloned -- e.g., inside an <code>&lt;li ng-repeat...&gt;</code>, the link function is executed after the <code>&lt;li&gt;</code> template (tElement) has been cloned (into an iElement) for that particular <code>&lt;li&gt;</code> element.  A <code>$watch</code> allows a directive to be notified of scope property changes (a scope is associated with each instance), which allows the directive to render an updated instance value to the DOM.</p></li>\n<li><p><em>controller function</em> - must be used when another directive needs to interact with this directive.  E.g., on the AngularJS home page, the pane directive needs to add itself to the scope maintained by the tabs directive, hence the tabs directive needs to define a controller method (think API) that the pane directive can access/call. <br> <br>For a more in-depth explanation of the tabs and pane directives, and why the tabs directive creates a function on its controller using <code>this</code> (rather than on <code>$scope</code>), please see <a href=\"http://stackoverflow.com/questions/11605917/this-vs-scope-in-angularjs-controllers/14168699#14168699\">this vs $scope in AngularJS controllers</a>.</p></li>\n</ul>\n\n<p>In general, you can put methods, <code>$watches</code>, etc. into either the directive's controller or link function.  The controller will run first, which sometimes matters (see this <a href=\"http://jsfiddle.net/mrajcok/xfh3F/\">fiddle</a> which logs when the ctrl and link functions run with two nested directives).  As Josh mentioned in a <a href=\"http://stackoverflow.com/questions/14620521/how-to-write-a-directive-in-angularjs/14621193#comment20441740_14621193\">comment</a>, you may want to put scope-manipulation functions inside a controller just for consistency with the rest of the framework.</p>\n",
                    "is_accepted": false,
                    "score": 351
                },
                {
                    "body": "<p>As complement to Mark's answer, the compile function does not have access to scope, but the link function does.</p>\n\n<p>I really recommend this video; <a href=\"http://www.youtube.com/watch?v=WqmeI5fZcho\">Writing Directives</a> by Misko Hevery (the father of AngularJS), where he describes differences and some techniques. (Difference between compile function and link function at <a href=\"http://www.youtube.com/watch?feature=player_detailpage&amp;v=WqmeI5fZcho#t=880\">14:41 mark in the video</a>).</p>\n",
                    "is_accepted": false,
                    "score": 27
                },
                {
                    "body": "<ol>\n<li>running code before Compilation : use <strong>controller</strong></li>\n<li>running code after Compilation  : use <strong>Link</strong></li>\n</ol>\n\n<p>Angular convention : write business logic in controller and DOM manipulation in link.</p>\n\n<p>Apart from this you can call one controller function from link function of another directive.For example you have 3 custom directives </p>\n\n<pre><code>&lt;animal&gt;\n&lt;panther&gt;\n&lt;leopard&gt;&lt;/leopard&gt;\n&lt;/panther&gt; \n&lt;/animal&gt;\n</code></pre>\n\n<p>and you want to access animal from inside of \"leopard\" directive.</p>\n\n<p><a href=\"http://egghead.io/lessons/angularjs-directive-communication\" rel=\"nofollow\">http://egghead.io/lessons/angularjs-directive-communication</a> will be helpful to know about inter-directive communication</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>An addition about Controller:</p>\n\n<p>The signature of contoller is (<a href=\"https://docs.angularjs.org/api/ng/service/$compile\" rel=\"nofollow\">from the documentation</a>) : </p>\n\n<pre><code> controller: function($scope, $element, $attrs, $transclude, otherInjectables) { \n    ... \n },\n</code></pre>\n\n<p>The last one is, i think, important. Since you can inject varibales like $location, $anchorScroll, etc. to the directive by using controller. As i know, they are not available with link function.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Some places seem to use the controller function for directive logic and other use link. The tabs example on the angular homepage uses controller for one and link for other directive. What is the difference between two? </p>\n",
            "last_activity_date": 1410780469,
            "question_id": 12546945,
            "score": 182,
            "tags": [
                "javascript",
                "angularjs",
                "web-applications",
                "javascript-framework"
            ],
            "title": "Difference between the &#39;controller&#39;, &#39;link&#39; and &#39;compile&#39; functions when defining a directive"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>I only use one js specific vim plugin - jslint.vim - <a href=\"https://github.com/hallettj/jslint.vim\">https://github.com/hallettj/jslint.vim</a> which validates your code with jslints rules and gives you syntax errors as well.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"http://www.vim.org/scripts/script.php?script_id=2540\">snipMate</a> emulates TextMate's <kbd>\u21e5</kbd> insertion system and comes with a bunch of useful JS snippets (among others) by default. It's extremely easy to add your own.</p>\n\n<p><a href=\"http://www.vim.org/scripts/script.php?script_id=2578\">javaScriptLint</a> allows you to validate your code against <a href=\"http://www.javascriptlint.com\">jsl.</a></p>\n\n<p>Also you can find a variety of <a href=\"http://www.vim.org/scripts/script_search_results.php?keywords=javascript&amp;script_type=syntax&amp;order_by=rating&amp;direction=descending&amp;search=search\">JavaScript syntax files</a> on vim.org. Try them and see which one works best for you and your coding style.</p>\n\n<p>The native omnicomplete (<kbd>ctrl</kbd><kbd>x</kbd>-<kbd>ctrl</kbd><kbd>o</kbd>) works very well for me. You can make it more dynamic with <a href=\"http://www.vim.org/scripts/script.php?script_id=1879\">autoComplPop</a>, but it can be annoying sometimes.</p>\n\n<p><strong>edit, in response to tarek11011's comment:</strong></p>\n\n<p>acp doesn't work for JavaScript by default, you have to tweak it a little. Here is how I did it (dirty hack, I'm still a Vim noob):</p>\n\n<p>In vim-autocomplpop/plugin/acp.vim I've added <code>php</code> and <code>javascript</code> (and <code>actionscript</code>) to <code>behavs</code> so that it looks like that :</p>\n\n<pre><code>let behavs = {\n    \\   '*'            : [],\n    \\   'ruby'         : [],\n    \\   'python'       : [],\n    \\   'perl'         : [],\n    \\   'xml'          : [],\n    \\   'html'         : [],\n    \\   'xhtml'        : [],\n    \\   'css'          : [],\n    \\   'javascript'   : [],\n    \\   'actionscript' : [],\n    \\   'php'          : [],\n    \\ }\n</code></pre>\n\n<p>A little below, there is a series of code blocks that look like that :</p>\n\n<pre><code>\"---------------------------------------------------------------------------\ncall add(behavs.ruby, {\n    \\   'command' : \"\\&lt;C-x&gt;\\&lt;C-o&gt;\",\n    \\   'meets'   : 'acp#meetsForRubyOmni',\n    \\   'repeat'  : 0,\n    \\ })\n</code></pre>\n\n<p>I've duplicated this one and edited it a little bit to look like that:</p>\n\n<pre><code>\"---------------------------------------------------------------------------\ncall add(behavs.javascript, {\n    \\   'command' : \"\\&lt;C-x&gt;\\&lt;C-o&gt;\",\n    \\   'meets'   : 'acp#meetsForRubyOmni',\n    \\   'repeat'  : 0,\n    \\ })\n</code></pre>\n\n<p>and did the same for actionscript and php.</p>\n\n<p>If you want to edit JS/CSS within a HTML document you can do :set ft=html.css.javascript in Vim's command line to make <kbd>ctrl</kbd><kbd>x</kbd>-<kbd>ctrl</kbd><kbd>o</kbd> work as expected on method/properties names in JS blocks and properties/values in CSS blocks. However this approach has its drawbacks, too (weird indentation\u2026).</p>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<h2>Syntax Checking / Linting</h2>\n\n<p>There is a very easy way to integrate JSLint or the community-driven <a href=\"http://jshint.com\">jshint.com</a> (which is much better IMO) with Vim using the Syntastic Vim plugin. See <a href=\"http://stackoverflow.com/questions/473478/vim-jslint/5893447#5893447\">my other post</a> for more info.</p>\n\n<h2>Source-Code browsing / Tag-list</h2>\n\n<p>There's also a very neat way to add tag-listing using Mozilla's <em>DoctorJS</em> (formerly <em>jsctags</em>), which is also used in <a href=\"http://cloud9ide.com/\">Cloud9 IDE</a>'s <a href=\"http://ace.ajax.org/\">Ace online editor</a>.</p>\n\n<ol>\n<li>Install the following packages using your favorite package-manager (Ubuntu's <code>apt-get</code>, Mac's <a href=\"http://mxcl.github.com/homebrew/\">home <code>brew</code></a>, etc.):\n<ol>\n<li><code>exuberant-ctags</code>\n<ul>\n<li><strong>NOTE:</strong> After installing make sure running <code>ctags</code> actually runs <code>exuberant-ctags</code> and not the OS's preinstalled <code>ctags</code>. You can find out by executing <code>ctags --version</code>.</li>\n</ul></li>\n<li><code>node</code> (Node.js)</li>\n</ol></li>\n<li>Clone <code>DoctorJS</code> from github: <code>git clone https://github.com/mozilla/doctorjs.git</code></li>\n<li>Go inside <code>DoctorJS</code> dir and <code>make install</code> (You'll also need the <code>make</code> app installed, but this is very basic).\n<ul>\n<li>There're some bugs with installing the plugin, <code>make install</code> doesn't do the trick for the moment. For now I just add the repo's <code>bin/</code> dir to my $PATH instead. See <a href=\"https://github.com/mozilla/doctorjs\">DoctorJS's GitHub and issues pages</a> for more info.</li>\n</ul></li>\n<li>Install the <a href=\"http://www.vim.org/scripts/script.php?script_id=3465\">TagBar Vim plugin</a> (<strong>NOTE:</strong> It's TagBar, not the old infamous TagList!).</li>\n<li>PROFIT. :)</li>\n</ol>\n\n<h3>New Project - Tern.js</h3>\n\n<p><a href=\"https://groups.google.com/forum/?fromgroups=#!topic/js-tools/tZ-1jDYxGZk\">DoctorJS is currently dead</a>. There's a new promising project called <a href=\"http://ternjs.net/\">tern.js</a>. It's currently in early beta, and should eventually replace it.</p>\n\n<p>There is a project <a href=\"https://github.com/ramitos/jsctags\">ramitos/jsctags</a> which uses tern as its engine. Just <code>npm install -g</code> it, and tagbar will automatically use it for javascript files.  </p>\n",
                    "is_accepted": true,
                    "score": 98
                },
                {
                    "body": "<p>To fix indentation and autoformatting (Ctrl =): <a href=\"http://www.vim.org/scripts/script.php?script_id=3081\" rel=\"nofollow\">JavaScript Indent</a></p>\n\n<p>To set indentation width, add <code>javascript.vim</code> file into ~/.vim/ftplugin dir with following contents (for two space indentation):</p>\n\n<pre><code> setl sw=2 sts=2 et\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>This plugin is also useful: <a href=\"https://github.com/maksimr/vim-jsbeautify\">https://github.com/maksimr/vim-jsbeautify</a>.\nIt provides full autoformatting for javascript.\nOne keystroke, and your code looks beautiful. It can come in handy when pasting code snippets as well.\nIt makes use of the popular js-beautifier, which can also be found as an online application. The latter can be found right here: <a href=\"http://jsbeautifier.org/\">http://jsbeautifier.org/</a>.</p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>I'm new to JS &amp; Vim. Which plugins would help me to write Javascript code?</p>\n",
            "last_activity_date": 1389446599,
            "question_id": 4777366,
            "score": 102,
            "tags": [
                "javascript",
                "vim"
            ],
            "title": "Recommended Vim plugins for JavaScript coding?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>I'm a bit on both sides, actually :</p>\n\n<ul>\n<li>When what I need on the javascript side is <strong>data</strong>, I use JSON</li>\n<li>When what I need on the javascript side is <strong>presentation</strong> on which I will not do any calculation, I generally use HTML</li>\n</ul>\n\n<p>The main advantage of using HTML is when you want to replace a full portion of your page with what comes back from the Ajax request :</p>\n\n<ul>\n<li>Re-building a portion of page in JS is (quite) hard</li>\n<li>You probably already have some templating engine on the server side, that was used to generate the page in the first place... Why not reuse it ?</li>\n</ul>\n\n<p>I generally don't really take into consideration the \"performance\" side of things, at least on the server :</p>\n\n<ul>\n<li>On the server, generating a portion of HTML or some JSON won't probably make that much of a difference</li>\n<li>About the size of the stuff that goes through the network : well, you probably don't use hundreds of KB of data/html... Using gzip on whatever you are transferring is what's going to make the biggest difference <em>(not choosing between HTML and JSON)</em></li>\n<li>One thing that could be taken into consideration, though, is what resources you'll need on the client to recreate the HTML <em>(or the DOM structure)</em> from the JSON data... compare that to pushing a portion of HTML into the page ;-)</li>\n</ul>\n\n<p>Finally, one thing that definitly matters :</p>\n\n<ul>\n<li>How long will it take you to develop a new system that will send data as JSON + code the JS required to inject it as HTML into the page ?</li>\n<li>How long will it take to just return HTML ? And how long if you can re-use some of your already existing server-side code ?</li>\n</ul>\n\n<p><br>\nAnd to answer another answer : if you need to update more than one portion of the page, there is still the solution/hack of sending all those parts inside one big string that groups several HTML portions, and extract the relevant parts in JS.</p>\n\n<p>For instance, you could return some string that looks like this :</p>\n\n<pre><code>&lt;!-- MARKER_BEGIN_PART1 --&gt;\nhere goes the html\ncode for part 1\n&lt;!-- MARKER_END_PART1 --&gt;\n&lt;!-- MARKER_BEGIN_PART2 --&gt;\nhere goes the html\ncode for part 2\n&lt;!-- MARKER_END_PART2 --&gt;\n&lt;!-- MARKER_BEGIN_PART3 --&gt;\nhere goes the json data\nthat will be used to build part 3\nfrom the JS code\n&lt;!-- MARKER_END_PART3 --&gt;\n</code></pre>\n\n<p>That doesn't look really good, but it's definitly useful <em>(I've used it quite a couple of times, mostly when the HTML data were too big to be encapsulated into JSON)</em> : you are sending HTML for the portions of the page that need presentation, and you are sending JSON for the situation you need data...</p>\n\n<p>... And to extract those, the JS substring method will do the trick, I suppose ;-)</p>\n",
                    "is_accepted": true,
                    "score": 143
                },
                {
                    "body": "<p>If the response needs no further client-side processing, HTML is OK in my opinion. Sending JSON will only force you to do that client-side processing.</p>\n\n<p>On the other hand, I use JSON when I don't want to use all the response data at once. For example, I have a series of three chained selects, where the selected value of one determines which values are going to be used for populating the second, and so on.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Depending on your UI, you may need to update two (or more) different elements in your DOM. If your response is in HTML, are you going to parse that to figure out what goes where? Or you can just use a JSON hash.</p>\n\n<p>You can even combine it, return a JSON w/ html data :)</p>\n\n<pre><code>{ 'dom_ele_1' : '&lt;p&gt;My HTML part 1&lt;/p&gt;', 'dome_ele_2' : '&lt;div&gt;Your payment has been received&lt;/div&gt;' }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>IMV, it's all about separating the data from the presentation of the data, but I'm with Pascal, it doesn't necessarily follow that that separation can only be across the client/server boundary.  If you have that separation already (on the server) and just want to show something to the client, whether you send back JSON and post-process it on the client, or just send back HTML, depends entirely on your needs.  To say you're \"wrong\" to send back HTML in the general case is just far too blanket a statement IMV.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I mainly agree with the opinions stated here. I just wanted to summarize them as:</p>\n\n<ul>\n<li><p>It is bad practice to send HTML if you end up parsing it client-side to do some calculations over it.</p></li>\n<li><p>It is bad practice to send JSON if all you'll end up doing is to incorporate it into the page's DOM tree.</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 65
                },
                {
                    "body": "<p>Sending json is generally done when you have a javascript widget requesting information from the server, such as a list or a tree view or an autocomplete.  This is when I would send JSON as it is data that will be parsed and used raw.  However if your just gonna show HTML then its a lot less work to generate it server side and just show it on the browser.  Browsers are optimized for inserting HTML directly into the dom with innerHTML = \"\" so you can't go wrong with that.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>JSON is very versatil and lightweight format. I have discovered its beauty when I have started to use it as a client side template parser data. Let me explain, while before I was using smarty and views on server side (generating high server load), now I use some custom jquery functions and all the data is rendered on client side, using clients browser as template parser. it saves server resourses and on another hand browsers improve their JS engines every day. So the speed of client parsing is not an important issue right now, even more, JSON objects are ususally very small so they don't consume a lot of client side resourses. I prefer to have a slow website for some users with slow browser rather than slow site for everyone because of very loaded server.</p>\n\n<p>On another hand, sending pure data from server you abstract it from presentation so, if tomorrow you want to change it or integrate your data into another service you can do it much easier.</p>\n\n<p>Just my 2 cents.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I think it depends on the structure of the design, it's just more sexy to use JSON than HTML but the question is how would one handle it so it can be easily to maintain.</p>\n\n<p>For example, say I have the listing page that utilize the same html/style of the entire site, I would write the global function to format those portions of HTML and all I have to do is passing the JSON object into the function.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have something interesting I thought I might add. I developed an application that only ever loaded a full view one time. From that point forward it communicated back to the server with ajax only. It only ever needed to load one page (my reason for this is unimportant here). The interesting part comes in that I had a special need to return some data to be operated on in the javascript AND a partial view to be displayed. I could have split this up into two calls to two separate action methods but I decided to go with something a little more fun.</p>\n\n<p>Check it out:</p>\n\n<pre><code>public JsonResult MyJsonObject(string someData)\n{\n     return Json(new { SomeData = someData, PartialView = RenderPartialViewToString(\"JsonPartialView\", null) }, JsonRequestBehavior.AllowGet);\n}\n</code></pre>\n\n<p>What is RenderPartialViewToString() you might ask? It is this little nugget of coolness right here:</p>\n\n<pre><code>protected string RenderPartialViewToString(string viewName, object model)\n{\n     ViewData.Model = model;\n\n     using (StringWriter sw = new StringWriter())\n     {\n          ViewEngineResult viewResult = ViewEngines.Engines.FindPartialView(ControllerContext, viewName);\n          ViewContext viewContext = new ViewContext(ControllerContext, viewResult.View, ViewData, TempData, sw);\n          viewResult.View.Render(viewContext, sw);\n\n          return sw.GetStringBuilder().ToString();\n     }\n}\n</code></pre>\n\n<p>I haven't done any performance testing on this so I'm not sure if it incurs any more or less overhead than calling one action method for the JsonResult and one for the ParticalViewResult, but I still thought it was pretty cool. It just serializes a partial view into a string and sends it along with the Json as one of it's parameters. I then use JQuery to take that parameter and slap it into it's appropriate DOM node :)</p>\n\n<p>Let me know what you think of my hybrid!</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Well,</p>\n\n<p>I'm one of those rare persons that likes to separate things this way:\n- The server is responsible for delivering data (model);\n- The client is responsible for showing (view) and manipulating data (model);</p>\n\n<p>So, the server should focus on delivering the model (in this case JSON is better).\nThis way you get a flexible approach. If you want to change the view of you model, you keep the server sending the same data and just change the client, javascript components, that change that data into a view. Imagine, you have a server delivering data to mobile devices as well as desktop apps.</p>\n\n<p>Also, this approach increases productivity, since the server and client code can be built at the same time, never losing the focus which is what happens when you keep switching from js to  PHP / JAVA / etc.</p>\n\n<p>Generally, I think most people prefer to do as much as possible on the server side because they don't master js, so they try to avoid it as much as possible.</p>\n\n<p>Basically, I have the same opinion as those guys that are working on Angular. In my opinion that is the future of web apps.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>@Zoidberg</p>\n\n<blockquote>\n  <p>However if your just gonna show HTML then its a lot less work to generate it server side and just show it on the browser</p>\n</blockquote>\n\n<p>Don't we always want to show html? Even in the tree case you mention, what you want to do is show html... Your arguments denote the idea that sometimes you want to show HTML sometimes you don't...</p>\n\n<p>Sometimes you don't want to parse HTML (but still want to show it). But even in that case it is as easy to do it in js as it is in a server side language.</p>\n\n<p>In my point of view, the problem of building HTML on the server is that both the server and the client assume the responsibility of presenting data, thus breaking the single responsibility principle.</p>\n\n<p>The only HTML the server should (or could) be building is, in my opinion, the page structure, which has no relation with data and should be based on a server side template. That structure will act as container(s) for client-side html generated from a model data sent from the server (using a REST API for example).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>@Pascal MARTIN\nWell, if you just need HTML, why go to the server to get it? If it doesn't relate with business data, which is something the server knows well, why the traffic overhead to get an \"empty\" HTML? Why not just create it client side? Basically you'll have the user waiting for something that the server added absolute nothing. Makes no sense, in my opinion.</p>\n\n<p>On the other hand if you need data on the client you should get data (I'll agree with you). So, therefore, the server should always return data.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Html response is enough in most of the cases unless you have to perform some calculation at the client side.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you want a clean decoupled client, which in my opinion is best practice, then it makes sense to have 100% of the DOM created by javascript.  If you build an MVC based client that has all the know how to build the UI then your users download one javascript file one time and it's cached on the client.  All requests after that initial load are Ajax based and only return data.  This approach is the cleanest I have found and provides for a clean independent encapsulation of the presentation.</p>\n\n<p>The server side then just focuses on delivering data.</p>\n\n<p>So tomorrow when product asks you to change the design of a page completely all you change is the source JS that creates the DOM, but likely get to reuse your already existing event handlers and the server is oblivious because it 100% decoupled from presentation</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>JSON and HTML different and question is wrong, when your request just html page, it is just html.\nyou can parse JSON response and show in HTML5 page</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>It is quite easy to load HTML content from your custom URLs/Web services using JQuery or any other similar framework. I've used this approach many times and till now and found the performance satisfactory.</p>\n\n<p>But all the books, all the experts are trying to get me to use JSON instead of generated HTML. How's it much more superior than HTML? </p>\n\n<p><strong>Is it very much faster?<br />\nDoes it have a very much lesser load on the server?</strong></p>\n\n<p>On the other side I have some reasons for using generated HTML.</p>\n\n<ol>\n<li>It's simple markup, and often just as compact or actually more compact than JSON.</li>\n<li>It's less error prone cause all you're getting is markup, and no code.</li>\n<li>It will be faster to program in most cases cause you won't have to write code separately for the client end.</li>\n</ol>\n\n<p>Which side are you on and why?</p>\n",
            "last_activity_date": 1408468624,
            "question_id": 1284381,
            "score": 154,
            "tags": [
                "javascript",
                "jquery",
                "html",
                "ajax",
                "json"
            ],
            "title": "Why is it a bad practice to return generated HTML instead of JSON? Or is it?"
        },
        {
            "answer_count": 22,
            "answers": [
                {
                    "body": "<p>If you're looking for a minimalist approach to templates, you can check out <a href=\"http://code.google.com/p/json-template/\" rel=\"nofollow\">JSON Template</a>.</p>\n\n<p>A more full-featured alternative is <a href=\"http://embeddedjs.com/\" rel=\"nofollow\">EJS</a>.  It's a bit more similar to something you'd get from Django.</p>\n\n<p>Your mileage may vary for each of these - they're designed for a browser Javascript environment, and not Node.js.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>There are new templating engines all the time.</p>\n\n<p>underscore.js adds a lot of functional programming support to js, and has templating.</p>\n\n<p>And just today I heard about this: <a href=\"http://github.com/SamuraiJack/Shotenjin-Joosed\" rel=\"nofollow\">http://github.com/SamuraiJack/Shotenjin-Joosed</a></p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Did you try <a href=\"http://wiki.github.com/pure/pure\" rel=\"nofollow\">PURE</a> ?<br />If you give it a try, feel free to post any trouble you may face at the <a href=\"http://groups.google.com/group/Pure-Unobtrusive-Rendering-Engine\" rel=\"nofollow\">forum</a></p>\n\n<p>While it was primarly designed for the browser, it works well with Jaxer and Rhino.</p>\n\n<p>I don't know node.js yet but if you can cache some JS and functions in memory, the speed should be even more impressive.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You should be able to use mustache.js, if it doesn't work send me the issues and I'll get it fixed because I'm about to be using them in node.js anyway.</p>\n\n<p><a href=\"http://github.com/janl/mustache.js\">http://github.com/janl/mustache.js</a></p>\n\n<p>I know that it works without a DOM because a bunch of CouchDB standalone apps are using it in a Spidermonkey view server.</p>\n",
                    "is_accepted": false,
                    "score": 48
                },
                {
                    "body": "<p>There is a port of the Django templating engine to JavaScript. However, its not been updated for a long time but it may still have enough features.</p>\n\n<p><a href=\"http://code.google.com/p/jtl-javascript-template/\" rel=\"nofollow\">http://code.google.com/p/jtl-javascript-template/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You should take a look at <a href=\"http://github.com/cramforce/node-asyncEJS\">node-asyncEJS</a>, which is explicitly designed to take the asynchronous nature of node.js into account. It even allows async code blocks inside of the template.</p>\n\n<p>Here an example form the documentation:</p>\n\n<pre><code>&lt;html&gt;\n  &lt;head&gt;\n    &lt;% ctx.hello = \"World\";  %&gt;\n    &lt;title&gt;&lt;%= \"Hello \" + ctx.hello %&gt;&lt;/title&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n\n    &lt;h1&gt;&lt;%? setTimeout(function () { res.print(\"Async Header\"); res.finish(); }, 2000)  %&gt;&lt;/h1&gt;\n    &lt;p&gt;&lt;%? setTimeout(function () { res.print(\"Body\"); res.finish(); }, 1000)  %&gt;&lt;/p&gt;\n\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>I have done some work on a pretty complete port of the Django template language for Simon Willisons <a href=\"http://github.com/simonw/djangode/\">djangode project</a> (Utilities functions for node.js that borrow some useful concepts from Django).</p>\n\n<p>See the documentation <a href=\"http://github.com/simonw/djangode/blob/master/TEMPLATES.md\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Try <a href=\"http://www.yajet.net/\" rel=\"nofollow\">Yajet</a> too. ;-)  It's a new one that I just released yesterday, but I'm using it for a while now and it's stable and fast (templates are compiled to a native JS function).</p>\n\n<p>It has IMO the best syntax possible for a template engine, and a rich feature set despite its small code size (8.5K minified).  It has directives that allow you to introduce conditionals, iterate arrays/hashes, define reusable template components etc.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>If you like haml, but want something even better check out <a href=\"http://jade-lang.com\">http://jade-lang.com</a> for node, I wrote haml.js as well :)</p>\n",
                    "is_accepted": false,
                    "score": 37
                },
                {
                    "body": "<p>Google's Closure Templates is a natively-JavaScript templating system and a seemingly natural fit with NodeJS. <a href=\"http://www.dashdashverbose.com/2009/11/closure-templates-and-nodejs-server.html\" rel=\"nofollow\">Here are some instructions</a> for integrating them.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>haml is a good choice for node.js</p>\n\n<p><a href=\"http://github.com/creationix/haml-js\" rel=\"nofollow\">http://github.com/creationix/haml-js</a></p>\n\n<p><strong>haml-js</strong></p>\n\n<pre><code>!!! XML\n!!! strict\n%html{ xmlns: \"http://www.w3.org/1999/xhtml\" }\n  %head\n    %title Sample haml template\n  %body\n    .profile\n      .left.column\n        #date= print_date()\n        #address= current_user.address\n      .right.column\n        #email= current_user.email\n        #bio= current_user.bio\n</code></pre>\n\n<p><strong>html</strong></p>\n\n<pre><code>&lt;?xml version='1.0' encoding='utf-8' ?&gt;\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\"&gt;&lt;head&gt;&lt;title&gt;Sample haml template\n&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;div class=\"profile\"&gt;&lt;div class=\"left column\"&gt;&lt;div id=\"date\"&gt;January 1, 2009\n&lt;/div&gt;&lt;div id=\"address\"&gt;Richardson, TX\n&lt;/div&gt;&lt;/div&gt;&lt;div class=\"right column\"&gt;&lt;div id=\"email\"&gt;tim@creationix.com\n&lt;/div&gt;&lt;div id=\"bio\"&gt;Experienced software professional...\n&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Check out the Node js modules wiki page. They have listed all the <a href=\"https://github.com/joyent/node/wiki/modules#wiki-templating\">templating engines</a> supporting node.js.</p>\n",
                    "is_accepted": false,
                    "score": 145
                },
                {
                    "body": "<p>I've heard good things about {dust} <a href=\"http://akdubya.github.com/dustjs/#dust\" rel=\"nofollow\">http://akdubya.github.com/dustjs/#dust</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><strong>WARNING : JinJs is not maintained anymore. It is still working but not compatible with the lastest version of express.</strong></p>\n\n<p>You could try using <a href=\"http://bitbucket.org/ravelsoft/node-jinjs\" rel=\"nofollow\">jinjs</a>. It is a port of the Jinja, a very good Python templating system. You can install it with npm like this :</p>\n\n<pre><code>npm install jinjs\n</code></pre>\n\n<p>in template.tpl :</p>\n\n<pre><code>I say : \"{{ sentence }}\"\n</code></pre>\n\n<p>in your template.js :</p>\n\n<pre><code>jinjs = require('jinjs');\njinjs.registerExtension('.tpl');\ntpl = require('./template');\nstr = tpl.render ({sentence : 'Hello, World!'});\nconsole.log(str);\n</code></pre>\n\n<p>The output will be :</p>\n\n<pre><code>I say : \"Hello, World!\"\n</code></pre>\n\n<p>We are actively developing it, a good documentation should come pretty soon.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can use dojox.dtl of DojoToolkit.org. Note that dojo 1.7 can well run on NodeJS and perform as a server side library. If you're interested, I can give you a simple example.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>You can try:</p>\n\n<p><a href=\"https://github.com/LuvDaSun/jshtml\" rel=\"nofollow\">https://github.com/LuvDaSun/jshtml</a></p>\n\n<p>Here is an example:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;@title&lt;/title&gt;\n&lt;/head&gt;\n\n&lt;body&gt;\n\n&lt;ul class=\"Task\"&gt;\n@taskList.forEach(function(task, index) {\n    &lt;li class=\"@(index % 2 ? \"Odd\" : \"Even\")\"&gt;\n    @tag('a', {href: '/task/' + task.id}, task.name)\n    &lt;/li&gt;\n    });\n&lt;/ul&gt;\n\n&lt;ul class=\"Task\"&gt;\n@for(var taskIndex = 0, taskCount = taskList.length; taskIndex &lt; taskCount; taskIndex ++){\n    var task = taskList[taskIndex];\n    &lt;li class=\"@(taskIndex % 2 ? \"Odd\" : \"Even\")\"&gt;\n    &lt;a href=\"/task/@task.id\"&gt;@task.name&lt;/a&gt;\n    &lt;/li&gt;\n}\n&lt;/ul&gt;\n\n&lt;p&gt;\nif you like it, let me know!&lt;br /&gt;\n- &lt;a href=\"mailto:elmerbulthuis@gmail.com\"&gt;elmerbulthuis@gmail.com&lt;/a&gt;&lt;br /&gt;\n&lt;/p&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p><strong>Try \"vash\" - asp.net mvc like razor syntax for node.js</strong></p>\n\n<p><a href=\"https://github.com/kirbysayshi/Vash\" rel=\"nofollow\">https://github.com/kirbysayshi/Vash</a></p>\n\n<p>also checkout: <a href=\"http://haacked.com/archive/2011/01/06/razor-syntax-quick-reference.aspx\" rel=\"nofollow\">http://haacked.com/archive/2011/01/06/razor-syntax-quick-reference.aspx</a></p>\n\n<hr>\n\n<pre><code>// sample\nvar tmpl = vash.compile('&lt;hr/&gt;@model.a,@model.b&lt;hr/&gt;');\nvar html = tmpl({\"a\": \"hello\", \"b\": \"world\"});\nres.write(html);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found <a href=\"http://twitter.github.com/hogan.js/\" rel=\"nofollow\">hogan.js</a> from Twitter and recommended by Tim O'Reilly on his site. I have no best practice with it, but I trust on Twitter and O'Reilly. You should try...</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a good evaluation of several engines\n<a href=\"http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more\" rel=\"nofollow\">http://engineering.linkedin.com/frontend/client-side-templating-throwdown-mustache-handlebars-dustjs-and-more</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I use Twig with Symfony and am now dabbling in node.js, so I'm looking at <a href=\"https://github.com/justjohn/twig.js\" rel=\"nofollow\">https://github.com/justjohn/twig.js</a> and <a href=\"https://github.com/paularmstrong/swig\" rel=\"nofollow\">https://github.com/paularmstrong/swig</a>, which you'll probably like if you use django.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Honestly, the best and most simple template engine for Node.js is (IMHO) Plates (<a href=\"https://github.com/flatiron/plates\" rel=\"nofollow\">https://github.com/flatiron/plates</a>). You might also want to check out the Flatiron MVC framework for Node.js (<a href=\"http://flatiron.org\" rel=\"nofollow\">http://flatiron.org</a>).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You can try <a href=\"https://github.com/marcelklehr/beardless\" rel=\"nofollow\">beardless</a> (it's inspired by weld/plates):</p>\n\n<p>For example:</p>\n\n<pre><code>{ post:\n  { title: \"Next generation templating: Start shaving!\"\n  , text: \"TL;DR You should really check out beardless!\"\n  , comments:\n    [ {text: \"Hey cool!\"}\n    , {text: \"Really gotta check that out...\"}  ]\n  }\n}\n</code></pre>\n\n<p>Your template:</p>\n\n<pre><code>&lt;h1 data-template=\"post.title\"&gt;&lt;/h1&gt;\n&lt;p data-template=\"post.text\"&gt;&lt;/p&gt;\n&lt;div&gt;\n  &lt;div data-template=\"post.comments\" class=\"comment\"&gt;\n    &lt;p data-template=\"post.comments.text\"&gt;&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>Output:</p>\n\n<pre><code>&lt;h1&gt;Next generation templating: Start shaving!&lt;/h1&gt;\n&lt;p&gt;TL;DR You should really check out beardless!&lt;/p&gt;\n&lt;div&gt;\n  &lt;div class=\"comment\"&gt;\n    &lt;p&gt;Hey cool!&lt;/p&gt;\n  &lt;/div&gt;\n  &lt;div class=\"comment\"&gt;\n    &lt;p&gt;Really gotta check that out...&lt;/p&gt;\n  &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I'm experimenting with building an entire web application using Node.js. Is there a template engine similar to (for example) the Django template engine or the like that at least allows you to extend base templates?</p>\n",
            "last_activity_date": 1400824000,
            "question_id": 1787716,
            "score": 223,
            "tags": [
                "javascript",
                "template-engine",
                "node.js"
            ],
            "title": "Is there a template engine for Node.js?"
        },
        {
            "answer_count": 12,
            "answers": [
                {
                    "body": "<p>Am not very sure about that, I believe that CSS isn't capable of doing this at the moment</p>\n\n<p>However Chris Coyier has blogged about an old technique with multiple images to achieve such effect, <a href=\"http://css-tricks.com/blurry-background-effect/\" rel=\"nofollow\">http://css-tricks.com/blurry-background-effect/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It is possible with CSS3 :</p>\n\n<pre><code>#myDiv {\n    -webkit-filter: blur(20px);\n    -moz-filter: blur(20px);\n    -o-filter: blur(20px);\n    -ms-filter: blur(20px);\n    filter: blur(20px);\n    opacity: 0.4;\n}\n</code></pre>\n\n<p>Example here => <a href=\"http://jsfiddle.net/SvH6w/6/\">jsfiddle</a></p>\n",
                    "is_accepted": true,
                    "score": 104
                },
                {
                    "body": "<p>made a quick demo yesterday that actually does what your talking about. <a href=\"http://bit.ly/10clOM9\" rel=\"nofollow\">http://bit.ly/10clOM9</a> \nthis demo does the parallax based on the accelerometer so it works best on an iPhone itself. I basically just copy the content we are overlaying into a fixed position element that gets blurred. </p>\n\n<p>note: swipe up to see the panel.</p>\n\n<p>(i used horrible css id's but you get the idea)</p>\n\n<pre><code>#frost{\n position: fixed; \n bottom: 0; \n left:0; \n width: 100%; \n height: 100px; \n overflow: hidden;\n -webkit-transition: all .5s;\n}\n#background2{\n -webkit-filter: blur(15px) brightness(.2);\n}\n\n#content2fixed{\n position: fixed;\n bottom: 9px;\n left: 9px;\n -webkit-filter: blur(10px);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<ul>\n<li>clone the element you want to blur</li>\n<li>append it to the element you want to be on top (the frosted window)</li>\n<li>blur cloned element with webkit-filter</li>\n<li>make sure cloned element is positioned absolute</li>\n<li>when scrolling the original element's parent, catch scrollTop and scrollLeft</li>\n<li>using requestAnimationFrame, now set the webkit-transform dynamically to translate3d with x and y values to scrollTop and scrollLeft</li>\n</ul>\n\n<p>Example is here:</p>\n\n<ul>\n<li>make sure to open in webkit-browser</li>\n<li>scroll inside phone view (best with apple mouse...)</li>\n<li>see blurring footer in action</li>\n</ul>\n\n<p><a href=\"http://versie1.com/TEST/ios7/\" rel=\"nofollow\">http://versie1.com/TEST/ios7/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<h1>You made me want to try, so I did, check out the example here:</h1>\n\n<p><a href=\"http://codepen.io/Edo_B/pen/cLbrt\">http://codepen.io/Edo_B/pen/cLbrt</a></p>\n\n<p>Using:</p>\n\n<ol>\n<li>HW Accelerated CSS filters </li>\n<li>JS for class assigning and arrow key events</li>\n<li>Images CSS Clip property</li>\n</ol>\n\n<p>that's it.</p>\n\n<p>I also believe this could be done dynamically for any screen if using canvas to copy the current dom and blurring it.</p>\n",
                    "is_accepted": false,
                    "score": 41
                },
                {
                    "body": "<p>Have you had a look at <a href=\"http://www.blurjs.com/\">blur.js</a>? </p>\n\n<p>It uses the css property background-image and will blur where a selected element is on top of it. It's not css, nor does it work perfectly on mobile browsers because you cant have a fixed-background.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Check out this demo page. <br>\nThis demo uses html2canvas for rendering document as an image.</p>\n\n<p><strong><a href=\"http://blurpopup.labs.daum.net/\">http://blurpopup.labs.daum.net/</a></strong></p>\n\n<ol>\n<li>When the \"Show popup\" link is clicked, the 'makePopup' function is called.</li>\n<li>'makePopup' runs <strong>html2canvas</strong> for rendering document as an image.</li>\n<li>The image is converted to data-url string and it is painted as the popup's background-image.</li>\n<li>Popup's bg is blurred by <strong>-webkit-filter:blur</strong></li>\n<li>Append the popup into document.</li>\n<li>While you're dragging the popup, it changes its own background-position.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>This is sort of possible with FireFox now thanks to the <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/element\">element</a> style attribute.</p>\n\n<p>This experimental attribute lets you use any HTML content as a background image. So, to create the background you need three overlays:</p>\n\n<ol>\n<li>Simple overlay with a solid background (to hide the real overlay content).</li>\n<li>Overlay with a <code>-moz-element</code> background that sets the content. Note that FX doesn't support the <code>filter: blur()</code> attribute, so we need to us an SVG.</li>\n<li>Overlay with non blurred content.</li>\n</ol>\n\n<p>So, put together:</p>\n\n<p>SVG blur filter (works in FX, other browsers could use <code>filter:blur()</code>):</p>\n\n<pre><code>&lt;svg&gt;\n  &lt;defs&gt;\n    &lt;filter id=\"svgBlur\"&gt;\n      &lt;feGaussianBlur stdDeviation=\"10\"/&gt;\n    &lt;/filter&gt;\n  &lt;/defs&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p>CSS blur style:</p>\n\n<pre><code>.behind-blur \n{\n    filter         : url(#svgBlur); \n    opacity: .4;\n    background: -moz-element(#content);\n    background-repeat: no-repeat;\n}\n</code></pre>\n\n<p>Finally 3 layers:</p>\n\n<pre><code>&lt;div class=\"header\" style=\"background-color: #fff\"&gt;&amp;nbsp;&lt;/div&gt;\n&lt;div class=\"header behind-blur\"&gt;&amp;nbsp;&lt;/div&gt;\n&lt;div class=\"header\"&gt;\n    Header Text, content blurs behind\n&lt;/div&gt;\n</code></pre>\n\n<p>Then to move this around just set the <code>background-position</code> (sample in jQuery but you could use anything):</p>\n\n<pre><code>$('.behind-blur').css({\n    'background-position': '-' + left + 'px -' + top + 'px'\n}); \n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/KeithHenry/RgBzH/1/\">Here it is as a JS Fiddle, FX only.</a></p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>I thought about this for the last 4 weeks and came up with this solution.  </p>\n\n<p><a href=\"http://codepen.io/FWeinb/debug/0beac813cb418cb725a0f4173d85bd51\">Live Demo</a></p>\n\n<p>[Edit]\nI wrote a more indepth post on <a href=\"http://css-tricks.com/blurry-transparent-header-effect-ios7-css/\">CSS-Tricks</a>  </p>\n\n<p>This technique is using <a href=\"http://dev.w3.org/csswg/css-regions/\">CSS Regions</a> so the browser support is not the best at this moment. (<a href=\"http://caniuse.com/#feat=css-regions\">http://caniuse.com/#feat=css-regions</a>)</p>\n\n<p>The key part of this technique is to split apart content from layout by using CSS Region. First define a <code>.content</code> element with <code>flow-into:content</code> and then use the appropriate structure to blur the header.</p>\n\n<p>The layout structure:</p>\n\n<pre><code>&lt;div class=\"phone\"&gt;\n &lt;div class=\"phone__display\"&gt;\n  &lt;div class=\"header\"&gt;\n    &lt;div class=\"header__text\"&gt;Header&lt;/div&gt;\n    &lt;div class=\"header__background\"&gt;&lt;/div&gt;\n  &lt;/div&gt;\n  &lt;div class=\"phone__content\"&gt;\n  &lt;/div&gt;\n &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>The two important parts of this layout are <code>.header__background</code> and <code>.phone__content</code> - these are the containers where the content should flow though.  </p>\n\n<p>Using CSS Regions it is simple as <code>flow-from:content</code> (<code>.content</code> is flowing into the named region <code>content</code>)</p>\n\n<p>Now comes the tricky part. We want to always flow the content through the <code>.header__background</code> because that is the section where the content will be blured. (using <code>webkit-filter:blur(10px);</code>)</p>\n\n<p>This is done by <code>transfrom:translateY(-$HeightOfTheHeader)</code> the <code>.content</code> to ensure that the content will always flow though the <code>.header__background</code>. This transform while always hide some content beneath the header. Fixing this is ease adding</p>\n\n<pre><code>.header__background:before{\n  display:inline-block;\n  content:'';\n  height:$HeightOfTheHEader\n}\n</code></pre>\n\n<p>to accommodate for the transform. </p>\n\n<p>This is currently working in:</p>\n\n<ul>\n<li>Chrome 29+ (enable 'experimental-webkit-features'/'enable-experimental-web-platform-features')  </li>\n<li>Safari 6.1 Seed 6  </li>\n<li>iOS7 (<strong>slow and no scrolling</strong>)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>I've been using svg filters to achieve similar effects for sprites</p>\n\n<pre><code>&lt;svg id=\"gray_calendar\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 48 48 48\"&gt;\n  &lt;filter id=\"greyscale\"&gt;\n    &lt;feColorMatrix type=\"saturate\" values=\"0\"/&gt;\n  &lt;/filter&gt;\n  &lt;image width=\"48\" height=\"10224\" xlink:href=\"tango48i.png\" filter=\"url(#greyscale)\"/&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<ul>\n<li>The viewBox attribute will select just the portion of your included image that you want.</li>\n<li>Just change the filter to any that you want, such as Keith's <code>&lt;feGaussianBlur stdDeviation=\"10\"/&gt;</code> example.</li>\n<li>Use the <code>&lt;image ...&gt;</code> tag to apply it to any image or even use multiple images.</li>\n<li>You can build this up with js and use it as an image or use the id in your css.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This pen I found the other day seemed to do it beautifully, just a bit of css and 21 lines of javascript. I hadn't heard of the cloneNode js command until I found this, but it totally worked for what I needed for sure.</p>\n\n<p><a href=\"http://codepen.io/rikschennink/pen/zvcgx\" rel=\"nofollow\">http://codepen.io/rikschennink/pen/zvcgx</a></p>\n\n<p>Detail:\nA. Basically it looks at your content div and invokes a cloneNode on it so it creates a duplicate which it then places inside the overflow:hidden header object sitting on top of the page. \nB. Then it simply listens for scrolling so that both images seem to match and blurs the header image... annnnd BAM. Effect achieved. </p>\n\n<p>Not really fully do-able in CSS until they get the lil bit of scriptability built into the language.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here is my take on this with jQuery. Solution isn't universal, meaning one would have to tweak some of the positions and stuff depending on the actual design.</p>\n\n<p>Basically what I did is: on trigger clone/remove the whole background (what should be blurred) to a container with unblurred content (which, optionally, has hidden overflow if it is not full width) and position it correctly. Caveat is that on window resize blurred div will mismatch the original in terms of position, but this could be solved with some on window resize function (honestly I couldn't be bothered with that now).</p>\n\n<p>I would really appreciate your opinion on this solution!</p>\n\n<p>Thanks</p>\n\n<p>Here is the <a href=\"http://jsfiddle.net/shekyb/CDH6Z/5/\" rel=\"nofollow\">fiddle</a>, not tested in IE.</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;div class=\"slide-up\"&gt;\n&lt;div class=\"slide-wrapper\"&gt;\n    &lt;div class=\"slide-background\"&gt;&lt;/div&gt;\n    &lt;div class=\"blured\"&gt;&lt;/div&gt;\n    &lt;div class=\"slide-content\"&gt;\n         &lt;h2&gt;Pop up title&lt;/h2&gt;\n\n        &lt;p&gt;Pretty neat!&lt;/p&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n&lt;div class=\"wrapper\"&gt;\n&lt;div class=\"content\"&gt;\n     &lt;h1&gt;Some title&lt;/h1&gt;\n    &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Quisque molestie magna elit, quis pulvinar lectus gravida sit amet. Phasellus lacinia massa et metus blandit fermentum. Cras euismod gravida scelerisque. Fusce molestie ligula diam, non porta ipsum faucibus sed. Nam interdum dui at fringilla laoreet. Donec sit amet est eu eros suscipit commodo eget vitae velit.&lt;/p&gt;\n&lt;/div&gt; &lt;a class=\"trigger\" href=\"#\"&gt;trigger slide&lt;/a&gt;\n\n&lt;/div&gt;\n&lt;svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\"&gt;\n&lt;filter id=\"blur\"&gt;\n    &lt;feGaussianBlur stdDeviation=\"3\" /&gt;\n&lt;/filter&gt;\n&lt;/svg&gt;\n</code></pre>\n\n<p><strong>CSS</strong></p>\n\n<pre><code>body {\nmargin: 0;\npadding: 0;\nfont-family:'Verdana', sans-serif;\ncolor: #fff;\n}\n.wrapper {\nposition: relative;\nheight: 100%;\noverflow: hidden;\nz-index: 100;\nbackground: #CD535B;\n}\nimg {\nwidth: 100%;\nheight: auto;\n}\n.blured {\ntop: 0;\nheight: 0;\n-webkit-filter: blur(3px);\n-moz-filter: blur(3px);\n-ms-filter: blur(3px);\nfilter: blur(3px);\nfilter: url(#blur);\nfilter:progid:DXImageTransform.Microsoft.Blur(PixelRadius='3');\nposition: absolute;\nz-index: 1000;\n}\n.blured .wrapper {\nposition: absolute;\nwidth: inherit;\n}\n.content {\nwidth: 300px;\nmargin: 0 auto;\n}\n.slide-up {\ntop:10px;\nposition: absolute;\nwidth: 100%;\nz-index: 2000;\ndisplay: none;\nheight: auto;\noverflow: hidden;\n}\n.slide-wrapper {\nwidth: 200px;\nmargin: 0 auto;\nposition: relative;\nborder: 1px solid #fff;\noverflow: hidden;\n}\n.slide-content {\nz-index: 2222;\nposition: relative;\ntext-align: center;\ncolor: #333333;\n}\n.slide-background {\nposition: absolute;\ntop: 0;\nwidth: 100%;\nheight: 100%;\nbackground-color: #fff;\nz-index: 1500;\nopacity: 0.5;\n}\n</code></pre>\n\n<p><strong>jQuery</strong></p>\n\n<pre><code>// first just grab some pixels we will use to correctly position the blured element\nvar height = $('.slide-up').outerHeight();\nvar slide_top = parseInt($('.slide-up').css('top'), 10);\n$wrapper_width = $('body &gt; .wrapper').css(\"width\");\n$('.blured').css(\"width\", $wrapper_width);\n\n$('.trigger').click(function () {\n    if ($(this).hasClass('triggered')) { // sliding up\n        $('.blured').animate({\n            height: '0px',\n            background: background\n        }, 1000, function () {\n            $('.blured .wrapper').remove();\n        });\n        $('.slide-up').slideUp(700);\n        $(this).removeClass('triggered');\n    } else { // sliding down\n        $('.wrapper').clone().appendTo('.blured');\n        $('.slide-up').slideDown(1000);\n        $offset = $('.slide-wrapper').offset();\n        $('.blured').animate({\n            height: $offset.top + height + slide_top + 'px'\n        }, 700);\n        $('.blured .wrapper').animate({\n            left: -$offset.left,\n            top: -$offset.top\n        }, 100);\n        $(this).addClass('triggered');\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>It seems Apple's overlay is more than just a transparency.  Any ideas on how to achieve this effect with CSS and possibly JS?</p>\n\n<p><img src=\"http://i.stack.imgur.com/RKsfv.jpg\" alt=\"More than just transparency\"></p>\n",
            "last_activity_date": 1411357880,
            "question_id": 17034485,
            "score": 112,
            "tags": [
                "javascript",
                "css",
                "user-interface"
            ],
            "title": "iOS 7&#39;s blurred overlay effect using CSS?"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>Nothing compares to <a href=\"/questions/tagged/extjs\" class=\"post-tag\" title=\"show questions tagged 'extjs'\" rel=\"tag\">extjs</a> in terms of community size and presence on StackOverflow. Despite previous controversy, Ext JS now has a <a href=\"http://www.sencha.com/products/extjs/licensing/\" rel=\"nofollow\">GPLv3 open source license</a>. Its learning curve is long, but it can be <a href=\"http://stackoverflow.com/a/8118471/1269037\">quite rewarding once learned</a>. Ext JS <a href=\"http://www.sencha.com/forum/showthread.php?295421-Google-Material-Design-theme\" rel=\"nofollow\">lacks a Material Design theme</a>, and the team has repeatedly <a href=\"http://www.sencha.com/forum/showthread.php?274293-Kendo-UI-Vs-Sencha-js&amp;p=1020935&amp;viewfull=1#post1020935\" rel=\"nofollow\">refused to release the source code on GitHub</a>. For mobile, one must use the separate Sencha Touch library.</p>\n\n<p>Have in mind also that,</p>\n\n<blockquote>\n  <p>large JavaScript libraries, such as YUI, have been receiving less attention from the community. Many developers today look at large JavaScript libraries as walled gardens they don\u2019t want to be locked into.</p>\n</blockquote>\n\n<p>-- <a href=\"http://yahooeng.tumblr.com/post/96098168666/important-announcement-regarding-yui\" rel=\"nofollow\">Announcement of YUI development being ceased</a></p>\n\n<p>That said, below are a number of Ext JS alternatives.</p>\n\n<h3>Leading client widget libraries</h3>\n\n<ol>\n<li><p><a href=\"http://webix.com\" rel=\"nofollow\">Webix</a> - an advanced, <a href=\"https://programmers.stackexchange.com/questions/271793/literal-strings-vs-object-properties-in-javascript\">easy to learn</a>, and rich free&amp;open source JavaScript UI components library. Webix <a href=\"http://webix.com/migration-from-dhtmlx-touch/\" rel=\"nofollow\">spun off</a> from <a href=\"http://dhtmlx.com/touch/\" rel=\"nofollow\">DHTMLX Touch</a> (a project with 8 years of development behind it - see below) and went on to become a standalone UI components framework. The <a href=\"http://webix.com/licenses/\" rel=\"nofollow\">GPL3 edition</a> <a href=\"http://forum.webix.com/discussion/2114/webix-gpl-as-ui-on-commercial-server\" rel=\"nofollow\">allows commercial use</a> and lets non-GPL applications using Webix keep their license, e.g. MIT, via a <a href=\"http://forum.webix.com/discussion/4023/does-an-open-source-app-that-uses-webix-have-to-become-gpl-licensed\" rel=\"nofollow\">license exemption for FLOSS</a>. Webix has 55 UI widgets, including trees, grids, treegrids and charts. Funding comes from a commercial edition with some advanced widgets (Pivot, Scheduler, Kanban). Check <a href=\"https://en.wikipedia.org/wiki/Webix\" rel=\"nofollow\">Wikipedia</a> for the extensive list of <a href=\"http://forum.webix.com/discussion/2114/webix-gpl-as-ui-on-commercial-server\" rel=\"nofollow\">integrations</a> (Bootstrap, jQuery, Font Awesome) and widgets. <strong>Feb 2015 update</strong>: Webix is the first UI components framework to <a href=\"https://github.com/dandv/meteor-webix\" rel=\"nofollow\">integrate with</a> <a href=\"/questions/tagged/meteor\" class=\"post-tag\" title=\"show questions tagged 'meteor'\" rel=\"tag\">meteor</a>.</p>\n\n<p><img src=\"http://i.stack.imgur.com/DixaM.png\" alt=\"Webix\"></p>\n\n<p><a href=\"http://docs.webix.com/samples/16_skins/\" rel=\"nofollow\">Skins</a> look modern, and the <a href=\"http://docs.webix.com/samples/16_skins/02_touch.html\" rel=\"nofollow\">Touch theme</a> looks quite Material Design-ish. See also the <a href=\"http://webix.com/skin-builder/\" rel=\"nofollow\">Skin Builder</a>.</p>\n\n<p><a href=\"https://github.com/webix-hub/tracker/issues/149\" rel=\"nofollow\">Minimal GitHub presence</a>, but includes the library code, and <a href=\"https://github.com/webix-hub/docs\" rel=\"nofollow\">the documentation</a>. Webix suffers from a having a small team and a <a href=\"http://forum.webix.com/discussion/3252/why-is-webix-so-little-known\" rel=\"nofollow\">lack of marketing</a>. However, they have been very responsive to user feedback, both <a href=\"https://github.com/webix-hub/tracker/issues?q=author%3Adandv\" rel=\"nofollow\">on GitHub</a> and <a href=\"http://forum.webix.com/profile/discussions/9889/dandv\" rel=\"nofollow\">on their forum</a>.</p>\n\n<p>The library is lean (125Kb gzip+minified for all 55 widgets), <a href=\"http://webix.com/widget/datatable/\" rel=\"nofollow\">faster than ExtJS, dojo and others</a>, and the design is pleasant-looking. <strong>UPDATE</strong> A Material Design theme is almost ready.</p>\n\n<p>The demos on <a href=\"http://webix.com\" rel=\"nofollow\">Webix.com</a> look and function <em>great</em>. The developer, <a href=\"http://xbsoftware.com/\" rel=\"nofollow\">XB Software</a>, uses Webix in solutions they build for paying customers, so there's likely a good, funded future ahead of it.</p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Webix\" rel=\"nofollow\">Wikipedia</a> \u2022 <a href=\"https://github.com/webix-hub/tracker\" rel=\"nofollow\">GitHub</a> \u2022 <a href=\"http://webix.com\" rel=\"nofollow\">10-lines of code</a> \u2022 <a href=\"http://webix.com/demos/admin-app/\" rel=\"nofollow\">Admin dashboard demo</a> \u2022 <a href=\"http://webix.com/demos\" rel=\"nofollow\">Demos</a> \u2022 <a href=\"http://docs.webix.com/samples\" rel=\"nofollow\">Widget samples</a></p></li>\n<li><p><a href=\"http://openui5.org/\" rel=\"nofollow\">OpenUI5</a> - UI framework with 180 widgets, Apache 2.0-licensed and fully-open sourced and funded by German software giant <a href=\"https://en.wikipedia.org/wiki/SAP_SE\" rel=\"nofollow\">SAP SE</a>.</p>\n\n<p><img src=\"http://i.stack.imgur.com/qgDOU.png\" alt=\"OpenUI5\"></p>\n\n<p>The community is <a href=\"http://openui5.org/faq.html#openAndMe\" rel=\"nofollow\">much larger</a> than that of Webix, <a href=\"http://scn.sap.com/community/developer-center/front-end/blog/2014/10/08/ui5-is-growing-and-hiring-a-look-behind-the-scenes\" rel=\"nofollow\">SAP is hiring developers to grow OpenUI5</a>, and they <a href=\"http://openui5.tumblr.com/post/94420670937/openui5-at-oscon-2014\" rel=\"nofollow\">presented OpenUI5 at OSCON 2014</a>.</p>\n\n<p>The desktop themes are rather lackluster, but the <a href=\"http://experience.sap.com/fiori-guidelines/FioriAppFramework/32_Fiori_AppFramework-MasterDetail.html\" rel=\"nofollow\">Fiori set of mobile-first applications looks clean and neat</a>. It's unclear if the Fiori design can be readily used in other applications.</p>\n\n<p><img src=\"http://experience.sap.com/fiori-guidelines/img/large/AppFramework_Master-Detail_no-1-small.png\" alt=\"Fiori\"></p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/OpenUI5\" rel=\"nofollow\">Wikipedia</a> \u2022 <a href=\"https://github.com/SAP/openui5\" rel=\"nofollow\">GitHub</a> \u2022 <a href=\"https://openui5.hana.ondemand.com/explored.html\" rel=\"nofollow\">Mobile-first controls demos</a> \u2022 <a href=\"https://openui5.hana.ondemand.com/#test-resources/sap/ui/table/demokit/Table.html\" rel=\"nofollow\">Desktop controls demos</a> \u2022 <a href=\"http://stackoverflow.com/questions/tagged/sapui5\">SO</a></p></li>\n<li><p><a href=\"http://dojotoolkit.org\" rel=\"nofollow\">DojoToolkit</a> and their powerful Dijit set of <a href=\"http://demos.dojotoolkit.org/demos/\" rel=\"nofollow\">widgets</a>. Completely <a href=\"https://github.com/dojo/dojo/pulls\" rel=\"nofollow\">open-sourced and actively developed on GitHub</a>, with no \"professional\" editions. BSD/AFL license. Development started in 2004 and the Dojo Foundation is being sponsored by IBM, Google, and others - see <a href=\"https://en.wikipedia.org/wiki/Dojo_Toolkit\" rel=\"nofollow\">Wikipedia</a>. <a href=\"http://stackoverflow.com/questions/tagged/dojo\">7500 questions here on SO</a>.</p>\n\n<p><img src=\"http://i.stack.imgur.com/V21c3.png\" alt=\"Dojo Dijit\"></p>\n\n<p>Themes look desktop-oriented and dated - see the <strong><a href=\"http://download.dojotoolkit.org/release-1.10.3/dojo-release-1.10.3/dijit/themes/themeTester.html?theme=nihilo\" rel=\"nofollow\">theme tester in dijit</a></strong>. The <a href=\"http://dojo-toolkit.33424.n3.nabble.com/Theme-tester-not-switching-themes-td4003583.html\" rel=\"nofollow\">official theme previewer</a> is broken and only shows \"Claro\". A <a href=\"http://martinpengellyphillips.github.com/dbootstrap/\" rel=\"nofollow\">Bootstrap theme exists</a>, which looks a lot like Bootstrap, but doesn't use Bootstrap classes. In Jan 2015, I started a thread on <strong><a href=\"http://dojo-toolkit.33424.n3.nabble.com/Material-Design-inspired-theme-td4004856.html\" rel=\"nofollow\">building a Material Design theme for Dojo</a></strong>, which got quite popular within the first hours. However, there are questions regarding building that theme for the current Dojo 1.10 vs. <a href=\"http://ibm-js.github.io/deliteful/\" rel=\"nofollow\">the next Dojo 2.0</a>. The response to that thread shows an active and wide community, covering many time zones.</p>\n\n<p>Unfortunately, <a href=\"https://www.quora.com/Why-has-the-Dojo-toolkit-disappeared-off-peoples-radar\" rel=\"nofollow\">Dojo has fallen out of popularity</a> and <a href=\"https://www.quora.com/Why-do-so-few-companies-use-the-Dojo-Toolkit\" rel=\"nofollow\">fewer companies appear to use it</a>, despite <a href=\"http://stackoverflow.com/a/2451785/1269037\">having (had?) a strong foothold in the enterprise world</a>. In 2009-2012, its <a href=\"https://www.quora.com/Why-do-so-few-companies-use-the-Dojo-Toolkit/answer/Cornel-Masson\" rel=\"nofollow\">learning curve was steep</a> and the documentation needed improvements; while the <a href=\"http://dojotoolkit.org/documentation/\" rel=\"nofollow\">documentation has substantially improved</a>, it's unclear how easy it is to pick up Dojo nowadays.</p>\n\n<p>With a <a href=\"http://dojo-toolkit.33424.n3.nabble.com/Material-Design-inspired-theme-td4004856.html\" rel=\"nofollow\">Material Design theme</a>, Dojo (2.0?) might be the killer UI components framework.</p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Dojo_Toolkit\" rel=\"nofollow\">Wikipedia</a> \u2022 <a href=\"https://github.com/dojo\" rel=\"nofollow\">GitHub</a> \u2022 <a href=\"http://download.dojotoolkit.org/release-1.10.3/dojo-release-1.10.3/dijit/themes/themeTester.html?theme=nihilo\" rel=\"nofollow\">Themes</a> \u2022 <a href=\"http://demos.dojotoolkit.org/demos/\" rel=\"nofollow\">Demos</a> \u2022 <a href=\"http://dojotoolkit.org/features/desktop\" rel=\"nofollow\">Desktop widgets</a> \u2022 <a href=\"http://stackoverflow.com/questions/tagged/dojo\">SO</a></p></li>\n<li><p><a href=\"/questions/tagged/kendo\" class=\"post-tag\" title=\"show questions tagged 'kendo'\" rel=\"tag\">kendo</a> - 40+ basic open-source widgets, plus commercial professional widgets (grids, trees, charts etc.). Responsive&amp;mobile support. Works with Bootstrap and AngularJS. Modern, with <a href=\"http://demos.telerik.com/kendo-ui/themebuilder/\" rel=\"nofollow\">Material Design themes</a>. The <a href=\"https://github.com/telerik/kendo-docs\" rel=\"nofollow\">documentation is available on GitHub</a>, which has enabled numerous contributions from users (4500+ commits, 500+ PRs as of Jan 2015).</p>\n\n<p><img src=\"http://i.stack.imgur.com/Npn31.png\" alt=\"enter image description here\"></p>\n\n<p>Well-supported commercially, claiming millions of developers, and part of a large family of developer tools. <a href=\"https://en.wikipedia.org/wiki/Telerik\" rel=\"nofollow\">Telerik has received many accolades</a>, is a multi-national company (Bulgaria, US), was acquired by <a href=\"https://en.wikipedia.org/wiki/Progress_Software\" rel=\"nofollow\">Progress Software</a>, and is a <a href=\"http://developer.telerik.com/featured/planning-front-end-javascript-application/\" rel=\"nofollow\">thought</a> <a href=\"http://developer.telerik.com/featured/front-end-driven-applications-new-approach-applications/\" rel=\"nofollow\">leader</a>.</p>\n\n<p>A <a href=\"http://www.telerik.com/purchase/kendo-ui\" rel=\"nofollow\">Kendo UI Professional developer license costs $700</a> and <a href=\"http://www.telerik.com/forums/kendo-ui/general-discussions\" rel=\"nofollow\">posting access to most forums</a> is conditioned upon having a license or being in the trial period.</p>\n\n<p>[Wikipedia] \u2022 <a href=\"https://github.com/telerik/\" rel=\"nofollow\">GitHub/Telerik</a> \u2022 <a href=\"http://demos.telerik.com/kendo-ui/\" rel=\"nofollow\">Demos</a> \u2022 <a href=\"http://dojo.telerik.com/\" rel=\"nofollow\">Playground</a> \u2022 <a href=\"http://blogs.telerik.com/kendoui/posts/14-08-28/kendo-ui-tooling-which-productivity-tools-do-you-use-\" rel=\"nofollow\">Tools</a></p></li>\n<li><p><a href=\"http://dhtmlx.com/\" rel=\"nofollow\">DHTMLX</a> - JavaScript library for building rich Web and Mobile apps. Looks most like ExtJS - check the <a href=\"http://dhtmlx.com/docs/customers.shtml\" rel=\"nofollow\">demos</a>. Has been developed <a href=\"https://en.wikipedia.org/wiki/Dhtmlx\" rel=\"nofollow\">since 2005</a> but still looks modern. All components <a href=\"http://dhtmlx.com/docs/products/licenses.shtml\" rel=\"nofollow\">except TreeGrid</a> are available under GPLv2 but advanced features for many components are only available in the commercial PRO edition - see for example the <a href=\"http://dhtmlx.com/docs/products/dhtmlxTree/editions.shtml\" rel=\"nofollow\">tree</a>. Claims to be used by many Fortune 500 companies.</p>\n\n<p><img src=\"http://i.stack.imgur.com/jS7cw.png\" alt=\"DHTMLX\"></p>\n\n<p><a href=\"https://github.com/DHTMLX\" rel=\"nofollow\">Minimal presence on GitHub</a> (the <a href=\"http://forum.dhtmlx.com/viewtopic.php?f=12&amp;t=38910\" rel=\"nofollow\">main library code</a> is missing) and <a href=\"http://stackoverflow.com/questions/tagged/dhtmlx\">StackOverflow</a> but <a href=\"http://forum.dhtmlx.com/\" rel=\"nofollow\">active forum</a>. The <a href=\"http://forum.dhtmlx.com/viewtopic.php?f=13&amp;t=38915\" rel=\"nofollow\">documentation is <em>not</em> available on GitHub</a>, which makes it difficult to improve by the community.</p></li>\n<li><p><a href=\"http://qooxdoo.org\" rel=\"nofollow\">qooxdoo</a> - \"a universal JavaScript framework\nwith a coherent set of individual components\", developed and funded by German hosting provider 1&amp;1 (see the <a href=\"http://qooxdoo.org/project/developers#initiator_and_maintainer\" rel=\"nofollow\">contributors</a>, one of the world's largest hosting companies. GPL/<a href=\"https://en.wikipedia.org/wiki/Eclipse_Public_License\" rel=\"nofollow\">EPL</a> (a business-friendly license).</p>\n\n<p>Mobile themes look modern but desktop themes look old (gradients).</p>\n\n<p><a href=\"http://demo.qooxdoo.org/devel/demobrowser/#data~Tree_Columns.html\" rel=\"nofollow\"><img src=\"http://i.stack.imgur.com/0frDt.png\" alt=\"Qooxdoo\"></a></p>\n\n<p><a href=\"https://en.wikipedia.org/wiki/Qooxdoo\" rel=\"nofollow\">Wikipedia</a> \u2022 <a href=\"https://github.com/qooxdoo/qooxdoo\" rel=\"nofollow\">GitHub</a> \u2022 <a href=\"http://qooxdoo.org/demos\" rel=\"nofollow\">Web/Mobile/Desktop demos</a> \u2022 <a href=\"http://demo.qooxdoo.org/devel/demobrowser/#data~Tree_Columns.html\" rel=\"nofollow\">Widgets Demo browser</a> \u2022 <a href=\"http://demo.qooxdoo.org/current/widgetbrowser/\" rel=\"nofollow\">Widget browser</a> \u2022 <a href=\"https://stackoverflow.com/questions/tagged/qooxdoo\">SO</a> \u2022 <a href=\"http://demo.qooxdoo.org/devel/playground/\" rel=\"nofollow\">Playground</a> \u2022 <a href=\"http://qooxdoo.org/community\" rel=\"nofollow\">Community</a></p></li>\n<li><p><a href=\"http://jqueryui.com/\" rel=\"nofollow\">jQuery UI</a> - easy to pick up; looks a bit dated; lacks advanced widgets. Of course, you can combine it with independent widgets for particular needs, e.g. <a href=\"http://jquery-plugins.net/tag/treeview\" rel=\"nofollow\">trees</a> or <a href=\"http://plugins.jquery.com/tag/ui/\" rel=\"nofollow\">other UI components</a>, but the same can be said for any other framework.</p></li>\n<li><p><a href=\"/questions/tagged/angular\" class=\"post-tag\" title=\"show questions tagged 'angular'\" rel=\"tag\">angular</a> + <a href=\"http://angular-ui.github.io/\" rel=\"nofollow\">Angular UI</a>. While Angular is backed by Google, it's being radically revamped in the upcoming 2.0 version, and \"users will need to get to grips with a new kind of architecture. It's also been confirmed that there will be <a href=\"http://jaxenter.com/angular-2-0-112094.html\" rel=\"nofollow\">no migration path from Angular 1.X to 2.0</a>\". Moreover, the consensus seems to be that <a href=\"https://news.ycombinator.com/item?id=8507872\" rel=\"nofollow\">Angular 2 won't really be ready for use until a year or two from now</a>. Angular UI has relatively few widgets (no trees, for example).</p></li>\n<li><p><a href=\"https://www.polymer-project.org\" rel=\"nofollow\">Polymer</a>, a WebComponents shim, plus <a href=\"https://www.polymer-project.org/components/paper-elements/demo.html\" rel=\"nofollow\">Polymer Paper</a>, Google's implementation of the Material design. Aimed at web and mobile apps. Doesn't have advanced widgets like trees or even grids but the controls it provides are mobile-first and responsive.</p>\n\n<p><img src=\"http://i.stack.imgur.com/GppAK.png\" alt=\"enter image description here\"></p></li>\n<li><p><a href=\"http://enyojs.com/sampler/latest/\" rel=\"nofollow\">Enyo</a> - front-end library aimed at mobile and TV apps (e.g. large touch-friendly controls). Developed by LG Electronix and <a href=\"https://github.com/enyojs/enyo\" rel=\"nofollow\">Apache-licensed on GitHub</a>.</p></li>\n<li><p>The radical <a href=\"http://www.cappuccino-project.org/learn/\" rel=\"nofollow\">Cappuccino</a> - Objective-J (a superset of JavaScript) instead of HTML+CSS+DOM</p></li>\n<li><p><a href=\"https://github.com/mui/mochaui\" rel=\"nofollow\">Mochaui</a> - only &lt;300 GitHub stars</p></li>\n<li><p><a href=\"http://crossui.com/\" rel=\"nofollow\">CrossUI</a> - cross-browser JS framework to develop and package the exactly same code and UI into Web Apps, Native Desktop Apps (Windows, OS X, Linux) and Mobile Apps (iOS, Android, Windows Phone, BlackBerry). Open sourced LGPL3. Featured RAD tool (form builder etc.). The UI looks desktop-, not web-oriented. <a href=\"http://www.crossui.com/Forum/\" rel=\"nofollow\">Actively developed, small community</a>. <a href=\"https://github.com/linb/CrossUI\" rel=\"nofollow\">No presence on GitHub</a>.</p></li>\n<li><p><a href=\"http://zinoui.com/demos\" rel=\"nofollow\">ZinoUI</a> - simple widgets. The DataTable, for instance, doesn't even support sorting.</p></li>\n<li><p><a href=\"http://wijmo.com/\" rel=\"nofollow\">Wijmo</a> - good-looking commercial widgets, with old (jQuery UI) widgets open-sourced <a href=\"https://github.com/wijmo\" rel=\"nofollow\">on GitHub</a> (their development stopped in 2013). Developed by <a href=\"http://www.componentone.com/\" rel=\"nofollow\">ComponentOne</a>, a division of GrapeCity. See <a href=\"/widgets/license/wijmo-complete-vs-wijmo-open/\">Wijmo Complete vs. Open</a>.</p></li>\n</ol>\n\n<h3>Full-stack frameworks</h3>\n\n<ol>\n<li><p><a href=\"http://sproutcore.com/about/\" rel=\"nofollow\">SproutCore</a> - developed by Apple for web applications with native performance, handling large data sets on the client. Powers iCloud.com. Not intended for widgets.</p></li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Wakanda_(software)\" rel=\"nofollow\">Wakanda</a>: aimed at business/enterprise web apps - see <a href=\"http://doc.wakanda.org/home2.en.html#/What-is-Wakanda/What-is-Wakanda.100-660545.en.html\" rel=\"nofollow\">What is Wakanda?</a>. Architecture:</p>\n\n<ul>\n<li>Wakanda Server (server-side JavaScript (<a href=\"https://www.youtube.com/watch?v=SAZghHMM2e8#t=384\" rel=\"nofollow\">custom engine</a>) + open-source <a href=\"http://wakandadb.org/\" rel=\"nofollow\">NoSQL database</a>)</li>\n<li>desktop IDE and WYSIWYG editor for tables, forms, reports</li>\n<li><p>Wakanda Application Framework (datasource layer + browser-based interface widgets) that helps with browser and device compatibility across desktop and mobile</p>\n\n<p>Wakanda is highly integrated, <a href=\"https://www.youtube.com/watch?v=SAZghHMM2e8#t=487\" rel=\"nofollow\">includes a ton of features out of the box</a>, but has a <a href=\"https://github.com/Wakanda/\" rel=\"nofollow\">very small GitHub community</a> and <a href=\"http://stackoverflow.com/search?q=wakanda\">SO presence</a>.</p></li>\n</ul></li>\n<li><p><a href=\"http://www.servoy.com/\" rel=\"nofollow\">Servoy</a> - \"a cross platform frontend development and deployment environment for SQL databases\". Boasts a \"full WYSIWIG (What You See Is What You Get) UI designer for HTML5 with built-in data-binding to back-end services\", responsive design, support for HTML6 Web Components, Websockets and mobile platforms.</p></li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/SmartClient\" rel=\"nofollow\">SmartClient/SmartGWT</a> - mobile and cross-browser HTML5 UI components combined with a Java server. Aimed at building powerful business apps - see <a href=\"http://smartclient.com/#Welcome\" rel=\"nofollow\">demos</a>.</p></li>\n<li><p><a href=\"https://vaadin.com/learn\" rel=\"nofollow\">Vaadin</a> - full-stack Java/GWT + JavaScript/HTML3 web app framework</p></li>\n<li><p><a href=\"https://en.wikipedia.org/wiki/Backbase\" rel=\"nofollow\">Backbase</a> - portal software</p></li>\n<li><p><a href=\"http://shiny.rstudio.com/gallery/\" rel=\"nofollow\">Shiny</a> - front-end library on top R, with visualization, layout and control widgets</p></li>\n<li><p><a href=\"http://www.zkoss.org/product/zk\" rel=\"nofollow\">ZKOSS</a>: Java+jQuery+Bootstrap framework for building enterprise web and mobile apps.</p></li>\n</ol>\n\n<h3>CSS libraries + minimal widgets</h3>\n\n<p>These libraries don't implement complex widgets such as tables with sorting/filtering, autocompletes, or trees.</p>\n\n<ol>\n<li><p><a href=\"http://getbootstrap.com\" rel=\"nofollow\">Bootstrap</a></p></li>\n<li><p><a href=\"http://foundation.zurb.com/apps/\" rel=\"nofollow\">Foundation for Apps</a> - responsive front-end framework on top of AngularJS; more of a <a href=\"http://foundation.zurb.com/apps/docs/#!/grid\" rel=\"nofollow\">grid/layout/navigation library</a></p></li>\n<li><p><a href=\"http://getuikit.com/docs/smooth-scroll.html\" rel=\"nofollow\">UI Kit</a> - similar to Bootstrap, with fewer widgets, but with official off-canvas.</p></li>\n</ol>\n\n<h3>Libraries using HTML Canvas</h3>\n\n<p>Using the canvas elements allows for complete control over the UI, and great cross-browser compatibility, but comes at the <a href=\"http://stackoverflow.com/a/6912764/1269037\">cost of missing native browser functionality</a>, e.g. page search via Ctrl/Cmd+F.</p>\n\n<ol>\n<li><a href=\"http://www.zebkit.com/\" rel=\"nofollow\">Zebra</a> - <a href=\"http://repo.zebkit.org/latest/samples/uidemo.html\" rel=\"nofollow\">demos</a></li>\n</ol>\n\n<h3>No longer developed as of Dec 2014</h3>\n\n<ol>\n<li><a href=\"http://developer.yahoo.com/yui/\" rel=\"nofollow\">Yahoo! User Interface - YUI</a>, launched in 2005, but no longer maintained by the core contributors - see the <a href=\"http://yahooeng.tumblr.com/post/96098168666/important-announcement-regarding-yui\" rel=\"nofollow\">announcement</a>, which highlights reasons why large UI widget libraries are perceived as walled gardens that developers don't want to be locked into.</li>\n<li><a href=\"http://echo.nextapp.com/site/echo3\" rel=\"nofollow\">echo3</a>, <a href=\"https://github.com/echo3\" rel=\"nofollow\">GitHub</a>. Supports writing either server-side Java applications that don't require developer knowledge of HTML, HTTP, or JavaScript, or client-side JavaScript-based applications do not require a server, but can communicate with one via AJAX. Last update: July 2013.</li>\n<li><a href=\"http://www.amplesdk.com/examples/\" rel=\"nofollow\">ampleSDK</a></li>\n<li>Simpler widgets <a href=\"http://livepipe.net/control\" rel=\"nofollow\">livepipe.net</a></li>\n<li><a href=\"https://github.com/JxLib/JxLib\" rel=\"nofollow\">JxLib</a></li>\n<li><a href=\"https://groups.yahoo.com/neo/groups/rialto-dev/info\" rel=\"nofollow\">rialto</a></li>\n<li>Simple UI kit</li>\n<li><a href=\"http://www.prototype-ui.com\" rel=\"nofollow\">Prototype-ui</a></li>\n</ol>\n\n<h3>Other lists</h3>\n\n<ul>\n<li>Wikipedia's <a href=\"https://en.wikipedia.org/wiki/Comparison_of_JavaScript_frameworks\" rel=\"nofollow\">Comparison of JavaScript frameworks</a></li>\n<li>Wikipedia's list of <a href=\"https://en.wikipedia.org/wiki/List_of_JavaScript_libraries#GUI-related_.28widget.29\" rel=\"nofollow\">GUI-related JavaScript libraries</a></li>\n<li><a href=\"http://jqueryuiwidgets.com\" rel=\"nofollow\">jqueryuiwidgets.com</a> - detailed jQuery widgets feature comparison</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 104
                }
            ],
            "body": "<p>So what I'm looking for is a javascript framework I can use that has several UI controls. I have taken a look at <a href=\"http://ui.jquery.com/home\" rel=\"nofollow\">jQuery</a> but those controls are very basic compared to ExtJS. Are there any other competitive alternatives?</p>\n\n<blockquote>\n  <p>This question exists because it has historical significance, but <strong>it is not considered a good, on-topic question for this site</strong>, so please do not use it as evidence that you can ask similar questions here. More info: <a href=\"http://stackoverflow.com/help\">help center</a>.</p>\n</blockquote>\n",
            "last_activity_date": 1425294142,
            "question_id": 200284,
            "score": 65,
            "tags": [
                "javascript",
                "extjs",
                "frameworks"
            ],
            "title": "What are alternatives to ExtJS?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<pre><code>\"\\n\".charCodeAt(0);\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 567
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/charCodeAt\"><code>String.charCodeAt()</code></a> can convert string characters to ASCII numbers. For example:</p>\n\n<pre><code>\"ABC\".charCodeAt(0) // returns 65\n</code></pre>\n\n<p>For opposite use <a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/String/fromCharCode\"><code>String.fromCharCode(10)</code></a> that convert numbers to equal ASCII character. This function can accpet multiple numbers and join all the characters then return the string. Example:</p>\n\n<pre><code>String.fromCharCode(65,66,67); // returns 'ABC'\n</code></pre>\n\n<p>Here is a quick ASCII characters reference:</p>\n\n<pre><code>{\n\"31\": \"\",    \"32\": \" \",    \"33\": \"!\",    \"34\": \"\\\"\",    \"35\": \"#\",    \n\"36\": \"$\",    \"37\": \"%\",    \"38\": \"&amp;\",    \"39\": \"'\",    \"40\": \"(\",    \n\"41\": \")\",    \"42\": \"*\",    \"43\": \"+\",    \"44\": \",\",    \"45\": \"-\",    \n\"46\": \".\",    \"47\": \"/\",    \"48\": \"0\",    \"49\": \"1\",    \"50\": \"2\",    \n\"51\": \"3\",    \"52\": \"4\",    \"53\": \"5\",    \"54\": \"6\",    \"55\": \"7\",    \n\"56\": \"8\",    \"57\": \"9\",    \"58\": \":\",    \"59\": \";\",    \"60\": \"&lt;\",    \n\"61\": \"=\",    \"62\": \"&gt;\",    \"63\": \"?\",    \"64\": \"@\",    \"65\": \"A\",    \n\"66\": \"B\",    \"67\": \"C\",    \"68\": \"D\",    \"69\": \"E\",    \"70\": \"F\",    \n\"71\": \"G\",    \"72\": \"H\",    \"73\": \"I\",    \"74\": \"J\",    \"75\": \"K\",    \n\"76\": \"L\",    \"77\": \"M\",    \"78\": \"N\",    \"79\": \"O\",    \"80\": \"P\",    \n\"81\": \"Q\",    \"82\": \"R\",    \"83\": \"S\",    \"84\": \"T\",    \"85\": \"U\",    \n\"86\": \"V\",    \"87\": \"W\",    \"88\": \"X\",    \"89\": \"Y\",    \"90\": \"Z\",    \n\"91\": \"[\",    \"92\": \"\\\\\",    \"93\": \"]\",    \"94\": \"^\",    \"95\": \"_\",    \n\"96\": \"`\",    \"97\": \"a\",    \"98\": \"b\",    \"99\": \"c\",    \"100\": \"d\",    \n\"101\": \"e\",    \"102\": \"f\",    \"103\": \"g\",    \"104\": \"h\",    \"105\": \"i\",    \n\"106\": \"j\",    \"107\": \"k\",    \"108\": \"l\",    \"109\": \"m\",    \"110\": \"n\",    \n\"111\": \"o\",    \"112\": \"p\",    \"113\": \"q\",    \"114\": \"r\",    \"115\": \"s\",    \n\"116\": \"t\",    \"117\": \"u\",    \"118\": \"v\",    \"119\": \"w\",    \"120\": \"x\",    \n\"121\": \"y\",    \"122\": \"z\",    \"123\": \"{\",    \"124\": \"|\",    \"125\": \"}\",    \n\"126\": \"~\",    \"127\": \"\"\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 183
                },
                {
                    "body": "<p>If you have only one char and not a string, you can use:</p>\n\n<pre><code>var a = 'A';\nvar codeA = a.charCodeAt();\n</code></pre>\n\n<p>omitting the 0...</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>While the other answers are right, I prefer a more <em>functional</em> approach.</p>\n\n<pre><code>function ascii (a) { return a.charCodeAt(0); }\n</code></pre>\n\n<p>Then, to use it, simply:</p>\n\n<pre><code>var lineBreak = ascii(\"\\n\");\n</code></pre>\n\n<p>I am using this for a small shortcut system:</p>\n\n<pre><code>$(window).keypress(function(event) {\n  if (event.ctrlKey &amp;&amp; event.which == ascii(\"s\")) {\n    savecontent();\n    }\n  // ...\n  });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>How can I convert a character to its ASCII code using JavaScript? </p>\n\n<p>For example:</p>\n\n<blockquote>\n  <p>get 10 from \"\\n\".</p>\n</blockquote>\n",
            "last_activity_date": 1421191323,
            "question_id": 94037,
            "score": 384,
            "tags": [
                "javascript"
            ],
            "title": "Convert character to ASCII code in JavaScript"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>changing: </p>\n\n<pre><code>collection.fetch({ data: { page: 1} });\n</code></pre>\n\n<p>to: </p>\n\n<pre><code>collection.fetch({ data: $.param({ page: 1}) });\n</code></pre>\n\n<p>So with out over doing it, this is called with your <code>{data: {page:1}}</code> object as <code>options</code></p>\n\n<pre><code>Backbone.sync = function(method, model, options) {\n    var type = methodMap[method];\n\n    // Default JSON-request options.\n    var params = _.extend({\n      type:         type,\n      dataType:     'json',\n      processData:  false\n    }, options);\n\n    // Ensure that we have a URL.\n    if (!params.url) {\n      params.url = getUrl(model) || urlError();\n    }\n\n    // Ensure that we have the appropriate request data.\n    if (!params.data &amp;&amp; model &amp;&amp; (method == 'create' || method == 'update')) {\n      params.contentType = 'application/json';\n      params.data = JSON.stringify(model.toJSON());\n    }\n\n    // For older servers, emulate JSON by encoding the request into an HTML-form.\n    if (Backbone.emulateJSON) {\n      params.contentType = 'application/x-www-form-urlencoded';\n      params.processData = true;\n      params.data        = params.data ? {model : params.data} : {};\n    }\n\n    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`\n    // And an `X-HTTP-Method-Override` header.\n    if (Backbone.emulateHTTP) {\n      if (type === 'PUT' || type === 'DELETE') {\n        if (Backbone.emulateJSON) params.data._method = type;\n        params.type = 'POST';\n        params.beforeSend = function(xhr) {\n          xhr.setRequestHeader('X-HTTP-Method-Override', type);\n        };\n      }\n    }\n\n    // Make the request.\n    return $.ajax(params);\n};\n</code></pre>\n\n<p>So it sends the 'data' to <a href=\"http://api.jquery.com/jQuery.ajax/\">jQuery.ajax</a> which will do its best to append whatever <code>params.data</code> is to the URL.</p>\n",
                    "is_accepted": true,
                    "score": 159
                },
                {
                    "body": "<p>You can also set processData to true:</p>\n\n<pre><code>collection.fetch({ \n    data: { page: 1 },\n    processData: true\n});\n</code></pre>\n\n<p>Jquery will auto process data object into param string,</p>\n\n<p>but in Backbone.sync function,\nBackbone turn the processData off because Backbone will use other method to process data\nin POST,UPDATE...</p>\n\n<p>in Backbone source:</p>\n\n<pre><code>if (params.type !== 'GET' &amp;&amp; !Backbone.emulateJSON) {\n    params.processData = false;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 51
                },
                {
                    "body": "<p>Another example if you are using Titanium Alloy: </p>\n\n<pre><code> collection.fetch({ \n     data: {\n             where : JSON.stringify({\n                page: 1\n             })\n           } \n      });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<pre><code>try {\n    // THIS for POST+JSON\n    options.contentType = 'application/json';\n    options.type = 'POST';\n    options.data = JSON.stringify(options.data);\n\n    // OR THIS for GET+URL-encoded\n    //options.data = $.param(_.clone(options.data));\n\n    console.log('.fetch options = ', options);\n    collection.fetch(options);\n} catch (excp) {\n    alert(excp);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>collection.fetch({ \n    data: { page: 1 },\n    processData: true\n});</p>\n\n<p>jquery process data object to string, when processData set to true</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Following the <a href=\"http://documentcloud.github.com/backbone/#Collection-fetch\">documentation</a>, I did:</p>\n\n<pre><code>var collection = new Backbone.Collection.extend({\n        model: ItemModel,\n        url: '/Items'\n})\n\ncollection.fetch({ data: { page: 1} });\n</code></pre>\n\n<p>the url turned out to be: <code>http://localhost:1273/Items?[object%20Object]</code></p>\n\n<p>I was expecting something like <code>http://localhost:1273/Items?page=1</code></p>\n\n<p>So how do I pass params in the fetch method?</p>\n",
            "last_activity_date": 1413485810,
            "question_id": 6659283,
            "score": 107,
            "tags": [
                "javascript",
                "backbone.js"
            ],
            "title": "Backbone.js fetch with parameters"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<pre><code>$(\"ul[data-group='Companies'] li[data-company='Microsoft']\") //Get all elements with data-company=\"Microsoft\" below \"Companies\"\n\n$(\"ul[data-group='Companies'] li:not([data-company='Microsoft'])\") //get all elements with data-company!=\"Microsoft\" below \"Companies\"\n</code></pre>\n\n<p>Look in to <a href=\"http://api.jquery.com/category/selectors/\">jQuery Selectors</a> :contains is a selector</p>\n\n<p>here is info on the <a href=\"http://api.jquery.com/contains-selector/\">:contains selector</a></p>\n",
                    "is_accepted": true,
                    "score": 472
                },
                {
                    "body": "<p><code>jQuery UI</code> has a <a href=\"http://api.jqueryui.com/data-selector/\"><code>:data()</code> selector</a> which can also be used. It has been around since <a href=\"http://jqueryui.com/changelog/1.7/\">Version 1.7.0</a> it seems.</p>\n\n<p>You can use it like this:</p>\n\n<p><strong>Get all elements with a <code>data-company</code> attribute</strong></p>\n\n<pre><code>var companyElements = $(\"ul:data(group) li:data(company)\");\n</code></pre>\n\n<p><strong>Get all elements where <code>data-company</code> equals <code>Microsoft</code></strong></p>\n\n<pre><code>var microsoft = $(\"ul:data(group) li:data(company)\")\n                    .filter(function () {\n                        return $(this).data(\"company\") == \"Microsoft\";\n                    });\n</code></pre>\n\n<p><strong>Get all elements where <code>data-company</code> does not equal <code>Microsoft</code></strong></p>\n\n<pre><code>var notMicrosoft = $(\"ul:data(group) li:data(company)\")\n                       .filter(function () {\n                           return $(this).data(\"company\") != \"Microsoft\";\n                       });\n</code></pre>\n\n<p><em>etc...</em></p>\n\n<p>One caveat of the new <code>:data()</code> selector is that you must set the <code>data</code> value <em>by code</em> for it to be selected. This means that for the above to work, defining the <code>data</code> in HTML is not enough. You must first do this:</p>\n\n<pre><code>$(\"li\").first().data(\"company\", \"Microsoft\");\n</code></pre>\n\n<p>This is fine for single page applications where you are likely to use <code>$(...).data(\"datakey\", \"value\")</code> in this or similar ways.</p>\n",
                    "is_accepted": false,
                    "score": 18
                }
            ],
            "body": "<p>I would like to know what selectors are available for these data attributes that come with HTML5.</p>\n\n<p>Taking this piece of HTML as an example:</p>\n\n<pre><code>&lt;ul data-group=\"Companies\"&gt;\n  &lt;li data-company=\"Microsoft\"&gt;&lt;/li&gt;\n  &lt;li data-company=\"Google\"&gt;&lt;/li&gt;\n  &lt;li data-company =\"Facebook\"&gt;&lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n\n<p>Are there selectors to get:</p>\n\n<ul>\n<li>All elements with data-company=\"Microsoft\" below \"Companies\"</li>\n<li>All elements with data-company!=\"Microsoft\" below \"Companies\"</li>\n<li>In other cases is it possible to use other selectors like \"contains, less than, greater than, etc...\".</li>\n</ul>\n",
            "last_activity_date": 1420554628,
            "question_id": 4146502,
            "score": 262,
            "tags": [
                "javascript",
                "jquery",
                "jquery-selectors",
                "custom-data-attribute"
            ],
            "title": "jQuery selectors on custom data attributes on HTML5"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Jquery.map makes more sense when you are doing work on arrays as it performs very well with arrays.</p>\n\n<p>Jquery.each is best used when iterating through selector items. Which is evidenced in that the map function does not use a selector.  </p>\n\n<pre><code>$(selector).each(...)\n\n$.map(arr....)\n</code></pre>\n\n<p>as you can see, map is not intended to be used with selectors.</p>\n",
                    "is_accepted": false,
                    "score": -5
                },
                {
                    "body": "<p>The <a href=\"http://docs.jquery.com/Utilities/jQuery.each\"><code>each</code></a> method is meant to be an immutable iterator, where as the <a href=\"http://docs.jquery.com/Utilities/jQuery.map\"><code>map</code></a> method can be used as an iterator, but is really meant to manipulate the supplied array and return a new array.</p>\n\n<p>Another important thing to note is that the <code>each</code> function returns the original array while the <code>map</code> function returns a new array.   If you overuse the return value of the map function you can potentially waste a lot of memory.</p>\n\n<p>For example:</p>\n\n<pre><code>var items = [1,2,3,4];\n\n$.each(items, function() {\n  alert('this is ' + this);\n});\n\nvar newItems = $.map(items, function(i) {\n  return i + 1;\n});\n// newItems is [2,3,4,5]\n</code></pre>\n\n<p>You can also use the map function to remove an item from an array.  For example:</p>\n\n<pre><code>var items = [0,1,2,3,4,5,6,7,8,9];\n\nvar itemsLessThanEqualFive = $.map(items, function(i) {\n  // removes all items &gt; 5\n  if (i &gt; 5) \n    return null;\n  return i;\n});\n// itemsLessThanEqualFive = [0,1,2,3,4,5]\n</code></pre>\n\n<p>You'll also note that the <code>this</code> is not mapped in the <code>map</code> function.  You will have to supply the first parameter in the callback (eg we used <code>i</code> above).  Ironically, the callback arguments used in the each method are the reverse of the callback arguments in the map function so be careful.</p>\n\n<pre><code>map(arr, function(elem, index) {});\n// versus \neach(arr, function(index, elem) {});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 131
                },
                {
                    "body": "<p>The <code>each</code> function iterates over an array, calling the supplied function once per element, and setting <code>this</code> to the active element. This:</p>\n\n<pre><code>function countdown() {\n    alert(this + \"..\");\n}\n\n$([5, 4, 3, 2, 1]).each(countdown);\n</code></pre>\n\n<p>will alert <code>5..</code> then <code>4..</code> then <code>3..</code> then <code>2..</code> then <code>1..</code></p>\n\n<p>Map on the other hand takes an array, and returns a new array with each element changed by the function. This:</p>\n\n<pre><code>function squared() {\n    return this * this;\n}\n\nvar s = $([5, 4, 3, 2, 1]).map(squared);\n</code></pre>\n\n<p>would result in s being <code>[25, 16, 9, 4, 1]</code>.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p><strong>1: The arguments to the callback functions are reversed.</strong></p>\n\n<p><a href=\"http://api.jquery.com/each/\" rel=\"nofollow\"><code>.each()</code></a>'s, <a href=\"http://api.jquery.com/jquery.each/\" rel=\"nofollow\"><code>$.each()</code></a>'s, and <a href=\"http://api.jquery.com/map/\" rel=\"nofollow\"><code>.map()</code></a>'s callback function take the index first, and then the element</p>\n\n<pre><code>function (index, element) \n</code></pre>\n\n<p><a href=\"http://api.jquery.com/jquery.map/\" rel=\"nofollow\"><code>$.map()</code></a>'s callback has the same arguments, but reversed</p>\n\n<pre><code>function (element, index)\n</code></pre>\n\n<p><strong>2: <a href=\"http://api.jquery.com/each/\" rel=\"nofollow\"><code>.each()</code></a>, <a href=\"http://api.jquery.com/jquery.each/\" rel=\"nofollow\"><code>$.each()</code></a>, and <a href=\"http://api.jquery.com/map/\" rel=\"nofollow\"><code>.map()</code></a> do something special with <code>this</code></strong></p>\n\n<p><code>each()</code> calls the function in such a way that <code>this</code> points to the current element. In most cases, you don't even need the two arguments in the callback function.</p>\n\n<pre><code>function shout() { alert(this + '!') }\n\nresult = $.each(['lions', 'tigers', 'bears'], shout)\n\n// result == ['lions', 'tigers', 'bears']\n</code></pre>\n\n<p>For <a href=\"http://api.jquery.com/jquery.map/\" rel=\"nofollow\"><code>$.map()</code></a> the <code>this</code> variable refers to the global window object.</p>\n\n<p><strong>3: <code>map()</code> does something special with the callback's return value</strong></p>\n\n<p><code>map()</code> calls the function on each element, and stores the result in a new array, which it returns. You usually only need to use the first argument in the callback function.</p>\n\n<pre><code>function shout(el) { return el + '!' }\n\nresult = $.map(['lions', 'tigers', 'bears'], shout)\n\n// result == ['lions!', 'tigers!', 'bears!']\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 53
                },
                {
                    "body": "<p><strong>i understood it by this</strong>:</p>\n\n<pre><code>function fun1() {\n    return this + 1;\n}\nfunction fun2(el) {\n    return el + 1;\n}\n\nvar item = [5,4,3,2,1];\n\nvar newitem1 = $.each(item, fun1);\nvar newitem2 = $.map(item, fun2);\n\nconsole.log(newitem1); // [5, 4, 3, 2, 1] \nconsole.log(newitem2); // [6, 5, 4, 3, 2] \n</code></pre>\n\n<p><strong>so, \"<em>each</em>\" function returns the original array while \"<em>map</em>\" function returns a new array</strong> </p>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>In jQuery, the <code>map</code> and <code>each</code> functions seem to do the same thing. Are there any practical differences between the two? When would you choose to use one instead of the other?</p>\n",
            "last_activity_date": 1424462641,
            "question_id": 749084,
            "score": 120,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "jQuery map vs. each"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>Some of it is native, the rest is available through libraries.</p>\n\n<p>For example <a href=\"http://www.datejs.com/\" rel=\"nofollow\">Datejs</a> is a good international date library.</p>\n\n<p>For the rest, it's just about language translation, and JavaScript is natively Unicode compatible (as well as all major browsers).</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Microsoft has recently released a jquery globalization plugin. The details are <a href=\"http://weblogs.asp.net/scottgu/archive/2010/06/10/jquery-globalization-plugin-from-microsoft.aspx\" rel=\"nofollow\">here</a></p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Localisation support in legacy browsers is poor.  Originally, this was due to phrases in the ECMAScript language spec that look like this:</p>\n\n<blockquote>\n  <p><strong>Number.prototype.toLocaleString()</strong><br>\n  Produces a string value that represents the value of the Number formatted according to the\n  conventions of the host environment\u2019s current locale. This function is implementation-dependent, and\n  it is permissible, but not encouraged, for it to return the same thing as <strong>toString</strong>.</p>\n</blockquote>\n\n<p>Every localisation method defined in the spec is defined as \"implementation-dependent\", which results in a lot of inconsistencies.  In this instance, Chrome Opera and Safari would return the same thing as <code>.toString()</code>.  Firefox and IE will return locale formatted strings, and IE even includes a thousands separator (perfect for currency strings).  Chrome was recently updated to return a thousands-separated string, though with no fixed decimal. </p>\n\n<p><strong>For modern environments</strong>, the <a href=\"http://ecma-international.org/ecma-402/1.0/\" rel=\"nofollow\">ECMAScript Internationalization API spec</a>, a new standard that complements the ECMAScript Language spec, provides much better support for string comparison, number formatting, and date and time formatting; it also fixes the corresponding functions in the Language Spec. An introduction can be found <a href=\"http://norbertlindenberg.com/2012/10/ecmascript-internationalization-api/index.html\" rel=\"nofollow\">here</a>. Implementations are available in:</p>\n\n<ul>\n<li>Chrome 24</li>\n<li>Firefox 29</li>\n<li>Internet Explorer 11</li>\n<li>Opera 15</li>\n</ul>\n\n<p>There is also a compatibility implementation, <a href=\"http://github.com/andyearnshaw/Intl.js\" rel=\"nofollow\">Intl.js</a>, which will provide the API in environments where it doesn't already exist.</p>\n\n<p>Determining the user's preferred language remains a problem, since there's no specification for obtaining the current language.  Each browser implements a method to obtain a language string, but this could be based on the user's operating system language or just the language of the browser:</p>\n\n<pre><code>// navigator.userLanguage for IE, navigator.language for others\nvar lang = navigator.language || navigator.userLanguage;\n</code></pre>\n\n<p>A good workaround for this is to dump the Accept-Language header from the server to the client.  If formatted as a JavaScript, it can be passed to the Internationalization API constructors, which will automatically pick the best (or first-supported) locale.</p>\n\n<p>In short, you have to put in a lot of the work yourself, or use a <a href=\"http://weblogs.asp.net/scottgu/archive/2010/06/10/jquery-globalization-plugin-from-microsoft.aspx\" rel=\"nofollow\">framework/library</a>, because you cannot rely on the browser to do it for you.</p>\n\n<p>Various libraries and plugins for localisation:</p>\n\n<ul>\n<li><a href=\"http://github.com/andyearnshaw/Intl.js\" rel=\"nofollow\">Intl.js</a> - a compatibility implementation of the Internationalisation API</li>\n<li><a href=\"http://i18next.com/\" rel=\"nofollow\">i18next</a> for i18n (incl. jquery plugin, translation ui,...)</li>\n<li><a href=\"http://momentjs.com/\" rel=\"nofollow\">moment.js</a> for dates</li>\n<li><a href=\"http://adamwdraper.github.com/Numeral-js/\" rel=\"nofollow\">numeral.js</a> for numbers and currency</li>\n<li><a href=\"http://eligrey.com/blog/post/localization-in-javascript\" rel=\"nofollow\">l10n.js</a></li>\n<li><a href=\"http://weblogs.asp.net/scottgu/archive/2010/06/10/jquery-globalization-plugin-from-microsoft.aspx\" rel=\"nofollow\">jQuery Globalization (plugin)</a></li>\n<li><a href=\"http://keith-wood.name/localisation.html\" rel=\"nofollow\">jQuery Localisation (plugin)</a></li>\n<li><a href=\"http://yuilibrary.com/yui/docs/intl/\" rel=\"nofollow\">YUI Internationalization support</a></li>\n<li><a href=\"http://l10ns.org\" rel=\"nofollow\">L10ns</a> tool for i18n workflow and complex string formatting</li>\n<li><a href=\"https://github.com/mbitto/jquery.i18Now\" rel=\"nofollow\">jquery.i18Now</a> for dates</li>\n<li><a href=\"https://github.com/gammasoft/browser-i18n\" rel=\"nofollow\">browser-i18n</a> with support to pluralization</li>\n<li><a href=\"https://github.com/martinandert/counterpart\" rel=\"nofollow\">counterpart</a> is inspired by Ruby's famous <a href=\"https://github.com/svenfuchs/i18n\" rel=\"nofollow\">I18n gem</a></li>\n<li><a href=\"http://requirejs.org/docs/api.html#i18n\" rel=\"nofollow\">requirejs-i18n</a> Define an I18N Bundle with RequireJS.</li>\n</ul>\n\n<p>Feel free to add/edit.</p>\n",
                    "is_accepted": true,
                    "score": 90
                },
                {
                    "body": "<p>You may try famous <a href=\"https://github.com/jamuhl/i18next\" rel=\"nofollow\">i18next</a> library.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can also try another library - <a href=\"https://github.com/wikimedia/jquery.i18n\" rel=\"nofollow\">https://github.com/wikimedia/jquery.i18n</a> .</p>\n\n<p>In addition to parameter replacement and multiple plural forms, it has support for gender a rather unique feature of custom grammar rules that some languages need.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<pre><code>var l8n = {\n    'en-US': {\n        '.email': '',\n        '.contactinfo h5': ''\n    }\n    'ko': {\n        '.email': '',\n        '.contactinfo h5': ''\n    }\n}\n\nif (window.navigator &amp;&amp; l8n[window.navigator.language]) {\n    for (var key in l8n[window.navigator.language]) {\n        document.querySelector(key).textContent = l8n[window.navigator.language][key];\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>Mozilla recently released the awesome L20n or localization 2.0. In their own words L20n is </p>\n\n<blockquote>\n  <p>an open source, localization-specific scripting language used to process gender, plurals, conjugations, and most of the other quirky elements of natural language.</p>\n</blockquote>\n\n<p>Their js implementation is on the <a href=\"https://github.com/l20n/l20n.js\" rel=\"nofollow\">github L20n repository. </a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"https://github.com/martinandert/counterpart\" rel=\"nofollow\">counterpart</a> is a translation and localization library. The project is inspired by Ruby's famous <a href=\"https://github.com/svenfuchs/i18n\" rel=\"nofollow\">I18n gem</a>.</p>\n",
                    "is_accepted": false,
                    "score": -1
                }
            ],
            "body": "<p>I'm wondering how to deal internationalization in JavaScript. I googled but I'm not getting convincing answers for:</p>\n\n<ul>\n<li>Does JavaScript have native support for internationalization? </li>\n<li>What is i18n in JavaScript? </li>\n<li>How to deal with calendars, currencies, dates, etc.?</li>\n</ul>\n\n<p>I've already read <a href=\"http://stackoverflow.com/questions/934175/internationalization-inside-javascript\">Internationalization inside Javascript</a>.</p>\n",
            "last_activity_date": 1424640719,
            "question_id": 3084675,
            "score": 76,
            "tags": [
                "javascript",
                "internationalization"
            ],
            "title": "How does internationalization work in JavaScript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I follow <a href=\"http://javascript.crockford.com/code.html\">Douglas Crockford's code conventions</a> for javascript.  I also use his <a href=\"http://www.jslint.com/\">JSLint</a> tool to validate following those conventions.</p>\n",
                    "is_accepted": true,
                    "score": 135
                },
                {
                    "body": "<p>I think that besides some syntax limitations; the naming conventions reasoning are very much language independent.  I mean, the arguments in favor of c_style_functions and JavaLikeCamelCase could equally well be used the opposite way, it's just that language users tend to follow the language authors.</p>\n\n<p>having said that, i think most libraries tend to roughly follow a simplification of Java's CamelCase.  I find <a href=\"http://javascript.crockford.com/style1.html\">Douglas Crockford advices</a> tasteful enough for me.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>That's an individual question that could depend on how you're working. Some people like to put the variable type at the begining of the variable, like \"str_message\". And some people like to use underscore between their words (\"my_message\") while others like to separate them with upper-case letters (\"myMessage\").</p>\n\n<p>I'm often working with huge JavaScript libraries with other people, so functions and variables (except the private variables inside functions) got to start with the service's name to avoid conflicts, as \"guestbook_message\".</p>\n\n<p>In short: english, lower-cased, well-organized variable and function names is preferable according to me. The names should describe their existence rather than being short.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>As Geoff says, what <a href=\"http://javascript.crockford.com/code.html\">Crockford says</a> is good.</p>\n\n<p>The only exception I follow (and have seen widely used) is to use $varname to indicate a jQuery (or whatever library) object.  E.g. </p>\n\n<p><code>var footer = document.getElementById('footer');</code></p>\n\n<p><code>var $footer = $('#footer');</code></p>\n",
                    "is_accepted": false,
                    "score": 106
                },
                {
                    "body": "<p>You can follow this <a href=\"http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml\">Google JavaScript Style Guide</a></p>\n\n<p>In general, use functionNamesLikeThis, variableNamesLikeThis, ClassNamesLikeThis, EnumNamesLikeThis, methodNamesLikeThis, and SYMBOLIC_CONSTANTS_LIKE_THIS.</p>\n\n<p>EDIT: See nice collection of <a href=\"http://addyosmani.com/blog/javascript-style-guides-and-beautifiers/\">JavaScript Style Guides And Beautifiers</a>.</p>\n",
                    "is_accepted": false,
                    "score": 56
                },
                {
                    "body": "<p>One convention I'd like to try out is naming static modules with a 'the' prefix. Check this out. When I use someone else's module, it's not easy to see how I'm supposed to use it. eg:</p>\n\n<pre><code>define(['Lightbox'],function(Lightbox) {\n  var myLightbox = new Lightbox() // not sure whether this is a constructor (non-static) or not\n  myLightbox.show('hello')\n})\n</code></pre>\n\n<p>I'm thinking about trying a convention where static modules use 'the' to indicate their preexistence. Has anyone seen a better way than this? Would look like this:</p>\n\n<pre><code>define(['theLightbox'],function(theLightbox) {\n  theLightbox.show('hello') // since I recognize the 'the' convention, I know it's static\n})\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I know there is a lot of controversy (maybe not controversy, but arguments at least) about which naming convention is the best for JavaScript.</p>\n\n<p>How do you name your variables, functions, objects and such?</p>\n\n<p>I'll leave my own thoughts on this out, as I haven't been doing JS for long (couple of years, only), and I just got a request to create a document with naming conventions to be used in our projects at work. So I've been looking (google-ing) around, and there are so many different opinions.</p>\n\n<p>The books I've read on JS also use different naming conventions themselves, but they all agree on one bit: \"Find what suits you, and stick to it.\" But now that I've read so much around, I found that I like some of the other methods a bit better than what I'm used to now.</p>\n",
            "last_activity_date": 1339009458,
            "question_id": 921133,
            "score": 137,
            "tags": [
                "javascript",
                "naming-conventions"
            ],
            "title": "javascript naming conventions"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<h1>instanceof</h1>\n\n<p>The Left Hand Side (LHS) operand is the actual object being tested to the Right Hand Side (RHS) operand which is the actual constructor of a class. The basic definition is:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>Checks the current object and returns true if the object\nis of the specified object type.\n</code></pre>\n\n<p>Here are some <a href=\"http://www.herongyang.com/JavaScript/Prototype-instanceof-Operator-Determine-Object-Type.html\">good examples</a> and here is an example taken directly from <a href=\"https://developer.mozilla.org/En/Core_JavaScript_1.5_Reference/Operators/Special_Operators/Instanceof_Operator\">Mozilla's developer site</a>:</p>\n\n<pre><code>var color1 = new String(\"green\");\ncolor1 instanceof String; // returns true\nvar color2 = \"coral\"; //no type specified\ncolor2 instanceof String; // returns false (color2 is not a String object)\n</code></pre>\n\n<p>One thing worth mentioning is <code>instanceof</code> evaluates to true if the object inherits from the classe's prototype:</p>\n\n<pre><code>var p = new Person(\"Jon\");\np instanceof Person\n</code></pre>\n\n<p>That is <code>p instanceof Person</code> is true since <code>p</code> inherits from <code>Person.prototype</code>.</p>\n\n<h3>Per the OP's request</h3>\n\n<p>I've added a small example with some sample code and an explanation.  </p>\n\n<p>When you declare a variable you give it a specific type.  </p>\n\n<p>For instance:</p>\n\n<pre><code>int i;\nfloat f;\nCustomer c;\n</code></pre>\n\n<p>The above show you some variables, namely <code>i</code>, <code>f</code>, and <code>c</code>. The types are <code>integer</code>, <code>float</code> and a user defined <code>Customer</code> data type. Types such as the above could be for any language, not just JavaScript.  However, with JavaScript when you declare a variable you don't explicitly define a type, <code>var x</code>, x could be a number / string / a user defined data type. So what <code>instanceof</code> does is it checks the object to see if it is of the type specified so from above taking the <code>Customer</code> object we could do:</p>\n\n<pre><code>var c = new Customer();\nc instanceof Customer; //Returns true as c is just a customer\nc instanceof String; //Returns false as c is not a string, it's a customer silly!\n</code></pre>\n\n<p>Above we've seen that <code>c</code> was declared with the type <code>Customer</code>. We've new'd it and checked whether it is of type <code>Customer</code> or not. Sure is, it returns true. Then still using the <code>Customer</code> object we check if it is a <code>String</code>. Nope, definitely not a <code>String</code> we newed a <code>Customer</code> object not a <code>String</code> object. In this case, it returns false.</p>\n\n<p>It really is that simple!</p>\n",
                    "is_accepted": true,
                    "score": 160
                },
                {
                    "body": "<pre><code>//Vehicle is a function. But by naming conventions\n//(first letter is uppercase), it is also an object\n//constructor function (\"class\").\nfunction Vehicle(numWheels) {\n    this.numWheels = numWheels;\n}\n\n//We can create new instances and check their types.\nmyRoadster = new Vehicle(4);\nalert(myRoadster instanceof Vehicle);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I think it's worth noting that instanceof is defined by the use of the \"new\" keyword when declaring the object. In the example from JonH;</p>\n\n<pre><code>var color1 = new String(\"green\");\ncolor1 instanceof String; // returns true\nvar color2 = \"coral\";\ncolor2 instanceof String; // returns false (color2 is not a String object)\n</code></pre>\n\n<p>What he didn't mention is this;</p>\n\n<pre><code>var color1 = String(\"green\");\ncolor1 instanceof String; // returns false\n</code></pre>\n\n<p>Specifying \"new\" actually copied the end state of the String constructor function into the color1 var, rather than just setting it to the return value. I think this better shows what the new keyword does;</p>\n\n<pre><code>function Test(name){\n    this.test = function(){\n        return 'This will only work through the \"new\" keyword.';\n    }\n    return name;\n}\n\nvar test = new Test('test');\ntest.test(); // returns 'This will only work through the \"new\" keyword.'\ntest // returns the instance object of the Test() function.\n\nvar test = Test('test');\ntest.test(); // throws TypeError: Object #&lt;Test&gt; has no method 'test'\ntest // returns 'test'\n</code></pre>\n\n<p>Using \"new\" assigns the value of \"this\" inside the function to the declared var, while not using it assigns the return value instead.</p>\n",
                    "is_accepted": false,
                    "score": 35
                },
                {
                    "body": "<p>And you can use it for error handling and debugging, like this:</p>\n\n<pre><code>try{\n    somefunction();\n} \ncatch(error){\n    if (error instanceof TypeError) {\n        // Handle type Error\n    } else if (error instanceof ReferenceError) {\n        // Handle ReferenceError\n    } else {\n        // Handle all other error types\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>There's an important facet to instanceof that does not seem to be covered in any of the comments thus far: inheritance.  A variable being evaluated by use of instanceof could return true for multiple \"types\" due to prototypal inheritance.</p>\n\n<p>For example, let's define a type and a subtype:</p>\n\n<pre><code>function Foo(){ //a Foo constructor\n    //assign some props\n    return this;\n}\n\nfunction SubFoo(){ //a SubFoo constructor\n    Foo.call( this ); //inherit static props\n    //assign some new props\n    return this;\n}\n\nSubFoo.prototype = new Foo(); // Inherit prototype\n</code></pre>\n\n<p>Now that we have a couple of \"classes\" lets make some instances, and find out what they're instances of:</p>\n\n<pre><code>var \n    foo = new Foo()\n,   subfoo = new SubFoo()\n;\n\nalert( \n    \"Q: Is foo an instance of Foo? \"\n+   \"A: \" + ( foo instanceof Foo ) \n); // -&gt; true\n\nalert( \n    \"Q: Is foo an instance of SubFoo? \" \n+   \"A: \" + ( foo instanceof SubFoo ) \n); // -&gt; false\n\nalert( \n    \"Q: Is subfoo an instance of Foo? \"\n+   \"A: \" + ( subfoo instanceof Foo ) \n); // -&gt; true\n\nalert( \n    \"Q: Is subfoo an instance of SubFoo? \"\n+   \"A: \" + ( subfoo instanceof SubFoo ) \n); // -&gt; true\n\nalert( \n    \"Q: Is subfoo an instance of Object? \"\n+   \"A: \" + ( subfoo instanceof Object ) \n); // -&gt; true\n</code></pre>\n\n<p>See that last line?  All \"new\" calls to a function return an object that inherits from Object.  This holds true even when using object creation shorthand:</p>\n\n<pre><code>alert( \n    \"Q: Is {} an instance of Object? \"\n+   \"A: \" + ( {} instanceof Object ) \n); // -&gt; true\n</code></pre>\n\n<p>And what about the \"class\" definitions themselves?  What are they instances of?</p>\n\n<pre><code>alert( \n    \"Q: Is Foo an instance of Object? \"\n+   \"A:\" + ( Foo instanceof Object) \n); // -&gt; true\n\nalert( \n    \"Q: Is Foo an instance of Function? \"\n+   \"A:\" + ( Foo instanceof Function) \n); // -&gt; true\n</code></pre>\n\n<p>I feel that understanding that any object can be an instance of MULTIPLE types is important, since you my (incorrectly) assume that you could differentiate between, say and object and a function by use of <code>instanceof</code>.  As this last example clearly shows a function <em>is</em> an object.</p>\n\n<p>This is also important if you are using any inheritance patterns and want to confirm the progeny of an object by methods other than duck-typing.  </p>\n\n<p>Hope that helps anyone exploring <code>instanceof</code>.</p>\n",
                    "is_accepted": false,
                    "score": 67
                },
                {
                    "body": "<p>The other answers here are correct, but they don't get into how <code>instanceof</code> actually works, which may be of interest to some language lawyers out there.</p>\n\n<p>Every object in JavaScript has a prototype, accessible through the <code>__proto__</code> property. Functions also have a <code>prototype</code> property, which is the initial <code>__proto__</code> for any objects created by them. When a function is created, it is given a unique object for <code>prototype</code>. The <code>instanceof</code> operator uses this uniqueness to give you an answer. Here's what <code>instanceof</code> might look like if you wrote it as a function.</p>\n\n<pre><code>function instance_of(V, F) {\n  var O = F.prototype;\n  V = V.__proto__;\n  while (true) {\n    if (V === null)\n      return false;\n    if (O === V)\n      return true;\n    V = V.__proto__;\n  }\n}\n</code></pre>\n\n<p>This is basically paraphrasing ECMA-262 edition 5.1 (also known as ES5), section 15.3.5.3. </p>\n\n<p>Note that you can reassign any object to a function's <code>prototype</code> property, and you can reassign an object's <code>__proto__</code> property after it is constructed. This will give you some interesting results:</p>\n\n<pre><code>function F() { }\nfunction G() { }\nvar p = {};\nF.prototype = p;\nG.prototype = p;\nvar f = new F();\nvar g = new G();\n\nf instanceof F;   // returns true\nf instanceof G;   // returns true\ng instanceof F;   // returns true\ng instanceof G;   // returns true\n\nF.prototype = {};\nf instanceof F;   // returns false\ng.__proto__ = {};\ng instanceof G;   // returns false\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 56
                },
                {
                    "body": "<p>On the question \"When is it appropriate and when not?\", my 2 cents:</p>\n\n<p><code>instanceof</code> is rarely useful in production code, but useful in tests where you want to assert that your code returns / creates objects of the correct types. By being explicit about the kinds of objects your code is returning / creating, your tests become more powerful as a tool for understanding and documenting your code.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I just found a real-world application and will use it more often now, I think.</p>\n\n<p>If you use jQuery events, sometimes you want to write a more generic function which may also be called directly (without event). You can use <code>instanceof</code> to check if the first parameter of your function is an instance of <code>jQuery.Event</code> and react appropriately.</p>\n\n<pre><code>var myFunction = function (el) {                \n    if (el instanceof $.Event) \n        // event specific code\n    else\n        // generic code\n};\n\n$('button').click(recalc);    // Will execute event specific code\nrecalc('myParameter');  // Will execute generic code\n</code></pre>\n\n<p>In my case, the function needed to calculate something either for all (via click event on a button) or only one specific element. The code I used:</p>\n\n<pre><code>var recalc = function (el) { \n    el = (el == undefined || el instanceof $.Event) ? $('span.allItems') : $(el);\n    // calculate...\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>The <code>instanceof</code> keyword in JavaScript can be quite confusing when it is first encountered, as people tend to think that JavaScript is not an object-oriented programming language.</p>\n\n<ul>\n<li>What is it?</li>\n<li>What problems does it solve?</li>\n<li>When is it appropriate and when not?</li>\n</ul>\n",
            "last_activity_date": 1374841096,
            "question_id": 2449254,
            "score": 182,
            "tags": [
                "javascript",
                "operators",
                "instanceof"
            ],
            "title": "What is the instanceof operator in JavaScript?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I'd make a third suggestion, <a href=\"http://code.google.com/closure/compiler/\">Google Closure Compiler</a> (and also the <a href=\"http://code.google.com/closure/utilities/\">Closure Linter</a>).  You can try it out online <a href=\"http://closure-compiler.appspot.com/home\">here</a>.</p>\n\n<blockquote>\n  <p>The Closure Compiler is a tool for making JavaScript download and run faster. It is a true compiler for JavaScript. Instead of compiling from a source language to machine code, it compiles from JavaScript to better JavaScript. It parses your JavaScript, analyzes it, removes dead code and rewrites and minimizes what's left. It also checks syntax, variable references, and types, and warns about common JavaScript pitfalls.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>By all means use JSLint. But don't get hung up on the results and on fixing everything that it warns about. It will help you improve your code, and it will help you find potential bugs, but not everything that JSLint complains about turns out to be a real problem, so don't feel like you have to complete the process with zero warnings.</p>\n\n<p>Pretty much any Javascript code with any significant length or complexity will produce warnings in JSLint, no matter how well written it is. If you don't believe me, try running some popular libraries like JQuery through it.</p>\n\n<p>Some JSLint warnings are more valuable than others: learn which ones to watch out for, and which ones are less important. Every warning should be considered, but don't feel obliged to fix your code to clear any given warning; it's perfectly okay to look at the code and decide you're happy with it; there are times when things that JSlint doesn't like are actually the right thing to do.</p>\n",
                    "is_accepted": true,
                    "score": 13
                },
                {
                    "body": "<p><em>tl;dr takeaway</em>: </p>\n\n<p>If you're looking for a very high standard for yourself or team, JSLint. But its not necessarily THE standard, just A standard, some of which comes to us dogmatically from a javascript god named Doug Crockford. If you want to be a bit more flexible, or have some old pros on your team that don't buy into JSLint's opinions, or are going back and forth between JS and other C-family languages on a regular basis, try JSHint.</p>\n\n<p><em>long version</em>:</p>\n\n<p>The reasoning behind the fork explains pretty well why JSHint exists: </p>\n\n<p><a href=\"http://badassjs.com/post/3364925033/jshint-an-community-driven-fork-of-jslint\">http://badassjs.com/post/3364925033/jshint-an-community-driven-fork-of-jslint</a> <a href=\"https://web.archive.org/web/20130819215629/http://anton.kovalyov.net/2011/02/20/why-i-forked-jslint-to-jshint/\">http://anton.kovalyov.net/2011/02/20/why-i-forked-jslint-to-jshint/</a></p>\n\n<p>So I guess the idea is that it's \"community-driven\" rather than Crockford-driven. In practicality, JSHint is generally a bit more lenient (or at least configurable or agnostic) on a few stylistic and minor syntactical \"opinions\" that JSLint is a stickler on. </p>\n\n<p>As an example, if you think both the A and B below are fine, or if you want to write code with one or more of the aspects of A that aren't available in B, JSHint is for you. If you think B is the only correct option... JSLint. I'm sure there are other differences, but this highlights a few.  </p>\n\n<p><em>A) Passes JSHint out of the box - fails JSLint</em></p>\n\n<pre><code>(function() {\n  \"use strict\";\n  var x=0, y=2;\n  function add(val1, val2){\n    return val1 + val2;\n  }\n  var z;\n  for (var i=0; i&lt;2; i++){\n    z = add(y, x+i);\n  }\n})();\n</code></pre>\n\n<p><em>B) Passes Both JSHint and JSLint</em></p>\n\n<pre><code>(function () {\n    \"use strict\";\n    var x = 0, y = 2, i, z;\n    function add(val1, val2) {\n       return val1 + val2;\n    }\n    for (i = 0; i &lt; 2; i += 1) {\n        z = add(y, x + i);\n    }\n}());\n</code></pre>\n\n<p>Personally I find JSLint code very nice to look at, and the only hard features of it that I disagree with are its <a href=\"http://stackoverflow.com/questions/4646455/jslint-error-move-all-var-declarations-to-the-top-of-the-function\">hatred of more than one var declaration in a function and of for-loop <code>var i = 0</code> declarations</a>, and some of the whitespace enforcements for function declarations. </p>\n\n<p>A few of the whitespace things that JSLint enforces, I find to be not necessarily bad, but out of sync with some pretty standard whitespace conventions for other languages in the family (C, Java, Python, etc...), which are often followed as conventions in Javascript as well. Since I'm writing in various of these languages throughout the day, and working with team members who don't like Lint-style whitespace in our code, I find JSHint to be a good balance.  It catches stuff that's a legitimate bug or really bad form, but doesn't bark at me like JSLint does (sometimes, in ways I can't disable) for the stylistic opinions or syntactic nitpicks that I don't care for.  </p>\n\n<p>A lot of good libraries aren't Lint'able, which to me demonstrates that there's some truth to the idea that some of JSLint is simply just about pushing 1 version of \"good code\" (which is, indeed, good code).  But then again, the same libraries (or other good ones) probably aren't Hint'able either, so, touch\u00e9.</p>\n",
                    "is_accepted": false,
                    "score": 291
                },
                {
                    "body": "<p>Well, Instead of doing manual lint settings we can include all the lint settings at the top of our JS file itself e.g.</p>\n\n<p>Declare all the global var in that file like: <br></p>\n\n<pre><code>/*global require,dojo,dojoConfig,alert */\n</code></pre>\n\n<p>Declare all the lint settings like: <br></p>\n\n<pre><code>/*jslint browser:true,sloppy:true,nomen:true,unparam:true,plusplus:true,indent:4 */\n</code></pre>\n\n<p>Hope this will help you :)</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I had the same question a couple of weeks ago and was evaluating both JSLint and JSHint.</p>\n\n<p>Contrary to the answers in this question, my conclusion was not:</p>\n\n<blockquote>\n  <p>By all means use JSLint.</p>\n</blockquote>\n\n<p>Or:</p>\n\n<blockquote>\n  <p>If you're looking for a very high standard for yourself or team, JSLint.</p>\n</blockquote>\n\n<p>As you can configure <em>almost</em> the same rules in JSHint as in JSLint. So I would argue that there's not much difference in the rules you could achieve.</p>\n\n<p>So the reasons to choose one over another are more political than technical.</p>\n\n<p>We've finally decided to go with JSHint because of the following reasons:</p>\n\n<ul>\n<li>Seems to be more configurable that JSLint.</li>\n<li>Looks definitely more community-driven rather than one-man-show (no matter how cool <em>The Man</em> is).</li>\n<li>JSHint matched our code style OOTB better that JSLint.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>There is an another <em>mature and actively developed</em> \"player\" on the javascript linting front - <a href=\"https://github.com/eslint/eslint\" rel=\"nofollow\"><code>ESLint</code></a>:</p>\n\n<blockquote>\n  <p>ESLint is a tool for identifying and reporting on patterns found in\n  ECMAScript/JavaScript code. In many ways, it is similar to JSLint and\n  JSHint with a few exceptions:</p>\n  \n  <ul>\n  <li>ESLint uses Esprima for JavaScript parsing.  </li>\n  <li>ESLint uses an AST to evaluate patterns in code. </li>\n  <li>ESLint is completely pluggable, every\n  single rule is a plugin and you can add more at runtime.</li>\n  </ul>\n</blockquote>\n\n<p>What really matters here is that it is <strong>extendable via custom plugins/rules</strong>. There are already multiple plugins written for different purposes. Among <a href=\"https://www.npmjs.com/search?q=eslint%20plugin\" rel=\"nofollow\">others</a>, there are:</p>\n\n<ul>\n<li><a href=\"https://www.npmjs.com/package/eslint-plugin-angular\" rel=\"nofollow\">eslint-plugin-angular</a> (enforces some of the guidelines from <a href=\"https://github.com/johnpapa/angular-styleguide\" rel=\"nofollow\">John Papa's Angular Style Guide</a>)</li>\n<li><a href=\"https://www.npmjs.com/packages/eslint-plugin-angularjs\" rel=\"nofollow\">eslint-plugin-angularjs</a></li>\n<li><a href=\"https://www.npmjs.com/packages/eslint-plugin-backbone\" rel=\"nofollow\">eslint-plugin-backbone</a></li>\n</ul>\n\n<p>And, of course, you can use your build tool of choice to run <code>ESLint</code>:</p>\n\n<ul>\n<li><a href=\"https://www.npmjs.com/package/grunt-eslint\" rel=\"nofollow\">grunt-eslint</a></li>\n<li><a href=\"https://www.npmjs.com/package/gulp-eslint\" rel=\"nofollow\">gulp-eslint</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 10
                }
            ],
            "body": "<p>I am currently validating my JavaScript against JSLint and making progress on, it's assisting me to write better JavaScript - in particular in working with the JQuery library.</p>\n\n<p>I have now come across <strong>JSHint</strong>, a fork of <strong>JSLint</strong>.<br>\nSo I am wondering for web applications, which are very much JavaScript driven, which is the better or most applicable validation tool to work against :  </p>\n\n<ul>\n<li>JSLint or JSHint?  </li>\n</ul>\n\n<p>I want to decide now on a validation mechanism and moving forward, use this for client side validation.</p>\n\n<p>And Difference between jshint and jslint? Please explain in single javascript example.</p>\n\n<p>Links:</p>\n\n<ol>\n<li><p><strong>jshint</strong>-    <a href=\"http://www.jshint.com/\">http://www.jshint.com/</a></p></li>\n<li><p><strong>jslint</strong>-    <a href=\"http://jslint.com/\">http://jslint.com/</a></p></li>\n</ol>\n",
            "last_activity_date": 1425865936,
            "question_id": 6803305,
            "score": 202,
            "tags": [
                "javascript",
                "jquery",
                "jslint",
                "jshint"
            ],
            "title": "Should I use JSLint or JSHint JavaScript validation?"
        },
        {
            "answer_count": 18,
            "answers": [
                {
                    "body": "<p>You can add and remove a special CSS class and modify the input value <code>onfocus</code>/<code>onblur</code> with JavaScript:</p>\n\n<pre><code>&lt;input type=\"text\" class=\"hint\" value=\"Search...\"\n    onfocus=\"if (this.className=='hint') { this.className = ''; this.value = ''; }\"\n    onblur=\"if (this.value == '') { this.className = 'hint'; this.value = 'Search...'; }\"&gt;\n</code></pre>\n\n<p>Then specify a <strong>hint</strong> class with the styling you want in your CSS for example:</p>\n\n<pre><code>input.hint {\n    color: grey;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 20
                },
                {
                    "body": "<p>You could easily have a box read \"Search\" then when the focus is changed to it have the text be removed.  Something like this:</p>\n\n<p><code>\n&lt;input onfocus=\"this.value=''\" type=\"text\" value=\"Search\" /&gt;\n</code></p>\n\n<p>Of course if you do that the user's own text will disappear when they click.  So you probably want to use something more robust:</p>\n\n<p><code>\n&lt;input name=\"keyword_\" type=\"text\" size=\"25\"  style=\"color:#999;\" maxlength=\"128\" id=\"keyword_\"\nonblur=\"this.value = this.value || this.defaultValue; this.style.color = '#999';\"\nonfocus=\"this.value=''; this.style.color = '#000';\"\nvalue=\"Search Term\"&gt;\n</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The best way is to wire up your JavaScript events using some kind of JavaScript library like <a href=\"http://en.wikipedia.org/wiki/JQuery\" rel=\"nofollow\">jQuery</a> or <a href=\"http://en.wikipedia.org/wiki/Yahoo!_UI_Library\" rel=\"nofollow\">YUI</a> and put your code in an external .js-file.</p>\n\n<p>But if you want a quick-and-dirty solution this is your inline HTML-solution:</p>\n\n<pre><code>&lt;input type=\"text\" id=\"textbox\" value=\"Search\"\n    onclick=\"if(this.value=='Search'){this.value=''; this.style.color='#000'}\" \n    onblur=\"if(this.value==''){this.value='Search'; this.style.color='#555'}\" /&gt;\n</code></pre>\n\n<p><strong>Updated</strong>: Added the requested coloring-stuff.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Use a background image to render the text:</p>\n\n<pre><code> input.foo { }\n input.fooempty { background-image: url(\"blah.png\"); }\n</code></pre>\n\n<p>Then all you have to do is detect <code>value == 0</code> and apply the right class:</p>\n\n<pre><code> &lt;input class=\"foo fooempty\" value=\"\" type=\"text\" name=\"bar\" /&gt;\n</code></pre>\n\n<p>And the jQuery JavaScript code looks like this:</p>\n\n<pre><code>jQuery(function($)\n{\n    var target = $(\"input.foo\");\n    target.bind(\"change\", function()\n    {\n        if( target.val().length &gt; 1 )\n        {\n            target.addClass(\"fooempty\");\n        }\n        else\n        {\n            target.removeClass(\"fooempty\");\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You want to assign something like this to onfocus:</p>\n\n<pre><code>if (this.value == this.defaultValue)\n    this.value = ''\nthis.className = ''\n</code></pre>\n\n<p>and this to onblur:</p>\n\n<pre><code>if (this.value == '')\n    this.value = this.defaultValue\nthis.className = 'placeholder'\n</code></pre>\n\n<p>(You can use something a bit cleverer, like a framework function, to do the classname switching if you want.)</p>\n\n<p>With some CSS like this:</p>\n\n<pre><code>input.placeholder{\n    color: gray;\n    font-style: italic;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>That is known as a textbox watermark, and it is done via JavaScript.</p>\n\n<ul>\n<li><a href=\"http://naspinski.net/post/Text-Input-Watermarks-using-Javascript-%28IE-Compatible%29.aspx\">http://naspinski.net/post/Text-Input-Watermarks-using-Javascript-(IE-Compatible).aspx</a></li>\n</ul>\n\n<p>or if you use jQuery, a much better approach:</p>\n\n<ul>\n<li><a href=\"http://digitalbush.com/projects/watermark-input-plugin/\">http://digitalbush.com/projects/watermark-input-plugin/</a></li>\n<li>or <a href=\"http://code.google.com/p/jquery-watermark\">code.google.com/p/jquery-watermark</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 81
                },
                {
                    "body": "<p>When the page first loads, have Search appear in the text box, colored gray if you want it to be.</p>\n\n<p>When the input box receives focus, select all of the text in the search box so that the user can just start typing, which will delete the selected text in the process. This will also work nicely if the user wants to use the search box a second time since they won't have to manually highlight the previous text to delete it.</p>\n\n<pre><code>&lt;input type=\"text\" value=\"Search\" onfocus=\"this.select();\" /&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here's a functional example with Google Ajax library cache and some jQuery magic.</p>\n\n<p>This would be the CSS:</p>\n\n<pre><code>&lt;style type=\"text/stylesheet\" media=\"screen\"&gt;\n    .inputblank { color:gray; }  /* Class to use for blank input */\n&lt;/style&gt;\n</code></pre>\n\n<p>This would would be the JavaScript code:</p>\n\n<pre><code>&lt;script language=\"javascript\"\n        type=\"text/javascript\"\n        src=\"http://www.google.com/jsapi\"&gt;\n&lt;/script&gt;\n&lt;script&gt;\n    // Load jQuery\n    google.load(\"jquery\", \"1\");\n\n    google.setOnLoadCallback(function() {\n        $(\"#search_form\")\n            .submit(function() {\n                alert(\"Submitted. Value= \" + $(\"input:first\").val());\n                return false;\n        });\n\n        $(\"#keywords\")\n            .focus(function() {\n                if ($(this).val() == 'Search') {\n                    $(this)\n                    .removeClass('inputblank')\n                    .val('');\n                }\n            })\n            .blur(function() {\n                if ($(this).val() == '') {\n                    $(this)\n                    .addClass('inputblank')\n                    .val('Search');\n                }\n            });\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p>And this would be the HTML:</p>\n\n<pre><code>&lt;form id=\"search_form\"&gt;\n    &lt;fieldset&gt;\n        &lt;legend&gt;Search the site&lt;/legend&gt;\n            &lt;label for=\"keywords\"&gt;Keywords:&lt;/label&gt;\n        &lt;input id=\"keywords\" type=\"text\" class=\"inputblank\" value=\"Search\"/&gt;\n    &lt;/fieldset&gt;\n&lt;/form&gt;\n</code></pre>\n\n<p>I hope it's enough to make you interested in both the GAJAXLibs and in jQuery.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>User AJAXToolkit from <a href=\"http://asp.net\" rel=\"nofollow\">http://asp.net</a></p>\n\n<p>\n            \n            </p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>For jQuery users: naspinski's jQuery link seems broken, but try this one:\n<a href=\"http://remysharp.com/2007/01/25/jquery-tutorial-text-box-hints/\" rel=\"nofollow\">http://remysharp.com/2007/01/25/jquery-tutorial-text-box-hints/</a></p>\n\n<p>You get a free jQuery plugin tutorial as a bonus. :)</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<pre><code>$('input[value=\"text\"]').focus(function(){ \nif ($(this).attr('class')=='hint') \n{ \n   $(this).removeClass('hint'); \n   $(this).val(''); \n}\n});\n\n$('input[value=\"text\"]').blur(function(){\n  if($(this).val() == '')\n  {\n    $(this).addClass('hint');\n    $(this).val($(this).attr('title'));\n  } \n});\n\n&lt;input type=\"text\" value=\"\" title=\"Default Watermark Text\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>This is called \"watermark\".</p>\n\n<p>I found the jQuery plugin <em><a href=\"http://plugins.jquery.com/project/jquery-watermark\" rel=\"nofollow\">jQuery watermark</a></em> which, unlike the first answer, does not require extra setup (the original answer also needs a special call to before the form is submitted).</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I found the jQuery plugin <em><a href=\"http://code.google.com/p/jquery-watermark/\" rel=\"nofollow\">jQuery Watermark</a></em> to be better than the one listed in the top answer. Why better? Because it supports password input fields. Also, setting the color of the watermark (or other attributes) is as easy as creating a <code>.watermark</code> reference in your CSS file.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I posted <a href=\"http://www.drewnoakes.com/code/javascript/hintTextbox.html\" rel=\"nofollow\">a solution for this on my website</a> some time ago.  To use it, import a single <code>.js</code> file:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"/hint-textbox.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>Then annotate whatever inputs you want to have hints with the CSS class <code>hintTextbox</code>:</p>\n\n<pre><code>&lt;input type=\"text\" name=\"email\" value=\"enter email\" class=\"hintTextbox\" /&gt;\n</code></pre>\n\n<p>More information and example are available <a href=\"http://www.drewnoakes.com/code/javascript/hintTextbox.html\" rel=\"nofollow\">here</a>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can set the <strong>placeholder</strong> using the <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/common-input-element-attributes.html#the-placeholder-attribute\" rel=\"nofollow\"><code>placeholder</code> attribute</a> in HTML (<a href=\"http://caniuse.com/input-placeholder\" rel=\"nofollow\">browser support</a>). The <code>font-style</code> and <code>color</code> can be <a href=\"http://css-tricks.com/snippets/css/style-placeholder-text/\" rel=\"nofollow\">changed with CSS</a> (although browser support is limited).</p>\n\n<p><div class=\"snippet\" data-lang=\"js\" data-hide=\"false\">\r\n<div class=\"snippet-code\">\r\n<pre class=\"snippet-code-css lang-css prettyprint-override\"><code>input[type=search]::-webkit-input-placeholder { /* Safari, Chrome(, Opera?) */\r\n color:gray;\r\n font-style:italic;\r\n}\r\ninput[type=search]:-moz-placeholder { /* Firefox 18- */\r\n color:gray;\r\n font-style:italic;\r\n}\r\ninput[type=search]::-moz-placeholder { /* Firefox 19+ */\r\n color:gray;\r\n font-style:italic;\r\n}\r\ninput[type=search]:-ms-input-placeholder { /* IE (10+?) */\r\n color:gray;\r\n font-style:italic;\r\n}</code></pre>\r\n<pre class=\"snippet-code-html lang-html prettyprint-override\"><code>&lt;input placeholder=\"Search\" type=\"search\" name=\"q\"&gt;</code></pre>\r\n</div>\r\n</div>\r\n</p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>Use <a href=\"http://code.google.com/p/jquery-formnotifier/\" rel=\"nofollow\">jQuery Form Notifier</a> - it is one of the most popular jQuery plugins and doesn't suffer from the bugs some of the other jQuery suggestions here do (for example, you can freely style the watermark, without worrying if it will get saved to the database).</p>\n\n<p>jQuery Watermark uses a single CSS style directly on the form elements (I noticed that CSS font-size properties applied to the watermark also affected the text boxes -- not what I wanted). The plus with jQuery Watermark is you can drag-drop text into fields (jQuery Form Notifier doesn't allow this).</p>\n\n<p>Another one suggested by some others (the one at digitalbrush.com), will accidentally submit the watermark value to your form, so I strongly recommend against it.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Another option, if you're happy to have this feature only for newer browsers, is to use the support offered by HTML 5's <strong>placeholder</strong> attribute:</p>\n\n<pre><code>&lt;input name=\"email\" placeholder=\"Email Address\"&gt;\n</code></pre>\n\n<p>You can try demos out <a href=\"http://diveintohtml5.info/examples/input-placeholder.html\">here</a> and in <em><a href=\"http://davidwalsh.name/html5-placeholder-css\">HTML5 Placeholder Styling with CSS</a></em>.</p>\n\n<p>Be sure to check the <a href=\"http://caniuse.com/#feat=input-placeholder\">browser compatibility of this feature</a>. Support in Firefox was added in 3.7. Chrome is fine. Internet&nbsp;Explorer only added support in 10. If you target a browser that does not support input placeholders, you can use a jQuery plugin called <a href=\"https://github.com/mathiasbynens/jquery-placeholder\">jQuery HTML5 Placeholder</a>, and then just add the following JavaScript code to enable it.</p>\n\n<pre><code>$('input[placeholder], textarea[placeholder]').placeholder();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 189
                },
                {
                    "body": "<p>I like the solution of \"Knowledge Chikuse\" - simple and clear. Only need to add a call to blur when the page load is ready which will set the initial state:</p>\n\n<pre><code>$('input[value=\"text\"]').blur();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want the search box on my web page to display the word \"Search\" in gray italics. When the box receives focus, it should look just like an empty text box. If there is already text in it, it should display the text normally (black, non-italics). This will help me avoid clutter by removing the label.</p>\n\n<p>BTW, this is an on-page <a href=\"http://en.wikipedia.org/wiki/Ajax_%28programming%29\">Ajax</a> search, so it has no button.</p>\n",
            "last_activity_date": 1412583735,
            "question_id": 108207,
            "score": 124,
            "tags": [
                "javascript",
                "html"
            ],
            "title": "How do I make an HTML text box show a hint when empty?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>There are currently three distinct events which may or may not be triggered when the client devices moves. Two of them are focused around <em>orientation</em> and the last on <em>motion</em>:</p>\n\n<ul>\n<li><p><code>ondeviceorientation</code> is known to work on the desktop version of Chrome, and most Apple laptops seems to have the hardware required for this to work. It also works on Mobile Safari on the iPhone 4 with iOS 4.2. In the event handler function, you can access <code>alpha</code>, <code>beta</code>, <code>gamma</code> values on the event data supplied as the only argument to the function.</p></li>\n<li><p><a href=\"https://developer.mozilla.org/en/DOM/window.onmozorientation\"><code>onmozorientation</code></a> is supported on Firefox 3.6 and newer. Again, this is known to work on most Apple laptops, but might work on Windows or Linux machines with accelerometer as well. In the event handler function, look for <code>x</code>, <code>y</code>, <code>z</code> fields on the event data supplied as first argument.</p></li>\n<li><p><code>ondevicemotion</code> is known to work on iPhone 3GS + 4 and iPad (both with iOS 4.2), and provides data related to the current acceleration of the client device. The event data passed to the handler function has <code>acceleration</code> and <code>accelerationIncludingGravity</code>, which both have three fields for each axis: <code>x</code>, <code>y</code>, <code>z</code></p></li>\n</ul>\n\n<p>The \"earthquake detecting\" sample website uses a series of <code>if</code> statements to figure out which event to attach to (in a somewhat prioritized order) and passes the data received to  a common <code>tilt</code> function:</p>\n\n<pre><code>if (window.DeviceOrientationEvent) {\n    window.addEventListener(\"deviceorientation\", function () {\n        tilt([event.beta, event.gamma]);\n    }, true);\n} else if (window.DeviceMotionEvent) {\n    window.addEventListener('devicemotion', function () {\n        tilt([event.acceleration.x * 2, event.acceleration.y * 2]);\n    }, true);\n} else {\n    window.addEventListener(\"MozOrientation\", function () {\n        tilt([orientation.x * 50, orientation.y * 50]);\n    }, true);\n}\n</code></pre>\n\n<p>The constant factors 2 and 50 are used to \"align\" the readings from  the two latter events with those from the first, but these are <em>by no means</em> precise representations. For this simple \"toy\" project it works just fine, but if you need to use the data for something slightly more serious, you will have to get familiar with the units of the values provided in the different events and treat them with respect :)</p>\n",
                    "is_accepted": true,
                    "score": 99
                },
                {
                    "body": "<p>Can't add a comment to the excellent explanation in the other post but wanted to mention that a great documentation source can be found <a href=\"http://www.w3.org/TR/orientation-event/\" rel=\"nofollow\">here</a>.</p>\n\n<p>It is enough to register an event function for accelerometer like so:</p>\n\n<pre><code>if(window.DeviceMotionEvent){\n  window.addEventListener(\"devicemotion\", motion, false);\n}else{\n  console.log(\"DeviceMotionEvent is not supported\");\n}\n</code></pre>\n\n<p>with the handler:</p>\n\n<pre><code>function motion(event){\n  console.log(\"Accelerometer: \"\n    + event.accelerationIncludingGravity.x + \", \"\n    + event.accelerationIncludingGravity.y + \", \"\n    + event.accelerationIncludingGravity.z\n  );\n}\n</code></pre>\n\n<p>And for magnetometer a following event handler has to be registered:</p>\n\n<pre><code>if(window.DeviceOrientationEvent){\n  window.addEventListener(\"deviceorientation\", orientation, false);\n}else{\n  console.log(\"DeviceOrientationEvent is not supported\");\n}\n</code></pre>\n\n<p>with a handler:</p>\n\n<pre><code>function orientation(event){\n  console.log(\"Magnetometer: \"\n    + event.alpha + \", \"\n    + event.beta + \", \"\n    + event.gamma\n  );\n}\n</code></pre>\n\n<p>There are also fields specified in the motion event for a gyroscope but that does not seem to be universally supported (e.g. it didn't work on a Samsung Galaxy Note).</p>\n\n<p>I also have a simple working code on <a href=\"https://github.com/infinite-internship/Learning-Sensor-Access-in-JS\" rel=\"nofollow\">GitHub</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I have recently come across a few websites that seems to access the accelerometer or gyroscope on my laptop, detecting changes in orientation or movement.</p>\n\n<p>How is this done? Must I subscribe to some kind of event on the <code>window</code> object?</p>\n\n<p>On which devices (laptops, mobile phones, tablets) is this known to work?</p>\n\n<hr>\n\n<p><sup><strong>NB</strong>: I actually already know (part of) the answer to this question, and I am going to post it right away. The reason that I am posting the question here, is to let everyone else know that accelerometer data <em>is</em> available in Javascript (on certain devices) and to challenge the community to post new findings on the subject. Currently, there seems to be almost no documentation of these features.</sup></p>\n",
            "last_activity_date": 1420619165,
            "question_id": 4378435,
            "score": 73,
            "tags": [
                "javascript",
                "accelerometer",
                "gyroscope"
            ],
            "title": "How to access accelerometer/gyroscope data from Javascript?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<pre><code>Array(11).join(\"a\")\n</code></pre>\n\n<p>(Note that an array of length 11 gets you only 10 \"a\"s, since <code>Array.join</code> puts the argument <em>between</em> the array elements.)</p>\n\n<p>Simon also points out that according to <a href=\"http://jsperf.com/repeating-character\">this jsperf</a>, it appears that it's faster in Safari and Chrome (but not Firefox) to repeat a character multiple times by simply appending using a for loop (although a bit less concise).</p>\n",
                    "is_accepted": true,
                    "score": 419
                },
                {
                    "body": "<p>// Same idea, convenient if you repeat yourself a lot:</p>\n\n<pre><code>String.prototype.repeat= function(n){\n    n= n || 1;\n    return Array(n+1).join(this);\n}\n</code></pre>\n\n<p><strong>alert('Are we there yet?\\nNo.\\n'.repeat(10))</strong></p>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<pre><code>/**  \n * Repeat a string `n`-times (recursive)\n * @param {String} s - The string you want to repeat.\n * @param {Number} n - The times to repeat the string.\n * @param {String} d - A delimiter between each string.\n */\n\nvar repeat = function (s, n, d) {\n    return --n ? s + (d || \"\") + repeat(s, n, d) : \"\" + s;\n};\n\nvar foo = \"foo\";\nconsole.log(\n    \"%s\\n%s\\n%s\\n%s\",\n\n    repeat(foo),        // \"foo\"\n    repeat(foo, 2),     // \"foofoo\"\n    repeat(foo, \"2\"),   // \"foofoo\"\n    repeat(foo, 2, \"-\") // \"foo-foo\"\n);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>In a new ES6 harmony, you will have native way for doing this with <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\">repeat</a>. Also ES6 right now only experimental, this feature is <a href=\"http://kangax.github.io/es5-compat-table/es6/\">already available</a> in FF.</p>\n\n<pre><code>\"abc\".repeat(3) // \"abcabcabc\"\n</code></pre>\n\n<p>And surely if repeat function is not available you can use old-good <code>Array(n + 1).join(\"abc\")</code></p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>An alternative is: </p>\n\n<pre><code>for(var word = ''; word.length &lt; 11; word += 'a'){}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>The most performance-wice way is <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat\" rel=\"nofollow\">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/repeat</a></p>\n\n<p>Short version is below.</p>\n\n<pre><code>  String.prototype.repeat = function(count) {\n    if (count &lt; 1) return '';\n    var result = '', pattern = this.valueOf();\n    while (count &gt; 1) {\n      if (count &amp; 1) result += pattern;\n      count &gt;&gt;&gt;= 1, pattern += pattern;\n    }\n    return result + pattern;\n  };\n  var a = \"a\";\n  console.debug(a.repeat(11));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Another interesting way to <em>quickly</em> repeat n character is to use idea from quick exponentiation algorithm:</p>\n\n<pre><code>var repeatString = function(string, n) {\n    var result = '', i;\n\n    for (i = 1; i &lt;= n; i *= 2) {\n        if ((n &amp; i) === i) {\n            result += string;\n        }\n        string = string + string;\n    }\n\n    return result;\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>In Perl I can repeat a character multiple times using the syntax:</p>\n\n<pre><code>$a = \"a\" x 10; // results in \"aaaaaaaaaa\"\n</code></pre>\n\n<p>Is there a simple way to accomplish this in Javascript? I can obviously use a function, but I was wondering if there was any built in approach, or some other clever technique.</p>\n",
            "last_activity_date": 1423653433,
            "question_id": 1877475,
            "score": 180,
            "tags": [
                "javascript"
            ],
            "title": "Repeat Character N Times"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>The following should help you out with detecting an iPad user:</p>\n\n<pre><code>var isiPad = navigator.userAgent.match(/iPad/i) != null;\n</code></pre>\n\n<p><strong>Related:</strong> <em>(detects iPhone or iPod)</em></p>\n\n<pre><code>function isiPhone(){\n    return (\n        //Detect iPhone\n        (navigator.platform.indexOf(\"iPhone\") != -1) ||\n        //Detect iPod\n        (navigator.platform.indexOf(\"iPod\") != -1)\n    );\n}\n</code></pre>\n\n<p>Here are a few links related to this topic: (<em>includes jQuery, JavaScript and PHP solutions)</em>:</p>\n\n<p><a href=\"http://jquery-howto.blogspot.com/2010/10/javascript-to-detect-ipad-visitors.html\">jQuery HowTo: Detect iPad users using JavaScript</a></p>\n\n<p><a href=\"http://jquery-howto.blogspot.com/2010/09/iphone-ipod-detection-using-jquery.html\">jQuery HowTo: Detecting &amp; Redirecting iPad / iPhone Users</a></p>\n\n<p><a href=\"http://davidwalsh.name/detect-ipad\">David Walsh's Blog : Detecting iPad use</a></p>\n\n<p><a href=\"http://cardonadesigns.com/wordpress/2010/04/04/using-php-to-detect-the-ipad-user-agent/\">Detecting iPad use via PHP</a></p>\n",
                    "is_accepted": true,
                    "score": 230
                },
                {
                    "body": "<p>I use this:</p>\n\n<pre><code>function fnIsAppleMobile() \n{\n    if (navigator &amp;&amp; navigator.userAgent &amp;&amp; navigator.userAgent != null) \n    {\n        var strUserAgent = navigator.userAgent.toLowerCase();\n        var arrMatches = strUserAgent.match(/(iphone|ipod|ipad)/);\n        if (arrMatches != null) \n             return true;\n    } // End if (navigator &amp;&amp; navigator.userAgent) \n\n    return false;\n} // End Function fnIsAppleMobile\n\n\nvar bIsAppleMobile = fnIsAppleMobile(); // TODO: Write complaint to CrApple asking them why they don't update SquirrelFish with bugfixes, then remove\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Although the <a href=\"http://stackoverflow.com/a/4617648/523233\">accepted solution</a> is correct for iPhones, it will incorrectly declare both <code>isiPhone</code> and <code>isiPad</code> to be true for users visiting your site on their iPad from the Facebook app.</p>\n\n<p>The conventional wisdom is that iOS devices have a user agent for Safari and a user agent for the UIWebView. This assumption is incorrect as iOS apps can and do customize their user agent. The main offender here is Facebook.</p>\n\n<p>Compare these user agent strings from iOS devices:</p>\n\n<pre><code># iOS Safari\niPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3\niPhone: Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3\n\n# UIWebView\niPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/98176\niPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_1 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Mobile/8B117\n\n# Facebook UIWebView\niPad: Mozilla/5.0 (iPad; U; CPU iPhone OS 5_1_1 like Mac OS X; en_US) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1.1;FBBV/4110.0;FBDV/iPad2,1;FBMD/iPad;FBSN/iPhone OS;FBSV/5.1.1;FBSS/1; FBCR/;FBID/tablet;FBLC/en_US;FBSF/1.0]\niPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; ru_RU) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1;FBBV/4100.0;FBDV/iPhone3,1;FBMD/iPhone;FBSN/iPhone OS;FBSV/5.1.1;FBSS/2; tablet;FBLC/en_US]\n</code></pre>\n\n<p>Note that on the iPad, the Facebook UIWebView's user agent string includes 'iPhone'.</p>\n\n<p><strong>The old way to identify iPhone / iPad in JavaScript:</strong></p>\n\n<pre><code>IS_IPAD = navigator.userAgent.match(/iPad/i) != null;\nIS_IPHONE = navigator.userAgent.match(/iPhone/i) != null) || (navigator.userAgent.match(/iPod/i) != null);\n</code></pre>\n\n<p>If you were to go with this approach for detecting iPhone and iPad, you would end up with IS_IPHONE and IS_IPAD both being true if a user comes from Facebook on an iPad. That could create some odd behavior!</p>\n\n<p><strong>The correct way to identify iPhone / iPad in JavaScript:</strong></p>\n\n<pre><code>IS_IPAD = navigator.userAgent.match(/iPad/i) != null;\nIS_IPHONE = (navigator.userAgent.match(/iPhone/i) != null) || (navigator.userAgent.match(/iPod/i) != null);\nif (IS_IPAD) {\n  IS_IPHONE = false;\n}\n</code></pre>\n\n<p>We declare IS_IPHONE to be false on iPads to cover for the bizarre Facebook UIWebView iPad user agent. This is one example of how user agent sniffing is unreliable. The more iOS apps that customize their user agent, the more issues user agent sniffing will have. If you can avoid user agent sniffing (hint: CSS Media Queries), DO IT.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>I use this:</p>\n\n<pre><code>//http://detectmobilebrowsers.com/ + tablets\n(function(a) {\n    if(/android|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(ad|hone|od)|iris|kindle|lge |maemo|meego.+mobile|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino|playbook|silk/i.test(a)\n    ||\n    /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4)))\n    {\n        window.location=\"yourNewIndex.html\"\n    }\n})(navigator.userAgent||navigator.vendor||window.opera);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                }
            ],
            "body": "<p>Is there a way to detect if the current user is using an iPad using jQuery/JavaScript?</p>\n",
            "last_activity_date": 1406201938,
            "question_id": 4617638,
            "score": 119,
            "tags": [
                "javascript",
                "jquery",
                "ipad",
                "browser-detection"
            ],
            "title": "Detect iPad users using jQuery?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Since every object in JS behaves like - and is generally implemented as - a hashtable, i just go with that...</p>\n\n<pre><code>var hashSweetHashTable = {};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>Unless you have a specific reason not to, just use a normal object. Object properties in Javascript can be referenced using hashtable-style syntax:</p>\n\n<pre><code>var hashtable = {};\nhashtable.foo = \"bar\";\nhashtable['bar'] = \"foo\";\n</code></pre>\n\n<p>Can then be referenced as:</p>\n\n<pre><code>hashtable['foo'];\n// or\nhashtable.bar;\n</code></pre>\n\n<p>Of course this does mean your keys have to be strings.</p>\n",
                    "is_accepted": false,
                    "score": 76
                },
                {
                    "body": "<p>Use <a href=\"http://blog.xkoder.com/2008/07/10/javascript-associative-arrays-demystified/\">JavaScript objects as associative arrays</a>.</p>\n",
                    "is_accepted": true,
                    "score": 110
                },
                {
                    "body": "<pre><code>var associativeArray = {};\nassociativeArray[\"one\"] = \"First\";\nassociativeArray[\"two\"] = \"Second\";\nassociativeArray[\"three\"] = \"Third\";\n</code></pre>\n\n<p>If you are comming from an Object Oriented language you should check this <a href=\"http://mckoss.com/jscript/object.htm\">article</a></p>\n",
                    "is_accepted": false,
                    "score": 192
                },
                {
                    "body": "<p>If you require your keys to be be any object rather than just strings then you could use my <a href=\"http://code.google.com/p/jshashtable/\">jshashtable</a>.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<pre><code>function HashTable() {\n    this.length = 0;\n    this.items = new Array();\n    for (var i = 0; i &lt; arguments.length; i += 2) {\n        if (typeof (arguments[i + 1]) != 'undefined') {\n            this.items[arguments[i]] = arguments[i + 1];\n            this.length++;\n        }\n    }\n\n    this.removeItem = function (in_key) {\n        var tmp_previous;\n        if (typeof (this.items[in_key]) != 'undefined') {\n            this.length--;\n            var tmp_previous = this.items[in_key];\n            delete this.items[in_key];\n        }\n\n        return tmp_previous;\n    }\n\n    this.getItem = function (in_key) {\n        return this.items[in_key];\n    }\n\n    this.setItem = function (in_key, in_value) {\n        var tmp_previous;\n        if (typeof (in_value) != 'undefined') {\n            if (typeof (this.items[in_key]) == 'undefined') {\n                this.length++;\n            } else {\n                tmp_previous = this.items[in_key];\n            }\n\n            this.items[in_key] = in_value;\n        }\n\n        return tmp_previous;\n    }\n\n    this.hasItem = function (in_key) {\n        return typeof (this.items[in_key]) != 'undefined';\n    }\n\n    this.clear = function () {\n        for (var i in this.items) {\n            delete this.items[i];\n        }\n\n        this.length = 0;\n    }\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p><a href=\"https://gist.github.com/alexhawkins/f6329420f40e5cafa0a4\" rel=\"nofollow\">https://gist.github.com/alexhawkins/f6329420f40e5cafa0a4</a></p>\n\n<pre><code>var HashTable = function() {\n  this._storage = [];\n  this._count = 0;\n  this._limit = 8;\n}\n\n\nHashTable.prototype.insert = function(key, value) {\n  //create an index for our storage location by passing it through our hashing function\n  var index = this.hashFunc(key, this._limit);\n  //retrieve the bucket at this particular index in our storage, if one exists\n  //[[ [k,v], [k,v], [k,v] ] , [ [k,v], [k,v] ]  [ [k,v] ] ]\n  var bucket = this._storage[index]\n    //does a bucket exist or do we get undefined when trying to retrieve said index?\n  if (!bucket) {\n    //create the bucket\n    var bucket = [];\n    //insert the bucket into our hashTable\n    this._storage[index] = bucket;\n  }\n\n  var override = false;\n  //now iterate through our bucket to see if there are any conflicting\n  //key value pairs within our bucket. If there are any, override them.\n  for (var i = 0; i &lt; bucket.length; i++) {\n    var tuple = bucket[i];\n    if (tuple[0] === key) {\n      //overide value stored at this key\n      tuple[1] = value;\n      override = true;\n    }\n  }\n\n  if (!override) {\n    //create a new tuple in our bucket\n    //note that this could either be the new empty bucket we created above\n    //or a bucket with other tupules with keys that are different than \n    //the key of the tuple we are inserting. These tupules are in the same\n    //bucket because their keys all equate to the same numeric index when\n    //passing through our hash function.\n    bucket.push([key, value]);\n    this._count++\n      //now that we've added our new key/val pair to our storage\n      //let's check to see if we need to resize our storage\n      if (this._count &gt; this._limit * 0.75) {\n        this.resize(this._limit * 2);\n      }\n  }\n  return this;\n};\n\n\nHashTable.prototype.remove = function(key) {\n  var index = this.hashFunc(key, this._limit);\n  var bucket = this._storage[index];\n  if (!bucket) {\n    return null;\n  }\n  //iterate over the bucket\n  for (var i = 0; i &lt; bucket.length; i++) {\n    var tuple = bucket[i];\n    //check to see if key is inside bucket\n    if (tuple[0] === key) {\n      //if it is, get rid of this tuple\n      bucket.splice(i, 1);\n      this._count--;\n      if (this._count &lt; this._limit * 0.25) {\n        this._resize(this._limit / 2);\n      }\n      return tuple[1];\n    }\n  }\n};\n\n\n\nHashTable.prototype.retrieve = function(key) {\n  var index = this.hashFunc(key, this._limit);\n  var bucket = this._storage[index];\n\n  if (!bucket) {\n    return null;\n  }\n\n  for (var i = 0; i &lt; bucket.length; i++) {\n    var tuple = bucket[i];\n    if (tuple[0] === key) {\n      return tuple[1];\n    }\n  }\n\n  return null;\n};\n\n\nHashTable.prototype.hashFunc = function(str, max) {\n  var hash = 0;\n  for (var i = 0; i &lt; str.length; i++) {\n    var letter = str[i];\n    hash = (hash &lt;&lt; 5) + letter.charCodeAt(0);\n    hash = (hash &amp; hash) % max;\n  }\n  return hash;\n};\n\n\nHashTable.prototype.resize = function(newLimit) {\n  var oldStorage = this._storage;\n\n  this._limit = newLimit;\n  this._count = 0;\n  this._storage = [];\n\n  oldStorage.forEach(function(bucket) {\n    if (!bucket) {\n      return;\n    }\n    for (var i = 0; i &lt; bucket.length; i++) {\n      var tuple = bucket[i];\n      this.insert(tuple[0], tuple[1]);\n    }\n  }.bind(this));\n};\n\n\nHashTable.prototype.retrieveAll = function() {\n  console.log(this._storage);\n  //console.log(this._limit);\n};\n\n/******************************TESTS*******************************/\n\nvar hashT = new HashTable();\n\nhashT.insert('Alex Hawkins', '510-599-1930');\n//hashT.retrieve();\n//[ , , , [ [ 'Alex Hawkins', '510-599-1930' ] ] ]\nhashT.insert('Boo Radley', '520-589-1970');\n//hashT.retrieve();\n//[ , [ [ 'Boo Radley', '520-589-1970' ] ], , [ [ 'Alex Hawkins', '510-599-1930' ] ] ]\nhashT.insert('Vance Carter', '120-589-1970').insert('Rick Mires', '520-589-1970').insert('Tom Bradey', '520-589-1970').insert('Biff Tanin', '520-589-1970');\n//hashT.retrieveAll();\n/* \n[ ,\n  [ [ 'Boo Radley', '520-589-1970' ],\n    [ 'Tom Bradey', '520-589-1970' ] ],\n  ,\n  [ [ 'Alex Hawkins', '510-599-1930' ],\n    [ 'Rick Mires', '520-589-1970' ] ],\n  ,\n  ,\n  [ [ 'Biff Tanin', '520-589-1970' ] ] ]\n*/\n\n//overide example (Phone Number Change)\n//\nhashT.insert('Rick Mires', '650-589-1970').insert('Tom Bradey', '818-589-1970').insert('Biff Tanin', '987-589-1970');\n//hashT.retrieveAll();\n\n/* \n[ ,\n  [ [ 'Boo Radley', '520-589-1970' ],\n    [ 'Tom Bradey', '818-589-1970' ] ],\n  ,\n  [ [ 'Alex Hawkins', '510-599-1930' ],\n    [ 'Rick Mires', '650-589-1970' ] ],\n  ,\n  ,\n  [ [ 'Biff Tanin', '987-589-1970' ] ] ]\n\n*/\n\nhashT.remove('Rick Mires');\nhashT.remove('Tom Bradey');\n//hashT.retrieveAll();\n\n/* \n[ ,\n  [ [ 'Boo Radley', '520-589-1970' ] ],\n  ,\n  [ [ 'Alex Hawkins', '510-599-1930' ] ],\n  ,\n  ,\n  [ [ 'Biff Tanin', '987-589-1970' ] ] ]\n\n\n*/\n\nhashT.insert('Dick Mires', '650-589-1970').insert('Lam James', '818-589-1970').insert('Ricky Ticky Tavi', '987-589-1970');\nhashT.retrieveAll();\n\n\n/* NOTICE HOW HASH TABLE HAS NOW DOUBLED IN SIZE UPON REACHING 75% CAPACITY ie 6/8. It is now size 16.\n [,\n  ,\n  [ [ 'Vance Carter', '120-589-1970' ] ],\n  [ [ 'Alex Hawkins', '510-599-1930' ],\n    [ 'Dick Mires', '650-589-1970' ],\n    [ 'Lam James', '818-589-1970' ] ],\n  ,\n  ,\n  ,\n  ,\n  ,\n  [ [ 'Boo Radley', '520-589-1970' ],\n    [ 'Ricky Ticky Tavi', '987-589-1970' ] ],\n  ,\n  ,\n  ,\n  ,\n  [ [ 'Biff Tanin', '987-589-1970' ] ] ]\n\n\n\n\n*/\nconsole.log(hashT.retrieve('Lam James'));  //818-589-1970\nconsole.log(hashT.retrieve('Dick Mires')); //650-589-1970\nconsole.log(hashT.retrieve('Ricky Ticky Tavi')); //987-589-1970\nconsole.log(hashT.retrieve('Alex Hawkins')); //510-599-1930\nconsole.log(hashT.retrieve('Lebron James')); //null\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I want to calculate/store some statistics information using JavaScript, the equivalent code in C# is below (features I need are -- key-value pair, string/int key value pair, manipulate values by keys, etc.), any ideas how to implement the same function in JavaScript? Looks like there is no built-in Dictionary or Hashtable?</p>\n\n<pre><code>Dictionary&lt;string, int&gt; statistics;\n\nstatistics[\"Foo\"] = 10;\nstatistics[\"Goo\"] = statistics[\"Goo\"] + 1;\nstatistics.Add(\"Zoo\", 1);\n</code></pre>\n",
            "last_activity_date": 1423598780,
            "question_id": 1208222,
            "score": 145,
            "tags": [
                "javascript",
                "dictionary",
                "hashtable"
            ],
            "title": "How do I implement a Dictionary or Hashtable in Javascript?"
        },
        {
            "answer_count": 14,
            "answers": [
                {
                    "body": "<p>Web workers operate in entirely separate contexts as individual Program's.</p>\n\n<p>This means that code cannot be moved from one context to another in object form, as they would then be able to reference objects via closures belonging to the other context.<br>\nThis is especially crucial as ECMAScript is designed to be a single threaded language, and since web workers operate in separate threads, you would then have the risk of non-thread-safe operations being performed. </p>\n\n<p>This again means that web workers need to be initialized with code in source form.</p>\n\n<p>The spec from <a href=\"http://www.whatwg.org/specs/web-workers/current-work/#dom-worker\">WHATWG</a> says</p>\n\n<blockquote>\n  <p>If the origin of the resulting\n  absolute URL is not the same as the\n  origin of the entry script, then throw\n  a SECURITY_ERR exception.</p>\n  \n  <p>Thus, scripts must be external files\n  with the same scheme as the original\n  page: you can't load a script from a\n  data: URL or javascript: URL, and an\n  https: page couldn't start workers\n  using scripts with http: URLs.</p>\n</blockquote>\n\n<p>but unfortunately it doesn't really explain why one couldn't have allowed passing a string with source code to the constructor.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><a href=\"http://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers\">http://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers</a></p>\n\n<blockquote>\n  <p>What if you want to create your worker script on the fly, or create a self-contained page without having to create separate worker files? With Blob(), you can \"inline\" your worker in the same HTML file as your main logic by creating a URL handle to the worker code as a string</p>\n</blockquote>\n\n<p><br/></p>\n\n<h2>Full example of BLOB inline worker:</h2>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n  &lt;meta charset=\"utf-8\" /&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n  &lt;div id=\"log\"&gt;&lt;/div&gt;\n\n  &lt;script id=\"worker1\" type=\"javascript/worker\"&gt;\n    // This script won't be parsed by JS engines because its type is javascript/worker.\n    self.onmessage = function(e) {\n      self.postMessage('msg from worker');\n    };\n    // Rest of your worker code goes here.\n  &lt;/script&gt;\n\n  &lt;script&gt;\n    function log(msg) {\n      // Use a fragment: browser will only render/reflow once.\n      var fragment = document.createDocumentFragment();\n      fragment.appendChild(document.createTextNode(msg));\n      fragment.appendChild(document.createElement('br'));\n\n      document.querySelector(\"#log\").appendChild(fragment);\n    }\n\n    var blob = new Blob([\n      document.querySelector('#worker1').textContent\n    ], { type: \"text/javascript\" })\n\n    // Note: window.webkitURL.createObjectURL() in Chrome 10+.\n    var worker = new Worker(window.URL.createObjectURL(blob));\n    worker.onmessage = function(e) {\n      log(\"Received: \" + e.data);\n    }\n    worker.postMessage(\"hello\"); // Start the worker.\n  &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 71
                },
                {
                    "body": "<p>You can create a single JavaScript file that is aware of its execution context and can act as both a parent script and a worker. Let's start off with a basic structure for a file like this:</p>\n\n<pre><code>(function(global) {\n    var is_worker = !this.document;\n    var script_path = is_worker ? null : (function() {\n        // append random number and time to ID\n        var id = (Math.random()+''+(+new Date)).substring(2);\n        document.write('&lt;script id=\"wts' + id + '\"&gt;&lt;/script&gt;');\n        return document.getElementById('wts' + id).\n            previousSibling.src;\n    })();\n    function msg_parent(e) {\n        // event handler for parent -&gt; worker messages\n    }\n    function msg_worker(e) {\n        // event handler for worker -&gt; parent messages\n    }\n    function new_worker() {\n        var w = new Worker(script_path);\n        w.addEventListener('message', msg_worker, false);\n        return w;\n    }\n    if (is_worker)\n        global.addEventListener('message', msg_parent, false);\n\n    // put the rest of your library here\n    // to spawn a worker, use new_worker()\n})(this);\n</code></pre>\n\n<p>As you can see, the script contains all code for both the parent's and the worker's point of view, checking if its own individual instance is a worker with <code>!document</code>. The somewhat unwieldy <code>script_path</code> computation is used to accurately calculate the script's path relative to the parent page, as the path supplied to <code>new Worker</code> is relative to the parent page, not the script.</p>\n",
                    "is_accepted": false,
                    "score": 18
                },
                {
                    "body": "<p>You can use web workers in same javascript fie using inline webworkers.</p>\n\n<p>The below article will address you to easily understand the webworkers and their limitations and debugging of webworkers.</p>\n\n<p><a href=\"http://kongaraju.blogspot.in/2012/08/mastering-in-html5-webworkers.html\" rel=\"nofollow\">Mastering in webworkers</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Web Workers can be created without a separate JavaScript file, though the process is definitely more complicated than it needs to be. Here is a HTML5 Rocks link that documents the same technique as <a href=\"http://stackoverflow.com/a/12293894/1545519\">kirankumar's answer</a>.</p>\n\n<p><a href=\"http://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers\" rel=\"nofollow\">http://www.html5rocks.com/en/tutorials/workers/basics/#toc-inlineworkers</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Using the <code>Blob</code> method, how about this for a worker factory:</p>\n\n<pre><code>var BuildWorker = function(foo){\n   var str = foo.toString()\n             .match(/^\\s*function\\s*\\(\\s*\\)\\s*\\{(([\\s\\S](?!\\}$))*[\\s\\S])/)[1];\n   return  new Worker(window.URL.createObjectURL(\n                      new Blob([str],{type:'text/javascript'})));\n}\n</code></pre>\n\n<p>So you could use it like this...</p>\n\n<pre><code>var myWorker = BuildWorker(function(){\n   //first line of worker\n   self.onmessage(){....};\n   //last line of worker\n});\n</code></pre>\n\n<p><strong>EDIT:</strong></p>\n\n<p>I've just extended this idea further to make it easier to do cross-thread communication: <a href=\"https://gist.github.com/d1manson/6714892\" rel=\"nofollow\">bridged-worker.js</a>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I think the better way to do this is using a Blob object, below you can see a simple example.</p>\n\n<pre><code>// create a Blob object with a worker code\nvar blob = new Blob([\"onmessage = function(e) { postMessage('msg from worker'); }\"]);\n\n// Obtain a blob URL reference to our worker 'file'.\nvar blobURL = window.URL.createObjectURL(blob);\n\n// create a Worker\nvar worker = new Worker(blobURL);\nworker.onmessage = function(e) {\n  console.log(e.data);\n};\nworker.postMessage(\"Send some Data\"); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>a better to read way for a inline worker..</p>\n\n<pre><code>    var worker_fn = function(e) \n    {\n        self.postMessage('msg from worker');            \n    };\n\n    var blob = new Blob([\"onmessage =\"+worker_fn.toString()], { type: \"text/javascript\" });\n\n    var worker = new Worker(window.URL.createObjectURL(blob));\n    worker.onmessage = function(e) \n    {\n       alert(e.data);\n    };\n    worker.postMessage(\"start\"); \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Take a look at the vkThread plugin. With htis plugin you can take any function in your main code and execute it in a  thread (web worker). So, you don't need to create a special \"web-worker file\".</p>\n\n<p><a href=\"http://www.eslinstructor.net/vkthread/\" rel=\"nofollow\">http://www.eslinstructor.net/vkthread/</a></p>\n\n<p>--Vadim</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>The html5rocks solution of embedding the web worker code in HTML is fairly horrible.<br>\nAnd a blob of escaped JavaScript-as-a-string is no better, not least because it complicates work-flow.</p>\n\n<p>Personally I really like the toString methods, but <a href=\"http://stackoverflow.com/a/16799132/1090770\">@dan-man</a> THAT regex!  </p>\n\n<p>My preferred approach:</p>\n\n<pre><code>// Build a worker from an anonymous function body\nvar blobURL = URL.createObjectURL( new Blob([ '(',\n\nfunction(){\n    //Long-running work here\n}.toString(),\n\n')()' ], { type: 'application/javascript' } ) ),\n\nworker = new Worker( blobURL );\n\n// Won't be needing this anymore\nURL.revokeObjectURL( blobURL );\n</code></pre>\n\n<p>Support is the intersection of these three tables:</p>\n\n<ul>\n<li><a href=\"http://caniuse.com/#feat=webworkers\">http://caniuse.com/#feat=webworkers</a></li>\n<li><a href=\"http://caniuse.com/#feat=blobbuilder\">http://caniuse.com/#feat=blobbuilder</a></li>\n<li><a href=\"http://caniuse.com/#feat=bloburls\">http://caniuse.com/#feat=bloburls</a></li>\n</ul>\n\n<p>This won't work for a <strong>SharedWorker</strong> however, because the URL must be an exact match, even if the optional 'name' parameter matches. For a SharedWorker, you'll need a separate JavaScript file.</p>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>Try to use jThread. <a href=\"https://github.com/cheprasov/jThread\" rel=\"nofollow\">https://github.com/cheprasov/jThread</a></p>\n\n<pre><code>// You can use simple calling like this\njThread(\n    function(arr){\n        //... some code for Worker\n        return arr;\n    }\n    ,function(arr){\n        //... done code\n    }\n)( [1,2,3,4,5,6,7] ); // some params\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>here console:</p>\n\n<pre><code>var worker=new Worker(window.URL.createObjectURL(new Blob([function(){\n  //Long-running work here\n  postMessage('done');\n}.toString().split('\\n').slice(1,-1).join('\\n')],{type:'text/javascript'})));\n\nworker.addEventListener('message',function(event){\n  console.log(event.data);\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Taking Adria's response and putting it in a copy-pastable function which works with current Chrome and FF but not IE10 (worker from blob causes a <a href=\"http://stackoverflow.com/questions/10343913/how-to-create-a-web-worker-from-a-string\">security error</a>).</p>\n\n<pre><code>var newWorker = function (funcObj) {\n    // Build a worker from an anonymous function body\n    var blobURL = URL.createObjectURL(new Blob(\n        ['(', funcObj.toString(), ')()'],\n        {type: 'application/javascript'}\n     ));\n\n    var worker = new Worker(blobURL);\n\n    // Won't be needing this anymore\n    URL.revokeObjectURL(blobURL);\n\n    return worker;\n}\n</code></pre>\n\n<p>And here's a working example <a href=\"http://jsfiddle.net/ubershmekel/YYzvr/\" rel=\"nofollow\">http://jsfiddle.net/ubershmekel/YYzvr/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"https://developer.mozilla.org/es/docs/Web/Guide/Performance/Using_web_workers\" rel=\"nofollow\">https://developer.mozilla.org/es/docs/Web/Guide/Performance/Using_web_workers</a></p>\n\n<pre><code>    // Syntax: asyncEval(code[, listener])\n\nvar asyncEval = (function () {\n\n  var aListeners = [], oParser = new Worker(\"data:text/javascript;charset=US-ASCII,onmessage%20%3D%20function%20%28oEvent%29%20%7B%0A%09postMessage%28%7B%0A%09%09%22id%22%3A%20oEvent.data.id%2C%0A%09%09%22evaluated%22%3A%20eval%28oEvent.data.code%29%0A%09%7D%29%3B%0A%7D\");\n\n  oParser.onmessage = function (oEvent) {\n    if (aListeners[oEvent.data.id]) { aListeners[oEvent.data.id](oEvent.data.evaluated); }\n    delete aListeners[oEvent.data.id];\n  };\n\n\n  return function (sCode, fListener) {\n    aListeners.push(fListener || null);\n    oParser.postMessage({\n      \"id\": aListeners.length - 1,\n      \"code\": sCode\n    });\n  };\n\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>As far as I can tell, web workers need to be written in a separate JavaScript file, and called like this: </p>\n\n<pre><code>new Worker('longrunning.js')\n</code></pre>\n\n<p>I'm using the closure compiler to combine and minify all my JavaScript source code, and I'd rather not have to have my workers in separate files for distribution. Is there some way to do this?</p>\n\n<pre><code>new Worker(function() {\n    //Long-running work here\n});\n</code></pre>\n\n<p>Given that first-class functions are so crucial to JavaScript, why does the standard way to do background work have to load a whole 'nother JavaScript file from the server?</p>\n",
            "last_activity_date": 1421093087,
            "question_id": 5408406,
            "score": 83,
            "tags": [
                "javascript",
                "web-worker"
            ],
            "title": "Web workers without a separate Javascript file?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>In javascript, using the \"bang\" operator (!) will return true if the given value is true, 1, not null, etc. It will return false if the value is undefined, null, 0, or an empty string.</p>\n\n<p>So the bang operator will always return a boolean value, but it will represent the opposite value of what you began with. If you take the result of that operation and \"bang\" it again, you can reverse it again, but still end up with a boolean (and not undefined, null, etc).</p>\n\n<p>Using the bang twice will take a value that could have been undefined, null, etc, and make it just plain <code>false</code>. It will take a value that could have been 1, \"true\", etc. and make it just plain <code>true</code>.</p>\n\n<p>The code could have been written:</p>\n\n<pre><code>var context = document.createElement('canvas').getContext;\nvar contextDoesNotExist = !context;\nvar contextExists = !contextDoesNotExist;\nreturn contextExists;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>A logical NOT operator <code>!</code> converts a value to a boolean that is the opposite of its logical value. </p>\n\n<p>The second <code>!</code> converts the previous boolean result back to the boolean representation of  its original logical value.</p>\n\n<p><a href=\"https://developer.mozilla.org/en/JavaScript/Reference/Operators/Logical_Operators\">From these docs</a> for the Logical NOT operator:</p>\n\n<blockquote>\n  <p>Returns false if its single operand can be converted to true; otherwise, returns true.</p>\n</blockquote>\n\n<p>So if <code>getContext</code> gives you a \"falsey\" value, the <code>!!</code>  will make it return the boolean value <code>false</code>. Otherwise it will return <code>true</code>.</p>\n\n<p>The \"falsey\" values are:</p>\n\n<ul>\n<li><code>false</code></li>\n<li><code>NaN</code></li>\n<li><code>undefined</code></li>\n<li><code>null</code></li>\n<li><code>\"\"</code> (empty string)</li>\n<li><code>0</code></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 164
                },
                {
                    "body": "<p>If <code>document.createElement('canvas').getContext</code> isn't <code>undefined</code> or <code>null</code>, it will return <code>true</code>. Otherwise it will return <code>false</code>.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The first <code>!</code> coerces the variable to a boolean type and inverts it. The second <code>!</code> inverts it again (giving you the original (correct) boolean value for whatever you are checking).</p>\n\n<p>For clarity you would be better off using</p>\n\n<pre><code>return Boolean(....);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p><code>!</code> casts \"something\"/\"anything\" to a <code>boolean</code>.</p>\n\n<p><code>!!</code> gives the original boolean value back (and guarantees the expression is a boolean now, regardless to what is was before)</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>It's to do with JavaScript's weak typing.  <code>document.createElement('canvas').getContext</code> is a function object.  By prepending a single <code>!</code> it evaluates it as a boolean expression and flips the answer around.  By prepending another <code>!</code>, it flips the answer back.  The end result is that the function evaluates it as a boolean expression, but returns an actual boolean result rather than the function object itself.  Prepending <code>!!</code> is a quick and dirty way to typecast an expression to a boolean type.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Javascript has a confusing set of rules for what is considered \"true\" and \"false\" when placed in a context where a Boolean is expected.  But the logical-NOT operator, <code>!</code>, always produces a proper Boolean value (one of the constants <code>true</code> and <code>false</code>).  By chaining two of them, the idiom <code>!!expression</code> produces a proper Boolean with the same truthiness as the original expression.</p>\n\n<p>Why would you bother?  Because it makes functions like the one you show more predictable.  If it didn't have the double negative in there, it might return <code>undefined</code>, a <code>Function</code> object, or something not entirely unlike a <code>Function</code> object.  If the caller of this function does something weird with the return value, the overall code might misbehave (\"weird\" here means \"anything but an operation that enforces Boolean context\").  The double-negative idiom prevents this.</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p><code>document.createElement('canvas').getContext</code> may evaluate to either <code>undefined</code> or an object reference. <code>!undefined</code> yields <code>true</code>, <code>![some_object]</code> yields <code>false</code>. This is almost what we need, just inverted. So <code>!!</code> serves to convert <code>undefined</code> to <code>false</code> and an object reference to <code>true</code>.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Using !!variable gives you a guarantee of typecast to boolean.</p>\n\n<p>To give you a simple example:</p>\n\n<pre><code>\"\" == false (is true)\n\"\" === false (is false)\n\n!!\"\" == false (is true)\n!!\"\" === false (is true)\n</code></pre>\n\n<p>But it doesn't make sense to use if you are doing something like:</p>\n\n<pre><code>var a = \"\"; // or a = null; or a = undefined ...\nif(!!a){\n...\n</code></pre>\n\n<p>The if will cast it to boolean so there is no need to make the implicit double negative cast.</p>\n",
                    "is_accepted": false,
                    "score": 5
                }
            ],
            "body": "<p>I am by no means an expert at Javascript, but I have been reading Mark Pilgrim's <a href=\"http://diveintohtml5.info/\">\"Dive into HTML5\"</a> webpage and he mentioned something that I would like a better understanding of.</p>\n\n<p>He states:</p>\n\n<blockquote>\n  <p>Finally, you use the double-negative trick to force the result to a Boolean value (true or false).</p>\n</blockquote>\n\n<pre><code>function supports_canvas() {\n  return !!document.createElement('canvas').getContext;\n}\n</code></pre>\n\n<p>If anyone can explain this a little better I would appreciate it!</p>\n",
            "last_activity_date": 1365520254,
            "question_id": 4686583,
            "score": 123,
            "tags": [
                "javascript",
                "html5"
            ],
            "title": "Can someone explain this &#39;double negative&#39; trick?"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p><strong>Update on Jan 04, 2012</strong></p>\n\n<p>It seems like you can't just call FB-dependent methods (for example <code>FB.getAuthResponse()</code>) right after <code>FB.init()</code> like before, as <code>FB.init()</code> seems to be asynchronous now. Wrapping your code into <code>FB.getLoginStatus()</code> response seems to do the trick of detecting when API is fully ready:</p>\n\n<pre><code>window.fbAsyncInit = function() {\n    FB.init({\n        //...\n    });\n\n    FB.getLoginStatus(function(response){\n        runFbInitCriticalCode(); \n    });\n\n};  \n</code></pre>\n\n<p>or if using <code>fbEnsureInit()</code> implementation from below:</p>\n\n<pre><code>window.fbAsyncInit = function() {\n    FB.init({\n        //...\n    });\n\n    FB.getLoginStatus(function(response){\n        fbApiInit = true;\n    });\n\n};  \n</code></pre>\n\n<hr>\n\n<p><strong>Original Post:</strong></p>\n\n<p>If you want to just run some script when FB is initialized you can put some callback function inside <code>fbAsyncInit</code>:</p>\n\n<pre><code>  window.fbAsyncInit = function() {\n    FB.init({\n      appId  : '&lt;?php echo $conf['fb']['appid']; ?&gt;',\n      status : true, // check login status\n      cookie : true, // enable cookies to allow the server to access the session\n      xfbml  : true  // parse XFBML\n    });\n    FB.Canvas.setAutoResize();\n\n    runFbInitCriticalCode(); //function that contains FB init critical code\n  };\n</code></pre>\n\n<p>If you want exact replacement of FB.ensureInit then you would have to write something on your own as there is no official replacement (big mistake imo). Here is what I use:</p>\n\n<pre><code>  window.fbAsyncInit = function() {\n    FB.init({\n      appId  : '&lt;?php echo $conf['fb']['appid']; ?&gt;',\n      status : true, // check login status\n      cookie : true, // enable cookies to allow the server to access the session\n      xfbml  : true  // parse XFBML\n    });\n    FB.Canvas.setAutoResize();\n\n    fbApiInit = true; //init flag\n  };\n\n  function fbEnsureInit(callback) {\n        if(!window.fbApiInit) {\n            setTimeout(function() {fbEnsureInit(callback);}, 50);\n        } else {\n            if(callback) {\n                callback();\n            }\n        }\n    }\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>fbEnsureInit(function() {\n    console.log(\"this will be run once FB is initialized\");\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 112
                },
                {
                    "body": "<h2>I've avoided using setTimeout by using a global function:</h2>\n\n<p>EDIT NOTE: I've updated the following helper scripts and created a class that easier/simpler to use; check it out here ::: <a href=\"https://github.com/tjmehta/fbExec.js\" rel=\"nofollow\">https://github.com/tjmehta/fbExec.js</a></p>\n\n<pre><code>window.fbAsyncInit = function() {\n    FB.init({\n        //...\n    });\n    window.fbApiInit = true; //init flag\n    if(window.thisFunctionIsCalledAfterFbInit)\n        window.thisFunctionIsCalledAfterFbInit();\n};\n</code></pre>\n\n<p>fbEnsureInit will call it's callback after FB.init</p>\n\n<pre><code>function fbEnsureInit(callback){\n  if(!window.fbApiInit) {\n    window.thisFunctionIsCalledAfterFbInit = callback; //find this in index.html\n  }\n  else{\n    callback();\n  }\n}\n</code></pre>\n\n<p>fbEnsureInitAndLoginStatus will call it's callback after FB.init and after FB.getLoginStatus</p>\n\n<pre><code>function fbEnsureInitAndLoginStatus(callback){\n  runAfterFbInit(function(){\n    FB.getLoginStatus(function(response){\n      if (response.status === 'connected') {\n        // the user is logged in and has authenticated your\n        // app, and response.authResponse supplies\n        // the user's ID, a valid access token, a signed\n        // request, and the time the access token\n        // and signed request each expire\n        callback();\n\n      } else if (response.status === 'not_authorized') {\n        // the user is logged in to Facebook,\n        // but has not authenticated your app\n\n      } else {\n        // the user isn't logged in to Facebook.\n\n      }\n    });\n  });\n}\n</code></pre>\n\n<h2>fbEnsureInit example usage:</h2>\n\n<p>(FB.login needs to be run after FB has been initialized)</p>\n\n<pre><code>fbEnsureInit(function(){\n    FB.login(\n       //..enter code here\n    );\n});\n</code></pre>\n\n<h2>fbEnsureInitAndLogin example usage:</h2>\n\n<p>(FB.api needs to be run after FB.init and FB user must be logged in.)</p>\n\n<pre><code>fbEnsureInitAndLoginStatus(function(){\n    FB.api(\n       //..enter code here\n    );\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The Facebook API watches for the FB._apiKey so you can watch for this before calling your own application of the API with something like:</p>\n\n<pre><code>window.fbAsyncInit = function() {\n  FB.init({\n    //...your init object\n  });\n  function myUseOfFB(){\n    //...your FB API calls\n  };\n  function FBreadyState(){\n    if(FB._apiKey) return myUseOfFB();\n    setTimeout(FBreadyState, 100); // adjust time as-desired\n  };\n  FBreadyState();\n}; \n</code></pre>\n\n<p>Not sure this makes a difference but in my case--because I wanted to be sure the UI was ready--I've wrapped the initialization with jQuery's document ready (last bit above):</p>\n\n<pre><code>  $(document).ready(FBreadyState);\n</code></pre>\n\n<p>Note too that I'm NOT using async = true to load Facebook's all.js, which in my case seems to be helping with signing into the UI and driving features more reliably.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>You can subscribe to the event:</p>\n\n<p>ie)</p>\n\n<pre><code>FB.Event.subscribe('auth.login', function(response) {\n  FB.api('/me', function(response) {\n    alert(response.name);\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Actually Facebook has already provided a mechanism to subscribe to authentication events. </p>\n\n<p>In your case you are using \"<strong>status: true</strong>\" which means that FB object will request Facebook for user's login status.</p>\n\n<pre><code>FB.init({\n    appId  : '&lt;?php echo $conf['fb']['appid']; ?&gt;',\n    status : true, // check login status\n    cookie : true, // enable cookies to allow the server to access the session\n    xfbml  : true  // parse XFBML\n});\n</code></pre>\n\n<p>By calling \"FB.getLoginStatus()\" you are running the same request <em>again</em>.</p>\n\n<p>Instead you could use <a href=\"https://developers.facebook.com/docs/reference/javascript/FB.Event.subscribe/\">FB.Event.subscribe</a> to subscribe to <strong>auth.statusChange</strong> or <strong>auth.authResponseChange</strong> event <strong>BEFORE</strong> you call FB.init</p>\n\n<pre><code>FB.Event.subscribe('auth.statusChange', function(response) {\n    if(response.status == 'connected') {\n        runFbInitCriticalCode();\n    }\n});\n\nFB.init({\n    appId  : '&lt;?php echo $conf['fb']['appid']; ?&gt;',\n    status : true, // check login status\n    cookie : true, // enable cookies to allow the server to access the session\n    xfbml  : true  // parse XFBML\n});\n</code></pre>\n\n<p>Most likely, when using \"<strong>status: false</strong>\" you can run any code right after FB.init, because there will be no asynchronous calls.</p>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>Instead of using any setTimeout or setInterval I would stick to deferred objects (implementation by jQuery <a href=\"http://api.jquery.com/category/deferred-object/\" rel=\"nofollow\">here</a>). It's still tricky to resolve queue in proper moment, because init don't have callbacks but combining result with  event subscription (as someone pointed before me), should do the trick and be close enough.</p>\n\n<p>Pseudo-snippet would look as follows:</p>\n\n<pre><code>FB.Event.subscribe('auth.statusChange', function(response) {\n   if (response.authResponse) {\n       // user has auth'd your app and is logged into Facebook\n   } else {\n       // user has not auth'd your app, or is not logged into Facebook\n   }\n   DeferredObject.resolve();\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here is a solution in case you use <a href=\"/questions/tagged/jquery\" class=\"post-tag\" title=\"show questions tagged 'jquery'\" rel=\"tag\">jquery</a> and Facebook Asynchronous Lazy Loading:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>// listen to an Event\n$(document).bind('fbInit',function(){\n    console.log('fbInit complete; FB Object is Available');\n});\n\n// FB Async\nwindow.fbAsyncInit = function() {\n    FB.init({appId: 'app_id', \n         status: true, \n         cookie: true,\n         oauth:true,\n         xfbml: true});\n\n    $(document).trigger('fbInit'); // trigger event\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>Another way to check if FB has initialized is by using the following code:</p>\n\n<pre><code>ns.FBInitialized = function () {\n    return typeof (FB) != 'undefined' &amp;&amp; window.fbAsyncInit.hasRun;\n};\n</code></pre>\n\n<p>Thus in your page ready event you could check ns.FBInitialized and defer the event to later phase by using setTimeOut.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>While some of the above solutions work, I thought I'd post our eventual solution - which defines a 'ready' method that will fire as soon as FB is initialized and ready to go. It has the advantage over other solutions that it's safe to call either before or after FB is ready.</p>\n\n<p>It can be used like so:</p>\n\n<pre><code>f52.fb.ready(function() {\n    // safe to use FB here\n});\n</code></pre>\n\n<p>Here's the source file (note that it's defined within a 'f52.fb' namespace).</p>\n\n<pre><code>if (typeof(f52) === 'undefined') { f52 = {}; }\nf52.fb = (function () {\n\n    var fbAppId = f52.inputs.base.fbAppId,\n        fbApiInit = false;\n\n    var awaitingReady = [];\n\n    var notifyQ = function() {\n        var i = 0,\n            l = awaitingReady.length;\n        for(i = 0; i &lt; l; i++) {\n            awaitingReady[i]();\n        }\n    };\n\n    var ready = function(cb) {\n        if (fbApiInit) {\n            cb();\n        } else {\n            awaitingReady.push(cb);\n        }\n    };\n\n    window.fbAsyncInit = function() {\n        FB.init({\n            appId: fbAppId,\n            xfbml: true,\n            version: 'v2.0'\n        });\n\n        FB.getLoginStatus(function(response){\n            fbApiInit = true;\n            notifyQ();\n        });\n    };\n\n    return {\n        /**\n         * Fires callback when FB is initialized and ready for api calls.\n         */\n        'ready': ready\n    };\n\n})();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>The old JS SDK had a function called FB.ensureInit. The new SDK does not seem to have such function... how can I ensure that I do not make api calls until it is fully initiated?</p>\n\n<p>I include this in the top of every page:</p>\n\n<pre><code>&lt;div id=\"fb-root\"&gt;&lt;/div&gt;\n&lt;script&gt;\n  window.fbAsyncInit = function() {\n    FB.init({\n      appId  : '&lt;?php echo $conf['fb']['appid']; ?&gt;',\n      status : true, // check login status\n      cookie : true, // enable cookies to allow the server to access the session\n      xfbml  : true  // parse XFBML\n    });\n    FB.Canvas.setAutoResize();\n  };\n\n  (function() {\n    var e = document.createElement('script');\n    e.src = document.location.protocol + '//connect.facebook.net/en_US/all.js';\n    e.async = true;\n    document.getElementById('fb-root').appendChild(e);\n  }());\n&lt;/script&gt;\n</code></pre>\n",
            "last_activity_date": 1402946108,
            "question_id": 3548493,
            "score": 82,
            "tags": [
                "javascript",
                "facebook"
            ],
            "title": "How to detect when facebook&#39;s FB.init is complete"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Why would you do this when you can use <code>addEventListener</code>/<code>attachEvent</code>? If there is no <code>href</code>-equivalent, don't use an <code>&lt;a&gt;</code>, use a <code>&lt;button&gt;</code> and style it accordingly.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>You forgot another method:</p>\n\n<pre><code>5: &lt;a href=\"#\" id=\"myLink\"&gt;Link&lt;/a&gt;\n</code></pre>\n\n<p>With the JavaScript code:</p>\n\n<pre><code>document.getElementById('myLink').onclick = function() {\n    // Do stuff.\n};\n</code></pre>\n\n<p>I can't comment on which of the options has the best support or which is semantically the best, but I'll just say that I much prefer this style because it separates your content from your JavaScript code. It keeps all the JavaScript code together, which is much easier to maintain (especially if you are applying this to many links), and you can even put it in an external file which can then be packed to reduce filesize and cached by client browsers.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<pre><code>&lt;a href=\"#\" onClick=\"DoSomething(); return false;\"&gt;link&lt;/a&gt;\n</code></pre>\n\n<p>I will do this, or:</p>\n\n<pre><code>&lt;a href=\"#\" id = \"Link\"&gt;link&lt;/a&gt;\n(document.getElementById(\"Link\")).onclick = function() { DoSomething(); return false; };\n</code></pre>\n\n<p>Depending on the situation. For larger apps, the second one is best because then it consolidates your event code.</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>I quite enjoy <a href=\"http://www.javascripttoolbox.com/bestpractices/\">Matt Kruse's Javascript Best Practices article</a>.  In it, he states that using the <code>href</code> section to execute JavaScript code is a bad idea.  Even though you have stated that your users must have JavaScript enabled, there's no reason you can't have a simple HTML page that all your JavaScript links can point to for their <code>href</code> section in the event that someone happens to turn off JavaScript after logging in.  I would highly encourage you to still allow this fallback mechanism.  Something like this will adhere to \"best practices\" and accomplish your goal:</p>\n\n<pre><code>&lt;a href=\"javascript_required.html\" onclick=\"doSomething(); return false;\"&gt;go&lt;/a&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 54
                },
                {
                    "body": "<p>Method #2 has a syntax error in FF3 and IE7.\nI prefer methods #1 and #3, because #4 dirty the URI with '#' although causes less typing...\nObviously, as noted by other responses, the best solution is separate html from event handling.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>One difference I've noticed between this:</p>\n\n<pre><code>&lt;a class=\"actor\" href=\"javascript:act1()\"&gt;Click me&lt;/a&gt;\n</code></pre>\n\n<p>and this:</p>\n\n<pre><code>&lt;a class=\"actor\" onclick=\"act1();\"&gt;Click me&lt;/a&gt;\n</code></pre>\n\n<p>is that if in either case you have:</p>\n\n<pre><code>&lt;script&gt;$('.actor').click(act2);&lt;/script&gt;\n</code></pre>\n\n<p>then for the first  example, <code>act2</code> will run before <code>act1</code> and in the second example, it will be the other way around.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h2>Modern browsers only</h2>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\"&gt;\n(function(doc){\n    var hasClass = function(el,className) {\n        return (' ' + el.className + ' ').indexOf(' ' + className + ' ') &gt; -1;\n    }\n    doc.addEventListener('click', function(e){\n      if(hasClass(e.target, 'click-me')){\n          e.preventDefault();\n          doSomething.call(e.target, e);\n      }\n    });\n})(document);\n\nfunction doSomething(event){\n  console.log(this); // this will be the clicked element\n}\n&lt;/script&gt;\n&lt;!--... other head stuff ...--&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!--buttons can be used outside of forms http://stackoverflow.com/a/14461672/175071 --&gt;\n&lt;button class=\"click-me\"&gt;Button 1&lt;/button&gt;\n&lt;input class=\"click-me\" type=\"button\" value=\"Button 2\"&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h2>Cross-browser</h2>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n&lt;script type=\"text/javascript\"&gt;\n(function(doc){\n    var cb_addEventListener = function(obj, evt, fnc) {\n        // W3C model\n        if (obj.addEventListener) {\n            obj.addEventListener(evt, fnc, false);\n            return true;\n        } \n        // Microsoft model\n        else if (obj.attachEvent) {\n            return obj.attachEvent('on' + evt, fnc);\n        }\n        // Browser don't support W3C or MSFT model, go on with traditional\n        else {\n            evt = 'on'+evt;\n            if(typeof obj[evt] === 'function'){\n                // Object already has a function on traditional\n                // Let's wrap it with our own function inside another function\n                fnc = (function(f1,f2){\n                    return function(){\n                        f1.apply(this,arguments);\n                        f2.apply(this,arguments);\n                    }\n                })(obj[evt], fnc);\n            }\n            obj[evt] = fnc;\n            return true;\n        }\n        return false;\n    };\n    var hasClass = function(el,className) {\n        return (' ' + el.className + ' ').indexOf(' ' + className + ' ') &gt; -1;\n    }\n\n    cb_addEventListener(doc, 'click', function(e){\n      if(hasClass(e.target, 'click-me')){\n          e.preventDefault ? e.preventDefault() : e.returnValue = false;\n          doSomething.call(e.target, e);\n      }\n    });\n})(document);\n\nfunction doSomething(event){\n  console.log(this); // this will be the clicked element\n}\n&lt;/script&gt;\n&lt;!--... other head stuff ...--&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;!--buttons can be used outside of forms http://stackoverflow.com/a/14461672/175071 --&gt;\n&lt;button class=\"click-me\"&gt;Button 1&lt;/button&gt;\n&lt;input class=\"click-me\" type=\"button\" value=\"Button 2\"&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>You can run this before the document is ready, clicking the buttons will work because we attach the event to the document.</p>\n\n<p>Sources:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/5898656/test-if-an-element-contains-a-class\">Test if an element contains a class?</a></li>\n<li><a href=\"http://stackoverflow.com/questions/1000597/event-preventdefault-function-not-working-in-ie\">event.preventDefault() function not working in IE.</a></li>\n<li><a href=\"https://gist.github.com/eduardocereto/955642\" rel=\"nofollow\">https://gist.github.com/eduardocereto/955642</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I have seen the following methods of putting JavaScript code in an <code>&lt;a&gt;</code> tag:</p>\n\n<pre><code>function DoSomething() { ... return false; }\n</code></pre>\n\n<ol>\n<li><code>&lt;a href=\"javascript:;\" onClick=\"return DoSomething();\"&gt;link&lt;/a&gt;</code></li>\n<li><code>&lt;a href=\"javascript:return DoSomething();\"&gt;link&lt;/a&gt;</code></li>\n<li><code>&lt;a href=\"javascript:void(0);\" onClick=\"return DoSomething();\"&gt;link&lt;/a&gt;</code></li>\n<li><code>&lt;a href=\"#\" onClick=\"return DoSomething();\"&gt;link&lt;/a&gt;</code></li>\n</ol>\n\n<p>I understand the idea of trying to put a valid URL instead of just JavaScript code, just in case the user doesn't have JavaScript enabled. But for the purpose of this discussion, I need to assume JavaScript is enabled (they can't login without it).</p>\n\n<p>I personally like option 2 as it allows you to see what's going to be run&ndash;especially useful when debuging where there are parameters being passed to the function. I have used it quite a bit and haven't found browser issues.</p>\n\n<p>I have read that people recommend 4, because it gives the user a real link to follow, but really, # isn't \"real\". It will go absolutely no where.</p>\n\n<p>Is there one that isn't support or is really bad, when you know the user has JavaScript enabled?</p>\n\n<p>Related question: <em><a href=\"http://stackoverflow.com/questions/134845/href-for-javascript-links-or-javascriptvoid0\">Href for JavaScript links: \u201c#\u201d or \u201cjavascript:void(0)\u201d?</a></em>.</p>\n",
            "last_activity_date": 1401608364,
            "question_id": 245868,
            "score": 54,
            "tags": [
                "javascript",
                "html",
                "href"
            ],
            "title": "What is the difference between the different methods of putting JavaScript code in an &lt;a&gt;?"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I usually run a check for <code>getContext</code> when I create my canvas object.</p>\n\n<pre><code>(function () {\n    var canvas = document.createElement('canvas'), context;\n    if (!canvas.getContext) {\n        // not supported\n        return;\n    }\n\n    canvas.width = 800;\n    canvas.height = 600;\n    context = canvas.getContext('2d');\n    document.body.appendChild(canvas);\n}());\n</code></pre>\n\n<p>If it is supported, then you can continue the canvas setup and add it to the DOM. This is a simple example of <a href=\"http://en.wikipedia.org/wiki/Progressive_enhancement\">Progressive Enhancement</a>, which I (personally) prefer over Graceful Degradation.</p>\n",
                    "is_accepted": false,
                    "score": 13
                },
                {
                    "body": "<p>There are two popular methods of detecting canvas support in browsers:</p>\n\n<ol>\n<li><p><a href=\"http://stackoverflow.com/a/2745449/94197\">Matt's suggestion</a> of checking for the existence of <code>getContext</code>, also used in a similar fashion by the Modernizr library:  </p>\n\n<pre><code>var canvasSupported = !!document.createElement(\"canvas\").getContext;\n</code></pre></li>\n<li><p>Checking the existence of the <code>HTMLCanvasElement</code> interface, as defined by the <a href=\"http://www.w3.org/TR/WebIDL/\">WebIDL</a> and <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#htmlcanvaselement\">HTML</a> specifications.\u2002This approach was also recommended in <a href=\"http://blogs.msdn.com/b/ie/archive/2010/09/03/same-markup-using-canvas-audio-and-video.aspx\">a blog post from the IE 9 team</a>.</p>\n\n<pre><code>var canvasSupported = !!window.HTMLCanvasElement;\n</code></pre></li>\n</ol>\n\n<p>My recommendation is a variation of the latter (see <em>Additional Notes</em>), for several reasons:</p>\n\n<ul>\n<li>Every known browser supporting canvas \u2015 including IE 9 \u2015 implements this interface;</li>\n<li>It's more concise and instantly obvious what the code is doing;</li>\n<li>The <code>getContext</code> approach is <a href=\"http://jsperf.com/htmlcanvaselement-vs-getcontext-checks\"><strong>significantly slower</strong> across all browsers</a>, because it involves creating an HTML element.\u2002This is not ideal when you need to squeeze as much performance as possible (in a library like Modernizr, for example).</li>\n</ul>\n\n<p>There are no noticeable benefits to using the first method.\u2002Both approaches can be spoofed, but this not likely to happen by accident.</p>\n\n<h2>Additional Notes</h2>\n\n<p>It may still be necessary to check that a 2D context can be retrieved.\u2002Reportedly, some mobile browsers can return true for both above checks, but return <code>null</code> for <code>.getContext('2d')</code>.\u2002This is why Modernizr also checks the result of <code>.getContext('2d')</code>.\u2002 However, WebIDL &amp; HTML \u2015 again \u2015 gives us another better, <a href=\"http://jsperf.com/htmlcanvaselement-vs-getcontext-checks/3\">faster</a> option:</p>\n\n<pre><code>var canvas2DSupported = !!window.CanvasRenderingContext2D;\n</code></pre>\n\n<p>Notice that we can skip checking for the canvas element entirely and go straight to checking for 2D rendering support.  The <a href=\"http://www.whatwg.org/specs/web-apps/current-work/multipage/the-canvas-element.html#canvasrenderingcontext2d\"><code>CanvasRenderingContext2D</code></a> interface is also part of the HTML specification.</p>\n\n<p>You <em>must</em> use the <code>getContext</code> approach <strong>for detecting WebGL</strong> support because, even though the browser may support the <code>WebGLRenderingContext</code>, <code>getContext()</code> may return <em>null</em> if the browser is unable to interface with the GPU due to driver issues and there is no software implementation.  In this case, checking for the interface first allows you to skip checking for <code>getContext</code>:</p>\n\n<pre><code>var cvsEl, ctx;\nif (!window.WebGLRenderingContext)\n    window.location = \"http://get.webgl.org\";\nelse {\n    cvsEl = document.createElement(\"canvas\");\n    ctx = cvsEl.getContext(\"webgl\") || cvsEl.getContext(\"experimental-webgl\");\n\n    if (!ctx) {\n        // Browser supports WebGL, but cannot create the context\n    }\n}\n</code></pre>\n\n<h2>Performance Comparison</h2>\n\n<p>Performance of the <code>getContext</code> approach is 85-90% slower in Firefox 11 and Opera 11 and about 55% slower in Chromium 18.</p>\n\n<p>&emsp;&emsp;&emsp;&emsp;<a href=\"http://jsperf.com/htmlcanvaselement-vs-getcontext-checks\"><img src=\"http://i.stack.imgur.com/adEMj.png\" alt=\"Simple comparison table, click to run a test in your browser\"></a></p>\n",
                    "is_accepted": false,
                    "score": 79
                },
                {
                    "body": "<p>Why not try <a href=\"http://www.modernizr.com/\">modernizr</a> ? It's a JS library that provides detection capability.</p>\n\n<p>Quote:</p>\n\n<blockquote>\n  <p>Have you ever wanted to do\n  if-statements in your CSS for the\n  availability of cool features like\n  border-radius? Well, with Modernizr\n  you can accomplish just that!</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>There may be a gotcha here- some clients do not support <strong>all</strong> canvas methods.</p>\n\n<pre><code>var hascanvas= (function(){\n    var dc= document.createElement('canvas');\n    if(!dc.getContext) return 0;\n    var c= dc.getContext('2d');\n    return typeof c.fillText== 'function'? 2: 1;\n})();\n\nalert(hascanvas)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This is the technique used in Modernizr and basically every other library that does canvas work:</p>\n\n<pre><code>function isCanvasSupported(){\n  var elem = document.createElement('canvas');\n  return !!(elem.getContext &amp;&amp; elem.getContext('2d'));\n}\n</code></pre>\n\n<p>Since your question was for detection when it's <strong>not</strong> supported, I recommend using it like so:</p>\n\n<pre><code>if (!isCanvasSupported()){ ...\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 178
                },
                {
                    "body": "<pre><code>try {\n    document.createElement(\"canvas\").getContext(\"2d\");\n    alert(\"HTML5 Canvas is supported in your browser.\");\n} catch (e) {\n    alert(\"HTML5 Canvas is not supported in your browser.\");\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>The standard way to deal with situations where the browser does not support the HTML5 <code>&lt;canvas&gt;</code> tag is to embed some fallback content like:</p>\n\n<pre><code>&lt;canvas&gt;Your browser doesn't support \"canvas\".&lt;/canvas&gt;\n</code></pre>\n\n<p>But the rest of the page remains the same, which may be inappropriate or misleading. I'd like some way of detecting canvas non-support so that I can present the rest of my page accordingly. What would you recommend?</p>\n",
            "last_activity_date": 1395634463,
            "question_id": 2745432,
            "score": 107,
            "tags": [
                "javascript",
                "html5",
                "canvas",
                "progressive-enhancement",
                "graceful-degradation"
            ],
            "title": "Best way to detect that HTML5 &lt;canvas&gt; is not supported"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>I bet you could traverse the DOM and inspect the event <a href=\"http://docs.jquery.com/Attributes/attr#name\" rel=\"nofollow\">attribute</a> on each element building up a list... but I've never tried it.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>jQuery makes this relatively easy because it stores the event handlers in the element data.  You should be able to use something like this:</p>\n\n<pre><code>(function($) {\n    $.eventReport = function(selector, root) {\n        var s = [];\n        $(selector || '*', root).andSelf().each(function() {\n            // the following line is the only change\n            var e = $.data(this, 'events');\n            if(!e) return;\n            s.push(this.tagName);\n            if(this.id) s.push('#', this.id);\n            if(this.className) s.push('.', this.className.replace(/ +/g, '.'));\n            for(var p in e) {\n                var r = e[p],\n                    h = r.length - r.delegateCount;\n                if(h)\n                    s.push('\\n', h, ' ', p, ' handler', h &gt; 1 ? 's' : '');\n                if(r.delegateCount) {\n                    for(var q = 0; q &lt; r.length; q++)\n                        if(r[q].selector) s.push('\\n', p, ' for ', r[q].selector);\n                }\n            }\n            s.push('\\n\\n');\n        });\n        return s.join('');\n    }\n    $.fn.eventReport = function(selector) {\n        return $.eventReport(selector, this);\n    }\n})(jQuery);\n</code></pre>\n\n<p>and you can call it:</p>\n\n<pre><code>// all events\nalert($.eventReport());\n\n// just events on inputs\nalert($.eventReport('input')); \n\n// just events assigned to this element\nalert($.eventReport('#myelement')); \n\n// events assigned to inputs in this element\nalert($.eventReport('input', '#myelement')); \nalert($('#myelement').eventReport('input')); // same result\n\n// just events assigned to this element's children\nalert($('#myelement').eventReport()); \nalert($.eventReport('*', '#myelement'); // same result\n</code></pre>\n\n<p><strong>UPDATE:</strong>\nI added a count of handlers and some information about delegated events to the output of the above function.</p>\n\n<p><strong>UPDATE (8/24/2012):</strong>\nWhile the function above still works in jQuery 1.7.2 and lower, jQuery no longer stores the event object in <code>jQuery.data(elem, 'events')</code> and <strong>if you are using jQuery 1.8 or later you will no longer be able to use the function above!</strong></p>\n\n<p>In exchange for <code>jQuery.data(elem, 'events')</code> you can now use <code>jQuery._data(elem, 'events')</code>. An update to the function above would look like this:</p>\n\n<pre><code>(function($) {\n    $.eventReport = function(selector, root) {\n        var s = [];\n        $(selector || '*', root).addBack().each(function() {\n            // the following line is the only change\n            var e = $._data(this, 'events');\n            if(!e) return;\n            s.push(this.tagName);\n            if(this.id) s.push('#', this.id);\n            if(this.className) s.push('.', this.className.replace(/ +/g, '.'));\n            for(var p in e) {\n                var r = e[p],\n                    h = r.length - r.delegateCount;\n                if(h)\n                    s.push('\\n', h, ' ', p, ' handler', h &gt; 1 ? 's' : '');\n                if(r.delegateCount) {\n                    for(var q = 0; q &lt; r.length; q++)\n                        if(r[q].selector) s.push('\\n', p, ' for ', r[q].selector);\n                }\n            }\n            s.push('\\n\\n');\n        });\n        return s.join('');\n    }\n    $.fn.eventReport = function(selector) {\n        return $.eventReport(selector, this);\n    }\n})(jQuery);\n</code></pre>\n\n<p><strong>UPDATE (4/25/2013):</strong>\n<code>andSelf()</code> is deprecated from 1.8.x <a href=\"http://bugs.jquery.com/ticket/9800\">http://bugs.jquery.com/ticket/9800</a> , I replaced with <code>addBack()</code> instead.</p>\n",
                    "is_accepted": false,
                    "score": 84
                },
                {
                    "body": "<pre><code>// List bound events\nconsole.log($('#elem').data('events'));\n\n// Log ALL handlers for ALL events\n$.each($('#elem').data('events'), function(i, event) {\n  $.each(event, function(i, handler){\n    console.log(handler.toString());\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>you can check this tool \n<a href=\"http://www.sprymedia.co.uk/article/Visual+Event+2\">http://www.sprymedia.co.uk/article/Visual+Event+2</a></p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I use this one to list all elements that has a bounded event.</p>\n\n<pre><code>$(\"*\").each(function(){\n    var events = $(this).data(\"events\");\n    if(events != null)\n    {\n        console.log(this);\n        console.log(events);\n    }\n});\n</code></pre>\n\n<p>It is also possible to collect elements as a list for each event by writing some additional codes like this:</p>\n\n<pre><code>var eventArrays = {};\n\n$(\"*\").each(function(){\n    var events = $(this).data(\"events\");\n    for(var anEvent in events){\n        if(!eventArrays[anEvent])\n            eventArrays[anEvent] = [];\n        eventArrays[anEvent].push(this);\n    }\n});\n\nconsole.log(eventArrays);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>To use console.table() I did some modifications... </p>\n\n<pre><code>(function($) {\n    $.eventReport = function(selector, root) {\n        var s = [];\n        $(selector || '*', root).addBack().each(function() {\n            var e = $._data(this, 'events');\n            if(!e) return;\n            var tagGroup = this.tagName || \"document\";\n            if(this.id) tagGroup += '#' + this.id;\n            if(this.className) tagGroup += '.' + this.className.replace(/ +/g, '.');\n\n            var delegates = [];\n            for(var p in e) {\n                var r = e[p];\n                var h = r.length - r.delegateCount;\n\n                if(h)\n                    s.push([tagGroup, p + ' handler' + (h &gt; 1 ? 's' : '')]);\n\n                if(r.delegateCount) {\n                    for(var q = 0; q &lt; r.length; q++)\n                        if(r[q].selector) s.push([tagGroup + ' delegates', p + ' for ' + r[q].selector]);\n                }\n            }\n        });\n        return s;\n    }\n    $.fn.eventReport = function(selector) {\n        return $.eventReport(selector, this);\n    }\n})(jQuery);\n</code></pre>\n\n<p>So now I can do things like this:</p>\n\n<pre><code>console.table($.eventReport())\n</code></pre>\n\n<p>See what happens at chrome:\n<img src=\"http://i.stack.imgur.com/jW5XH.png\" alt=\"Console in chrome\"></p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>Using jQuery, is it possible to get a list of all the events and to which element the event is bound to?</p>\n",
            "last_activity_date": 1420227620,
            "question_id": 743876,
            "score": 39,
            "tags": [
                "javascript",
                "jquery",
                "events"
            ],
            "title": "List all javascript events wired up on a page using jquery"
        },
        {
            "answer_count": 20,
            "answers": [
                {
                    "body": "<p>Don't use any obfuscation techniques here because it's probably the first place the email harvesters will look to find out how people are obfuscating emails. If you have to have your email address visible on the site don't just copy verbatim someone else's method; obfuscate it in some unique way that no other site has used so that your method won't be known to harvesters before they visit your site.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>I use JavaScript obfuscation, take a look at this one for example:</p>\n\n<p><a href=\"http://www.jottings.com/obfuscator/\" rel=\"nofollow\">http://www.jottings.com/obfuscator/</a></p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The current accepted solution is to create a contact form that allows users to email you. If you receive a lot of spam from that (I don't on my site), then you can add a captcha for good measure, and you'll be far from the \"low hanging fruit\" at that point.</p>\n\n<p>The fact of the matter is that if you are providing a link that a user can click on to pop open their email client with your address in the To: field, then the computer is able to decipher the email address from the page and so can a spam bot.</p>\n",
                    "is_accepted": false,
                    "score": 57
                },
                {
                    "body": "<p>I encode the characters as HTML entities (<a href=\"http://www.wbwip.com/wbw/emailencoder.html\">something like this</a>). It doesn't require JS to be enabled and seems to have stopped most of the spam. I suppose a smart bot might still harvest it, but I haven't had any problems.</p>\n",
                    "is_accepted": true,
                    "score": 54
                },
                {
                    "body": "<p>Personally, I've given up on hiding my email address. I find it easier to look into better spam-filtering solutions than worry about obfuscating. You could spend days trying to find the best way to obfuscate your address, and then all it takes is one person to sell your address to a spammer and all that work was useless.</p>\n",
                    "is_accepted": false,
                    "score": 64
                },
                {
                    "body": "<p>Honestly, your problem may be moot if you asked the question of whether or not a mailto is really what you want to use. A lot of people who use web mail, for example, or do not have the proper mail client setup in their browser are not going to benefit from a mailto. You are exposing your email address for a function that isn't going to work for a large portion of your users.</p>\n\n<p>What you could do instead is use a form to send the e-mail behind the scenes so that the e-mail address is hidden and you don't have to worry about the poor saps who won't benefit from a mailto.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could do as Google do on Google Code (and Groups). Display a par tof the email, and a clickable portion (\"...\"). Clicking that indicates you want to know the email, and you are asked to fill in a captcha. Afterwards the email (and others?) are visible to you.</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>Apparently <a href=\"http://techblog.tilllate.com/2008/07/20/ten-methods-to-obfuscate-e-mail-addresses-compared/\">using CSS to change the direction of your text</a> works pretty well.  That link has a test of a bunch of other obfuscation methods as well.</p>\n\n<p>Whatever you use is inevitably going to be defeated.  Your primary aim should be to avoid annoying the heck out of your users.</p>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p><a href=\"http://recaptcha.net/\">reCAPTCHA</a> offers a simple <a href=\"http://www.google.com/recaptcha/mailhide/\">email obfuscation service</a>. You don't need to set up an account and can start using it immediately. You can use the service as a link or as a popup.</p>\n\n<p>After the captcha is solved, your email address appears as an href/mailto, so that it can be clicked/followed by users who have configured their email clients to work with their browsers.</p>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>I don't how well this would work. Could you not leave your email address out and make it load using an AJAX call once the page has finished loading. Not sure if spam bots can pick up the altered HTML or if they are clever enough to listen on other HTTP traffic to try and pick email addresses or if they just scan the page as it is received the first time.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>One website I maintain uses a somewhat simplistic JavaScript means of (hopefully) keeping spambots out.</p>\n\n<p>Email links call a JS function:</p>\n\n<pre>\nfunction sendEmail(name, domain) {\n    location.href = 'mailto:' + name + '@' + domain;\n}\n</pre>\n\n<p>To make sure only users who have JS enabled can see the link, write them out with this:</p>\n\n<pre>\nfunction writeEmailLink(realName, name, domain) {\n    document.write('&lt;a href=\"javascript:sendEmail(\\''\n      + name + '\\', \\'' + domain + '\\')\">');\n    document.write(realName);\n    document.write('&lt;/a>');\n}   \n</pre>\n\n<p>The use of one JS function to write out a link that calls another means that there are two layers of protection.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>You mentioned this is for your personal website. On my personal site (for example, bobsomers.com) I just have a paragraph that says this:</p>\n\n<blockquote>\n  <p>The best way to get in contact with me\n  before the new site is up is to send\n  me an email. My email address is my\n  first name at this website. If you\n  can't figure it out from that hint,\n  well, you might find email more of a\n  challenge than figuring out my\n  address.</p>\n</blockquote>\n\n<p>People seem to be able to figure that out just fine, as I get legitimate email all the time. Sometimes the best solutions don't require writing any code. :)</p>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>If you work with PHP, you can grab a free script that does that automatically. It's called \"Private Daddy\" and we use it for our own online audio streaming service. Just one line of code and it works out of the box... you can grab it <a href=\"http://www.privatedaddy.com\" rel=\"nofollow\">here</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you say on your site that \"My e-mail address is (my first name)@(my last name).com.\", and your first name and last name are pretty darn obvious, that seems to be the best spam protection you're going to get.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Check <a href=\"http://hivelogic.com/enkoder\" rel=\"nofollow\">this</a> out.</p>\n\n<p>The 'Enkoder Form' will encrypt your Email address and convert the result to a self evaluating JavaScript, hiding it from Email-harvesting robots which crawl the web looking for exposed addresses. Your address will be displayed correctly by web-browsers, but will be virtually indecipherable to Email harvesting robots.</p>\n",
                    "is_accepted": false,
                    "score": -2
                },
                {
                    "body": "<p>One guy tested nine different ways of presenting an email address on a page and then <a href=\"http://techblog.tilllate.com/2008/07/20/ten-methods-to-obfuscate-e-mail-addresses-compared/\" rel=\"nofollow\">published results</a> on his blog. </p>\n\n<p>His three best ways were:</p>\n\n<ol>\n<li>Changing the code direction with CSS</li>\n<li>Using CSS display:none</li>\n<li>ROT13 Encryption</li>\n</ol>\n\n<p>Caveat -- this was posted two years ago. Spam bots might've gotten smarter.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I use a <a href=\"http://snipplr.com/view/10947/secure-email-link/\" rel=\"nofollow\">PHP function</a> to generate some javascript to output the email on page load. Note that you don't <em>need</em> PHP to generate the JS at runtime, you can generate the JS once locally and then include the static JS in your page.</p>\n\n<p>You can also use the linked function with this snippet below to automatically obfuscate email addresses in some given HTML (where $processedContent is the HTML):</p>\n\n<pre><code> $emailMatches = array();\n $matchCount = preg_match_all('/(?:[a-zA-Z0-9_\\.\\-])+\\@(?:(?:[a-zA-Z0-9\\-])+\\.)+(?:[a-zA-Z0-9]{2,4})+/', $processedContent, $emailMatches);\n\n if($matchCount &gt; 0) {\n    $emailMatches = $emailMatches[0];\n\n    foreach($emailMatches as $email) {\n    $replacement = createJSMailLink($email);\n\n    $processedContent = str_replace($email, createJSMailLink($email), $processedContent);\n }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>As a poster above said, I also use JavaScript obfuscation from the jottings website:</p>\n\n<p><a href=\"http://www.jottings.com/obfuscator/\" rel=\"nofollow\">http://www.jottings.com/obfuscator/</a></p>\n\n<p>The web page generates some javascript which can be improved on. The \"mailto:\" text string is in the clear and identifiable by robots (which could spot this and unobfuscate this string), but if one enters into the jottings.com webpage an email address of the form \"mailto:addr@site.tld\" instead of \"addr@site.tld\" and then removes the text \"mailto:\" from the javascript that is generated, one suddenly has some javascript that does not look as though it has anything to do with email at all - just random javascript of which the web is full. One can improve this still further by getting rid of the link text - I replaced mine by an image of my email address that is in a fairly obscure font. Then just in case this method on jottings.com becomes popular, I randomized the variable names in the output javascript to make it hard for a robot to spot an instance of jottings generated javascipt code.</p>\n\n<p>Obviously some of these improvements could be built into the mechanism on jottings itself, and since the code is openly available this would be relatively easy.</p>\n\n<p>An example may make this a bit more clear.  I used the Jottings Obfuscator at the link above to obscure \"mailto:foo@bar.com\" (note I am cheating on the original intent of the jottings website by entering the string mailto:foo@bar.com instead of foo@bar.com) with text \"Send Me Email\", which jottings turned into this Javascript:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" language=\"javascript\"&gt;\n&lt;!--\n// Email obfuscator script 2.1 by Tim Williams, University of Arizona\n// Random encryption key feature by Andrew Moulden, Site Engineering Ltd\n// This code is freeware provided these four comment lines remain intact\n// A wizard to generate this code is at http://www.jottings.com/obfuscator/\n{ coded = \"3A1OTJ:rJJ@VAK.GJ3\"\n  key = \"J0K94NR2SXLupIGqVwt8EZlhznemfaPjs7QvTB6iOyWYo3rAk5FHMdxCg1cDbU\"\n  shift=coded.length\n  link=\"\"\n  for (i=0; i&lt;coded.length; i++) {\n    if (key.indexOf(coded.charAt(i))==-1) {\n      ltr = coded.charAt(i)\n      link += (ltr)\n    }\n    else { \n      ltr = (key.indexOf(coded.charAt(i))-shift+key.length) % key.length\n      link += (key.charAt(ltr))\n    }\n  }\ndocument.write(\"&lt;a href='mailto:\"+link+\"'&gt;Send Me Email&lt;/a&gt;\")\n}\n//--&gt;\n&lt;/script&gt;&lt;noscript&gt;Sorry, you need Javascript on to email me.&lt;/noscript&gt;\n</code></pre>\n\n<p>After I get that back, I paste it into an editor and 1) remove the \"mailto:\", 2) replace link text with pointer to an image of my email address, 3) rename all the variables, and 4) replace the \"noscript\" section with another link to the email address image, I end up with this:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" language=\"javascript\"&gt;\n&lt;!--\n// Email obfuscator script 2.1 by Tim Williams, University of Arizona\n// Random encryption kkeoy feature by Andrew Moulden, Site Engineering Ltd\n// This kudzu is freeware provided these four comment lines remain intact\n// A wizard to generate this kudzu is at http://www.jottings.com/obfuscator/\n{ kudzu = \"3A1OTJ:rJJ@VAK.GJ3\"\n  kkeoy = \"J0K94NR2SXLupIGqVwt8EZlhznemfaPjs7QvTB6iOyWYo3rAk5FHMdxCg1cDbU\"\n  shift=kudzu.length\n  klonk=\"\"\n  for (variter=0; variter&lt;kudzu.length; variter++) {\n    if (kkeoy.indexOf(kudzu.charAt(variter))==-1) {\n      lutu = kudzu.charAt(variter)\n      klonk += (lutu)\n    }\n    else {\n      lutu = (kkeoy.indexOf(kudzu.charAt(variter))-shift+kkeoy.length) % kkeoy.length\n      klonk += (kkeoy.charAt(lutu))\n    }\n  }\ndocument.write(\"&lt;a href='\"+klonk+\"'&gt;&lt;img src='contactaddressimage.png' alt='Send Me Email' border='0' height='62' width='240'&gt;&lt;/a&gt;\")\n}\n//--&gt;\n&lt;/script&gt;\n&lt;noscript&gt;\n&lt;img src=\"contactaddressimage.png\" border=\"0\" height=\"62\" width=\"240\"&gt;\n&lt;font face=\"Arial\" size=\"3\"&gt;&lt;br&gt;&amp;nbsp;&lt;/font&gt;&lt;/p&gt;\n&lt;/noscript&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>mine is actually simple:</p>\n\n<pre><code>&lt;h3 id=\"email\"&gt;hello@gmail.com&lt;/h3&gt;&lt;!-- add a fake email --&gt;\n\n\n    $(document).ready(function(){\n//my email in reverse :)\n            var s = 'moc.elibomajninbew@htiek';\n            var e = s.split(\"\").reverse().join(\"\");\n            $('#email').html('&lt;a href=\"mailto:'+e+'\"&gt;'+e+'&lt;/a&gt;');\n    });\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>If anyone's using Rails, they can use the <code>actionview-encoded_mail_to</code> gem. (<a href=\"https://github.com/reed/actionview-encoded_mail_to\" rel=\"nofollow\">https://github.com/reed/actionview-encoded_mail_to</a>)</p>\n\n<p>There are a few options:</p>\n\n<blockquote>\n  <p>:encode - This key will accept the strings \"javascript\" or \"hex\".\n  Passing \"javascript\" will dynamically create and encode the mailto\n  link then eval it into the DOM of the page. This method will not show\n  the link on the page if the user has JavaScript disabled. Passing\n  \"hex\" will hex encode the email_address before outputting the mailto\n  link. </p>\n  \n  <p>:replace_at - When the link name isn't provided, the\n  email_address is used for the link label. You can use this option to\n  obfuscate the email_address by substituting the @ sign with the string\n  given as the value. </p>\n  \n  <p>:replace_dot - When the link name isn't provided,\n  the email_address is used for the link label. You can use this option\n  to obfuscate the email_address by substituting the . in the email with\n  the string given as the value.</p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I've spent the past few days working on updating my personal website. The URL of my personal website is (my first name).(my last name).com, as my last name is rather unusual, and I was lucky enough to pick up the domain name. My e-mail address is (my first name)@(my last name).com. So really, when it comes down to guessing it, it's not very hard.</p>\n\n<p>Anyways, I want to integrate a mailto: link into my website, so people can contact me. And, despite my e-mail address not being very hard to guess, I'd rather not have it harvested by spam bots that just crawl websites for e-mail address patterns and add them to their database.</p>\n\n<p>What is the best way for me to obfuscate my e-mail address, preferably in link form? The methods I know of are:</p>\n\n<pre><code>&lt;a href=\"mailto:x@y.com\"&gt;e-mail me&lt;/a&gt;\n</code></pre>\n\n<p>It works, but it also means that as soon as my website hits Google, I'll be wading through spam as spam bots easily pick out my e-mail address.</p>\n\n<pre><code>&lt;img src=\"images/e-mail.png\" /&gt;\n</code></pre>\n\n<p>This is less desirable, because not only will visitors be unable to click on it to send me an e-mail, but smarter spam bots will probably be able to detect the characters that the image contains.</p>\n\n<p>I know that there is probably no perfect solution, but I was just wondering what everyone thought was best. I'm definitely willing to use JavaScript if necessary, as my website already makes use of tons of it.</p>\n",
            "last_activity_date": 1411333863,
            "question_id": 748780,
            "score": 71,
            "tags": [
                "javascript",
                "html",
                "email",
                "obfuscation"
            ],
            "title": "Best way to obfuscate an e-mail address on a website?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>This will only ever hit document.cookie ONE time.  Every subsequent request will be instant.</p>\n\n<pre><code>(function(){\n    var cookies;\n\n    function readCookie(name,c,C,i){\n        if(cookies){ return cookies[name]; }\n\n        c = document.cookie.split('; ');\n        cookies = {};\n\n        for(i=c.length-1; i&gt;=0; i--){\n           C = c[i].split('=');\n           cookies[C[0]] = C[1];\n        }\n\n        return cookies[name];\n    }\n\n    window.readCookie = readCookie; // or expose it however you want\n})();\n</code></pre>\n\n<p>I'm afraid there really isn't a faster way than this general logic unless you're free to use <code>.forEach</code> which is browser dependent (even then you're not saving that much)</p>\n\n<p>Your own example slightly compressed to <code>120 bytes</code>:</p>\n\n<pre><code>function read_cookie(k,r){return(r=RegExp('(^|; )'+encodeURIComponent(k)+'=([^;]*)').exec(document.cookie))?r[2]:null;}\n</code></pre>\n\n<p>You can get it to <code>110 bytes</code> if you make it a 1-letter function name, <code>90 bytes</code> if you drop the <code>encodeURIComponent</code>.</p>\n\n<p>I've gotten it down to <code>73 bytes</code>, but to be fair it's <code>82 bytes</code> when named <code>readCookie</code> and <code>102 bytes</code> when then adding <code>encodeURIComponent</code>:</p>\n\n<pre><code>function C(k){return(document.cookie.match('(^|; )'+k+'=([^;]*)')||0)[2]}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 85
                },
                {
                    "body": "<p>(edit: posted the wrong version first.. and a non-functional one at that.  Updated to current, which uses an unparam function that is much like the second example.)</p>\n\n<p>Nice idea in the first example cwolves.  I built on both for a fairly compact cookie reading/writing function that works across multiple subdomains. Figured I'd share in case anyone else runs across this thread looking for that.</p>\n\n<pre><code>(function(s){\n  s.strToObj = function (x,splitter) {\n    for ( var y = {},p,a = x.split (splitter),L = a.length;L;) {\n      p = a[ --L].split ('=');\n      y[p[0]] = p[1]\n    }\n    return y\n  };\n  s.rwCookie = function (n,v,e) {\n    var d=document,\n        c= s.cookies||s.strToObj(d.cookie,'; '),\n        h=location.hostname,\n        domain;\n    if(v){\n      domain = h.slice(h.lastIndexOf('.',(h.lastIndexOf('.')-1))+1);\n      d.cookie = n + '=' + (c[n]=v) + (e ? '; expires=' + e : '') + '; domain=.' + domain + '; path=/'\n    }\n    return c[n]||c\n  };\n})(some_global_namespace)\n</code></pre>\n\n<ul>\n<li>If you pass rwCookie nothing, it will get\nall cookies into cookie storage</li>\n<li>Passed rwCookie a cookie name, it gets that\ncookie's value from storage</li>\n<li>Passed a cookie value, it writes the cookie and places the value in storage</li>\n<li>Expiration defaults to session unless you specify one</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Both of these functions look equally valid in terms of reading cookie. You can shave a few bytes off though (and it really is getting into Code Golf territory here):</p>\n\n<pre><code>function readCookie(name) {\n    var nameEQ = name + \"=\", ca = document.cookie.split(';'), i = 0, c;\n    for(;i &lt; ca.length;i++) {\n        c = ca[i];\n        while (c[0]==' ') c = c.substring(1);\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length);\n    }\n    return null;\n}\n</code></pre>\n\n<p>All I did with this is collapse all the variable declarations into one var statement, removed the unnecessary second arguments in calls to substring, and replace the one charAt call into an array dereference.</p>\n\n<p>This still isn't as short as the second function you provided, but even that can have a few bytes taken off:</p>\n\n<pre><code>function read_cookie(key)\n{\n    var result;\n    return (result = new RegExp('(^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? result[2] : null;\n}\n</code></pre>\n\n<p>I changed the first sub-expression in the regular expression to be a capturing sub-expression, and changed the result[1] part to result[2] to coincide with this change; also removed the unnecessary parens around result[2].</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<h3>Assumptions</h3>\n\n<p>Based on the question, I believe some assumptions / requirements for this function include:</p>\n\n<ul>\n<li>It will be used as a <strong>library function</strong>, and so meant to be dropped into any codebase;</li>\n<li>As such, it will need to <strong>work in many different environments</strong>, i.e. work with legacy JS code, CMSes of various levels of quality, etc.;</li>\n<li>To inter-operate with code written by other people and/or code that you do not control, the function <strong>should not make any assumptions on how cookie names or values are encoded</strong>. Calling the function with a string <code>\"foo:bar[0]\"</code> should return a cookie (literally) named \"foo:bar[0]\";</li>\n<li><strong>New cookies may be written</strong> and/or <strong>existing cookies modified</strong> at any point during lifetime of the page.</li>\n</ul>\n\n<p>Under these assumptions, it's clear that <code>encodeURIComponent</code> / <code>decodeURIComponent</code> <strong>should not be used</strong>; doing so assumes that the code that set the cookie also encoded it using these functions.</p>\n\n<p><strike>The regular expression approach gets problematic if the cookie name can contain special characters. jQuery.cookie works around this issue by encoding the cookie name (actually both name and value) when storing a cookie, and decoding the name when retrieving a cookie.</strike> A regular expression solution is below.</p>\n\n<p>Unless you're only reading cookies you control completely, it would also be advisable to <strong>read cookies from <code>document.cookie</code> directly</strong> and not cache the results, since there is no way to know if the cache is invalid without reading <code>document.cookie</code> again.</p>\n\n<p>(While accessing and parsing <code>document.cookies</code> will be slightly slower than using a cache, it would not be as slow as reading other parts of the DOM, since cookies do not play a role in the DOM / render trees.)</p>\n\n<hr>\n\n<h3>Loop-based function</h3>\n\n<p>Here goes the Code Golf answer, based on PPK's (loop-based) function:</p>\n\n<pre><code>function readCookie(name) {\n    name += '=';\n    for (var ca = document.cookie.split(/;\\s*/), i = ca.length - 1; i &gt;= 0; i--)\n        if (!ca[i].indexOf(name))\n            return ca[i].replace(name, '');\n}\n</code></pre>\n\n<p>which when minified, comes to 128 characters (not counting the function name):</p>\n\n<pre><code>function readCookie(n){n+='=';for(var a=document.cookie.split(/;\\s*/),i=a.length-1;i&gt;=0;i--)if(!a[i].indexOf(n))return a[i].replace(n,'');}\n</code></pre>\n\n<hr>\n\n<h3>Regular expression-based function</h3>\n\n<p><strong>Update:</strong> If you really want a regular expression solution:</p>\n\n<pre><code>function readCookie(name) {\n    return (name = new RegExp('(?:^|;\\\\s*)' + ('' + name).replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&amp;') + '=([^;]*)').exec(document.cookie)) &amp;&amp; name[1];\n}\n</code></pre>\n\n<p>This <a href=\"http://simonwillison.net/2006/Jan/20/escape/\">escapes</a> any special characters in the cookie name before constructing the RegExp object. Minified, this comes to 134 characters (not counting the function name):</p>\n\n<pre><code>function readCookie(n){return(n=new RegExp('(?:^|;\\\\s*)'+(''+n).replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g,'\\\\$&amp;')+'=([^;]*)').exec(document.cookie))&amp;&amp;n[1];}\n</code></pre>\n\n<p>As Rudu and cwolves have pointed out in the comments, the regular-expression-escaping regex can be shortened by a few characters. I think it would be good to keep the escaping regex consistent (you may be using it elsewhere), but their suggestions are worth considering.</p>\n\n<hr>\n\n<h3>Notes</h3>\n\n<p>Both of these functions won't handle <code>null</code> or <code>undefined</code>, i.e. if there is a cookie named \"null\", <code>readCookie(null)</code> will return its value. If you need to handle this case, adapt the code accordingly.</p>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>Using cwolves' answer, but not using a closure nor a pre-computed hash :</p>\n\n<pre><code>// Golfed it a bit, too...\nfunction readCookie(n){\n  var c = document.cookie.split('; '),\n      i = c.length,\n      C;\n\n  for(; i&gt;0; i--){\n     C = c[i].split('=');\n     if(C[0] == n) return C[1];\n  }\n}\n</code></pre>\n\n<p>...and minifying...</p>\n\n<pre><code>function readCookie(n){var c=document.cookie.split('; '),i=c.length,C;for(;i&gt;0;i--){C=c[i].split('=');if(C[0]==n)return C[1];}}\n</code></pre>\n\n<p>...equals 127 bytes.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>code from google analytics ga.js</p>\n\n<pre><code>function c(a){\n    var d=[],\n        e=document.cookie.split(\";\");\n    a=RegExp(\"^\\\\s*\"+a+\"=\\\\s*(.*?)\\\\s*$\");\n    for(var b=0;b&lt;e.length;b++){\n        var f=e[b].match(a);\n        f&amp;&amp;d.push(f[1])\n    }\n    return d\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>How about this one?</p>\n\n<pre><code>function getCookie(k){var v=document.cookie.match('(^|;) ?'+k+'=([^;]*)(;|$)');return v?v[2]:null}\n</code></pre>\n\n<p>Counted 89 bytes without the function name.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><strong>Shorter, more reliable and more performant than the current best-voted answer:</strong></p>\n\n<pre><code>function getCookieValue(a, b) {\n    b = document.cookie.match('(^|;)\\\\s*' + a + '\\\\s*=\\\\s*([^;]+)');\n    return b ? b.pop() : '';\n}\n</code></pre>\n\n<p>A performance comparison of various approaches is shown here:</p>\n\n<p><a href=\"http://jsperf.com/get-cookie-value-regex-vs-array-functions\">http://jsperf.com/get-cookie-value-regex-vs-array-functions</a></p>\n\n<p><strong>Some notes on approach:</strong></p>\n\n<p>The regex approach is not only the fastest, it yields the shortest function as well. Additionally it should be pointed out that according to the <a href=\"https://www.ietf.org/rfc/rfc2109.txt\">official spec (RFC 2109)</a>, the space after the semicolon which separates cookies in the document.cookie is optional and an argument could be made that it should not be relied upon. Additionally, whitespace is allowed before and after the equals sign (=) and an argument could be made that this potential whitespace should be factored into any reliable document.cookie parser. The regex above accounts for both of the above whitespace conditions.</p>\n",
                    "is_accepted": false,
                    "score": 9
                }
            ],
            "body": "<p><strong>What is the shortest, accurate, and cross-browser compatible method for reading a cookie in JavaScript?</strong> </p>\n\n<p>Very often, while building stand-alone scripts (where I can't have any outside dependencies), I find myself adding a function for reading cookies, and usually fall-back on the <a href=\"http://www.quirksmode.org/js/cookies.html\">QuirksMode.org <code>readCookie()</code></a> method (280 bytes, 216 minified.)</p>\n\n<pre><code>function readCookie(name) {\n    var nameEQ = name + \"=\";\n    var ca = document.cookie.split(';');\n    for(var i=0;i &lt; ca.length;i++) {\n        var c = ca[i];\n        while (c.charAt(0)==' ') c = c.substring(1,c.length);\n        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);\n    }\n    return null;\n}\n</code></pre>\n\n<p>It does the job, but its ugly, and adds quite a bit of bloat each time. </p>\n\n<p>The method that <a href=\"https://github.com/carhartl/jquery-cookie/blob/master/jquery.cookie.js\">jQuery.cookie</a> uses something like this (modified, 165 bytes, 125 minified):</p>\n\n<pre><code>function read_cookie(key)\n{\n    var result;\n    return (result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie)) ? (result[1]) : null;\n}\n</code></pre>\n\n<p><strong>Note</strong> this is not a 'Code Golf' competition: I'm legitimately interested in reducing the size of my readCookie function, and in ensuring the solution I have is valid. </p>\n",
            "last_activity_date": 1408984973,
            "question_id": 5639346,
            "score": 65,
            "tags": [
                "javascript",
                "cookies"
            ],
            "title": "Shortest function for reading a cookie in JavaScript"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<pre><code>$(window).height()\n\n$(window).width()\n</code></pre>\n\n<p>There is also a plugin to jquery to determine element location and offsets</p>\n\n<p><a href=\"http://plugins.jquery.com/project/dimensions\" rel=\"nofollow\">http://plugins.jquery.com/project/dimensions</a></p>\n\n<p>scrolling offset = offsetHeight property of an element</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>From jQuery Docs:</p>\n\n<pre><code>var height = $(window).height();\nvar scrollTop = $(window).scrollTop();\n</code></pre>\n\n<p><a href=\"http://docs.jquery.com/CSS/scrollTop\">http://docs.jquery.com/CSS/scrollTop</a><br />\n<a href=\"http://docs.jquery.com/CSS/height\">http://docs.jquery.com/CSS/height</a></p>\n",
                    "is_accepted": true,
                    "score": 235
                },
                {
                    "body": "<p>from <a href=\"http://api.jquery.com/height/\" rel=\"nofollow\">http://api.jquery.com/height/</a> (Note: The difference between the use for the window and the document object)</p>\n\n<pre><code>$(window).height();   // returns height of browser viewport\n$(document).height(); // returns height of HTML document\n</code></pre>\n\n<p>from <a href=\"http://api.jquery.com/scrollTop/\" rel=\"nofollow\">http://api.jquery.com/scrollTop/</a></p>\n\n<pre><code>$(window).scrollTop() // return the number of pixels scrolled vertically\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 37
                }
            ],
            "body": "<p>I need to grab the height of the window and the scrolling offset in jQuery, but I haven't had any luck finding this in the jQuery docs or Google. I'm 90% certain there's a way to access height and scrollTop for an element (presumably including the window), but I just can't find the specific reference.</p>\n\n<p>Any help is appreciated!  Thanks!</p>\n",
            "last_activity_date": 1423575572,
            "question_id": 303767,
            "score": 138,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "How do I determine height and scrolling position of window in jQuery?"
        },
        {
            "answer_count": 16,
            "answers": [
                {
                    "body": "<p>I don't think there's anything built in that you can use however I did find lots of examples of people rolling their own.</p>\n\n<ul>\n<li><a href=\"http://helephant.com/2007/05/diy-javascript-stack-trace/\">DIY javascript stack trace</a></li>\n<li><a href=\"http://eriwen.com/javascript/js-stack-trace/\">A Javascript stacktrace in any browser</a></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>If you have firebug, there's a break on all errors option in the script tab. Once the script has hit your breakpoint, you can look at firebug's stack window:\n<img src=\"http://helephant.com/wp-content/uploads/2009/02/stacktrace.png\" alt=\"alt text\" /></p>\n",
                    "is_accepted": false,
                    "score": 22
                },
                {
                    "body": "<p>It is easier to get a stack trace on Firefox than it is on IE but fundamentally here is what you want to do:</p>\n\n<p>Wrap the \"problematic\" piece of code in a try/catch block:</p>\n\n<pre><code>try {\n    // some code that doesn't work\n    var t = null;\n    var n = t.not_a_value;\n}\n    catch(e) {\n}\n</code></pre>\n\n<p>If you will examine the contents of the \"error\" object it contains the following fields:</p>\n\n<p>e.fileName : The source file / page where the issue came from\ne.lineNumber : The line number in the file/page where the issue arose \ne.message : A simple message describing what type of error took place\ne.name : The type of error that took place, in the example above it should be 'TypeError'\ne.stack : Contains the stack trace that caused the exception</p>\n\n<p>I hope this helps you out.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>A modified version of <a href=\"http://ivan-ghandhi.livejournal.com/942493.html\">this snippet</a> may somewhat help:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function stacktrace() { \n  function st2(f) {\n    return !f ? [] : \n        st2(f.caller).concat([f.toString().split('(')[0].substring(9) + '(' + f.arguments.join(',') + ')']);\n  }\n  return st2(arguments.callee.caller);\n}\n</code></pre>\n\n<p><br />\n<strong>EDIT :</strong></p>\n\n<p>A better (and simpler) solution as pointed out in the comments on the original question is to use the <code>stack</code> property of an <code>Error</code> object like so:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function stackTrace() {\n    var err = new Error();\n    return err.stack;\n}\n</code></pre>\n\n<p>This will generate output like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>DBX.Utils.stackTrace@http://localhost:49573/assets/js/scripts.js:44\nDBX.Console.Debug@http://localhost:49573/assets/js/scripts.js:9\n.success@http://localhost:49573/:462\nx.Callbacks/c@http://localhost:49573/assets/js/jquery-1.10.2.min.js:4\nx.Callbacks/p.fireWith@http://localhost:49573/assets/js/jquery-1.10.2.min.js:4\nk@http://localhost:49573/assets/js/jquery-1.10.2.min.js:6\n.send/r@http://localhost:49573/assets/js/jquery-1.10.2.min.js:6\n</code></pre>\n\n<p>Giving the name of the calling function along with the URL, its calling function, and so on.</p>\n",
                    "is_accepted": true,
                    "score": 142
                },
                {
                    "body": "<p>You can access the <code>stack</code> (<code>stacktrace</code> in Opera) properties of an <code>Error</code> instance even if you threw it. The thing is, you need to make sure you use <code>throw new Error(string)</code> (don't forget the <strong>new</strong> instead of <code>throw string</code>.</p>\n\n<p>Example:</p>\n\n<pre><code>try {\n    0++;\n} catch (e) {\n    var myStackTrace = e.stack || e.stacktrace || \"\";\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Note that chromium/chrome (other browsers using V8) do have a convenient interface to get a stacktrace through a <em>stack</em> property on <em>Error</em> objects.</p>\n\n<pre><code>try {\n   // Code throwing an exception\n} catch(e) {\n  console.log(e.stack);\n}\n</code></pre>\n\n<p>It applies for the base exceptions as well as for the ones you throw yourself. (Considered that you use the Error class, which is anyway a good practice).</p>\n\n<p>See details on <a href=\"http://code.google.com/p/v8/wiki/JavaScriptStackTraceApi\">V8 documentation</a></p>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p>one way to get a the real stack trace on Firebug is to create a real error like calling an undefined function:</p>\n\n<pre><code>function foo(b){\n  if (typeof b !== 'string'){\n    // undefined Error type to get the call stack\n    throw new ChuckNorrisError(\"Chuck Norris catches you.\");\n  }\n}\n\nfunction bar(a){\n  foo(a);\n}\n\nfoo(123);\n</code></pre>\n\n<p>Or use <code>console.error()</code> followed by a <code>throw</code> statement since <code>console.error()</code> shows the stack trace.</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>In Google Chrome (version 19.0 and beyond), simply throwing an exception works perfectly. For example:</p>\n\n<pre><code>/* file: code.js, line numbers shown */\n\n188: function fa() {\n189:    console.log('executing fa...');\n190:    fb();\n191: }\n192:\n193: function fb() {\n194:    console.log('executing fb...');\n195:    fc()\n196: }\n197:\n198: function fc() {\n199:    console.log('executing fc...');\n200:    throw 'error in fc...'\n201: }\n202:\n203: fa();\n</code></pre>\n\n<p>will show the stack trace at the browser's console output:</p>\n\n<pre><code>executing fa...                         code.js:189\nexecuting fb...                         code.js:194\nexecuting fc...                         cdoe.js:199\n/* this is your stack trace */\nUncaught error in fc...                 code.js:200\n    fc                                  code.js:200\n    fb                                  code.js:195\n    fa                                  code.js:190\n    (anonymous function)                code.js:203\n</code></pre>\n\n<p>Hope this help.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>In Firefox it seems that you don't need to throw the exception.  It's sufficient to do</p>\n\n<pre><code>e = new Error();\nconsole.log(e.stack);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<p>A good (and simple) solution as pointed out in the comments on the original question is to use the <code>stack</code> property of an <code>Error</code> object like so:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>function stackTrace() {\n    var err = new Error();\n    return err.stack;\n}\n</code></pre>\n\n<p>This will generate output like this:</p>\n\n<pre class=\"lang-none prettyprint-override\"><code>DBX.Utils.stackTrace@http://localhost:49573/assets/js/scripts.js:44\nDBX.Console.Debug@http://localhost:49573/assets/js/scripts.js:9\n.success@http://localhost:49573/:462\nx.Callbacks/c@http://localhost:49573/assets/js/jquery-1.10.2.min.js:4\nx.Callbacks/p.fireWith@http://localhost:49573/assets/js/jquery-1.10.2.min.js:4\nk@http://localhost:49573/assets/js/jquery-1.10.2.min.js:6\n.send/r@http://localhost:49573/assets/js/jquery-1.10.2.min.js:6\n</code></pre>\n\n<p>Giving the name of the calling function along with the URL and line number, its calling function, and so on.</p>\n\n<p>I have a really elaborate and pretty solution that I have devised for a project I am currently working on and I have extracted and reworked it a bit to be generalized. Here it is:</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>(function(context){\n    // Only global namespace.\n    var Console = {\n        //Settings\n        settings: {\n            debug: {\n                alwaysShowURL: false,\n                enabled: true,\n                showInfo: true\n            },\n            stackTrace: {\n                enabled: true,\n                collapsed: true,\n                ignoreDebugFuncs: true,\n                spacing: false\n            }\n        }\n    };\n\n    // String formatting prototype function.\n    if (!String.prototype.format) {\n        String.prototype.format = function () {\n            var s = this.toString(),\n                args = typeof arguments[0],\n                args = ((\"string\" == args || \"number\" == args) ? arguments : arguments[0]);\n            if (!arguments.length)\n                return s;\n            for (arg in args)\n                s = s.replace(RegExp(\"\\\\{\" + arg + \"\\\\}\", \"gi\"), args[arg]);\n            return s;\n        }\n    }\n\n    // String repeating prototype function.\n    if (!String.prototype.times) {\n        String.prototype.times = function () {\n            var s = this.toString(),\n                tempStr = \"\",\n                times = arguments[0];\n            if (!arguments.length)\n                return s;\n            for (var i = 0; i &lt; times; i++)\n                tempStr += s;\n            return tempStr;\n        }\n    }\n\n    // Commonly used functions\n    Console.debug = function () {\n        if (Console.settings.debug.enabled) {\n            var args = ((typeof arguments !== 'undefined') ? Array.prototype.slice.call(arguments, 0) : []),\n                sUA = navigator.userAgent,\n                currentBrowser = {\n                    firefox: /firefox/gi.test(sUA),\n                    webkit: /webkit/gi.test(sUA),\n                },\n                aLines = Console.stackTrace().split(\"\\n\"),\n                aCurrentLine,\n                iCurrIndex = ((currentBrowser.webkit) ? 3 : 2),\n                sCssBlack = \"color:black;\",\n                sCssFormat = \"color:{0}; font-weight:bold;\",\n                sLines = \"\";\n\n            if (currentBrowser.firefox)\n                aCurrentLine = aLines[iCurrIndex].replace(/(.*):/, \"$1@\").split(\"@\");\n            else if (currentBrowser.webkit)\n                aCurrentLine = aLines[iCurrIndex].replace(\"at \", \"\").replace(\")\", \"\").replace(/( \\()/gi, \"@\").replace(/(.*):(\\d*):(\\d*)/, \"$1@$2@$3\").split(\"@\");\n\n            // Show info if the setting is true and there's no extra trace (would be kind of pointless).\n            if (Console.settings.debug.showInfo &amp;&amp; !Console.settings.stackTrace.enabled) {\n                var sFunc = aCurrentLine[0].trim(),\n                    sURL = aCurrentLine[1].trim(),\n                    sURL = ((!Console.settings.debug.alwaysShowURL &amp;&amp; context.location.href == sURL) ? \"this page\" : sURL),\n                    sLine = aCurrentLine[2].trim(),\n                    sCol;\n\n                if (currentBrowser.webkit)\n                    sCol = aCurrentLine[3].trim();\n\n                console.info(\"%cOn line %c{0}%c{1}%c{2}%c of %c{3}%c inside the %c{4}%c function:\".format(sLine, ((currentBrowser.webkit) ? \", column \" : \"\"), ((currentBrowser.webkit) ? sCol : \"\"), sURL, sFunc),\n                             sCssBlack, sCssFormat.format(\"red\"),\n                             sCssBlack, sCssFormat.format(\"purple\"),\n                             sCssBlack, sCssFormat.format(\"green\"),\n                             sCssBlack, sCssFormat.format(\"blue\"),\n                             sCssBlack);\n            }\n\n            // If the setting permits, get rid of the two obvious debug functions (Console.debug and Console.stackTrace).\n            if (Console.settings.stackTrace.ignoreDebugFuncs) {\n                // In WebKit (Chrome at least), there's an extra line at the top that says \"Error\" so adjust for this.\n                if (currentBrowser.webkit)\n                    aLines.shift();\n                aLines.shift();\n                aLines.shift();\n            }\n\n            sLines = aLines.join(((Console.settings.stackTrace.spacing) ? \"\\n\\n\" : \"\\n\")).trim();\n\n            trace = typeof trace !== 'undefined' ? trace : true;\n            if (typeof console !== \"undefined\") {\n                for (var arg in args)\n                    console.debug(args[arg]);\n\n                if (Console.settings.stackTrace.enabled) {\n                    var sCss = \"color:red; font-weight: bold;\",\n                        sTitle = \"%c Stack Trace\" + \" \".times(70);\n\n                    if (Console.settings.stackTrace.collapsed)\n                        console.groupCollapsed(sTitle, sCss);\n                    else\n                        console.group(sTitle, sCss);\n\n                    console.debug(\"%c\" + sLines, \"color: #666666; font-style: italic;\");\n\n                    console.groupEnd();\n                }\n            }\n        }\n    }\n    Console.stackTrace = function () {\n        var err = new Error();\n        return err.stack;\n    }\n\n    context.Console = Console;\n})(window);\n</code></pre>\n\n<p>Check it out on <a href=\"https://github.com/gabrielnahmias/Console.js\" rel=\"nofollow\">GitHub</a> (currently v1.2)! You can use it like <code>Console.debug(\"Whatever\");</code> and it will, depending on the settings in <code>Console</code>, print the output and a stack trace (or just simple info/nothing extra at all). Here's an example:</p>\n\n<p><img src=\"http://i.stack.imgur.com/HfgLP.png\" alt=\"Console.js\"></p>\n\n<p>Make sure to play around with the settings in the <code>Console</code> object! You can add spacing between the lines of the trace and turn it off entirely. Here it is with <code>Console.trace</code> set to <code>false</code>:</p>\n\n<p><img src=\"http://i.stack.imgur.com/6310K.png\" alt=\"No trace\"></p>\n\n<p>You can even turn off the first bit of info shown (set <code>Console.settings.debug.showInfo</code> to <code>false</code>) or disable debugging entirely (set <code>Console.settings.debug.enabled</code> to <code>false</code>) so you never have to comment out a debug statement again! Just leave them in and this will do nothing.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>With Chrome browser, you can use <code>console.trace</code> method: <a href=\"https://developer.chrome.com/devtools/docs/console-api#consoletraceobject\" rel=\"nofollow\">https://developer.chrome.com/devtools/docs/console-api#consoletraceobject</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Kind of late to the party, but, here is another solution, which <strong>autodetects</strong> if arguments.callee is available, and uses new Error().stack if not.\nTested in chrome, safari and firefox.</p>\n\n<p>2 variants - stackFN(n) gives you the name of the function n away from the immediate caller, and stackArray() gives you an array, stackArray()[0] being the immediate caller.</p>\n\n<p>Try it out at <a href=\"http://jsfiddle.net/qcP9y/6/\" rel=\"nofollow\">http://jsfiddle.net/qcP9y/6/</a></p>\n\n<pre><code>// returns the name of the function at caller-N\n// stackFN()  = the immediate caller to stackFN\n// stackFN(0) = the immediate caller to stackFN\n// stackFN(1) = the caller to stackFN's caller\n// stackFN(2) = and so on\n// eg console.log(stackFN(),JSON.stringify(arguments),\"called by\",stackFN(1),\"returns\",retval);\nfunction stackFN(n) {\n    var r = n ? n : 0, f = arguments.callee,avail=typeof f === \"function\",\n        s2,s = avail ? false : new Error().stack;\n    if (s) {\n        var tl=function(x) { s = s.substr(s.indexOf(x) + x.length);},\n        tr = function (x) {s = s.substr(0, s.indexOf(x) - x.length);};\n        while (r-- &gt;= 0) {\n            tl(\")\");\n        }\n        tl(\" at \");\n        tr(\"(\");\n        return s;\n    } else {\n        if (!avail) return null;\n        s = \"f = arguments.callee\"\n        while (r&gt;=0) {\n            s+=\".caller\";\n            r--;   \n        }\n        eval(s);\n        return f.toString().split(\"(\")[0].trim().split(\" \")[1];\n    }\n}\n// same as stackFN() but returns an array so you can work iterate or whatever.\nfunction stackArray() {\n    var res=[],f = arguments.callee,avail=typeof f === \"function\",\n        s2,s = avail ? false : new Error().stack;\n    if (s) {\n        var tl=function(x) { s = s.substr(s.indexOf(x) + x.length);},\n        tr = function (x) {s = s.substr(0, s.indexOf(x) - x.length);};\n        while (s.indexOf(\")\")&gt;=0) {\n            tl(\")\");\n            s2= \"\"+s;\n            tl(\" at \");\n            tr(\"(\");\n            res.push(s);\n            s=\"\"+s2;\n        }\n    } else {\n        if (!avail) return null;\n        s = \"f = arguments.callee.caller\"\n        eval(s);\n        while (f) {\n            res.push(f.toString().split(\"(\")[0].trim().split(\" \")[1]);\n            s+=\".caller\";\n            eval(s);\n        }\n    }\n    return res;\n}\n\n\nfunction apple_makes_stuff() {\n    var retval = \"iPhones\";\n    var stk = stackArray();\n\n    console.log(\"function \",stk[0]+\"() was called by\",stk[1]+\"()\");\n    console.log(stk);\n    console.log(stackFN(),JSON.stringify(arguments),\"called by\",stackFN(1),\"returns\",retval);\n    return retval;\n}\n\n\n\nfunction apple_makes (){\n    return apple_makes_stuff(\"really nice stuff\");\n}\n\nfunction apple () {\n    return apple_makes();\n}\n\n   apple();\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I had to investigate an endless recursion in smartgwt with IE11, so in order to investigate deeper, I needed a stack trace. The problem was, that I was unable to use the dev console, because the reproduction was more difficult that way.<br>\nUse the following in a javascript method:</p>\n\n<pre><code>try{ null.toString(); } catch(e) { alert(e.stack); }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could use this library <a href=\"http://www.stacktracejs.com/\" rel=\"nofollow\">http://www.stacktracejs.com/</a> . It's very good</p>\n\n<p>From documentation</p>\n\n<blockquote>\n  <p>You can also pass in your own Error to get a stacktrace not available\n  in IE or Safari 5-</p>\n</blockquote>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"https://rawgithub.com/stacktracejs/stacktrace.js/master/stacktrace.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n    try {\n        // error producing code\n    } catch(e) {\n        var trace = printStackTrace({e: e});\n        alert('Error!\\n' + 'Message: ' + e.message + '\\nStack trace:\\n' + trace.join('\\n'));\n        // do something else with error\n    }\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>This will give a stack trace (as array of strings) for modern Chrome, Opera, Firefox and IE10+</p>\n\n<pre><code>function getStackTrace () {\n\n  var stack;\n\n  try {\n    throw new Error('');\n  }\n  catch (error) {\n    stack = error.stack || '';\n  }\n\n  stack = stack.split('\\n').map(function (line) { return line.trim(); });\n  return stack.splice(stack[0] == 'Error' ? 2 : 1);\n}\n</code></pre>\n\n<p>Usage:</p>\n\n<pre><code>console.log(getStackTrace().join('\\n'));\n</code></pre>\n\n<p>It excludes from the stack its own call as well as title \"Error\" that is used by Chrome and Firefox (but not IE).</p>\n\n<p>It shouldn't crash on older browsers but just return empty array. If you need more universal solution look at <a href=\"http://www.stacktracejs.com/\" rel=\"nofollow\">stacktrace.js</a>. Its list of supported browsers is really impressive but to my mind it is very big for that small task it is intended for: 37Kb of minified text including all dependencies. </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>An update to Eugene's answer: The error object must be thrown in order for IE (specific versions?) to populate the <code>stack</code> property. The following should work better than his current example, and should avoid returning <code>undefined</code> when in IE.</p>\n\n<pre><code>function stackTrace() {\n  try {\n    var err = new Error();\n    throw err;\n  } catch (err) {\n    return err.stack;\n  }\n}\n</code></pre>\n\n<p>Note 1: This sort of thing should only be done when debugging, and disabled when live, especially if called frequently. Note 2: This may not work in all browsers, but seems to work in FF and IE 11, which suits my needs just fine.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>If I throw a Javascript exception myself (eg, <code>throw \"AArrggg\"</code>), how can I get the stack trace (in Firebug or otherwise)?  Right now I just get the message.</p>\n\n<p><strong>edit</strong>: As many people below have posted, it is possible to get a stack trace for a <em>JavaScript exception</em> but I want to get a stack trace for <em>my</em> exceptions.  For example:</p>\n\n<pre><code>function foo() {\n    bar(2);\n}\nfunction bar(n) {\n    if (n &lt; 2)\n        throw \"Oh no! 'n' is too small!\"\n    bar(n-1);\n}\n</code></pre>\n\n<p>When <code>foo</code> is called, I want to get a stack trace which includes the calls to <code>foo</code>, <code>bar</code>, <code>bar</code>.</p>\n",
            "last_activity_date": 1426194466,
            "question_id": 591857,
            "score": 128,
            "tags": [
                "javascript",
                "stack-trace"
            ],
            "title": "How can I get a Javascript stack trace when I throw an exception?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<p>I'm pretty new to iOS and Phonegap as well, but I was able to do this by adding in an eventListener. I did the same thing (using the example you reference), and couldn't get it to work. But this seemed to do the trick:</p>\n\n<pre><code>// Event listener to determine change (horizontal/portrait)\nwindow.addEventListener(\"orientationchange\", updateOrientation); \n\nfunction updateOrientation(e) {\nswitch (e.orientation)\n{   \n    case 0:\n        // Do your thing\n        break;\n\n    case -90:\n        // Do your thing\n        break;\n\n    case 90:\n        // Do your thing\n        break;\n\n    default:\n        break;\n    }\n}\n</code></pre>\n\n<p>You may have some luck searching the PhoneGap Google Group <a href=\"http://groups.google.com/group/phonegap/search?group=phonegap&amp;q=orientation&amp;qt_g=Search%20this%20group\" rel=\"nofollow\">for the term \"orientation\"</a>. </p>\n\n<p>One example I read about as an example on how to detect orientation was Pie Guy: (<a href=\"http://mrgan.com/pieguy/\" rel=\"nofollow\" title=\"game\">game</a>, <a href=\"http://mrgan.com/pieguy/main.js\" rel=\"nofollow\">js file</a>). It's similar to the code you've posted, but like you... I couldn't get it to work.</p>\n\n<p>One caveat: the eventListener worked for me, but I'm not sure if this is an overly intensive approach. So far it's been the only way that's worked for me, but I don't know if there are better, more streamlined ways.</p>\n\n<hr>\n\n<p><strong>UPDATE</strong> fixed the code above, it works now</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I'm creating a jQTouch app in PhoneGap for the iPhone. I've been battling with this issue for days. I've seen the eventlistener solution suggested a few times, but just could not get it to work.</p>\n\n<p>In the end I came up with a different solution. It basically checks the width of the body periodically using settimeout. If the width is 320 then the orientation is portrait, if 480 then landscape. Then, if the orientation has changed since the last check, it will fire either a portrait stuff function or a landscape stuff function where you can do your thing for each orientation.</p>\n\n<p>Code (note, I know there is some repetition in the code, just haven't bothered to trim it down yet!):</p>\n\n<pre><code>// get original orientation based on body width\ndeviceWidth = $('body').width();\nif (deviceWidth == 320) {\n    currentOrientation = \"portrait\";\n}\nelse if (deviceWidth == 480) {\n    currentOrientation = \"landscape\";\n}\n\n// fire a function that checks the orientation every x milliseconds\nsetInterval(checkOrientation, 500);\n\n// check orientation\nfunction checkOrientation() {\n    deviceWidth = $('body').width();\n    if (deviceWidth == '320') {\n        newOrientation = \"portrait\";\n    }\n    else if (deviceWidth == '480') {\n        newOrientation = \"landscape\";\n    }\n    // if orientation changed since last check, fire either the portrait or landscape function\n    if (newOrientation != currentOrientation) {\n        if (newOrientation == \"portrait\") {\n            changedToPortrait();\n        }\n        else if (newOrientation == \"landscape\") {\n            changedToLandscape();\n        }\n        currentOrientation = newOrientation;\n    }\n}\n\n// landscape stuff\nfunction changedToLandscape() {\n    alert('Orientation has changed to Landscape!');\n}\n\n// portrait stuff\nfunction changedToPortrait() {\n    alert('Orientation has changed to Portrait!');\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>I use <code>window.onresize = function(){ checkOrientation(); }</code>\nAnd in checkOrientation you can employ window.orientation or body width checking\nbut the idea is, the \"window.onresize\" is the most cross browser method, at least with the majority of the mobile and desktop browsers that I've had an opportunity to test with.</p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>That's what I do:</p>\n\n<pre><code>&lt;script&gt;           \n  function doOnOrientationChange()\n  {\n    switch(window.orientation) \n    {  \n      case -90:\n      case 90:\n        alert('landscape');\n        break; \n      default:\n        alert('portrait');\n        break; \n    }\n  }\n\n  window.addEventListener('orientationchange', doOnOrientationChange);\n\n  // Initial execution if needed\n  doOnOrientationChange();\n&lt;/script&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 142
                },
                {
                    "body": "<p>Previous answers misspelled the event, the correct code would be</p>\n\n<pre><code>document.addEventListener(\"orientationchange\", updateOrientation);\n</code></pre>\n\n<p>Works on iPad and Galaxy Tab.</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>The following worked for me:</p>\n\n<pre><code>function changeOrientation(){\nswitch(window.orientation) {\ncase 0: // portrait, home bottom\ncase 180: // portrait, home top\n alert(\"portrait H: \"+$(window).height()+\" W: \"+$(window).width());       \n break;\n          case -90: // landscape, home left\n          case 90: // landscape, home right\n        alert(\"landscape H: \"+$(window).height()+\" W: \"+$(window).width());\n            break;\n        }\n    }\n\n window.onorientationchange = function() { \n            //Need at least 800 milliseconds\n            setTimeout(changeOrientation, 1000);\n        }\n</code></pre>\n\n<p>I needed the timeout because the value of <code>window.orientation</code> does not update right away</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>i know this is 3 years old, but still comes up high in google rankings.. i wanted to add to Raine's answer re using window.onresize in case it helps anyone else. (not enough cred to comment)</p>\n\n<p>i liked the resize method largely because it made desktop testing easier.. but, now anyway, iPhone doesn't fire the onresize event when orientation changes.</p>\n\n<p>the window.addEventListener(\"orientationchange\") solution works great on iPhone and android.. but not on my desktop testing environ :(</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>While working with the <code>orientationchange</code> event, I needed a timeout to get the correct dimensions of the elements in the page, but matchMedia worked fine. My final code:</p>\n\n<pre><code>var matchMedia = window.msMatchMedia || window.MozMatchMedia || window.WebkitMatchMedia || window.matchMedia;\n\nif (typeof(matchMedia) !== 'undefined') {\n  // use matchMedia function to detect orientationchange\n  window.matchMedia('(orientation: portrait)').addListener(function() {\n    // your code ...\n  });\n} else {\n  // use orientationchange event with timeout (fires to early)\n  $(window).on('orientationchange', function() {\n    window.setTimeout(function() {\n      // your code ...\n    }, 300)\n  });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I found this orientation test code below looking for JQTouch reference material. This works correctly in the IOS simulator in mobile safari but doesn't handle correctly in Phonegap. My project is running into the same issue that is killing this test page. Is there a way to sense the orientation change using javascript in Phonegap?</p>\n\n<p>Any help would be appreciated.</p>\n\n<pre><code>window.onorientationchange = function() {\n      /*window.orientation returns a value that indicates whether iPhone is in portrait mode, landscape mode with the screen turned to the\n        left, or landscape mode with the screen turned to the right. */\n      var orientation = window.orientation;\n      switch(orientation) {\n        case 0:\n            /* If in portrait mode, sets the body's class attribute to portrait. Consequently, all style definitions matching the body[class=\"portrait\"] declaration\n               in the iPhoneOrientation.css file will be selected and used to style \"Handling iPhone or iPod touch Orientation Events\". */\n            document.body.setAttribute(\"class\",\"portrait\");\n\n            /* Add a descriptive message on \"Handling iPhone or iPod touch Orientation Events\"  */\n            document.getElementById(\"currentOrientation\").innerHTML=\"Now in portrait orientation (Home button on the bottom).\";\n            break; \n\n        case 90:\n            /* If in landscape mode with the screen turned to the left, sets the body's class attribute to landscapeLeft. In this case, all style definitions matching the\n               body[class=\"landscapeLeft\"] declaration in the iPhoneOrientation.css file will be selected and used to style \"Handling iPhone or iPod touch Orientation Events\". */\n            document.body.setAttribute(\"class\",\"landscape\");\n\n            document.getElementById(\"currentOrientation\").innerHTML=\"Now in landscape orientation and turned to the left (Home button to the right).\";\n            break;\n\n        case -90: \n            /* If in landscape mode with the screen turned to the right, sets the body's class attribute to landscapeRight. Here, all style definitions matching the\n               body[class=\"landscapeRight\"] declaration in the iPhoneOrientation.css file will be selected and used to style \"Handling iPhone or iPod touch Orientation Events\". */\n            document.body.setAttribute(\"class\",\"landscape\");\n\n            document.getElementById(\"currentOrientation\").innerHTML=\"Now in landscape orientation and turned to the right (Home button to the left).\";\n            break;\n      }\n    }\n</code></pre>\n",
            "last_activity_date": 1408087711,
            "question_id": 5284878,
            "score": 81,
            "tags": [
                "javascript",
                "iphone",
                "ios",
                "cordova",
                "jqtouch"
            ],
            "title": "How do I correctly detect orientation change using javascript and Phonegap in IOS?"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>By using a simple <code>for..in</code> loop:</p>\n\n<pre><code>for(var key in objects) {\n    var value = objects[key];\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 120
                },
                {
                    "body": "<p>You can loop through the keys:</p>\n\n<pre><code>foo = {one:1, two:2, three:3};\nfor (key in foo){\n    console.log(\"foo[\"+ key +\"]=\"+ foo[key]);\n}\n</code></pre>\n\n<p>will output:</p>\n\n<pre><code>foo[one]=1\nfoo[two]=2\nfoo[three]=3\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>in <strong>ECMAScript5</strong> use</p>\n\n<pre><code> keys = Object.keys(object);\n</code></pre>\n\n<p>Otherwise if you're browser does not support it, use the well-known <code>for..in loop</code></p>\n\n<pre><code>for (key in object) {\n    // your code here\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>Here's a reusable function for getting the values into an array. It takes prototypes into account too.</p>\n\n<pre><code>Object.values = function (obj) {\n    var vals = [];\n    for( var key in obj ) {\n        if ( obj.hasOwnProperty(key) ) {\n            vals.push(obj[key]);\n        }\n    }\n    return vals;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<h1>ECMA 5+</h1>\n\n<p>You can use these methods in any browser that supports ECMA 5 and above. These get values from an object and avoid enumerating over the prototype chain. Where <code>obj</code> is your object:</p>\n\n<pre><code>var keys = Object.keys(obj);\n\nfor (var i = 0; i &lt; keys.length; i++) {\n    var val = obj[keys[i]];\n    // use val\n}\n</code></pre>\n\n<p>or</p>\n\n<pre><code>for (var key in obj) {\n    if (obj.hasOwnProperty(key)) {\n        var val = obj[key];\n        // use val\n    }\n}\n</code></pre>\n\n<p>If you want something a little more compact or you want to be careful with functions in loops, then <code>Array.prototype.forEach</code> is your friend:</p>\n\n<pre><code>Object.keys(obj).forEach(function (key) {\n    var val = obj[key];\n    // use val\n});\n</code></pre>\n\n<p>The next method builds an array containing the values of an object. This is convenient for looping over.</p>\n\n<pre><code>var vals = Object.keys(obj).map(function (key) {\n    return obj[key];\n});\n\n// use vals array\n</code></pre>\n\n<p>If you want to make those using <code>Object.keys</code> safe against <code>null</code> (as <code>for-in</code> is), then you can do <code>Object.keys(obj || {})...</code>.</p>\n\n<h1>ECMA 6+</h1>\n\n<p>Arrays will become easier to iterate with ES6. You can use this to your advantage when working with values one-by\u2013one in a loop:</p>\n\n<pre><code>for (let key of Object.keys(obj)) {\n    let val = obj[key];\n    // use val\n}\n</code></pre>\n\n<p>Using new fat-arrow functions mapping the object to an array of values becomes a one-liner:</p>\n\n<pre><code>var vals = Object.keys(obj).map(key =&gt; obj[key]);\n\n// use vals array\n</code></pre>\n\n<h2>Array comprehensions (removed)</h2>\n\n<p>Array comprehensions have been removed from ECMA 6 before publication. Prior to their removal, a solution would have looked like:</p>\n\n<pre><code>var vals = [for (key of Object.keys(obj)) obj[key]];\n\n// use vals array\n</code></pre>\n\n<p>Firefox still has an implementation of array comprehensions, but it should not be considered standard and will likely not be implemented in other JavaScript engines.</p>\n\n<h1>ECMA 7+ (?)</h1>\n\n<p>It appears that standard modules are not arriving until some time after ES6. Once those have arrived, you'll be able to use them to iterate over object keys, and it'll look something like the following (which uses <code>import</code> from ES6).</p>\n\n<pre><code>import {values} from '@dict';\n\nfor (let val of values(obj)) {\n    // use val\n}\n</code></pre>\n\n<p>The <code>values</code> function returns an <em>iterator</em> (and not a plain old array), but it can be coerced neatly to an array using the ES6 <code>Array.from</code> function. If you want an array of values from an object, then you can use:</p>\n\n<pre><code>import {values} from '@dict';\n\nvar vals = Array.from(values(obj));\n\n// use vals array\n</code></pre>\n\n<p>I find this form wonderfully readable.</p>\n\n<p>If you want to get really fancy, then you can instead use the spread operator (available from ECMA 6) to fill an array literal with values:</p>\n\n<pre><code>import {values} from '@dict';\n\nvar vals = [...values(obj)];\n\n// use vals array\n</code></pre>\n\n<h1><code>Object.values</code> shim</h1>\n\n<p>Finally, as noted in the comments and by teh_senaus in another answer, it may be worth using one of these as a shim. Don't worry, the following does not change the prototype, it just adds a method to <code>Object</code> (which is much less dangerous). Using fat-arrow functions, this can be done in one line too:</p>\n\n<pre><code>Object.values = obj =&gt; Object.keys(obj).map(key =&gt; obj[key]);\n</code></pre>\n\n<p>which you can now use like</p>\n\n<pre><code>// ['one', 'two', 'three']\nvar values = Object.values({ a: 'one', b: 'two', c: 'three' });\n</code></pre>\n\n<h1>Finally...</h1>\n\n<p>Be aware of the browsers/versions you need to support. The above are correct where the methods or language features are implemented. For example, support for ECMA 6 is switched off by default in V8 powered browsers such as Chrome. Features from 6 should be avoided completely for production code until the specification is published and the browsers you intend to support implement the features that you need.</p>\n",
                    "is_accepted": false,
                    "score": 216
                },
                {
                    "body": "<pre><code>var objects={...}; this.getAllvalues = function () {\n        var vls = [];\n        for (var key in objects) {\n            vls.push(objects[key]);\n        }\n        return vls;\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>If you have access to underscore.js, you can use the _.values function like this:</p>\n\n<pre><code>_.values({one : 1, two : 2, three : 3}); // return [1, 2, 3]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 15
                },
                {
                    "body": "<pre><code>var foo = {one:1, two:2, three:3};\nJSON.stringify(foo).replace(/[{}]/g, \"\").replace(/\"[a-zA-Z0-9]+\":/g, \"\").replace(/\"/g, \"\").split(\",\")\n</code></pre>\n\n<p>out put :</p>\n\n<blockquote>\n  <p>[\"1\", \"2\", \"3\"]</p>\n</blockquote>\n\n<p>demo : </p>\n\n<blockquote>\n  <p><a href=\"http://jsfiddle.net/L2MrF/\" rel=\"nofollow\">http://jsfiddle.net/L2MrF/</a></p>\n</blockquote>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>use </p>\n\n<pre><code>console.log(variable)\n</code></pre>\n\n<p>and if you using google chrome open Console by using Ctrl+Shift+j</p>\n\n<p>Goto >> Console</p>\n",
                    "is_accepted": false,
                    "score": -6
                },
                {
                    "body": "<pre><code>a = {a:1,b:2,c:3}\nObject.keys(a).map(function(key){return a[key]})\nresult: [1,2,3]\n</code></pre>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>For those early adapting people on the CofeeScript era, here's another equivalent for it.</p>\n\n<pre><code>val for key,val of objects\n</code></pre>\n\n<p>Which may be better than this because the <code>objects</code> can be reduced to be typed again and decreased readability.</p>\n\n<pre><code>objects[key] for key of objects\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>If there is an Javascript object: </p>\n\n<pre><code>var objects={...};\n</code></pre>\n\n<p>Suppose, it has more than 50 properties, without knowing the property names (that's without knowing the 'keys') how to get each property value in a loop?</p>\n",
            "last_activity_date": 1424780419,
            "question_id": 7306669,
            "score": 92,
            "tags": [
                "javascript",
                "javascript-events",
                "javascript-library"
            ],
            "title": "How to get all properties values of a Javascript Object (without knowing the keys)?"
        },
        {
            "answer_count": 15,
            "answers": [
                {
                    "body": "<p>Edit: Some complain that it doesn't take into account protocol. So I decided to upgrade the code, since it is marked as answer. For those who like one-line-code... well sorry this why we use code minimizers, code should be human readable and this way is better... in my opinion.</p>\n\n<pre><code>pathArray = location.href.split( '/' );\nprotocol = pathArray[0];\nhost = pathArray[2];\nurl = protocol + '//' + host;\n</code></pre>\n\n<p>or use @David Czihak solution (from bellow):</p>\n\n<pre><code>if (!location.origin)\n   location.origin = location.protocol + \"//\" + location.host;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 108
                },
                {
                    "body": "<p>Don't need to use jQuery, just use</p>\n\n<pre><code>location.hostname\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 32
                },
                {
                    "body": "<p>You can do it using a regex : </p>\n\n<pre><code>/(http:\\/\\/)?(www)[^\\/]+\\//i\n</code></pre>\n\n<p>does it fit ?</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>There is no reason to do splits to get the path, hostname, etc from a string that is a link. You just need to use a link</p>\n\n<pre><code>//create a new element link with your link\nvar a = document.createElement(\"a\");\na.href=\"http://www.sitename.com/article/2009/09/14/this-is-an-article/\";\n\n//hide it from view when it is added\na.style.display=\"none\";\n\n//add it\ndocument.body.appendChild(a);\n\n//read the links \"features\"\nalert(a.protocol);\nalert(a.hostname)\nalert(a.pathname)\nalert(a.port);\nalert(a.hash);\n\n//remove it\ndocument.body.removeChild(a);\n</code></pre>\n\n<p>You can easily do it with jQuery appending the element and reading its attr.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>If you're using jQuery, this is a kinda cool way to manipulate elements in javascript without adding them to the DOM:</p>\n\n<pre><code>var myAnchor = $(\"&lt;a /&gt;\");\n\n//set href    \nmyAnchor.attr('href', 'http://example.com/path/to/myfile')\n\n//your link's features\nvar hostname = myAnchor.attr('hostname'); // http://example.com\nvar pathname = myAnchor.attr('pathname'); // /path/to/my/file\n//...etc\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>WebKit-based browsers and Firefox as of version 21 know <code>location.origin</code>. To target all browsers, I use the following code:</p>\n\n<pre><code>if (!location.origin)\n     location.origin = location.protocol + \"//\" + location.host;\n</code></pre>\n\n<p>Suppose the URL is <code>http://www.sitename.com/article/2009/09/14/this-is-an-article/</code>, then <code>location.origin</code> would be <code>http://www.sitename.com</code>.</p>\n\n<p>Tested in the following browsers:</p>\n\n<ul>\n<li>Chrome 27</li>\n<li>Firefox 23</li>\n<li>Safari 6</li>\n<li>Internet Explorer 10</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 104
                },
                {
                    "body": "<p>If you are extracting information from window.location.href (the address bar), then use this code to get <code>http://www.sitename.com/</code>:</p>\n\n<pre><code>var loc = location;\nvar url = loc.protocol + \"//\" + loc.host + \"/\";\n</code></pre>\n\n<p>If you have a string, <code>str</code>, that is an arbitrary URL (not window.location.href), then use regular expressions:</p>\n\n<pre><code>var url = str.match(/^(([a-z]+:)?(\\/\\/)?[^\\/]+\\/).*$/)[1];\n</code></pre>\n\n<p>I, like everyone in the Universe, hate reading regular expressions, so I'll break it down in English:</p>\n\n<ul>\n<li>Find zero or more alpha characters followed by a colon (the protocol, which can be omitted)</li>\n<li>Followed by // (can also be omitted)</li>\n<li>Followed by any characters except / (the hostname and port)</li>\n<li>Followed by /</li>\n<li>Followed by whatever (the path, less the beginning /).</li>\n</ul>\n\n<p>No need to create DOM elements or do anything crazy.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A lightway but complete approach to getting basic values from a string representation of an URL is Douglas Crockford's regexp rule:</p>\n\n<pre><code>var yourUrl = \"http://www.sitename.com/article/2009/09/14/this-is-an-article/\";\nvar parse_url = /^(?:([A-Za-z]+):)?(\\/{0,3})([0-9.\\-A-Za-z]+)(?::(\\d+))?(?:\\/([^?#]*))?(?:\\?([^#]*))?(?:#(.*))?$/;\nvar parts = parse_url.exec( yourUrl );\nvar result = parts[1]+':'+parts[2]+parts[3]+'/' ;\n</code></pre>\n\n<p>If you are looking for a more powerful URL manipulation toolkit try <a href=\"https://github.com/medialize/URI.js\">URI.js</a> It supports getters, setter, url normalization etc. all with a nice chainable api.</p>\n\n<p>If you are looking for a jQuery Plugin, then <a href=\"https://github.com/allmarkedup/jQuery-URL-Parser\">jquery.url.js</a> should help you</p>\n\n<p>A simpler way to do it is by using an anchor element, as @epascarello suggested. This has the disadvantage that you have to create a DOM Element. However this can be cached in a closure and reused for multiple urls:</p>\n\n<pre><code>var parseUrl = (function () {\n  var a = document.createElement('a');\n  return function (url) {\n    a.href = url;\n    return {\n      host: a.host,\n      hostname: a.hostname,\n      pathname: a.pathname,\n      port: a.port,\n      protocol: a.protocol,\n      search: a.search,\n      hash: a.hash\n    };\n  }\n})();\n</code></pre>\n\n<p>Use it like so:</p>\n\n<pre><code>paserUrl('http://google.com');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>Instead of having to account for window.location.protocol and window.location.origin, and possibly missing a specified port number, etc., just grab everything up to the 3rd \"/\": </p>\n\n<pre><code>// get nth occurrence of a character c in the calling string\nString.prototype.nthIndex = function (n, c) {\n    var index = -1;\n    while (n-- &gt; 0) {\n        index++;\n        if (this.substring(index) == \"\") return -1; // don't run off the end\n        index += this.substring(index).indexOf(c);\n    }\n    return index;\n}\n\n// get the base URL of the current page by taking everything up to the third \"/\" in the URL\nfunction getBaseURL() {\n    return document.URL.substring(0, document.URL.nthIndex(3,\"/\") + 1);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This works:</p>\n\n<pre><code>location.href.split(location.pathname)[0];\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have a plugin perfect for this.  Simply add it to your library, add your header call then check my blog for what all it can do as it can do alot more than get base url.</p>\n\n<p>To use my plug in to get base url simply type </p>\n\n<pre><code>$.myURL();\n</code></pre>\n\n<p>This will work whether localhost or sandbox host or live sight!</p>\n\n<p>My Blog about it here -> <a href=\"http://spyk3lc.blogspot.com/2012/03/jquery-myurl-extension-how-to-get-that.html\" rel=\"nofollow\">http://spyk3lc.blogspot.com/2012/03/jquery-myurl-extension-how-to-get-that.html</a></p>\n\n<p>My working fiddle here -> <a href=\"http://jsfiddle.net/SpYk3/2ZuTe/\" rel=\"nofollow\">http://jsfiddle.net/SpYk3/2ZuTe/</a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<pre><code>var host = location.protocol + '//' + location.host + '/';\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<pre><code>function getBaseURL() {\n    var url = location.href;  // entire url including querystring - also: window.location.href;\n    var baseURL = url.substring(0, url.indexOf('/', 14));\n\n\n    if (baseURL.indexOf('http://localhost') != -1) {\n        // Base Url for localhost\n        var url = location.href;  // window.location.href;\n        var pathname = location.pathname;  // window.location.pathname;\n        var index1 = url.indexOf(pathname);\n        var index2 = url.indexOf(\"/\", index1 + 1);\n        var baseLocalUrl = url.substr(0, index2);\n\n        return baseLocalUrl + \"/\";\n    }\n    else {\n        // Root Url for domain name\n        return baseURL + \"/\";\n    }\n\n}\n</code></pre>\n\n<p>You then can use it like this...</p>\n\n<pre><code>var str = 'http://en.wikipedia.org/wiki/Knopf?q=1&amp;t=2';\nvar url = str.toUrl();\n</code></pre>\n\n<p>The value of url will be...</p>\n\n<pre><code>{\n\"original\":\"http://en.wikipedia.org/wiki/Knopf?q=1&amp;t=2\",&lt;br/&gt;\"protocol\":\"http:\",\n\"domain\":\"wikipedia.org\",&lt;br/&gt;\"host\":\"en.wikipedia.org\",&lt;br/&gt;\"relativePath\":\"wiki\"\n}\n</code></pre>\n\n<p>The \"var url\" also contains two methods.</p>\n\n<pre><code>var paramQ = url.getParameter('q');\n</code></pre>\n\n<p>In this case the value of paramQ will be 1.</p>\n\n<pre><code>var allParameters = url.getParameters();\n</code></pre>\n\n<p>The value of allParameters will be the parameter names only.</p>\n\n<pre><code>[\"q\",\"t\"]\n</code></pre>\n\n<p>Tested on IE,chrome and firefox.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You can use below codes for get different parameters of Current URL</p>\n\n<pre><code>alert(\"document.URL : \"+document.URL);\nalert(\"document.location.href : \"+document.location.href);\nalert(\"document.location.origin : \"+document.location.origin);\nalert(\"document.location.hostname : \"+document.location.hostname);\nalert(\"document.location.host : \"+document.location.host);\nalert(\"document.location.pathname : \"+document.location.pathname);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<pre><code>  String.prototype.url=function(){\n       var a=$('&lt;a /&gt;').attr('href',this)[0];\n        var org=a.protocol+'//'+a.hostname;if(a.port.length&gt;0){org=org+':'+a.port}\n       return {host: a.host,hostname: a.hostname, pathname: a.pathname, port: a.port, protocol: a.protocol, search: a.search, hash: a.hash, origin: org};\n\n    }\n</code></pre>\n\n<p>Then : </p>\n\n<pre><code>'http://mysite:5050/pke45#23'.url()\n //OUTPUT : {host: \"mysite:5050\", hostname: \"mysite\", pathname: \"/pke45\", port: \"5050\", protocol: \"http:\",hash:\"#23\",origin:\"http://mysite:5050\"}\n</code></pre>\n\n<p>For your request, you need : </p>\n\n<pre><code> 'http://mysite:5050/pke45#23'.url().origin\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to find a relatively easy and reliable method to extract the base URL from a string variable using JavaScript (or jQuery).</p>\n\n<p>For example, given something like:</p>\n\n<pre>http://www.sitename.com/article/2009/09/14/this-is-an-article/</pre>\n\n<p>I'd like to get:</p>\n\n<pre>http://www.sitename.com/</pre>\n\n<p>Is a regular expression the best bet? If so, what statement could I use to assign the base URL extracted from a given string to a new variable?</p>\n\n<p>I've done some searching on this, but everything I find in the JavaScript world seems to revolve around gathering this information from the actual document URL using <em>location.host</em> or similar.</p>\n\n<p>Thanks in advance for any guidance!</p>\n",
            "last_activity_date": 1423559773,
            "question_id": 1420881,
            "score": 87,
            "tags": [
                "javascript",
                "regex",
                "string",
                "url"
            ],
            "title": "JavaScript method to find base URL from a string"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>I know that Safari implements a <a href=\"http://developer.apple.com/safari/library/documentation/InternetWeb/Conceptual/SafariVisualEffectsProgGuide/Transitions/Transitions.html#//apple_ref/doc/uid/TP40008032-CH4-SW5\">webkitTransitionEnd</a> callback that you can attach directly to the element with the transition.</p>\n\n<p>Their example (reformatted to multiple lines):</p>\n\n<pre><code>box.addEventListener( \n     'webkitTransitionEnd', \n     function( event ) { \n         alert( \"Finished transition!\" ); \n     }, false );\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 58
                },
                {
                    "body": "<p>Yes, if such things are supported by the browser, then an event is triggered when the transition completes.  The actual event however, differs between browsers:</p>\n\n<ul>\n<li>Webkit browsers (Chrome, Safari) use <code>webkitTransitionEnd</code></li>\n<li>Firefox uses <code>transitionend</code></li>\n<li>IE9+ uses <code>msTransitionEnd</code></li>\n<li>Opera uses <code>oTransitionEnd</code></li>\n</ul>\n\n<p>However you should be aware that <code>webkitTransitionEnd</code> doesn't always fire!  This has caught me out a number of times, and seems to occur if the animation would have no effect on the element.  To get around this, it makes sense to use a timeout to fire the event handler in the case that it's not been triggered as expected.  A blog post about this problem is available here: <a href=\"http://www.cuppadev.co.uk/the-trouble-with-css-transitions/\" rel=\"nofollow\">http://www.cuppadev.co.uk/the-trouble-with-css-transitions/</a></p>\n\n<p>With this in mind, I tend to use this event in a chunk of code that looks a bit like this:</p>\n\n<pre><code>var transitionEndEventName = \"XXX\"; //figure out, e.g. \"webkitTransitionEnd\".. \nvar elemToAnimate = ... //the thing you want to animate..\nvar done = false;\nvar transitionEnded = function(){\n     done = true;\n     //do your transition finished stuff..\n     elemToAnimate.removeEventListener(transitionEndEventName,\n                                        transitionEnded, false);\n};\nelemToAnimate.addEventListener(transitionEndEventName,\n                                transitionEnded, false);\n\n//animation triggering code here..\n\n//ensure tidy up if event doesn't fire..\nsetTimeout(function(){\n    if(!done){\n        console.log(\"timeout needed to call transition ended..\");\n        transitionEnded();\n    }\n}, XXX); //note: XXX should be the time required for the\n        //animation to complete plus a grace period (e.g. 10ms) \n</code></pre>\n\n<p>Note: to get the transition event end name you can use the method posted as the answer in:\n<a href=\"http://stackoverflow.com/questions/5023514/how-do-i-normalize-css3-transition-functions-across-browsers\">How do I normalize CSS3 Transition functions across browsers?</a>.</p>\n\n<p>Note: this question is also related to:\n- <a href=\"http://stackoverflow.com/questions/2794148/css3-transition-events\">CSS3 transition events</a></p>\n",
                    "is_accepted": false,
                    "score": 64
                },
                {
                    "body": "<p>The <a href=\"http://ricostacruz.com/jquery.transit/\" rel=\"nofollow\">jQuery.transit plugin</a>, a plugin for CSS3 transformations and transitions, can call your CSS animations from script and give you a callback.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I am using the following code, is much simpler than trying to detect which specific end event a browser uses.</p>\n\n<pre><code>$(\".myClass\").one('transitionend webkitTransitionEnd oTransitionEnd otransitionend MSTransitionEnd', \nfunction() {\n //do something\n});\n</code></pre>\n\n<hr>\n\n<p>Alternatively if you use bootstrap then you can simply do </p>\n\n<pre><code>$(\".myClass\").one($.support.transition.end,\nfunction() {\n //do something\n});\n</code></pre>\n\n<p>This is becuase they include the following in bootstrap.js </p>\n\n<pre><code>+function ($) {\n  'use strict';\n\n  // CSS TRANSITION SUPPORT (Shoutout: http://www.modernizr.com/)\n  // ============================================================\n\n  function transitionEnd() {\n    var el = document.createElement('bootstrap')\n\n    var transEndEventNames = {\n      'WebkitTransition' : 'webkitTransitionEnd',\n      'MozTransition'    : 'transitionend',\n      'OTransition'      : 'oTransitionEnd otransitionend',\n      'transition'       : 'transitionend'\n    }\n\n    for (var name in transEndEventNames) {\n      if (el.style[name] !== undefined) {\n        return { end: transEndEventNames[name] }\n      }\n    }\n\n    return false // explicit for ie8 (  ._.)\n  }\n\n  // http://blog.alexmaccaw.com/css-transitions\n  $.fn.emulateTransitionEnd = function (duration) {\n    var called = false, $el = this\n    $(this).one($.support.transition.end, function () { called = true })\n    var callback = function () { if (!called) $($el).trigger($.support.transition.end) }\n    setTimeout(callback, duration)\n    return this\n  }\n\n  $(function () {\n    $.support.transition = transitionEnd()\n  })\n\n}(jQuery);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 25
                }
            ],
            "body": "<p>Is it possible to get a notification (like callback) when a CSS transition has been completed?</p>\n",
            "last_activity_date": 1422815904,
            "question_id": 2087510,
            "score": 58,
            "tags": [
                "javascript",
                "css",
                "css3",
                "css-transitions"
            ],
            "title": "Callback on CSS transition"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p>It is entirely possible to need both. For instance if you query WMI it is entirely possible to have a class return properties that have a null value. They are defined, they just happen to hold null at the time.</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Best described <a href=\"http://saladwithsteve.com/2008/02/javascript-undefined-vs-null.html\">here</a>, but in summary:</p>\n\n<p>undefined is the lack of a type and value, and null is the lack of a value.</p>\n\n<p>Furthermore, if you're doing simple '==' comparisons, you're right, they come out the same.  But try ===, which compares both type and value, and you'll notice the difference.</p>\n",
                    "is_accepted": false,
                    "score": 34
                },
                {
                    "body": "<p>Semantically they mean different things.  The type null has exactly one value in its domain, null and a property may be assigned this specific value. Undefined represents a distinct lack of any value having been assigned.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Try this example:</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n    &lt;script type=\"text/javascript\"&gt;\n        function ShowObjProperties(obj) {\n            var property, propCollection = \"\";\n\n            for(property in obj) {\n                propCollection += (property + \": \" + obj[property] + \"\\n\");\n            }\n\n            alert(propCollection);\n        }\n\n        var obj = {\n            userid: 3,\n            name: 'me!',\n            speak: function() { alert('Hi! My name is ' + this.name + ' and my ID is ' + this.userid + '.'); }\n        }\n\n        //Shows all properties\n        ShowObjProperties(obj);\n\n        //The Speak function is no longer in the list!\n        delete obj.speak;\n        alert(typeof obj.speak);\n        ShowObjProperties(obj);\n\n        //The UserID is still listed, it just has no value!\n        obj.userid = null;\n        ShowObjProperties(obj);\n    &lt;/script&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>I think that there is a very real use for 2 different types here.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>What it comes down to is javascripts dynamic nature. </p>\n\n<p>Things may be undefined so that they can be added at a later point. This is arguably why javascript is so powerful and extensible.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I think that your conclusion that javascript defines undefined as 'there is no such property' and null as 'the property has no value' is perfectly correct. And in a language as dynamic as javascript it is a very important distinction. The use of duck typing means that we need to be able to differentiate between a property not existing and not having a value. It is our primary means of deriving type information. in a statically typed language there is a definite distinction between a field being null and a field not existing. In javascript this is no different. However it is checked at runtime, and can be modified up until that time.</p>\n\n<p>Im going to have to agree that the implementation is strange as a lot of time the distinction is blurred. However I think that in javascript the distinction is important. And being able to assign undefined is essential.</p>\n\n<p>I remember reading a blog post a while ago about an online RPG written in Javascript. It used examples where objects were created as copies of existing instances rather than prototypes (classes, functions, whatever), and were then altered. This really made me understand how powerful that undefined could be when modifying existing objects, but I cannot remember who wrote it.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>The question isn't really \"why is there a null value in JS\" - there is a null value of some sort in most languages and it is generally considered very useful.</p>\n\n<p>The question is, \"why is there an <em>undefined</em> value in JS\". Major places where it is used:</p>\n\n<ol>\n<li>when you declare 'var x;' but don't assign to it, x holds undefined;</li>\n<li>when your function gets fewer arguments than it declares;</li>\n<li>when you access a non-existent object property.</li>\n</ol>\n\n<p>'null' would certainly have worked just as well for (1) and (2)*. (3) should really throw an exception straight away, and the fact that it doesn't, instead returning this weird 'undefined' that will fail later, is a big source of debugging difficulty.</p>\n\n<p>*: you could also argue that (2) should throw an exception, but then you'd have to provide a better, more explicit mechanism for default/variable arguments.</p>\n\n<p>However JavaScript didn't originally have exceptions, or any way to ask an object if it had a member under a certain name - the only way was (and sometimes still is) to access the member and see what you get. Given that 'null' already had a purpose and you might well want to set a member to it, a different out-of-band value was required. So we have 'undefined', it's problematic as you point out, and it's another great JavaScript 'feature' we'll never be able to get rid of.</p>\n\n<blockquote>\n  <p>I actually use undefined when I want to unset the values of properties no longer in use but which I don't want to delete. Should I use null instead?</p>\n</blockquote>\n\n<p>Yes. Keep 'undefined' as a special value for signalling when other languages might throw an exception instead.</p>\n\n<p>'null' is generally better, except on some IE DOM interfaces where setting something to 'null' can give you an error. Often in this case setting to the empty string tends to work.</p>\n",
                    "is_accepted": true,
                    "score": 47
                },
                {
                    "body": "<p>it's an important language feature if you wrap your program around the evented paradigm of javascript.</p>\n\n<pre><code>// a key exists as a placeholder for something\nif(obj[name] === null) \n// no key exists int eh hashtable that is in this object\nif(obj[name] === undefined)\n</code></pre>\n\n<p>this is very useful if you are dealing with a set of data that needs a value to represent 'nothing' to indicate some action different from using 'nothing' to indicate the default action.</p>\n\n<pre><code>filter_func_pt = {\n  date:function(d){ return Math.round(d.getTime()/1000);},\n  user: null,\n}\n\nfunction transform(obj){\n    var ret = {};\n    for( var prop in obj){\n       var f = filter_func_pt[prop];\n       if(f)\n          ret[prop] = f(obj);\n       else if(filter_func_pt[prop] === null)\n         continue;\n       else\n         ret[prop] == obj;\n    }\n  return ret;\n}\n\nvar a = {\n   date: new Date(),\n   user: 'sam'\n   votes: [23, 41, 55] \n};\n\nvar b = transform(a);\n\n/* b = {\n *    date: 1298582417\n *    votes: [23, 41, 55]\n * }\n */\n</code></pre>\n\n<p>in the above code the <em>null</em> keyword and the <em>undefined</em> server very clear and different purposes. the lookup that is not found in the filter_func_pt object which returns <em>undefined</em> means to add the property to the return object as is, whereas a <em>null</em> value indicates that the value should be withheld, and not added, and the presence of any true value in this case represents a function used to transform the value before adding it to the <em>ret</em> object.</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<h2><strong>null is beautiful</strong></h2>\n\n<p>as are all other Types of Live Script.</p>\n\n<blockquote>\n  <p>cite: In JavaScript, there are two values which basically say 'I don't\n  exist' - undefined and null.</p>\n</blockquote>\n\n<p>Why would you want to say incorrect things?!</p>\n\n<p><strong>\"null\"</strong> is <em>\"empty Object\"</em> just like \"0\" is an <em>\"empty Number\"</em>. \n0, is nothing -yet it exists as a Type of a Number thing.\n<em>null</em> is of course also empty but \"it is\" and it's a well defined thing of an <em>Object Type</em>.</p>\n\n<p>It common to speak of these thing as of \"types\", when they are not. In fact they are \"categories\". But that's over now. </p>\n\n<p>So will stick to it to say that \"null\" is a Type of Object without a Kind. \nAnd \"null\" says \"I very much exist[!], but I don't have content of my kind\".</p>\n\n<p>Whereas <em>undefined</em> lacks both the Type and the Kind where <em>undefined</em> happens to also be its Type definition. An undefined type of a type becomes its distinctive typology.\nA sort of a [does \"nothing\" exist and how do you define \"nothing\"?] question.</p>\n\n<blockquote>\n  <p>cite: undefined nor null can be returned from a constructor function,\n  as both will be converter to an empty object</p>\n</blockquote>\n\n<p>You've managed to once again say an incorrect thing. Of course not, the \"undefined\" is not an Object, its a plain Token which we humans understand; but contrary to that <em>null</em> is - and it's telling you that: <em>its Type is correct, but the Kind you are looking for is not contained within it, or at least -not at this time. Come visit us later when we put\\assign some object in\\to it.</em></p>\n\n<blockquote>\n  <p>cite: The only real difference I can think of is that one evaluates to\n  NaN, the other to 0 in numeric contexts.</p>\n</blockquote>\n\n<p>That makes the whole point of their core distinction, as mentioned: <em>undefined</em> is a plain token and since it is made up of the same 'genetic' material as its distant relatives: strings, the [ +undefined ] operation will duck-convert it to NaN, similarly null will of course morph itself into a correct kind  0 \\Number instead, and as opposed to <em>undefined</em> that will morph into a string (!which is not empty!) and that's exactly why it yields <em>NaN</em> instead. Where: +undefined >> +\"undefined\" >> NaN. Since numeric context expects explicit value.</p>\n\n<p>While the Boolean context expects reference - finds nothing to convert and yields 'false'.</p>\n\n<p>Let's cut through now... </p>\n\n<blockquote>\n  <p>cite:  So once again: what's the practical use for seperate values for\n  undefined and null?</p>\n</blockquote>\n\n<p>I will try to give you only two empirical examples and hope to suffice</p>\n\n<pre><code>oElement.onclick &gt;&gt; null\n</code></pre>\n\n<p>//means -the property exists; its expected value is of Type: <em>Object</em>, and that oElement supports the \"onclick\" event!</p>\n\n<pre><code>oElement.innerText &gt;&gt; \"\"\n</code></pre>\n\n<p>//means - the property exists; its expected value is of Type: <em>String</em>, which means that oElement supports the \"innerText\" property.</p>\n\n<p>on both cases -if you receive \"undefined\" it means that the property doesn't exist; is not supported or has a wrong (ua vendor) implementation.</p>\n\n<p>Stay frost and have fun.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>As a Java programmer, I see a huge difference between undefined and null. Coding JavaScript, not so much, because JavaScript is not strongly typed, and the differences between undefined and null are blurred by the automatic conversions that are frequently performed by run-time. BTW, I take frequent advantage of those conversions; they make my JS code more compact and readable.</p>\n\n<p>To answer your question, undefined means that a value was never set. Practically speaking, this generally points to a bug. If yourObject.property is undefined, that means you didn't set the property for some reason, or I'm looking for something that doesn't exist at all. This is a real issue when working on a project with more than one coder.</p>\n\n<p>null means that \"no value\" was explicitly set. Practically speaking, you are telling me something about the property, perhaps that it isn't used in this context, or that a value has yet to be determined.</p>\n\n<p>In Java, attempts to access a field that is undefined will always result in an exception. In fact, the compiler can be made to warn you about this in your code.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I don't think there's any reason to have both <code>null</code> and <code>undefined</code>, because the only reason many people have suggested (\"<code>undefined</code> means there's no such variable/property\") is not valid, at least in JavaScript. <code>undefined</code> can't tell you whether the variable/property exists or not.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>console.log(foo);               // \"ReferenceError: foo is not defined\"\n                                // foo does not exist\nvar foo;\nconsole.log(foo);               // \"undefined\", a different response\nconsole.log(foo === undefined); // \"true\", but it does exist\n\nvar obj = {};\nconsole.log(obj.hasOwnProperty(\"foo\")); // \"false\", no such property\nobj.foo = undefined;\nconsole.log(obj.hasOwnProperty(\"foo\")); // \"true\", it exists and has the value \"undefined\"\nconsole.log(obj.foo === undefined);     // \"true\", but it does exist\n\nobj.bar = \"delete me\";\nobj.bar = undefined;\nconsole.log(obj.hasOwnProperty(\"bar\")); // \"true\", not actually deleted\ndelete obj.bar;\nconsole.log(obj.hasOwnProperty(\"bar\")); // \"false\", deleted\n</code></pre>\n\n<p>As you can see, checking <code>foo === undefined</code> does not tell you whether <code>foo</code> exists, and setting <code>obj.bar = undefined</code> does not actually delete <code>bar</code>.</p>\n\n<p>It may be the JavaScript author's original intent that <code>undefined</code> should represent \"nonexistence\". However, the implementation didn't turn out that way.</p>\n",
                    "is_accepted": false,
                    "score": 8
                }
            ],
            "body": "<p>In JavaScript, there are two values which basically say 'I don't exist' - <code>undefined</code> and <code>null</code>.</p>\n\n<p>A property to which a programmer has not assigned anything will be <code>undefined</code>, but in order for a property to become <code>null</code>, <code>null</code> must be explicitly assigned to it.</p>\n\n<p>I once thought that there was a need for <code>null</code> because <code>undefined</code> is a primitive value and <code>null</code> an object. It's not, even if <code>typeof null</code> will yield <code>'object'</code>: Actually, both are primitive values - which means neither <code>undefined</code> nor <code>null</code> can be returned from a constructor function, as both will be converted to an empty object (one has to throw an error to proclaim failure in constructors).</p>\n\n<p>They also both evaluate to <code>false</code> in boolean contexts. The only real difference I can think of is that one evaluates to <code>NaN</code>, the other to <code>0</code> in numeric contexts.</p>\n\n<p>So why is there both <code>undefined</code> and <code>null</code> if this just confuses programmers who are incorrectly checking for <code>null</code> when trying to find out whether a property has been set or not?</p>\n\n<p><strong>edit:</strong> What I'd like to know is if anyone has a reasonable example where it's necessary to use <code>null</code> which couldn't be expressed using <code>undefined</code> instead.</p>\n\n<p><strong>edit2+3</strong>: So the general consensus seems to be that <code>undefined</code> means 'there is no such property' while <code>null</code> means 'the property does exist, but holds no value'.</p>\n\n<p>I could live with that if JavaScript implementations would actually enforce this behavior - but <code>undefined</code> is a perfectly valid primitive value, so it can easily be assigned to existing properties to break this contract. Therefore, if you want to make sure if a property exists, you have to use the <code>in</code> operator or <code>hasOwnProperty()</code> anyway. So once again: what's the practical use for separate values for <code>undefined</code> and <code>null</code>?</p>\n\n<p>I actually use <code>undefined</code> when I want to unset the values of properties no longer in use but which I don't want to <code>delete</code>. Should I use <code>null</code> instead?</p>\n",
            "last_activity_date": 1411036889,
            "question_id": 461966,
            "score": 71,
            "tags": [
                "javascript",
                "null",
                "language-features",
                "undefined"
            ],
            "title": "Why is there a `null` value in JavaScript?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Try this:</p>\n\n<p><strong>HTML</strong></p>\n\n<pre><code>&lt;select \n    ng-model=\"selectedOption\" \n    ng-options=\"option.name for option in options\"&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p><strong>Javascript</strong></p>\n\n<pre><code>function Ctrl($scope) {\n    $scope.options = [\n        {\n          name: 'Something Cool',\n          value: 'something-cool-value'\n        }, \n        {\n          name: 'Something Else',\n          value: 'something-else-value'\n        }\n    ];\n\n    $scope.selectedOption = $scope.options[0];\n}\n</code></pre>\n\n<p>Plunker <a href=\"http://plnkr.co/edit/BsnSvXlSASPm6EAY1brK\">here</a>.</p>\n\n<p>If you really want to set the value that will be bound to the model, then change the <code>ng-options</code> attribute to</p>\n\n<pre><code>ng-options=\"option.value as option.name for option in options\"\n</code></pre>\n\n<p>and the Javascript to</p>\n\n<pre><code>...\n$scope.selectedOption = $scope.options[0].value;\n</code></pre>\n\n<p>Another Plunker <a href=\"http://plnkr.co/edit/acPKuDW7QlW5mqfUSr02\">here</a> considering the above.</p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>You can simple use <a href=\"http://docs.angularjs.org/api/ng.directive%3angInit\">ng-init</a> like this</p>\n\n<pre><code>&lt;select ng-init=\"somethingHere = options[0]\" ng-model=\"somethingHere\" ng-options=\"option.name for option in options\"&gt;&lt;/select&gt;\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 73
                },
                {
                    "body": "<p>If you want to make sure your <code>$scope.somethingHere</code> value doesn't get overwritten when your view initializes, you'll want to coalesce (<code>somethingHere = somethingHere || options[0].value</code>) the value in your ng-init like so:</p>\n\n<pre><code>&lt;select ng-model=\"somethingHere\" \n        ng-init=\"somethingHere = somethingHere || options[0].value\"\n        ng-options=\"option.value as option.name for option in options\"&gt;\n&lt;/select&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 93
                },
                {
                    "body": "<p>My solution to this was use html to hardcode my default option. Like so:</p>\n\n<p>In HAML:</p>\n\n<pre><code>%select{'ng-model' =&gt; 'province', 'ng-options' =&gt; \"province as province for province in summary.provinces\", 'chosen' =&gt; \"chosen-select\", 'data-placeholder' =&gt; \"BC &amp; ON\"}\n  %option{:value =&gt; \"\", :selected =&gt; \"selected\"}\n    BC &amp;amp; ON\n</code></pre>\n\n<p>In HTML:</p>\n\n<pre><code>&lt;select ng-model=\"province\" ng-options=\"province as province for province in summary.provinces\" chosen=\"chosen-select\" data-placeholder=\"BC &amp; ON\"&gt;\n  &lt;option value=\"\" selected=\"selected\"&gt;BC &amp;amp; ON&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>I want my default option to return all values from my api, that's why I have a blank value. Also excuse my haml. I know this isn't directly an answer to the OP's question, but people find this on Google. Hope this helps someone else.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I think, after the inclusion of 'track by', you can use it in ng-options to get what you wanted, like the following</p>\n\n<pre><code> &lt;select ng-model=\"somethingHere\" ng-options=\"option.name for option in options track by option.value\" &gt;&lt;/select&gt;\n</code></pre>\n\n<p>This way of doing it is better because when you want to replace the list of strings with list of objects you will just change this to </p>\n\n<pre><code> &lt;select ng-model=\"somethingHere\" ng-options=\"object.name for option in options track by object.id\" &gt;&lt;/select&gt;\n</code></pre>\n\n<p>where somethingHere is an object with the properties name and id, of course. Please note, 'as' is not used in this way of expressing the ng-options, because it will only set the value and you will not be able to change it when you are using track by</p>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>Depending on how many options you have, you could put your values in an array and auto-populate your options like this</p>\n\n<pre><code>&lt;select ng-model=\"somethingHere.values\" ng-options=\"values for values in [5,4,3,2,1]\"&gt;\n   &lt;option value=\"\"&gt;Pick a Number&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>I think the easiest way is</p>\n\n<pre><code> ng-selected=\"$first\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>I have searched Google and can't find anything on this.</p>\n\n<p>I have this code.</p>\n\n<pre><code>&lt;select ng-model=\"somethingHere\" \n        ng-options=\"option.value as option.name for option in options\"\n&gt;&lt;/select&gt;\n</code></pre>\n\n<p>With some data like this </p>\n\n<pre><code>options = [{\n   name: 'Something Cool',\n   value: 'something-cool-value'\n}, {\n   name: 'Something Else',\n   value: 'something-else-value'\n}];\n</code></pre>\n\n<p>And the output is something like this.</p>\n\n<pre><code>&lt;select ng-model=\"somethingHere\"  \n        ng-options=\"option.value as option.name for option in options\" \n        class=\"ng-pristine ng-valid\"&gt;\n\n    &lt;option value=\"?\" selected=\"selected\"&gt;&lt;/option&gt;\n    &lt;option value=\"0\"&gt;Something Cool&lt;/option&gt;\n    &lt;option value=\"1\"&gt;Something Else&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n\n<p>How is it possible to set the first option in the data as the default value so you would get a result like this.</p>\n\n<pre><code>&lt;select ng-model=\"somethingHere\" ....&gt;\n    &lt;option value=\"0\" selected=\"selected\"&gt;Something Cool&lt;/option&gt;\n    &lt;option value=\"1\"&gt;Something Else&lt;/option&gt;\n&lt;/select&gt;\n</code></pre>\n",
            "last_activity_date": 1423603545,
            "question_id": 18194255,
            "score": 74,
            "tags": [
                "javascript",
                "angularjs",
                "html-select"
            ],
            "title": "How to have a default option in select box - Angular.js"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>You can use the <code>localeCompare()</code> method. </p>\n\n<pre><code>string_a.localeCompare(string_b);\n\n/* Returns:\n\n 0:  exact match\n\n-1:  string_a &lt; string_b\n\n 1:  string_b &gt; string_b\n\n */\n</code></pre>\n\n<p>Further Reading:</p>\n\n<ul>\n<li><a href=\"http://stackoverflow.com/questions/1179366/is-there-a-javascript-strcmp\">Stack Overflow - Is there a JavaScript strcmp()?</a></li>\n<li><a href=\"http://www.tutorialspoint.com/javascript/string_localecompare.htm\">Tutorials Point - Javascript String - localeCompare() Method</a></li>\n</ul>\n",
                    "is_accepted": true,
                    "score": 172
                },
                {
                    "body": "<p>You can <a href=\"https://developer.mozilla.org/en/Core_JavaScript_1.5_Reference/Global_Objects/String#Comparing_strings\" rel=\"nofollow\">use the comparison operators to compare strings</a>. A <code>strcmp</code> function could be defined like this:</p>\n\n<pre><code>function strcmp(a, b) {\n    if (a.toString() &lt; b.toString()) return -1;\n    if (a.toString() &gt; b.toString()) return 1;\n    return 0;\n}\n</code></pre>\n\n<hr>\n\n<p><strong>Edit</strong>\u00a0\u00a0\u00a0\u00a0Here\u2019s a string comparison function that takes at most min { length(<em>a</em>), length(<em>b</em>) } comparisons to tell how two strings relate to each other:</p>\n\n<pre><code>function strcmp(a, b) {\n    a = a.toString(), b = b.toString();\n    for (var i=0,n=Math.max(a.length, b.length); i&lt;n &amp;&amp; a.charAt(i) === b.charAt(i); ++i);\n    if (i === n) return 0;\n    return a.charAt(i) &gt; b.charAt(i) ? -1 : 1;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>Well in JavaScript you can check two strings for values same as integers so yo can do this:</p>\n\n<ul>\n<li><code>\"A\" &lt; \"B\"</code></li>\n<li><code>\"A\" == \"B\"</code></li>\n<li><code>\"A\" &gt; \"B\"</code></li>\n</ul>\n\n<p>And therefore you can make your own function that checks strings the same way as the <code>strcmp()</code>.</p>\n\n<p>So this would be the function that does the same:</p>\n\n<pre><code>function strcmp(a, b)\n{   \n    return (a&lt;b?-1:(a&gt;b?1:0));  \n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>I am trying to optimize a function which does binary search of strings in Javascript.</p>\n\n<p>Binary search requires you to know whether the key is <code>==</code> the pivot or <code>&lt;</code> the pivot.</p>\n\n<p>But this requires two string comparisons in Javascript, unlike in <code>C</code> like languages which have the <code>strcmp()</code> function that returns three values (-1, 0, +1) for (less than, equal, greater than).</p>\n\n<p>Is there such a native function in Javascript, that can return a ternary value so that just one comparison is required in each iteration of the binary search?</p>\n",
            "last_activity_date": 1421235130,
            "question_id": 2167602,
            "score": 118,
            "tags": [
                "javascript",
                "string",
                "optimization",
                "comparison",
                "binary-search"
            ],
            "title": "Optimum way to compare strings in Javascript?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>Something along the lines of:</p>\n\n<pre><code>yourString = yourString.replace ( /[^0-9]/g, '' );\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>You can use a RegExp to <a href=\"https://developer.mozilla.org/En/Core%5FJavaScript%5F1.5%5FReference/Objects/String/Replace\">replace</a> all the non-digit characters:</p>\n\n<pre><code>var myString = 'abc123.8&lt;blah&gt;';\nmyString = myString.replace(/[^\\d]/g, ''); // 1238\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 12
                },
                {
                    "body": "<p>Use a regular expression, if your script implementation supports them. Something like: </p>\n\n<pre><code>myString.replace(/[^0-9]/g, '');\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p>Use the string's <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/replace\"><code>.replace</code></a> method with a regex of <code>\\D</code>, which is a shorthand character class that matches all non-digits:</p>\n\n<pre><code>myString = myString.replace(/\\D/g,'');\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 262
                },
                {
                    "body": "<p>If you need this to leave the dot for float numbers, use this </p>\n\n<pre><code>var s = \"-12345.50 \u20ac\".replace(/[^\\d.-]/g, ''); // gives \"-12345.50\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 69
                }
            ],
            "body": "<p>Consider a non-DOM scenario where you'd want to remove all non-numeric characters from a string using JavaScript/ECMAScript. Any characters that are in range 0 - 9 should be kept.</p>\n\n<pre><code>var myString = 'abc123.8&lt;blah&gt;';\n\n//desired output is 1238\n</code></pre>\n\n<p>How would you achieve this in plain JavaScript? Please remember this is a non-DOM scenario, so jQuery and other solutions involving browser and keypress events aren't suitable.</p>\n",
            "last_activity_date": 1417463806,
            "question_id": 1862130,
            "score": 113,
            "tags": [
                "javascript",
                "string"
            ],
            "title": "strip non-numeric characters from string"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>Your first choice is the fastest, because the compiler doesn't have to access an object property for each loop. It is safer to declare the variable outside of the loop.\nMany you can find the actual performance timing on youtube, check google tech talk where they bechmark different loops.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I'm always write in the first style. </p>\n\n<p>Even if a compiler is smart enough to optimize it for arrays, but still it smart if we are using DOMNodeList here or some complicated object with calculated length?</p>\n\n<p>I know what the question is about arrays, but i think it is a good practice to write all your loops in one style.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>The absolute fastest way to loop through a javascript array is:</p>\n\n<pre><code>var len = arr.length;\nwhile (len--) {\n    // blah blah\n}\n</code></pre>\n\n<p>See <a href=\"http://blogs.oracle.com/greimer/entry/best_way_to_code_a\">http://blogs.oracle.com/greimer/entry/best_way_to_code_a</a> for a full comparison</p>\n",
                    "is_accepted": false,
                    "score": 36
                },
                {
                    "body": "<p>If the order is not important, I prefer this style:</p>\n\n<pre><code>for(var i = array.length; i--; )\n</code></pre>\n\n<p>It caches the length and is much shorter to write. But it will iterate over the array in reverse order.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>After performing this test with most modern browsers...</p>\n\n<p><a href=\"http://jsperf.com/caching-array-length/4\" rel=\"nofollow\">http://jsperf.com/caching-array-length/4</a></p>\n\n<p><strong><em>Currently</em></strong>, the fastest form of loop (and in my opinion the most syntactically obvious).</p>\n\n<p>a standard for loop with length caching</p>\n\n<pre><code>for (var i = 0, len = myArray.length; i &lt; len; i++) {\n\n}\n</code></pre>\n\n<p>I would say this is definitely a case where I applaud JavaScript engine developers.  A run time should be optimized for <strong>clarity</strong>, <em>not cleverness</em>.</p>\n",
                    "is_accepted": true,
                    "score": 99
                },
                {
                    "body": "<p><a href=\"http://jsperf.com/caching-array-length/60\">http://jsperf.com/caching-array-length/60</a></p>\n\n<p>The latest revision of test, which I prepared (by reusing older one), shows one thing.</p>\n\n<p><strong>Caching length is not that much important, but it does not harm.</strong></p>\n\n<p>Every first run of the test linked above (on freshly opened tab) gives best results for the last 4 snippets (3rd, 5th, 7th and 10th in charts) in Chrome, Opera and Firefox in my Debian Squeeze 64-bit (<a href=\"http://wiki.przemoc.net/about/my_hardware\">my desktop hardware</a>). Subsequent runs give quite different result.</p>\n\n<p>Performance-wise conclusions are simple:</p>\n\n<ul>\n<li><strong>Go with for loop (forward) and test using <code>!==</code> instead of <code>&lt;</code>.</strong></li>\n<li><strong>If you don't have to reuse the array later, then while loop on decremented length and destructive <code>shift()</code>-ing array is also efficient.</strong></li>\n</ul>\n\n<hr>\n\n<p>tl;dr</p>\n\n<p>Nowadays (2011.10) below pattern looks to be the fastest one.</p>\n\n<pre><code>for (var i = 0, len = arr.length; i !== len; i++) {\n    ...\n}\n</code></pre>\n\n<p>Mind that caching <code>arr.length</code> is not crucial here, so you can just test for <code>i !== arr.length</code> and performance won't drop, but you'll get shorter code.</p>\n\n<hr>\n\n<p>PS: I know that in snippet with <code>shift()</code> its result could be used instead of accessing 0th element, but I somehow overlooked that after reusing previous revision (which had wrong while loops), and later I didn't want to lose already obtained results.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>The most elegant solution I know of is using map.</p>\n\n<pre><code>var arr = [1,2,3];\narr.map(function(input){console.log(input);});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>\"Best\" as in pure performance? or performance <strong>AND</strong> readability?</p>\n\n<p>Pure performance \"best\" is this, which uses a cache and the ++prefix operator (my data: <a href=\"http://jsperf.com/caching-array-length/189\">http://jsperf.com/caching-array-length/189</a>)</p>\n\n<pre><code>for (var i = 0, len = myArray.length; i &lt; len; ++i) {\n  // blah blah\n}\n</code></pre>\n\n<p>I would argue that the cache-less for-loop is the best balance in execution time and programmer reading time. Every programmer that started with C/C++/Java won't waste a ms having to read through this one</p>\n\n<pre><code>for(var i=0; i &lt; arr.length; i++){\n  // blah blah\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p><strong>2014 <code>While</code> is back</strong></p>\n\n<p>Just think logical.</p>\n\n<p><strong>Look at this</strong> </p>\n\n<pre><code>for( var index = 0 , length = array.length ; index &lt; length ; index++ ) {\n\n //do stuff\n\n}\n</code></pre>\n\n<ol>\n<li>Need to create at least 2 variables (index,length)</li>\n<li>Need to check if the index is smaller than the length</li>\n<li>Need to increase the index</li>\n<li>the <code>for</code> loop has 3 parameters</li>\n</ol>\n\n<p><strong>Now tell me why this should be faster than:</strong></p>\n\n<pre><code>var length = array.length;\n\nwhile( --length ) { //or length--\n\n //do stuff\n\n}\n</code></pre>\n\n<ol>\n<li>One variable</li>\n<li>No checks</li>\n<li>the index is decreased (Machines prefer that)</li>\n<li><code>while</code> has only one parameter</li>\n</ol>\n\n<p>I was totally confused when Chrome 28 showed that the for loop is faster than the while.\nThis must have ben some sort of </p>\n\n<p><em>\"Uh, everyone is using the for loop, let's focus on that when\n developing for chrome.\"</em></p>\n\n<p>But now, in 2014 the while loop is back on chrome. it's 2 times faster , on other/older browsers it was always faster.</p>\n\n<p>Lately i made some new tests. Now in real world envoirement those short codes are worth nothing and jsperf can't actually execute properly the while loop, because it needs to recreate the array.length which also takes time.</p>\n\n<p><strong>you CAN'T get the actual speed of a while loop on jsperf.</strong></p>\n\n<p>you need to create your own custom function and check that with <code>window.performance.now()</code></p>\n\n<p>And yeah... there is no way the while loop is simply faster.</p>\n\n<blockquote>\n  <p>The real problem is actually the dom manipulation / rendering time /\n  drawing time or however you wanna call it.</p>\n</blockquote>\n\n<p>For example i have a canvas scene where i need to calculate the coordinates and collisions... this is done between 10-200 MicroSeconds (not milliseconds). it actually takes various milliseconds to render everything.Same as in DOM.</p>\n\n<p><strong>BUT</strong></p>\n\n<p>There is another super performant way using the for <code>loop</code> in some cases... for example to copy/clone an array</p>\n\n<pre><code>for(\n var i = array.length ;\n i &gt; 0 ;\n arrayCopy[ --i ] = array[ i ] // doing stuff\n);\n</code></pre>\n\n<p>Notice the setup of the parameters:</p>\n\n<ol>\n<li>Same as in the while loop i'm using only one variable</li>\n<li>Need to check if the index is bigger than 0;</li>\n<li>As you can see this approach is different vs the normal for loop everyone uses, as i do stuff inside the 3th parameter and i also decrease directly inside the array.</li>\n</ol>\n\n<p><strong>Said that, this confirms that machines like the --</strong></p>\n\n<p>writing that i was thinking to make it a little shorter and remove some useless stuff and wrote this one using the same style:</p>\n\n<pre><code>for(\n var i = array.length ;\n i-- ;\n arrayCopy[ i ] = array[ i ] // doing stuff\n);\n</code></pre>\n\n<p>Even if it's shorter it looks like using <code>i</code> one more time slows down everything.\nIt's 1/5 slower than the previous <code>for</code> loop and the <code>while</code> one.</p>\n\n<p><strong>Note:</strong> the <code>;</code> is very important after the for looo without <code>{}</code></p>\n\n<p>Even if i just told you that jsperf is not the best way to test scripts .. i added this 2 loops here</p>\n\n<p><a href=\"http://jsperf.com/caching-array-length/40\">http://jsperf.com/caching-array-length/40</a></p>\n\n<p>And here is another answer about performance in javascript</p>\n\n<p><a href=\"http://stackoverflow.com/a/21353032/2450730\">http://stackoverflow.com/a/21353032/2450730</a></p>\n\n<p><em>This answer is to show performant ways of writing javascript. So if you can't read that, ask and you will get an answer or read a book about javascript <a href=\"http://www.ecma-international.org/ecma-262/5.1/\">http://www.ecma-international.org/ecma-262/5.1/</a></em></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>var arr = []; // The array\nvar i = 0;\nwhile (i &lt; arr.length) {\n    // Do something with arr[i]\n    i++;\n}\n</code></pre>\n\n<p>i++ is faster than ++i, --i and i--</p>\n\n<p>Also, you can save the last line doing arr[i++] the last time you need to access i (but this can be hard to debug).</p>\n\n<p>You can test it here (with other loop tests): <a href=\"http://jsperf.com/for-vs-whilepop/5\" rel=\"nofollow\">http://jsperf.com/for-vs-whilepop/5</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have tried some other ways to iterate a huge array and found out that halving the array length and then iterating both halves in a single loop is faster. This performance difference can be seen while processing <strong>huge arrays</strong>. </p>\n\n<pre><code>var firstHalfLen =0;\nvar secondHalfLen = 0;\nvar count2=0;\nvar searchterm = \"face\";\nvar halfLen = arrayLength/2;\nif(arrayLength%2==halfLen)\n{\n   firstHalfLen = Math.ceil(halfLen);\n   secondHalfLen=Math.floor(halfLen);\n}\nelse\n{\n   firstHalfLen=halfLen;\n   secondHalfLen=halfLen;\n}\nfor(var firstHalfCOunter=0,secondHalfCounter = arrayLength-secondHalfLen;\n    firstHalfCOunter &lt; firstHalfLen;\n    firstHalfCOunter++)\n{\n  if(mainArray[firstHalfCOunter].search(new RegExp(searchterm, \"i\"))&gt; -1)\n  {\n    count2+=1;\n  }\n  if(secondHalfCounter &lt; arrayLength)\n  {\n    if(mainArray[secondHalfCounter].search(new RegExp(searchterm, \"i\"))&gt; -1)\n    {\n        count2+=1;\n    }\n    secondHalfCounter++; \n  }\n}\n</code></pre>\n\n<p>Some performance comparison (using timer.js) between the cached length for-loop VS the above method.</p>\n\n<p><a href=\"http://goo.gl/5azPQZ\" rel=\"nofollow\"><strong>http://jsfiddle.net/tejzpr/bbLgzxgo/</strong></a></p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>**cache the array length inside the loop ,some seconds of time  will be eluded . Depends on the items in the array  if there are more items in array there is major difference with respect to Ms of time*  </p>\n\n<p>**</p>\n\n<pre><code>sArr; //Array[158];\n\nfor(var i = 0 ; i &lt;sArr.length ; i++) {\n callArray(sArr[i]); //function call\n}\n\n***end: 6.875ms***\n</code></pre>\n\n<p>** </p>\n\n<p>**</p>\n\n<pre><code>sArr; //Array[158];\nfor(var i = 0,len = sArr.length ; i &lt; len ; i++) {\n  callArray(sArr[i]); //function call\n}\n\n***end: 1.354ms***\n</code></pre>\n\n<p>**</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Another jsperf.com test: <a href=\"http://jsperf.com/while-reverse-vs-for-cached-length\" rel=\"nofollow\">http://jsperf.com/while-reverse-vs-for-cached-length</a></p>\n\n<p>The reverse while loop seems to be the fastest. Only problem is that while (--i) will stop at 0. How can I access array[0] in my loop then?</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I learn from other book that you should write the for loop like this\uff1a</p>\n\n<pre><code>for(var i=0, len=arr.length; i &lt; len; i++){\n    // blah blah\n}\n</code></pre>\n\n<p>so the <code>arr.length</code> will not be calculated each time.  </p>\n\n<p>Others say that the compiler will do some optimization to this, so you just need to write:  </p>\n\n<pre><code>for(var i=0; i &lt; arr.length; i++){\n    // blah blah\n}\n</code></pre>\n\n<p>I just want to know which is the best way in practice? </p>\n",
            "last_activity_date": 1423705692,
            "question_id": 5349425,
            "score": 60,
            "tags": [
                "javascript",
                "performance",
                "loops"
            ],
            "title": "What&#39;s the fastest way to loop through an array in JavaScript?"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<pre><code>$('#yourelement').ready(function() {\n\n});\n</code></pre>\n\n<p>Will this work, or does it only work for document?</p>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p>You can listen to <code>DOMNodeInserted</code> or <code>DOMSubtreeModified</code> events which fire whenever a new element is added to the DOM. </p>\n\n<p>There is also <a href=\"https://github.com/brandonaaron/livequery\">LiveQuery</a> jQuery plugin which would detect when a new element is created:</p>\n\n<pre><code>$(\"#future_element\").livequery(function(){\n    //element created\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 21
                },
                {
                    "body": "<p>I was having this same problem, so I went ahead and wrote a <a href=\"https://gist.github.com/4200601\">plugin</a> for it.</p>\n\n<p><code>$(selector).waitUntilExists(function);</code></p>\n\n<p>Code:</p>\n\n<pre><code>(function ($) {\n\n/**\n* @function\n* @property {object} jQuery plugin which runs handler function once specified element is inserted into the DOM\n* @param {function} handler A function to execute at the time when the element is inserted\n* @param {bool} shouldRunHandlerOnce Optional: if true, handler is unbound after its first invocation\n* @example $(selector).waitUntilExists(function);\n*/\n\n$.fn.waitUntilExists    = function (handler, shouldRunHandlerOnce, isChild) {\n    var found       = 'found';\n    var $this       = $(this.selector);\n    var $elements   = $this.not(function () { return $(this).data(found); }).each(handler).data(found, true);\n\n    if (!isChild)\n    {\n        (window.waitUntilExists_Intervals = window.waitUntilExists_Intervals || {})[this.selector] =\n            window.setInterval(function () { $this.waitUntilExists(handler, shouldRunHandlerOnce, true); }, 500)\n        ;\n    }\n    else if (shouldRunHandlerOnce &amp;&amp; $elements.length)\n    {\n        window.clearInterval(window.waitUntilExists_Intervals[this.selector]);\n    }\n\n    return $this;\n}\n\n}(jQuery));\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 59
                },
                {
                    "body": "<p><code>DOMNodeInserted</code> is being deprecated, along with the other DOM mutation events, because of performance issues - the recommended approach is to use a <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/MutationObserver\">MutationObserver</a> to watch the DOM. It's only supported in newer browsers though, so you should fall back onto <code>DOMNodeInserted</code> when <code>MutationObserver</code> isn't available.</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>var observer = new MutationObserver(function(mutations) {\n  mutations.forEach(function(mutation) {\n    if (mutation.addedNodes) mutation.addedNodes.forEach(function(node) {\n      // do things to your newly added nodes here\n    })\n  })\n})\n\nobserver.observe(document.body, {\n    childList: true\n  , subtree: true\n  , attributes: false\n  , characterData: false\n})\n\n// stop watching using:\nobserver.disconnect()\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 35
                },
                {
                    "body": "<p>How about the insertionQuery lib? </p>\n\n<blockquote>\n  <p>Non-dom-event way to catch nodes showing up. And it uses selectors.</p>\n  \n  <p>It's not just for wider browser support, It can be better than\n  DOMMutationObserver for certain things.</p>\n  \n  <p>Why?</p>\n  \n  <p>Because DOM Events slow down the browser and insertionQuery doesn't\n  Because DOM Mutation Observer has less browser support than\n  insertionQuery Because with insertionQuery you can filter DOM changes\n  using selectors without performance overhead!</p>\n  \n  <p>Widespread support!</p>\n  \n  <p>IE10+ and mostly anything else (including mobile)</p>\n</blockquote>\n\n<p><a href=\"https://github.com/naugtur/insertionQuery\" rel=\"nofollow\">insertionQuery </a></p>\n",
                    "is_accepted": false,
                    "score": 3
                }
            ],
            "body": "<p>I'm working on an Extension in Chrome, and I'm wondering: what's the best way to find out when an element comes into existence? Using plain javascript, with an interval that checks until an element exists, or does jQuery have some easy way to do this?</p>\n",
            "last_activity_date": 1411129010,
            "question_id": 5525071,
            "score": 56,
            "tags": [
                "javascript",
                "jquery",
                "google-chrome",
                "google-chrome-extension"
            ],
            "title": "How to wait until an element exists?"
        },
        {
            "answer_count": 2,
            "answers": [
                {
                    "body": "<p>Very little in and of itself, either way the DOM will be ready for you to operate on (I was nervous about that until I read <a href=\"http://groups.google.com/group/closure-library-discuss/browse_thread/thread/1beecbb5d6afcb41\">this from Google</a>). If you use the end of page trick, your code may get called the slightest, slightest bit sooner, but nothing that will matter. But more importantly, this choice relates to where you link your JavaScript into the page.</p>\n\n<p>If you include your <code>script</code> tag in the <code>head</code> and rely on <code>ready</code>, the browser encounters your <code>script</code> tag before it displays anything to the user. In the normal course of events, the browser comes to a screeching halt and goes and downloads your script, fires up the JavaScript interpreter, and hands the script to it, then waits while the interpreter processes the script (and then jQuery watches in various ways for the DOM to be ready). (I say \"in the normal course of things\" because some browsers support the <a href=\"http://www.w3.org/TR/html5/scripting-1.html#attr-script-async\"><code>async</code> or <code>defer</code></a> attributes on <code>script</code> tags.)</p>\n\n<p>If you include your <code>script</code> tag at the end of the <code>body</code> element, the browser doesn't do all of that until your page is largely already displayed to the user. This improves perceived load time for your page.</p>\n\n<p>So to get the best perceived load time, put your script at the bottom of the page. (This is also <a href=\"http://developer.yahoo.com/performance/rules.html\">the guideline from the Yahoo folks</a>.) And if you're going to do that, then there's no need to use <code>ready</code>, though of course you could if you liked.</p>\n\n<p>There's a price for that, though: You need to be sure that the things the user can see are ready to be interacted with. By moving the download time to after the page is largely displayed, you increase the possibility of the user starting to interact with the page before your script is loaded. That's one of the counter-arguments to putting the <code>script</code> tag at the end. Frequently it's not an issue, but you have to look at your page to see whether it is and, if so, how you want to deal with it. (You can put a small <em>inline</em> <code>script</code> element in the <code>head</code> that sets up a document-wide event handler to copy with this. That way, you get the improved load time but <strong>if</strong> they try to do something too early, you can either tell them that or, better, queue the thing they wanted to do and do it when your full script is ready.)</p>\n",
                    "is_accepted": true,
                    "score": 79
                },
                {
                    "body": "<p>in addition to @t-j-crowder:</p>\n\n<p>you can use <a href=\"http://headjs.com\" rel=\"nofollow\">head.js</a> to load JavaScript sources asynchronously and in parallel</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>what is the difference / advantage / disadvantage of writing script at the bottom of the page and writing the script in </p>\n\n<pre><code>$(document).ready(function(){});\n</code></pre>\n",
            "last_activity_date": 1305616477,
            "question_id": 6026645,
            "score": 50,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "$(document).ready(function(){}); vs script at the bottom of page"
        },
        {
            "answer_count": 10,
            "answers": [
                {
                    "body": "<p>You can use an overlay with opacity set in order to the buttons/anchors in the back stay visible, but once you have that overlay over an element, you can't click it. </p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Generally, this isn't a great idea. Taking your scenario, if you had evil intentions, you could hide everything underneath your \"overlay\". Then, when a user clicks on a link they think should take them to bankofamerica.com, instead it triggers the hidden link which takes them to myevilsite.com. </p>\n\n<p>That said, event bubbling works, and if it's within an application, it's not a big deal. The following code is an example. Clicking the blue area pops up an alert, even though the alert is set on the red area. Note that the orange area does NOT work, because the event will propagate through the PARENT elements, so your overlay needs to be <em>inside</em> whatever element you're observing the clicks on. In your scenario, you may be out of luck.</p>\n\n<pre><code>&lt;html&gt;\n&lt;head&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"outer\" style=\"position:absolute;height:50px;width:60px;z-index:1;background-color:red;top:5px;left:5px;\" onclick=\"alert('outer')\"&gt; \n    \t&lt;div id=\"nested\" style=\"position:absolute;height:50px;width:60px;z-index:2;background-color:blue;top:15px;left:15px;\"&gt;\n    \t&lt;/div&gt;\n    &lt;/div&gt;\n    &lt;div id=\"separate\" style=\"position:absolute;height:50px;width:60px;z-index:3;background-color:orange;top:25px;left:25px;\"&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>My suggestion would be that you could capture the click event with the overlay, hide the overlay, then refire the click event, then display the overlay again. I'm not sure if you'd get a flicker effect though.</p>\n\n<p>[Update] Exactly this problem and exactly my solution just appeared in this post: \"<a href=\"http://www.vinylfox.com/forwarding-mouse-events-through-layers/\">Forwarding Mouse Events Through Layers</a>\". I know its probably a little late for the OP, but for the sake of somebody having this problem in the future, I though I would include it.</p>\n",
                    "is_accepted": false,
                    "score": 29
                },
                {
                    "body": "<p>In case anyone else is running in to the same problem, the only solution I could find that satisfied me was to have the canvas cover everything and then to raise the Z-index of all clickable elements.  You can't draw on them, but at least they are clickable...</p>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>For the record an alternative approach might be to make the clickable layer the overlay: you make it semi-transparent and then place the \"overlay\" image <em>behind</em> it (somewhat counterintuitively, the \"overlay\" image could then be opaque). Depending on what you're trying to do, you might well be able to get the exact same visual effect (of an image and a clickable layer semi-transparently superimposed on top of each other), while avoiding clickability problems (because the \"overlay\" is in fact in the background).</p>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>I asked a similar question, and <a href=\"http://stackoverflow.com/questions/3538489/html-css-make-a-div-invisible-to-clicks/3538639#3538639\">Ionu\u021b G. Stan gave this answer</a>:</p>\n\n<blockquote>\n  <p>It can be done using CSS <a href=\"https://developer.mozilla.org/en/css/pointer-events\"><code>pointer-events</code></a> in Firefox >= 3.6,\n  Safari >= 4.0 and Chrome >= 2 (see full support table\n  <a href=\"http://caniuse.com/#feat=pointer-events\">here</a>). Unfortunately, I\n  don't have knowledge of a cross-browser workaround.</p>\n</blockquote>\n\n<pre class=\"lang-css prettyprint-override\"><code>#overlay {\n  pointer-events: none;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 135
                },
                {
                    "body": "<p>How about this for IE?:</p>\n\n<p>onmousedown: Hide all elements which could overlay the event. Because display:none visibility:hidden not realy works, push the overlaying div out of the screen for a fixed number of pixels. After a delay push back the overlaying div with the same number of pixels.</p>\n\n<p>onmouseup: Meanwhile this is the event you like to fire. </p>\n\n<pre><code>     //script\n     var allclickthrough=[];         \n     function hidedivover(){\n              if(allclickthrough.length==0){\n                allclickthrough=getElementsByClassName(document.body,\"clickthrough\");// if so .parentNode\n                }\n              for(var i=0;i&lt;allclickthrough.length;i++){\n                 allclickthrough[i].style.left=parseInt(allclickthrough[i].style.left)+2000+\"px\";\n                 }\n              setTimeout(function(){showdivover()},1000);   \n              }\n    function showdivover(){\n             for(var i=0;i&lt;allclickthrough.length;i++){\n                allclickthrough[i].style.left=parseInt(allclickthrough[i].style.left)-2000+\"px\";\n                }\n             }       \n    //html\n    &lt;span onmouseup=\"Dreck_he_got_me()\"&gt;Click me if you can.&lt;/span&gt;\n    &lt;div  onmousedown=\"hidedivover()\" style=\"position:absolute\" class=\"clickthrough\"&gt;You'll don't get through!&lt;/div&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I was having this issue when viewing my website on a phone. While I was trying to close the overlay, I was pretty much clicking on anything under the overlay. A solution that I found working for myself is to just add <code>a</code> tag around the entire overlay</p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>My team ran into this issue and resolved it very nicely. </p>\n\n<ul>\n<li>add a class \"passthrough\" or something to each element you want clickable and which is under the overlay. </li>\n<li>for each \".passthrough\" element append a div and position it exactly on top of its parent. add class \"element-overlay\" to this new div.  </li>\n<li>The \".element-overlay\" css should have a high z-index (above the page's overlay), and the elements should be transparent. </li>\n</ul>\n\n<p>This should resolve your problem as the events on the \".element-overlay\" should bubble up to \".passthrough\". If you still have problems (we did not see any so far) you can play around with the binding.</p>\n\n<p>This is an enhancement to @jvenema's solution. </p>\n\n<p>The nice thing about this is that </p>\n\n<ul>\n<li>you don't pass through ALL events to ALL elements. Just the ones you want. (resolved @jvenema's argument)</li>\n<li>All events will work properly. (hover for example). </li>\n</ul>\n\n<p>If you have any problems please let me know so I can elaborate. </p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>A silly hack I did was to set the height of the element to zero but overflow:visible; combining this with pointer-events:none; seems to cover all the bases.</p>\n\n<pre><code>.overlay {\n    height:0px;\n    overflow:visible;\n    pointer-events:none;\n    background:none !important;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to overlay a  element on top of a webpage (to draw arbitrary graphics), and I've come to the point where I can stack it inside of a  element on top of everything, but this prevents the user from clicking on any links/buttons/etc.\nIs there a way to have its content float on top of everything (it's semi-transparent, so you can still see what is behind) and have the user interact with the layer below it?</p>\n\n<p>I've found a lot of information on the DOM event model, but none of it addresses the problem where the buttons and other \"native\" controls never seem to get the clicks in the first place.</p>\n\n<p>Thanks for any help!</p>\n",
            "last_activity_date": 1418217771,
            "question_id": 1401658,
            "score": 89,
            "tags": [
                "javascript",
                "html",
                "dom",
                "events",
                "click"
            ],
            "title": "HTML &quot;overlay&quot; which allows clicks to fall through to elements behind it"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>Yes, reload the css tag. And remember to make the new url unique (usually by appending a random query parameter). I have code to do this but not with me right now. Will edit later...</p>\n\n<p>edit: too late... harto and nickf beat me to it ;-)</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>On the \"edit\" page, instead of including your CSS in the normal way (with a <code>&lt;link&gt;</code> tag), write it all to a <code>&lt;style&gt;</code> tag. Editing the <code>innerHTML</code> property of that will automatically update the page, even without a round-trip to the server.</p>\n\n<pre><code>&lt;style type=\"text/css\" id=\"styles\"&gt;\n    p {\n        color: #f0f;\n    }\n&lt;/style&gt;\n\n&lt;textarea id=\"editor\"&gt;&lt;/textarea&gt;\n&lt;button id=\"preview\"&gt;Preview&lt;/button&gt;\n</code></pre>\n\n<p>The Javascript, using jQuery:</p>\n\n<pre><code>jQuery(function($) {\n    var $ed = $('#editor')\n      , $style = $('#styles')\n      , $button = $('#preview')\n    ;\n    $ed.val($style.html());\n    $button.click(function() {\n        $style.html($ed.val());\n        return false;\n    });\n});\n</code></pre>\n\n<p>And that should be it!</p>\n\n<p>If you wanted to be really fancy, attach the function to the keydown on the textarea, though you could get some unwanted side-effects (the page would be changing constantly as you type)</p>\n\n<p><strong>Edit</strong>: tested and works (in Firefox 3.5, at least, though should be fine with other browsers). See demo here: <a href=\"http://jsbin.com/owapi\">http://jsbin.com/owapi</a></p>\n",
                    "is_accepted": true,
                    "score": 31
                },
                {
                    "body": "<p>Possibly not applicable for your situation, but here's the jQuery function I use for reloading external stylesheets:</p>\n\n<pre><code>/**\n * Forces a reload of all stylesheets by appending a unique query string\n * to each stylesheet URL.\n */\nfunction reloadStylesheets() {\n    var queryString = '?reload=' + new Date().getTime();\n    $('link[rel=\"stylesheet\"]').each(function () {\n        this.href = this.href.replace(/\\?.*|$/, queryString);\n    });\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 66
                },
                {
                    "body": "<p>Check out Andrew Davey's snazzy Vogue project - <a href=\"http://aboutcode.net/vogue/\">http://aboutcode.net/vogue/</a></p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<p>One more jQuery solution</p>\n\n<p>For a single stylesheet with id \"css\" try this:</p>\n\n<pre><code>$('#css').replaceWith('&lt;link id=\"css\" rel=\"stylesheet\" href=\"css/main.css?t=' + Date.now() + '\"&gt;&lt;/link&gt;');\n</code></pre>\n\n<p>Wrap it in a function that has global scrope and you can use it from the Developer Console in Chrome or Firebug in Firefox:</p>\n\n<pre><code>var reloadCSS = function() {\n  $('#css').replaceWith('&lt;link id=\"css\" rel=\"stylesheet\" href=\"css/main.css?t=' + Date.now() + '\"&gt;&lt;/link&gt;');\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Based on previous solutions, I have created bookmark with JavaScript code:</p>\n\n<pre><code>javascript: { var toAppend = \"trvhpqi=\" + (new Date()).getTime(); var links = document.getElementsByTagName(\"link\"); for (var i = 0; i &lt; links.length;i++) { var link = links[i]; if (link.rel === \"stylesheet\") { if (link.href.indexOf(\"?\") === -1) { link.href += \"?\" + toAppend; } else { if (link.href.indexOf(\"trvhpqi\") === -1) { link.href += \"&amp;\" + toAppend; } else { link.href = link.href.replace(/trvhpqi=\\d{13}/, toAppend)} }; } } }; void(0);\n</code></pre>\n\n<p>Image from Firefox: </p>\n\n<p><img src=\"http://i.stack.imgur.com/PSfTO.png\" alt=\"enter image description here\"></p>\n\n<p>What does it do?</p>\n\n<p>It reloads CSS by adding query string params (as solutions above):</p>\n\n<ul>\n<li>Content/Site.css becomes Content/Site.css?trvhpqi=1409572193189 (adds date)</li>\n<li>Content/Site.css?trvhpqi=1409572193189 becomes Content/Site.css?trvhpqi=1409572193200 (date changes)</li>\n<li><a href=\"http://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,800italic,800,700italic,700,600italic,600&amp;subset=latin,latin-ext\" rel=\"nofollow\">http://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,800italic,800,700italic,700,600italic,600&amp;subset=latin,latin-ext</a> becomes <a href=\"http://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,800italic,800,700italic,700,600italic,600&amp;subset=latin,latin-ext&amp;trvhpqi=1409572193189\" rel=\"nofollow\">http://fonts.googleapis.com/css?family=Open+Sans:400,300,300italic,400italic,800italic,800,700italic,700,600italic,600&amp;subset=latin,latin-ext&amp;trvhpqi=1409572193189</a> (adds new query string param with date)</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>i now have this:</p>\n\n<pre><code>    function swapStyleSheet() {\n        var old = $('#pagestyle').attr('href');\n        var newCss = $('#changeCss').attr('href');\n        var sheet = newCss +Math.random(0,10);\n        $('#pagestyle').attr('href',sheet);\n        $('#profile').attr('href',old);\n        }\n    $(\"#changeCss\").on(\"click\", function(event) { \n        swapStyleSheet();\n    } );\n</code></pre>\n\n<p>make any element in your page with id changeCss with a href attribute with the new css url in it. and a link element with the starting css:</p>\n\n<pre><code>&lt;link id=\"pagestyle\" rel=\"stylesheet\" type=\"text/css\" href=\"css1.css?t=\" /&gt;\n\n&lt;img src=\"click.jpg\" id=\"changeCss\" href=\"css2.css?t=\"&gt;\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I'm trying to make a live, in-page css editor with a preview function that would reload the stylesheet and apply it without needing to reload the page. What would be the best way to go about this?</p>\n",
            "last_activity_date": 1415100503,
            "question_id": 2024486,
            "score": 50,
            "tags": [
                "javascript",
                "css",
                "stylesheet",
                "reload"
            ],
            "title": "Is there an easy way to reload css without reloading the page?"
        },
        {
            "answer_count": 4,
            "answers": [
                {
                    "body": "<p>That's <a href=\"http://api.jquery.com/on/#on-events-selector-data\">the other way around</a>. You should write:</p>\n\n<pre><code>$(\"table.planning_grid\").on({\n    mouseenter: function() {\n        // Handle mouseenter...\n    },\n    mouseleave: function() {\n        // Handle mouseleave...\n    },\n    click: function() {\n        // Handle click...\n    }\n}, \"td\");\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 109
                },
                {
                    "body": "<p>Also, if you had multiple event handlers attached to the same selector executing the same function, you could use </p>\n\n<pre><code>    $('table.planning_grid').on('mouseenter mouseleave', function() {\n        ...\n    }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 26
                },
                {
                    "body": "<p>And you can combine same events/functions in this way:</p>\n\n<pre><code>$(\"table.planning_grid\").on({\n    mouseenter: function() {\n        // Handle mouseenter...\n    },\n    mouseleave: function() {\n        // Handle mouseleave...\n    },\n    'click blur paste' : function() {\n        // Handle click...\n    }\n}, \"input\");\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>I learned something really useful and fundamental from <a href=\"http://try.jquery.com/levels/4/sections/11\" rel=\"nofollow\">http://try.jquery.com/levels/4/sections/11</a>.</p>\n\n<p>chaining which works on <strong>on</strong> function output too</p>\n\n<pre><code>function showPhotos() {\n    $(this).find(\"span\").slideToggle();\n  }\n  $(\".photos\").on(\"mouseenter\", \"li\", showPhotos)\n              .on(\"mouseleave\", \"li\", showPhotos);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Trying to figure out how to use the Jquery .on() method with a specific selector that has multiple events associated with it.  I was previously using the .live() method, but not quite sure how to accomplish the same feat with .on().  Please see my code below:</p>\n\n<pre><code>$(\"table.planning_grid td\").live({\n  mouseenter:function(){\n     $(this).parent(\"tr\").find(\"a.delete\").show();\n  },\n  mouseleave:function(){\n     $(this).parent(\"tr\").find(\"a.delete\").hide();        \n  },\n  click:function(){\n    //do something else.\n  }\n});\n</code></pre>\n\n<p>I know I can assign the multiple events by calling:</p>\n\n<pre><code> $(\"table.planning_grid td\").on({\n    mouseenter:function(){  //see above\n    },\n    mouseleave:function(){ //see above\n    }\n    click:function(){ //etc\n    }\n  });\n</code></pre>\n\n<p>But I believe the proper use of .on() would be like so:</p>\n\n<pre><code>   $(\"table.planning_grid\").on('mouseenter','td',function(){});\n</code></pre>\n\n<p>Is there a way to accomplish this?  Or what is the best practice here?   I tried the code below, but no dice.  </p>\n\n<pre><code>$(\"table.planning_grid\").on('td',{\n   mouseenter: function(){ //event1 }, \n   mouseleave: function(){ //event2 },\n   click: function(){  //event3 }\n });\n</code></pre>\n\n<p>Thanks in advance!</p>\n",
            "last_activity_date": 1409928364,
            "question_id": 8608145,
            "score": 47,
            "tags": [
                "javascript",
                "jquery",
                "jquery-selectors",
                "jquery-1.7"
            ],
            "title": "JQuery .on() method with multiple event handlers to one selector"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>The only thing you can do is <a href=\"http://stackoverflow.com/questions/194397/how-can-i-obfuscate-javascript\">obfuscate</a> your code to make it more difficult to read. No matter what you do, if you want the javascript to execute in their browser they'll have to have the code.</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>From my knowledge, this is not possible.</p>\n\n<p>Your browser has to have access to JS files to be able to execute them. If the browser has access, then browser's user also has access.</p>\n\n<p>If you password protect your JS files, then the browser won't be able to access them, defeating the purpose of having JS in the first place.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Just off the top of my head, you could do something like this (if you can create server-side scripts, which it sounds like you can):</p>\n\n<p>Instead of loading the script like normal, send an AJAX request to a PHP page (it could be anything; I just use it myself). Have the PHP locate the file (maybe on a non-public part of the server), open it with <code>file_get_contents</code>, and return (read: <code>echo</code>) the contents as a string.</p>\n\n<p>When this string returns to the JavaScript, have it create a new <code>script</code> tag, populate its <code>innerHTML</code> with the code you just received, and attach the tag to the page. (You <em>might</em> have trouble with this; <code>innerHTML</code> may not be what you need, but you can experiment.)</p>\n\n<p>If you do this a lot, you might even want to set up a PHP page that accepts a GET variable with the script's name, so that you can dynamically grab different scripts using the same PHP. (Maybe you could use POST instead, to make it just a little harder for other people to see what you're doing. I don't know.)</p>\n\n<p><strong>EDIT:</strong> I thought you were only trying to hide the <em>location</em> of the script. This obviously wouldn't help much if you're trying to hide the script itself.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Forget it, this is not doable.</p>\n\n<p>No matter what you try it will not work. All a user needs to do to discover your code and it's location is to look in the net tab in <a href=\"http://getfirebug.com/\" rel=\"nofollow\">firebug</a> or use <a href=\"http://www.fiddler2.com/fiddler2/\" rel=\"nofollow\">fiddler</a> to see what requests are being made.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p><a href=\"http://code.google.com/closure/\" rel=\"nofollow\">Google Closure Compiler</a>, <a href=\"http://developer.yahoo.com/yui/compressor/\" rel=\"nofollow\">YUI compressor</a>, <a href=\"http://code.google.com/p/minify/\" rel=\"nofollow\">Minify</a>, <a href=\"http://dean.edwards.name/packer/\" rel=\"nofollow\">/Packer/</a>... etc, are options for compressing/obfuscating your JS codes. But none of them can help you from hiding your code from the users. </p>\n\n<p>Anyone with decent knowledge can easily decode/de-obfuscate your code using tools like <a href=\"http://jsbeautifier.org/\" rel=\"nofollow\">JS Beautifier</a>. You name it.</p>\n\n<p>So the answer is, you can always make your code harder to read/decode, but for sure there is no way to hide.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<h3>Good question with a simple answer: <strong>you can't</strong>!</h3>\n\n<p>Javascript is a client-side programming language, therefore it works on the client's machine, so you can't actually hide anything from the client.<br>\nObfuscating your code is a good solution, but it's not enough, because, although it is hard, someone could decipher your code and \"steal\" your script.<br>\nThere are a few ways of making your code hard to be stolen, but as i said nothing is bullet-proof.  </p>\n\n<p>Off the top of my head, one idea is to restrict access to your external js files from outside the page you embed your code in. In that case, if you have  </p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"myJs.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>and someone tries to access the <em>myJs.js</em> file in browser, he shouldn't be granted any access to the script source.<br>\nFor example, if your page is written in php, you can include the script via the <code>include</code> function and let the script decide if it's <em>safe</em>\" to return it's source.<br>\nIn this example, you'll need the external \"js\" (written in php) file <em>myJs.php</em> :  </p>\n\n<pre><code>&lt;?php\n    $URL = $_SERVER['SERVER_NAME'].$_SERVER['REQUEST_URI'];\n    if ($URL != \"my-domain.com/my-page.php\")\n    die(\"/\\*sry, no acces rights\\*/\");\n?&gt;\n// your obfuscated script goes here\n</code></pre>\n\n<p>that would be included in your main page <em>my-page.php</em> : </p>\n\n<pre><code>&lt;script type=\"text/javascript\"&gt;\n    &lt;?php include \"myJs.php\"; ?&gt;;\n&lt;/script&gt; \n</code></pre>\n\n<p>This way, only the browser could see the js file contents.    </p>\n\n<p>Another interesting idea is that at the end of your script, you delete the contents of your dom script element, so that after the browser evaluates your code, the code disappears :  </p>\n\n<pre><code>&lt;script id=\"erasable\" type=\"text/javascript\"&gt;\n    //your code goes here\n    document.getElementById('erasable').innerHTML = \"\";\n&lt;/script&gt;\n</code></pre>\n\n<p>These are all just simple hacks that cannot, and I can't stress this enough : cannot, fully protect your js code, but they can sure piss off someone who is trying to \"steal\" your code.   </p>\n\n<h3>Update:</h3>\n\n<p>I recently came across <a href=\"http://www.patrick-wied.at/blog/a-technique-for-hiding-your-javascript-code\">a very interesting article</a> written by <a href=\"http://www.patrick-wied.at/\">Patrick Weid</a> on how to hide your js code, and he reveals a different approach: you can encode your source code into an image! Sure, that's not bullet proof either, but it's another <em>fence</em> that you could build around your code.<br>\nThe idea behind this approach is that most browsers can use the canvas element to do pixel manipulation on images. And since the canvas pixel is represented by 4 values (rgba), each pixel can have a value in the range of 0-255. That means that you can store a character (actual it's ascii code) in every pixel. The rest of the encoding/decoding is trivial.<br>\nThanks, Patrick!</p>\n",
                    "is_accepted": true,
                    "score": 28
                },
                {
                    "body": "<p><a href=\"http://lee-le.com/#!blog-2012-12-06\">Read this</a>. It has a very nice way of hiding your code in both view source and debugging tool such as firebug. </p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I think the only way is to put required data on the server and allow only logged-in user to access the data as required (you can also make some calculations server side). This wont protect your javascript code but make it unoperatable without the server side code  </p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>As I said in the comment I left on gion_13 answer before (please read), you really can't. Not with javascript.</p>\n\n<p>If you don't want the code to be available client-side (= stealable without great efforts),\nmy suggestion would be to make use of PHP (ASP,Python,Perl,Ruby,JSP + Java-Servlets) that is processed server-side and only the results of the computation/code execution are served to the user. Or, if you prefer, even Flash or a Java-Applet that let client-side computation/code execution but are compiled and thus harder to reverse-engine (not impossible thus).</p>\n\n<p>Just my 2 cents.</p>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>I know it's impossible to hide source code but, for example, if I have to link a JavaScript file from my CDN to a web page and I don't want the people to know the location and/or content of this script, is this possible?</p>\n\n<p>For example, to link a script from a website, we use:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://somedomain.com/scriptxyz.js\"&gt;\n&lt;/script&gt;\n</code></pre>\n\n<p>Now, is possible to hide from the user where the script comes from, or hide the script content and still use it on a web page?</p>\n\n<p>For example, by saving it in my private CDN that needs password to access files, would that work? If not, what would work to get what I want?</p>\n",
            "last_activity_date": 1404912017,
            "question_id": 4766834,
            "score": 23,
            "tags": [
                "javascript",
                "webpage",
                "protection",
                "protect"
            ],
            "title": "How do I protect javascript files?"
        },
        {
            "answer_count": 8,
            "answers": [
                {
                    "body": "<pre><code>tag_story.splice(tag_story.indexOf(id_tag), 1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<pre><code>function removeValue(arr, value) {\n    for(var i = 0; i &lt; arr.length; i++) {\n        if(arr[i] === value) {\n            arr.splice(i, 1);\n            break;\n        }\n    }\n    return arr;\n}\n</code></pre>\n\n<p>This can be called like so:</p>\n\n<pre><code>removeValue(tag_story, 90);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>You'll want to use <code>.indexOf()</code> and <code>.splice()</code>. Something like:</p>\n\n<pre><code>tag_story.splice(tag_story.indexOf(90),1);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You'll want to use JavaScript's <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/splice?redirectlocale=en-US&amp;redirectslug=Core_JavaScript_1.5_Reference%2FGlobal_Objects%2FArray%2Fsplice\">Array <code>splice</code> method</a>:</p>\n\n<pre><code>var tag_story = [1,3,56,6,8,90],\n    id_tag = 90,\n    position = tag_story.indexOf(id_tag);\n\nif ( ~position ) tag_story.splice(position, 1);\n</code></pre>\n\n<p><strong>P.S.</strong> For an explanation of that cool <code>~</code> tilde shortcut, see this post:</p>\n\n<p><a href=\"http://stackoverflow.com/questions/18347033/how-to-shorten-my-conditional-statements/18347047#answer-18347047\"><strong>Using a <code>~</code> tilde with <code>indexOf</code> to check for the existence of an item in an array</strong></a>.</p>\n\n<hr>\n\n<p><strong>Note:</strong> IE &lt; 9 does not support <code>.indexOf()</code> on arrays. If you want to make sure your code works in IE, you should use jQuery's <code>$.inArray()</code>:</p>\n\n<pre><code>var tag_story = [1,3,56,6,8,90],\n    id_tag = 90,\n    position = $.inArray(id_tag, tag_story);\n\nif ( ~position ) tag_story.splice(position, 1);\n</code></pre>\n\n<hr>\n\n<p>If you want to support IE &lt; 9 but don't already have jQuery on the page, there's no need to use it <em>just</em> for <code>$.inArray</code>. You can use <a href=\"https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/Array/indexOf#Compatibility\">this polyfill</a> instead.</p>\n",
                    "is_accepted": true,
                    "score": 185
                },
                {
                    "body": "<p>If you're going to be using this often (and on multiple arrays), extend the Array object to create an unset function. </p>\n\n<pre><code>Array.prototype.unset = function(value) {\n    if(this.indexOf(value) != -1) { // Make sure the value exists\n        this.splice(this.indexOf(value), 1);\n    }   \n}\n\ntag_story.unset(56)\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 14
                },
                {
                    "body": "<p>As a variant</p>\n\n<pre><code>delete array[array.indexOf(item)];\n</code></pre>\n\n<p>If you know nothing about <code>delete</code> operator, <strong>DON'T use this</strong>.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Here are some helper functions I use:</p>\n\n<pre><code>Array.contains = function (arr, key) {\n    for (var i = arr.length; i--;) {\n        if (arr[i] === key) return true;\n    }\n    return false;\n};\n\nArray.add = function (arr, key, value) {\n    for (var i = arr.length; i--;) {\n        if (arr[i] === key) return arr[key] = value;\n    }\n    this.push(key);\n};\n\nArray.remove = function (arr, key) {\n    for (var i = arr.length; i--;) {\n        if (arr[i] === key) return arr.splice(i, 1);\n    }\n};\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I like to use filter:</p>\n\n<pre><code>var id_tag = [1,2,3,78,5,6,7,8,47,34,90];\n\n// delete where id_tag = 90\nid_tag = id_tag.filter(function(x) {\n    if (x !== 90) {\n      return x;\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>My situation:</p>\n\n<pre><code>var id_tag = [1,2,3,78,5,6,7,8,47,34,90];\n</code></pre>\n\n<p>Now I would like to be able to delete an element of this array by <code>id_tag</code>. </p>\n\n<p>For example, I would like to <em><code>delete where id_tag = 90</code></em> and return</p>\n\n<pre><code>var id_tag = [1,2,3,78,5,6,7,8,47,34];\n</code></pre>\n\n<p>How can I do that?</p>\n",
            "last_activity_date": 1418909646,
            "question_id": 7142890,
            "score": 102,
            "tags": [
                "javascript",
                "arrays"
            ],
            "title": "Javascript - remove an array element by value"
        },
        {
            "answer_count": 6,
            "answers": [
                {
                    "body": "<p>Because '0' is not equal 1, so it is not equal to true, though it is not false.\nIn the first case, when '0' is casted to bool, casting operator returns true for everything that is not 0.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>That's because <code>'0'</code> is trueish (in an if statement), but not considered equal to <code>true</code>. Just like both 3 and 17 are trueish, but not equal.</p>\n",
                    "is_accepted": false,
                    "score": -3
                },
                {
                    "body": "<p>Mostly because JavaScript is pretty darn inconsistent when it comes to truth-iness. But the answer is:</p>\n\n<ol>\n<li>In this case, '0' is converted directly to a Boolean, and '0', being a non-empty string, is true.</li>\n<li>In this case, no conversion takes place; a string is not equal to a boolean value.</li>\n</ol>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>('0' ? 'a' : 'b') --> 0 is false, '0' is some string therefore NOT FALSE\n0,null or '' (empty string) is treated as FALSE in this case</p>\n\n<p>('0' == true ? 'a' : 'b') --> as mentioned by others some_string compared to boolean TRUE is NOT TRUE</p>\n",
                    "is_accepted": false,
                    "score": -4
                },
                {
                    "body": "<pre><code>('0' ? 'a' : 'b'); /* -&gt; 'a' */\n</code></pre>\n\n<p>0 is a <strong>string value</strong>, every <strong>non-empty string</strong> is evaluated as <strong>true</strong>, and not tested as boolean. If quotes are removed:</p>\n\n<pre><code>(0 ? 'a' : 'b'); /* -&gt; 'b' */\n</code></pre>\n\n<p>you will receive b - now <strong>0</strong> is not a string and evaluated as false!</p>\n\n<pre><code>('0' == true ? 'a' : 'b'); /* -&gt; 'b' */\n</code></pre>\n\n<p><strike>0 is evaluated as bool</strike> Both are evaluated as numbers, which is false. Point <strong><em><a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_11.9.3\" rel=\"nofollow\">11.9.3 The Abstract Equality Comparison Algorithm</a></em></strong> from the <strong><em><a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\" rel=\"nofollow\">specs</a></em></strong> show that a number of conversions may be executed to compare the same type of variables.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>First, for completeness:</p>\n\n<pre><code>('0' ? 'a' : 'b') \n</code></pre>\n\n<p>is <code>'a'</code>, because <code>'0'</code> is <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_9.2\">a <strong>non-empty</strong> string, which always evaluates to <code>true</code></a>:</p>\n\n<blockquote>\n  <p>String: The result is <strong>false</strong> if the argument is the empty String (its length is zero);\n  otherwise the result is <strong>true</strong>.</p>\n</blockquote>\n\n<hr>\n\n<p>Now to <code>'0' == true</code>.</p>\n\n<p>Two type conversions will take place here. We can follow this in the specification, <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_11.9.3\">section 11.9.3, The Abstract Equality Comparison Algorithm</a>.</p>\n\n<p>The operands are denoted as <code>x</code> and <code>y</code> (<code>x == y</code>). </p>\n\n<p>In our case, <code>x</code> is a string (<code>'0'</code>) and <code>y</code> is a Boolean (<code>true</code>). Hence step 7 is executed:</p>\n\n<blockquote>\n  <p>If Type(y) is Boolean, return the result of the comparison x == ToNumber(y).</p>\n</blockquote>\n\n<p>When booleans are converted to numbers, <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_9.3\">the following conversion takes place</a>:</p>\n\n<blockquote>\n  <p>Boolean: The result is <strong>1</strong> if the argument is <strong>true</strong>. The result is <strong>+0</strong> if the argument is <strong>false</strong>.</p>\n</blockquote>\n\n<p>Now we have </p>\n\n<pre><code>'0' == 1\n</code></pre>\n\n<p>which matches the condition in step 5:</p>\n\n<blockquote>\n  <p>If Type(x) is String and Type(y) is Number, return the result of the comparison ToNumber(x) == y.</p>\n</blockquote>\n\n<p>How strings are converted to numbers is more complex but of course can also be found in the <a href=\"http://ecma262-5.com/ELS5_HTML.htm#Section_9.3.1\">specification</a>.</p>\n\n<p>So the final comparison is</p>\n\n<pre><code>0 == 1\n</code></pre>\n\n<p>which is <code>false</code> (step 1. a. vi.)</p>\n",
                    "is_accepted": true,
                    "score": 191
                }
            ],
            "body": "<p>Why is the result of the following two statements different?</p>\n\n<pre class=\"lang-js prettyprint-override\"><code>('0' ? 'a' : 'b') /* -&gt; 'a' */\n('0' == true ? 'a' : 'b') /* -&gt; 'b' */\n</code></pre>\n\n<p><a href=\"http://jsfiddle.net/bAffD/\">jsFiddle testcase</a></p>\n\n<p>Edit:</p>\n\n<p>I should add that I suspect the '0' first statement to be cast to boolean to be compared - which should be exactly the same as \" '0' == true \"\nObviously this is not true.</p>\n",
            "last_activity_date": 1324717682,
            "question_id": 7496727,
            "score": 98,
            "tags": [
                "javascript"
            ],
            "title": "Why does (&#39;0&#39; ? &#39;a&#39; : &#39;b&#39;) behave different than (&#39;0&#39; == true ? &#39;a&#39; : &#39;b&#39;)"
        },
        {
            "answer_count": 5,
            "answers": [
                {
                    "body": "<p>If you are using jQuery 1.2 or newer, you can simply use these:</p>\n\n<pre><code>$(window).width();\n$(document).width();\n$(window).height();\n$(document).height();\n</code></pre>\n\n<p>From there it is a simple matter to decide the height of your element.</p>\n",
                    "is_accepted": true,
                    "score": 67
                },
                {
                    "body": "<pre><code>$(function(){\n    $(window).resize(function(){\n        var h = $(window).height();\n        var w = $(window).width();\n        $(\"#elementToResize\").css('height',(h &lt; 768 || w &lt; 1024) ? 500 : 400);\n    });\n});\n</code></pre>\n\n<p>Scrollbars etc have an effect on the window size so you may want to tweak to desired size.</p>\n",
                    "is_accepted": false,
                    "score": 47
                },
                {
                    "body": "<p>Building on Chad's answer, you also want to add that function to the onload event to ensure it is resized when the page loads as well.</p>\n\n<pre><code>jQuery.event.add(window, \"load\", resizeFrame);\njQuery.event.add(window, \"resize\", resizeFrame);\n\nfunction resizeFrame() \n{\n    var h = $(window).height();\n    var w = $(window).width();\n    $(\"#elementToResize\").css('height',(h &lt; 768 || w &lt; 1024) ? 500 : 400);\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 23
                },
                {
                    "body": "<p>I have the feeling that the check should be different</p>\n\n<p>new:\nh &lt; 768 || w &lt; 1024</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Pay attention, there is a bug with Jquery 1.8.0, $(window).height() returns the all document height !</p>\n",
                    "is_accepted": false,
                    "score": 4
                }
            ],
            "body": "<p>I was wondering if there was a way to determine the height/width of a browser.\nWhat i'm trying to do is set  a height on a div to 500px when the browser size is 1024x768, and for anything lower i'd like to set it to 400px.</p>\n\n<p>Thanks in advance</p>\n",
            "last_activity_date": 1363787706,
            "question_id": 838137,
            "score": 41,
            "tags": [
                "javascript",
                "jquery",
                "browser",
                "screen"
            ],
            "title": "Jquery Change Height based on Browser Size/Resize"
        },
        {
            "answer_count": 11,
            "answers": [
                {
                    "body": "<p><a href=\"http://flesler.blogspot.com/2007/10/jqueryscrollto.html\">jQuery.scrollTo</a> will do everything you want and more!</p>\n\n<p>You can pass it all kinds of different things:</p>\n\n<ul>\n<li>A raw number</li>\n<li>A string('44', '100px', '+=30px', etc )</li>\n<li>A DOM element (logically, child of the scrollable element)</li>\n<li>A selector, that will be relative to the scrollable element</li>\n<li>The string 'max' to scroll to the end.</li>\n<li>A string specifying a percentage to scroll to that part of the container (f.e: 50% goes to *  to the middle).</li>\n<li>A hash { top:x, left:y }, x and y can be any kind of number/string like above.</li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 11
                },
                {
                    "body": "<p>I would use the simple code snippet from CSS-Tricks.com:</p>\n\n<p><a href=\"http://css-tricks.com/snippets/jquery/smooth-scrolling/\">http://css-tricks.com/snippets/jquery/smooth-scrolling/</a></p>\n",
                    "is_accepted": false,
                    "score": 31
                },
                {
                    "body": "<p>Here's the code I used to quickly bind jQuery scrollTo to all anchor links:</p>\n\n<pre><code>// Smooth scroll\n$('a[href*=#]').click(function () {\n    var hash = $(this).attr('href');\n    hash = hash.slice(hash.indexOf('#') + 1);\n    $.scrollTo(hash == 'top' ? 0 : 'a[name='+hash+']', 500);\n    window.location.hash = '#' + hash;\n    return false;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 4
                },
                {
                    "body": "<p>Here is how I do it:</p>\n\n<pre><code>    var hashTagActive = \"\";\n    $(\".scroll\").click(function (event) {\n        if(hashTagActive != this.hash) { //this will prevent if the user click several times the same link to freeze the scroll.\n            event.preventDefault();\n            //calculate destination place\n            var dest = 0;\n            if ($(this.hash).offset().top &gt; $(document).height() - $(window).height()) {\n                dest = $(document).height() - $(window).height();\n            } else {\n                dest = $(this.hash).offset().top;\n            }\n            //go to destination\n            $('html,body').animate({\n                scrollTop: dest\n            }, 2000, 'swing');\n            hashTagActive = this.hash;\n        }\n    });\n</code></pre>\n\n<p>Then you just need to create your anchor like this:</p>\n\n<pre><code>&lt;a class=\"scroll\" href=\"#destination1\"&gt;Destination 1&lt;/a&gt;\n</code></pre>\n\n<p>You can see it on my <a href=\"http://hanoo.org\">website</a>.<br>\nA demo is also available here: <a href=\"http://jsfiddle.net/YtJcL/\">http://jsfiddle.net/YtJcL/</a></p>\n",
                    "is_accepted": true,
                    "score": 87
                },
                {
                    "body": "<p>Best solution I have seen so far:\n<a href=\"http://www.sycha.com/jquery-smooth-scrolling-internal-anchor-links\" rel=\"nofollow\">jQuery: Smooth Scrolling Internal Anchor Links</a></p>\n\n<p>HTML:</p>\n\n<pre><code>&lt;a href=\"#comments\" class=\"scroll\"&gt;Scroll to comments&lt;/a&gt;\n</code></pre>\n\n<p>Script:</p>\n\n<pre><code>jQuery(document).ready(function($) {\n    $(\".scroll\").click(function(event){     \n        event.preventDefault();\n        $('html,body').animate({scrollTop:$(this.hash).offset().top}, 500);\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 7
                },
                {
                    "body": "<p><strong>I used in my site this:</strong></p>\n\n<pre><code>$(document).ready(function(){\n$('a[href^=\"#\"]').on('click',function (e) {\n    e.preventDefault();\n\n    var target = this.hash,\n    $target = $(target);\n\n    $('html, body').stop().animate({\n        'scrollTop': $target.offset().top\n    }, 1200, 'swing', function () {\n        window.location.hash = target;\n    });\n});\n</code></pre>\n\n<p>});</p>\n\n<p><strong>You could change the speed of the scrolling changing the \"1200\" i used by default, it works fairly well on most of the browsers.</strong> </p>\n\n<p>after putting the code between the <code>&lt;head&gt; &lt;/head&gt;</code> tag of your page, you will need to create the internal link in your <code>&lt;body&gt;</code> tag: </p>\n\n<pre><code>&lt;a href=\"#home\"&gt;Go to Home&lt;/a&gt;\n</code></pre>\n\n<p>Hope it helps!</p>\n\n<p>Ps: Dont forget to call:</p>\n\n<p><code>&lt;script src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js\"&gt;&lt;/script&gt;</code></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I used the plugin <strong>Smooth Scroll</strong>, at <a href=\"http://plugins.jquery.com/smooth-scroll/\" rel=\"nofollow\">http://plugins.jquery.com/smooth-scroll/</a>. With this plugin all you need to include is a link to jQuery and to the plugin code:</p>\n\n<pre><code>&lt;script type=\"text/javascript\" src=\"http://ajax.googleapis.com/ajax/libs/jquery/1.7.1/jquery.min.js\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\" src=\"javascript/smoothscroll.js\"&gt;&lt;/script&gt;\n</code></pre>\n\n<p>(the links need to have the class <code>smoothScroll</code> to work).</p>\n\n<p>Another feature of <strong>Smooth Scroll</strong> is that the ancor name is not displayed in the URL!</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Using <a href=\"http://stackoverflow.com/a/12714767/65387\">hanoo's script</a> I created a jQuery function:</p>\n\n<pre><code>$.fn.scrollIntoView = function(duration, easing) {\n    var dest = 0;\n    if (this.offset().top &gt; $(document).height() - $(window).height()) {\n        dest = $(document).height() - $(window).height();\n    } else {\n        dest = this.offset().top;\n    }\n    $('html,body').animate({\n        scrollTop: dest\n    }, duration, easing);\n    return this;\n};\n</code></pre>\n\n<p>usage:</p>\n\n<pre><code>$('#myelement').scrollIntoView();\n</code></pre>\n\n<p>Defaults for duration and easing are 400ms and \"swing\".</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>works</p>\n\n<pre><code>$('a[href*=#]').each(function () {\n    $(this).attr('href', $(this).attr('href').replace('#', '#_'));\n    $(this).on( \"click\", function() {\n\n        var hashname = $(this).attr('href').replace('#_', '');\n\n        if($(this).attr('href') == \"#_\") {\n            $('html, body').animate({ scrollTop: 0 }, 300);\n        }\n        else {\n            var target = $('a[name=\"' + hashname + '\"], #' + hashname),\n                targetOffset = target.offset().top;\n            if(targetOffset &gt;= 1) {\n                $('html, body').animate({ scrollTop: targetOffset-60 }, 300);\n            }\n        }\n    });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I hate adding function-named classes to my code, so I put this together instead. If I were to stop using smooth scrolling, I'd feel behooved to go through my code, and delete all the class=\"scroll\" stuff. Using this technique, I can comment out 5 lines of JS, and the entire site updates. :)</p>\n\n<pre><code>&lt;a href=\"/about\"&gt;Smooth&lt;/a&gt;&lt;!-- will never trigger the function --&gt;\n&lt;a href=\"#contact\"&gt;Smooth&lt;/a&gt;&lt;!-- but he will --&gt;\n...\n...\n&lt;div id=\"contact\"&gt;...&lt;/div&gt;\n\n\n&lt;script src=\"jquery.js\" type=\"text/javascript\"&gt;&lt;/script&gt;\n&lt;script type=\"text/javascript\"&gt;\n    // Smooth scrolling to element IDs\n    $('a[href^=#]:not([href=#])').on('click', function () {\n        var element = $($(this).attr('href'));\n        $('html,body').animate({ scrollTop: element.offset().top },'normal', 'swing');\n        return false;\n    });\n&lt;/script&gt;\n</code></pre>\n\n<p><strong>Requirements</strong>:<br>\n1. <code>&lt;a&gt;</code> elements must have an href attribute that begin with <code>#</code> and be more than just <code>#</code><br>\n2. An element on the page with a matching <code>id</code> attribute\n<br><br>\nWhat it does:<br>\n1. The function uses the href value to create the <code>anchorID</code> object<br>\n   &nbsp;&nbsp;&nbsp;- In the example, it's <code>$('#contact')</code>, <code>/about</code> starts with <code>/</code><br>\n2. <code>HTML</code>, and <code>BODY</code> are animated to the top offset of <code>anchorID</code><br>\n   &nbsp;&nbsp;&nbsp;- speed = 'normal' ('fast','slow', milliseconds, )<br>\n   &nbsp;&nbsp;&nbsp;- easing = 'swing' ('linear',etc ... google easing)<br>\n3. <code>return false</code> -- it prevents the browser from showing the hash in the URL<br>\n   &nbsp;&nbsp;&nbsp;- the script works without it, but it's not as \"<em>smooth</em>\".</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Try this one. It is a code from CSS tricks that I modified, it is pretty straight forward and does both horizontal and vertial scrolling. Needs JQuery. Here is a <a href=\"http://plnkr.co/edit/jdVlxGi16Bq7TToV0oMJ?p=preview\" rel=\"nofollow\">demo</a></p>\n\n<pre><code>$(function() {\n  $('a[href*=#]:not([href=#])').click(function() {\n    if (location.pathname.replace(/^\\//,'') == this.pathname.replace(/^\\//,'') &amp;&amp; location.hostname == this.hostname) {\n      var target = $(this.hash);\n      target = target.length ? target : $('[name=' + this.hash.slice(1) +']');\n      if (target.length) {\n        $('html,body').animate({\n          scrollTop: target.offset().top-10, scrollLeft:target.offset().left-10\n        }, 1000);\n        return false;\n      }\n    }\n  });\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>is there any way to scroll down to an anchor link with jquery?</p>\n\n<p>like: </p>\n\n<pre><code>$(document).ready(function(){\n  $(\"#gotomyanchor\").click(function(){\n      $.scrollSmoothTo($(\"#myanchor\"));\n  });\n});\n</code></pre>\n\n<p>?</p>\n",
            "last_activity_date": 1417801241,
            "question_id": 4198041,
            "score": 40,
            "tags": [
                "javascript",
                "jquery"
            ],
            "title": "jquery smooth scroll to an anchor?"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>according to <a href=\"http://docs.angularjs.org/api/ng.filter:orderBy\" rel=\"nofollow\">http://docs.angularjs.org/api/ng.filter:orderBy</a> , orderBy sorts an array.\nIn your case you're passing an object, so You'll have to implement Your own sorting function.</p>\n\n<p>or pass an array - </p>\n\n<pre><code>$scope.testData = {\n    C: {name:\"CData\", order: 1},\n    B: {name:\"BData\", order: 2},\n    A: {name:\"AData\", order: 3},\n}\n</code></pre>\n\n<p>take a look at <a href=\"http://jsfiddle.net/qaK56/\" rel=\"nofollow\">http://jsfiddle.net/qaK56/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>As you can see in the code of angular-JS ( <a href=\"https://github.com/angular/angular.js/blob/master/src/ng/filter/orderBy.js\" rel=\"nofollow\">https://github.com/angular/angular.js/blob/master/src/ng/filter/orderBy.js</a> ) ng-repeat does not work with objects. Here is a hack with sortFunction. </p>\n\n<p><a href=\"http://jsfiddle.net/sunnycpp/qaK56/33/\" rel=\"nofollow\">http://jsfiddle.net/sunnycpp/qaK56/33/</a></p>\n\n<pre><code>&lt;div ng-app='myApp'&gt;\n    &lt;div ng-controller=\"controller\"&gt;\n    &lt;ul&gt;\n        &lt;li ng-repeat=\"test in testData | orderBy:sortMe()\"&gt;\n            Order = {{test.value.order}} -&gt; Key={{test.key}} Name=:{{test.value.name}}\n        &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n\nmyApp.controller('controller', ['$scope', function ($scope) {\n\n    var testData = {\n        a:{name:\"CData\", order: 2},\n        b:{name:\"AData\", order: 3},\n        c:{name:\"BData\", order: 1}\n    };\n    $scope.testData = _.map(testData, function(vValue, vKey) {\n        return { key:vKey, value:vValue };\n    }) ;\n    $scope.sortMe = function() {\n        return function(object) {\n            return object.value.order;\n        }\n    }\n}]);\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p><strong>Angular now supports this natively, the following answer is outdated but kept for reference, see comments.</strong></p>\n\n<p>AngularJS' orderBy filter does just support arrays - no objects. So you have to write an own small filter, which does the sorting for you.</p>\n\n<p>Here is my <strong>orderObjectBy</strong> filter for AngularJS:</p>\n\n<pre><code>app.filter('orderObjectBy', function(){\n return function(input, attribute) {\n    if (!angular.isObject(input)) return input;\n\n    var array = [];\n    for(var objectKey in input) {\n        array.push(input[objectKey]);\n    }\n\n    array.sort(function(a, b){\n        a = parseInt(a[attribute]);\n        b = parseInt(b[attribute]);\n        return a - b;\n    });\n    return array;\n }\n});\n</code></pre>\n\n<p>Usage in your view:</p>\n\n<pre><code>&lt;div class=\"item\" ng-repeat=\"item in items | orderObjectBy:'position'\"&gt;\n    //...\n&lt;/div&gt;\n</code></pre>\n\n<p>The object needs in this example a position attribute, but you have the flexibility to use any attribute in objects (containing an integer), just by definition in view.</p>\n\n<p>Example JSON:</p>\n\n<pre><code>{\n    \"123\": {\"name\": \"Test B\", \"position\": \"2\"},\n    \"456\": {\"name\": \"Test A\", \"position\": \"1\"}\n}\n</code></pre>\n\n<p>Here is a fiddle which shows you the usage:\n<a href=\"http://jsfiddle.net/4tkj8/1/\" rel=\"nofollow\">http://jsfiddle.net/4tkj8/1/</a></p>\n",
                    "is_accepted": true,
                    "score": 65
                },
                {
                    "body": "<p>Don't forget that parseInt() only works for Integer values. To sort string values you need to swap this:</p>\n\n<pre><code>array.sort(function(a, b){\n  a = parseInt(a[attribute]);\n  b = parseInt(b[attribute]);\n  return a - b;\n});\n</code></pre>\n\n<p>with this:</p>\n\n<pre><code>array.sort(function(a, b){\n  var alc = a[attribute].toLowerCase(),\n      blc = b[attribute].toLowerCase();\n  return alc &gt; blc ? 1 : alc &lt; blc ? -1 : 0;\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>It's pretty easy, just do it like this</p>\n\n<pre><code>$scope.props = [{order:\"1\"},{order:\"5\"},{order:\"2\"}]\n\nng-repeat=\"prop in props | orderBy:'order'\"\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 16
                },
                {
                    "body": "<p>You should really improve your JSON structure to fix your problem:</p>\n\n<pre><code>$scope.testData = [\n   {name:\"CData\", order: 1},\n   {name:\"BData\", order: 2},\n   {name:\"AData\", order: 3},\n]\n</code></pre>\n\n<p>Then you could do</p>\n\n<pre><code>&lt;li ng-repeat=\"test in testData | orderBy:order\"&gt;...&lt;/li&gt;\n</code></pre>\n\n<p>The problem, I think, is that the (key, value) variables are not available to the orderBy filter, and you should not be storing data in your keys anyways</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>Here is what i did and it works.<br>\nI just used a stringified object.</p>\n\n<pre><code>$scope.thread = [ \n  {\n    mostRecent:{text:'hello world',timeStamp:12345678 } \n    allMessages:[]\n  }\n  {MoreThreads...}\n  {etc....}\n]\n</code></pre>\n\n<p><code>&lt;div ng-repeat=\"message in thread | orderBy : '-mostRecent.timeStamp'\" &gt;</code></p>\n\n<p>if i wanted to sort by text i would do  </p>\n\n<pre><code>orderBy : 'mostRecent.text'\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                }
            ],
            "body": "<p>What I am trying to do is sort some data by property. Here is example that I tought should work but it doesn't.</p>\n\n<p>HTML part:</p>\n\n<pre><code>&lt;div ng-app='myApp'&gt;\n    &lt;div ng-controller=\"controller\"&gt;\n    &lt;ul&gt;\n        &lt;li ng-repeat=\"(key, value) in testData | orderBy:'value.order'\"&gt;\n            {{value.order}}. {{key}} -&gt; {{value.name}}\n        &lt;/li&gt;\n    &lt;/ul&gt;\n    &lt;/div&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>JS part:</p>\n\n<pre><code>var myApp = angular.module('myApp', []);\n\nmyApp.controller('controller', ['$scope', function ($scope) {\n\n    $scope.testData = {\n        C: {name:\"CData\", order: 1},\n        B: {name:\"BData\", order: 2},\n        A: {name:\"AData\", order: 3},\n    }\n\n}]);\n</code></pre>\n\n<p>And the result:</p>\n\n<blockquote>\n  <ol>\n  <li>A -> AData</li>\n  <li>B -> BData</li>\n  <li>C -> CData</li>\n  </ol>\n</blockquote>\n\n<p>... that IMHO should look like this:</p>\n\n<blockquote>\n  <ol>\n  <li>C -> CData</li>\n  <li>B -> BData</li>\n  <li>A -> AData</li>\n  </ol>\n</blockquote>\n\n<p>Did I miss something (here is ready <a href=\"http://jsfiddle.net/xZEnK/14/\">JSFiddle</a> to experiment on)?</p>\n",
            "last_activity_date": 1425559771,
            "question_id": 14478106,
            "score": 38,
            "tags": [
                "javascript",
                "angularjs"
            ],
            "title": "AngularJS sorting by property"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>So I'm answering to myself \u2014 and sorry for that\u00a0\u2014 but I think it might be useful for someone as lost as I was\u00a0;)</p>\n\n<p>So you have to use <a href=\"https://developer.mozilla.org/en/JavaScript_typed_arrays/ArrayBuffer\">ArrayBuffer</a> and set the <code>responseType</code> property of your <code>XMLHttpRequest</code> object instance to <code>arraybuffer</code> for retrieving a native array of Bytes, which can be converted to base64 using the following convenient function (found <a href=\"https://gist.github.com/958841\">there</a>, author may be blessed here):</p>\n\n<pre><code>function base64ArrayBuffer(arrayBuffer) {\n  var base64    = ''\n  var encodings = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n\n  var bytes         = new Uint8Array(arrayBuffer)\n  var byteLength    = bytes.byteLength\n  var byteRemainder = byteLength % 3\n  var mainLength    = byteLength - byteRemainder\n\n  var a, b, c, d\n  var chunk\n\n  // Main loop deals with bytes in chunks of 3\n  for (var i = 0; i &lt; mainLength; i = i + 3) {\n    // Combine the three bytes into a single integer\n    chunk = (bytes[i] &lt;&lt; 16) | (bytes[i + 1] &lt;&lt; 8) | bytes[i + 2]\n\n    // Use bitmasks to extract 6-bit segments from the triplet\n    a = (chunk &amp; 16515072) &gt;&gt; 18 // 16515072 = (2^6 - 1) &lt;&lt; 18\n    b = (chunk &amp; 258048)   &gt;&gt; 12 // 258048   = (2^6 - 1) &lt;&lt; 12\n    c = (chunk &amp; 4032)     &gt;&gt;  6 // 4032     = (2^6 - 1) &lt;&lt; 6\n    d = chunk &amp; 63               // 63       = 2^6 - 1\n\n    // Convert the raw binary segments to the appropriate ASCII encoding\n    base64 += encodings[a] + encodings[b] + encodings[c] + encodings[d]\n  }\n\n  // Deal with the remaining bytes and padding\n  if (byteRemainder == 1) {\n    chunk = bytes[mainLength]\n\n    a = (chunk &amp; 252) &gt;&gt; 2 // 252 = (2^6 - 1) &lt;&lt; 2\n\n    // Set the 4 least significant bits to zero\n    b = (chunk &amp; 3)   &lt;&lt; 4 // 3   = 2^2 - 1\n\n    base64 += encodings[a] + encodings[b] + '=='\n  } else if (byteRemainder == 2) {\n    chunk = (bytes[mainLength] &lt;&lt; 8) | bytes[mainLength + 1]\n\n    a = (chunk &amp; 64512) &gt;&gt; 10 // 64512 = (2^6 - 1) &lt;&lt; 10\n    b = (chunk &amp; 1008)  &gt;&gt;  4 // 1008  = (2^6 - 1) &lt;&lt; 4\n\n    // Set the 2 least significant bits to zero\n    c = (chunk &amp; 15)    &lt;&lt;  2 // 15    = 2^4 - 1\n\n    base64 += encodings[a] + encodings[b] + encodings[c] + '='\n  }\n\n  return base64\n}\n</code></pre>\n\n<p>So here's a working code:</p>\n\n<pre><code>var xhr = new XMLHttpRequest();\nxhr.open('GET', 'http://some.tld/favicon.png', false);\nxhr.responseType = 'arraybuffer';\nxhr.onload = function(e) {\n    console.log(base64ArrayBuffer(e.currentTarget.response));\n};\nxhr.send();\n</code></pre>\n\n<p>This will log a <em>valid</em> base64 encoded string representing the binary file contents.</p>\n\n<p><em>Edit:</em> For older browsers not having access to <code>ArrayBuffer</code> and having <code>btoa()</code> failing on encoding characters, here's another way to get a base64 encoded version of any binary:</p>\n\n<pre><code>function getBinary(file){\n    var xhr = new XMLHttpRequest();\n    xhr.open(\"GET\", file, false);\n    xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n    xhr.send(null);\n    return xhr.responseText;\n}\n\nfunction base64Encode(str) {\n    var CHARS = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n    var out = \"\", i = 0, len = str.length, c1, c2, c3;\n    while (i &lt; len) {\n        c1 = str.charCodeAt(i++) &amp; 0xff;\n        if (i == len) {\n            out += CHARS.charAt(c1 &gt;&gt; 2);\n            out += CHARS.charAt((c1 &amp; 0x3) &lt;&lt; 4);\n            out += \"==\";\n            break;\n        }\n        c2 = str.charCodeAt(i++);\n        if (i == len) {\n            out += CHARS.charAt(c1 &gt;&gt; 2);\n            out += CHARS.charAt(((c1 &amp; 0x3)&lt;&lt; 4) | ((c2 &amp; 0xF0) &gt;&gt; 4));\n            out += CHARS.charAt((c2 &amp; 0xF) &lt;&lt; 2);\n            out += \"=\";\n            break;\n        }\n        c3 = str.charCodeAt(i++);\n        out += CHARS.charAt(c1 &gt;&gt; 2);\n        out += CHARS.charAt(((c1 &amp; 0x3) &lt;&lt; 4) | ((c2 &amp; 0xF0) &gt;&gt; 4));\n        out += CHARS.charAt(((c2 &amp; 0xF) &lt;&lt; 2) | ((c3 &amp; 0xC0) &gt;&gt; 6));\n        out += CHARS.charAt(c3 &amp; 0x3F);\n    }\n    return out;\n}\n\nconsole.log(base64Encode(getBinary('http://www.google.fr/images/srpr/logo3w.png')));\n</code></pre>\n\n<p>Hope this helps others as it did for me.</p>\n",
                    "is_accepted": true,
                    "score": 44
                }
            ],
            "body": "<p>I'm trying to download a binary file using <code>XMLHttpRequest</code> (using a recent Webkit) and base64-encode its contents using this simple function:</p>\n\n<pre><code>function getBinary(file){\n    var xhr = new XMLHttpRequest();  \n    xhr.open(\"GET\", file, false);  \n    xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");  \n    xhr.send(null);\n    return xhr.responseText;\n}\n\nfunction base64encode(binary) {\n    return btoa(unescape(encodeURIComponent(binary)));\n}\n\nvar binary = getBinary('http://some.tld/sample.pdf');\nvar base64encoded = base64encode(binary);\n</code></pre>\n\n<p>As a side note, everything above is standard Javascript stuff, including <code>btoa()</code> and <code>encodeURIComponent()</code>: <a href=\"https://developer.mozilla.org/en/DOM/window.btoa\">https://developer.mozilla.org/en/DOM/window.btoa</a></p>\n\n<p>This works pretty smoothly, and I can even decode the base64 contents using Javascript:</p>\n\n<pre><code>function base64decode(base64) {\n    return decodeURIComponent(escape(atob(base64)));\n}\n\nvar decodedBinary = base64decode(base64encoded);\ndecodedBinary === binary // true\n</code></pre>\n\n<p>Now, I want to decode the base64-encoded contents using Python which consume some JSON string to get the <code>base64encoded</code> string value. Naively this is what I do:</p>\n\n<pre><code>import urllib\nimport base64\n# ... retrieving of base64 encoded string through JSON\nbase64 = \"77+9UE5HDQ\u2026\u2026\u2026\u2026\u2026oaCgA=\"\nsource_contents = urllib.unquote(base64.b64decode(base64))\ndestination_file = open(destination, 'wb')\ndestination_file.write(source_contents)\ndestination_file.close()\n</code></pre>\n\n<p>But the resulting file is invalid, looks like the operation's messaed up with UTF-8, encoding or something which is still unclear to me.</p>\n\n<p>If I try to decode UTF-8 contents before putting them in the destination file, an error is raised:</p>\n\n<pre><code>import urllib\nimport base64\n# ... retrieving of base64 encoded string through JSON\nbase64 = \"77+9UE5HDQ\u2026\u2026\u2026\u2026\u2026oaCgA=\"\nsource_contents = urllib.unquote(base64.b64decode(base64)).decode('utf-8')\ndestination_file = open(destination, 'wb')\ndestination_file.write(source_contents)\ndestination_file.close()\n\n$ python test.py\n// ...\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\ufffd' in position 0: ordinal not in range(128)\n</code></pre>\n\n<p>As a side note, here's a screenshot of two textual representations of a same file; on left: the original; on right: the one created from the base64-decoded string: <a href=\"http://cl.ly/0U3G34110z3c132O2e2x\">http://cl.ly/0U3G34110z3c132O2e2x</a></p>\n\n<p>Is there a known trick to circumvent these problems with encoding when attempting to recreating the file? How would you achieve this yourself?</p>\n\n<p>Any help or hint much appreciated\u00a0:)</p>\n",
            "last_activity_date": 1315821372,
            "question_id": 7370943,
            "score": 23,
            "tags": [
                "javascript",
                "python",
                "encoding",
                "xmlhttprequest",
                "base64"
            ],
            "title": "Retrieving binary file content using Javascript, base64 encode it and reverse-decode it using Python"
        },
        {
            "answer_count": 13,
            "answers": [
                {
                    "body": "<p>These are 2 different ways, you may try:</p>\n\n<ul>\n<li><p>You can use <a href=\"http://code.google.com/apis/maps/documentation/geocoding/#ReverseGeocoding\">Google Maps Reverse Geocoding</a> . In result set you can determine whether it is water by checking <code>types</code>. In waters case the type is <code>natural_feature</code>. See more at this link <a href=\"http://code.google.com/apis/maps/documentation/geocoding/#Types\">http://code.google.com/apis/maps/documentation/geocoding/#Types</a>.</p>\n\n<p>Also you need to check the names of features, if they contain <code>Sea, Lake, Ocean</code> and some other words related to waters for more accuracy. For example the deserts also are <code>natural_feature</code>s.</p>\n\n<p><strong>Prons</strong> - All detection process will be done on client's machine.No need of creating own server side service.</p>\n\n<p><strong>Cons</strong>  - Very inaccurate and the chances you will get \"none\" at waters is very high.</p></li>\n<li><p>You can detect waters/lands by pixels, by using <a href=\"http://code.google.com/apis/maps/documentation/staticmaps/index.html\">Google Static Maps</a>. But for this purpose you need to create http service. </p>\n\n<p>These are steps your service must perform:</p>\n\n<ol>\n<li>Receive <code>latitude</code>,<code>longitude</code> and <code>current zoom</code> from client.</li>\n<li>Send <code>http://maps.googleapis.com/maps/api/staticmap?center={</code>latitude<code>,</code>longitude<code>}&amp;zoom={</code>current zoom`}&amp;size=1x1&amp;maptype=roadmap&amp;sensor=false request to Google Static Map service.</li>\n<li>Detect pixel's color of 1x1 static image.</li>\n<li>Respond an information about detection.</li>\n</ol>\n\n<p>You can't detect pixel's color in client side. Yes , you can load static image on client's machine and draw image on <code>canvas</code> element. But you can't use <code>getImageData</code> of canvas's context for getting pixel's color. This is restricted by cross domain policy.    </p>\n\n<p><strong>Prons</strong> - Highly accurate detection</p>\n\n<p><strong>Cons</strong>  - Use of own server resources for detection</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 33
                },
                {
                    "body": "<p>In addition to the reverse geocoding -- as <a href=\"http://stackoverflow.com/users/459897/dr-molle\">Dr Molle</a> has pointed out, it may return ZERO_RESULTS -- you could use the Elevation service. If you get zero results by reverse geocoding, get the elevation of the location. Generally the sea gets a negative number as the seabed is below sea level. There's a fully-worked example of the elevation service at <a href=\"http://www.daftlogic.com/sandbox-google-maps-find-altitude.htm\" rel=\"nofollow\">http://www.daftlogic.com/sandbox-google-maps-find-altitude.htm</a>.</p>\n\n<p>Bear in mind that as Google don't make this information available any other method is just a guess and guesses are inherently inaccurate. However using the <code>type</code> returned by reverse geocoding, or the elevation if <code>type</code> is not available, will cover most eventualities.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>This method is totally unreliable.\nIn fact, the returned data will totally depend on what part of the world you are working with.\nFor example, I am working in France.\nIf I click on the sea on the coast of France, Google will return the nearest LAND location it can \"guess\" at.\nWhen I requested information from Google for this same question, they answered that they are unable to accurately return that the point requested in on a water mass.</p>\n\n<p>Not a very satisfactory answer, I know.\nThis is quite frustrating, especially for those of us who provide the user with the ability to click on the map to define a marker position.</p>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>Unfortunately this answer isn't within the Google Maps API and the referenced resource is not free, but there's a web service provided by DynamicGeometry that exposes an operation <code>GetWaterOrLand</code> which accepts a latitude/longitude pair (<a href=\"http://www.dyngeometry.com/web/WaterOrLand.aspx\" rel=\"nofollow\">you can see a demo here</a>).</p>\n\n<p>My understanding of how this is implemented is by using water body shape files. How exactly these shape files are used with the Google Maps API, but you might be able to get some insight from the linked demo.</p>\n\n<p>Hope that helps in some way.</p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>This what I use and it is working not too bad... you can improve the test if you have more cpu to waste by adding pixels.</p>\n\n<pre><code>function isItWatter($lat,$lng) {\n\n    $GMAPStaticUrl = \"https://maps.googleapis.com/maps/api/staticmap?center=\".$lat.\",\".$lng.\"&amp;size=40x40&amp;maptype=roadmap&amp;sensor=false&amp;zoom=12&amp;key=YOURAPIKEY\";  \n    //echo $GMAPStaticUrl;\n    $chuid = curl_init();\n    curl_setopt($chuid, CURLOPT_URL, $GMAPStaticUrl);   \n    curl_setopt($chuid, CURLOPT_RETURNTRANSFER, TRUE);\n    curl_setopt($chuid, CURLOPT_SSL_VERIFYPEER, FALSE);\n    $data = trim(curl_exec($chuid));\n    curl_close($chuid);\n    $image = imagecreatefromstring($data);\n\n    // this is for debug to print the image\n    ob_start();\n    imagepng($image);\n    $contents =  ob_get_contents();\n    ob_end_clean();\n    echo \"&lt;img src='data:image/png;base64,\".base64_encode($contents).\"' /&gt;\";\n\n    // here is the test : I only test 3 pixels ( enough to avoid rivers ... )\n    $hexaColor = imagecolorat($image,0,0);\n    $color_tran = imagecolorsforindex($image, $hexaColor);\n\n    $hexaColor2 = imagecolorat($image,0,1);\n    $color_tran2 = imagecolorsforindex($image, $hexaColor2);\n\n    $hexaColor3 = imagecolorat($image,0,2);\n    $color_tran3 = imagecolorsforindex($image, $hexaColor3);\n\n    $red = $color_tran['red'] + $color_tran2['red'] + $color_tran3['red'];\n    $green = $color_tran['green'] + $color_tran2['green'] + $color_tran3['green'];\n    $blue = $color_tran['blue'] + $color_tran2['blue'] + $color_tran3['blue'];\n\n    imagedestroy($image);\n    var_dump($red,$green,$blue);\n    //int(492) int(570) int(660) \n    if($red == 492 &amp;&amp; $green == 570 &amp;&amp; $blue == 660)\n        return 1;\n    else\n        return 0;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 5
                },
                {
                    "body": "<p>It doesn't seem possible with any current Google service. </p>\n\n<p>But there are other services, like <strong><a href=\"http://support.koordinates.com/entries/20182948\">Koordinates Vector JSON Query service</a></strong>! You simply query the data in the URL, and <strong>you get back a JSON/XML response</strong>.</p>\n\n<blockquote>\n  <p>Example request: <a href=\"http://api.koordinates.com/api/vectorQuery.json?key=YOUR_GEODATA_KEY&amp;layer=1298&amp;x=-159.9609375&amp;y=13.239945499286312&amp;max_results=3&amp;radius=10000&amp;geometry=true&amp;with_field_names=true\">http://api.koordinates.com/api/vectorQuery.json?key=YOUR_GEODATA_KEY&amp;layer=1298&amp;x=-159.9609375&amp;y=13.239945499286312&amp;max_results=3&amp;radius=10000&amp;geometry=true&amp;with_field_names=true</a></p>\n</blockquote>\n\n<p>You have to register and supply your key and selected layer number. You can search all their <a href=\"http://koordinates.com\">repository of available layers</a>. Most of the layers are only regional, but you can find global also, like the <a href=\"http://koordinates.com/#/layer/1298-world-coastline-110-million/webservices/\">World Coastline</a>:</p>\n\n<p><img src=\"http://i.stack.imgur.com/GrqDU.png\" alt=\"enter image description here\"></p>\n\n<p>When you select a layer, you click on the \"Services\" tab, you get the example request URL. I believe you just need to register and that's it!</p>\n\n<p>And now the best:</p>\n\n<h3><a href=\"http://support.koordinates.com/entries/21565415-Adding-Data-and-Metadata\">You can upload your layer!</a></h3>\n\n<p>It is not available right away, hey have to process it somehow, but it should work! The layer repository actually looks like people uploaded them as they needed.</p>\n",
                    "is_accepted": false,
                    "score": 8
                },
                {
                    "body": "<p>I would recommend rolling your own here.  You can use tools like <a href=\"http://www.gdal.org/\" rel=\"nofollow\">GDAL</a> to query the contents under a point in a shapefile.  You can get shapefiles for US geography from many sources including the <a href=\"http://www.census.gov/geo/maps-data/\" rel=\"nofollow\">US Census Bureau</a>.</p>\n\n<p>This can be done via GDAL binaries, the source C, or via swig in Java, Python, and more.</p>\n\n<p><a href=\"http://www.census.gov/geo/maps-data/\" rel=\"nofollow\">Census Maps</a></p>\n\n<p><a href=\"http://www.gdal.org/\" rel=\"nofollow\">GDAL Information</a></p>\n\n<p><a href=\"http://stackoverflow.com/questions/7861196/check-if-a-geopoint-with-latitude-and-longitude-is-within-a-shapefile\">Point Query Example in Python</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>Here's another example in pure JavaScript: <a href=\"http://jsfiddle.net/eUwMf/\" rel=\"nofollow\">http://jsfiddle.net/eUwMf/</a></p>\n\n<p>As you can see, the ideia is basically the same as rebe100x, getting the image from Google static map API, and read the first pixel:</p>\n\n<pre><code>$(\"#xGps, #yGps\").change(function() {\n    var img = document.getElementById('mapImg');\n\n    // Bypass the security issue : drawing a canvas from an external URL.\n    img.crossOrigin='anonymous';\n\n    var xGps = $(\"#xGps\").val();\n    var yGps = $(\"#yGps\").val();\n\n    var mapUrl = \"http://maps.googleapis.com/maps/api/staticmap?center=\" + xGps + \",\" + yGps +\n        \"&amp;zoom=14&amp;size=20x20&amp;maptype=roadmap&amp;sensor=false\";\n\n    // mapUrl += \"&amp;key=\" + key;\n\n    $(img).attr(\"src\", mapUrl);\n\n    var canvas = $('&lt;canvas/&gt;')[0];\n    canvas.width = img.width;\n    canvas.height = img.height;\n    canvas.getContext('2d').drawImage(img, 0, 0, img.width, img.height);\n\n    var pixelData = canvas.getContext('2d').getImageData(1, 1, 1, 1).data;\n\n    if (pixelData[0] == 164 &amp;&amp;\n        pixelData[1] == 190 &amp;&amp;\n        pixelData[2] == 220) {\n        $(\"#result\").html(\"Water\");\n    } else {\n        $(\"#result\").html(\"Not water\");\n    }\n});\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p><a href=\"http://stackoverflow.com/questions/9104908/random-geographic-coordinates\">See the answer I gave to a similar question</a> - it uses \"HIT_TEST_TERRAIN\" from the Earth Api to achieve the function. </p>\n\n<p>There is a working example of the idea I put together here: <a href=\"http://www.msa.mmu.ac.uk/~fraser/ge/coord/\" rel=\"nofollow\">http://www.msa.mmu.ac.uk/~fraser/ge/coord/</a></p>\n",
                    "is_accepted": false,
                    "score": 1
                },
                {
                    "body": "<p>I have a different solution here.\nIn current google map implementation, it does not calculate direction/distance from a water location to land location and vice versa. Why dont we use this logic to determine if the point is land or water.  </p>\n\n<p>For example lets take this example</p>\n\n<p>if we want to determine, if a point <code>x</code> is land or water, then </p>\n\n<p>let us check the direction between point <code>x</code> and a known point <code>y</code> which is land. If it determines the direction/distance then point <code>x</code> is land or else it is water. </p>\n",
                    "is_accepted": false,
                    "score": -1
                },
                {
                    "body": "<p>If all else fails you could always try checking the elevation at the point and for some distance about - not many things other than water tend to be completely flat.</p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>Checkout this article.  It accurately detects if something is on the water without needing a server.  It's a hack that relies on the custom styling feature in Google Maps.</p>\n\n<p><a href=\"http://tech.bellycard.com/blog/where-d-the-water-go-google-maps-water-pixel-detection-with-canvas/\" rel=\"nofollow\">http://tech.bellycard.com/blog/where-d-the-water-go-google-maps-water-pixel-detection-with-canvas/</a></p>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<p>I thought it was more interesting to do this query locally, so I can be more self-reliant: let's say I want to generate 25000 random land coordinates at once, I would rather want to avoid calls to possibly costly external APIs. Here is my shot at this in python, using the <a href=\"http://stackoverflow.com/a/13433127/1439597\">python example</a> mentionned by TomSchober. Basically it looks up the coordinates on a <a href=\"http://openstreetmapdata.com/data/land-polygons\" rel=\"nofollow\">pre-made 350MB file</a> containing all land coordinates, and if the coordinates exist in there, it prints them.</p>\n\n<pre><code>import ogr\nfrom IPython import embed\nimport sys\n\ndrv = ogr.GetDriverByName('ESRI Shapefile') #We will load a shape file\nds_in = drv.Open(\"land_polygons.shp\")    #Get the contents of the shape file\nlyr_in = ds_in.GetLayer(0)    #Get the shape file's first layer\n\n#Put the title of the field you are interested in here\nidx_reg = lyr_in.GetLayerDefn().GetFieldIndex(\"P_Loc_Nm\")\n\n#If the latitude/longitude we're going to use is not in the projection\n#of the shapefile, then we will get erroneous results.\n#The following assumes that the latitude longitude is in WGS84\n#This is identified by the number \"4236\", as in \"EPSG:4326\"\n#We will create a transformation between this and the shapefile's\n#project, whatever it may be\ngeo_ref = lyr_in.GetSpatialRef()\npoint_ref=ogr.osr.SpatialReference()\npoint_ref.ImportFromEPSG(4326)\nctran=ogr.osr.CoordinateTransformation(point_ref,geo_ref)\n\ndef check(lon, lat):\n    #Transform incoming longitude/latitude to the shapefile's projection\n    [lon,lat,z]=ctran.TransformPoint(lon,lat)\n\n    #Create a point\n    pt = ogr.Geometry(ogr.wkbPoint)\n    pt.SetPoint_2D(0, lon, lat)\n\n    #Set up a spatial filter such that the only features we see when we\n    #loop through \"lyr_in\" are those which overlap the point defined above\n    lyr_in.SetSpatialFilter(pt)\n\n    #Loop through the overlapped features and display the field of interest\n    for feat_in in lyr_in:\n        # success!\n        print lon, lat\n\ncheck(-95,47)\n</code></pre>\n\n<p>I tried a dozen coordinates, it works wonderfully. The \"land_polygons.shp\" file can be downloaded <a href=\"http://openstreetmapdata.com/data/land-polygons\" rel=\"nofollow\">here</a>, compliments of OpenStreetMaps. (I used the first WGS84 download link myself, maybe the second works as well)</p>\n",
                    "is_accepted": false,
                    "score": 2
                }
            ],
            "body": "<p>..and then Google-maps \"divide the waters from the waters\"</p>\n\n<p>Well, not in the biblical sense but..</p>\n\n<p>I would like to know what options I have in order to verify if a point of [Lat, Lon] is Land or Water.</p>\n\n<p>Google Maps obviously has this data (the bodies of water are blue) - but is there something in the API that I can use for that? And if not - are they not serving it because they never thought of it? Or because it is too complicated?</p>\n\n<p>I have not found any info on the matter - except some similar questions here (like finding type of terrain, or elevation - but it is not exactly what I need).</p>\n\n<p>Is there separated layer for that? An option? Command? Or should I go to do that manually?</p>\n\n<p>The only way that I can think of how to approach this (should I need to do that manually) is to check every served tile for the exact point - and then check RGB value for that Google map hue.\nThis is only on theory - because in practice - I have no idea how to accomplish that, the first obstacle being that I do not know how I can convert a pixel location on a tile to [LatLon] point for example </p>\n\n<p>A ready made solution would be much easier.</p>\n\n<p>Note that I do not need ALL the water in the world (for example - I do not care about streams, small ponds, most rivers or your neighbor's swimming pool. I need the points where a person can venture without the aid of a floating vehicle)</p>\n\n<p><strong>EDIT I</strong></p>\n\n<p>After reading comments:\nThe elevation method is not reliable, there are too many places BELOW sea-level (you can see a list of the \"deepest\" 10 here <a href=\"http://geology.com/below-sea-level/\">http://geology.com/below-sea-level/</a> ) and there are too many land-locked water bodies ABOVE sea level (lakes).\nThe reverse geolocation method is not reliable because it will return a Geo-political entity, like city, or state - or ZERO many times. \nI have already looked into those pseudo-solutions before asking the question - but none of them actually answered the question - those methods are bad \"guessing\" at best.</p>\n",
            "last_activity_date": 1421849129,
            "question_id": 9644452,
            "score": 58,
            "tags": [
                "javascript",
                "google-maps",
                "google-maps-api-3"
            ],
            "title": "Verify if a point is Land or Water in Google Maps"
        },
        {
            "answer_count": 7,
            "answers": [
                {
                    "body": "<p>What exactly are you doing in <code>//do stuff</code>?</p>\n\n<p>You may be able to do something like:</p>\n\n<pre><code>(scrollLeft &lt; 1000) ? //do stuff\n: (scrollLeft &gt; 1000 &amp;&amp; scrollLeft &lt; 2000) ? //do stuff\n: (scrollLeft &gt; 2000) ? //do stuff\n: //etc. \n</code></pre>\n",
                    "is_accepted": false,
                    "score": 2
                },
                {
                    "body": "<p>You can create a custom object with the criteria and the function corresponding to the criteria</p>\n\n<pre><code>var rules = [{ lowerLimit: 0,    upperLimit: 1000, action: function1 }, \n             { lowerLimit: 1000, upperLimit: 2000, action: function2 }, \n             { lowerLimit: 2000, upperLimit: 3000, action: function3 }];\n</code></pre>\n\n<p>Define functions for what you want to do in these cases (define function1, function2 etc)</p>\n\n<p>And \"evaluate\" the rules</p>\n\n<pre><code>function applyRules(scrollLeft)\n{\n   for(var i=0; i&gt;rules.length; i++)\n   {\n       var oneRule = rules[i];\n       if(scrollLeft &gt; oneRule.lowerLimit &amp;&amp; scrollLeft &lt; oneRule.upperLimit)\n       {\n          oneRule.action();\n       }\n   }\n}\n</code></pre>\n\n<p><em><strong>Note</strong></em></p>\n\n<blockquote>\n  <p>I hate using 30 if statements</p>\n</blockquote>\n\n<p>Many times if statements are easier to read and maintain.\nI would recommend the above only when you have a lot of conditions <em>and</em> a possibility of <em>lot of</em> growth in the future. </p>\n\n<p><em><strong>Update</strong></em><br>\nAs @Brad pointed out in the comments, if the conditions are mutually exclusive (only one of them can be true at a time), checking the upper limit should be sufficient:</p>\n\n<pre><code>if(scrollLeft &lt; oneRule.upperLimit)\n</code></pre>\n\n<p><em>provided</em> that the conditions are defined in ascending order (first the lowest one, <code>0 to 1000</code>, and then <code>1000 to 2000</code> for example)</p>\n",
                    "is_accepted": false,
                    "score": 6
                },
                {
                    "body": "<pre><code>switch (scrollLeft/1000) {\n  case 0: // (&lt;1000)\n   //do stuff\n   break;\n  case 1: // (&gt;=1000 &amp;&amp; &lt;2000)\n   //do stuff;\n   break;\n}\n</code></pre>\n\n<p>Only works if you have regular steps...</p>\n\n<p>EDIT: since this solution keeps getting upvotes, I must advice that <a href=\"http://stackoverflow.com/questions/6665997/switch-statement-for-greater-than-less-than#6666246\">mofolo's solution</a> is a way better</p>\n",
                    "is_accepted": false,
                    "score": 17
                },
                {
                    "body": "<p>Untested and unsure if this will work, but why not do a few <code>if statements</code> before, to set variables for the <code>switch statement</code>. </p>\n\n<pre><code>var small, big;\n\nif(scrollLeft &lt; 1000){\n    //add some token to the page\n    //call it small\n}\n\n\nswitch (//reference token/) {\n  case (small):\n   //do stuff\n   break;\n  case (big):\n   //do stuff;\n   break;\n}\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 3
                },
                {
                    "body": "<blockquote>\n  <p><em>Please note: The solution given in this answer can be a performance\n  killer. Benchmarking in September 2012 shows that it is considerably slower\n  compared to<code>if</code>-statements:  In Chrome it was 30 times slower. <a href=\"http://stackoverflow.com/a/12259830/36866\">more details (look at \"switch-range2\")</a></em>\n  /some</p>\n</blockquote>\n\n<p>An alternative:</p>\n\n<pre><code>var scrollleft = 1000;\nswitch (true)\n{\n    case (scrollleft &gt; 1000):\n      alert('gt');\n      break;\n   case (scrollleft &lt;= 1000):\n      alert('lt');\n      break; \n}\n</code></pre>\n\n<p>Demo: <a href=\"http://jsfiddle.net/UWYzr/\">http://jsfiddle.net/UWYzr/</a></p>\n",
                    "is_accepted": false,
                    "score": 54
                },
                {
                    "body": "<p>This is another option:</p>\n\n<pre><code>     switch (true) {\n         case (value &gt; 100):\n             //do stuff\n             break;\n         case (value &lt;= 100)&amp;&amp;(value &gt; 75):\n             //do stuff\n             break;\n         case (value &lt; 50):\n            //do stuff\n             break;\n     }\n</code></pre>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>When I looked at the solutions in the other answers I saw some tings that I know where bad for performance. I was going to put it in a comment but I thought it was better to benchmark it and share the results. You can <a href=\"http://jsfiddle.net/some/HKdug/\">test it yourself</a>. Below is my results (ymmv) normalized after the fastest operation in each browser (multiply the 1.0 time with the normalized value to get the absolute time in ms).</p>\n\n<pre>\n                    Chrome  Firefox Opera   MSIE    Safari  Node\n-------------------------------------------------------------------\n1.0 time               37ms    73ms    68ms   184ms    73ms    21ms\nif-immediate            1.0     1.0     1.0     2.6     1.0     1.0\nif-indirect             1.2     1.8     3.3     3.8     2.6     1.0\nswitch-immediate        2.0     1.1     2.0     1.0     2.8     1.3\nswitch-range           38.1    10.6     2.6     7.3    20.9    10.4\nswitch-range2          31.9     8.3     2.0     4.5     9.5     6.9\nswitch-indirect-array  35.2     9.6     4.2     5.5    10.7     8.6\narray-linear-switch     3.6     4.1     4.5    10.0     4.7     2.7\narray-binary-switch     7.8     6.7     9.5    16.0    15.0     4.9\n</pre>\n\n<p>Test where performed on Windows 7 32bit with the folowing versions: <em>Chrome 21.0.1180.89m</em>, <em>Firefox 15.0</em>, <em>Opera 12.02</em>, <em>MSIE 9.0.8112</em>, <em>Safari 5.1.7</em>. <em>Node</em> was run on a Linux 64bit box because the timer resolution on Node.js for Windows was 10ms instead of 1ms.</p>\n\n<h2>if-immediate</h2>\n\n<p>This is the fastest in all tested environments, except in ... <em>drumroll</em> MSIE! (surprise, surprise). This is the recommended way to implement it.</p>\n\n<pre><code>if (val &lt; 1000) { /*do something */ } else\nif (val &lt; 2000) { /*do something */ } else\n...\nif (val &lt; 30000) { /*do something */ } else\n</code></pre>\n\n<h2>if-indirect</h2>\n\n<p>This is a variant of <code>switch-indirect-array</code> but with <code>if</code>-statements instead and performs much faster than <code>switch-indirect-array</code> in almost all tested environments. </p>\n\n<pre><code>values=[\n   1000,  2000, ... 30000\n];\nif (val &lt; values[0]) { /* do something */ } else\nif (val &lt; values[1]) { /* do something */ } else\n...\nif (val &lt; values[29]) { /* do something */ } else\n</code></pre>\n\n<h2>switch-immediate</h2>\n\n<p>This is pretty fast in all tested environments, and actually the fastest in MSIE.\nIt works when you can do a calculation to get an index.  </p>\n\n<pre><code>switch (Math.floor(val/1000)) {\n  case 0: /* do something */ break;\n  case 1: /* do something */ break;\n  ...\n  case 29: /* do something */ break;\n}\n</code></pre>\n\n<h2>switch-range</h2>\n\n<p>This is about 6 to 40 times slower than the fastest in all tested environments except\nfor Opera where it takes about one and a half times as long. It is slow because the engine\nhas to compare the value twice for each case. Surprisingly it takes Chrome almost 40 times longer to complete this compared to the fastest operation in Chrome, while MSIE only takes 6 times as long. But the actual time difference was only 74ms in favor to MSIE at 1337ms(!).  </p>\n\n<pre><code>switch (true) {\n  case (0 &lt;= val &amp;&amp;  val &lt; 1000): /* do something */ break;\n  case (1000 &lt;= val &amp;&amp;  val &lt; 2000): /* do something */ break;\n  ...\n  case (29000 &lt;= val &amp;&amp;  val &lt; 30000): /* do something */ break;\n}\n</code></pre>\n\n<h2>switch-range2</h2>\n\n<p>This is a variant of <code>switch-range</code> but with only one compare per case and therefore faster, but still very slow except in Opera. The order of the case statement is important since the engine will test each case in source code order <a href=\"http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf\">ECMAScript262:5 12.11</a></p>\n\n<pre><code>switch (true) {\n  case (val &lt; 1000): /* do something */ break;\n  case (val &lt; 2000): /* do something */ break;\n  ...\n  case (val &lt; 30000): /* do something */ break;\n}\n</code></pre>\n\n<h2>switch-indirect-array</h2>\n\n<p>In this variant the ranges is stored in an array. This is slow in all tested environments and very slow in Chrome.</p>\n\n<pre><code>values=[1000,  2000 ... 29000, 30000];\n\nswitch(true) {\n  case (val &lt; values[0]): /* do something */ break;\n  case (val &lt; values[1]): /* do something */ break;\n  ...\n  case (val &lt; values[29]): /* do something */ break;\n}\n</code></pre>\n\n<h2>array-linear-search</h2>\n\n<p>This is a combination of a linear search of values in an array, and the switch\nstatement with fixed values. The reason one might want to use this is when the\nvalues isn't known until runtime. It is slow in every tested environment, and takes almost 10 times as long in MSIE.</p>\n\n<pre><code>values=[1000,  2000 ... 29000, 30000];\n\nfor (sidx=0, slen=values.length; sidx &lt; slen; ++sidx) {\n  if (val &lt; values[sidx]) break;\n}\n\nswitch (sidx) {\n  case 0: /* do something */ break;\n  case 1: /* do something */ break;\n  ...\n  case 29: /* do something */ break;\n}\n</code></pre>\n\n<h2>array-binary-switch</h2>\n\n<p>This is a variant of <code>array-linear-switch</code> but with a binary search.\nUnfortunately it is slower than the linear search. I don't know if it is my implementation or if the linear search is more optimized. It could also be that the keyspace is to small. </p>\n\n<pre><code>values=[0, 1000,  2000 ... 29000, 30000];\n\nwhile(range) {\n  range = Math.floor( (smax - smin) / 2 );\n  sidx = smin + range;\n  if ( val &lt; values[sidx] ) { smax = sidx; } else { smin = sidx; }\n}\n\nswitch (sidx) {\n  case 0: /* do something */ break;\n  ...\n  case 29: /* do something */ break;\n}\n</code></pre>\n\n<h1>Conclusion</h1>\n\n<p>If performance is important, use <code>if</code>-statements or <code>switch</code> with immediate values. </p>\n",
                    "is_accepted": true,
                    "score": 133
                }
            ],
            "body": "<p>so I want to use a switch statement like this:</p>\n\n<pre><code>switch (scrollLeft) {\n  case (&lt;1000):\n   //do stuff\n   break;\n  case (&gt;1000 &amp;&amp; &lt;2000):\n   //do stuff\n   break;\n}\n</code></pre>\n\n<p>Now I know that either of those statements (<code>&lt;1000</code>) or (<code>&gt;1000 &amp;&amp; &lt;2000</code>) won't work (for different reasons, obviously).  What I'm asking is the most efficient way to do just that.  I hate using 30 <code>if</code> statements, so I'd rather use the switch syntax.  Is there anything that I can do?</p>\n",
            "last_activity_date": 1423730673,
            "question_id": 6665997,
            "score": 52,
            "tags": [
                "javascript",
                "jquery",
                "comparison",
                "switch-statement"
            ],
            "title": "Switch statement for greater-than/less-than"
        },
        {
            "answer_count": 9,
            "answers": [
                {
                    "body": "<p>You could potentially make an Ajax call to the server from a try/catch, but that's probably about the best you can do.</p>\n\n<p>May I suggest JavaScript unit testing instead?  Possibly with <a href=\"https://github.com/pivotal/jsunit\" rel=\"nofollow\">JSUnit</a>?</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>You could try setting up your own handler for the <a href=\"http://developer.mozilla.org/En/DOM%3awindow.onerror\">onerror event</a> and use XMLHttpRequest to tell the server what went wrong, however since it's not part of any specification, <a href=\"http://www.quirksmode.org/dom/events/error.html\">support is somewhat flaky</a>.</p>\n\n<p>Here's an example from <a href=\"http://www.the-art-of-web.com/javascript/ajax-onerror/\">Using XMLHttpRequest to log JavaScript errors</a>:</p>\n\n<pre><code>window.onerror = function(msg, url, line)\n{\n  if(encodeURIComponent) {\n    var req = new AjaxRequest();\n    var params = \"msg=\" + encodeURIComponent(msg) + '&amp;amp;url=' + encodeURIComponent(url) + \"&amp;amp;line=\" + line;\n    req.setMethod(\"POST\");\n    return req.loadXMLDoc(\"&lt;i&gt;/scripts/logerror.php&lt;/i&gt;\", params);\n  }\n  return false;\n}\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 35
                },
                {
                    "body": "<p>Also I recomend using <a href=\"http://tracetool.sourceforge.net/\" rel=\"nofollow\">TraceTool</a> utility, it comes with JavaScript support and is very handy for JS monitoring.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you're wanting to log the client-side errors back to the server you're going to have to do some kind of server processing. Best bet would be to have a web service which you can access via JavaScript (AJAX) and you pass your error log info to it.</p>\n\n<p>Doesn't 100% solve the problem cuz if the problem is with the web server hosting the web service you're in trouble, you're other option would be to send the info via a standard page via a query string, One method of doing that is via dynamically generating Image tags (which are then removed) as the browser will try and load the source of an image. It gets around cross-domain JavaScript calls nicely though. Keep in mind that you're in trouble if someone has images turned off ;)</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>I have just implemented server side error logging on javascript errors on a project at work. There is a mixture of legacy code and new code using <a href=\"http://jquery.com/\" rel=\"nofollow\">jQuery</a>. </p>\n\n<p>I use a combination of <code>window.onerror</code> and wrapping the jQuery event handlers and onready function with an error handling function (see: <a href=\"http://blogs.cozi.com/tech/2008/04/javascript-error-tracking-why-windowonerror-is-not-enough.html\" rel=\"nofollow\">JavaScript Error Tracking: Why window.onerror Is Not Enough</a>).</p>\n\n<ul>\n<li><code>window.onerror</code>: catches all errrors in IE (and most errors in Firefox), but does nothing in Safari and Opera.</li>\n<li>jQuery event handlers: catches jQuery event errors in all browsers.</li>\n<li>jQuery ready function: catches initialisation errors in all browsers.</li>\n</ul>\n\n<p>Once I have caught the error, I add some extra properties to it (url, browser, etc) and then post it back to the server using an ajax call.</p>\n\n<p>On the server I have a small page which just takes the posted arguments and outputs them to our normal server logging framework.</p>\n\n<p><em>I would like to open source the code for this (as a jQuery plugin). If anyone is interested let me know, it would help to convince the bosses!</em></p>\n",
                    "is_accepted": false,
                    "score": 10
                },
                {
                    "body": "<p><strong>Short answer:</strong> Yes, it is possible.</p>\n\n<p><strong>Longer answer:</strong> People have already written about how you can (at least partially) solve this issue by writing your own code. However, do note that there are services out there that seems to have made sure the JS code needed works in many browsers. I've found the following:</p>\n\n<ul>\n<li><a href=\"http://trackjs.com\" rel=\"nofollow\">http://trackjs.com</a></li>\n<li><a href=\"http://jserrlog.appspot.com\" rel=\"nofollow\">http://jserrlog.appspot.com</a></li>\n<li><a href=\"http://www.exceptionhub.com\" rel=\"nofollow\">http://www.exceptionhub.com</a></li>\n<li><a href=\"http://www.erroralerts.com\" rel=\"nofollow\">http://www.erroralerts.com</a></li>\n<li><a href=\"http://muscula.com\" rel=\"nofollow\">http://muscula.com</a></li>\n<li><a href=\"https://www.atatus.com\" rel=\"nofollow\">https://www.atatus.com</a></li>\n</ul>\n\n<p>I can't speak for any of these services as I haven't tried them yet. However, I do note that ExceptionHub seems to have some <a href=\"http://www.exceptionhub.com/javascripts/error_track.js\" rel=\"nofollow\">thorough code</a>!</p>\n",
                    "is_accepted": false,
                    "score": 9
                },
                {
                    "body": "<p>I've been using <a href=\"https://appfail.net/\" rel=\"nofollow\">Appfail</a> recently, which captures both asp.net and JavaScript errors</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>If you use Google Analytics, you can log javascript errors into Google Analytics Events.</p>\n\n<p>See this app: <a href=\"http://siteapps.com/app/log_javascript_errors_with_ga-181\" rel=\"nofollow\">http://siteapps.com/app/log_javascript_errors_with_ga-181</a></p>\n\n<p>Hope it helps.</p>\n",
                    "is_accepted": false,
                    "score": 0
                },
                {
                    "body": "<p>It's worth trying <a href=\"http://jslogger.com\" rel=\"nofollow\">http://jslogger.com</a> that does what you are looking for. It  supports mobile devices as well.</p>\n",
                    "is_accepted": false,
                    "score": 1
                }
            ],
            "body": "<p>Im running a ASP.NET Site where I have problems to find some JavaScript Errors just with manual testing.</p>\n\n<p>Is there a possibility to catch all JavaScript Errors on the Clientside and log them on the Server i.e. in the EventLog (via Webservice or something like that)?</p>\n",
            "last_activity_date": 1423087048,
            "question_id": 119432,
            "score": 48,
            "tags": [
                "javascript",
                "logging",
                "error-handling"
            ],
            "title": "Logging Clientside JavaScript Errors on Server"
        },
        {
            "answer_count": 1,
            "answers": [
                {
                    "body": "<p>You are missing <code>$scope.$apply()</code>.</p>\n\n<p>Whenever you touch anything from outside of the Angular world, you need to call $apply, to notify Angular. That might be from:</p>\n\n<ul>\n<li>xhr callback (handled by $http service)</li>\n<li>setTimeout callback (handled by $defer service)</li>\n<li>DOM Event callback (handled by directives)</li>\n</ul>\n\n<p>In your case, do something like this:</p>\n\n<pre><code>// inject $rootScope and do $apply on it\nangular.service('Channel', function($rootScope) {\n  // ...\n  return {\n    init: function(channelId, clientId) {\n      // ...\n      socket.onmessage = function(msg) {\n        $rootScope.$apply(function() {\n          that.publish(args[0], args[1]);\n        });\n      };\n    }\n  };\n});\n</code></pre>\n",
                    "is_accepted": true,
                    "score": 103
                }
            ],
            "body": "<p>Updating the model property has no effect on the view when updating the model in event callback, any ideas to fix this?</p>\n\n<p>This is my service:\n    </p>\n\n<pre><code>angular.service('Channel', function() {        \n    var channel = null; \n\nreturn {        \n    init: function(channelId, clientId) {\n        var that = this;        \n\n        channel = new goog.appengine.Channel(channelId);\n        var socket = channel.open();\n\n        socket.onmessage = function(msg) {\n            var args = eval(msg.data);              \n            that.publish(args[0], args[1]);\n        };\n    }       \n};});\n</code></pre>\n\n<p><code>publish()</code> function was added dynamically in the controller.  </p>\n\n<p>Controller:</p>\n\n<pre><code>App.Controllers.ParticipantsController = function($xhr, $channel) {\n    var self = this;\n\n    self.participants = [];     \n\n    mediator.installTo($channel); // here publish function is added to service\n\n    $channel.subscribe('+p', function(name) { // subscribe was also added with publish      \n        self.add(name);     \n    });                 \n\n    self.add = function(name) {     \n        self.participants.push({ name: name });     \n    }\n};\nApp.Controllers.ParticipantsController.$inject = ['$xhr', 'Channel'];\n</code></pre>\n\n<p>View: </p>\n\n<pre><code>&lt;div ng:controller=\"App.Controllers.ParticipantsController\"&gt;      \n    &lt;ul&gt;\n    &lt;li ng:repeat=\"participant in participants\"&gt;&lt;label ng:bind=\"participant.name\"&gt;&lt;/label&gt;&lt;/li&gt;\n   &lt;/ul&gt;\n  &lt;button ng:click=\"add('test')\"&gt;add&lt;/button&gt;\n&lt;/div&gt;\n</code></pre>\n\n<p>So the problem is that clicking the button updates the view properly, but when I get the message from the Channel nothings happens, even the <code>add()</code> function is called</p>\n",
            "last_activity_date": 1334606457,
            "question_id": 10179488,
            "score": 44,
            "tags": [
                "javascript",
                "data-binding",
                "angularjs"
            ],
            "title": "The view is not updated in AngularJS"
        },
        {
            "answer_count": 3,
            "answers": [
                {
                    "body": "<p>A constructor returns an instance of the class you call it on. A factory function can return anything. You would use a factory function when you need to return arbitrary values or when a class has a large setup process. </p>\n",
                    "is_accepted": false,
                    "score": 19
                },
                {
                    "body": "<p>The basic difference is that a constructor function is used with the <code>new</code> keyword (which causes JavaScript to automatically create a new object, set <code>this</code> within the function to that object, and return the object):</p>\n\n<pre><code>var objFromConstructor = new ConstructorFunction();\n</code></pre>\n\n<p>A factory function is called like a \"regular\" function:</p>\n\n<pre><code>var objFromFactory = factoryFunction();\n</code></pre>\n\n<p>But for it to be considered a \"factory\" it would need to return a new instance of some object: you wouldn't call it a \"factory\" function if it just returned a boolean or something. This does not happen automatically like with <code>new</code>, but it does allow more flexibility for some cases.</p>\n\n<p>In a really simple example the functions referenced above might look something like this:</p>\n\n<pre><code>function ConstructorFunction() {\n   this.someProp1 = \"1\";\n   this.someProp2 = \"2\";\n}\nConstructorFunction.prototype.someMethod = function() { /* whatever */ };\n\nfunction factoryFunction() {\n   var obj = {\n      someProp1 : \"1\";\n      someProp2 : \"2\";\n   };\n   // other code to manipulate obj in some way here\n   return obj;\n}\n</code></pre>\n\n<p>Of course you can make factory functions much more complicated than that simple example.</p>\n\n<p>Some people prefer to use factory functions for everything just because they don't like having to remember to use <code>new</code> (EDIT: and this can be a problem because without <code>new</code> the function will still run but not as expected). I don't see that as an advantage: <code>new</code> is a core part of the language so to me deliberately avoiding it is a bit arbitrary - might as well avoid other keywords like <code>else</code>.</p>\n\n<p>One advantage to factory functions is when the object to be returned could be of several different types depending on some parameter.</p>\n",
                    "is_accepted": true,
                    "score": 46
                },
                {
                    "body": "<h1>Benefits of using constructors</h1>\n\n<ul>\n<li><p>Most books teach you to use constructors and <code>new</code></p></li>\n<li><p><code>this</code> refers to the new object</p></li>\n<li><p>Some people like the way <code>var myFoo = new Foo();</code> reads.</p></li>\n</ul>\n\n<h1>Drawbacks</h1>\n\n<ul>\n<li><p>Details of instantiation get leaked into the calling API (via the <code>new</code> requirement), so all callers are tightly coupled to the constructor implementation. If you ever need the additional flexibility of the factory, you'll have to refactor all callers (admittedly the exceptional case, rather than the rule).</p></li>\n<li><p>Forgetting <code>new</code> is such a common bug, you should strongly consider adding a boilerplate check to ensure that the constructor is called correctly ( <code>if (!(this instanceof Foo)) { return new Foo() }</code> ).</p></li>\n<li><p>If you do the <code>instanceof</code> check, it leaves ambiguity as to whether or not <code>new</code> is required. In my opinion, it shouldn't be. You've effectively short circuited the <code>new</code> requirement, which means you could erase drawback #1. But then <strong>you've just got a factory function in all but name</strong>, with additional boilerplate, a capital letter, and less flexible <code>this</code> context.</p></li>\n</ul>\n\n<h2>Constructors break the Open / Closed Principle</h2>\n\n<p>But my main concern is that it violates the open/closed principle. You start out exporting a constructor, users start using the constructor, then down the road you realize you need the flexibility of a factory, instead (for instance, to switch the implementation to use object pools, or to instantiate across execution contexts, or to have more inheritance flexibility using prototypal OO).</p>\n\n<p>You're stuck, though. You can't make the change without breaking all the code that calls your constructor with <code>new</code>. You can't switch to using object pools for performance gains, for instance.</p>\n\n<p>Also, using constructors gives you a deceptive <code>instanceof</code> that doesn't work across execution contexts, and doesn't work if your constructor prototype gets swapped out. It will also fail if you start out returning <code>this</code> from your constructor, and then switch to exporting an arbitrary object, which you'd have to do to enable factory-like behavior in your constructor.</p>\n\n<h1>Benefits of using factories</h1>\n\n<ul>\n<li><p>Less code - no boilerplate required.</p></li>\n<li><p>You can return any arbitrary object, and use any arbitrary prototype - giving you more flexibility to create various types of objects which implement the same API. For example, a media player that can create instances of both HTML5 and flash players, or an event library which can emit DOM events or web socket events. Factories can also instantiate objects across execution contexts, take advantage of object pools, and allow for more flexible prototypal inheritance models.</p></li>\n<li><p>You'd never have a need to convert from a factory to a constructor, so refactoring will never be an issue.</p></li>\n<li><p>No ambiguity about using <code>new</code>. Don't. (It will make <code>this</code> behave badly, see next point).</p></li>\n<li><p><code>this</code> behaves as it normally would - so you can use it to access the parent object (for example, inside <code>player.create()</code>, <code>this</code> refers to <code>player</code>, just like any other method invocation would. <code>call</code> and <code>apply</code> also reassign <code>this</code>, as expected. If you store prototypes on the parent object, that can be a great way to dynamically swap out functionality, and enable very flexible polymorphism for your object instantiation.</p></li>\n<li><p>No ambiguity about whether or not to capitalize. Don't. Lint tools will complain, and then you'll be tempted to try to use <code>new</code>, and then you'll undo the benefit described above.</p></li>\n<li><p>Some people like the way <code>var myFoo = foo();</code> or <code>var myFoo = foo.create();</code> reads.</p></li>\n</ul>\n\n<h1>Drawbacks</h1>\n\n<ul>\n<li><p><code>new</code> doesn't behave as expected (see above). Solution: don't use it.</p></li>\n<li><p><code>this</code> doesn't refer to the new object (instead, if the constructor is invoked with dot notation or square bracket notation, e.g. foo.bar() - <code>this</code> refers to <code>foo</code> - just like every other JavaScript method -- see benefits).</p></li>\n</ul>\n",
                    "is_accepted": false,
                    "score": 28
                }
            ],
            "body": "<p>Can someone clarify the difference between a constructor function and a factory function in Javascript.</p>\n\n<p>When to use one instead of the other?</p>\n",
            "last_activity_date": 1394128384,
            "question_id": 8698726,
            "score": 39,
            "tags": [
                "javascript",
                "oop"
            ],
            "title": "Constructor function vs Factory functions"
        }
    ]
}
